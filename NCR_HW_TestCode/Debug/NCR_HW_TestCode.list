
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c14c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800c290  0800c290  0001c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca5c  0800ca5c  0001ca5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000008  0800ca64  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  200001f0  0800cc4c  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000504  0800cc4c  00020504  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171f4  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e8b  00000000  00000000  00037414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  0003a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001648  00000000  00000000  0003ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021c8d  00000000  00000000  0003d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001606b  00000000  00000000  0005ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000db3c6  00000000  00000000  00074d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00150106  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007878  00000000  00000000  00150158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c274 	.word	0x0800c274

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800c274 	.word	0x0800c274

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <initModbus>:
 *
 * @param serialPort Pointer to the UART handle for Modbus communication.
 * @param EN_GPIOPort GPIO port for MODBUS_EN pin.
 * @param EN_GPIOPin GPIO pin for MODBUS_EN.
 */
void initModbus(UART_HandleTypeDef *serialPort, GPIO_TypeDef * EN_GPIOPort, uint16_t EN_GPIOPin){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]

	modbusSerial = *serialPort;
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <initModbus+0x34>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2394      	movs	r3, #148	; 0x94
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f006 fc53 	bl	800786c <memcpy>
	MODBUS_EN.port = EN_GPIOPort;
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <initModbus+0x38>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	6013      	str	r3, [r2, #0]
	MODBUS_EN.pin = EN_GPIOPin;
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <initModbus+0x38>)
 8000fd2:	711a      	strb	r2, [r3, #4]

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000214 	.word	0x20000214
 8000fe0:	2000020c 	.word	0x2000020c

08000fe4 <sendRaw>:
 *
 * @param modbusCMD Pointer to the raw Modbus command data.
 * @param cmdLen Length of the Modbus command data.
 * @param modbusResponse Pointer to the ModBus response structure.
 */
void sendRaw(uint8_t *modbusCMD, uint16_t cmdLen, ModBus_t *modbusResponse) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	460b      	mov	r3, r1
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	817b      	strh	r3, [r7, #10]

	// Clear response buffer and reset index
	memset(modbusResponse->buffer, '\0', sizeof(modbusResponse->buffer) * sizeof(modbusResponse->buffer[0]));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	2296      	movs	r2, #150	; 0x96
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fc44 	bl	8007888 <memset>
	modbusResponse->rxIndex = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]

	// Enable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_SET);
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <sendRaw+0x6c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <sendRaw+0x6c>)
 800100c:	7912      	ldrb	r2, [r2, #4]
 800100e:	b291      	uxth	r1, r2
 8001010:	2201      	movs	r2, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fefe 	bl	8002e14 <HAL_GPIO_WritePin>

	// Receive data using UART interrupt
	HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)modbusResponse->buffer, 1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3302      	adds	r3, #2
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <sendRaw+0x70>)
 8001022:	f004 fc85 	bl	8005930 <HAL_UART_Receive_IT>
//		printf("%02X ", modbusCMD[i]);
//	}
//	printf("\n");

	// Transmit the raw data
	Serial_Transmit(modbusCMD, cmdLen);
 8001026:	897b      	ldrh	r3, [r7, #10]
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f814 	bl	8001058 <Serial_Transmit>

	// Delay to ensure proper communication
	//HAL_Delay(1);

	// Disable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_RESET);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <sendRaw+0x6c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <sendRaw+0x6c>)
 8001036:	7912      	ldrb	r2, [r2, #4]
 8001038:	b291      	uxth	r1, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fee9 	bl	8002e14 <HAL_GPIO_WritePin>

	// Delay for stability
	HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f001 fb6c 	bl	8002720 <HAL_Delay>


}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000020c 	.word	0x2000020c
 8001054:	20000214 	.word	0x20000214

08001058 <Serial_Transmit>:
	HAL_Delay(10);

}

// Transmit data through UART
void Serial_Transmit(uint8_t *data, uint16_t length) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
    // Assuming UART1 has been initialized
    // Transmit data
    HAL_UART_Transmit(&modbusSerial, data, length, HAL_MAX_DELAY);
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <Serial_Transmit+0x24>)
 800106e:	f004 fbd1 	bl	8005814 <HAL_UART_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000214 	.word	0x20000214

08001080 <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2b95      	cmp	r3, #149	; 0x95
 800108e:	d810      	bhi.n	80010b2 <Modbus_RxCallback+0x32>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <Modbus_RxCallback+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	440b      	add	r3, r1
 80010a2:	709a      	strb	r2, [r3, #2]
        _ModbusResponse->rxIndex++;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	e002      	b.n	80010b8 <Modbus_RxCallback+0x38>


    } else {
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	801a      	strh	r2, [r3, #0]
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <Modbus_RxCallback+0x54>)
 80010c8:	f004 fc32 	bl	8005930 <HAL_UART_Receive_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000214 	.word	0x20000214

080010d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001114:	1d39      	adds	r1, r7, #4
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	2201      	movs	r2, #1
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <__io_putchar+0x20>)
 800111e:	f004 fb79 	bl	8005814 <HAL_UART_Transmit>
  return ch;
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002fc 	.word	0x200002fc

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b08d      	sub	sp, #52	; 0x34
 8001134:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f001 fa6d 	bl	8002614 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
  MCP23008_Init();
 800113a:	f000 fadb 	bl	80016f4 <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f93f 	bl	80013c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001142:	f000 f995 	bl	8001470 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fa89 	bl	800165c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800114a:	f000 f9ef 	bl	800152c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800114e:	f000 f9ad 	bl	80014ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001152:	f000 fa37 	bl	80015c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 8001156:	f000 facd 	bl	80016f4 <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 800115a:	f000 fb5d 	bl	8001818 <MCP23008_ConfigureInterrupts>

  // Initialize SHT20 Sensor
  SHT2x_Init(&hi2c1);
 800115e:	4885      	ldr	r0, [pc, #532]	; (8001374 <main+0x244>)
 8001160:	f001 f94a 	bl	80023f8 <SHT2x_Init>
  SHT2x_SetResolution(RES_14_12);
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fa2d 	bl	80025c4 <SHT2x_SetResolution>

  // Initialize Modbus
  initModbus(&huart1, MODBUS_EN_GPIO_Port, MODBUS_EN_Pin);
 800116a:	2210      	movs	r2, #16
 800116c:	4982      	ldr	r1, [pc, #520]	; (8001378 <main+0x248>)
 800116e:	4883      	ldr	r0, [pc, #524]	; (800137c <main+0x24c>)
 8001170:	f7ff ff1a 	bl	8000fa8 <initModbus>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8001174:	4b82      	ldr	r3, [pc, #520]	; (8001380 <main+0x250>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <main+0x254>)
 800117c:	4413      	add	r3, r2
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	487e      	ldr	r0, [pc, #504]	; (800137c <main+0x24c>)
 8001184:	f004 fbd4 	bl	8005930 <HAL_UART_Receive_IT>

  // Initialize timers;
  shtReadMillis = HAL_GetTick();
 8001188:	f001 fab2 	bl	80026f0 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <main+0x258>)
 8001190:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" # # # # # # # # # # -> %s\r\n ", FirmwareName);
 8001192:	497e      	ldr	r1, [pc, #504]	; (800138c <main+0x25c>)
 8001194:	487e      	ldr	r0, [pc, #504]	; (8001390 <main+0x260>)
 8001196:	f007 f9f9 	bl	800858c <iprintf>
  printf("# # # # # # # # # # -> Firmware Version %d.%d.%d\r\n ", VERSION_MAJOR, VERSION_MID, VERSION_MINOR);
 800119a:	2301      	movs	r3, #1
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	487c      	ldr	r0, [pc, #496]	; (8001394 <main+0x264>)
 80011a2:	f007 f9f3 	bl	800858c <iprintf>

#ifdef SCAN_I2C_DEVICES
  scanI2CDevices();
 80011a6:	f000 fc63 	bl	8001a70 <scanI2CDevices>
#endif

  WDTReset();
 80011aa:	f000 fc4b 	bl	8001a44 <WDTReset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Check for Unscheduled Transmission Requests
	  handleInterruptTriggers(TxTriggers);
 80011ae:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <main+0x268>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fdb8 	bl	8001d28 <handleInterruptTriggers>

  	  // Check Temperature Reading Every X Interval
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 80011b8:	f001 fa9a 	bl	80026f0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <main+0x258>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c8:	d92f      	bls.n	800122a <main+0xfa>
  		  sensors.sht20.temperature = SHT2x_GetTemperature(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f001 f974 	bl	80024b8 <SHT2x_GetTemperature>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	4b71      	ldr	r3, [pc, #452]	; (800139c <main+0x26c>)
 80011d6:	edc3 7a00 	vstr	s15, [r3]
  		  sensors.sht20.humidity = SHT2x_GetRelativeHumidity(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 f9b2 	bl	8002544 <SHT2x_GetRelativeHumidity>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <main+0x26c>)
 80011e6:	edc3 7a01 	vstr	s15, [r3, #4]

#ifdef SERIAL_DEBUG_SHT
  		printLineMarker('*');
 80011ea:	202a      	movs	r0, #42	; 0x2a
 80011ec:	f000 fc6a 	bl	8001ac4 <printLineMarker>
  		printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht20.temperature, sensors.sht20.humidity);
 80011f0:	4b6a      	ldr	r3, [pc, #424]	; (800139c <main+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f97f 	bl	80004f8 <__aeabi_f2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <main+0x26c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f978 	bl	80004f8 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	e9cd 2300 	strd	r2, r3, [sp]
 8001210:	4622      	mov	r2, r4
 8001212:	462b      	mov	r3, r5
 8001214:	4862      	ldr	r0, [pc, #392]	; (80013a0 <main+0x270>)
 8001216:	f007 f9b9 	bl	800858c <iprintf>
  		printLineMarker('*');
 800121a:	202a      	movs	r0, #42	; 0x2a
 800121c:	f000 fc52 	bl	8001ac4 <printLineMarker>
#endif
  		/// @TODO: Insert Threshold Control here for Unscheduled TX

  		shtReadMillis = HAL_GetTick();
 8001220:	f001 fa66 	bl	80026f0 <HAL_GetTick>
 8001224:	4603      	mov	r3, r0
 8001226:	4a58      	ldr	r2, [pc, #352]	; (8001388 <main+0x258>)
 8001228:	6013      	str	r3, [r2, #0]
  	  }

  	  // Read All Sensors every Y Interval
  	  if(HAL_GetTick() - sensorsReadMillis > DEVICE_HEARTBEAL){
 800122a:	f001 fa61 	bl	80026f0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <main+0x274>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	f240 8096 	bls.w	800136c <main+0x23c>

  		// Read SHT20
  		sensors.sht20.temperature = SHT2x_GetTemperature(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f001 f939 	bl	80024b8 <SHT2x_GetTemperature>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	4b54      	ldr	r3, [pc, #336]	; (800139c <main+0x26c>)
 800124c:	edc3 7a00 	vstr	s15, [r3]
	    sensors.sht20.humidity = SHT2x_GetRelativeHumidity(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f001 f977 	bl	8002544 <SHT2x_GetRelativeHumidity>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	4b50      	ldr	r3, [pc, #320]	; (800139c <main+0x26c>)
 800125c:	edc3 7a01 	vstr	s15, [r3, #4]

	    // Read Smoke Sensor
	    sensors.smoke = ReadSmokeStatus();
 8001260:	4c4e      	ldr	r4, [pc, #312]	; (800139c <main+0x26c>)
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fb5b 	bl	8001920 <ReadSmokeStatus>
 800126a:	f104 0308 	add.w	r3, r4, #8
 800126e:	463a      	mov	r2, r7
 8001270:	ca07      	ldmia	r2, {r0, r1, r2}
 8001272:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Read DryContacts
	    sensors.dryContact = MCP23008_ReadInputs();
 8001276:	4c49      	ldr	r4, [pc, #292]	; (800139c <main+0x26c>)
 8001278:	463b      	mov	r3, r7
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fa50 	bl	8001720 <MCP23008_ReadInputs>
 8001280:	f104 0314 	add.w	r3, r4, #20
 8001284:	463a      	mov	r2, r7
 8001286:	6810      	ldr	r0, [r2, #0]
 8001288:	6851      	ldr	r1, [r2, #4]
 800128a:	c303      	stmia	r3!, {r0, r1}
 800128c:	7a12      	ldrb	r2, [r2, #8]
 800128e:	701a      	strb	r2, [r3, #0]

	    // Read ModBus Device

	    sendRaw(getMeterDataCmd, GetMeterData_LEN, &ModbusResp);
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <main+0x250>)
 8001292:	2105      	movs	r1, #5
 8001294:	4844      	ldr	r0, [pc, #272]	; (80013a8 <main+0x278>)
 8001296:	f7ff fea5 	bl	8000fe4 <sendRaw>
	    HAL_Delay(2000); // Give time to receive response
 800129a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800129e:	f001 fa3f 	bl	8002720 <HAL_Delay>

#ifdef SCAN_I2C_DEVICES
  		scanI2CDevices();
 80012a2:	f000 fbe5 	bl	8001a70 <scanI2CDevices>
#endif

#ifdef SERIAL_DEBUG_SENSORS
	    printLineMarker('-');
 80012a6:	202d      	movs	r0, #45	; 0x2d
 80012a8:	f000 fc0c 	bl	8001ac4 <printLineMarker>
	    printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht20.temperature, sensors.sht20.humidity);
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <main+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f921 	bl	80004f8 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <main+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f91a 	bl	80004f8 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	e9cd 2300 	strd	r2, r3, [sp]
 80012cc:	4622      	mov	r2, r4
 80012ce:	462b      	mov	r3, r5
 80012d0:	4833      	ldr	r0, [pc, #204]	; (80013a0 <main+0x270>)
 80012d2:	f007 f95b 	bl	800858c <iprintf>
	    printf("Smoke Level -> Level %d \r\n", sensors.smoke.level);
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0x26c>)
 80012d8:	7c1b      	ldrb	r3, [r3, #16]
 80012da:	4619      	mov	r1, r3
 80012dc:	4833      	ldr	r0, [pc, #204]	; (80013ac <main+0x27c>)
 80012de:	f007 f955 	bl	800858c <iprintf>
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <main+0x26c>)
 80012e4:	7d5b      	ldrb	r3, [r3, #21]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012e6:	461d      	mov	r5, r3
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <main+0x26c>)
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012ec:	461e      	mov	r6, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <main+0x26c>)
 80012f0:	7ddb      	ldrb	r3, [r3, #23]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012f2:	469c      	mov	ip, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <main+0x26c>)
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012f8:	461a      	mov	r2, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <main+0x26c>)
 80012fc:	7e5b      	ldrb	r3, [r3, #25]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012fe:	4619      	mov	r1, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <main+0x26c>)
 8001302:	7e9b      	ldrb	r3, [r3, #26]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 8001304:	4618      	mov	r0, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <main+0x26c>)
 8001308:	7edb      	ldrb	r3, [r3, #27]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 800130a:	461c      	mov	r4, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <main+0x26c>)
 800130e:	7f1b      	ldrb	r3, [r3, #28]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 8001310:	9304      	str	r3, [sp, #16]
 8001312:	9403      	str	r4, [sp, #12]
 8001314:	9002      	str	r0, [sp, #8]
 8001316:	9101      	str	r1, [sp, #4]
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	4663      	mov	r3, ip
 800131c:	4632      	mov	r2, r6
 800131e:	4629      	mov	r1, r5
 8001320:	4823      	ldr	r0, [pc, #140]	; (80013b0 <main+0x280>)
 8001322:	f007 f933 	bl	800858c <iprintf>
	    printf("MODBUS RESPONSE (Hex): ");
 8001326:	4823      	ldr	r0, [pc, #140]	; (80013b4 <main+0x284>)
 8001328:	f007 f930 	bl	800858c <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00b      	b.n	800134a <main+0x21a>
	        printf("%02X ", ModbusResp.buffer[x]);
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <main+0x250>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	3302      	adds	r3, #2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <main+0x288>)
 8001340:	f007 f924 	bl	800858c <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <main+0x250>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4293      	cmp	r3, r2
 8001354:	dbed      	blt.n	8001332 <main+0x202>
	    }
	    printf(" \r\n");
 8001356:	4819      	ldr	r0, [pc, #100]	; (80013bc <main+0x28c>)
 8001358:	f007 f99e 	bl	8008698 <puts>
	    printLineMarker('-');
 800135c:	202d      	movs	r0, #45	; 0x2d
 800135e:	f000 fbb1 	bl	8001ac4 <printLineMarker>
#endif

  		sensorsReadMillis = HAL_GetTick();
 8001362:	f001 f9c5 	bl	80026f0 <HAL_GetTick>
 8001366:	4603      	mov	r3, r0
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <main+0x274>)
 800136a:	6013      	str	r3, [r2, #0]
  	  }

  	WDTReset();
 800136c:	f000 fb6a 	bl	8001a44 <WDTReset>
	  handleInterruptTriggers(TxTriggers);
 8001370:	e71d      	b.n	80011ae <main+0x7e>
 8001372:	bf00      	nop
 8001374:	200002a8 	.word	0x200002a8
 8001378:	48000400 	.word	0x48000400
 800137c:	20000390 	.word	0x20000390
 8001380:	20000428 	.word	0x20000428
 8001384:	2000042a 	.word	0x2000042a
 8001388:	200004e0 	.word	0x200004e0
 800138c:	0800c290 	.word	0x0800c290
 8001390:	0800c2ac 	.word	0x0800c2ac
 8001394:	0800c2cc 	.word	0x0800c2cc
 8001398:	20000424 	.word	0x20000424
 800139c:	200004c0 	.word	0x200004c0
 80013a0:	0800c300 	.word	0x0800c300
 80013a4:	200004e4 	.word	0x200004e4
 80013a8:	20000008 	.word	0x20000008
 80013ac:	0800c338 	.word	0x0800c338
 80013b0:	0800c354 	.word	0x0800c354
 80013b4:	0800c384 	.word	0x0800c384
 80013b8:	0800c39c 	.word	0x0800c39c
 80013bc:	0800c3a4 	.word	0x0800c3a4

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09a      	sub	sp, #104	; 0x68
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2248      	movs	r2, #72	; 0x48
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fa5a 	bl	8007888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <SystemClock_Config+0xac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <SystemClock_Config+0xac>)
 80013f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <SystemClock_Config+0xac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001402:	2322      	movs	r3, #34	; 0x22
 8001404:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2340      	movs	r3, #64	; 0x40
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001414:	2300      	movs	r3, #0
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0320 	add.w	r3, r7, #32
 8001424:	4618      	mov	r0, r3
 8001426:	f002 ff4b 	bl	80042c0 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001430:	f000 fd06 	bl	8001e40 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001434:	236f      	movs	r3, #111	; 0x6f
 8001436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f003 faa7 	bl	80049a8 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001460:	f000 fcee 	bl	8001e40 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3768      	adds	r7, #104	; 0x68
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58000400 	.word	0x58000400

08001470 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2250      	movs	r2, #80	; 0x50
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fa03 	bl	8007888 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800148c:	2310      	movs	r3, #16
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fec7 	bl	8005226 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800149e:	f000 fccf 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	f001 fcac 	bl	8002e44 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fca5 	bl	8001e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C1_Init+0x74>)
 80014fa:	f002 fab5 	bl	8003a68 <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fc9c 	bl	8001e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150c:	f002 faf7 	bl	8003afe <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fc93 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002a8 	.word	0x200002a8
 8001524:	40005400 	.word	0x40005400
 8001528:	00707cbb 	.word	0x00707cbb

0800152c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <MX_LPUART1_UART_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800153c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001576:	f004 f8fd 	bl	8005774 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 fc5e 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 8001588:	f006 f87b 	bl	8007682 <HAL_UARTEx_SetTxFifoThreshold>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001592:	f000 fc55 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4808      	ldr	r0, [pc, #32]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 800159a:	f006 f8b0 	bl	80076fe <HAL_UARTEx_SetRxFifoThreshold>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f000 fc4c 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_LPUART1_UART_Init+0x90>)
 80015aa:	f006 f831 	bl	8007610 <HAL_UARTEx_DisableFifoMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015b4:	f000 fc44 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002fc 	.word	0x200002fc
 80015c0:	40008000 	.word	0x40008000

080015c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <MX_USART1_UART_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x90>)
 800160e:	f004 f8b1 	bl	8005774 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 fc12 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001620:	f006 f82f 	bl	8007682 <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800162a:	f000 fc09 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001632:	f006 f864 	bl	80076fe <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 fc00 	bl	8001e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001642:	f005 ffe5 	bl	8007610 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800164c:	f000 fbf8 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000390 	.word	0x20000390
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fd31 	bl	80010d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2004      	movs	r0, #4
 8001678:	f7ff fd2e 	bl	80010d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WDT_DONE_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f244 0110 	movw	r1, #16400	; 0x4010
 8001682:	481b      	ldr	r0, [pc, #108]	; (80016f0 <MX_GPIO_Init+0x94>)
 8001684:	f001 fbc6 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 8001688:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800168c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800168e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <MX_GPIO_Init+0x94>)
 800169e:	f001 fa31 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDT_DONE_Pin MODBUS_EN_Pin */
  GPIO_InitStruct.Pin = WDT_DONE_Pin|MODBUS_EN_Pin;
 80016a2:	f244 0310 	movw	r3, #16400	; 0x4010
 80016a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_GPIO_Init+0x94>)
 80016ba:	f001 fa23 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_GPIO_Init+0x94>)
 80016d4:	f001 fa16 	bl	8002b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2028      	movs	r0, #40	; 0x28
 80016de:	f001 f91e 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e2:	2028      	movs	r0, #40	; 0x28
 80016e4:	f001 f935 	bl	8002952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	48000400 	.word	0x48000400

080016f4 <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 80016fa:	2300      	movs	r3, #0
 80016fc:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 80016fe:	23ff      	movs	r3, #255	; 0xff
 8001700:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2302      	movs	r3, #2
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MCP23008_Init+0x28>)
 8001710:	f001 fc28 	bl	8002f64 <HAL_I2C_Master_Transmit>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002a8 	.word	0x200002a8

08001720 <MCP23008_ReadInputs>:

DryContactStatus MCP23008_ReadInputs(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 8001728:	2309      	movs	r3, #9
 800172a:	753b      	strb	r3, [r7, #20]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 800172c:	f107 0214 	add.w	r2, r7, #20
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	2140      	movs	r1, #64	; 0x40
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <MCP23008_ReadInputs+0xf4>)
 800173c:	f001 fc12 	bl	8002f64 <HAL_I2C_Master_Transmit>

    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8001740:	f107 0213 	add.w	r2, r7, #19
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4831      	ldr	r0, [pc, #196]	; (8001814 <MCP23008_ReadInputs+0xf4>)
 8001750:	f001 fcfc 	bl	800314c <HAL_I2C_Master_Receive>

    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	723b      	strb	r3, [r7, #8]
	dryContact.DC1 = (gpioState & (1 << 0)) ? true : false;
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	727b      	strb	r3, [r7, #9]
	dryContact.DC2 = (gpioState & (1 << 1)) ? true : false;
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	105b      	asrs	r3, r3, #1
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	72bb      	strb	r3, [r7, #10]
	dryContact.DC3 = (gpioState & (1 << 2)) ? true : false;
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	109b      	asrs	r3, r3, #2
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	72fb      	strb	r3, [r7, #11]
	dryContact.DC4 = (gpioState & (1 << 3)) ? true : false;
 8001792:	7cfb      	ldrb	r3, [r7, #19]
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	733b      	strb	r3, [r7, #12]
	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	111b      	asrs	r3, r3, #4
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	737b      	strb	r3, [r7, #13]
	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
 80017ba:	7cfb      	ldrb	r3, [r7, #19]
 80017bc:	115b      	asrs	r3, r3, #5
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	73bb      	strb	r3, [r7, #14]
	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
 80017ce:	7cfb      	ldrb	r3, [r7, #19]
 80017d0:	119b      	asrs	r3, r3, #6
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	73fb      	strb	r3, [r7, #15]
	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;
 80017e2:	7cfb      	ldrb	r3, [r7, #19]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	11db      	asrs	r3, r3, #7
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	743b      	strb	r3, [r7, #16]

	return dryContact;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	cb03      	ldmia	r3!, {r0, r1}
 8001804:	6010      	str	r0, [r2, #0]
 8001806:	6051      	str	r1, [r2, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	7213      	strb	r3, [r2, #8]
}
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200002a8 	.word	0x200002a8

08001818 <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 800181e:	2302      	movs	r3, #2
 8001820:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 8001822:	23ff      	movs	r3, #255	; 0xff
 8001824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001826:	1d3a      	adds	r2, r7, #4
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2302      	movs	r3, #2
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4821      	ldr	r0, [pc, #132]	; (80018b8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001834:	f001 fb96 	bl	8002f64 <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 8001838:	2304      	movs	r3, #4
 800183a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 800183c:	2300      	movs	r3, #0
 800183e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001840:	1d3a      	adds	r2, r7, #4
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <MCP23008_ConfigureInterrupts+0xa0>)
 800184e:	f001 fb89 	bl	8002f64 <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 8001852:	2303      	movs	r3, #3
 8001854:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 8001856:	2300      	movs	r3, #0
 8001858:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800185a:	1d3a      	adds	r2, r7, #4
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2302      	movs	r3, #2
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001868:	f001 fb7c 	bl	8002f64 <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 800186c:	2305      	movs	r3, #5
 800186e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001880:	f001 fc64 	bl	800314c <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f023 0306 	bic.w	r3, r3, #6
 800188c:	b25b      	sxtb	r3, r3
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 8001898:	2305      	movs	r3, #5
 800189a:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800189c:	1d3a      	adds	r2, r7, #4
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2302      	movs	r3, #2
 80018a6:	2140      	movs	r1, #64	; 0x40
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <MCP23008_ConfigureInterrupts+0xa0>)
 80018aa:	f001 fb5b 	bl	8002f64 <HAL_I2C_Master_Transmit>

}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002a8 	.word	0x200002a8

080018bc <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d018      	beq.n	8001904 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	60d3      	str	r3, [r2, #12]

    switch(GPIO_Pin)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018de:	d009      	beq.n	80018f4 <HAL_GPIO_EXTI_IRQHandler+0x38>
 80018e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e4:	dc10      	bgt.n	8001908 <HAL_GPIO_EXTI_IRQHandler+0x4c>
 80018e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x40>
 80018ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f0:	d004      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x40>
      case SMOKE_A_Pin:
      case SMOKE_B_Pin:
    	  TxTriggers = SMOKE_SENSOR;
          break;
      default:
        break;
 80018f2:	e009      	b.n	8001908 <HAL_GPIO_EXTI_IRQHandler+0x4c>
    	  TxTriggers = DRY_CONTACT;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_GPIO_EXTI_IRQHandler+0x60>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
          break;
 80018fa:	e006      	b.n	800190a <HAL_GPIO_EXTI_IRQHandler+0x4e>
    	  TxTriggers = SMOKE_SENSOR;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_GPIO_EXTI_IRQHandler+0x60>)
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
          break;
 8001902:	e002      	b.n	800190a <HAL_GPIO_EXTI_IRQHandler+0x4e>
    }

  }
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <HAL_GPIO_EXTI_IRQHandler+0x4e>
        break;
 8001908:	bf00      	nop
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	58000800 	.word	0x58000800
 800191c:	20000424 	.word	0x20000424

08001920 <ReadSmokeStatus>:

SmokeStatus ReadSmokeStatus(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    SmokeStatus smokeStatus;
    smokeStatus.pinA = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 8001928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192c:	482e      	ldr	r0, [pc, #184]	; (80019e8 <ReadSmokeStatus+0xc8>)
 800192e:	f001 fa59 	bl	8002de4 <HAL_GPIO_ReadPin>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	733b      	strb	r3, [r7, #12]
    smokeStatus.pinB = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 8001940:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001944:	4828      	ldr	r0, [pc, #160]	; (80019e8 <ReadSmokeStatus+0xc8>)
 8001946:	f001 fa4d 	bl	8002de4 <HAL_GPIO_ReadPin>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	737b      	strb	r3, [r7, #13]

    if (!smokeStatus.pinA && !smokeStatus.pinB) {
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <ReadSmokeStatus+0x5a>
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	f083 0301 	eor.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <ReadSmokeStatus+0x5a>
        smokeStatus.status = "Clean";
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <ReadSmokeStatus+0xcc>)
 8001972:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 1;
 8001974:	2301      	movs	r3, #1
 8001976:	753b      	strb	r3, [r7, #20]
 8001978:	e02a      	b.n	80019d0 <ReadSmokeStatus+0xb0>
    } else if (!smokeStatus.pinA && smokeStatus.pinB) {
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	f083 0301 	eor.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <ReadSmokeStatus+0x76>
 8001986:	7b7b      	ldrb	r3, [r7, #13]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <ReadSmokeStatus+0x76>
        smokeStatus.status = "Light Pollution";
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <ReadSmokeStatus+0xd0>)
 800198e:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 2;
 8001990:	2302      	movs	r3, #2
 8001992:	753b      	strb	r3, [r7, #20]
 8001994:	e01c      	b.n	80019d0 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && !smokeStatus.pinB) {
 8001996:	7b3b      	ldrb	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <ReadSmokeStatus+0x92>
 800199c:	7b7b      	ldrb	r3, [r7, #13]
 800199e:	f083 0301 	eor.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <ReadSmokeStatus+0x92>
        smokeStatus.status = "Moderate Pollution";
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <ReadSmokeStatus+0xd4>)
 80019aa:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 3;
 80019ac:	2303      	movs	r3, #3
 80019ae:	753b      	strb	r3, [r7, #20]
 80019b0:	e00e      	b.n	80019d0 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && smokeStatus.pinB) {
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <ReadSmokeStatus+0xa8>
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <ReadSmokeStatus+0xa8>
        smokeStatus.status = "Severe Pollution";
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <ReadSmokeStatus+0xd8>)
 80019c0:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	753b      	strb	r3, [r7, #20]
 80019c6:	e003      	b.n	80019d0 <ReadSmokeStatus+0xb0>
    } else {
        smokeStatus.status = "Unknown"; // Fallback case, should not occur
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <ReadSmokeStatus+0xdc>)
 80019ca:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	753b      	strb	r3, [r7, #20]
    }

    return smokeStatus;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	461c      	mov	r4, r3
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	48000400 	.word	0x48000400
 80019ec:	0800c3a8 	.word	0x0800c3a8
 80019f0:	0800c3b0 	.word	0x0800c3b0
 80019f4:	0800c3c0 	.word	0x0800c3c0
 80019f8:	0800c3d4 	.word	0x0800c3d4
 80019fc:	0800c3e8 	.word	0x0800c3e8

08001a00 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_UART_RxCpltCallback+0x34>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_UART_RxCpltCallback+0x2c>
	  {
		  Modbus_RxCallback(&ModbusResp);
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_UART_RxCpltCallback+0x38>)
 8001a14:	f7ff fb34 	bl	8001080 <Modbus_RxCallback>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_UART_RxCpltCallback+0x38>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_UART_RxCpltCallback+0x3c>)
 8001a20:	4413      	add	r3, r2
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_UART_RxCpltCallback+0x40>)
 8001a28:	f003 ff82 	bl	8005930 <HAL_UART_Receive_IT>
	  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	20000428 	.word	0x20000428
 8001a3c:	2000042a 	.word	0x2000042a
 8001a40:	20000390 	.word	0x20000390

08001a44 <WDTReset>:

void WDTReset(void){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <WDTReset+0x28>)
 8001a50:	f001 f9e0 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a58:	f000 fe62 	bl	8002720 <HAL_Delay>
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <WDTReset+0x28>)
 8001a64:	f001 f9d6 	bl	8002e14 <HAL_GPIO_WritePin>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	48000400 	.word	0x48000400

08001a70 <scanI2CDevices>:

void scanI2CDevices(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e016      	b.n	8001aaa <scanI2CDevices+0x3a>
	  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 5, 5000); // Adjust timeout as needed
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b299      	uxth	r1, r3
 8001a84:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a88:	2205      	movs	r2, #5
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <scanI2CDevices+0x4c>)
 8001a8c:	f001 fc54 	bl	8003338 <HAL_I2C_IsDeviceReady>
 8001a90:	4603      	mov	r3, r0
 8001a92:	71bb      	strb	r3, [r7, #6]

	  if (status == HAL_OK) {
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <scanI2CDevices+0x34>
		printf(" ---- > Device found at address 0x%02X\n", addr);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <scanI2CDevices+0x50>)
 8001aa0:	f006 fd74 	bl	800858c <iprintf>
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dae4      	bge.n	8001a7c <scanI2CDevices+0xc>
	  }
	  else{
		// printf("No device found at address 0x%02X\n", addr);
	  }
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002a8 	.word	0x200002a8
 8001ac0:	0800c3f0 	.word	0x0800c3f0

08001ac4 <printLineMarker>:

void printLineMarker(char marker) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 25; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e007      	b.n	8001ae4 <printLineMarker+0x20>
        printf("%c ", marker);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <printLineMarker+0x34>)
 8001ada:	f006 fd57 	bl	800858c <iprintf>
    for (int i = 0; i < 25; i++) {
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	ddf4      	ble.n	8001ad4 <printLineMarker+0x10>
    }
    printf("\r\n");
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <printLineMarker+0x38>)
 8001aec:	f006 fdd4 	bl	8008698 <puts>
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800c418 	.word	0x0800c418
 8001afc:	0800c41c 	.word	0x0800c41c

08001b00 <dataToByteArray>:

// Function to convert data to byte array
uint8_t dataToByteArray(void *input, uint8_t *output, DataType type) {
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	71fb      	strb	r3, [r7, #7]
    uint8_t size = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]
    switch (type) {
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b06      	cmp	r3, #6
 8001b16:	d849      	bhi.n	8001bac <dataToByteArray+0xac>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <dataToByteArray+0x20>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b3d 	.word	0x08001b3d
 8001b24:	08001b4b 	.word	0x08001b4b
 8001b28:	08001b5b 	.word	0x08001b5b
 8001b2c:	08001b6b 	.word	0x08001b6b
 8001b30:	08001b7d 	.word	0x08001b7d
 8001b34:	08001b8d 	.word	0x08001b8d
 8001b38:	08001b9d 	.word	0x08001b9d
        case TYPE_UINT8:
            output[0] = *((uint8_t*)input);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	701a      	strb	r2, [r3, #0]
            size = sizeof(uint8_t);
 8001b44:	2301      	movs	r3, #1
 8001b46:	75fb      	strb	r3, [r7, #23]
            break;
 8001b48:	e030      	b.n	8001bac <dataToByteArray+0xac>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29a      	uxth	r2, r3
        case TYPE_UINT16:
            memcpy(output, input, sizeof(uint16_t));
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	801a      	strh	r2, [r3, #0]
            size = sizeof(uint16_t);
 8001b54:	2302      	movs	r3, #2
 8001b56:	75fb      	strb	r3, [r7, #23]
            break;
 8001b58:	e028      	b.n	8001bac <dataToByteArray+0xac>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
        case TYPE_UINT32:
            memcpy(output, input, sizeof(uint32_t));
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	601a      	str	r2, [r3, #0]
            size = sizeof(uint32_t);
 8001b64:	2304      	movs	r3, #4
 8001b66:	75fb      	strb	r3, [r7, #23]
            break;
 8001b68:	e020      	b.n	8001bac <dataToByteArray+0xac>
        case TYPE_INT8:
            output[0] = *((int8_t*)input);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	701a      	strb	r2, [r3, #0]
            size = sizeof(int8_t);
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
            break;
 8001b7a:	e017      	b.n	8001bac <dataToByteArray+0xac>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
        case TYPE_INT16:
            memcpy(output, input, sizeof(int16_t));
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	801a      	strh	r2, [r3, #0]
            size = sizeof(int16_t);
 8001b86:	2302      	movs	r3, #2
 8001b88:	75fb      	strb	r3, [r7, #23]
            break;
 8001b8a:	e00f      	b.n	8001bac <dataToByteArray+0xac>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
        case TYPE_INT32:
            memcpy(output, input, sizeof(int32_t));
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	601a      	str	r2, [r3, #0]
            size = sizeof(int32_t);
 8001b96:	2304      	movs	r3, #4
 8001b98:	75fb      	strb	r3, [r7, #23]
            break;
 8001b9a:	e007      	b.n	8001bac <dataToByteArray+0xac>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
        case TYPE_FLOAT:
            memcpy(output, input, sizeof(float));
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	601a      	str	r2, [r3, #0]
            size = sizeof(float);
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	75fb      	strb	r3, [r7, #23]
            break;
 8001baa:	bf00      	nop
    }
    return size;
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop

08001bbc <generatePayload>:


// Function to generate the payload
bool generatePayload(void **inputs, DataType *types, uint8_t itemCount, MessageType msgType, TxPayload *payload) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	71bb      	strb	r3, [r7, #6]
    if (inputs == NULL || types == NULL || itemCount == 0 || itemCount > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <generatePayload+0x2e>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <generatePayload+0x2e>
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <generatePayload+0x2e>
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b32      	cmp	r3, #50	; 0x32
 8001be8:	d901      	bls.n	8001bee <generatePayload+0x32>
        return false;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e033      	b.n	8001c56 <generatePayload+0x9a>
    }

    payload->msgType = msgType;
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	79ba      	ldrb	r2, [r7, #6]
 8001bf2:	701a      	strb	r2, [r3, #0]
    payload->buffer[0] = msgType;
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	79ba      	ldrb	r2, [r7, #6]
 8001bf8:	705a      	strb	r2, [r3, #1]
    uint8_t index = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < itemCount; ++i) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75bb      	strb	r3, [r7, #22]
 8001c02:	e01f      	b.n	8001c44 <generatePayload+0x88>
        uint8_t size = dataToByteArray(inputs[i], &payload->buffer[index], types[i]);
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	4413      	add	r3, r2
 8001c14:	1c59      	adds	r1, r3, #1
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f7ff ff6e 	bl	8001b00 <dataToByteArray>
 8001c24:	4603      	mov	r3, r0
 8001c26:	757b      	strb	r3, [r7, #21]
        if (index + size > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 8001c28:	7dfa      	ldrb	r2, [r7, #23]
 8001c2a:	7d7b      	ldrb	r3, [r7, #21]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2b32      	cmp	r3, #50	; 0x32
 8001c30:	dd01      	ble.n	8001c36 <generatePayload+0x7a>
            return false; // Exceeds maximum buffer size
 8001c32:	2300      	movs	r3, #0
 8001c34:	e00f      	b.n	8001c56 <generatePayload+0x9a>
        }
        index += size;
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	7d7b      	ldrb	r3, [r7, #21]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < itemCount; ++i) {
 8001c3e:	7dbb      	ldrb	r3, [r7, #22]
 8001c40:	3301      	adds	r3, #1
 8001c42:	75bb      	strb	r3, [r7, #22]
 8001c44:	7dba      	ldrb	r2, [r7, #22]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3db      	bcc.n	8001c04 <generatePayload+0x48>
    }

    payload->length = index;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	7dfa      	ldrb	r2, [r7, #23]
 8001c50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return true;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <generateUnscheduledTxPayload>:

bool generateUnscheduledTxPayload(Sensors sensors){
 8001c60:	b084      	sub	sp, #16
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b096      	sub	sp, #88	; 0x58
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 8001c6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	TxPayload payload;

	MessageType msgType = UNSCHEDULED_TRANSMISSION;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	void *inputs[] = { &sensors.sht20.temperature, &sensors.sht20.humidity, &sensors.dryContact.value, &sensors.smoke.level };
 8001c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c8c:	617b      	str	r3, [r7, #20]
	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8 };
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <generateUnscheduledTxPayload+0xb4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	607b      	str	r3, [r7, #4]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, &payload);
 8001c94:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001c98:	1d39      	adds	r1, r7, #4
 8001c9a:	f107 0008 	add.w	r0, r7, #8
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f7ff ff88 	bl	8001bbc <generatePayload>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

#ifdef SERIAL_DEBUG_PAYLOADCHECK
	if(ret){
 8001cb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01f      	beq.n	8001cfa <generateUnscheduledTxPayload+0x9a>
		printf("UNSCHEDULED PAYLOAD: ");
 8001cba:	4817      	ldr	r0, [pc, #92]	; (8001d18 <generateUnscheduledTxPayload+0xb8>)
 8001cbc:	f006 fc66 	bl	800858c <iprintf>
		for (uint8_t i = 0; i < payload.length; ++i) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001cc6:	e00e      	b.n	8001ce6 <generateUnscheduledTxPayload+0x86>
			printf("%02X ", payload.buffer[i]);
 8001cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ccc:	3350      	adds	r3, #80	; 0x50
 8001cce:	443b      	add	r3, r7
 8001cd0:	f813 3c37 	ldrb.w	r3, [r3, #-55]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <generateUnscheduledTxPayload+0xbc>)
 8001cd8:	f006 fc58 	bl	800858c <iprintf>
		for (uint8_t i = 0; i < payload.length; ++i) {
 8001cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001ce6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001cea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3ea      	bcc.n	8001cc8 <generateUnscheduledTxPayload+0x68>
		}
		printf("\r\n ");
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <generateUnscheduledTxPayload+0xc0>)
 8001cf4:	f006 fc4a 	bl	800858c <iprintf>
 8001cf8:	e002      	b.n	8001d00 <generateUnscheduledTxPayload+0xa0>
	}
	else{
		printf("Failed to generate payload\n");
 8001cfa:	480a      	ldr	r0, [pc, #40]	; (8001d24 <generateUnscheduledTxPayload+0xc4>)
 8001cfc:	f006 fccc 	bl	8008698 <puts>
	}
#endif

	return ret;
 8001d00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d0e:	b004      	add	sp, #16
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	0800c458 	.word	0x0800c458
 8001d18:	0800c420 	.word	0x0800c420
 8001d1c:	0800c39c 	.word	0x0800c39c
 8001d20:	0800c438 	.word	0x0800c438
 8001d24:	0800c43c 	.word	0x0800c43c

08001d28 <handleInterruptTriggers>:

void handleInterruptTriggers(UnscheduledTxTriggers trigger){
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b08f      	sub	sp, #60	; 0x3c
 8001d2c:	af06      	add	r7, sp, #24
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]

	// clear remaining interrupts
	__HAL_GPIO_EXTI_CLEAR_IT(SMOKE_A_Pin);
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <handleInterruptTriggers+0x104>)
 8001d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d38:	60da      	str	r2, [r3, #12]
	__HAL_GPIO_EXTI_CLEAR_IT(SMOKE_B_Pin);
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <handleInterruptTriggers+0x104>)
 8001d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d40:	60da      	str	r2, [r3, #12]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <handleInterruptTriggers+0x104>)
 8001d44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d48:	60da      	str	r2, [r3, #12]


	DryContactStatus dryContact;
	SmokeStatus smokeStatus;
	switch(trigger){
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d066      	beq.n	8001e1e <handleInterruptTriggers+0xf6>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db66      	blt.n	8001e22 <handleInterruptTriggers+0xfa>
 8001d54:	3b01      	subs	r3, #1
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d863      	bhi.n	8001e22 <handleInterruptTriggers+0xfa>
		// do nothing
		break;
	case DRY_CONTACT:
	case SMOKE_SENSOR:
	case SHT:
		smokeStatus = ReadSmokeStatus();
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fdde 	bl	8001920 <ReadSmokeStatus>
		sensors.sht20.temperature = SHT2x_GetTemperature(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f000 fba7 	bl	80024b8 <SHT2x_GetTemperature>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <handleInterruptTriggers+0x108>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]
	    sensors.sht20.humidity = SHT2x_GetRelativeHumidity(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 fbe5 	bl	8002544 <SHT2x_GetRelativeHumidity>
 8001d7a:	eef0 7a40 	vmov.f32	s15, s0
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <handleInterruptTriggers+0x108>)
 8001d80:	edc3 7a01 	vstr	s15, [r3, #4]

	    HAL_Delay(100); // Give time for the pin signal to settle down
 8001d84:	2064      	movs	r0, #100	; 0x64
 8001d86:	f000 fccb 	bl	8002720 <HAL_Delay>
	    dryContact = MCP23008_ReadInputs();
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fcc6 	bl	8001720 <MCP23008_ReadInputs>


#ifdef SERIAL_DEBUG_INTERRUPT
		printLineMarker('!');
 8001d94:	2021      	movs	r0, #33	; 0x21
 8001d96:	f7ff fe95 	bl	8001ac4 <printLineMarker>
		printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 8001d9a:	7d7b      	ldrb	r3, [r7, #21]
		printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001d9c:	461d      	mov	r5, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 8001d9e:	7dbb      	ldrb	r3, [r7, #22]
		printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001da0:	461e      	mov	r6, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
		printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001da4:	469c      	mov	ip, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 8001da6:	7e3b      	ldrb	r3, [r7, #24]
				 dryContact.DC5, dryContact.DC6, dryContact.DC7, dryContact.DC8);
 8001da8:	7e7a      	ldrb	r2, [r7, #25]
 8001daa:	7eb9      	ldrb	r1, [r7, #26]
 8001dac:	7ef8      	ldrb	r0, [r7, #27]
 8001dae:	7f3c      	ldrb	r4, [r7, #28]
		printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001db0:	9404      	str	r4, [sp, #16]
 8001db2:	9003      	str	r0, [sp, #12]
 8001db4:	9102      	str	r1, [sp, #8]
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4663      	mov	r3, ip
 8001dbc:	4632      	mov	r2, r6
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	481c      	ldr	r0, [pc, #112]	; (8001e34 <handleInterruptTriggers+0x10c>)
 8001dc2:	f006 fbe3 	bl	800858c <iprintf>
		printf("SMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
				 smokeStatus.pinA, smokeStatus.pinB, smokeStatus.status);
 8001dc6:	7a3b      	ldrb	r3, [r7, #8]
		printf("SMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 8001dc8:	4619      	mov	r1, r3
				 smokeStatus.pinA, smokeStatus.pinB, smokeStatus.status);
 8001dca:	7a7b      	ldrb	r3, [r7, #9]
		printf("SMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 8001dcc:	461a      	mov	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4819      	ldr	r0, [pc, #100]	; (8001e38 <handleInterruptTriggers+0x110>)
 8001dd2:	f006 fbdb 	bl	800858c <iprintf>
		printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht20.temperature, sensors.sht20.humidity);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <handleInterruptTriggers+0x108>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb8c 	bl	80004f8 <__aeabi_f2d>
 8001de0:	4604      	mov	r4, r0
 8001de2:	460d      	mov	r5, r1
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <handleInterruptTriggers+0x108>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb85 	bl	80004f8 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9cd 2300 	strd	r2, r3, [sp]
 8001df6:	4622      	mov	r2, r4
 8001df8:	462b      	mov	r3, r5
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <handleInterruptTriggers+0x114>)
 8001dfc:	f006 fbc6 	bl	800858c <iprintf>
		printLineMarker('!');
 8001e00:	2021      	movs	r0, #33	; 0x21
 8001e02:	f7ff fe5f 	bl	8001ac4 <printLineMarker>
#endif

		// Create Payload
		generateUnscheduledTxPayload(sensors);
 8001e06:	4c0a      	ldr	r4, [pc, #40]	; (8001e30 <handleInterruptTriggers+0x108>)
 8001e08:	466d      	mov	r5, sp
 8001e0a:	f104 0310 	add.w	r3, r4, #16
 8001e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e18:	f7ff ff22 	bl	8001c60 <generateUnscheduledTxPayload>

		break;
 8001e1c:	e002      	b.n	8001e24 <handleInterruptTriggers+0xfc>
		break;
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <handleInterruptTriggers+0xfc>
	default:
		// do nothing
		break;
 8001e22:	bf00      	nop
	}

}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2c:	58000800 	.word	0x58000800
 8001e30:	200004c0 	.word	0x200004c0
 8001e34:	0800c45c 	.word	0x0800c45c
 8001e38:	0800c484 	.word	0x0800c484
 8001e3c:	0800c300 	.word	0x0800c300

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>

08001e4a <LL_AHB2_GRP1_EnableClock>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f04:	68fb      	ldr	r3, [r7, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09c      	sub	sp, #112	; 0x70
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2250      	movs	r2, #80	; 0x50
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fca1 	bl	8007888 <memset>
  if(hi2c->Instance==I2C1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d126      	bne.n	8001f9e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f50:	2304      	movs	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f54:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f961 	bl	8005226 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f6a:	f7ff ff69 	bl	8001e40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff ff6b 	bl	8001e4a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7a:	2312      	movs	r3, #18
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f86:	2304      	movs	r3, #4
 8001f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <HAL_I2C_MspInit+0x8c>)
 8001f92:	f000 fdb7 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f9a:	f7ff ff6f 	bl	8001e7c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3770      	adds	r7, #112	; 0x70
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	48000400 	.word	0x48000400

08001fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09c      	sub	sp, #112	; 0x70
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2250      	movs	r2, #80	; 0x50
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f005 fc59 	bl	8007888 <memset>
  if(huart->Instance==LPUART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_UART_MspInit+0xf8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d12c      	bne.n	800203a <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 f91a 	bl	8005226 <HAL_RCCEx_PeriphCLKConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ff8:	f7ff ff22 	bl	8001e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff ff56 	bl	8001eae <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2004      	movs	r0, #4
 8002004:	f7ff ff21 	bl	8001e4a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002008:	2303      	movs	r3, #3
 800200a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002018:	2308      	movs	r3, #8
 800201a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002020:	4619      	mov	r1, r3
 8002022:	4822      	ldr	r0, [pc, #136]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8002024:	f000 fd6e 	bl	8002b04 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	2025      	movs	r0, #37	; 0x25
 800202e:	f000 fc76 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002032:	2025      	movs	r0, #37	; 0x25
 8002034:	f000 fc8d 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002038:	e031      	b.n	800209e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_UART_MspInit+0x100>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d12c      	bne.n	800209e <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002044:	2301      	movs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4618      	mov	r0, r3
 8002052:	f003 f8e8 	bl	8005226 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 800205c:	f7ff fef0 	bl	8001e40 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002064:	f7ff ff3c 	bl	8001ee0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2002      	movs	r0, #2
 800206a:	f7ff feee 	bl	8001e4a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800207e:	2307      	movs	r3, #7
 8002080:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002086:	4619      	mov	r1, r3
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <HAL_UART_MspInit+0x104>)
 800208a:	f000 fd3b 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2024      	movs	r0, #36	; 0x24
 8002094:	f000 fc43 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002098:	2024      	movs	r0, #36	; 0x24
 800209a:	f000 fc5a 	bl	8002952 <HAL_NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3770      	adds	r7, #112	; 0x70
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40008000 	.word	0x40008000
 80020ac:	48000800 	.word	0x48000800
 80020b0:	40013800 	.word	0x40013800
 80020b4:	48000400 	.word	0x48000400

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f000 fae0 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <USART1_IRQHandler+0x10>)
 8002112:	f003 fc59 	bl	80059c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000390 	.word	0x20000390

08002120 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <LPUART1_IRQHandler+0x10>)
 8002126:	f003 fc4f 	bl	80059c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002fc 	.word	0x200002fc

08002134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 8002138:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800213c:	f7ff fbbe 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 8002140:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002144:	f7ff fbba 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002148:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800214c:	f7ff fbb6 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_kill>:

int _kill(int pid, int sig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216e:	f005 fb53 	bl	8007818 <__errno>
 8002172:	4603      	mov	r3, r0
 8002174:	2216      	movs	r2, #22
 8002176:	601a      	str	r2, [r3, #0]
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_exit>:

void _exit (int status)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe7 	bl	8002164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002196:	e7fe      	b.n	8002196 <_exit+0x12>

08002198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e009      	b.n	80021f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff8d 	bl	800110c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf1      	blt.n	80021e4 <_write+0x12>
  }
  return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_close>:

int _close(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002232:	605a      	str	r2, [r3, #4]
  return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a4:	f005 fab8 	bl	8007818 <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	220c      	movs	r2, #12
 80022ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e009      	b.n	80022c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <_sbrk+0x64>)
 80022c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20030000 	.word	0x20030000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	200004e8 	.word	0x200004e8
 80022dc:	20000508 	.word	0x20000508

080022e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <SystemInit+0x98>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a23      	ldr	r2, [pc, #140]	; (8002378 <SystemInit+0x98>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800230c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <SystemInit+0x9c>)
 800231a:	4013      	ands	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232a:	f023 0305 	bic.w	r3, r3, #5
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <SystemInit+0xa0>)
 800234c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <SystemInit+0xa0>)
 8002354:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	faf6fefb 	.word	0xfaf6fefb
 8002380:	22041000 	.word	0x22041000

08002384 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002384:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002386:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002388:	3304      	adds	r3, #4

0800238a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800238e:	d3f9      	bcc.n	8002384 <CopyDataInit>
  bx lr
 8002390:	4770      	bx	lr

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002392:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002394:	3004      	adds	r0, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002396:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>
  bx lr
 800239a:	4770      	bx	lr

0800239c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800239e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023a0:	f7ff ff9e 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <LoopForever+0x6>)
 80023a6:	490c      	ldr	r1, [pc, #48]	; (80023d8 <LoopForever+0xa>)
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <LoopForever+0xe>)
 80023aa:	2300      	movs	r3, #0
 80023ac:	f7ff ffed 	bl	800238a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <LoopForever+0x12>)
 80023b2:	490c      	ldr	r1, [pc, #48]	; (80023e4 <LoopForever+0x16>)
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <LoopForever+0x1a>)
 80023b6:	2300      	movs	r3, #0
 80023b8:	f7ff ffe7 	bl	800238a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <LoopForever+0x1e>)
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <LoopForever+0x22>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	f7ff ffe8 	bl	8002396 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023c6:	f005 fa2d 	bl	8007824 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023ca:	f7fe feb1 	bl	8001130 <main>

080023ce <LoopForever>:

LoopForever:
  b LoopForever
 80023ce:	e7fe      	b.n	80023ce <LoopForever>
  ldr   r0, =_estack
 80023d0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023d4:	20000008 	.word	0x20000008
 80023d8:	200001f0 	.word	0x200001f0
 80023dc:	0800ca64 	.word	0x0800ca64
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023e0:	20030000 	.word	0x20030000
 80023e4:	20030000 	.word	0x20030000
 80023e8:	0800cc4c 	.word	0x0800cc4c
  INIT_BSS _sbss, _ebss
 80023ec:	200001f0 	.word	0x200001f0
 80023f0:	20000504 	.word	0x20000504

080023f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_IRQHandler>
	...

080023f8 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <SHT2x_Init+0x1c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200004ec 	.word	0x200004ec

08002418 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 800241e:	23e7      	movs	r3, #231	; 0xe7
 8002420:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <SHT2x_ReadUserReg+0x3c>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	1dba      	adds	r2, r7, #6
 8002428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	f000 fd97 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <SHT2x_ReadUserReg+0x3c>)
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	1dfa      	adds	r2, r7, #7
 800243c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	f000 fe81 	bl	800314c <HAL_I2C_Master_Receive>
	return val;
 800244a:	79fb      	ldrb	r3, [r7, #7]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200004ec 	.word	0x200004ec

08002458 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <SHT2x_GetRaw+0x58>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	81bb      	strh	r3, [r7, #12]
 8002468:	2300      	movs	r3, #0
 800246a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <SHT2x_GetRaw+0x5c>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	1dfa      	adds	r2, r7, #7
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	f000 fd72 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <SHT2x_GetRaw+0x5c>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f107 020c 	add.w	r2, r7, #12
 8002488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2303      	movs	r3, #3
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	f000 fe5b 	bl	800314c <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8002496:	7b3b      	ldrb	r3, [r7, #12]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	b21a      	sxth	r2, r3
 800249c:	7b7b      	ldrb	r3, [r7, #13]
 800249e:	b21b      	sxth	r3, r3
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	b29b      	uxth	r3, r3
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	0800c4ac 	.word	0x0800c4ac
 80024b4:	200004ec 	.word	0x200004ec

080024b8 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SHT2x_GetTemperature+0x14>
 80024c8:	23e3      	movs	r3, #227	; 0xe3
 80024ca:	e000      	b.n	80024ce <SHT2x_GetTemperature+0x16>
 80024cc:	23f3      	movs	r3, #243	; 0xf3
 80024ce:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ffc0 	bl	8002458 <SHT2x_GetRaw>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd fffa 	bl	80004d4 <__aeabi_i2d>
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <SHT2x_GetTemperature+0x88>)
 80024e6:	f7fe f989 	bl	80007fc <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	a30f      	add	r3, pc, #60	; (adr r3, 8002530 <SHT2x_GetTemperature+0x78>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f856 	bl	80005a8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	a30c      	add	r3, pc, #48	; (adr r3, 8002538 <SHT2x_GetTemperature+0x80>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fd fe95 	bl	8000238 <__aeabi_dsub>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb3f 	bl	8000b98 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	ee07 3a90 	vmov	s15, r3
}
 8002520:	eeb0 0a67 	vmov.f32	s0, s15
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	f3af 8000 	nop.w
 8002530:	3d70a3d7 	.word	0x3d70a3d7
 8002534:	4065f70a 	.word	0x4065f70a
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	40476ccc 	.word	0x40476ccc
 8002540:	40f00000 	.word	0x40f00000

08002544 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SHT2x_GetRelativeHumidity+0x14>
 8002554:	23e5      	movs	r3, #229	; 0xe5
 8002556:	e000      	b.n	800255a <SHT2x_GetRelativeHumidity+0x16>
 8002558:	23f5      	movs	r3, #245	; 0xf5
 800255a:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff7a 	bl	8002458 <SHT2x_GetRaw>
 8002564:	4603      	mov	r3, r0
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ffb4 	bl	80004d4 <__aeabi_i2d>
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <SHT2x_GetRelativeHumidity+0x74>)
 8002572:	f7fe f943 	bl	80007fc <__aeabi_ddiv>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <SHT2x_GetRelativeHumidity+0x78>)
 8002584:	f7fe f810 	bl	80005a8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <SHT2x_GetRelativeHumidity+0x7c>)
 8002596:	f7fd fe4f 	bl	8000238 <__aeabi_dsub>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe faf9 	bl	8000b98 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	ee07 3a90 	vmov	s15, r3
}
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40f00000 	.word	0x40f00000
 80025bc:	405f4000 	.word	0x405f4000
 80025c0:	40180000 	.word	0x40180000

080025c4 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80025ce:	f7ff ff23 	bl	8002418 <SHT2x_ReadUserReg>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 80025ea:	23e6      	movs	r3, #230	; 0xe6
 80025ec:	733b      	strb	r3, [r7, #12]
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <SHT2x_SetResolution+0x4c>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020c 	add.w	r2, r7, #12
 80025fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2302      	movs	r3, #2
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	f000 fcae 	bl	8002f64 <HAL_I2C_Master_Transmit>
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200004ec 	.word	0x200004ec

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_Init+0x3c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_Init+0x3c>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262a:	2003      	movs	r0, #3
 800262c:	f000 f96c 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002630:	200f      	movs	r0, #15
 8002632:	f000 f80f 	bl	8002654 <HAL_InitTick>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	e001      	b.n	8002646 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002642:	f7ff fc66 	bl	8001f12 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002646:	79fb      	ldrb	r3, [r7, #7]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	58004000 	.word	0x58004000

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_InitTick+0x6c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d024      	beq.n	80026b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002668:	f002 fb4c 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_InitTick+0x6c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002678:	fbb3 f3f1 	udiv	r3, r3, r1
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f974 	bl	800296e <HAL_SYSTICK_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d809      	bhi.n	80026a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002692:	2200      	movs	r2, #0
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	f04f 30ff 	mov.w	r0, #4294967295
 800269a:	f000 f940 	bl	800291e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_InitTick+0x70>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e004      	b.n	80026b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e001      	b.n	80026b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000018 	.word	0x20000018
 80026c4:	20000014 	.word	0x20000014

080026c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000018 	.word	0x20000018
 80026ec:	200004f0 	.word	0x200004f0

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200004f0 	.word	0x200004f0

08002708 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTickPrio+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000014 	.word	0x20000014

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffe2 	bl	80026f0 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffd2 	bl	80026f0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000018 	.word	0x20000018

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff29 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff40 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff90 	bl	800285c <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5f 	bl	8002808 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff33 	bl	80027cc <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa4 	bl	80028c4 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04f      	b.n	8002a38 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e040      	b.n	8002a38 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 020e 	bic.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 021c 	and.w	r2, r3, #28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d005      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e047      	b.n	8002af8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 020e 	bic.w	r2, r2, #14
 8002a76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f003 021c 	and.w	r2, r3, #28
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ab4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002acc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ad6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
    }
  }
  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	e14c      	b.n	8002dae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 813e 	beq.w	8002da8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d005      	beq.n	8002b44 <HAL_GPIO_Init+0x40>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d130      	bne.n	8002ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0201 	and.w	r2, r3, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d017      	beq.n	8002be2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d123      	bne.n	8002c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8098 	beq.w	8002da8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c78:	4a54      	ldr	r2, [pc, #336]	; (8002dcc <HAL_GPIO_Init+0x2c8>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca2:	d019      	beq.n	8002cd8 <HAL_GPIO_Init+0x1d4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_GPIO_Init+0x2cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_GPIO_Init+0x1d0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a49      	ldr	r2, [pc, #292]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_GPIO_Init+0x1cc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_GPIO_Init+0x2d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <HAL_GPIO_Init+0x1c8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <HAL_GPIO_Init+0x2d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_GPIO_Init+0x1c4>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e008      	b.n	8002cda <HAL_GPIO_Init+0x1d6>
 8002cc8:	2307      	movs	r3, #7
 8002cca:	e006      	b.n	8002cda <HAL_GPIO_Init+0x1d6>
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e004      	b.n	8002cda <HAL_GPIO_Init+0x1d6>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e002      	b.n	8002cda <HAL_GPIO_Init+0x1d6>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_GPIO_Init+0x1d6>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cea:	4938      	ldr	r1, [pc, #224]	; (8002dcc <HAL_GPIO_Init+0x2c8>)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d1c:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d46:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x2dc>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f aeab 	bne.w	8002b14 <HAL_GPIO_Init+0x10>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	58000800 	.word	0x58000800

08002de4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e081      	b.n	8002f5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff f858 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e006      	b.n	8002ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d104      	bne.n	8002ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 80da 	bne.w	800313a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_Master_Transmit+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0d3      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fba8 	bl	80026f0 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2319      	movs	r3, #25
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 faed 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0be      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d90e      	bls.n	800300e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fcfc 	bl	8003a04 <I2C_TransferConfig>
 800300c:	e06c      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fceb 	bl	8003a04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800302e:	e05b      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 faf9 	bl	800362c <I2C_WaitOnTXISFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07b      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d034      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d130      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fa7c 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04d      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d90e      	bls.n	80030c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fc9f 	bl	8003a04 <I2C_TransferConfig>
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fc8e 	bl	8003a04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d19e      	bne.n	8003030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fadf 	bl	80036ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01a      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_I2C_Master_Transmit+0x1e4>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	80002000 	.word	0x80002000
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b20      	cmp	r3, #32
 800316a:	f040 80db 	bne.w	8003324 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Receive+0x30>
 8003178:	2302      	movs	r3, #2
 800317a:	e0d4      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003184:	f7ff fab4 	bl	80026f0 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2319      	movs	r3, #25
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f9f9 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0bf      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2222      	movs	r2, #34	; 0x22
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2210      	movs	r2, #16
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	893a      	ldrh	r2, [r7, #8]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d90e      	bls.n	80031f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	4b52      	ldr	r3, [pc, #328]	; (8003330 <HAL_I2C_Master_Receive+0x1e4>)
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fc08 	bl	8003a04 <I2C_TransferConfig>
 80031f4:	e06d      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_I2C_Master_Receive+0x1e4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fbf7 	bl	8003a04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003216:	e05c      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	6a39      	ldr	r1, [r7, #32]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fa8f 	bl	8003740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e07c      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d034      	beq.n	80032d2 <HAL_I2C_Master_Receive+0x186>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d130      	bne.n	80032d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2200      	movs	r2, #0
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f987 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04d      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2bff      	cmp	r3, #255	; 0xff
 8003292:	d90e      	bls.n	80032b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	8979      	ldrh	r1, [r7, #10]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fbaa 	bl	8003a04 <I2C_TransferConfig>
 80032b0:	e00f      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	2300      	movs	r3, #0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb99 	bl	8003a04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d19d      	bne.n	8003218 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6a39      	ldr	r1, [r7, #32]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f9ea 	bl	80036ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01a      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_I2C_Master_Receive+0x1e8>)
 8003304:	400b      	ands	r3, r1
 8003306:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	80002400 	.word	0x80002400
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	460b      	mov	r3, r1
 8003346:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 80f1 	bne.w	800353c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d101      	bne.n	800336e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e0e7      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2C_IsDeviceReady+0x44>
 8003378:	2302      	movs	r3, #2
 800337a:	e0e0      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_I2C_IsDeviceReady+0x72>
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a8:	e004      	b.n	80033b4 <HAL_I2C_IsDeviceReady+0x7c>
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033ba:	f7ff f999 	bl	80026f0 <HAL_GetTick>
 80033be:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033ec:	e034      	b.n	8003458 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d01a      	beq.n	800342c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7ff f97b 	bl	80026f0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <HAL_I2C_IsDeviceReady+0xd4>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e088      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b20      	cmp	r3, #32
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <HAL_I2C_IsDeviceReady+0x12c>
 800345e:	7fbb      	ldrb	r3, [r7, #30]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0c4      	beq.n	80033ee <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b10      	cmp	r3, #16
 8003470:	d01a      	beq.n	80034a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	2120      	movs	r1, #32
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f886 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e058      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2220      	movs	r2, #32
 8003492:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e04a      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2120      	movs	r1, #32
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f86b 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03d      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d118      	bne.n	800350c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2120      	movs	r1, #32
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f84a 	bl	800358e <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e01c      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2220      	movs	r2, #32
 800350a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3301      	adds	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	f63f af3b 	bhi.w	8003392 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d103      	bne.n	8003564 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d007      	beq.n	8003582 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	619a      	str	r2, [r3, #24]
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800359e:	e031      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d02d      	beq.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7ff f8a2 	bl	80026f0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d122      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d113      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e00f      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	429a      	cmp	r2, r3
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	429a      	cmp	r2, r3
 8003620:	d0be      	beq.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003638:	e033      	b.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f900 	bl	8003844 <I2C_IsErrorOccurred>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e031      	b.n	80036b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d025      	beq.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7ff f84b 	bl	80026f0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11a      	bne.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d013      	beq.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e007      	b.n	80036b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d1c4      	bne.n	800363a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c6:	e02f      	b.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f8b9 	bl	8003844 <I2C_IsErrorOccurred>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e02d      	b.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036dc:	f7ff f808 	bl	80026f0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11a      	bne.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d013      	beq.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e007      	b.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d1c8      	bne.n	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800374c:	e06b      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f876 	bl	8003844 <I2C_IsErrorOccurred>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e069      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d138      	bne.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d105      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e055      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d107      	bne.n	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2204      	movs	r2, #4
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
 80037a6:	e002      	b.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2220      	movs	r2, #32
 80037b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80037c2:	400b      	ands	r3, r1
 80037c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e029      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe ff85 	bl	80026f0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d116      	bne.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d00f      	beq.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e007      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d18c      	bne.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	fe00e800 	.word	0xfe00e800

08003844 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d068      	beq.n	8003942 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2210      	movs	r2, #16
 8003876:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003878:	e049      	b.n	800390e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d045      	beq.n	800390e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe ff35 	bl	80026f0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_IsErrorOccurred+0x54>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13a      	bne.n	800390e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d121      	bne.n	8003900 <I2C_IsErrorOccurred+0xbc>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c2:	d01d      	beq.n	8003900 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d01a      	beq.n	8003900 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038da:	f7fe ff09 	bl	80026f0 <HAL_GetTick>
 80038de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e0:	e00e      	b.n	8003900 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038e2:	f7fe ff05 	bl	80026f0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b19      	cmp	r3, #25
 80038ee:	d907      	bls.n	8003900 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f043 0320 	orr.w	r3, r3, #32
 80038f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80038fe:	e006      	b.n	800390e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d1e9      	bne.n	80038e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d003      	beq.n	8003924 <I2C_IsErrorOccurred+0xe0>
 800391c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0aa      	beq.n	800387a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01c      	beq.n	80039f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fdc4 	bl	8003546 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <I2C_IsErrorOccurred+0x1bc>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	fe00e800 	.word	0xfe00e800

08003a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	4613      	mov	r3, r2
 8003a14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a1c:	7a7b      	ldrb	r3, [r7, #9]
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	0d5b      	lsrs	r3, r3, #21
 8003a3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <I2C_TransferConfig+0x60>)
 8003a44:	430b      	orrs	r3, r1
 8003a46:	43db      	mvns	r3, r3
 8003a48:	ea02 0103 	and.w	r1, r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	03ff63ff 	.word	0x03ff63ff

08003a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d138      	bne.n	8003af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e032      	b.n	8003af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d139      	bne.n	8003b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e033      	b.n	8003b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2224      	movs	r2, #36	; 0x24
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	58000400 	.word	0x58000400

08003bb8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	58000400 	.word	0x58000400

08003bd4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be6:	d101      	bne.n	8003bec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c46:	d101      	bne.n	8003c4c <LL_RCC_HSE_IsReady+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_RCC_HSE_IsReady+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d101      	bne.n	8003cac <LL_RCC_HSI_IsReady+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_RCC_HSI_IsReady+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d101      	bne.n	8003d3e <LL_RCC_HSI48_IsReady+0x18>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <LL_RCC_HSI48_IsReady+0x1a>
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d101      	bne.n	8003dea <LL_RCC_LSE_IsReady+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_RCC_LSE_IsReady+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d101      	bne.n	8003e52 <LL_RCC_LSI1_IsReady+0x18>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <LL_RCC_LSI1_IsReady+0x1a>
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d101      	bne.n	8003eba <LL_RCC_LSI2_IsReady+0x18>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_RCC_LSI2_IsReady+0x1a>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6013      	str	r3, [r2, #0]
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d101      	bne.n	8003f46 <LL_RCC_MSI_IsReady+0x16>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_RCC_MSI_IsReady+0x18>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2bb0      	cmp	r3, #176	; 0xb0
 8003f90:	d901      	bls.n	8003f96 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003f92:	23b0      	movs	r3, #176	; 0xb0
 8003f94:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003f96:	687b      	ldr	r3, [r7, #4]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 0203 	bic.w	r2, r3, #3
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004174:	6013      	str	r3, [r2, #0]
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004192:	d101      	bne.n	8004198 <LL_RCC_PLL_IsReady+0x18>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <LL_RCC_PLL_IsReady+0x1a>
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0303 	and.w	r3, r3, #3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d101      	bne.n	800421e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800423e:	d101      	bne.n	8004244 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d101      	bne.n	800426a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004288:	d101      	bne.n	800428e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ac:	d101      	bne.n	80042b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b08d      	sub	sp, #52	; 0x34
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e363      	b.n	800499a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 808d 	beq.w	80043fa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e0:	f7ff fe89 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 80042e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e6:	f7ff ff82 	bl	80041ee <LL_RCC_PLL_GetMainSource>
 80042ea:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x3e>
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d147      	bne.n	8004388 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d144      	bne.n	8004388 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e347      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800430e:	f7ff fe34 	bl	8003f7a <LL_RCC_MSI_GetRange>
 8004312:	4603      	mov	r3, r0
 8004314:	429c      	cmp	r4, r3
 8004316:	d914      	bls.n	8004342 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fd31 	bl	8004d84 <RCC_SetFlashLatencyFromMSIRange>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e336      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe0e 	bl	8003f52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fe32 	bl	8003fa4 <LL_RCC_MSI_SetCalibTrimming>
 8004340:	e013      	b.n	800436a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fe03 	bl	8003f52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fe27 	bl	8003fa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd12 	bl	8004d84 <RCC_SetFlashLatencyFromMSIRange>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e317      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800436a:	f000 fccb 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 800436e:	4603      	mov	r3, r0
 8004370:	4aa4      	ldr	r2, [pc, #656]	; (8004604 <HAL_RCC_OscConfig+0x344>)
 8004372:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004374:	4ba4      	ldr	r3, [pc, #656]	; (8004608 <HAL_RCC_OscConfig+0x348>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe f96b 	bl	8002654 <HAL_InitTick>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d039      	beq.n	80043f8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e308      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01e      	beq.n	80043ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004390:	f7ff fdb0 	bl	8003ef4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004394:	f7fe f9ac 	bl	80026f0 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439c:	f7fe f9a8 	bl	80026f0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e2f5      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80043ae:	f7ff fdbf 	bl	8003f30 <LL_RCC_MSI_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fdc8 	bl	8003f52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fdec 	bl	8003fa4 <LL_RCC_MSI_SetCalibTrimming>
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043ce:	f7ff fda0 	bl	8003f12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043d2:	f7fe f98d 	bl	80026f0 <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043da:	f7fe f989 	bl	80026f0 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e2d6      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80043ec:	f7ff fda0 	bl	8003f30 <LL_RCC_MSI_IsReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x11a>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d047      	beq.n	8004496 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004406:	f7ff fdf6 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 800440a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800440c:	f7ff feef 	bl	80041ee <LL_RCC_PLL_GetMainSource>
 8004410:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x164>
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d108      	bne.n	8004430 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d105      	bne.n	8004430 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d134      	bne.n	8004496 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e2b4      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d102      	bne.n	8004440 <HAL_RCC_OscConfig+0x180>
 800443a:	f7ff fbdd 	bl	8003bf8 <LL_RCC_HSE_Enable>
 800443e:	e001      	b.n	8004444 <HAL_RCC_OscConfig+0x184>
 8004440:	f7ff fbe9 	bl	8003c16 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f950 	bl	80026f0 <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe f94c 	bl	80026f0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e299      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004466:	f7ff fbe5 	bl	8003c34 <LL_RCC_HSE_IsReady>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f1      	beq.n	8004454 <HAL_RCC_OscConfig+0x194>
 8004470:	e011      	b.n	8004496 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe f93d 	bl	80026f0 <HAL_GetTick>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447a:	f7fe f939 	bl	80026f0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e286      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800448c:	f7ff fbd2 	bl	8003c34 <LL_RCC_HSE_IsReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f1      	bne.n	800447a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d04c      	beq.n	800453c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	f7ff fda8 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 80044a6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	f7ff fea1 	bl	80041ee <LL_RCC_PLL_GetMainSource>
 80044ac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d10e      	bne.n	80044d8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d10b      	bne.n	80044d8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e266      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fbf1 	bl	8003cb8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044d6:	e031      	b.n	800453c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d019      	beq.n	8004514 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	f7ff fbba 	bl	8003c58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe f904 	bl	80026f0 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe f900 	bl	80026f0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e24d      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044fe:	f7ff fbc9 	bl	8003c94 <LL_RCC_HSI_IsReady>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f1      	beq.n	80044ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fbd3 	bl	8003cb8 <LL_RCC_HSI_SetCalibTrimming>
 8004512:	e013      	b.n	800453c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004514:	f7ff fbaf 	bl	8003c76 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe f8ea 	bl	80026f0 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7fe f8e6 	bl	80026f0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e233      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004532:	f7ff fbaf 	bl	8003c94 <LL_RCC_HSI_IsReady>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f1      	bne.n	8004520 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a3 	beq.w	800469c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d076      	beq.n	800464c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	d046      	beq.n	80045f8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800456a:	f7ff fc66 	bl	8003e3a <LL_RCC_LSI1_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004574:	f7ff fc3f 	bl	8003df6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004578:	f7fe f8ba 	bl	80026f0 <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004580:	f7fe f8b6 	bl	80026f0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e203      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004592:	f7ff fc52 	bl	8003e3a <LL_RCC_LSI1_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f1      	beq.n	8004580 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800459c:	f7ff fc5f 	bl	8003e5e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fe f8a6 	bl	80026f0 <HAL_GetTick>
 80045a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045a8:	f7fe f8a2 	bl	80026f0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1ef      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80045ba:	f7ff fc72 	bl	8003ea2 <LL_RCC_LSI2_IsReady>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f1      	beq.n	80045a8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fc7c 	bl	8003ec6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80045ce:	f7ff fc23 	bl	8003e18 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fe f88d 	bl	80026f0 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045da:	f7fe f889 	bl	80026f0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1d6      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045ec:	f7ff fc25 	bl	8003e3a <LL_RCC_LSI1_IsReady>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f1      	bne.n	80045da <HAL_RCC_OscConfig+0x31a>
 80045f6:	e051      	b.n	800469c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045f8:	f7ff fbfd 	bl	8003df6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fe f878 	bl	80026f0 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004602:	e00c      	b.n	800461e <HAL_RCC_OscConfig+0x35e>
 8004604:	20000010 	.word	0x20000010
 8004608:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800460c:	f7fe f870 	bl	80026f0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1bd      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800461e:	f7ff fc0c 	bl	8003e3a <LL_RCC_LSI1_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f1      	beq.n	800460c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004628:	f7ff fc2a 	bl	8003e80 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800462e:	f7fe f85f 	bl	80026f0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b03      	cmp	r3, #3
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1ac      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004640:	f7ff fc2f 	bl	8003ea2 <LL_RCC_LSI2_IsReady>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f1      	bne.n	800462e <HAL_RCC_OscConfig+0x36e>
 800464a:	e027      	b.n	800469c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800464c:	f7ff fc18 	bl	8003e80 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fe f84e 	bl	80026f0 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004658:	f7fe f84a 	bl	80026f0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b03      	cmp	r3, #3
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e197      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800466a:	f7ff fc1a 	bl	8003ea2 <LL_RCC_LSI2_IsReady>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004674:	f7ff fbd0 	bl	8003e18 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fe f83a 	bl	80026f0 <HAL_GetTick>
 800467c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004680:	f7fe f836 	bl	80026f0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e183      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004692:	f7ff fbd2 	bl	8003e3a <LL_RCC_LSI1_IsReady>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f1      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05b      	beq.n	8004760 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a8:	4ba7      	ldr	r3, [pc, #668]	; (8004948 <HAL_RCC_OscConfig+0x688>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d114      	bne.n	80046de <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80046b4:	f7ff fa70 	bl	8003b98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b8:	f7fe f81a 	bl	80026f0 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fe f816 	bl	80026f0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e163      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d2:	4b9d      	ldr	r3, [pc, #628]	; (8004948 <HAL_RCC_OscConfig+0x688>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_OscConfig+0x42c>
 80046e6:	f7ff fb30 	bl	8003d4a <LL_RCC_LSE_Enable>
 80046ea:	e00c      	b.n	8004706 <HAL_RCC_OscConfig+0x446>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d104      	bne.n	80046fe <HAL_RCC_OscConfig+0x43e>
 80046f4:	f7ff fb4b 	bl	8003d8e <LL_RCC_LSE_EnableBypass>
 80046f8:	f7ff fb27 	bl	8003d4a <LL_RCC_LSE_Enable>
 80046fc:	e003      	b.n	8004706 <HAL_RCC_OscConfig+0x446>
 80046fe:	f7ff fb35 	bl	8003d6c <LL_RCC_LSE_Disable>
 8004702:	f7ff fb55 	bl	8003db0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d014      	beq.n	8004738 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd ffef 	bl	80026f0 <HAL_GetTick>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fd ffeb 	bl	80026f0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e136      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800472c:	f7ff fb51 	bl	8003dd2 <LL_RCC_LSE_IsReady>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ef      	beq.n	8004716 <HAL_RCC_OscConfig+0x456>
 8004736:	e013      	b.n	8004760 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd ffda 	bl	80026f0 <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd ffd6 	bl	80026f0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e121      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004756:	f7ff fb3c 	bl	8003dd2 <LL_RCC_LSE_IsReady>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ef      	bne.n	8004740 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02c      	beq.n	80047c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d014      	beq.n	800479e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004774:	f7ff fab5 	bl	8003ce2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd ffba 	bl	80026f0 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004780:	f7fd ffb6 	bl	80026f0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e103      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004792:	f7ff fac8 	bl	8003d26 <LL_RCC_HSI48_IsReady>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f1      	beq.n	8004780 <HAL_RCC_OscConfig+0x4c0>
 800479c:	e013      	b.n	80047c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800479e:	f7ff fab1 	bl	8003d04 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fd ffa5 	bl	80026f0 <HAL_GetTick>
 80047a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047aa:	f7fd ffa1 	bl	80026f0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0ee      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80047bc:	f7ff fab3 	bl	8003d26 <LL_RCC_HSI48_IsReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f1      	bne.n	80047aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80e4 	beq.w	8004998 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d0:	f7ff fc11 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 80047d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f040 80b4 	bne.w	8004950 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d123      	bne.n	800483e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d11c      	bne.n	800483e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d114      	bne.n	800483e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d10d      	bne.n	800483e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d05d      	beq.n	80048fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b0c      	cmp	r3, #12
 8004842:	d058      	beq.n	80048f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0a1      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004856:	f7ff fc84 	bl	8004162 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800485a:	f7fd ff49 	bl	80026f0 <HAL_GetTick>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004862:	f7fd ff45 	bl	80026f0 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e092      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ef      	bne.n	8004862 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_RCC_OscConfig+0x68c>)
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800489a:	0212      	lsls	r2, r2, #8
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048ae:	430a      	orrs	r2, r1
 80048b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048b8:	f7ff fc44 	bl	8004144 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048cc:	f7fd ff10 	bl	80026f0 <HAL_GetTick>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd ff0c 	bl	80026f0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e059      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f4:	e050      	b.n	8004998 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e04f      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d147      	bne.n	8004998 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004908:	f7ff fc1c 	bl	8004144 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800491c:	f7fd fee8 	bl	80026f0 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd fee4 	bl	80026f0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e031      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ef      	beq.n	8004924 <HAL_RCC_OscConfig+0x664>
 8004944:	e028      	b.n	8004998 <HAL_RCC_OscConfig+0x6d8>
 8004946:	bf00      	nop
 8004948:	58000400 	.word	0x58000400
 800494c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d01e      	beq.n	8004994 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	f7ff fc04 	bl	8004162 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fd fec9 	bl	80026f0 <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004962:	f7fd fec5 	bl	80026f0 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e012      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ef      	bne.n	8004962 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_OscConfig+0x6e4>)
 800498e:	4013      	ands	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]
 8004992:	e001      	b.n	8004998 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3734      	adds	r7, #52	; 0x34
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd90      	pop	{r4, r7, pc}
 80049a2:	bf00      	nop
 80049a4:	eefefffc 	.word	0xeefefffc

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e12d      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b98      	ldr	r3, [pc, #608]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d91b      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b95      	ldr	r3, [pc, #596]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 0207 	bic.w	r2, r3, #7
 80049d2:	4993      	ldr	r1, [pc, #588]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fd fe89 	bl	80026f0 <HAL_GetTick>
 80049de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049e2:	f7fd fe85 	bl	80026f0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e111      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f4:	4b8a      	ldr	r3, [pc, #552]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d1ef      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fafb 	bl	800400e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a18:	f7fd fe6a 	bl	80026f0 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a20:	f7fd fe66 	bl	80026f0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0f2      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a32:	f7ff fbe8 	bl	8004206 <LL_RCC_IsActiveFlag_HPRE>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f1      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff faf2 	bl	8004036 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a52:	f7fd fe4d 	bl	80026f0 <HAL_GetTick>
 8004a56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a5a:	f7fd fe49 	bl	80026f0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0d5      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a6c:	f7ff fbdd 	bl	800422a <LL_RCC_IsActiveFlag_C2HPRE>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f1      	beq.n	8004a5a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff faeb 	bl	8004062 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fe30 	bl	80026f0 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a94:	f7fd fe2c 	bl	80026f0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0b8      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004aa6:	f7ff fbd3 	bl	8004250 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f1      	beq.n	8004a94 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d016      	beq.n	8004aea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fae5 	bl	8004090 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ac6:	f7fd fe13 	bl	80026f0 <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ace:	f7fd fe0f 	bl	80026f0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e09b      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ae0:	f7ff fbc9 	bl	8004276 <LL_RCC_IsActiveFlag_PPRE1>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f1      	beq.n	8004ace <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fadb 	bl	80040b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b02:	f7fd fdf5 	bl	80026f0 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b0a:	f7fd fdf1 	bl	80026f0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e07d      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b1c:	f7ff fbbd 	bl	800429a <LL_RCC_IsActiveFlag_PPRE2>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f1      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d043      	beq.n	8004bba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004b3a:	f7ff f87b 	bl	8003c34 <LL_RCC_HSE_IsReady>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11e      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e067      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b50:	f7ff fb16 	bl	8004180 <LL_RCC_PLL_IsReady>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d113      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e05c      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b66:	f7ff f9e3 	bl	8003f30 <LL_RCC_MSI_IsReady>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e051      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b74:	f7ff f88e 	bl	8003c94 <LL_RCC_HSI_IsReady>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e04a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fa21 	bl	8003fce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fd fdb0 	bl	80026f0 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fd fdac 	bl	80026f0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e036      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	f7ff fa24 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d1ec      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d21b      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	4913      	ldr	r1, [pc, #76]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fd8a 	bl	80026f0 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004be0:	f7fd fd86 	bl	80026f0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e012      	b.n	8004c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_ClockConfig+0x278>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1ef      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c00:	f000 f880 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <HAL_RCC_ClockConfig+0x27c>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c0a:	f7fd fd7d 	bl	8002708 <HAL_GetTickPrio>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fd1f 	bl	8002654 <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58004000 	.word	0x58004000
 8004c24:	20000010 	.word	0x20000010

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	f7ff f9e2 	bl	8003ff6 <LL_RCC_GetSysClkSource>
 8004c32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c3a:	f7ff f99e 	bl	8003f7a <LL_RCC_MSI_GetRange>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e04b      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d102      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e045      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d10a      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c62:	f7fe ffb7 	bl	8003bd4 <LL_RCC_HSE_IsEnabledDiv2>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e03a      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e037      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c78:	f7ff fab9 	bl	80041ee <LL_RCC_PLL_GetMainSource>
 8004c7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d003      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x64>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x6a>
 8004c8a:	e00d      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c8e:	60bb      	str	r3, [r7, #8]
        break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c92:	f7fe ff9f 	bl	8003bd4 <LL_RCC_HSE_IsEnabledDiv2>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c9c:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ca0:	e00d      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004ca4:	60bb      	str	r3, [r7, #8]
        break;
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ca8:	f7ff f967 	bl	8003f7a <LL_RCC_MSI_GetRange>
 8004cac:	4603      	mov	r3, r0
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	60bb      	str	r3, [r7, #8]
        break;
 8004cbc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004cbe:	f7ff fa71 	bl	80041a4 <LL_RCC_PLL_GetN>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	fb03 f402 	mul.w	r4, r3, r2
 8004cca:	f7ff fa84 	bl	80041d6 <LL_RCC_PLL_GetDivider>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004cd8:	f7ff fa71 	bl	80041be <LL_RCC_PLL_GetR>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	0f5b      	lsrs	r3, r3, #29
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0800c53c 	.word	0x0800c53c
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	003d0900 	.word	0x003d0900
 8004d00:	007a1200 	.word	0x007a1200

08004d04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b598      	push	{r3, r4, r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d08:	f7ff ff8e 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	f7ff f9e7 	bl	80040e0 <LL_RCC_GetAHBPrescaler>
 8004d12:	4603      	mov	r3, r0
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	4a03      	ldr	r2, [pc, #12]	; (8004d28 <HAL_RCC_GetHCLKFreq+0x24>)
 8004d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd98      	pop	{r3, r4, r7, pc}
 8004d28:	0800c4dc 	.word	0x0800c4dc

08004d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d2c:	b598      	push	{r3, r4, r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d30:	f7ff ffe8 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d34:	4604      	mov	r4, r0
 8004d36:	f7ff f9ed 	bl	8004114 <LL_RCC_GetAPB1Prescaler>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd98      	pop	{r3, r4, r7, pc}
 8004d54:	0800c51c 	.word	0x0800c51c

08004d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d58:	b598      	push	{r3, r4, r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d5c:	f7ff ffd2 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d60:	4604      	mov	r4, r0
 8004d62:	f7ff f9e3 	bl	800412c <LL_RCC_GetAPB2Prescaler>
 8004d66:	4603      	mov	r3, r0
 8004d68:	0adb      	lsrs	r3, r3, #11
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd98      	pop	{r3, r4, r7, pc}
 8004d80:	0800c51c 	.word	0x0800c51c

08004d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2bb0      	cmp	r3, #176	; 0xb0
 8004d90:	d903      	bls.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e007      	b.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	4a11      	ldr	r2, [pc, #68]	; (8004de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004daa:	f7ff f9a5 	bl	80040f8 <LL_RCC_GetAHB4Prescaler>
 8004dae:	4603      	mov	r3, r0
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	0c9c      	lsrs	r4, r3, #18
 8004dce:	f7fe fef3 	bl	8003bb8 <HAL_PWREx_GetVoltageRange>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f80c 	bl	8004df4 <RCC_SetFlashLatency>
 8004ddc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	0800c53c 	.word	0x0800c53c
 8004dec:	0800c4dc 	.word	0x0800c4dc
 8004df0:	431bde83 	.word	0x431bde83

08004df4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b093      	sub	sp, #76	; 0x4c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <RCC_SetFlashLatency+0xe8>)
 8004e00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004e0a:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <RCC_SetFlashLatency+0xec>)
 8004e0c:	f107 031c 	add.w	r3, r7, #28
 8004e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <RCC_SetFlashLatency+0xf0>)
 8004e18:	f107 040c 	add.w	r4, r7, #12
 8004e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e22:	2300      	movs	r3, #0
 8004e24:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d11a      	bne.n	8004e64 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	643b      	str	r3, [r7, #64]	; 0x40
 8004e32:	e013      	b.n	8004e5c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	3348      	adds	r3, #72	; 0x48
 8004e3a:	443b      	add	r3, r7
 8004e3c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d807      	bhi.n	8004e56 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	3348      	adds	r3, #72	; 0x48
 8004e4c:	443b      	add	r3, r7
 8004e4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e52:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e54:	e020      	b.n	8004e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	3301      	adds	r3, #1
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d9e8      	bls.n	8004e34 <RCC_SetFlashLatency+0x40>
 8004e62:	e019      	b.n	8004e98 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e68:	e013      	b.n	8004e92 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	3348      	adds	r3, #72	; 0x48
 8004e70:	443b      	add	r3, r7
 8004e72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d807      	bhi.n	8004e8c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3348      	adds	r3, #72	; 0x48
 8004e82:	443b      	add	r3, r7
 8004e84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e8a:	e005      	b.n	8004e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	3301      	adds	r3, #1
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d9e8      	bls.n	8004e6a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004e98:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <RCC_SetFlashLatency+0xf4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 0207 	bic.w	r2, r3, #7
 8004ea0:	4911      	ldr	r1, [pc, #68]	; (8004ee8 <RCC_SetFlashLatency+0xf4>)
 8004ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ea8:	f7fd fc22 	bl	80026f0 <HAL_GetTick>
 8004eac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004eae:	e008      	b.n	8004ec2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004eb0:	f7fd fc1e 	bl	80026f0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e007      	b.n	8004ed2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <RCC_SetFlashLatency+0xf4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1ef      	bne.n	8004eb0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	374c      	adds	r7, #76	; 0x4c
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	0800c4b0 	.word	0x0800c4b0
 8004ee0:	0800c4c0 	.word	0x0800c4c0
 8004ee4:	0800c4cc 	.word	0x0800c4cc
 8004ee8:	58004000 	.word	0x58004000

08004eec <LL_RCC_LSE_IsEnabled>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <LL_RCC_LSE_IsEnabled+0x18>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <LL_RCC_LSE_IsEnabled+0x1a>
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <LL_RCC_LSE_IsReady>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d101      	bne.n	8004f28 <LL_RCC_LSE_IsReady+0x18>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <LL_RCC_LSE_IsReady+0x1a>
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_RCC_SetRFWKPClockSource>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_SetSMPSClockSource>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_RCC_SetSMPSPrescaler>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_SetUSARTClockSource>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f023 0203 	bic.w	r2, r3, #3
 8004fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_SetLPUARTClockSource>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_SetI2CClockSource>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800502c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_SetLPTIMClockSource>:
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_RCC_SetSAIClockSource>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_SetRNGClockSource>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_SetCLK48ClockSource>:
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_SetUSBClockSource>:
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ffe3 	bl	80050ce <LL_RCC_SetCLK48ClockSource>
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <LL_RCC_SetADCClockSource>:
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_SetRTCClockSource>:
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <LL_RCC_GetRTCClockSource>:
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_RCC_ForceBackupDomainReset>:
{
 8005182:	b480      	push	{r7}
 8005184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_RCC_PLLSAI1_Enable>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d8:	6013      	str	r3, [r2, #0]
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_PLLSAI1_Disable>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <LL_RCC_PLLSAI1_IsReady>:
{
 8005202:	b480      	push	{r7}
 8005204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005214:	d101      	bne.n	800521a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b088      	sub	sp, #32
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005232:	2300      	movs	r3, #0
 8005234:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d034      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800524a:	d021      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800524c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005250:	d81b      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005256:	d01d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800525c:	d815      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005266:	d110      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005276:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005278:	e00d      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f947 	bl	8005512 <RCCEx_PLLSAI1_ConfigNP>
 8005284:	4603      	mov	r3, r0
 8005286:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	77fb      	strb	r3, [r7, #31]
        break;
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fee8 	bl	8005076 <LL_RCC_SetSAIClockSource>
 80052a6:	e001      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
 80052aa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d046      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80052b8:	f7ff ff56 	bl	8005168 <LL_RCC_GetRTCClockSource>
 80052bc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d03c      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80052c8:	f7fe fc66 	bl	8003b98 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ff30 	bl	800513c <LL_RCC_SetRTCClockSource>
 80052dc:	e02e      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80052e8:	f7ff ff4b 	bl	8005182 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80052ec:	f7ff ff5a 	bl	80051a4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80052fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005308:	f7ff fdf0 	bl	8004eec <LL_RCC_LSE_IsEnabled>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d114      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005312:	f7fd f9ed 	bl	80026f0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005318:	e00b      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f7fd f9e9 	bl	80026f0 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	; 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d902      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	77fb      	strb	r3, [r7, #31]
              break;
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005332:	f7ff fded 	bl	8004f10 <LL_RCC_LSE_IsReady>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d1ee      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800533c:	7ffb      	ldrb	r3, [r7, #31]
 800533e:	77bb      	strb	r3, [r7, #30]
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fe2a 	bl	8004fb0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fe35 	bl	8004fdc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fe5d 	bl	8005042 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fe52 	bl	8005042 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fe2a 	bl	8005008 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fe1f 	bl	8005008 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d022      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fe8d 	bl	80050fa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053f8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f8dd 	bl	80055c8 <RCCEx_PLLSAI1_ConfigNQ>
 800540e:	4603      	mov	r3, r0
 8005410:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02b      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543a:	d003      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fe2a 	bl	80050a2 <LL_RCC_SetRNGClockSource>
 800544e:	e00a      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	2000      	movs	r0, #0
 800545c:	f7ff fe21 	bl	80050a2 <LL_RCC_SetRNGClockSource>
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff fe34 	bl	80050ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800546e:	d107      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d022      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe3d 	bl	8005110 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549e:	d107      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b8:	d10b      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f8dd 	bl	800567e <RCCEx_PLLSAI1_ConfigNR>
 80054c4:	4603      	mov	r3, r0
 80054c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fd26 	bl	8004f34 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fd45 	bl	8004f88 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fd2c 	bl	8004f60 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005508:	7fbb      	ldrb	r3, [r7, #30]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800551e:	f7ff fe61 	bl	80051e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005522:	f7fd f8e5 	bl	80026f0 <HAL_GetTick>
 8005526:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005528:	e009      	b.n	800553e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552a:	f7fd f8e1 	bl	80026f0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d902      	bls.n	800553e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e004      	b.n	8005548 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800553e:	f7ff fe60 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d137      	bne.n	80055be <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005578:	4313      	orrs	r3, r2
 800557a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800557c:	f7ff fe23 	bl	80051c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005580:	f7fd f8b6 	bl	80026f0 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005586:	e009      	b.n	800559c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005588:	f7fd f8b2 	bl	80026f0 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d902      	bls.n	800559c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	73fb      	strb	r3, [r7, #15]
        break;
 800559a:	e004      	b.n	80055a6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800559c:	f7ff fe31 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d1f0      	bne.n	8005588 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055d4:	f7ff fe06 	bl	80051e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055d8:	f7fd f88a 	bl	80026f0 <HAL_GetTick>
 80055dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055de:	e009      	b.n	80055f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e0:	f7fd f886 	bl	80026f0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	73fb      	strb	r3, [r7, #15]
      break;
 80055f2:	e004      	b.n	80055fe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055f4:	f7ff fe05 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d137      	bne.n	8005674 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005632:	f7ff fdc8 	bl	80051c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005636:	f7fd f85b 	bl	80026f0 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800563c:	e009      	b.n	8005652 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800563e:	f7fd f857 	bl	80026f0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d902      	bls.n	8005652 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	73fb      	strb	r3, [r7, #15]
        break;
 8005650:	e004      	b.n	800565c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005652:	f7ff fdd6 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 8005656:	4603      	mov	r3, r0
 8005658:	2b01      	cmp	r3, #1
 800565a:	d1f0      	bne.n	800563e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005670:	4313      	orrs	r3, r2
 8005672:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800568a:	f7ff fdab 	bl	80051e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800568e:	f7fd f82f 	bl	80026f0 <HAL_GetTick>
 8005692:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005694:	e009      	b.n	80056aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005696:	f7fd f82b 	bl	80026f0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d902      	bls.n	80056aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	73fb      	strb	r3, [r7, #15]
      break;
 80056a8:	e004      	b.n	80056b4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056aa:	f7ff fdaa 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d137      	bne.n	800572a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056e8:	f7ff fd6d 	bl	80051c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ec:	f7fd f800 	bl	80026f0 <HAL_GetTick>
 80056f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056f2:	e009      	b.n	8005708 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f4:	f7fc fffc 	bl	80026f0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d902      	bls.n	8005708 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	73fb      	strb	r3, [r7, #15]
        break;
 8005706:	e004      	b.n	8005712 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005708:	f7ff fd7b 	bl	8005202 <LL_RCC_PLLSAI1_IsReady>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d1f0      	bne.n	80056f4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d108      	bne.n	800572a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005726:	4313      	orrs	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <LL_RCC_GetUSARTClockSource>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4013      	ands	r3, r2
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <LL_RCC_GetLPUARTClockSource>:
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005760:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4013      	ands	r3, r2
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e042      	b.n	800580c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fc fc09 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2224      	movs	r2, #36	; 0x24
 80057a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fc4a 	bl	8006050 <UART_SetConfig>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e022      	b.n	800580c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fe66 	bl	80064a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 feed 	bl	80065e4 <UART_CheckIdleState>
 800580a:	4603      	mov	r3, r0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	2b20      	cmp	r3, #32
 800582c:	d17b      	bne.n	8005926 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Transmit+0x26>
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e074      	b.n	8005928 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2221      	movs	r2, #33	; 0x21
 800584a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800584e:	f7fc ff4f 	bl	80026f0 <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d108      	bne.n	8005880 <HAL_UART_Transmit+0x6c>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e003      	b.n	8005888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005888:	e030      	b.n	80058ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 ff4f 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e03d      	b.n	8005928 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	3302      	adds	r3, #2
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	e007      	b.n	80058da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1c8      	bne.n	800588a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 ff18 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e006      	b.n	8005928 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005944:	2b20      	cmp	r3, #32
 8005946:	d137      	bne.n	80059b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Receive_IT+0x24>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e030      	b.n	80059ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <HAL_UART_Receive_IT+0x94>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d01f      	beq.n	80059a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d018      	beq.n	80059a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	613b      	str	r3, [r7, #16]
   return(result);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 ff2a 	bl	8006808 <UART_Start_Receive_IT>
 80059b4:	4603      	mov	r3, r0
 80059b6:	e000      	b.n	80059ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3728      	adds	r7, #40	; 0x28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40008000 	.word	0x40008000

080059c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b0ba      	sub	sp, #232	; 0xe8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80059f6:	4013      	ands	r3, r2
 80059f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11b      	bne.n	8005a3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 82e3 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
      }
      return;
 8005a3a:	e2dd      	b.n	8005ff8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8123 	beq.w	8005c8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a4a:	4b8d      	ldr	r3, [pc, #564]	; (8005c80 <HAL_UART_IRQHandler+0x2b8>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a56:	4b8b      	ldr	r3, [pc, #556]	; (8005c84 <HAL_UART_IRQHandler+0x2bc>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8116 	beq.w	8005c8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d011      	beq.n	8005a90 <HAL_UART_IRQHandler+0xc8>
 8005a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a86:	f043 0201 	orr.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d011      	beq.n	8005ac0 <HAL_UART_IRQHandler+0xf8>
 8005a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2202      	movs	r2, #2
 8005aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f043 0204 	orr.w	r2, r3, #4
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d011      	beq.n	8005af0 <HAL_UART_IRQHandler+0x128>
 8005acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2204      	movs	r2, #4
 8005ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f043 0202 	orr.w	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <HAL_UART_IRQHandler+0x2b8>)
 8005b0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d012      	beq.n	8005b5e <HAL_UART_IRQHandler+0x196>
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f043 0220 	orr.w	r2, r3, #32
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8249 	beq.w	8005ffc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d105      	bne.n	8005b8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d005      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d054      	beq.n	8005c6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 ff42 	bl	8006a4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d146      	bne.n	8005c64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1d9      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d017      	beq.n	8005c5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <HAL_UART_IRQHandler+0x2c0>)
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fc ff01 	bl	8002a44 <HAL_DMA_Abort_IT>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d019      	beq.n	8005c7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005c56:	4610      	mov	r0, r2
 8005c58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5a:	e00f      	b.n	8005c7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f9e1 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c62:	e00b      	b.n	8005c7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9dd 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	e007      	b.n	8005c7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9d9 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005c7a:	e1bf      	b.n	8005ffc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	bf00      	nop
    return;
 8005c7e:	e1bd      	b.n	8005ffc <HAL_UART_IRQHandler+0x634>
 8005c80:	10000001 	.word	0x10000001
 8005c84:	04000120 	.word	0x04000120
 8005c88:	08006b19 	.word	0x08006b19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	f040 8153 	bne.w	8005f3c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 814c 	beq.w	8005f3c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8145 	beq.w	8005f3c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	f040 80bb 	bne.w	8005e40 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 818f 	beq.w	8006000 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ce8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cec:	429a      	cmp	r2, r3
 8005cee:	f080 8187 	bcs.w	8006000 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 8087 	bne.w	8005e1e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1da      	bne.n	8005d10 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e1      	bne.n	8005d5a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e3      	bne.n	8005d96 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e4      	bne.n	8005ddc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fc fdb4 	bl	8002986 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8fd 	bl	8006038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e3e:	e0df      	b.n	8006000 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80d1 	beq.w	8006004 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80cc 	beq.w	8006004 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e4      	bne.n	8005e6c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eca:	633a      	str	r2, [r7, #48]	; 0x30
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e1      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0310 	bic.w	r3, r3, #16
 8005f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	69b9      	ldr	r1, [r7, #24]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	617b      	str	r3, [r7, #20]
   return(result);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e4      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f87f 	bl	8006038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f3a:	e063      	b.n	8006004 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00e      	beq.n	8005f66 <HAL_UART_IRQHandler+0x59e>
 8005f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fb38 	bl	80075d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f64:	e051      	b.n	800600a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d014      	beq.n	8005f9c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03a      	beq.n	8006008 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
    }
    return;
 8005f9a:	e035      	b.n	8006008 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_UART_IRQHandler+0x5f4>
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fdc5 	bl	8006b44 <UART_EndTransmit_IT>
    return;
 8005fba:	e026      	b.n	800600a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <HAL_UART_IRQHandler+0x614>
 8005fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 fb11 	bl	80075fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fda:	e016      	b.n	800600a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <HAL_UART_IRQHandler+0x642>
 8005fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da0c      	bge.n	800600a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 faf9 	bl	80075e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff6:	e008      	b.n	800600a <HAL_UART_IRQHandler+0x642>
      return;
 8005ff8:	bf00      	nop
 8005ffa:	e006      	b.n	800600a <HAL_UART_IRQHandler+0x642>
    return;
 8005ffc:	bf00      	nop
 8005ffe:	e004      	b.n	800600a <HAL_UART_IRQHandler+0x642>
      return;
 8006000:	bf00      	nop
 8006002:	e002      	b.n	800600a <HAL_UART_IRQHandler+0x642>
      return;
 8006004:	bf00      	nop
 8006006:	e000      	b.n	800600a <HAL_UART_IRQHandler+0x642>
    return;
 8006008:	bf00      	nop
  }
}
 800600a:	37e8      	adds	r7, #232	; 0xe8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006054:	b08c      	sub	sp, #48	; 0x30
 8006056:	af00      	add	r7, sp, #0
 8006058:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	431a      	orrs	r2, r3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	431a      	orrs	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	4313      	orrs	r3, r2
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4baf      	ldr	r3, [pc, #700]	; (800633c <UART_SetConfig+0x2ec>)
 8006080:	4013      	ands	r3, r2
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006088:	430b      	orrs	r3, r1
 800608a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4aa4      	ldr	r2, [pc, #656]	; (8006340 <UART_SetConfig+0x2f0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b8:	4313      	orrs	r3, r2
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80060c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f023 010f 	bic.w	r1, r3, #15
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a95      	ldr	r2, [pc, #596]	; (8006344 <UART_SetConfig+0x2f4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d125      	bne.n	8006140 <UART_SetConfig+0xf0>
 80060f4:	2003      	movs	r0, #3
 80060f6:	f7ff fb1d 	bl	8005734 <LL_RCC_GetUSARTClockSource>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d81b      	bhi.n	8006138 <UART_SetConfig+0xe8>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0xb8>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006119 	.word	0x08006119
 800610c:	08006129 	.word	0x08006129
 8006110:	08006121 	.word	0x08006121
 8006114:	08006131 	.word	0x08006131
 8006118:	2301      	movs	r3, #1
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611e:	e042      	b.n	80061a6 <UART_SetConfig+0x156>
 8006120:	2302      	movs	r3, #2
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006126:	e03e      	b.n	80061a6 <UART_SetConfig+0x156>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612e:	e03a      	b.n	80061a6 <UART_SetConfig+0x156>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e036      	b.n	80061a6 <UART_SetConfig+0x156>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	e032      	b.n	80061a6 <UART_SetConfig+0x156>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a7e      	ldr	r2, [pc, #504]	; (8006340 <UART_SetConfig+0x2f0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d12a      	bne.n	80061a0 <UART_SetConfig+0x150>
 800614a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800614e:	f7ff fb01 	bl	8005754 <LL_RCC_GetLPUARTClockSource>
 8006152:	4603      	mov	r3, r0
 8006154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006158:	d01a      	beq.n	8006190 <UART_SetConfig+0x140>
 800615a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800615e:	d81b      	bhi.n	8006198 <UART_SetConfig+0x148>
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	d00c      	beq.n	8006180 <UART_SetConfig+0x130>
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d815      	bhi.n	8006198 <UART_SetConfig+0x148>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <UART_SetConfig+0x128>
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d008      	beq.n	8006188 <UART_SetConfig+0x138>
 8006176:	e00f      	b.n	8006198 <UART_SetConfig+0x148>
 8006178:	2300      	movs	r3, #0
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617e:	e012      	b.n	80061a6 <UART_SetConfig+0x156>
 8006180:	2302      	movs	r3, #2
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006186:	e00e      	b.n	80061a6 <UART_SetConfig+0x156>
 8006188:	2304      	movs	r3, #4
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e00a      	b.n	80061a6 <UART_SetConfig+0x156>
 8006190:	2308      	movs	r3, #8
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e006      	b.n	80061a6 <UART_SetConfig+0x156>
 8006198:	2310      	movs	r3, #16
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e002      	b.n	80061a6 <UART_SetConfig+0x156>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a65      	ldr	r2, [pc, #404]	; (8006340 <UART_SetConfig+0x2f0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	f040 8097 	bne.w	80062e0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d823      	bhi.n	8006202 <UART_SetConfig+0x1b2>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x170>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	08006203 	.word	0x08006203
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	08006203 	.word	0x08006203
 80061d0:	080061f3 	.word	0x080061f3
 80061d4:	08006203 	.word	0x08006203
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006203 	.word	0x08006203
 80061e0:	080061fb 	.word	0x080061fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe fda2 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 80061e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061ea:	e010      	b.n	800620e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ec:	4b56      	ldr	r3, [pc, #344]	; (8006348 <UART_SetConfig+0x2f8>)
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f2:	f7fe fd19 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006200:	e005      	b.n	800620e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800620c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 812b 	beq.w	800646c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	4a4c      	ldr	r2, [pc, #304]	; (800634c <UART_SetConfig+0x2fc>)
 800621c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006220:	461a      	mov	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	fbb3 f3f2 	udiv	r3, r3, r2
 8006228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4413      	add	r3, r2
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	429a      	cmp	r2, r3
 8006238:	d305      	bcc.n	8006246 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	d903      	bls.n	800624e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800624c:	e10e      	b.n	800646c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	2200      	movs	r2, #0
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	60fa      	str	r2, [r7, #12]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	4a3c      	ldr	r2, [pc, #240]	; (800634c <UART_SetConfig+0x2fc>)
 800625c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006260:	b29b      	uxth	r3, r3
 8006262:	2200      	movs	r2, #0
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006270:	f7fa fce2 	bl	8000c38 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	020b      	lsls	r3, r1, #8
 8006286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800628a:	0202      	lsls	r2, r0, #8
 800628c:	6979      	ldr	r1, [r7, #20]
 800628e:	6849      	ldr	r1, [r1, #4]
 8006290:	0849      	lsrs	r1, r1, #1
 8006292:	2000      	movs	r0, #0
 8006294:	460c      	mov	r4, r1
 8006296:	4605      	mov	r5, r0
 8006298:	eb12 0804 	adds.w	r8, r2, r4
 800629c:	eb43 0905 	adc.w	r9, r3, r5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	469a      	mov	sl, r3
 80062a8:	4693      	mov	fp, r2
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fcc1 	bl	8000c38 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4613      	mov	r3, r2
 80062bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c4:	d308      	bcc.n	80062d8 <UART_SetConfig+0x288>
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062cc:	d204      	bcs.n	80062d8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	e0c9      	b.n	800646c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062de:	e0c5      	b.n	800646c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	d16d      	bne.n	80063c6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80062ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062ee:	3b01      	subs	r3, #1
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	d82d      	bhi.n	8006350 <UART_SetConfig+0x300>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x2ac>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006325 	.word	0x08006325
 8006304:	08006351 	.word	0x08006351
 8006308:	0800632b 	.word	0x0800632b
 800630c:	08006351 	.word	0x08006351
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006333 	.word	0x08006333
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800631c:	f7fe fd1c 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006322:	e01b      	b.n	800635c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <UART_SetConfig+0x2f8>)
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006328:	e018      	b.n	800635c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632a:	f7fe fc7d 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 800632e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006330:	e014      	b.n	800635c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006338:	e010      	b.n	800635c <UART_SetConfig+0x30c>
 800633a:	bf00      	nop
 800633c:	cfff69f3 	.word	0xcfff69f3
 8006340:	40008000 	.word	0x40008000
 8006344:	40013800 	.word	0x40013800
 8006348:	00f42400 	.word	0x00f42400
 800634c:	0800c57c 	.word	0x0800c57c
      default:
        pclk = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800635a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8084 	beq.w	800646c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	4a4b      	ldr	r2, [pc, #300]	; (8006498 <UART_SetConfig+0x448>)
 800636a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636e:	461a      	mov	r2, r3
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	fbb3 f3f2 	udiv	r3, r3, r2
 8006376:	005a      	lsls	r2, r3, #1
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	441a      	add	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b0f      	cmp	r3, #15
 800638e:	d916      	bls.n	80063be <UART_SetConfig+0x36e>
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006396:	d212      	bcs.n	80063be <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f023 030f 	bic.w	r3, r3, #15
 80063a0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	8bfa      	ldrh	r2, [r7, #30]
 80063ba:	60da      	str	r2, [r3, #12]
 80063bc:	e056      	b.n	800646c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063c4:	e052      	b.n	800646c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b07      	cmp	r3, #7
 80063ce:	d822      	bhi.n	8006416 <UART_SetConfig+0x3c6>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x388>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063f9 	.word	0x080063f9
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006417 	.word	0x08006417
 80063e4:	08006407 	.word	0x08006407
 80063e8:	08006417 	.word	0x08006417
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006417 	.word	0x08006417
 80063f4:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fe fcae 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063fe:	e010      	b.n	8006422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b26      	ldr	r3, [pc, #152]	; (800649c <UART_SetConfig+0x44c>)
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006404:	e00d      	b.n	8006422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fe fc0f 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800640c:	e009      	b.n	8006422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006414:	e005      	b.n	8006422 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006420:	bf00      	nop
    }

    if (pclk != 0U)
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d021      	beq.n	800646c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <UART_SetConfig+0x448>)
 800642e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006432:	461a      	mov	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	fbb3 f2f2 	udiv	r2, r3, r2
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	441a      	add	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d909      	bls.n	8006466 <UART_SetConfig+0x416>
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d205      	bcs.n	8006466 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b29a      	uxth	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60da      	str	r2, [r3, #12]
 8006464:	e002      	b.n	800646c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2201      	movs	r2, #1
 8006470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006488:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800648c:	4618      	mov	r0, r3
 800648e:	3730      	adds	r7, #48	; 0x30
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006496:	bf00      	nop
 8006498:	0800c57c 	.word	0x0800c57c
 800649c:	00f42400 	.word	0x00f42400

080064a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659e:	d10a      	bne.n	80065b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b098      	sub	sp, #96	; 0x60
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f4:	f7fc f87c 	bl	80026f0 <HAL_GetTick>
 80065f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b08      	cmp	r3, #8
 8006606:	d12f      	bne.n	8006668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006610:	2200      	movs	r2, #0
 8006612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f88e 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d022      	beq.n	8006668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006636:	653b      	str	r3, [r7, #80]	; 0x50
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
 8006642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e063      	b.n	8006730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b04      	cmp	r3, #4
 8006674:	d149      	bne.n	800670a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f857 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03c      	beq.n	800670a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	623b      	str	r3, [r7, #32]
   return(result);
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
 80066b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e2:	61fa      	str	r2, [r7, #28]
 80066e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	69b9      	ldr	r1, [r7, #24]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	617b      	str	r3, [r7, #20]
   return(result);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e012      	b.n	8006730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3758      	adds	r7, #88	; 0x58
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	e049      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d045      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fb ffcd 	bl	80026f0 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <UART_WaitOnFlagUntilTimeout+0x30>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e048      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d031      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d110      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f95b 	bl	8006a4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2208      	movs	r2, #8
 800679a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e029      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b8:	d111      	bne.n	80067de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f941 	bl	8006a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e00f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d0a6      	beq.n	800674a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006808:	b480      	push	{r7}
 800680a:	b0a3      	sub	sp, #140	; 0x8c
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d10e      	bne.n	800685a <UART_Start_Receive_IT+0x52>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <UART_Start_Receive_IT+0x48>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f240 12ff 	movw	r2, #511	; 0x1ff
 800684a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800684e:	e02d      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006858:	e028      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <UART_Start_Receive_IT+0x76>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <UART_Start_Receive_IT+0x6c>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006872:	e01b      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	227f      	movs	r2, #127	; 0x7f
 8006878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800687c:	e016      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006886:	d10d      	bne.n	80068a4 <UART_Start_Receive_IT+0x9c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <UART_Start_Receive_IT+0x92>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	227f      	movs	r2, #127	; 0x7f
 8006894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006898:	e008      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	223f      	movs	r2, #63	; 0x3f
 800689e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068a2:	e003      	b.n	80068ac <UART_Start_Receive_IT+0xa4>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2222      	movs	r2, #34	; 0x22
 80068b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80068cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80068e0:	673a      	str	r2, [r7, #112]	; 0x70
 80068e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80068e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80068ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e3      	bne.n	80068bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068fc:	d14f      	bne.n	800699e <UART_Start_Receive_IT+0x196>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006904:	88fa      	ldrh	r2, [r7, #6]
 8006906:	429a      	cmp	r2, r3
 8006908:	d349      	bcc.n	800699e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006912:	d107      	bne.n	8006924 <UART_Start_Receive_IT+0x11c>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4a47      	ldr	r2, [pc, #284]	; (8006a3c <UART_Start_Receive_IT+0x234>)
 8006920:	675a      	str	r2, [r3, #116]	; 0x74
 8006922:	e002      	b.n	800692a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a46      	ldr	r2, [pc, #280]	; (8006a40 <UART_Start_Receive_IT+0x238>)
 8006928:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01a      	beq.n	8006968 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006956:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800695a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e4      	bne.n	8006932 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006988:	64ba      	str	r2, [r7, #72]	; 0x48
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800698e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_Start_Receive_IT+0x160>
 800699c:	e046      	b.n	8006a2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a6:	d107      	bne.n	80069b8 <UART_Start_Receive_IT+0x1b0>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a24      	ldr	r2, [pc, #144]	; (8006a44 <UART_Start_Receive_IT+0x23c>)
 80069b4:	675a      	str	r2, [r3, #116]	; 0x74
 80069b6:	e002      	b.n	80069be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <UART_Start_Receive_IT+0x240>)
 80069bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d019      	beq.n	80069fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069da:	677b      	str	r3, [r7, #116]	; 0x74
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
 80069e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e6      	bne.n	80069c6 <UART_Start_Receive_IT+0x1be>
 80069f8:	e018      	b.n	8006a2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f043 0320 	orr.w	r3, r3, #32
 8006a0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69f9      	ldr	r1, [r7, #28]
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	378c      	adds	r7, #140	; 0x8c
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	0800726d 	.word	0x0800726d
 8006a40:	08006f0d 	.word	0x08006f0d
 8006a44:	08006d55 	.word	0x08006d55
 8006a48:	08006b9d 	.word	0x08006b9d

08006a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b095      	sub	sp, #84	; 0x54
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	643b      	str	r3, [r7, #64]	; 0x40
 8006a74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e3      	bne.n	8006a86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d118      	bne.n	8006af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	647b      	str	r3, [r7, #68]	; 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	613b      	str	r3, [r7, #16]
   return(result);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b0c:	bf00      	nop
 8006b0e:	3754      	adds	r7, #84	; 0x54
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fa74 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	613b      	str	r3, [r7, #16]
   return(result);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fa3f 	bl	8006010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b92:	bf00      	nop
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b09c      	sub	sp, #112	; 0x70
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006baa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb4:	2b22      	cmp	r3, #34	; 0x22
 8006bb6:	f040 80be 	bne.w	8006d36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bc8:	b2d9      	uxtb	r1, r3
 8006bca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 80a1 	bne.w	8006d46 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c56:	647a      	str	r2, [r7, #68]	; 0x44
 8006c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <UART_RxISR_8BIT+0x1b4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d01f      	beq.n	8006cc8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006caa:	663b      	str	r3, [r7, #96]	; 0x60
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d12e      	bne.n	8006d2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d103      	bne.n	8006d1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff f986 	bl	8006038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d2c:	e00b      	b.n	8006d46 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fa fe66 	bl	8001a00 <HAL_UART_RxCpltCallback>
}
 8006d34:	e007      	b.n	8006d46 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	619a      	str	r2, [r3, #24]
}
 8006d46:	bf00      	nop
 8006d48:	3770      	adds	r7, #112	; 0x70
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40008000 	.word	0x40008000

08006d54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b09c      	sub	sp, #112	; 0x70
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6c:	2b22      	cmp	r3, #34	; 0x22
 8006d6e:	f040 80be 	bne.w	8006eee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d80:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006d86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 80a1 	bne.w	8006efe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dda:	657b      	str	r3, [r7, #84]	; 0x54
 8006ddc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006de0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e6      	bne.n	8006dbc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	663b      	str	r3, [r7, #96]	; 0x60
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a33      	ldr	r2, [pc, #204]	; (8006f08 <UART_RxISR_16BIT+0x1b4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01f      	beq.n	8006e80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d12e      	bne.n	8006ee6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0310 	bic.w	r3, r3, #16
 8006ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eac:	61bb      	str	r3, [r7, #24]
 8006eae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6979      	ldr	r1, [r7, #20]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e6      	bne.n	8006e8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d103      	bne.n	8006ed6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff f8aa 	bl	8006038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ee4:	e00b      	b.n	8006efe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa fd8a 	bl	8001a00 <HAL_UART_RxCpltCallback>
}
 8006eec:	e007      	b.n	8006efe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0208 	orr.w	r2, r2, #8
 8006efc:	619a      	str	r2, [r3, #24]
}
 8006efe:	bf00      	nop
 8006f00:	3770      	adds	r7, #112	; 0x70
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40008000 	.word	0x40008000

08006f0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b0ac      	sub	sp, #176	; 0xb0
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f42:	2b22      	cmp	r3, #34	; 0x22
 8006f44:	f040 8182 	bne.w	800724c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f4e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f52:	e125      	b.n	80071a0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f5e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006f62:	b2d9      	uxtb	r1, r3
 8006f64:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	400a      	ands	r2, r1
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d053      	beq.n	800704e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f043 0201 	orr.w	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d011      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d011      	beq.n	8007036 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2204      	movs	r2, #4
 8007024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702c:	f043 0202 	orr.w	r2, r3, #2
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fe ffef 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 80a2 	bne.w	80071a0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800706a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800707e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007080:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007084:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800708c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e4      	bne.n	800705c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80070a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80070bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80070c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80070c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e1      	bne.n	8007092 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a5f      	ldr	r2, [pc, #380]	; (8007264 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d021      	beq.n	8007130 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01a      	beq.n	8007130 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800710e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800711c:	657b      	str	r3, [r7, #84]	; 0x54
 800711e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e4      	bne.n	80070fa <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d130      	bne.n	800719a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	f023 0310 	bic.w	r3, r3, #16
 8007152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007160:	643b      	str	r3, [r7, #64]	; 0x40
 8007162:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e4      	bne.n	800713e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b10      	cmp	r3, #16
 8007180:	d103      	bne.n	800718a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2210      	movs	r2, #16
 8007188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fe ff50 	bl	8006038 <HAL_UARTEx_RxEventCallback>
 8007198:	e002      	b.n	80071a0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fa fc30 	bl	8001a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071a0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80071a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f47f aecf 	bne.w	8006f54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d049      	beq.n	800725c <UART_RxISR_8BIT_FIFOEN+0x350>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071ce:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d242      	bcs.n	800725c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e3      	bne.n	80071d6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007212:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	60bb      	str	r3, [r7, #8]
   return(result);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f043 0320 	orr.w	r3, r3, #32
 8007228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	613b      	str	r3, [r7, #16]
   return(result);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e4      	bne.n	8007214 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800724a:	e007      	b.n	800725c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0208 	orr.w	r2, r2, #8
 800725a:	619a      	str	r2, [r3, #24]
}
 800725c:	bf00      	nop
 800725e:	37b0      	adds	r7, #176	; 0xb0
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40008000 	.word	0x40008000
 8007268:	08006b9d 	.word	0x08006b9d

0800726c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b0ae      	sub	sp, #184	; 0xb8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800727a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a2:	2b22      	cmp	r3, #34	; 0x22
 80072a4:	f040 8186 	bne.w	80075b4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072b2:	e129      	b.n	8007508 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80072c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80072ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80072ce:	4013      	ands	r3, r2
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	1c9a      	adds	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	2b00      	cmp	r3, #0
 8007308:	d053      	beq.n	80073b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800730a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00b      	beq.n	800733a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2201      	movs	r2, #1
 8007328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	f043 0201 	orr.w	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800733a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2202      	movs	r2, #2
 8007358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007360:	f043 0204 	orr.w	r2, r3, #4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800736a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2204      	movs	r2, #4
 8007388:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	f043 0202 	orr.w	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fe fe3d 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80a4 	bne.w	8007508 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e2      	bne.n	80073c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e1      	bne.n	80073fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a5f      	ldr	r2, [pc, #380]	; (80075cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d021      	beq.n	8007498 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01a      	beq.n	8007498 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007484:	65bb      	str	r3, [r7, #88]	; 0x58
 8007486:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800748a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e4      	bne.n	8007462 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d130      	bne.n	8007502 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074c8:	647b      	str	r3, [r7, #68]	; 0x44
 80074ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e4      	bne.n	80074a6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d103      	bne.n	80074f2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2210      	movs	r2, #16
 80074f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fe fd9c 	bl	8006038 <HAL_UARTEx_RxEventCallback>
 8007500:	e002      	b.n	8007508 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fa fa7c 	bl	8001a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007508:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f aecb 	bne.w	80072b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007524:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007528:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800752c:	2b00      	cmp	r3, #0
 800752e:	d049      	beq.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007536:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800753a:	429a      	cmp	r2, r3
 800753c:	d242      	bcs.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	623b      	str	r3, [r7, #32]
   return(result);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007562:	633a      	str	r2, [r7, #48]	; 0x30
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800757a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	60fb      	str	r3, [r7, #12]
   return(result);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f043 0320 	orr.w	r3, r3, #32
 8007590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	69b9      	ldr	r1, [r7, #24]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	617b      	str	r3, [r7, #20]
   return(result);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e4      	bne.n	800757c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075b2:	e007      	b.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	619a      	str	r2, [r3, #24]
}
 80075c4:	bf00      	nop
 80075c6:	37b8      	adds	r7, #184	; 0xb8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40008000 	.word	0x40008000
 80075d0:	08006d55 	.word	0x08006d55

080075d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UARTEx_DisableFifoMode+0x16>
 8007622:	2302      	movs	r3, #2
 8007624:	e027      	b.n	8007676 <HAL_UARTEx_DisableFifoMode+0x66>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2224      	movs	r2, #36	; 0x24
 8007632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007654:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007696:	2302      	movs	r3, #2
 8007698:	e02d      	b.n	80076f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2224      	movs	r2, #36	; 0x24
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f850 	bl	800777c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007712:	2302      	movs	r3, #2
 8007714:	e02d      	b.n	8007772 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2224      	movs	r2, #36	; 0x24
 8007722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f812 	bl	800777c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007788:	2b00      	cmp	r3, #0
 800778a:	d108      	bne.n	800779e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800779c:	e031      	b.n	8007802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800779e:	2308      	movs	r3, #8
 80077a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077a2:	2308      	movs	r3, #8
 80077a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	0e5b      	lsrs	r3, r3, #25
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	0f5b      	lsrs	r3, r3, #29
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	7b3a      	ldrb	r2, [r7, #12]
 80077ca:	4911      	ldr	r1, [pc, #68]	; (8007810 <UARTEx_SetNbDataToProcess+0x94>)
 80077cc:	5c8a      	ldrb	r2, [r1, r2]
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077d2:	7b3a      	ldrb	r2, [r7, #12]
 80077d4:	490f      	ldr	r1, [pc, #60]	; (8007814 <UARTEx_SetNbDataToProcess+0x98>)
 80077d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	7b7a      	ldrb	r2, [r7, #13]
 80077e8:	4909      	ldr	r1, [pc, #36]	; (8007810 <UARTEx_SetNbDataToProcess+0x94>)
 80077ea:	5c8a      	ldrb	r2, [r1, r2]
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f0:	7b7a      	ldrb	r2, [r7, #13]
 80077f2:	4908      	ldr	r1, [pc, #32]	; (8007814 <UARTEx_SetNbDataToProcess+0x98>)
 80077f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	0800c594 	.word	0x0800c594
 8007814:	0800c59c 	.word	0x0800c59c

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	; (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	2000001c 	.word	0x2000001c

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4d0d      	ldr	r5, [pc, #52]	; (800785c <__libc_init_array+0x38>)
 8007828:	4c0d      	ldr	r4, [pc, #52]	; (8007860 <__libc_init_array+0x3c>)
 800782a:	1b64      	subs	r4, r4, r5
 800782c:	10a4      	asrs	r4, r4, #2
 800782e:	2600      	movs	r6, #0
 8007830:	42a6      	cmp	r6, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	4d0b      	ldr	r5, [pc, #44]	; (8007864 <__libc_init_array+0x40>)
 8007836:	4c0c      	ldr	r4, [pc, #48]	; (8007868 <__libc_init_array+0x44>)
 8007838:	f004 fd1c 	bl	800c274 <_init>
 800783c:	1b64      	subs	r4, r4, r5
 800783e:	10a4      	asrs	r4, r4, #2
 8007840:	2600      	movs	r6, #0
 8007842:	42a6      	cmp	r6, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	f855 3b04 	ldr.w	r3, [r5], #4
 800784c:	4798      	blx	r3
 800784e:	3601      	adds	r6, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	f855 3b04 	ldr.w	r3, [r5], #4
 8007856:	4798      	blx	r3
 8007858:	3601      	adds	r6, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	0800ca5c 	.word	0x0800ca5c
 8007860:	0800ca5c 	.word	0x0800ca5c
 8007864:	0800ca5c 	.word	0x0800ca5c
 8007868:	0800ca60 	.word	0x0800ca60

0800786c <memcpy>:
 800786c:	440a      	add	r2, r1
 800786e:	4291      	cmp	r1, r2
 8007870:	f100 33ff 	add.w	r3, r0, #4294967295
 8007874:	d100      	bne.n	8007878 <memcpy+0xc>
 8007876:	4770      	bx	lr
 8007878:	b510      	push	{r4, lr}
 800787a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800787e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007882:	4291      	cmp	r1, r2
 8007884:	d1f9      	bne.n	800787a <memcpy+0xe>
 8007886:	bd10      	pop	{r4, pc}

08007888 <memset>:
 8007888:	4402      	add	r2, r0
 800788a:	4603      	mov	r3, r0
 800788c:	4293      	cmp	r3, r2
 800788e:	d100      	bne.n	8007892 <memset+0xa>
 8007890:	4770      	bx	lr
 8007892:	f803 1b01 	strb.w	r1, [r3], #1
 8007896:	e7f9      	b.n	800788c <memset+0x4>

08007898 <__cvt>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	ec55 4b10 	vmov	r4, r5, d0
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	460e      	mov	r6, r1
 80078a4:	4619      	mov	r1, r3
 80078a6:	462b      	mov	r3, r5
 80078a8:	bfbb      	ittet	lt
 80078aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078ae:	461d      	movlt	r5, r3
 80078b0:	2300      	movge	r3, #0
 80078b2:	232d      	movlt	r3, #45	; 0x2d
 80078b4:	700b      	strb	r3, [r1, #0]
 80078b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078bc:	4691      	mov	r9, r2
 80078be:	f023 0820 	bic.w	r8, r3, #32
 80078c2:	bfbc      	itt	lt
 80078c4:	4622      	movlt	r2, r4
 80078c6:	4614      	movlt	r4, r2
 80078c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078cc:	d005      	beq.n	80078da <__cvt+0x42>
 80078ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078d2:	d100      	bne.n	80078d6 <__cvt+0x3e>
 80078d4:	3601      	adds	r6, #1
 80078d6:	2102      	movs	r1, #2
 80078d8:	e000      	b.n	80078dc <__cvt+0x44>
 80078da:	2103      	movs	r1, #3
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	ab02      	add	r3, sp, #8
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	ec45 4b10 	vmov	d0, r4, r5
 80078e8:	4653      	mov	r3, sl
 80078ea:	4632      	mov	r2, r6
 80078ec:	f001 fefc 	bl	80096e8 <_dtoa_r>
 80078f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078f4:	4607      	mov	r7, r0
 80078f6:	d102      	bne.n	80078fe <__cvt+0x66>
 80078f8:	f019 0f01 	tst.w	r9, #1
 80078fc:	d022      	beq.n	8007944 <__cvt+0xac>
 80078fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007902:	eb07 0906 	add.w	r9, r7, r6
 8007906:	d110      	bne.n	800792a <__cvt+0x92>
 8007908:	783b      	ldrb	r3, [r7, #0]
 800790a:	2b30      	cmp	r3, #48	; 0x30
 800790c:	d10a      	bne.n	8007924 <__cvt+0x8c>
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f9 f8af 	bl	8000a78 <__aeabi_dcmpeq>
 800791a:	b918      	cbnz	r0, 8007924 <__cvt+0x8c>
 800791c:	f1c6 0601 	rsb	r6, r6, #1
 8007920:	f8ca 6000 	str.w	r6, [sl]
 8007924:	f8da 3000 	ldr.w	r3, [sl]
 8007928:	4499      	add	r9, r3
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f9 f8a1 	bl	8000a78 <__aeabi_dcmpeq>
 8007936:	b108      	cbz	r0, 800793c <__cvt+0xa4>
 8007938:	f8cd 900c 	str.w	r9, [sp, #12]
 800793c:	2230      	movs	r2, #48	; 0x30
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	454b      	cmp	r3, r9
 8007942:	d307      	bcc.n	8007954 <__cvt+0xbc>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007948:	1bdb      	subs	r3, r3, r7
 800794a:	4638      	mov	r0, r7
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	b004      	add	sp, #16
 8007950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007954:	1c59      	adds	r1, r3, #1
 8007956:	9103      	str	r1, [sp, #12]
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	e7f0      	b.n	800793e <__cvt+0xa6>

0800795c <__exponent>:
 800795c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800795e:	4603      	mov	r3, r0
 8007960:	2900      	cmp	r1, #0
 8007962:	bfb8      	it	lt
 8007964:	4249      	neglt	r1, r1
 8007966:	f803 2b02 	strb.w	r2, [r3], #2
 800796a:	bfb4      	ite	lt
 800796c:	222d      	movlt	r2, #45	; 0x2d
 800796e:	222b      	movge	r2, #43	; 0x2b
 8007970:	2909      	cmp	r1, #9
 8007972:	7042      	strb	r2, [r0, #1]
 8007974:	dd2a      	ble.n	80079cc <__exponent+0x70>
 8007976:	f10d 0407 	add.w	r4, sp, #7
 800797a:	46a4      	mov	ip, r4
 800797c:	270a      	movs	r7, #10
 800797e:	46a6      	mov	lr, r4
 8007980:	460a      	mov	r2, r1
 8007982:	fb91 f6f7 	sdiv	r6, r1, r7
 8007986:	fb07 1516 	mls	r5, r7, r6, r1
 800798a:	3530      	adds	r5, #48	; 0x30
 800798c:	2a63      	cmp	r2, #99	; 0x63
 800798e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007996:	4631      	mov	r1, r6
 8007998:	dcf1      	bgt.n	800797e <__exponent+0x22>
 800799a:	3130      	adds	r1, #48	; 0x30
 800799c:	f1ae 0502 	sub.w	r5, lr, #2
 80079a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079a4:	1c44      	adds	r4, r0, #1
 80079a6:	4629      	mov	r1, r5
 80079a8:	4561      	cmp	r1, ip
 80079aa:	d30a      	bcc.n	80079c2 <__exponent+0x66>
 80079ac:	f10d 0209 	add.w	r2, sp, #9
 80079b0:	eba2 020e 	sub.w	r2, r2, lr
 80079b4:	4565      	cmp	r5, ip
 80079b6:	bf88      	it	hi
 80079b8:	2200      	movhi	r2, #0
 80079ba:	4413      	add	r3, r2
 80079bc:	1a18      	subs	r0, r3, r0
 80079be:	b003      	add	sp, #12
 80079c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079ca:	e7ed      	b.n	80079a8 <__exponent+0x4c>
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	3130      	adds	r1, #48	; 0x30
 80079d0:	7083      	strb	r3, [r0, #2]
 80079d2:	70c1      	strb	r1, [r0, #3]
 80079d4:	1d03      	adds	r3, r0, #4
 80079d6:	e7f1      	b.n	80079bc <__exponent+0x60>

080079d8 <_printf_float>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	ed2d 8b02 	vpush	{d8}
 80079e0:	b08d      	sub	sp, #52	; 0x34
 80079e2:	460c      	mov	r4, r1
 80079e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079e8:	4616      	mov	r6, r2
 80079ea:	461f      	mov	r7, r3
 80079ec:	4605      	mov	r5, r0
 80079ee:	f003 f98f 	bl	800ad10 <_localeconv_r>
 80079f2:	f8d0 a000 	ldr.w	sl, [r0]
 80079f6:	4650      	mov	r0, sl
 80079f8:	f7f8 fbc2 	bl	8000180 <strlen>
 80079fc:	2300      	movs	r3, #0
 80079fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	f8d8 3000 	ldr.w	r3, [r8]
 8007a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a0c:	3307      	adds	r3, #7
 8007a0e:	f023 0307 	bic.w	r3, r3, #7
 8007a12:	f103 0208 	add.w	r2, r3, #8
 8007a16:	f8c8 2000 	str.w	r2, [r8]
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a2a:	9307      	str	r3, [sp, #28]
 8007a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a30:	ee08 0a10 	vmov	s16, r0
 8007a34:	4b9f      	ldr	r3, [pc, #636]	; (8007cb4 <_printf_float+0x2dc>)
 8007a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3e:	f7f9 f84d 	bl	8000adc <__aeabi_dcmpun>
 8007a42:	bb88      	cbnz	r0, 8007aa8 <_printf_float+0xd0>
 8007a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a48:	4b9a      	ldr	r3, [pc, #616]	; (8007cb4 <_printf_float+0x2dc>)
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	f7f9 f827 	bl	8000aa0 <__aeabi_dcmple>
 8007a52:	bb48      	cbnz	r0, 8007aa8 <_printf_float+0xd0>
 8007a54:	2200      	movs	r2, #0
 8007a56:	2300      	movs	r3, #0
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f9 f816 	bl	8000a8c <__aeabi_dcmplt>
 8007a60:	b110      	cbz	r0, 8007a68 <_printf_float+0x90>
 8007a62:	232d      	movs	r3, #45	; 0x2d
 8007a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a68:	4b93      	ldr	r3, [pc, #588]	; (8007cb8 <_printf_float+0x2e0>)
 8007a6a:	4894      	ldr	r0, [pc, #592]	; (8007cbc <_printf_float+0x2e4>)
 8007a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a70:	bf94      	ite	ls
 8007a72:	4698      	movls	r8, r3
 8007a74:	4680      	movhi	r8, r0
 8007a76:	2303      	movs	r3, #3
 8007a78:	6123      	str	r3, [r4, #16]
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	f023 0204 	bic.w	r2, r3, #4
 8007a80:	6022      	str	r2, [r4, #0]
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	9700      	str	r7, [sp, #0]
 8007a88:	4633      	mov	r3, r6
 8007a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 f9d8 	bl	8007e44 <_printf_common>
 8007a94:	3001      	adds	r0, #1
 8007a96:	f040 8090 	bne.w	8007bba <_printf_float+0x1e2>
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	b00d      	add	sp, #52	; 0x34
 8007aa0:	ecbd 8b02 	vpop	{d8}
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f9 f814 	bl	8000adc <__aeabi_dcmpun>
 8007ab4:	b140      	cbz	r0, 8007ac8 <_printf_float+0xf0>
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbc      	itt	lt
 8007abc:	232d      	movlt	r3, #45	; 0x2d
 8007abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ac2:	487f      	ldr	r0, [pc, #508]	; (8007cc0 <_printf_float+0x2e8>)
 8007ac4:	4b7f      	ldr	r3, [pc, #508]	; (8007cc4 <_printf_float+0x2ec>)
 8007ac6:	e7d1      	b.n	8007a6c <_printf_float+0x94>
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ace:	9206      	str	r2, [sp, #24]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	d13f      	bne.n	8007b54 <_printf_float+0x17c>
 8007ad4:	2306      	movs	r3, #6
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	9b05      	ldr	r3, [sp, #20]
 8007ada:	6861      	ldr	r1, [r4, #4]
 8007adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007aea:	ab09      	add	r3, sp, #36	; 0x24
 8007aec:	ec49 8b10 	vmov	d0, r8, r9
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007af8:	4628      	mov	r0, r5
 8007afa:	f7ff fecd 	bl	8007898 <__cvt>
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b02:	2b47      	cmp	r3, #71	; 0x47
 8007b04:	4680      	mov	r8, r0
 8007b06:	d108      	bne.n	8007b1a <_printf_float+0x142>
 8007b08:	1cc8      	adds	r0, r1, #3
 8007b0a:	db02      	blt.n	8007b12 <_printf_float+0x13a>
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	dd41      	ble.n	8007b96 <_printf_float+0x1be>
 8007b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b16:	fa5f fb8b 	uxtb.w	fp, fp
 8007b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b1e:	d820      	bhi.n	8007b62 <_printf_float+0x18a>
 8007b20:	3901      	subs	r1, #1
 8007b22:	465a      	mov	r2, fp
 8007b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b28:	9109      	str	r1, [sp, #36]	; 0x24
 8007b2a:	f7ff ff17 	bl	800795c <__exponent>
 8007b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b30:	1813      	adds	r3, r2, r0
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	4681      	mov	r9, r0
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	dc02      	bgt.n	8007b40 <_printf_float+0x168>
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	07d2      	lsls	r2, r2, #31
 8007b3e:	d501      	bpl.n	8007b44 <_printf_float+0x16c>
 8007b40:	3301      	adds	r3, #1
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d09c      	beq.n	8007a86 <_printf_float+0xae>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b52:	e798      	b.n	8007a86 <_printf_float+0xae>
 8007b54:	9a06      	ldr	r2, [sp, #24]
 8007b56:	2a47      	cmp	r2, #71	; 0x47
 8007b58:	d1be      	bne.n	8007ad8 <_printf_float+0x100>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1bc      	bne.n	8007ad8 <_printf_float+0x100>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e7b9      	b.n	8007ad6 <_printf_float+0xfe>
 8007b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b66:	d118      	bne.n	8007b9a <_printf_float+0x1c2>
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	dd0b      	ble.n	8007b86 <_printf_float+0x1ae>
 8007b6e:	6121      	str	r1, [r4, #16]
 8007b70:	b913      	cbnz	r3, 8007b78 <_printf_float+0x1a0>
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	07d0      	lsls	r0, r2, #31
 8007b76:	d502      	bpl.n	8007b7e <_printf_float+0x1a6>
 8007b78:	3301      	adds	r3, #1
 8007b7a:	440b      	add	r3, r1
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b80:	f04f 0900 	mov.w	r9, #0
 8007b84:	e7de      	b.n	8007b44 <_printf_float+0x16c>
 8007b86:	b913      	cbnz	r3, 8007b8e <_printf_float+0x1b6>
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	07d2      	lsls	r2, r2, #31
 8007b8c:	d501      	bpl.n	8007b92 <_printf_float+0x1ba>
 8007b8e:	3302      	adds	r3, #2
 8007b90:	e7f4      	b.n	8007b7c <_printf_float+0x1a4>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e7f2      	b.n	8007b7c <_printf_float+0x1a4>
 8007b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	db05      	blt.n	8007bac <_printf_float+0x1d4>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	6121      	str	r1, [r4, #16]
 8007ba4:	07d8      	lsls	r0, r3, #31
 8007ba6:	d5ea      	bpl.n	8007b7e <_printf_float+0x1a6>
 8007ba8:	1c4b      	adds	r3, r1, #1
 8007baa:	e7e7      	b.n	8007b7c <_printf_float+0x1a4>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	bfd4      	ite	le
 8007bb0:	f1c1 0202 	rsble	r2, r1, #2
 8007bb4:	2201      	movgt	r2, #1
 8007bb6:	4413      	add	r3, r2
 8007bb8:	e7e0      	b.n	8007b7c <_printf_float+0x1a4>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	055a      	lsls	r2, r3, #21
 8007bbe:	d407      	bmi.n	8007bd0 <_printf_float+0x1f8>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d12c      	bne.n	8007c28 <_printf_float+0x250>
 8007bce:	e764      	b.n	8007a9a <_printf_float+0xc2>
 8007bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bd4:	f240 80e0 	bls.w	8007d98 <_printf_float+0x3c0>
 8007bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f7f8 ff4a 	bl	8000a78 <__aeabi_dcmpeq>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d034      	beq.n	8007c52 <_printf_float+0x27a>
 8007be8:	4a37      	ldr	r2, [pc, #220]	; (8007cc8 <_printf_float+0x2f0>)
 8007bea:	2301      	movs	r3, #1
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f af51 	beq.w	8007a9a <_printf_float+0xc2>
 8007bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	db02      	blt.n	8007c06 <_printf_float+0x22e>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	07d8      	lsls	r0, r3, #31
 8007c04:	d510      	bpl.n	8007c28 <_printf_float+0x250>
 8007c06:	ee18 3a10 	vmov	r3, s16
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f af41 	beq.w	8007a9a <_printf_float+0xc2>
 8007c18:	f04f 0800 	mov.w	r8, #0
 8007c1c:	f104 091a 	add.w	r9, r4, #26
 8007c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	4543      	cmp	r3, r8
 8007c26:	dc09      	bgt.n	8007c3c <_printf_float+0x264>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	079b      	lsls	r3, r3, #30
 8007c2c:	f100 8105 	bmi.w	8007e3a <_printf_float+0x462>
 8007c30:	68e0      	ldr	r0, [r4, #12]
 8007c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c34:	4298      	cmp	r0, r3
 8007c36:	bfb8      	it	lt
 8007c38:	4618      	movlt	r0, r3
 8007c3a:	e730      	b.n	8007a9e <_printf_float+0xc6>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	464a      	mov	r2, r9
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f af27 	beq.w	8007a9a <_printf_float+0xc2>
 8007c4c:	f108 0801 	add.w	r8, r8, #1
 8007c50:	e7e6      	b.n	8007c20 <_printf_float+0x248>
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dc39      	bgt.n	8007ccc <_printf_float+0x2f4>
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <_printf_float+0x2f0>)
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af19 	beq.w	8007a9a <_printf_float+0xc2>
 8007c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d102      	bne.n	8007c76 <_printf_float+0x29e>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	d5d8      	bpl.n	8007c28 <_printf_float+0x250>
 8007c76:	ee18 3a10 	vmov	r3, s16
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af09 	beq.w	8007a9a <_printf_float+0xc2>
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	f104 0a1a 	add.w	sl, r4, #26
 8007c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c92:	425b      	negs	r3, r3
 8007c94:	454b      	cmp	r3, r9
 8007c96:	dc01      	bgt.n	8007c9c <_printf_float+0x2c4>
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	e792      	b.n	8007bc2 <_printf_float+0x1ea>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f aef7 	beq.w	8007a9a <_printf_float+0xc2>
 8007cac:	f109 0901 	add.w	r9, r9, #1
 8007cb0:	e7ee      	b.n	8007c90 <_printf_float+0x2b8>
 8007cb2:	bf00      	nop
 8007cb4:	7fefffff 	.word	0x7fefffff
 8007cb8:	0800c5a8 	.word	0x0800c5a8
 8007cbc:	0800c5ac 	.word	0x0800c5ac
 8007cc0:	0800c5b4 	.word	0x0800c5b4
 8007cc4:	0800c5b0 	.word	0x0800c5b0
 8007cc8:	0800c5b8 	.word	0x0800c5b8
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	bfa8      	it	ge
 8007cd4:	461a      	movge	r2, r3
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	4691      	mov	r9, r2
 8007cda:	dc37      	bgt.n	8007d4c <_printf_float+0x374>
 8007cdc:	f04f 0b00 	mov.w	fp, #0
 8007ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ce4:	f104 021a 	add.w	r2, r4, #26
 8007ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	eba3 0309 	sub.w	r3, r3, r9
 8007cf0:	455b      	cmp	r3, fp
 8007cf2:	dc33      	bgt.n	8007d5c <_printf_float+0x384>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	db3b      	blt.n	8007d74 <_printf_float+0x39c>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d438      	bmi.n	8007d74 <_printf_float+0x39c>
 8007d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d04:	9a05      	ldr	r2, [sp, #20]
 8007d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d08:	1a9a      	subs	r2, r3, r2
 8007d0a:	eba3 0901 	sub.w	r9, r3, r1
 8007d0e:	4591      	cmp	r9, r2
 8007d10:	bfa8      	it	ge
 8007d12:	4691      	movge	r9, r2
 8007d14:	f1b9 0f00 	cmp.w	r9, #0
 8007d18:	dc35      	bgt.n	8007d86 <_printf_float+0x3ae>
 8007d1a:	f04f 0800 	mov.w	r8, #0
 8007d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d22:	f104 0a1a 	add.w	sl, r4, #26
 8007d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	eba3 0309 	sub.w	r3, r3, r9
 8007d30:	4543      	cmp	r3, r8
 8007d32:	f77f af79 	ble.w	8007c28 <_printf_float+0x250>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4652      	mov	r2, sl
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f aeaa 	beq.w	8007a9a <_printf_float+0xc2>
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	e7ec      	b.n	8007d26 <_printf_float+0x34e>
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4642      	mov	r2, r8
 8007d52:	4628      	mov	r0, r5
 8007d54:	47b8      	blx	r7
 8007d56:	3001      	adds	r0, #1
 8007d58:	d1c0      	bne.n	8007cdc <_printf_float+0x304>
 8007d5a:	e69e      	b.n	8007a9a <_printf_float+0xc2>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	9205      	str	r2, [sp, #20]
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f ae97 	beq.w	8007a9a <_printf_float+0xc2>
 8007d6c:	9a05      	ldr	r2, [sp, #20]
 8007d6e:	f10b 0b01 	add.w	fp, fp, #1
 8007d72:	e7b9      	b.n	8007ce8 <_printf_float+0x310>
 8007d74:	ee18 3a10 	vmov	r3, s16
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	d1be      	bne.n	8007d02 <_printf_float+0x32a>
 8007d84:	e689      	b.n	8007a9a <_printf_float+0xc2>
 8007d86:	9a05      	ldr	r2, [sp, #20]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	4442      	add	r2, r8
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	d1c1      	bne.n	8007d1a <_printf_float+0x342>
 8007d96:	e680      	b.n	8007a9a <_printf_float+0xc2>
 8007d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	dc01      	bgt.n	8007da2 <_printf_float+0x3ca>
 8007d9e:	07db      	lsls	r3, r3, #31
 8007da0:	d538      	bpl.n	8007e14 <_printf_float+0x43c>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4642      	mov	r2, r8
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae74 	beq.w	8007a9a <_printf_float+0xc2>
 8007db2:	ee18 3a10 	vmov	r3, s16
 8007db6:	4652      	mov	r2, sl
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f ae6b 	beq.w	8007a9a <_printf_float+0xc2>
 8007dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f7f8 fe54 	bl	8000a78 <__aeabi_dcmpeq>
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_printf_float+0x432>
 8007dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd4:	f108 0201 	add.w	r2, r8, #1
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	d10e      	bne.n	8007e02 <_printf_float+0x42a>
 8007de4:	e659      	b.n	8007a9a <_printf_float+0xc2>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4652      	mov	r2, sl
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	f43f ae52 	beq.w	8007a9a <_printf_float+0xc2>
 8007df6:	f108 0801 	add.w	r8, r8, #1
 8007dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	4543      	cmp	r3, r8
 8007e00:	dcf1      	bgt.n	8007de6 <_printf_float+0x40e>
 8007e02:	464b      	mov	r3, r9
 8007e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e08:	e6dc      	b.n	8007bc4 <_printf_float+0x1ec>
 8007e0a:	f04f 0800 	mov.w	r8, #0
 8007e0e:	f104 0a1a 	add.w	sl, r4, #26
 8007e12:	e7f2      	b.n	8007dfa <_printf_float+0x422>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4642      	mov	r2, r8
 8007e18:	e7df      	b.n	8007dda <_printf_float+0x402>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	464a      	mov	r2, r9
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	f43f ae38 	beq.w	8007a9a <_printf_float+0xc2>
 8007e2a:	f108 0801 	add.w	r8, r8, #1
 8007e2e:	68e3      	ldr	r3, [r4, #12]
 8007e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e32:	1a5b      	subs	r3, r3, r1
 8007e34:	4543      	cmp	r3, r8
 8007e36:	dcf0      	bgt.n	8007e1a <_printf_float+0x442>
 8007e38:	e6fa      	b.n	8007c30 <_printf_float+0x258>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	f104 0919 	add.w	r9, r4, #25
 8007e42:	e7f4      	b.n	8007e2e <_printf_float+0x456>

08007e44 <_printf_common>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	4616      	mov	r6, r2
 8007e4a:	4699      	mov	r9, r3
 8007e4c:	688a      	ldr	r2, [r1, #8]
 8007e4e:	690b      	ldr	r3, [r1, #16]
 8007e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bfb8      	it	lt
 8007e58:	4613      	movlt	r3, r2
 8007e5a:	6033      	str	r3, [r6, #0]
 8007e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e60:	4607      	mov	r7, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b10a      	cbz	r2, 8007e6a <_printf_common+0x26>
 8007e66:	3301      	adds	r3, #1
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	0699      	lsls	r1, r3, #26
 8007e6e:	bf42      	ittt	mi
 8007e70:	6833      	ldrmi	r3, [r6, #0]
 8007e72:	3302      	addmi	r3, #2
 8007e74:	6033      	strmi	r3, [r6, #0]
 8007e76:	6825      	ldr	r5, [r4, #0]
 8007e78:	f015 0506 	ands.w	r5, r5, #6
 8007e7c:	d106      	bne.n	8007e8c <_printf_common+0x48>
 8007e7e:	f104 0a19 	add.w	sl, r4, #25
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	6832      	ldr	r2, [r6, #0]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc26      	bgt.n	8007eda <_printf_common+0x96>
 8007e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e90:	1e13      	subs	r3, r2, #0
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	bf18      	it	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	0692      	lsls	r2, r2, #26
 8007e9a:	d42b      	bmi.n	8007ef4 <_printf_common+0xb0>
 8007e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c0      	blx	r8
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d01e      	beq.n	8007ee8 <_printf_common+0xa4>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	68e5      	ldr	r5, [r4, #12]
 8007eae:	6832      	ldr	r2, [r6, #0]
 8007eb0:	f003 0306 	and.w	r3, r3, #6
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	bf08      	it	eq
 8007eb8:	1aad      	subeq	r5, r5, r2
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	bf0c      	ite	eq
 8007ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec4:	2500      	movne	r5, #0
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bfc4      	itt	gt
 8007eca:	1a9b      	subgt	r3, r3, r2
 8007ecc:	18ed      	addgt	r5, r5, r3
 8007ece:	2600      	movs	r6, #0
 8007ed0:	341a      	adds	r4, #26
 8007ed2:	42b5      	cmp	r5, r6
 8007ed4:	d11a      	bne.n	8007f0c <_printf_common+0xc8>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e008      	b.n	8007eec <_printf_common+0xa8>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4652      	mov	r2, sl
 8007ede:	4649      	mov	r1, r9
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	47c0      	blx	r8
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d103      	bne.n	8007ef0 <_printf_common+0xac>
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	e7c6      	b.n	8007e82 <_printf_common+0x3e>
 8007ef4:	18e1      	adds	r1, r4, r3
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	2030      	movs	r0, #48	; 0x30
 8007efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007efe:	4422      	add	r2, r4
 8007f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f08:	3302      	adds	r3, #2
 8007f0a:	e7c7      	b.n	8007e9c <_printf_common+0x58>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4622      	mov	r2, r4
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d0e6      	beq.n	8007ee8 <_printf_common+0xa4>
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7d9      	b.n	8007ed2 <_printf_common+0x8e>
	...

08007f20 <_printf_i>:
 8007f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	7e0f      	ldrb	r7, [r1, #24]
 8007f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f28:	2f78      	cmp	r7, #120	; 0x78
 8007f2a:	4691      	mov	r9, r2
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	469a      	mov	sl, r3
 8007f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f36:	d807      	bhi.n	8007f48 <_printf_i+0x28>
 8007f38:	2f62      	cmp	r7, #98	; 0x62
 8007f3a:	d80a      	bhi.n	8007f52 <_printf_i+0x32>
 8007f3c:	2f00      	cmp	r7, #0
 8007f3e:	f000 80d8 	beq.w	80080f2 <_printf_i+0x1d2>
 8007f42:	2f58      	cmp	r7, #88	; 0x58
 8007f44:	f000 80a3 	beq.w	800808e <_printf_i+0x16e>
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f50:	e03a      	b.n	8007fc8 <_printf_i+0xa8>
 8007f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f56:	2b15      	cmp	r3, #21
 8007f58:	d8f6      	bhi.n	8007f48 <_printf_i+0x28>
 8007f5a:	a101      	add	r1, pc, #4	; (adr r1, 8007f60 <_printf_i+0x40>)
 8007f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f60:	08007fb9 	.word	0x08007fb9
 8007f64:	08007fcd 	.word	0x08007fcd
 8007f68:	08007f49 	.word	0x08007f49
 8007f6c:	08007f49 	.word	0x08007f49
 8007f70:	08007f49 	.word	0x08007f49
 8007f74:	08007f49 	.word	0x08007f49
 8007f78:	08007fcd 	.word	0x08007fcd
 8007f7c:	08007f49 	.word	0x08007f49
 8007f80:	08007f49 	.word	0x08007f49
 8007f84:	08007f49 	.word	0x08007f49
 8007f88:	08007f49 	.word	0x08007f49
 8007f8c:	080080d9 	.word	0x080080d9
 8007f90:	08007ffd 	.word	0x08007ffd
 8007f94:	080080bb 	.word	0x080080bb
 8007f98:	08007f49 	.word	0x08007f49
 8007f9c:	08007f49 	.word	0x08007f49
 8007fa0:	080080fb 	.word	0x080080fb
 8007fa4:	08007f49 	.word	0x08007f49
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08007f49 	.word	0x08007f49
 8007fb0:	08007f49 	.word	0x08007f49
 8007fb4:	080080c3 	.word	0x080080c3
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	602a      	str	r2, [r5, #0]
 8007fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e0a3      	b.n	8008114 <_printf_i+0x1f4>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	6829      	ldr	r1, [r5, #0]
 8007fd0:	0606      	lsls	r6, r0, #24
 8007fd2:	f101 0304 	add.w	r3, r1, #4
 8007fd6:	d50a      	bpl.n	8007fee <_printf_i+0xce>
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	da03      	bge.n	8007fe8 <_printf_i+0xc8>
 8007fe0:	232d      	movs	r3, #45	; 0x2d
 8007fe2:	4276      	negs	r6, r6
 8007fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe8:	485e      	ldr	r0, [pc, #376]	; (8008164 <_printf_i+0x244>)
 8007fea:	230a      	movs	r3, #10
 8007fec:	e019      	b.n	8008022 <_printf_i+0x102>
 8007fee:	680e      	ldr	r6, [r1, #0]
 8007ff0:	602b      	str	r3, [r5, #0]
 8007ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ff6:	bf18      	it	ne
 8007ff8:	b236      	sxthne	r6, r6
 8007ffa:	e7ef      	b.n	8007fdc <_printf_i+0xbc>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	6029      	str	r1, [r5, #0]
 8008004:	0601      	lsls	r1, r0, #24
 8008006:	d501      	bpl.n	800800c <_printf_i+0xec>
 8008008:	681e      	ldr	r6, [r3, #0]
 800800a:	e002      	b.n	8008012 <_printf_i+0xf2>
 800800c:	0646      	lsls	r6, r0, #25
 800800e:	d5fb      	bpl.n	8008008 <_printf_i+0xe8>
 8008010:	881e      	ldrh	r6, [r3, #0]
 8008012:	4854      	ldr	r0, [pc, #336]	; (8008164 <_printf_i+0x244>)
 8008014:	2f6f      	cmp	r7, #111	; 0x6f
 8008016:	bf0c      	ite	eq
 8008018:	2308      	moveq	r3, #8
 800801a:	230a      	movne	r3, #10
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008022:	6865      	ldr	r5, [r4, #4]
 8008024:	60a5      	str	r5, [r4, #8]
 8008026:	2d00      	cmp	r5, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90e      	cbnz	r6, 8008038 <_printf_i+0x118>
 8008034:	2d00      	cmp	r5, #0
 8008036:	d04d      	beq.n	80080d4 <_printf_i+0x1b4>
 8008038:	4615      	mov	r5, r2
 800803a:	fbb6 f1f3 	udiv	r1, r6, r3
 800803e:	fb03 6711 	mls	r7, r3, r1, r6
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008048:	4637      	mov	r7, r6
 800804a:	42bb      	cmp	r3, r7
 800804c:	460e      	mov	r6, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x11a>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x14c>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07de      	lsls	r6, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x14c>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	; 0x30
 8008064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800806c:	1b52      	subs	r2, r2, r5
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee2 	bl	8007e44 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14c      	bne.n	800811e <_printf_i+0x1fe>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	4835      	ldr	r0, [pc, #212]	; (8008164 <_printf_i+0x244>)
 8008090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008094:	6829      	ldr	r1, [r5, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f851 6b04 	ldr.w	r6, [r1], #4
 800809c:	6029      	str	r1, [r5, #0]
 800809e:	061d      	lsls	r5, r3, #24
 80080a0:	d514      	bpl.n	80080cc <_printf_i+0x1ac>
 80080a2:	07df      	lsls	r7, r3, #31
 80080a4:	bf44      	itt	mi
 80080a6:	f043 0320 	orrmi.w	r3, r3, #32
 80080aa:	6023      	strmi	r3, [r4, #0]
 80080ac:	b91e      	cbnz	r6, 80080b6 <_printf_i+0x196>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	f023 0320 	bic.w	r3, r3, #32
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	2310      	movs	r3, #16
 80080b8:	e7b0      	b.n	800801c <_printf_i+0xfc>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f043 0320 	orr.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	2378      	movs	r3, #120	; 0x78
 80080c4:	4828      	ldr	r0, [pc, #160]	; (8008168 <_printf_i+0x248>)
 80080c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ca:	e7e3      	b.n	8008094 <_printf_i+0x174>
 80080cc:	0659      	lsls	r1, r3, #25
 80080ce:	bf48      	it	mi
 80080d0:	b2b6      	uxthmi	r6, r6
 80080d2:	e7e6      	b.n	80080a2 <_printf_i+0x182>
 80080d4:	4615      	mov	r5, r2
 80080d6:	e7bb      	b.n	8008050 <_printf_i+0x130>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	6826      	ldr	r6, [r4, #0]
 80080dc:	6961      	ldr	r1, [r4, #20]
 80080de:	1d18      	adds	r0, r3, #4
 80080e0:	6028      	str	r0, [r5, #0]
 80080e2:	0635      	lsls	r5, r6, #24
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	d501      	bpl.n	80080ec <_printf_i+0x1cc>
 80080e8:	6019      	str	r1, [r3, #0]
 80080ea:	e002      	b.n	80080f2 <_printf_i+0x1d2>
 80080ec:	0670      	lsls	r0, r6, #25
 80080ee:	d5fb      	bpl.n	80080e8 <_printf_i+0x1c8>
 80080f0:	8019      	strh	r1, [r3, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	4615      	mov	r5, r2
 80080f8:	e7ba      	b.n	8008070 <_printf_i+0x150>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	602a      	str	r2, [r5, #0]
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	6862      	ldr	r2, [r4, #4]
 8008104:	2100      	movs	r1, #0
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 f842 	bl	8000190 <memchr>
 800810c:	b108      	cbz	r0, 8008112 <_printf_i+0x1f2>
 800810e:	1b40      	subs	r0, r0, r5
 8008110:	6060      	str	r0, [r4, #4]
 8008112:	6863      	ldr	r3, [r4, #4]
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	2300      	movs	r3, #0
 8008118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811c:	e7a8      	b.n	8008070 <_printf_i+0x150>
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	462a      	mov	r2, r5
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d0ab      	beq.n	8008084 <_printf_i+0x164>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	079b      	lsls	r3, r3, #30
 8008130:	d413      	bmi.n	800815a <_printf_i+0x23a>
 8008132:	68e0      	ldr	r0, [r4, #12]
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	4298      	cmp	r0, r3
 8008138:	bfb8      	it	lt
 800813a:	4618      	movlt	r0, r3
 800813c:	e7a4      	b.n	8008088 <_printf_i+0x168>
 800813e:	2301      	movs	r3, #1
 8008140:	4632      	mov	r2, r6
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d09b      	beq.n	8008084 <_printf_i+0x164>
 800814c:	3501      	adds	r5, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	9903      	ldr	r1, [sp, #12]
 8008152:	1a5b      	subs	r3, r3, r1
 8008154:	42ab      	cmp	r3, r5
 8008156:	dcf2      	bgt.n	800813e <_printf_i+0x21e>
 8008158:	e7eb      	b.n	8008132 <_printf_i+0x212>
 800815a:	2500      	movs	r5, #0
 800815c:	f104 0619 	add.w	r6, r4, #25
 8008160:	e7f5      	b.n	800814e <_printf_i+0x22e>
 8008162:	bf00      	nop
 8008164:	0800c5ba 	.word	0x0800c5ba
 8008168:	0800c5cb 	.word	0x0800c5cb

0800816c <_scanf_float>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	b087      	sub	sp, #28
 8008172:	4617      	mov	r7, r2
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	688b      	ldr	r3, [r1, #8]
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800817e:	bf83      	ittte	hi
 8008180:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008184:	195b      	addhi	r3, r3, r5
 8008186:	9302      	strhi	r3, [sp, #8]
 8008188:	2300      	movls	r3, #0
 800818a:	bf86      	itte	hi
 800818c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008190:	608b      	strhi	r3, [r1, #8]
 8008192:	9302      	strls	r3, [sp, #8]
 8008194:	680b      	ldr	r3, [r1, #0]
 8008196:	468b      	mov	fp, r1
 8008198:	2500      	movs	r5, #0
 800819a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800819e:	f84b 3b1c 	str.w	r3, [fp], #28
 80081a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081a6:	4680      	mov	r8, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	465e      	mov	r6, fp
 80081ac:	46aa      	mov	sl, r5
 80081ae:	46a9      	mov	r9, r5
 80081b0:	9501      	str	r5, [sp, #4]
 80081b2:	68a2      	ldr	r2, [r4, #8]
 80081b4:	b152      	cbz	r2, 80081cc <_scanf_float+0x60>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b4e      	cmp	r3, #78	; 0x4e
 80081bc:	d864      	bhi.n	8008288 <_scanf_float+0x11c>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d83c      	bhi.n	800823c <_scanf_float+0xd0>
 80081c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80081c6:	b2c8      	uxtb	r0, r1
 80081c8:	280e      	cmp	r0, #14
 80081ca:	d93a      	bls.n	8008242 <_scanf_float+0xd6>
 80081cc:	f1b9 0f00 	cmp.w	r9, #0
 80081d0:	d003      	beq.n	80081da <_scanf_float+0x6e>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081de:	f1ba 0f01 	cmp.w	sl, #1
 80081e2:	f200 8113 	bhi.w	800840c <_scanf_float+0x2a0>
 80081e6:	455e      	cmp	r6, fp
 80081e8:	f200 8105 	bhi.w	80083f6 <_scanf_float+0x28a>
 80081ec:	2501      	movs	r5, #1
 80081ee:	4628      	mov	r0, r5
 80081f0:	b007      	add	sp, #28
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081fa:	2a0d      	cmp	r2, #13
 80081fc:	d8e6      	bhi.n	80081cc <_scanf_float+0x60>
 80081fe:	a101      	add	r1, pc, #4	; (adr r1, 8008204 <_scanf_float+0x98>)
 8008200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008204:	08008343 	.word	0x08008343
 8008208:	080081cd 	.word	0x080081cd
 800820c:	080081cd 	.word	0x080081cd
 8008210:	080081cd 	.word	0x080081cd
 8008214:	080083a3 	.word	0x080083a3
 8008218:	0800837b 	.word	0x0800837b
 800821c:	080081cd 	.word	0x080081cd
 8008220:	080081cd 	.word	0x080081cd
 8008224:	08008351 	.word	0x08008351
 8008228:	080081cd 	.word	0x080081cd
 800822c:	080081cd 	.word	0x080081cd
 8008230:	080081cd 	.word	0x080081cd
 8008234:	080081cd 	.word	0x080081cd
 8008238:	08008309 	.word	0x08008309
 800823c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008240:	e7db      	b.n	80081fa <_scanf_float+0x8e>
 8008242:	290e      	cmp	r1, #14
 8008244:	d8c2      	bhi.n	80081cc <_scanf_float+0x60>
 8008246:	a001      	add	r0, pc, #4	; (adr r0, 800824c <_scanf_float+0xe0>)
 8008248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800824c:	080082fb 	.word	0x080082fb
 8008250:	080081cd 	.word	0x080081cd
 8008254:	080082fb 	.word	0x080082fb
 8008258:	0800838f 	.word	0x0800838f
 800825c:	080081cd 	.word	0x080081cd
 8008260:	080082a9 	.word	0x080082a9
 8008264:	080082e5 	.word	0x080082e5
 8008268:	080082e5 	.word	0x080082e5
 800826c:	080082e5 	.word	0x080082e5
 8008270:	080082e5 	.word	0x080082e5
 8008274:	080082e5 	.word	0x080082e5
 8008278:	080082e5 	.word	0x080082e5
 800827c:	080082e5 	.word	0x080082e5
 8008280:	080082e5 	.word	0x080082e5
 8008284:	080082e5 	.word	0x080082e5
 8008288:	2b6e      	cmp	r3, #110	; 0x6e
 800828a:	d809      	bhi.n	80082a0 <_scanf_float+0x134>
 800828c:	2b60      	cmp	r3, #96	; 0x60
 800828e:	d8b2      	bhi.n	80081f6 <_scanf_float+0x8a>
 8008290:	2b54      	cmp	r3, #84	; 0x54
 8008292:	d077      	beq.n	8008384 <_scanf_float+0x218>
 8008294:	2b59      	cmp	r3, #89	; 0x59
 8008296:	d199      	bne.n	80081cc <_scanf_float+0x60>
 8008298:	2d07      	cmp	r5, #7
 800829a:	d197      	bne.n	80081cc <_scanf_float+0x60>
 800829c:	2508      	movs	r5, #8
 800829e:	e029      	b.n	80082f4 <_scanf_float+0x188>
 80082a0:	2b74      	cmp	r3, #116	; 0x74
 80082a2:	d06f      	beq.n	8008384 <_scanf_float+0x218>
 80082a4:	2b79      	cmp	r3, #121	; 0x79
 80082a6:	e7f6      	b.n	8008296 <_scanf_float+0x12a>
 80082a8:	6821      	ldr	r1, [r4, #0]
 80082aa:	05c8      	lsls	r0, r1, #23
 80082ac:	d51a      	bpl.n	80082e4 <_scanf_float+0x178>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80082b4:	6021      	str	r1, [r4, #0]
 80082b6:	f109 0901 	add.w	r9, r9, #1
 80082ba:	b11b      	cbz	r3, 80082c4 <_scanf_float+0x158>
 80082bc:	3b01      	subs	r3, #1
 80082be:	3201      	adds	r2, #1
 80082c0:	9302      	str	r3, [sp, #8]
 80082c2:	60a2      	str	r2, [r4, #8]
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	f340 8084 	ble.w	80083e4 <_scanf_float+0x278>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	3301      	adds	r3, #1
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	e766      	b.n	80081b2 <_scanf_float+0x46>
 80082e4:	eb1a 0f05 	cmn.w	sl, r5
 80082e8:	f47f af70 	bne.w	80081cc <_scanf_float+0x60>
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	f806 3b01 	strb.w	r3, [r6], #1
 80082f8:	e7e4      	b.n	80082c4 <_scanf_float+0x158>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	0610      	lsls	r0, r2, #24
 80082fe:	f57f af65 	bpl.w	80081cc <_scanf_float+0x60>
 8008302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008306:	e7f4      	b.n	80082f2 <_scanf_float+0x186>
 8008308:	f1ba 0f00 	cmp.w	sl, #0
 800830c:	d10e      	bne.n	800832c <_scanf_float+0x1c0>
 800830e:	f1b9 0f00 	cmp.w	r9, #0
 8008312:	d10e      	bne.n	8008332 <_scanf_float+0x1c6>
 8008314:	6822      	ldr	r2, [r4, #0]
 8008316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800831a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800831e:	d108      	bne.n	8008332 <_scanf_float+0x1c6>
 8008320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	f04f 0a01 	mov.w	sl, #1
 800832a:	e7e3      	b.n	80082f4 <_scanf_float+0x188>
 800832c:	f1ba 0f02 	cmp.w	sl, #2
 8008330:	d055      	beq.n	80083de <_scanf_float+0x272>
 8008332:	2d01      	cmp	r5, #1
 8008334:	d002      	beq.n	800833c <_scanf_float+0x1d0>
 8008336:	2d04      	cmp	r5, #4
 8008338:	f47f af48 	bne.w	80081cc <_scanf_float+0x60>
 800833c:	3501      	adds	r5, #1
 800833e:	b2ed      	uxtb	r5, r5
 8008340:	e7d8      	b.n	80082f4 <_scanf_float+0x188>
 8008342:	f1ba 0f01 	cmp.w	sl, #1
 8008346:	f47f af41 	bne.w	80081cc <_scanf_float+0x60>
 800834a:	f04f 0a02 	mov.w	sl, #2
 800834e:	e7d1      	b.n	80082f4 <_scanf_float+0x188>
 8008350:	b97d      	cbnz	r5, 8008372 <_scanf_float+0x206>
 8008352:	f1b9 0f00 	cmp.w	r9, #0
 8008356:	f47f af3c 	bne.w	80081d2 <_scanf_float+0x66>
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008364:	f47f af39 	bne.w	80081da <_scanf_float+0x6e>
 8008368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	2501      	movs	r5, #1
 8008370:	e7c0      	b.n	80082f4 <_scanf_float+0x188>
 8008372:	2d03      	cmp	r5, #3
 8008374:	d0e2      	beq.n	800833c <_scanf_float+0x1d0>
 8008376:	2d05      	cmp	r5, #5
 8008378:	e7de      	b.n	8008338 <_scanf_float+0x1cc>
 800837a:	2d02      	cmp	r5, #2
 800837c:	f47f af26 	bne.w	80081cc <_scanf_float+0x60>
 8008380:	2503      	movs	r5, #3
 8008382:	e7b7      	b.n	80082f4 <_scanf_float+0x188>
 8008384:	2d06      	cmp	r5, #6
 8008386:	f47f af21 	bne.w	80081cc <_scanf_float+0x60>
 800838a:	2507      	movs	r5, #7
 800838c:	e7b2      	b.n	80082f4 <_scanf_float+0x188>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	0591      	lsls	r1, r2, #22
 8008392:	f57f af1b 	bpl.w	80081cc <_scanf_float+0x60>
 8008396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800839a:	6022      	str	r2, [r4, #0]
 800839c:	f8cd 9004 	str.w	r9, [sp, #4]
 80083a0:	e7a8      	b.n	80082f4 <_scanf_float+0x188>
 80083a2:	6822      	ldr	r2, [r4, #0]
 80083a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80083a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80083ac:	d006      	beq.n	80083bc <_scanf_float+0x250>
 80083ae:	0550      	lsls	r0, r2, #21
 80083b0:	f57f af0c 	bpl.w	80081cc <_scanf_float+0x60>
 80083b4:	f1b9 0f00 	cmp.w	r9, #0
 80083b8:	f43f af0f 	beq.w	80081da <_scanf_float+0x6e>
 80083bc:	0591      	lsls	r1, r2, #22
 80083be:	bf58      	it	pl
 80083c0:	9901      	ldrpl	r1, [sp, #4]
 80083c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083c6:	bf58      	it	pl
 80083c8:	eba9 0101 	subpl.w	r1, r9, r1
 80083cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083d0:	bf58      	it	pl
 80083d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	f04f 0900 	mov.w	r9, #0
 80083dc:	e78a      	b.n	80082f4 <_scanf_float+0x188>
 80083de:	f04f 0a03 	mov.w	sl, #3
 80083e2:	e787      	b.n	80082f4 <_scanf_float+0x188>
 80083e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083e8:	4639      	mov	r1, r7
 80083ea:	4640      	mov	r0, r8
 80083ec:	4798      	blx	r3
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f43f aedf 	beq.w	80081b2 <_scanf_float+0x46>
 80083f4:	e6ea      	b.n	80081cc <_scanf_float+0x60>
 80083f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083fe:	463a      	mov	r2, r7
 8008400:	4640      	mov	r0, r8
 8008402:	4798      	blx	r3
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	3b01      	subs	r3, #1
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	e6ec      	b.n	80081e6 <_scanf_float+0x7a>
 800840c:	1e6b      	subs	r3, r5, #1
 800840e:	2b06      	cmp	r3, #6
 8008410:	d825      	bhi.n	800845e <_scanf_float+0x2f2>
 8008412:	2d02      	cmp	r5, #2
 8008414:	d836      	bhi.n	8008484 <_scanf_float+0x318>
 8008416:	455e      	cmp	r6, fp
 8008418:	f67f aee8 	bls.w	80081ec <_scanf_float+0x80>
 800841c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008420:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008424:	463a      	mov	r2, r7
 8008426:	4640      	mov	r0, r8
 8008428:	4798      	blx	r3
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	3b01      	subs	r3, #1
 800842e:	6123      	str	r3, [r4, #16]
 8008430:	e7f1      	b.n	8008416 <_scanf_float+0x2aa>
 8008432:	9802      	ldr	r0, [sp, #8]
 8008434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	463a      	mov	r2, r7
 8008440:	4640      	mov	r0, r8
 8008442:	4798      	blx	r3
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	3b01      	subs	r3, #1
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800844e:	fa5f fa8a 	uxtb.w	sl, sl
 8008452:	f1ba 0f02 	cmp.w	sl, #2
 8008456:	d1ec      	bne.n	8008432 <_scanf_float+0x2c6>
 8008458:	3d03      	subs	r5, #3
 800845a:	b2ed      	uxtb	r5, r5
 800845c:	1b76      	subs	r6, r6, r5
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	05da      	lsls	r2, r3, #23
 8008462:	d52f      	bpl.n	80084c4 <_scanf_float+0x358>
 8008464:	055b      	lsls	r3, r3, #21
 8008466:	d510      	bpl.n	800848a <_scanf_float+0x31e>
 8008468:	455e      	cmp	r6, fp
 800846a:	f67f aebf 	bls.w	80081ec <_scanf_float+0x80>
 800846e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	e7f1      	b.n	8008468 <_scanf_float+0x2fc>
 8008484:	46aa      	mov	sl, r5
 8008486:	9602      	str	r6, [sp, #8]
 8008488:	e7df      	b.n	800844a <_scanf_float+0x2de>
 800848a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	2965      	cmp	r1, #101	; 0x65
 8008492:	f103 33ff 	add.w	r3, r3, #4294967295
 8008496:	f106 35ff 	add.w	r5, r6, #4294967295
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	d00c      	beq.n	80084b8 <_scanf_float+0x34c>
 800849e:	2945      	cmp	r1, #69	; 0x45
 80084a0:	d00a      	beq.n	80084b8 <_scanf_float+0x34c>
 80084a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084a6:	463a      	mov	r2, r7
 80084a8:	4640      	mov	r0, r8
 80084aa:	4798      	blx	r3
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	1eb5      	subs	r5, r6, #2
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084bc:	463a      	mov	r2, r7
 80084be:	4640      	mov	r0, r8
 80084c0:	4798      	blx	r3
 80084c2:	462e      	mov	r6, r5
 80084c4:	6825      	ldr	r5, [r4, #0]
 80084c6:	f015 0510 	ands.w	r5, r5, #16
 80084ca:	d159      	bne.n	8008580 <_scanf_float+0x414>
 80084cc:	7035      	strb	r5, [r6, #0]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d8:	d11b      	bne.n	8008512 <_scanf_float+0x3a6>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	454b      	cmp	r3, r9
 80084de:	eba3 0209 	sub.w	r2, r3, r9
 80084e2:	d123      	bne.n	800852c <_scanf_float+0x3c0>
 80084e4:	2200      	movs	r2, #0
 80084e6:	4659      	mov	r1, fp
 80084e8:	4640      	mov	r0, r8
 80084ea:	f000 ff27 	bl	800933c <_strtod_r>
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	f012 0f02 	tst.w	r2, #2
 80084f6:	ec57 6b10 	vmov	r6, r7, d0
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	d021      	beq.n	8008542 <_scanf_float+0x3d6>
 80084fe:	9903      	ldr	r1, [sp, #12]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	600a      	str	r2, [r1, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	e9c3 6700 	strd	r6, r7, [r3]
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60e3      	str	r3, [r4, #12]
 8008510:	e66d      	b.n	80081ee <_scanf_float+0x82>
 8008512:	9b04      	ldr	r3, [sp, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0e5      	beq.n	80084e4 <_scanf_float+0x378>
 8008518:	9905      	ldr	r1, [sp, #20]
 800851a:	230a      	movs	r3, #10
 800851c:	462a      	mov	r2, r5
 800851e:	3101      	adds	r1, #1
 8008520:	4640      	mov	r0, r8
 8008522:	f000 ff93 	bl	800944c <_strtol_r>
 8008526:	9b04      	ldr	r3, [sp, #16]
 8008528:	9e05      	ldr	r6, [sp, #20]
 800852a:	1ac2      	subs	r2, r0, r3
 800852c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008530:	429e      	cmp	r6, r3
 8008532:	bf28      	it	cs
 8008534:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008538:	4912      	ldr	r1, [pc, #72]	; (8008584 <_scanf_float+0x418>)
 800853a:	4630      	mov	r0, r6
 800853c:	f000 f8ba 	bl	80086b4 <siprintf>
 8008540:	e7d0      	b.n	80084e4 <_scanf_float+0x378>
 8008542:	9903      	ldr	r1, [sp, #12]
 8008544:	f012 0f04 	tst.w	r2, #4
 8008548:	f103 0204 	add.w	r2, r3, #4
 800854c:	600a      	str	r2, [r1, #0]
 800854e:	d1d9      	bne.n	8008504 <_scanf_float+0x398>
 8008550:	f8d3 8000 	ldr.w	r8, [r3]
 8008554:	ee10 2a10 	vmov	r2, s0
 8008558:	ee10 0a10 	vmov	r0, s0
 800855c:	463b      	mov	r3, r7
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 fabc 	bl	8000adc <__aeabi_dcmpun>
 8008564:	b128      	cbz	r0, 8008572 <_scanf_float+0x406>
 8008566:	4808      	ldr	r0, [pc, #32]	; (8008588 <_scanf_float+0x41c>)
 8008568:	f000 f89e 	bl	80086a8 <nanf>
 800856c:	ed88 0a00 	vstr	s0, [r8]
 8008570:	e7cb      	b.n	800850a <_scanf_float+0x39e>
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f8 fb0f 	bl	8000b98 <__aeabi_d2f>
 800857a:	f8c8 0000 	str.w	r0, [r8]
 800857e:	e7c4      	b.n	800850a <_scanf_float+0x39e>
 8008580:	2500      	movs	r5, #0
 8008582:	e634      	b.n	80081ee <_scanf_float+0x82>
 8008584:	0800c5dc 	.word	0x0800c5dc
 8008588:	0800ca50 	.word	0x0800ca50

0800858c <iprintf>:
 800858c:	b40f      	push	{r0, r1, r2, r3}
 800858e:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <iprintf+0x2c>)
 8008590:	b513      	push	{r0, r1, r4, lr}
 8008592:	681c      	ldr	r4, [r3, #0]
 8008594:	b124      	cbz	r4, 80085a0 <iprintf+0x14>
 8008596:	69a3      	ldr	r3, [r4, #24]
 8008598:	b913      	cbnz	r3, 80085a0 <iprintf+0x14>
 800859a:	4620      	mov	r0, r4
 800859c:	f001 ffac 	bl	800a4f8 <__sinit>
 80085a0:	ab05      	add	r3, sp, #20
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	68a1      	ldr	r1, [r4, #8]
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	4620      	mov	r0, r4
 80085aa:	f003 fb75 	bl	800bc98 <_vfiprintf_r>
 80085ae:	b002      	add	sp, #8
 80085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b4:	b004      	add	sp, #16
 80085b6:	4770      	bx	lr
 80085b8:	2000001c 	.word	0x2000001c

080085bc <_puts_r>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	4605      	mov	r5, r0
 80085c2:	b118      	cbz	r0, 80085cc <_puts_r+0x10>
 80085c4:	6983      	ldr	r3, [r0, #24]
 80085c6:	b90b      	cbnz	r3, 80085cc <_puts_r+0x10>
 80085c8:	f001 ff96 	bl	800a4f8 <__sinit>
 80085cc:	69ab      	ldr	r3, [r5, #24]
 80085ce:	68ac      	ldr	r4, [r5, #8]
 80085d0:	b913      	cbnz	r3, 80085d8 <_puts_r+0x1c>
 80085d2:	4628      	mov	r0, r5
 80085d4:	f001 ff90 	bl	800a4f8 <__sinit>
 80085d8:	4b2c      	ldr	r3, [pc, #176]	; (800868c <_puts_r+0xd0>)
 80085da:	429c      	cmp	r4, r3
 80085dc:	d120      	bne.n	8008620 <_puts_r+0x64>
 80085de:	686c      	ldr	r4, [r5, #4]
 80085e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085e2:	07db      	lsls	r3, r3, #31
 80085e4:	d405      	bmi.n	80085f2 <_puts_r+0x36>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	0598      	lsls	r0, r3, #22
 80085ea:	d402      	bmi.n	80085f2 <_puts_r+0x36>
 80085ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ee:	f002 fb94 	bl	800ad1a <__retarget_lock_acquire_recursive>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	0719      	lsls	r1, r3, #28
 80085f6:	d51d      	bpl.n	8008634 <_puts_r+0x78>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	b1db      	cbz	r3, 8008634 <_puts_r+0x78>
 80085fc:	3e01      	subs	r6, #1
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008604:	3b01      	subs	r3, #1
 8008606:	60a3      	str	r3, [r4, #8]
 8008608:	bb39      	cbnz	r1, 800865a <_puts_r+0x9e>
 800860a:	2b00      	cmp	r3, #0
 800860c:	da38      	bge.n	8008680 <_puts_r+0xc4>
 800860e:	4622      	mov	r2, r4
 8008610:	210a      	movs	r1, #10
 8008612:	4628      	mov	r0, r5
 8008614:	f000 ff1c 	bl	8009450 <__swbuf_r>
 8008618:	3001      	adds	r0, #1
 800861a:	d011      	beq.n	8008640 <_puts_r+0x84>
 800861c:	250a      	movs	r5, #10
 800861e:	e011      	b.n	8008644 <_puts_r+0x88>
 8008620:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <_puts_r+0xd4>)
 8008622:	429c      	cmp	r4, r3
 8008624:	d101      	bne.n	800862a <_puts_r+0x6e>
 8008626:	68ac      	ldr	r4, [r5, #8]
 8008628:	e7da      	b.n	80085e0 <_puts_r+0x24>
 800862a:	4b1a      	ldr	r3, [pc, #104]	; (8008694 <_puts_r+0xd8>)
 800862c:	429c      	cmp	r4, r3
 800862e:	bf08      	it	eq
 8008630:	68ec      	ldreq	r4, [r5, #12]
 8008632:	e7d5      	b.n	80085e0 <_puts_r+0x24>
 8008634:	4621      	mov	r1, r4
 8008636:	4628      	mov	r0, r5
 8008638:	f000 ff5c 	bl	80094f4 <__swsetup_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	d0dd      	beq.n	80085fc <_puts_r+0x40>
 8008640:	f04f 35ff 	mov.w	r5, #4294967295
 8008644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d405      	bmi.n	8008656 <_puts_r+0x9a>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	059b      	lsls	r3, r3, #22
 800864e:	d402      	bmi.n	8008656 <_puts_r+0x9a>
 8008650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008652:	f002 fb63 	bl	800ad1c <__retarget_lock_release_recursive>
 8008656:	4628      	mov	r0, r5
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	2b00      	cmp	r3, #0
 800865c:	da04      	bge.n	8008668 <_puts_r+0xac>
 800865e:	69a2      	ldr	r2, [r4, #24]
 8008660:	429a      	cmp	r2, r3
 8008662:	dc06      	bgt.n	8008672 <_puts_r+0xb6>
 8008664:	290a      	cmp	r1, #10
 8008666:	d004      	beq.n	8008672 <_puts_r+0xb6>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	7019      	strb	r1, [r3, #0]
 8008670:	e7c5      	b.n	80085fe <_puts_r+0x42>
 8008672:	4622      	mov	r2, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 feeb 	bl	8009450 <__swbuf_r>
 800867a:	3001      	adds	r0, #1
 800867c:	d1bf      	bne.n	80085fe <_puts_r+0x42>
 800867e:	e7df      	b.n	8008640 <_puts_r+0x84>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	250a      	movs	r5, #10
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	6022      	str	r2, [r4, #0]
 8008688:	701d      	strb	r5, [r3, #0]
 800868a:	e7db      	b.n	8008644 <_puts_r+0x88>
 800868c:	0800c7ec 	.word	0x0800c7ec
 8008690:	0800c80c 	.word	0x0800c80c
 8008694:	0800c7cc 	.word	0x0800c7cc

08008698 <puts>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <puts+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f7ff bf8d 	b.w	80085bc <_puts_r>
 80086a2:	bf00      	nop
 80086a4:	2000001c 	.word	0x2000001c

080086a8 <nanf>:
 80086a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086b0 <nanf+0x8>
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	7fc00000 	.word	0x7fc00000

080086b4 <siprintf>:
 80086b4:	b40e      	push	{r1, r2, r3}
 80086b6:	b500      	push	{lr}
 80086b8:	b09c      	sub	sp, #112	; 0x70
 80086ba:	ab1d      	add	r3, sp, #116	; 0x74
 80086bc:	9002      	str	r0, [sp, #8]
 80086be:	9006      	str	r0, [sp, #24]
 80086c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c4:	4809      	ldr	r0, [pc, #36]	; (80086ec <siprintf+0x38>)
 80086c6:	9107      	str	r1, [sp, #28]
 80086c8:	9104      	str	r1, [sp, #16]
 80086ca:	4909      	ldr	r1, [pc, #36]	; (80086f0 <siprintf+0x3c>)
 80086cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	a902      	add	r1, sp, #8
 80086d8:	f003 f9b4 	bl	800ba44 <_svfiprintf_r>
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	b01c      	add	sp, #112	; 0x70
 80086e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e8:	b003      	add	sp, #12
 80086ea:	4770      	bx	lr
 80086ec:	2000001c 	.word	0x2000001c
 80086f0:	ffff0208 	.word	0xffff0208

080086f4 <sulp>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	ec45 4b10 	vmov	d0, r4, r5
 80086fe:	4616      	mov	r6, r2
 8008700:	f002 fefe 	bl	800b500 <__ulp>
 8008704:	ec51 0b10 	vmov	r0, r1, d0
 8008708:	b17e      	cbz	r6, 800872a <sulp+0x36>
 800870a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800870e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008712:	2b00      	cmp	r3, #0
 8008714:	dd09      	ble.n	800872a <sulp+0x36>
 8008716:	051b      	lsls	r3, r3, #20
 8008718:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800871c:	2400      	movs	r4, #0
 800871e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008722:	4622      	mov	r2, r4
 8008724:	462b      	mov	r3, r5
 8008726:	f7f7 ff3f 	bl	80005a8 <__aeabi_dmul>
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	0000      	movs	r0, r0
	...

08008730 <_strtod_l>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	ed2d 8b02 	vpush	{d8}
 8008738:	b09d      	sub	sp, #116	; 0x74
 800873a:	461f      	mov	r7, r3
 800873c:	2300      	movs	r3, #0
 800873e:	9318      	str	r3, [sp, #96]	; 0x60
 8008740:	4ba2      	ldr	r3, [pc, #648]	; (80089cc <_strtod_l+0x29c>)
 8008742:	9213      	str	r2, [sp, #76]	; 0x4c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	4604      	mov	r4, r0
 800874a:	4618      	mov	r0, r3
 800874c:	4688      	mov	r8, r1
 800874e:	f7f7 fd17 	bl	8000180 <strlen>
 8008752:	f04f 0a00 	mov.w	sl, #0
 8008756:	4605      	mov	r5, r0
 8008758:	f04f 0b00 	mov.w	fp, #0
 800875c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	2a2b      	cmp	r2, #43	; 0x2b
 8008766:	d04e      	beq.n	8008806 <_strtod_l+0xd6>
 8008768:	d83b      	bhi.n	80087e2 <_strtod_l+0xb2>
 800876a:	2a0d      	cmp	r2, #13
 800876c:	d834      	bhi.n	80087d8 <_strtod_l+0xa8>
 800876e:	2a08      	cmp	r2, #8
 8008770:	d834      	bhi.n	80087dc <_strtod_l+0xac>
 8008772:	2a00      	cmp	r2, #0
 8008774:	d03e      	beq.n	80087f4 <_strtod_l+0xc4>
 8008776:	2300      	movs	r3, #0
 8008778:	930a      	str	r3, [sp, #40]	; 0x28
 800877a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800877c:	7833      	ldrb	r3, [r6, #0]
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	f040 80b0 	bne.w	80088e4 <_strtod_l+0x1b4>
 8008784:	7873      	ldrb	r3, [r6, #1]
 8008786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800878a:	2b58      	cmp	r3, #88	; 0x58
 800878c:	d168      	bne.n	8008860 <_strtod_l+0x130>
 800878e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	ab18      	add	r3, sp, #96	; 0x60
 8008794:	9702      	str	r7, [sp, #8]
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4a8d      	ldr	r2, [pc, #564]	; (80089d0 <_strtod_l+0x2a0>)
 800879a:	ab19      	add	r3, sp, #100	; 0x64
 800879c:	a917      	add	r1, sp, #92	; 0x5c
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 ffae 	bl	800a700 <__gethex>
 80087a4:	f010 0707 	ands.w	r7, r0, #7
 80087a8:	4605      	mov	r5, r0
 80087aa:	d005      	beq.n	80087b8 <_strtod_l+0x88>
 80087ac:	2f06      	cmp	r7, #6
 80087ae:	d12c      	bne.n	800880a <_strtod_l+0xda>
 80087b0:	3601      	adds	r6, #1
 80087b2:	2300      	movs	r3, #0
 80087b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80087b6:	930a      	str	r3, [sp, #40]	; 0x28
 80087b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 8590 	bne.w	80092e0 <_strtod_l+0xbb0>
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	b1eb      	cbz	r3, 8008800 <_strtod_l+0xd0>
 80087c4:	4652      	mov	r2, sl
 80087c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087ca:	ec43 2b10 	vmov	d0, r2, r3
 80087ce:	b01d      	add	sp, #116	; 0x74
 80087d0:	ecbd 8b02 	vpop	{d8}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	2a20      	cmp	r2, #32
 80087da:	d1cc      	bne.n	8008776 <_strtod_l+0x46>
 80087dc:	3301      	adds	r3, #1
 80087de:	9317      	str	r3, [sp, #92]	; 0x5c
 80087e0:	e7be      	b.n	8008760 <_strtod_l+0x30>
 80087e2:	2a2d      	cmp	r2, #45	; 0x2d
 80087e4:	d1c7      	bne.n	8008776 <_strtod_l+0x46>
 80087e6:	2201      	movs	r2, #1
 80087e8:	920a      	str	r2, [sp, #40]	; 0x28
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1c2      	bne.n	800877a <_strtod_l+0x4a>
 80087f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 856e 	bne.w	80092dc <_strtod_l+0xbac>
 8008800:	4652      	mov	r2, sl
 8008802:	465b      	mov	r3, fp
 8008804:	e7e1      	b.n	80087ca <_strtod_l+0x9a>
 8008806:	2200      	movs	r2, #0
 8008808:	e7ee      	b.n	80087e8 <_strtod_l+0xb8>
 800880a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800880c:	b13a      	cbz	r2, 800881e <_strtod_l+0xee>
 800880e:	2135      	movs	r1, #53	; 0x35
 8008810:	a81a      	add	r0, sp, #104	; 0x68
 8008812:	f002 ff80 	bl	800b716 <__copybits>
 8008816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008818:	4620      	mov	r0, r4
 800881a:	f002 fb3f 	bl	800ae9c <_Bfree>
 800881e:	3f01      	subs	r7, #1
 8008820:	2f04      	cmp	r7, #4
 8008822:	d806      	bhi.n	8008832 <_strtod_l+0x102>
 8008824:	e8df f007 	tbb	[pc, r7]
 8008828:	1714030a 	.word	0x1714030a
 800882c:	0a          	.byte	0x0a
 800882d:	00          	.byte	0x00
 800882e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008832:	0728      	lsls	r0, r5, #28
 8008834:	d5c0      	bpl.n	80087b8 <_strtod_l+0x88>
 8008836:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800883a:	e7bd      	b.n	80087b8 <_strtod_l+0x88>
 800883c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008840:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800884a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800884e:	e7f0      	b.n	8008832 <_strtod_l+0x102>
 8008850:	f8df b180 	ldr.w	fp, [pc, #384]	; 80089d4 <_strtod_l+0x2a4>
 8008854:	e7ed      	b.n	8008832 <_strtod_l+0x102>
 8008856:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800885a:	f04f 3aff 	mov.w	sl, #4294967295
 800885e:	e7e8      	b.n	8008832 <_strtod_l+0x102>
 8008860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	9217      	str	r2, [sp, #92]	; 0x5c
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b30      	cmp	r3, #48	; 0x30
 800886a:	d0f9      	beq.n	8008860 <_strtod_l+0x130>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0a3      	beq.n	80087b8 <_strtod_l+0x88>
 8008870:	2301      	movs	r3, #1
 8008872:	f04f 0900 	mov.w	r9, #0
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008880:	464f      	mov	r7, r9
 8008882:	220a      	movs	r2, #10
 8008884:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008886:	7806      	ldrb	r6, [r0, #0]
 8008888:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800888c:	b2d9      	uxtb	r1, r3
 800888e:	2909      	cmp	r1, #9
 8008890:	d92a      	bls.n	80088e8 <_strtod_l+0x1b8>
 8008892:	9905      	ldr	r1, [sp, #20]
 8008894:	462a      	mov	r2, r5
 8008896:	f003 fb8a 	bl	800bfae <strncmp>
 800889a:	b398      	cbz	r0, 8008904 <_strtod_l+0x1d4>
 800889c:	2000      	movs	r0, #0
 800889e:	4632      	mov	r2, r6
 80088a0:	463d      	mov	r5, r7
 80088a2:	9005      	str	r0, [sp, #20]
 80088a4:	4603      	mov	r3, r0
 80088a6:	2a65      	cmp	r2, #101	; 0x65
 80088a8:	d001      	beq.n	80088ae <_strtod_l+0x17e>
 80088aa:	2a45      	cmp	r2, #69	; 0x45
 80088ac:	d118      	bne.n	80088e0 <_strtod_l+0x1b0>
 80088ae:	b91d      	cbnz	r5, 80088b8 <_strtod_l+0x188>
 80088b0:	9a04      	ldr	r2, [sp, #16]
 80088b2:	4302      	orrs	r2, r0
 80088b4:	d09e      	beq.n	80087f4 <_strtod_l+0xc4>
 80088b6:	2500      	movs	r5, #0
 80088b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80088bc:	f108 0201 	add.w	r2, r8, #1
 80088c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80088c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80088c6:	2a2b      	cmp	r2, #43	; 0x2b
 80088c8:	d075      	beq.n	80089b6 <_strtod_l+0x286>
 80088ca:	2a2d      	cmp	r2, #45	; 0x2d
 80088cc:	d07b      	beq.n	80089c6 <_strtod_l+0x296>
 80088ce:	f04f 0c00 	mov.w	ip, #0
 80088d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80088d6:	2909      	cmp	r1, #9
 80088d8:	f240 8082 	bls.w	80089e0 <_strtod_l+0x2b0>
 80088dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80088e0:	2600      	movs	r6, #0
 80088e2:	e09d      	b.n	8008a20 <_strtod_l+0x2f0>
 80088e4:	2300      	movs	r3, #0
 80088e6:	e7c4      	b.n	8008872 <_strtod_l+0x142>
 80088e8:	2f08      	cmp	r7, #8
 80088ea:	bfd8      	it	le
 80088ec:	9907      	ldrle	r1, [sp, #28]
 80088ee:	f100 0001 	add.w	r0, r0, #1
 80088f2:	bfda      	itte	le
 80088f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80088f8:	9307      	strle	r3, [sp, #28]
 80088fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80088fe:	3701      	adds	r7, #1
 8008900:	9017      	str	r0, [sp, #92]	; 0x5c
 8008902:	e7bf      	b.n	8008884 <_strtod_l+0x154>
 8008904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008906:	195a      	adds	r2, r3, r5
 8008908:	9217      	str	r2, [sp, #92]	; 0x5c
 800890a:	5d5a      	ldrb	r2, [r3, r5]
 800890c:	2f00      	cmp	r7, #0
 800890e:	d037      	beq.n	8008980 <_strtod_l+0x250>
 8008910:	9005      	str	r0, [sp, #20]
 8008912:	463d      	mov	r5, r7
 8008914:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d912      	bls.n	8008942 <_strtod_l+0x212>
 800891c:	2301      	movs	r3, #1
 800891e:	e7c2      	b.n	80088a6 <_strtod_l+0x176>
 8008920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	9217      	str	r2, [sp, #92]	; 0x5c
 8008926:	785a      	ldrb	r2, [r3, #1]
 8008928:	3001      	adds	r0, #1
 800892a:	2a30      	cmp	r2, #48	; 0x30
 800892c:	d0f8      	beq.n	8008920 <_strtod_l+0x1f0>
 800892e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008932:	2b08      	cmp	r3, #8
 8008934:	f200 84d9 	bhi.w	80092ea <_strtod_l+0xbba>
 8008938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800893a:	9005      	str	r0, [sp, #20]
 800893c:	2000      	movs	r0, #0
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	4605      	mov	r5, r0
 8008942:	3a30      	subs	r2, #48	; 0x30
 8008944:	f100 0301 	add.w	r3, r0, #1
 8008948:	d014      	beq.n	8008974 <_strtod_l+0x244>
 800894a:	9905      	ldr	r1, [sp, #20]
 800894c:	4419      	add	r1, r3
 800894e:	9105      	str	r1, [sp, #20]
 8008950:	462b      	mov	r3, r5
 8008952:	eb00 0e05 	add.w	lr, r0, r5
 8008956:	210a      	movs	r1, #10
 8008958:	4573      	cmp	r3, lr
 800895a:	d113      	bne.n	8008984 <_strtod_l+0x254>
 800895c:	182b      	adds	r3, r5, r0
 800895e:	2b08      	cmp	r3, #8
 8008960:	f105 0501 	add.w	r5, r5, #1
 8008964:	4405      	add	r5, r0
 8008966:	dc1c      	bgt.n	80089a2 <_strtod_l+0x272>
 8008968:	9907      	ldr	r1, [sp, #28]
 800896a:	230a      	movs	r3, #10
 800896c:	fb03 2301 	mla	r3, r3, r1, r2
 8008970:	9307      	str	r3, [sp, #28]
 8008972:	2300      	movs	r3, #0
 8008974:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008976:	1c51      	adds	r1, r2, #1
 8008978:	9117      	str	r1, [sp, #92]	; 0x5c
 800897a:	7852      	ldrb	r2, [r2, #1]
 800897c:	4618      	mov	r0, r3
 800897e:	e7c9      	b.n	8008914 <_strtod_l+0x1e4>
 8008980:	4638      	mov	r0, r7
 8008982:	e7d2      	b.n	800892a <_strtod_l+0x1fa>
 8008984:	2b08      	cmp	r3, #8
 8008986:	dc04      	bgt.n	8008992 <_strtod_l+0x262>
 8008988:	9e07      	ldr	r6, [sp, #28]
 800898a:	434e      	muls	r6, r1
 800898c:	9607      	str	r6, [sp, #28]
 800898e:	3301      	adds	r3, #1
 8008990:	e7e2      	b.n	8008958 <_strtod_l+0x228>
 8008992:	f103 0c01 	add.w	ip, r3, #1
 8008996:	f1bc 0f10 	cmp.w	ip, #16
 800899a:	bfd8      	it	le
 800899c:	fb01 f909 	mulle.w	r9, r1, r9
 80089a0:	e7f5      	b.n	800898e <_strtod_l+0x25e>
 80089a2:	2d10      	cmp	r5, #16
 80089a4:	bfdc      	itt	le
 80089a6:	230a      	movle	r3, #10
 80089a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80089ac:	e7e1      	b.n	8008972 <_strtod_l+0x242>
 80089ae:	2300      	movs	r3, #0
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	2301      	movs	r3, #1
 80089b4:	e77c      	b.n	80088b0 <_strtod_l+0x180>
 80089b6:	f04f 0c00 	mov.w	ip, #0
 80089ba:	f108 0202 	add.w	r2, r8, #2
 80089be:	9217      	str	r2, [sp, #92]	; 0x5c
 80089c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80089c4:	e785      	b.n	80088d2 <_strtod_l+0x1a2>
 80089c6:	f04f 0c01 	mov.w	ip, #1
 80089ca:	e7f6      	b.n	80089ba <_strtod_l+0x28a>
 80089cc:	0800c894 	.word	0x0800c894
 80089d0:	0800c5e4 	.word	0x0800c5e4
 80089d4:	7ff00000 	.word	0x7ff00000
 80089d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089da:	1c51      	adds	r1, r2, #1
 80089dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80089de:	7852      	ldrb	r2, [r2, #1]
 80089e0:	2a30      	cmp	r2, #48	; 0x30
 80089e2:	d0f9      	beq.n	80089d8 <_strtod_l+0x2a8>
 80089e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80089e8:	2908      	cmp	r1, #8
 80089ea:	f63f af79 	bhi.w	80088e0 <_strtod_l+0x1b0>
 80089ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80089f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089f4:	9206      	str	r2, [sp, #24]
 80089f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089f8:	1c51      	adds	r1, r2, #1
 80089fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80089fc:	7852      	ldrb	r2, [r2, #1]
 80089fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008a02:	2e09      	cmp	r6, #9
 8008a04:	d937      	bls.n	8008a76 <_strtod_l+0x346>
 8008a06:	9e06      	ldr	r6, [sp, #24]
 8008a08:	1b89      	subs	r1, r1, r6
 8008a0a:	2908      	cmp	r1, #8
 8008a0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a10:	dc02      	bgt.n	8008a18 <_strtod_l+0x2e8>
 8008a12:	4576      	cmp	r6, lr
 8008a14:	bfa8      	it	ge
 8008a16:	4676      	movge	r6, lr
 8008a18:	f1bc 0f00 	cmp.w	ip, #0
 8008a1c:	d000      	beq.n	8008a20 <_strtod_l+0x2f0>
 8008a1e:	4276      	negs	r6, r6
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	d14d      	bne.n	8008ac0 <_strtod_l+0x390>
 8008a24:	9904      	ldr	r1, [sp, #16]
 8008a26:	4301      	orrs	r1, r0
 8008a28:	f47f aec6 	bne.w	80087b8 <_strtod_l+0x88>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f aee1 	bne.w	80087f4 <_strtod_l+0xc4>
 8008a32:	2a69      	cmp	r2, #105	; 0x69
 8008a34:	d027      	beq.n	8008a86 <_strtod_l+0x356>
 8008a36:	dc24      	bgt.n	8008a82 <_strtod_l+0x352>
 8008a38:	2a49      	cmp	r2, #73	; 0x49
 8008a3a:	d024      	beq.n	8008a86 <_strtod_l+0x356>
 8008a3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008a3e:	f47f aed9 	bne.w	80087f4 <_strtod_l+0xc4>
 8008a42:	499f      	ldr	r1, [pc, #636]	; (8008cc0 <_strtod_l+0x590>)
 8008a44:	a817      	add	r0, sp, #92	; 0x5c
 8008a46:	f002 f8b3 	bl	800abb0 <__match>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f43f aed2 	beq.w	80087f4 <_strtod_l+0xc4>
 8008a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b28      	cmp	r3, #40	; 0x28
 8008a56:	d12d      	bne.n	8008ab4 <_strtod_l+0x384>
 8008a58:	499a      	ldr	r1, [pc, #616]	; (8008cc4 <_strtod_l+0x594>)
 8008a5a:	aa1a      	add	r2, sp, #104	; 0x68
 8008a5c:	a817      	add	r0, sp, #92	; 0x5c
 8008a5e:	f002 f8bb 	bl	800abd8 <__hexnan>
 8008a62:	2805      	cmp	r0, #5
 8008a64:	d126      	bne.n	8008ab4 <_strtod_l+0x384>
 8008a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008a6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008a70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008a74:	e6a0      	b.n	80087b8 <_strtod_l+0x88>
 8008a76:	210a      	movs	r1, #10
 8008a78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008a7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008a80:	e7b9      	b.n	80089f6 <_strtod_l+0x2c6>
 8008a82:	2a6e      	cmp	r2, #110	; 0x6e
 8008a84:	e7db      	b.n	8008a3e <_strtod_l+0x30e>
 8008a86:	4990      	ldr	r1, [pc, #576]	; (8008cc8 <_strtod_l+0x598>)
 8008a88:	a817      	add	r0, sp, #92	; 0x5c
 8008a8a:	f002 f891 	bl	800abb0 <__match>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f aeb0 	beq.w	80087f4 <_strtod_l+0xc4>
 8008a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a96:	498d      	ldr	r1, [pc, #564]	; (8008ccc <_strtod_l+0x59c>)
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	a817      	add	r0, sp, #92	; 0x5c
 8008a9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a9e:	f002 f887 	bl	800abb0 <__match>
 8008aa2:	b910      	cbnz	r0, 8008aaa <_strtod_l+0x37a>
 8008aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008aaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008cdc <_strtod_l+0x5ac>
 8008aae:	f04f 0a00 	mov.w	sl, #0
 8008ab2:	e681      	b.n	80087b8 <_strtod_l+0x88>
 8008ab4:	4886      	ldr	r0, [pc, #536]	; (8008cd0 <_strtod_l+0x5a0>)
 8008ab6:	f003 fa1f 	bl	800bef8 <nan>
 8008aba:	ec5b ab10 	vmov	sl, fp, d0
 8008abe:	e67b      	b.n	80087b8 <_strtod_l+0x88>
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	9807      	ldr	r0, [sp, #28]
 8008ac4:	1af3      	subs	r3, r6, r3
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	bf08      	it	eq
 8008aca:	462f      	moveq	r7, r5
 8008acc:	2d10      	cmp	r5, #16
 8008ace:	9306      	str	r3, [sp, #24]
 8008ad0:	46a8      	mov	r8, r5
 8008ad2:	bfa8      	it	ge
 8008ad4:	f04f 0810 	movge.w	r8, #16
 8008ad8:	f7f7 fcec 	bl	80004b4 <__aeabi_ui2d>
 8008adc:	2d09      	cmp	r5, #9
 8008ade:	4682      	mov	sl, r0
 8008ae0:	468b      	mov	fp, r1
 8008ae2:	dd13      	ble.n	8008b0c <_strtod_l+0x3dc>
 8008ae4:	4b7b      	ldr	r3, [pc, #492]	; (8008cd4 <_strtod_l+0x5a4>)
 8008ae6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008aea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008aee:	f7f7 fd5b 	bl	80005a8 <__aeabi_dmul>
 8008af2:	4682      	mov	sl, r0
 8008af4:	4648      	mov	r0, r9
 8008af6:	468b      	mov	fp, r1
 8008af8:	f7f7 fcdc 	bl	80004b4 <__aeabi_ui2d>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4650      	mov	r0, sl
 8008b02:	4659      	mov	r1, fp
 8008b04:	f7f7 fb9a 	bl	800023c <__adddf3>
 8008b08:	4682      	mov	sl, r0
 8008b0a:	468b      	mov	fp, r1
 8008b0c:	2d0f      	cmp	r5, #15
 8008b0e:	dc38      	bgt.n	8008b82 <_strtod_l+0x452>
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f43f ae50 	beq.w	80087b8 <_strtod_l+0x88>
 8008b18:	dd24      	ble.n	8008b64 <_strtod_l+0x434>
 8008b1a:	2b16      	cmp	r3, #22
 8008b1c:	dc0b      	bgt.n	8008b36 <_strtod_l+0x406>
 8008b1e:	496d      	ldr	r1, [pc, #436]	; (8008cd4 <_strtod_l+0x5a4>)
 8008b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b28:	4652      	mov	r2, sl
 8008b2a:	465b      	mov	r3, fp
 8008b2c:	f7f7 fd3c 	bl	80005a8 <__aeabi_dmul>
 8008b30:	4682      	mov	sl, r0
 8008b32:	468b      	mov	fp, r1
 8008b34:	e640      	b.n	80087b8 <_strtod_l+0x88>
 8008b36:	9a06      	ldr	r2, [sp, #24]
 8008b38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	db20      	blt.n	8008b82 <_strtod_l+0x452>
 8008b40:	4c64      	ldr	r4, [pc, #400]	; (8008cd4 <_strtod_l+0x5a4>)
 8008b42:	f1c5 050f 	rsb	r5, r5, #15
 8008b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	465b      	mov	r3, fp
 8008b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b52:	f7f7 fd29 	bl	80005a8 <__aeabi_dmul>
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	1b5d      	subs	r5, r3, r5
 8008b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b62:	e7e3      	b.n	8008b2c <_strtod_l+0x3fc>
 8008b64:	9b06      	ldr	r3, [sp, #24]
 8008b66:	3316      	adds	r3, #22
 8008b68:	db0b      	blt.n	8008b82 <_strtod_l+0x452>
 8008b6a:	9b05      	ldr	r3, [sp, #20]
 8008b6c:	1b9e      	subs	r6, r3, r6
 8008b6e:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <_strtod_l+0x5a4>)
 8008b70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	f7f7 fe3e 	bl	80007fc <__aeabi_ddiv>
 8008b80:	e7d6      	b.n	8008b30 <_strtod_l+0x400>
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	eba5 0808 	sub.w	r8, r5, r8
 8008b88:	4498      	add	r8, r3
 8008b8a:	f1b8 0f00 	cmp.w	r8, #0
 8008b8e:	dd74      	ble.n	8008c7a <_strtod_l+0x54a>
 8008b90:	f018 030f 	ands.w	r3, r8, #15
 8008b94:	d00a      	beq.n	8008bac <_strtod_l+0x47c>
 8008b96:	494f      	ldr	r1, [pc, #316]	; (8008cd4 <_strtod_l+0x5a4>)
 8008b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ba4:	f7f7 fd00 	bl	80005a8 <__aeabi_dmul>
 8008ba8:	4682      	mov	sl, r0
 8008baa:	468b      	mov	fp, r1
 8008bac:	f038 080f 	bics.w	r8, r8, #15
 8008bb0:	d04f      	beq.n	8008c52 <_strtod_l+0x522>
 8008bb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008bb6:	dd22      	ble.n	8008bfe <_strtod_l+0x4ce>
 8008bb8:	2500      	movs	r5, #0
 8008bba:	462e      	mov	r6, r5
 8008bbc:	9507      	str	r5, [sp, #28]
 8008bbe:	9505      	str	r5, [sp, #20]
 8008bc0:	2322      	movs	r3, #34	; 0x22
 8008bc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008cdc <_strtod_l+0x5ac>
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	f04f 0a00 	mov.w	sl, #0
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f43f adf2 	beq.w	80087b8 <_strtod_l+0x88>
 8008bd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f002 f960 	bl	800ae9c <_Bfree>
 8008bdc:	9905      	ldr	r1, [sp, #20]
 8008bde:	4620      	mov	r0, r4
 8008be0:	f002 f95c 	bl	800ae9c <_Bfree>
 8008be4:	4631      	mov	r1, r6
 8008be6:	4620      	mov	r0, r4
 8008be8:	f002 f958 	bl	800ae9c <_Bfree>
 8008bec:	9907      	ldr	r1, [sp, #28]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f002 f954 	bl	800ae9c <_Bfree>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f002 f950 	bl	800ae9c <_Bfree>
 8008bfc:	e5dc      	b.n	80087b8 <_strtod_l+0x88>
 8008bfe:	4b36      	ldr	r3, [pc, #216]	; (8008cd8 <_strtod_l+0x5a8>)
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	2300      	movs	r3, #0
 8008c04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c08:	4650      	mov	r0, sl
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	4699      	mov	r9, r3
 8008c0e:	f1b8 0f01 	cmp.w	r8, #1
 8008c12:	dc21      	bgt.n	8008c58 <_strtod_l+0x528>
 8008c14:	b10b      	cbz	r3, 8008c1a <_strtod_l+0x4ea>
 8008c16:	4682      	mov	sl, r0
 8008c18:	468b      	mov	fp, r1
 8008c1a:	4b2f      	ldr	r3, [pc, #188]	; (8008cd8 <_strtod_l+0x5a8>)
 8008c1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008c24:	4652      	mov	r2, sl
 8008c26:	465b      	mov	r3, fp
 8008c28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c2c:	f7f7 fcbc 	bl	80005a8 <__aeabi_dmul>
 8008c30:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <_strtod_l+0x5ac>)
 8008c32:	460a      	mov	r2, r1
 8008c34:	400b      	ands	r3, r1
 8008c36:	492a      	ldr	r1, [pc, #168]	; (8008ce0 <_strtod_l+0x5b0>)
 8008c38:	428b      	cmp	r3, r1
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	d8bc      	bhi.n	8008bb8 <_strtod_l+0x488>
 8008c3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c42:	428b      	cmp	r3, r1
 8008c44:	bf86      	itte	hi
 8008c46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008ce4 <_strtod_l+0x5b4>
 8008c4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c52:	2300      	movs	r3, #0
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	e084      	b.n	8008d62 <_strtod_l+0x632>
 8008c58:	f018 0f01 	tst.w	r8, #1
 8008c5c:	d005      	beq.n	8008c6a <_strtod_l+0x53a>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fca0 	bl	80005a8 <__aeabi_dmul>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	9a04      	ldr	r2, [sp, #16]
 8008c6c:	3208      	adds	r2, #8
 8008c6e:	f109 0901 	add.w	r9, r9, #1
 8008c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c76:	9204      	str	r2, [sp, #16]
 8008c78:	e7c9      	b.n	8008c0e <_strtod_l+0x4de>
 8008c7a:	d0ea      	beq.n	8008c52 <_strtod_l+0x522>
 8008c7c:	f1c8 0800 	rsb	r8, r8, #0
 8008c80:	f018 020f 	ands.w	r2, r8, #15
 8008c84:	d00a      	beq.n	8008c9c <_strtod_l+0x56c>
 8008c86:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <_strtod_l+0x5a4>)
 8008c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	4659      	mov	r1, fp
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fdb2 	bl	80007fc <__aeabi_ddiv>
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ca0:	d0d7      	beq.n	8008c52 <_strtod_l+0x522>
 8008ca2:	f1b8 0f1f 	cmp.w	r8, #31
 8008ca6:	dd1f      	ble.n	8008ce8 <_strtod_l+0x5b8>
 8008ca8:	2500      	movs	r5, #0
 8008caa:	462e      	mov	r6, r5
 8008cac:	9507      	str	r5, [sp, #28]
 8008cae:	9505      	str	r5, [sp, #20]
 8008cb0:	2322      	movs	r3, #34	; 0x22
 8008cb2:	f04f 0a00 	mov.w	sl, #0
 8008cb6:	f04f 0b00 	mov.w	fp, #0
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e786      	b.n	8008bcc <_strtod_l+0x49c>
 8008cbe:	bf00      	nop
 8008cc0:	0800c5b5 	.word	0x0800c5b5
 8008cc4:	0800c5f8 	.word	0x0800c5f8
 8008cc8:	0800c5ad 	.word	0x0800c5ad
 8008ccc:	0800c73c 	.word	0x0800c73c
 8008cd0:	0800ca50 	.word	0x0800ca50
 8008cd4:	0800c930 	.word	0x0800c930
 8008cd8:	0800c908 	.word	0x0800c908
 8008cdc:	7ff00000 	.word	0x7ff00000
 8008ce0:	7ca00000 	.word	0x7ca00000
 8008ce4:	7fefffff 	.word	0x7fefffff
 8008ce8:	f018 0310 	ands.w	r3, r8, #16
 8008cec:	bf18      	it	ne
 8008cee:	236a      	movne	r3, #106	; 0x6a
 8008cf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80090a0 <_strtod_l+0x970>
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f018 0f01 	tst.w	r8, #1
 8008d00:	d004      	beq.n	8008d0c <_strtod_l+0x5dc>
 8008d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d06:	f7f7 fc4f 	bl	80005a8 <__aeabi_dmul>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d10:	f109 0908 	add.w	r9, r9, #8
 8008d14:	d1f2      	bne.n	8008cfc <_strtod_l+0x5cc>
 8008d16:	b10b      	cbz	r3, 8008d1c <_strtod_l+0x5ec>
 8008d18:	4682      	mov	sl, r0
 8008d1a:	468b      	mov	fp, r1
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	b1c3      	cbz	r3, 8008d52 <_strtod_l+0x622>
 8008d20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	4659      	mov	r1, fp
 8008d2c:	dd11      	ble.n	8008d52 <_strtod_l+0x622>
 8008d2e:	2b1f      	cmp	r3, #31
 8008d30:	f340 8124 	ble.w	8008f7c <_strtod_l+0x84c>
 8008d34:	2b34      	cmp	r3, #52	; 0x34
 8008d36:	bfde      	ittt	le
 8008d38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008d3c:	f04f 33ff 	movle.w	r3, #4294967295
 8008d40:	fa03 f202 	lslle.w	r2, r3, r2
 8008d44:	f04f 0a00 	mov.w	sl, #0
 8008d48:	bfcc      	ite	gt
 8008d4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d4e:	ea02 0b01 	andle.w	fp, r2, r1
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	4650      	mov	r0, sl
 8008d58:	4659      	mov	r1, fp
 8008d5a:	f7f7 fe8d 	bl	8000a78 <__aeabi_dcmpeq>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1a2      	bne.n	8008ca8 <_strtod_l+0x578>
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	9908      	ldr	r1, [sp, #32]
 8008d68:	462b      	mov	r3, r5
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f002 f8fd 	bl	800af6c <__s2b>
 8008d72:	9007      	str	r0, [sp, #28]
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f43f af1f 	beq.w	8008bb8 <_strtod_l+0x488>
 8008d7a:	9b05      	ldr	r3, [sp, #20]
 8008d7c:	1b9e      	subs	r6, r3, r6
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfb4      	ite	lt
 8008d84:	4633      	movlt	r3, r6
 8008d86:	2300      	movge	r3, #0
 8008d88:	930c      	str	r3, [sp, #48]	; 0x30
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d92:	9312      	str	r3, [sp, #72]	; 0x48
 8008d94:	462e      	mov	r6, r5
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	4620      	mov	r0, r4
 8008d9a:	6859      	ldr	r1, [r3, #4]
 8008d9c:	f002 f83e 	bl	800ae1c <_Balloc>
 8008da0:	9005      	str	r0, [sp, #20]
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f43f af0c 	beq.w	8008bc0 <_strtod_l+0x490>
 8008da8:	9b07      	ldr	r3, [sp, #28]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	3202      	adds	r2, #2
 8008dae:	f103 010c 	add.w	r1, r3, #12
 8008db2:	0092      	lsls	r2, r2, #2
 8008db4:	300c      	adds	r0, #12
 8008db6:	f7fe fd59 	bl	800786c <memcpy>
 8008dba:	ec4b ab10 	vmov	d0, sl, fp
 8008dbe:	aa1a      	add	r2, sp, #104	; 0x68
 8008dc0:	a919      	add	r1, sp, #100	; 0x64
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f002 fc18 	bl	800b5f8 <__d2b>
 8008dc8:	ec4b ab18 	vmov	d8, sl, fp
 8008dcc:	9018      	str	r0, [sp, #96]	; 0x60
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f aef6 	beq.w	8008bc0 <_strtod_l+0x490>
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f002 f962 	bl	800b0a0 <__i2b>
 8008ddc:	4606      	mov	r6, r0
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f43f aeee 	beq.w	8008bc0 <_strtod_l+0x490>
 8008de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008de6:	9904      	ldr	r1, [sp, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bfab      	itete	ge
 8008dec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008dee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008df0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008df2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008df6:	bfac      	ite	ge
 8008df8:	eb03 0902 	addge.w	r9, r3, r2
 8008dfc:	1ad7      	sublt	r7, r2, r3
 8008dfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008e00:	eba3 0801 	sub.w	r8, r3, r1
 8008e04:	4490      	add	r8, r2
 8008e06:	4ba1      	ldr	r3, [pc, #644]	; (800908c <_strtod_l+0x95c>)
 8008e08:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e0c:	4598      	cmp	r8, r3
 8008e0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e12:	f280 80c7 	bge.w	8008fa4 <_strtod_l+0x874>
 8008e16:	eba3 0308 	sub.w	r3, r3, r8
 8008e1a:	2b1f      	cmp	r3, #31
 8008e1c:	eba2 0203 	sub.w	r2, r2, r3
 8008e20:	f04f 0101 	mov.w	r1, #1
 8008e24:	f300 80b1 	bgt.w	8008f8a <_strtod_l+0x85a>
 8008e28:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	eb09 0802 	add.w	r8, r9, r2
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	45c1      	cmp	r9, r8
 8008e3a:	4417      	add	r7, r2
 8008e3c:	441f      	add	r7, r3
 8008e3e:	464b      	mov	r3, r9
 8008e40:	bfa8      	it	ge
 8008e42:	4643      	movge	r3, r8
 8008e44:	42bb      	cmp	r3, r7
 8008e46:	bfa8      	it	ge
 8008e48:	463b      	movge	r3, r7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfc2      	ittt	gt
 8008e4e:	eba8 0803 	subgt.w	r8, r8, r3
 8008e52:	1aff      	subgt	r7, r7, r3
 8008e54:	eba9 0903 	subgt.w	r9, r9, r3
 8008e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dd17      	ble.n	8008e8e <_strtod_l+0x75e>
 8008e5e:	4631      	mov	r1, r6
 8008e60:	461a      	mov	r2, r3
 8008e62:	4620      	mov	r0, r4
 8008e64:	f002 f9dc 	bl	800b220 <__pow5mult>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f43f aea8 	beq.w	8008bc0 <_strtod_l+0x490>
 8008e70:	4601      	mov	r1, r0
 8008e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e74:	4620      	mov	r0, r4
 8008e76:	f002 f929 	bl	800b0cc <__multiply>
 8008e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f43f ae9f 	beq.w	8008bc0 <_strtod_l+0x490>
 8008e82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e84:	4620      	mov	r0, r4
 8008e86:	f002 f809 	bl	800ae9c <_Bfree>
 8008e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e8c:	9318      	str	r3, [sp, #96]	; 0x60
 8008e8e:	f1b8 0f00 	cmp.w	r8, #0
 8008e92:	f300 808c 	bgt.w	8008fae <_strtod_l+0x87e>
 8008e96:	9b06      	ldr	r3, [sp, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dd08      	ble.n	8008eae <_strtod_l+0x77e>
 8008e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e9e:	9905      	ldr	r1, [sp, #20]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f002 f9bd 	bl	800b220 <__pow5mult>
 8008ea6:	9005      	str	r0, [sp, #20]
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f43f ae89 	beq.w	8008bc0 <_strtod_l+0x490>
 8008eae:	2f00      	cmp	r7, #0
 8008eb0:	dd08      	ble.n	8008ec4 <_strtod_l+0x794>
 8008eb2:	9905      	ldr	r1, [sp, #20]
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f002 fa0c 	bl	800b2d4 <__lshift>
 8008ebc:	9005      	str	r0, [sp, #20]
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f43f ae7e 	beq.w	8008bc0 <_strtod_l+0x490>
 8008ec4:	f1b9 0f00 	cmp.w	r9, #0
 8008ec8:	dd08      	ble.n	8008edc <_strtod_l+0x7ac>
 8008eca:	4631      	mov	r1, r6
 8008ecc:	464a      	mov	r2, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f002 fa00 	bl	800b2d4 <__lshift>
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f43f ae72 	beq.w	8008bc0 <_strtod_l+0x490>
 8008edc:	9a05      	ldr	r2, [sp, #20]
 8008ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f002 fa83 	bl	800b3ec <__mdiff>
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f43f ae69 	beq.w	8008bc0 <_strtod_l+0x490>
 8008eee:	68c3      	ldr	r3, [r0, #12]
 8008ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60c3      	str	r3, [r0, #12]
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	f002 fa5c 	bl	800b3b4 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	da60      	bge.n	8008fc2 <_strtod_l+0x892>
 8008f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f02:	ea53 030a 	orrs.w	r3, r3, sl
 8008f06:	f040 8082 	bne.w	800900e <_strtod_l+0x8de>
 8008f0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d17d      	bne.n	800900e <_strtod_l+0x8de>
 8008f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f16:	0d1b      	lsrs	r3, r3, #20
 8008f18:	051b      	lsls	r3, r3, #20
 8008f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f1e:	d976      	bls.n	800900e <_strtod_l+0x8de>
 8008f20:	696b      	ldr	r3, [r5, #20]
 8008f22:	b913      	cbnz	r3, 8008f2a <_strtod_l+0x7fa>
 8008f24:	692b      	ldr	r3, [r5, #16]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	dd71      	ble.n	800900e <_strtod_l+0x8de>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f002 f9d0 	bl	800b2d4 <__lshift>
 8008f34:	4631      	mov	r1, r6
 8008f36:	4605      	mov	r5, r0
 8008f38:	f002 fa3c 	bl	800b3b4 <__mcmp>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	dd66      	ble.n	800900e <_strtod_l+0x8de>
 8008f40:	9904      	ldr	r1, [sp, #16]
 8008f42:	4a53      	ldr	r2, [pc, #332]	; (8009090 <_strtod_l+0x960>)
 8008f44:	465b      	mov	r3, fp
 8008f46:	2900      	cmp	r1, #0
 8008f48:	f000 8081 	beq.w	800904e <_strtod_l+0x91e>
 8008f4c:	ea02 010b 	and.w	r1, r2, fp
 8008f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f54:	dc7b      	bgt.n	800904e <_strtod_l+0x91e>
 8008f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f5a:	f77f aea9 	ble.w	8008cb0 <_strtod_l+0x580>
 8008f5e:	4b4d      	ldr	r3, [pc, #308]	; (8009094 <_strtod_l+0x964>)
 8008f60:	4650      	mov	r0, sl
 8008f62:	4659      	mov	r1, fp
 8008f64:	2200      	movs	r2, #0
 8008f66:	f7f7 fb1f 	bl	80005a8 <__aeabi_dmul>
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4303      	orrs	r3, r0
 8008f6e:	bf08      	it	eq
 8008f70:	2322      	moveq	r3, #34	; 0x22
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	bf08      	it	eq
 8008f78:	6023      	streq	r3, [r4, #0]
 8008f7a:	e62b      	b.n	8008bd4 <_strtod_l+0x4a4>
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	ea03 0a0a 	and.w	sl, r3, sl
 8008f88:	e6e3      	b.n	8008d52 <_strtod_l+0x622>
 8008f8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008f8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008f92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008f96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008f9a:	fa01 f308 	lsl.w	r3, r1, r8
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	910d      	str	r1, [sp, #52]	; 0x34
 8008fa2:	e746      	b.n	8008e32 <_strtod_l+0x702>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9308      	str	r3, [sp, #32]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	930d      	str	r3, [sp, #52]	; 0x34
 8008fac:	e741      	b.n	8008e32 <_strtod_l+0x702>
 8008fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f002 f98e 	bl	800b2d4 <__lshift>
 8008fb8:	9018      	str	r0, [sp, #96]	; 0x60
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f47f af6b 	bne.w	8008e96 <_strtod_l+0x766>
 8008fc0:	e5fe      	b.n	8008bc0 <_strtod_l+0x490>
 8008fc2:	465f      	mov	r7, fp
 8008fc4:	d16e      	bne.n	80090a4 <_strtod_l+0x974>
 8008fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fcc:	b342      	cbz	r2, 8009020 <_strtod_l+0x8f0>
 8008fce:	4a32      	ldr	r2, [pc, #200]	; (8009098 <_strtod_l+0x968>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d128      	bne.n	8009026 <_strtod_l+0x8f6>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	4651      	mov	r1, sl
 8008fd8:	b1eb      	cbz	r3, 8009016 <_strtod_l+0x8e6>
 8008fda:	4b2d      	ldr	r3, [pc, #180]	; (8009090 <_strtod_l+0x960>)
 8008fdc:	403b      	ands	r3, r7
 8008fde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	d819      	bhi.n	800901c <_strtod_l+0x8ec>
 8008fe8:	0d1b      	lsrs	r3, r3, #20
 8008fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d117      	bne.n	8009026 <_strtod_l+0x8f6>
 8008ff6:	4b29      	ldr	r3, [pc, #164]	; (800909c <_strtod_l+0x96c>)
 8008ff8:	429f      	cmp	r7, r3
 8008ffa:	d102      	bne.n	8009002 <_strtod_l+0x8d2>
 8008ffc:	3101      	adds	r1, #1
 8008ffe:	f43f addf 	beq.w	8008bc0 <_strtod_l+0x490>
 8009002:	4b23      	ldr	r3, [pc, #140]	; (8009090 <_strtod_l+0x960>)
 8009004:	403b      	ands	r3, r7
 8009006:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800900a:	f04f 0a00 	mov.w	sl, #0
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1a4      	bne.n	8008f5e <_strtod_l+0x82e>
 8009014:	e5de      	b.n	8008bd4 <_strtod_l+0x4a4>
 8009016:	f04f 33ff 	mov.w	r3, #4294967295
 800901a:	e7ea      	b.n	8008ff2 <_strtod_l+0x8c2>
 800901c:	4613      	mov	r3, r2
 800901e:	e7e8      	b.n	8008ff2 <_strtod_l+0x8c2>
 8009020:	ea53 030a 	orrs.w	r3, r3, sl
 8009024:	d08c      	beq.n	8008f40 <_strtod_l+0x810>
 8009026:	9b08      	ldr	r3, [sp, #32]
 8009028:	b1db      	cbz	r3, 8009062 <_strtod_l+0x932>
 800902a:	423b      	tst	r3, r7
 800902c:	d0ef      	beq.n	800900e <_strtod_l+0x8de>
 800902e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009030:	9a04      	ldr	r2, [sp, #16]
 8009032:	4650      	mov	r0, sl
 8009034:	4659      	mov	r1, fp
 8009036:	b1c3      	cbz	r3, 800906a <_strtod_l+0x93a>
 8009038:	f7ff fb5c 	bl	80086f4 <sulp>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	ec51 0b18 	vmov	r0, r1, d8
 8009044:	f7f7 f8fa 	bl	800023c <__adddf3>
 8009048:	4682      	mov	sl, r0
 800904a:	468b      	mov	fp, r1
 800904c:	e7df      	b.n	800900e <_strtod_l+0x8de>
 800904e:	4013      	ands	r3, r2
 8009050:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009054:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009058:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800905c:	f04f 3aff 	mov.w	sl, #4294967295
 8009060:	e7d5      	b.n	800900e <_strtod_l+0x8de>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	ea13 0f0a 	tst.w	r3, sl
 8009068:	e7e0      	b.n	800902c <_strtod_l+0x8fc>
 800906a:	f7ff fb43 	bl	80086f4 <sulp>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	ec51 0b18 	vmov	r0, r1, d8
 8009076:	f7f7 f8df 	bl	8000238 <__aeabi_dsub>
 800907a:	2200      	movs	r2, #0
 800907c:	2300      	movs	r3, #0
 800907e:	4682      	mov	sl, r0
 8009080:	468b      	mov	fp, r1
 8009082:	f7f7 fcf9 	bl	8000a78 <__aeabi_dcmpeq>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0c1      	beq.n	800900e <_strtod_l+0x8de>
 800908a:	e611      	b.n	8008cb0 <_strtod_l+0x580>
 800908c:	fffffc02 	.word	0xfffffc02
 8009090:	7ff00000 	.word	0x7ff00000
 8009094:	39500000 	.word	0x39500000
 8009098:	000fffff 	.word	0x000fffff
 800909c:	7fefffff 	.word	0x7fefffff
 80090a0:	0800c610 	.word	0x0800c610
 80090a4:	4631      	mov	r1, r6
 80090a6:	4628      	mov	r0, r5
 80090a8:	f002 fb02 	bl	800b6b0 <__ratio>
 80090ac:	ec59 8b10 	vmov	r8, r9, d0
 80090b0:	ee10 0a10 	vmov	r0, s0
 80090b4:	2200      	movs	r2, #0
 80090b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090ba:	4649      	mov	r1, r9
 80090bc:	f7f7 fcf0 	bl	8000aa0 <__aeabi_dcmple>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d07a      	beq.n	80091ba <_strtod_l+0xa8a>
 80090c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d04a      	beq.n	8009160 <_strtod_l+0xa30>
 80090ca:	4b95      	ldr	r3, [pc, #596]	; (8009320 <_strtod_l+0xbf0>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009320 <_strtod_l+0xbf0>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	4b92      	ldr	r3, [pc, #584]	; (8009324 <_strtod_l+0xbf4>)
 80090dc:	403b      	ands	r3, r7
 80090de:	930d      	str	r3, [sp, #52]	; 0x34
 80090e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090e2:	4b91      	ldr	r3, [pc, #580]	; (8009328 <_strtod_l+0xbf8>)
 80090e4:	429a      	cmp	r2, r3
 80090e6:	f040 80b0 	bne.w	800924a <_strtod_l+0xb1a>
 80090ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80090f2:	ec4b ab10 	vmov	d0, sl, fp
 80090f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090fa:	f002 fa01 	bl	800b500 <__ulp>
 80090fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009102:	ec53 2b10 	vmov	r2, r3, d0
 8009106:	f7f7 fa4f 	bl	80005a8 <__aeabi_dmul>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	f7f7 f895 	bl	800023c <__adddf3>
 8009112:	460b      	mov	r3, r1
 8009114:	4983      	ldr	r1, [pc, #524]	; (8009324 <_strtod_l+0xbf4>)
 8009116:	4a85      	ldr	r2, [pc, #532]	; (800932c <_strtod_l+0xbfc>)
 8009118:	4019      	ands	r1, r3
 800911a:	4291      	cmp	r1, r2
 800911c:	4682      	mov	sl, r0
 800911e:	d960      	bls.n	80091e2 <_strtod_l+0xab2>
 8009120:	ee18 3a90 	vmov	r3, s17
 8009124:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009128:	4293      	cmp	r3, r2
 800912a:	d104      	bne.n	8009136 <_strtod_l+0xa06>
 800912c:	ee18 3a10 	vmov	r3, s16
 8009130:	3301      	adds	r3, #1
 8009132:	f43f ad45 	beq.w	8008bc0 <_strtod_l+0x490>
 8009136:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009338 <_strtod_l+0xc08>
 800913a:	f04f 3aff 	mov.w	sl, #4294967295
 800913e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009140:	4620      	mov	r0, r4
 8009142:	f001 feab 	bl	800ae9c <_Bfree>
 8009146:	9905      	ldr	r1, [sp, #20]
 8009148:	4620      	mov	r0, r4
 800914a:	f001 fea7 	bl	800ae9c <_Bfree>
 800914e:	4631      	mov	r1, r6
 8009150:	4620      	mov	r0, r4
 8009152:	f001 fea3 	bl	800ae9c <_Bfree>
 8009156:	4629      	mov	r1, r5
 8009158:	4620      	mov	r0, r4
 800915a:	f001 fe9f 	bl	800ae9c <_Bfree>
 800915e:	e61a      	b.n	8008d96 <_strtod_l+0x666>
 8009160:	f1ba 0f00 	cmp.w	sl, #0
 8009164:	d11b      	bne.n	800919e <_strtod_l+0xa6e>
 8009166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800916a:	b9f3      	cbnz	r3, 80091aa <_strtod_l+0xa7a>
 800916c:	4b6c      	ldr	r3, [pc, #432]	; (8009320 <_strtod_l+0xbf0>)
 800916e:	2200      	movs	r2, #0
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fc8a 	bl	8000a8c <__aeabi_dcmplt>
 8009178:	b9d0      	cbnz	r0, 80091b0 <_strtod_l+0xa80>
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	4b6c      	ldr	r3, [pc, #432]	; (8009330 <_strtod_l+0xc00>)
 8009180:	2200      	movs	r2, #0
 8009182:	f7f7 fa11 	bl	80005a8 <__aeabi_dmul>
 8009186:	4680      	mov	r8, r0
 8009188:	4689      	mov	r9, r1
 800918a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800918e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009192:	9315      	str	r3, [sp, #84]	; 0x54
 8009194:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009198:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800919c:	e79d      	b.n	80090da <_strtod_l+0x9aa>
 800919e:	f1ba 0f01 	cmp.w	sl, #1
 80091a2:	d102      	bne.n	80091aa <_strtod_l+0xa7a>
 80091a4:	2f00      	cmp	r7, #0
 80091a6:	f43f ad83 	beq.w	8008cb0 <_strtod_l+0x580>
 80091aa:	4b62      	ldr	r3, [pc, #392]	; (8009334 <_strtod_l+0xc04>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	e78e      	b.n	80090ce <_strtod_l+0x99e>
 80091b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009330 <_strtod_l+0xc00>
 80091b4:	f04f 0800 	mov.w	r8, #0
 80091b8:	e7e7      	b.n	800918a <_strtod_l+0xa5a>
 80091ba:	4b5d      	ldr	r3, [pc, #372]	; (8009330 <_strtod_l+0xc00>)
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 f9f1 	bl	80005a8 <__aeabi_dmul>
 80091c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c8:	4680      	mov	r8, r0
 80091ca:	4689      	mov	r9, r1
 80091cc:	b933      	cbnz	r3, 80091dc <_strtod_l+0xaac>
 80091ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091d2:	900e      	str	r0, [sp, #56]	; 0x38
 80091d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80091d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091da:	e7dd      	b.n	8009198 <_strtod_l+0xa68>
 80091dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80091e0:	e7f9      	b.n	80091d6 <_strtod_l+0xaa6>
 80091e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1a8      	bne.n	800913e <_strtod_l+0xa0e>
 80091ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f2:	0d1b      	lsrs	r3, r3, #20
 80091f4:	051b      	lsls	r3, r3, #20
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d1a1      	bne.n	800913e <_strtod_l+0xa0e>
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7f7 fd33 	bl	8000c68 <__aeabi_d2lz>
 8009202:	f7f7 f9a3 	bl	800054c <__aeabi_l2d>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4640      	mov	r0, r8
 800920c:	4649      	mov	r1, r9
 800920e:	f7f7 f813 	bl	8000238 <__aeabi_dsub>
 8009212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009218:	ea43 030a 	orr.w	r3, r3, sl
 800921c:	4313      	orrs	r3, r2
 800921e:	4680      	mov	r8, r0
 8009220:	4689      	mov	r9, r1
 8009222:	d055      	beq.n	80092d0 <_strtod_l+0xba0>
 8009224:	a336      	add	r3, pc, #216	; (adr r3, 8009300 <_strtod_l+0xbd0>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 fc2f 	bl	8000a8c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f47f acd0 	bne.w	8008bd4 <_strtod_l+0x4a4>
 8009234:	a334      	add	r3, pc, #208	; (adr r3, 8009308 <_strtod_l+0xbd8>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	4640      	mov	r0, r8
 800923c:	4649      	mov	r1, r9
 800923e:	f7f7 fc43 	bl	8000ac8 <__aeabi_dcmpgt>
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f af7b 	beq.w	800913e <_strtod_l+0xa0e>
 8009248:	e4c4      	b.n	8008bd4 <_strtod_l+0x4a4>
 800924a:	9b04      	ldr	r3, [sp, #16]
 800924c:	b333      	cbz	r3, 800929c <_strtod_l+0xb6c>
 800924e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009250:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009254:	d822      	bhi.n	800929c <_strtod_l+0xb6c>
 8009256:	a32e      	add	r3, pc, #184	; (adr r3, 8009310 <_strtod_l+0xbe0>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fc1e 	bl	8000aa0 <__aeabi_dcmple>
 8009264:	b1a0      	cbz	r0, 8009290 <_strtod_l+0xb60>
 8009266:	4649      	mov	r1, r9
 8009268:	4640      	mov	r0, r8
 800926a:	f7f7 fc75 	bl	8000b58 <__aeabi_d2uiz>
 800926e:	2801      	cmp	r0, #1
 8009270:	bf38      	it	cc
 8009272:	2001      	movcc	r0, #1
 8009274:	f7f7 f91e 	bl	80004b4 <__aeabi_ui2d>
 8009278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927a:	4680      	mov	r8, r0
 800927c:	4689      	mov	r9, r1
 800927e:	bb23      	cbnz	r3, 80092ca <_strtod_l+0xb9a>
 8009280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009284:	9010      	str	r0, [sp, #64]	; 0x40
 8009286:	9311      	str	r3, [sp, #68]	; 0x44
 8009288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800928c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009294:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	9309      	str	r3, [sp, #36]	; 0x24
 800929c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092a0:	eeb0 0a48 	vmov.f32	s0, s16
 80092a4:	eef0 0a68 	vmov.f32	s1, s17
 80092a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092ac:	f002 f928 	bl	800b500 <__ulp>
 80092b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092b4:	ec53 2b10 	vmov	r2, r3, d0
 80092b8:	f7f7 f976 	bl	80005a8 <__aeabi_dmul>
 80092bc:	ec53 2b18 	vmov	r2, r3, d8
 80092c0:	f7f6 ffbc 	bl	800023c <__adddf3>
 80092c4:	4682      	mov	sl, r0
 80092c6:	468b      	mov	fp, r1
 80092c8:	e78d      	b.n	80091e6 <_strtod_l+0xab6>
 80092ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80092ce:	e7db      	b.n	8009288 <_strtod_l+0xb58>
 80092d0:	a311      	add	r3, pc, #68	; (adr r3, 8009318 <_strtod_l+0xbe8>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f7 fbd9 	bl	8000a8c <__aeabi_dcmplt>
 80092da:	e7b2      	b.n	8009242 <_strtod_l+0xb12>
 80092dc:	2300      	movs	r3, #0
 80092de:	930a      	str	r3, [sp, #40]	; 0x28
 80092e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	f7ff ba6b 	b.w	80087c0 <_strtod_l+0x90>
 80092ea:	2a65      	cmp	r2, #101	; 0x65
 80092ec:	f43f ab5f 	beq.w	80089ae <_strtod_l+0x27e>
 80092f0:	2a45      	cmp	r2, #69	; 0x45
 80092f2:	f43f ab5c 	beq.w	80089ae <_strtod_l+0x27e>
 80092f6:	2301      	movs	r3, #1
 80092f8:	f7ff bb94 	b.w	8008a24 <_strtod_l+0x2f4>
 80092fc:	f3af 8000 	nop.w
 8009300:	94a03595 	.word	0x94a03595
 8009304:	3fdfffff 	.word	0x3fdfffff
 8009308:	35afe535 	.word	0x35afe535
 800930c:	3fe00000 	.word	0x3fe00000
 8009310:	ffc00000 	.word	0xffc00000
 8009314:	41dfffff 	.word	0x41dfffff
 8009318:	94a03595 	.word	0x94a03595
 800931c:	3fcfffff 	.word	0x3fcfffff
 8009320:	3ff00000 	.word	0x3ff00000
 8009324:	7ff00000 	.word	0x7ff00000
 8009328:	7fe00000 	.word	0x7fe00000
 800932c:	7c9fffff 	.word	0x7c9fffff
 8009330:	3fe00000 	.word	0x3fe00000
 8009334:	bff00000 	.word	0xbff00000
 8009338:	7fefffff 	.word	0x7fefffff

0800933c <_strtod_r>:
 800933c:	4b01      	ldr	r3, [pc, #4]	; (8009344 <_strtod_r+0x8>)
 800933e:	f7ff b9f7 	b.w	8008730 <_strtod_l>
 8009342:	bf00      	nop
 8009344:	20000084 	.word	0x20000084

08009348 <_strtol_l.constprop.0>:
 8009348:	2b01      	cmp	r3, #1
 800934a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934e:	d001      	beq.n	8009354 <_strtol_l.constprop.0+0xc>
 8009350:	2b24      	cmp	r3, #36	; 0x24
 8009352:	d906      	bls.n	8009362 <_strtol_l.constprop.0+0x1a>
 8009354:	f7fe fa60 	bl	8007818 <__errno>
 8009358:	2316      	movs	r3, #22
 800935a:	6003      	str	r3, [r0, #0]
 800935c:	2000      	movs	r0, #0
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009362:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009448 <_strtol_l.constprop.0+0x100>
 8009366:	460d      	mov	r5, r1
 8009368:	462e      	mov	r6, r5
 800936a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800936e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009372:	f017 0708 	ands.w	r7, r7, #8
 8009376:	d1f7      	bne.n	8009368 <_strtol_l.constprop.0+0x20>
 8009378:	2c2d      	cmp	r4, #45	; 0x2d
 800937a:	d132      	bne.n	80093e2 <_strtol_l.constprop.0+0x9a>
 800937c:	782c      	ldrb	r4, [r5, #0]
 800937e:	2701      	movs	r7, #1
 8009380:	1cb5      	adds	r5, r6, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d05b      	beq.n	800943e <_strtol_l.constprop.0+0xf6>
 8009386:	2b10      	cmp	r3, #16
 8009388:	d109      	bne.n	800939e <_strtol_l.constprop.0+0x56>
 800938a:	2c30      	cmp	r4, #48	; 0x30
 800938c:	d107      	bne.n	800939e <_strtol_l.constprop.0+0x56>
 800938e:	782c      	ldrb	r4, [r5, #0]
 8009390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009394:	2c58      	cmp	r4, #88	; 0x58
 8009396:	d14d      	bne.n	8009434 <_strtol_l.constprop.0+0xec>
 8009398:	786c      	ldrb	r4, [r5, #1]
 800939a:	2310      	movs	r3, #16
 800939c:	3502      	adds	r5, #2
 800939e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80093a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80093ae:	4666      	mov	r6, ip
 80093b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80093b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80093b8:	f1be 0f09 	cmp.w	lr, #9
 80093bc:	d816      	bhi.n	80093ec <_strtol_l.constprop.0+0xa4>
 80093be:	4674      	mov	r4, lr
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	dd24      	ble.n	800940e <_strtol_l.constprop.0+0xc6>
 80093c4:	f1bc 0f00 	cmp.w	ip, #0
 80093c8:	db1e      	blt.n	8009408 <_strtol_l.constprop.0+0xc0>
 80093ca:	45b1      	cmp	r9, r6
 80093cc:	d31c      	bcc.n	8009408 <_strtol_l.constprop.0+0xc0>
 80093ce:	d101      	bne.n	80093d4 <_strtol_l.constprop.0+0x8c>
 80093d0:	45a2      	cmp	sl, r4
 80093d2:	db19      	blt.n	8009408 <_strtol_l.constprop.0+0xc0>
 80093d4:	fb06 4603 	mla	r6, r6, r3, r4
 80093d8:	f04f 0c01 	mov.w	ip, #1
 80093dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093e0:	e7e8      	b.n	80093b4 <_strtol_l.constprop.0+0x6c>
 80093e2:	2c2b      	cmp	r4, #43	; 0x2b
 80093e4:	bf04      	itt	eq
 80093e6:	782c      	ldrbeq	r4, [r5, #0]
 80093e8:	1cb5      	addeq	r5, r6, #2
 80093ea:	e7ca      	b.n	8009382 <_strtol_l.constprop.0+0x3a>
 80093ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80093f0:	f1be 0f19 	cmp.w	lr, #25
 80093f4:	d801      	bhi.n	80093fa <_strtol_l.constprop.0+0xb2>
 80093f6:	3c37      	subs	r4, #55	; 0x37
 80093f8:	e7e2      	b.n	80093c0 <_strtol_l.constprop.0+0x78>
 80093fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80093fe:	f1be 0f19 	cmp.w	lr, #25
 8009402:	d804      	bhi.n	800940e <_strtol_l.constprop.0+0xc6>
 8009404:	3c57      	subs	r4, #87	; 0x57
 8009406:	e7db      	b.n	80093c0 <_strtol_l.constprop.0+0x78>
 8009408:	f04f 3cff 	mov.w	ip, #4294967295
 800940c:	e7e6      	b.n	80093dc <_strtol_l.constprop.0+0x94>
 800940e:	f1bc 0f00 	cmp.w	ip, #0
 8009412:	da05      	bge.n	8009420 <_strtol_l.constprop.0+0xd8>
 8009414:	2322      	movs	r3, #34	; 0x22
 8009416:	6003      	str	r3, [r0, #0]
 8009418:	4646      	mov	r6, r8
 800941a:	b942      	cbnz	r2, 800942e <_strtol_l.constprop.0+0xe6>
 800941c:	4630      	mov	r0, r6
 800941e:	e79e      	b.n	800935e <_strtol_l.constprop.0+0x16>
 8009420:	b107      	cbz	r7, 8009424 <_strtol_l.constprop.0+0xdc>
 8009422:	4276      	negs	r6, r6
 8009424:	2a00      	cmp	r2, #0
 8009426:	d0f9      	beq.n	800941c <_strtol_l.constprop.0+0xd4>
 8009428:	f1bc 0f00 	cmp.w	ip, #0
 800942c:	d000      	beq.n	8009430 <_strtol_l.constprop.0+0xe8>
 800942e:	1e69      	subs	r1, r5, #1
 8009430:	6011      	str	r1, [r2, #0]
 8009432:	e7f3      	b.n	800941c <_strtol_l.constprop.0+0xd4>
 8009434:	2430      	movs	r4, #48	; 0x30
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1b1      	bne.n	800939e <_strtol_l.constprop.0+0x56>
 800943a:	2308      	movs	r3, #8
 800943c:	e7af      	b.n	800939e <_strtol_l.constprop.0+0x56>
 800943e:	2c30      	cmp	r4, #48	; 0x30
 8009440:	d0a5      	beq.n	800938e <_strtol_l.constprop.0+0x46>
 8009442:	230a      	movs	r3, #10
 8009444:	e7ab      	b.n	800939e <_strtol_l.constprop.0+0x56>
 8009446:	bf00      	nop
 8009448:	0800c639 	.word	0x0800c639

0800944c <_strtol_r>:
 800944c:	f7ff bf7c 	b.w	8009348 <_strtol_l.constprop.0>

08009450 <__swbuf_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	460e      	mov	r6, r1
 8009454:	4614      	mov	r4, r2
 8009456:	4605      	mov	r5, r0
 8009458:	b118      	cbz	r0, 8009462 <__swbuf_r+0x12>
 800945a:	6983      	ldr	r3, [r0, #24]
 800945c:	b90b      	cbnz	r3, 8009462 <__swbuf_r+0x12>
 800945e:	f001 f84b 	bl	800a4f8 <__sinit>
 8009462:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <__swbuf_r+0x98>)
 8009464:	429c      	cmp	r4, r3
 8009466:	d12b      	bne.n	80094c0 <__swbuf_r+0x70>
 8009468:	686c      	ldr	r4, [r5, #4]
 800946a:	69a3      	ldr	r3, [r4, #24]
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	071a      	lsls	r2, r3, #28
 8009472:	d52f      	bpl.n	80094d4 <__swbuf_r+0x84>
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	b36b      	cbz	r3, 80094d4 <__swbuf_r+0x84>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	6820      	ldr	r0, [r4, #0]
 800947c:	1ac0      	subs	r0, r0, r3
 800947e:	6963      	ldr	r3, [r4, #20]
 8009480:	b2f6      	uxtb	r6, r6
 8009482:	4283      	cmp	r3, r0
 8009484:	4637      	mov	r7, r6
 8009486:	dc04      	bgt.n	8009492 <__swbuf_r+0x42>
 8009488:	4621      	mov	r1, r4
 800948a:	4628      	mov	r0, r5
 800948c:	f000 ffa0 	bl	800a3d0 <_fflush_r>
 8009490:	bb30      	cbnz	r0, 80094e0 <__swbuf_r+0x90>
 8009492:	68a3      	ldr	r3, [r4, #8]
 8009494:	3b01      	subs	r3, #1
 8009496:	60a3      	str	r3, [r4, #8]
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	701e      	strb	r6, [r3, #0]
 80094a0:	6963      	ldr	r3, [r4, #20]
 80094a2:	3001      	adds	r0, #1
 80094a4:	4283      	cmp	r3, r0
 80094a6:	d004      	beq.n	80094b2 <__swbuf_r+0x62>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	07db      	lsls	r3, r3, #31
 80094ac:	d506      	bpl.n	80094bc <__swbuf_r+0x6c>
 80094ae:	2e0a      	cmp	r6, #10
 80094b0:	d104      	bne.n	80094bc <__swbuf_r+0x6c>
 80094b2:	4621      	mov	r1, r4
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 ff8b 	bl	800a3d0 <_fflush_r>
 80094ba:	b988      	cbnz	r0, 80094e0 <__swbuf_r+0x90>
 80094bc:	4638      	mov	r0, r7
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c0:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <__swbuf_r+0x9c>)
 80094c2:	429c      	cmp	r4, r3
 80094c4:	d101      	bne.n	80094ca <__swbuf_r+0x7a>
 80094c6:	68ac      	ldr	r4, [r5, #8]
 80094c8:	e7cf      	b.n	800946a <__swbuf_r+0x1a>
 80094ca:	4b09      	ldr	r3, [pc, #36]	; (80094f0 <__swbuf_r+0xa0>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	bf08      	it	eq
 80094d0:	68ec      	ldreq	r4, [r5, #12]
 80094d2:	e7ca      	b.n	800946a <__swbuf_r+0x1a>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 f80c 	bl	80094f4 <__swsetup_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d0cb      	beq.n	8009478 <__swbuf_r+0x28>
 80094e0:	f04f 37ff 	mov.w	r7, #4294967295
 80094e4:	e7ea      	b.n	80094bc <__swbuf_r+0x6c>
 80094e6:	bf00      	nop
 80094e8:	0800c7ec 	.word	0x0800c7ec
 80094ec:	0800c80c 	.word	0x0800c80c
 80094f0:	0800c7cc 	.word	0x0800c7cc

080094f4 <__swsetup_r>:
 80094f4:	4b32      	ldr	r3, [pc, #200]	; (80095c0 <__swsetup_r+0xcc>)
 80094f6:	b570      	push	{r4, r5, r6, lr}
 80094f8:	681d      	ldr	r5, [r3, #0]
 80094fa:	4606      	mov	r6, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	b125      	cbz	r5, 800950a <__swsetup_r+0x16>
 8009500:	69ab      	ldr	r3, [r5, #24]
 8009502:	b913      	cbnz	r3, 800950a <__swsetup_r+0x16>
 8009504:	4628      	mov	r0, r5
 8009506:	f000 fff7 	bl	800a4f8 <__sinit>
 800950a:	4b2e      	ldr	r3, [pc, #184]	; (80095c4 <__swsetup_r+0xd0>)
 800950c:	429c      	cmp	r4, r3
 800950e:	d10f      	bne.n	8009530 <__swsetup_r+0x3c>
 8009510:	686c      	ldr	r4, [r5, #4]
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009518:	0719      	lsls	r1, r3, #28
 800951a:	d42c      	bmi.n	8009576 <__swsetup_r+0x82>
 800951c:	06dd      	lsls	r5, r3, #27
 800951e:	d411      	bmi.n	8009544 <__swsetup_r+0x50>
 8009520:	2309      	movs	r3, #9
 8009522:	6033      	str	r3, [r6, #0]
 8009524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	f04f 30ff 	mov.w	r0, #4294967295
 800952e:	e03e      	b.n	80095ae <__swsetup_r+0xba>
 8009530:	4b25      	ldr	r3, [pc, #148]	; (80095c8 <__swsetup_r+0xd4>)
 8009532:	429c      	cmp	r4, r3
 8009534:	d101      	bne.n	800953a <__swsetup_r+0x46>
 8009536:	68ac      	ldr	r4, [r5, #8]
 8009538:	e7eb      	b.n	8009512 <__swsetup_r+0x1e>
 800953a:	4b24      	ldr	r3, [pc, #144]	; (80095cc <__swsetup_r+0xd8>)
 800953c:	429c      	cmp	r4, r3
 800953e:	bf08      	it	eq
 8009540:	68ec      	ldreq	r4, [r5, #12]
 8009542:	e7e6      	b.n	8009512 <__swsetup_r+0x1e>
 8009544:	0758      	lsls	r0, r3, #29
 8009546:	d512      	bpl.n	800956e <__swsetup_r+0x7a>
 8009548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800954a:	b141      	cbz	r1, 800955e <__swsetup_r+0x6a>
 800954c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009550:	4299      	cmp	r1, r3
 8009552:	d002      	beq.n	800955a <__swsetup_r+0x66>
 8009554:	4630      	mov	r0, r6
 8009556:	f002 f939 	bl	800b7cc <_free_r>
 800955a:	2300      	movs	r3, #0
 800955c:	6363      	str	r3, [r4, #52]	; 0x34
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	2300      	movs	r3, #0
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	6923      	ldr	r3, [r4, #16]
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f043 0308 	orr.w	r3, r3, #8
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	b94b      	cbnz	r3, 800958e <__swsetup_r+0x9a>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009584:	d003      	beq.n	800958e <__swsetup_r+0x9a>
 8009586:	4621      	mov	r1, r4
 8009588:	4630      	mov	r0, r6
 800958a:	f001 fbed 	bl	800ad68 <__smakebuf_r>
 800958e:	89a0      	ldrh	r0, [r4, #12]
 8009590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009594:	f010 0301 	ands.w	r3, r0, #1
 8009598:	d00a      	beq.n	80095b0 <__swsetup_r+0xbc>
 800959a:	2300      	movs	r3, #0
 800959c:	60a3      	str	r3, [r4, #8]
 800959e:	6963      	ldr	r3, [r4, #20]
 80095a0:	425b      	negs	r3, r3
 80095a2:	61a3      	str	r3, [r4, #24]
 80095a4:	6923      	ldr	r3, [r4, #16]
 80095a6:	b943      	cbnz	r3, 80095ba <__swsetup_r+0xc6>
 80095a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ac:	d1ba      	bne.n	8009524 <__swsetup_r+0x30>
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	0781      	lsls	r1, r0, #30
 80095b2:	bf58      	it	pl
 80095b4:	6963      	ldrpl	r3, [r4, #20]
 80095b6:	60a3      	str	r3, [r4, #8]
 80095b8:	e7f4      	b.n	80095a4 <__swsetup_r+0xb0>
 80095ba:	2000      	movs	r0, #0
 80095bc:	e7f7      	b.n	80095ae <__swsetup_r+0xba>
 80095be:	bf00      	nop
 80095c0:	2000001c 	.word	0x2000001c
 80095c4:	0800c7ec 	.word	0x0800c7ec
 80095c8:	0800c80c 	.word	0x0800c80c
 80095cc:	0800c7cc 	.word	0x0800c7cc

080095d0 <quorem>:
 80095d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	6903      	ldr	r3, [r0, #16]
 80095d6:	690c      	ldr	r4, [r1, #16]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	4607      	mov	r7, r0
 80095dc:	f2c0 8081 	blt.w	80096e2 <quorem+0x112>
 80095e0:	3c01      	subs	r4, #1
 80095e2:	f101 0814 	add.w	r8, r1, #20
 80095e6:	f100 0514 	add.w	r5, r0, #20
 80095ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095f8:	3301      	adds	r3, #1
 80095fa:	429a      	cmp	r2, r3
 80095fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009604:	fbb2 f6f3 	udiv	r6, r2, r3
 8009608:	d331      	bcc.n	800966e <quorem+0x9e>
 800960a:	f04f 0e00 	mov.w	lr, #0
 800960e:	4640      	mov	r0, r8
 8009610:	46ac      	mov	ip, r5
 8009612:	46f2      	mov	sl, lr
 8009614:	f850 2b04 	ldr.w	r2, [r0], #4
 8009618:	b293      	uxth	r3, r2
 800961a:	fb06 e303 	mla	r3, r6, r3, lr
 800961e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009622:	b29b      	uxth	r3, r3
 8009624:	ebaa 0303 	sub.w	r3, sl, r3
 8009628:	f8dc a000 	ldr.w	sl, [ip]
 800962c:	0c12      	lsrs	r2, r2, #16
 800962e:	fa13 f38a 	uxtah	r3, r3, sl
 8009632:	fb06 e202 	mla	r2, r6, r2, lr
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800963e:	b292      	uxth	r2, r2
 8009640:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009648:	f8bd 3000 	ldrh.w	r3, [sp]
 800964c:	4581      	cmp	r9, r0
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	f84c 3b04 	str.w	r3, [ip], #4
 8009656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800965a:	d2db      	bcs.n	8009614 <quorem+0x44>
 800965c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009660:	b92b      	cbnz	r3, 800966e <quorem+0x9e>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	3b04      	subs	r3, #4
 8009666:	429d      	cmp	r5, r3
 8009668:	461a      	mov	r2, r3
 800966a:	d32e      	bcc.n	80096ca <quorem+0xfa>
 800966c:	613c      	str	r4, [r7, #16]
 800966e:	4638      	mov	r0, r7
 8009670:	f001 fea0 	bl	800b3b4 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	db24      	blt.n	80096c2 <quorem+0xf2>
 8009678:	3601      	adds	r6, #1
 800967a:	4628      	mov	r0, r5
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	f858 2b04 	ldr.w	r2, [r8], #4
 8009684:	f8d0 e000 	ldr.w	lr, [r0]
 8009688:	b293      	uxth	r3, r2
 800968a:	ebac 0303 	sub.w	r3, ip, r3
 800968e:	0c12      	lsrs	r2, r2, #16
 8009690:	fa13 f38e 	uxtah	r3, r3, lr
 8009694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969c:	b29b      	uxth	r3, r3
 800969e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a2:	45c1      	cmp	r9, r8
 80096a4:	f840 3b04 	str.w	r3, [r0], #4
 80096a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096ac:	d2e8      	bcs.n	8009680 <quorem+0xb0>
 80096ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	b922      	cbnz	r2, 80096c2 <quorem+0xf2>
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d30a      	bcc.n	80096d6 <quorem+0x106>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	4630      	mov	r0, r6
 80096c4:	b003      	add	sp, #12
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d1cc      	bne.n	800966c <quorem+0x9c>
 80096d2:	3c01      	subs	r4, #1
 80096d4:	e7c7      	b.n	8009666 <quorem+0x96>
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	3b04      	subs	r3, #4
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1f0      	bne.n	80096c0 <quorem+0xf0>
 80096de:	3c01      	subs	r4, #1
 80096e0:	e7eb      	b.n	80096ba <quorem+0xea>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e7ee      	b.n	80096c4 <quorem+0xf4>
	...

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ed2d 8b04 	vpush	{d8-d9}
 80096f0:	ec57 6b10 	vmov	r6, r7, d0
 80096f4:	b093      	sub	sp, #76	; 0x4c
 80096f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80096fc:	9106      	str	r1, [sp, #24]
 80096fe:	ee10 aa10 	vmov	sl, s0
 8009702:	4604      	mov	r4, r0
 8009704:	9209      	str	r2, [sp, #36]	; 0x24
 8009706:	930c      	str	r3, [sp, #48]	; 0x30
 8009708:	46bb      	mov	fp, r7
 800970a:	b975      	cbnz	r5, 800972a <_dtoa_r+0x42>
 800970c:	2010      	movs	r0, #16
 800970e:	f001 fb6b 	bl	800ade8 <malloc>
 8009712:	4602      	mov	r2, r0
 8009714:	6260      	str	r0, [r4, #36]	; 0x24
 8009716:	b920      	cbnz	r0, 8009722 <_dtoa_r+0x3a>
 8009718:	4ba7      	ldr	r3, [pc, #668]	; (80099b8 <_dtoa_r+0x2d0>)
 800971a:	21ea      	movs	r1, #234	; 0xea
 800971c:	48a7      	ldr	r0, [pc, #668]	; (80099bc <_dtoa_r+0x2d4>)
 800971e:	f002 fc79 	bl	800c014 <__assert_func>
 8009722:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009726:	6005      	str	r5, [r0, #0]
 8009728:	60c5      	str	r5, [r0, #12]
 800972a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972c:	6819      	ldr	r1, [r3, #0]
 800972e:	b151      	cbz	r1, 8009746 <_dtoa_r+0x5e>
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	604a      	str	r2, [r1, #4]
 8009734:	2301      	movs	r3, #1
 8009736:	4093      	lsls	r3, r2
 8009738:	608b      	str	r3, [r1, #8]
 800973a:	4620      	mov	r0, r4
 800973c:	f001 fbae 	bl	800ae9c <_Bfree>
 8009740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	1e3b      	subs	r3, r7, #0
 8009748:	bfaa      	itet	ge
 800974a:	2300      	movge	r3, #0
 800974c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009750:	f8c8 3000 	strge.w	r3, [r8]
 8009754:	4b9a      	ldr	r3, [pc, #616]	; (80099c0 <_dtoa_r+0x2d8>)
 8009756:	bfbc      	itt	lt
 8009758:	2201      	movlt	r2, #1
 800975a:	f8c8 2000 	strlt.w	r2, [r8]
 800975e:	ea33 030b 	bics.w	r3, r3, fp
 8009762:	d11b      	bne.n	800979c <_dtoa_r+0xb4>
 8009764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009766:	f242 730f 	movw	r3, #9999	; 0x270f
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009770:	4333      	orrs	r3, r6
 8009772:	f000 8592 	beq.w	800a29a <_dtoa_r+0xbb2>
 8009776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009778:	b963      	cbnz	r3, 8009794 <_dtoa_r+0xac>
 800977a:	4b92      	ldr	r3, [pc, #584]	; (80099c4 <_dtoa_r+0x2dc>)
 800977c:	e022      	b.n	80097c4 <_dtoa_r+0xdc>
 800977e:	4b92      	ldr	r3, [pc, #584]	; (80099c8 <_dtoa_r+0x2e0>)
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	3308      	adds	r3, #8
 8009784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	9801      	ldr	r0, [sp, #4]
 800978a:	b013      	add	sp, #76	; 0x4c
 800978c:	ecbd 8b04 	vpop	{d8-d9}
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	4b8b      	ldr	r3, [pc, #556]	; (80099c4 <_dtoa_r+0x2dc>)
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	3303      	adds	r3, #3
 800979a:	e7f3      	b.n	8009784 <_dtoa_r+0x9c>
 800979c:	2200      	movs	r2, #0
 800979e:	2300      	movs	r3, #0
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	f7f7 f968 	bl	8000a78 <__aeabi_dcmpeq>
 80097a8:	ec4b ab19 	vmov	d9, sl, fp
 80097ac:	4680      	mov	r8, r0
 80097ae:	b158      	cbz	r0, 80097c8 <_dtoa_r+0xe0>
 80097b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b2:	2301      	movs	r3, #1
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 856b 	beq.w	800a294 <_dtoa_r+0xbac>
 80097be:	4883      	ldr	r0, [pc, #524]	; (80099cc <_dtoa_r+0x2e4>)
 80097c0:	6018      	str	r0, [r3, #0]
 80097c2:	1e43      	subs	r3, r0, #1
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	e7df      	b.n	8009788 <_dtoa_r+0xa0>
 80097c8:	ec4b ab10 	vmov	d0, sl, fp
 80097cc:	aa10      	add	r2, sp, #64	; 0x40
 80097ce:	a911      	add	r1, sp, #68	; 0x44
 80097d0:	4620      	mov	r0, r4
 80097d2:	f001 ff11 	bl	800b5f8 <__d2b>
 80097d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80097da:	ee08 0a10 	vmov	s16, r0
 80097de:	2d00      	cmp	r5, #0
 80097e0:	f000 8084 	beq.w	80098ec <_dtoa_r+0x204>
 80097e4:	ee19 3a90 	vmov	r3, s19
 80097e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80097f0:	4656      	mov	r6, sl
 80097f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80097f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80097fe:	4b74      	ldr	r3, [pc, #464]	; (80099d0 <_dtoa_r+0x2e8>)
 8009800:	2200      	movs	r2, #0
 8009802:	4630      	mov	r0, r6
 8009804:	4639      	mov	r1, r7
 8009806:	f7f6 fd17 	bl	8000238 <__aeabi_dsub>
 800980a:	a365      	add	r3, pc, #404	; (adr r3, 80099a0 <_dtoa_r+0x2b8>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f7f6 feca 	bl	80005a8 <__aeabi_dmul>
 8009814:	a364      	add	r3, pc, #400	; (adr r3, 80099a8 <_dtoa_r+0x2c0>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fd0f 	bl	800023c <__adddf3>
 800981e:	4606      	mov	r6, r0
 8009820:	4628      	mov	r0, r5
 8009822:	460f      	mov	r7, r1
 8009824:	f7f6 fe56 	bl	80004d4 <__aeabi_i2d>
 8009828:	a361      	add	r3, pc, #388	; (adr r3, 80099b0 <_dtoa_r+0x2c8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 febb 	bl	80005a8 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4630      	mov	r0, r6
 8009838:	4639      	mov	r1, r7
 800983a:	f7f6 fcff 	bl	800023c <__adddf3>
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	f7f7 f961 	bl	8000b08 <__aeabi_d2iz>
 8009846:	2200      	movs	r2, #0
 8009848:	9000      	str	r0, [sp, #0]
 800984a:	2300      	movs	r3, #0
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f7 f91c 	bl	8000a8c <__aeabi_dcmplt>
 8009854:	b150      	cbz	r0, 800986c <_dtoa_r+0x184>
 8009856:	9800      	ldr	r0, [sp, #0]
 8009858:	f7f6 fe3c 	bl	80004d4 <__aeabi_i2d>
 800985c:	4632      	mov	r2, r6
 800985e:	463b      	mov	r3, r7
 8009860:	f7f7 f90a 	bl	8000a78 <__aeabi_dcmpeq>
 8009864:	b910      	cbnz	r0, 800986c <_dtoa_r+0x184>
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	3b01      	subs	r3, #1
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	9b00      	ldr	r3, [sp, #0]
 800986e:	2b16      	cmp	r3, #22
 8009870:	d85a      	bhi.n	8009928 <_dtoa_r+0x240>
 8009872:	9a00      	ldr	r2, [sp, #0]
 8009874:	4b57      	ldr	r3, [pc, #348]	; (80099d4 <_dtoa_r+0x2ec>)
 8009876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	ec51 0b19 	vmov	r0, r1, d9
 8009882:	f7f7 f903 	bl	8000a8c <__aeabi_dcmplt>
 8009886:	2800      	cmp	r0, #0
 8009888:	d050      	beq.n	800992c <_dtoa_r+0x244>
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	3b01      	subs	r3, #1
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	2300      	movs	r3, #0
 8009892:	930b      	str	r3, [sp, #44]	; 0x2c
 8009894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009896:	1b5d      	subs	r5, r3, r5
 8009898:	1e6b      	subs	r3, r5, #1
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	bf45      	ittet	mi
 800989e:	f1c5 0301 	rsbmi	r3, r5, #1
 80098a2:	9304      	strmi	r3, [sp, #16]
 80098a4:	2300      	movpl	r3, #0
 80098a6:	2300      	movmi	r3, #0
 80098a8:	bf4c      	ite	mi
 80098aa:	9305      	strmi	r3, [sp, #20]
 80098ac:	9304      	strpl	r3, [sp, #16]
 80098ae:	9b00      	ldr	r3, [sp, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	db3d      	blt.n	8009930 <_dtoa_r+0x248>
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	9a00      	ldr	r2, [sp, #0]
 80098b8:	920a      	str	r2, [sp, #40]	; 0x28
 80098ba:	4413      	add	r3, r2
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	2300      	movs	r3, #0
 80098c0:	9307      	str	r3, [sp, #28]
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	2b09      	cmp	r3, #9
 80098c6:	f200 8089 	bhi.w	80099dc <_dtoa_r+0x2f4>
 80098ca:	2b05      	cmp	r3, #5
 80098cc:	bfc4      	itt	gt
 80098ce:	3b04      	subgt	r3, #4
 80098d0:	9306      	strgt	r3, [sp, #24]
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	f1a3 0302 	sub.w	r3, r3, #2
 80098d8:	bfcc      	ite	gt
 80098da:	2500      	movgt	r5, #0
 80098dc:	2501      	movle	r5, #1
 80098de:	2b03      	cmp	r3, #3
 80098e0:	f200 8087 	bhi.w	80099f2 <_dtoa_r+0x30a>
 80098e4:	e8df f003 	tbb	[pc, r3]
 80098e8:	59383a2d 	.word	0x59383a2d
 80098ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80098f0:	441d      	add	r5, r3
 80098f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	bfc1      	itttt	gt
 80098fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009902:	fa0b f303 	lslgt.w	r3, fp, r3
 8009906:	fa26 f000 	lsrgt.w	r0, r6, r0
 800990a:	bfda      	itte	le
 800990c:	f1c3 0320 	rsble	r3, r3, #32
 8009910:	fa06 f003 	lslle.w	r0, r6, r3
 8009914:	4318      	orrgt	r0, r3
 8009916:	f7f6 fdcd 	bl	80004b4 <__aeabi_ui2d>
 800991a:	2301      	movs	r3, #1
 800991c:	4606      	mov	r6, r0
 800991e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009922:	3d01      	subs	r5, #1
 8009924:	930e      	str	r3, [sp, #56]	; 0x38
 8009926:	e76a      	b.n	80097fe <_dtoa_r+0x116>
 8009928:	2301      	movs	r3, #1
 800992a:	e7b2      	b.n	8009892 <_dtoa_r+0x1aa>
 800992c:	900b      	str	r0, [sp, #44]	; 0x2c
 800992e:	e7b1      	b.n	8009894 <_dtoa_r+0x1ac>
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	9a00      	ldr	r2, [sp, #0]
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	4253      	negs	r3, r2
 800993a:	9307      	str	r3, [sp, #28]
 800993c:	2300      	movs	r3, #0
 800993e:	930a      	str	r3, [sp, #40]	; 0x28
 8009940:	e7bf      	b.n	80098c2 <_dtoa_r+0x1da>
 8009942:	2300      	movs	r3, #0
 8009944:	9308      	str	r3, [sp, #32]
 8009946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	dc55      	bgt.n	80099f8 <_dtoa_r+0x310>
 800994c:	2301      	movs	r3, #1
 800994e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009952:	461a      	mov	r2, r3
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	e00c      	b.n	8009972 <_dtoa_r+0x28a>
 8009958:	2301      	movs	r3, #1
 800995a:	e7f3      	b.n	8009944 <_dtoa_r+0x25c>
 800995c:	2300      	movs	r3, #0
 800995e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009960:	9308      	str	r3, [sp, #32]
 8009962:	9b00      	ldr	r3, [sp, #0]
 8009964:	4413      	add	r3, r2
 8009966:	9302      	str	r3, [sp, #8]
 8009968:	3301      	adds	r3, #1
 800996a:	2b01      	cmp	r3, #1
 800996c:	9303      	str	r3, [sp, #12]
 800996e:	bfb8      	it	lt
 8009970:	2301      	movlt	r3, #1
 8009972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009974:	2200      	movs	r2, #0
 8009976:	6042      	str	r2, [r0, #4]
 8009978:	2204      	movs	r2, #4
 800997a:	f102 0614 	add.w	r6, r2, #20
 800997e:	429e      	cmp	r6, r3
 8009980:	6841      	ldr	r1, [r0, #4]
 8009982:	d93d      	bls.n	8009a00 <_dtoa_r+0x318>
 8009984:	4620      	mov	r0, r4
 8009986:	f001 fa49 	bl	800ae1c <_Balloc>
 800998a:	9001      	str	r0, [sp, #4]
 800998c:	2800      	cmp	r0, #0
 800998e:	d13b      	bne.n	8009a08 <_dtoa_r+0x320>
 8009990:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <_dtoa_r+0x2f0>)
 8009992:	4602      	mov	r2, r0
 8009994:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009998:	e6c0      	b.n	800971c <_dtoa_r+0x34>
 800999a:	2301      	movs	r3, #1
 800999c:	e7df      	b.n	800995e <_dtoa_r+0x276>
 800999e:	bf00      	nop
 80099a0:	636f4361 	.word	0x636f4361
 80099a4:	3fd287a7 	.word	0x3fd287a7
 80099a8:	8b60c8b3 	.word	0x8b60c8b3
 80099ac:	3fc68a28 	.word	0x3fc68a28
 80099b0:	509f79fb 	.word	0x509f79fb
 80099b4:	3fd34413 	.word	0x3fd34413
 80099b8:	0800c746 	.word	0x0800c746
 80099bc:	0800c75d 	.word	0x0800c75d
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	0800c742 	.word	0x0800c742
 80099c8:	0800c739 	.word	0x0800c739
 80099cc:	0800c5b9 	.word	0x0800c5b9
 80099d0:	3ff80000 	.word	0x3ff80000
 80099d4:	0800c930 	.word	0x0800c930
 80099d8:	0800c7b8 	.word	0x0800c7b8
 80099dc:	2501      	movs	r5, #1
 80099de:	2300      	movs	r3, #0
 80099e0:	9306      	str	r3, [sp, #24]
 80099e2:	9508      	str	r5, [sp, #32]
 80099e4:	f04f 33ff 	mov.w	r3, #4294967295
 80099e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2312      	movs	r3, #18
 80099f0:	e7b0      	b.n	8009954 <_dtoa_r+0x26c>
 80099f2:	2301      	movs	r3, #1
 80099f4:	9308      	str	r3, [sp, #32]
 80099f6:	e7f5      	b.n	80099e4 <_dtoa_r+0x2fc>
 80099f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099fe:	e7b8      	b.n	8009972 <_dtoa_r+0x28a>
 8009a00:	3101      	adds	r1, #1
 8009a02:	6041      	str	r1, [r0, #4]
 8009a04:	0052      	lsls	r2, r2, #1
 8009a06:	e7b8      	b.n	800997a <_dtoa_r+0x292>
 8009a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a0a:	9a01      	ldr	r2, [sp, #4]
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	2b0e      	cmp	r3, #14
 8009a12:	f200 809d 	bhi.w	8009b50 <_dtoa_r+0x468>
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	f000 809a 	beq.w	8009b50 <_dtoa_r+0x468>
 8009a1c:	9b00      	ldr	r3, [sp, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd32      	ble.n	8009a88 <_dtoa_r+0x3a0>
 8009a22:	4ab7      	ldr	r2, [pc, #732]	; (8009d00 <_dtoa_r+0x618>)
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	05d8      	lsls	r0, r3, #23
 8009a34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a38:	d516      	bpl.n	8009a68 <_dtoa_r+0x380>
 8009a3a:	4bb2      	ldr	r3, [pc, #712]	; (8009d04 <_dtoa_r+0x61c>)
 8009a3c:	ec51 0b19 	vmov	r0, r1, d9
 8009a40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a44:	f7f6 feda 	bl	80007fc <__aeabi_ddiv>
 8009a48:	f007 070f 	and.w	r7, r7, #15
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	468b      	mov	fp, r1
 8009a50:	2503      	movs	r5, #3
 8009a52:	4eac      	ldr	r6, [pc, #688]	; (8009d04 <_dtoa_r+0x61c>)
 8009a54:	b957      	cbnz	r7, 8009a6c <_dtoa_r+0x384>
 8009a56:	4642      	mov	r2, r8
 8009a58:	464b      	mov	r3, r9
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	f7f6 fecd 	bl	80007fc <__aeabi_ddiv>
 8009a62:	4682      	mov	sl, r0
 8009a64:	468b      	mov	fp, r1
 8009a66:	e028      	b.n	8009aba <_dtoa_r+0x3d2>
 8009a68:	2502      	movs	r5, #2
 8009a6a:	e7f2      	b.n	8009a52 <_dtoa_r+0x36a>
 8009a6c:	07f9      	lsls	r1, r7, #31
 8009a6e:	d508      	bpl.n	8009a82 <_dtoa_r+0x39a>
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a78:	f7f6 fd96 	bl	80005a8 <__aeabi_dmul>
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4689      	mov	r9, r1
 8009a82:	107f      	asrs	r7, r7, #1
 8009a84:	3608      	adds	r6, #8
 8009a86:	e7e5      	b.n	8009a54 <_dtoa_r+0x36c>
 8009a88:	f000 809b 	beq.w	8009bc2 <_dtoa_r+0x4da>
 8009a8c:	9b00      	ldr	r3, [sp, #0]
 8009a8e:	4f9d      	ldr	r7, [pc, #628]	; (8009d04 <_dtoa_r+0x61c>)
 8009a90:	425e      	negs	r6, r3
 8009a92:	4b9b      	ldr	r3, [pc, #620]	; (8009d00 <_dtoa_r+0x618>)
 8009a94:	f006 020f 	and.w	r2, r6, #15
 8009a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	ec51 0b19 	vmov	r0, r1, d9
 8009aa4:	f7f6 fd80 	bl	80005a8 <__aeabi_dmul>
 8009aa8:	1136      	asrs	r6, r6, #4
 8009aaa:	4682      	mov	sl, r0
 8009aac:	468b      	mov	fp, r1
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2502      	movs	r5, #2
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	d17a      	bne.n	8009bac <_dtoa_r+0x4c4>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1d3      	bne.n	8009a62 <_dtoa_r+0x37a>
 8009aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8082 	beq.w	8009bc6 <_dtoa_r+0x4de>
 8009ac2:	4b91      	ldr	r3, [pc, #580]	; (8009d08 <_dtoa_r+0x620>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	4659      	mov	r1, fp
 8009aca:	f7f6 ffdf 	bl	8000a8c <__aeabi_dcmplt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d079      	beq.n	8009bc6 <_dtoa_r+0x4de>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d076      	beq.n	8009bc6 <_dtoa_r+0x4de>
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dd36      	ble.n	8009b4c <_dtoa_r+0x464>
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	1e5f      	subs	r7, r3, #1
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	4b88      	ldr	r3, [pc, #544]	; (8009d0c <_dtoa_r+0x624>)
 8009aea:	f7f6 fd5d 	bl	80005a8 <__aeabi_dmul>
 8009aee:	9e02      	ldr	r6, [sp, #8]
 8009af0:	4682      	mov	sl, r0
 8009af2:	468b      	mov	fp, r1
 8009af4:	3501      	adds	r5, #1
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7f6 fcec 	bl	80004d4 <__aeabi_i2d>
 8009afc:	4652      	mov	r2, sl
 8009afe:	465b      	mov	r3, fp
 8009b00:	f7f6 fd52 	bl	80005a8 <__aeabi_dmul>
 8009b04:	4b82      	ldr	r3, [pc, #520]	; (8009d10 <_dtoa_r+0x628>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	f7f6 fb98 	bl	800023c <__adddf3>
 8009b0c:	46d0      	mov	r8, sl
 8009b0e:	46d9      	mov	r9, fp
 8009b10:	4682      	mov	sl, r0
 8009b12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d158      	bne.n	8009bcc <_dtoa_r+0x4e4>
 8009b1a:	4b7e      	ldr	r3, [pc, #504]	; (8009d14 <_dtoa_r+0x62c>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4640      	mov	r0, r8
 8009b20:	4649      	mov	r1, r9
 8009b22:	f7f6 fb89 	bl	8000238 <__aeabi_dsub>
 8009b26:	4652      	mov	r2, sl
 8009b28:	465b      	mov	r3, fp
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	f7f6 ffcb 	bl	8000ac8 <__aeabi_dcmpgt>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f040 8295 	bne.w	800a062 <_dtoa_r+0x97a>
 8009b38:	4652      	mov	r2, sl
 8009b3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4649      	mov	r1, r9
 8009b42:	f7f6 ffa3 	bl	8000a8c <__aeabi_dcmplt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f040 8289 	bne.w	800a05e <_dtoa_r+0x976>
 8009b4c:	ec5b ab19 	vmov	sl, fp, d9
 8009b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f2c0 8148 	blt.w	8009de8 <_dtoa_r+0x700>
 8009b58:	9a00      	ldr	r2, [sp, #0]
 8009b5a:	2a0e      	cmp	r2, #14
 8009b5c:	f300 8144 	bgt.w	8009de8 <_dtoa_r+0x700>
 8009b60:	4b67      	ldr	r3, [pc, #412]	; (8009d00 <_dtoa_r+0x618>)
 8009b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f280 80d5 	bge.w	8009d1c <_dtoa_r+0x634>
 8009b72:	9b03      	ldr	r3, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f300 80d1 	bgt.w	8009d1c <_dtoa_r+0x634>
 8009b7a:	f040 826f 	bne.w	800a05c <_dtoa_r+0x974>
 8009b7e:	4b65      	ldr	r3, [pc, #404]	; (8009d14 <_dtoa_r+0x62c>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fd0f 	bl	80005a8 <__aeabi_dmul>
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	f7f6 ff91 	bl	8000ab4 <__aeabi_dcmpge>
 8009b92:	9e03      	ldr	r6, [sp, #12]
 8009b94:	4637      	mov	r7, r6
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f040 8245 	bne.w	800a026 <_dtoa_r+0x93e>
 8009b9c:	9d01      	ldr	r5, [sp, #4]
 8009b9e:	2331      	movs	r3, #49	; 0x31
 8009ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ba4:	9b00      	ldr	r3, [sp, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	e240      	b.n	800a02e <_dtoa_r+0x946>
 8009bac:	07f2      	lsls	r2, r6, #31
 8009bae:	d505      	bpl.n	8009bbc <_dtoa_r+0x4d4>
 8009bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb4:	f7f6 fcf8 	bl	80005a8 <__aeabi_dmul>
 8009bb8:	3501      	adds	r5, #1
 8009bba:	2301      	movs	r3, #1
 8009bbc:	1076      	asrs	r6, r6, #1
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	e777      	b.n	8009ab2 <_dtoa_r+0x3ca>
 8009bc2:	2502      	movs	r5, #2
 8009bc4:	e779      	b.n	8009aba <_dtoa_r+0x3d2>
 8009bc6:	9f00      	ldr	r7, [sp, #0]
 8009bc8:	9e03      	ldr	r6, [sp, #12]
 8009bca:	e794      	b.n	8009af6 <_dtoa_r+0x40e>
 8009bcc:	9901      	ldr	r1, [sp, #4]
 8009bce:	4b4c      	ldr	r3, [pc, #304]	; (8009d00 <_dtoa_r+0x618>)
 8009bd0:	4431      	add	r1, r6
 8009bd2:	910d      	str	r1, [sp, #52]	; 0x34
 8009bd4:	9908      	ldr	r1, [sp, #32]
 8009bd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bde:	2900      	cmp	r1, #0
 8009be0:	d043      	beq.n	8009c6a <_dtoa_r+0x582>
 8009be2:	494d      	ldr	r1, [pc, #308]	; (8009d18 <_dtoa_r+0x630>)
 8009be4:	2000      	movs	r0, #0
 8009be6:	f7f6 fe09 	bl	80007fc <__aeabi_ddiv>
 8009bea:	4652      	mov	r2, sl
 8009bec:	465b      	mov	r3, fp
 8009bee:	f7f6 fb23 	bl	8000238 <__aeabi_dsub>
 8009bf2:	9d01      	ldr	r5, [sp, #4]
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	468b      	mov	fp, r1
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7f6 ff84 	bl	8000b08 <__aeabi_d2iz>
 8009c00:	4606      	mov	r6, r0
 8009c02:	f7f6 fc67 	bl	80004d4 <__aeabi_i2d>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	f7f6 fb13 	bl	8000238 <__aeabi_dsub>
 8009c12:	3630      	adds	r6, #48	; 0x30
 8009c14:	f805 6b01 	strb.w	r6, [r5], #1
 8009c18:	4652      	mov	r2, sl
 8009c1a:	465b      	mov	r3, fp
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	4689      	mov	r9, r1
 8009c20:	f7f6 ff34 	bl	8000a8c <__aeabi_dcmplt>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d163      	bne.n	8009cf0 <_dtoa_r+0x608>
 8009c28:	4642      	mov	r2, r8
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	4936      	ldr	r1, [pc, #216]	; (8009d08 <_dtoa_r+0x620>)
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7f6 fb02 	bl	8000238 <__aeabi_dsub>
 8009c34:	4652      	mov	r2, sl
 8009c36:	465b      	mov	r3, fp
 8009c38:	f7f6 ff28 	bl	8000a8c <__aeabi_dcmplt>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f040 80b5 	bne.w	8009dac <_dtoa_r+0x6c4>
 8009c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c44:	429d      	cmp	r5, r3
 8009c46:	d081      	beq.n	8009b4c <_dtoa_r+0x464>
 8009c48:	4b30      	ldr	r3, [pc, #192]	; (8009d0c <_dtoa_r+0x624>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	4659      	mov	r1, fp
 8009c50:	f7f6 fcaa 	bl	80005a8 <__aeabi_dmul>
 8009c54:	4b2d      	ldr	r3, [pc, #180]	; (8009d0c <_dtoa_r+0x624>)
 8009c56:	4682      	mov	sl, r0
 8009c58:	468b      	mov	fp, r1
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f7f6 fca2 	bl	80005a8 <__aeabi_dmul>
 8009c64:	4680      	mov	r8, r0
 8009c66:	4689      	mov	r9, r1
 8009c68:	e7c6      	b.n	8009bf8 <_dtoa_r+0x510>
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	f7f6 fc9b 	bl	80005a8 <__aeabi_dmul>
 8009c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c74:	9d01      	ldr	r5, [sp, #4]
 8009c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c78:	4682      	mov	sl, r0
 8009c7a:	468b      	mov	fp, r1
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7f6 ff42 	bl	8000b08 <__aeabi_d2iz>
 8009c84:	4606      	mov	r6, r0
 8009c86:	f7f6 fc25 	bl	80004d4 <__aeabi_i2d>
 8009c8a:	3630      	adds	r6, #48	; 0x30
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4640      	mov	r0, r8
 8009c92:	4649      	mov	r1, r9
 8009c94:	f7f6 fad0 	bl	8000238 <__aeabi_dsub>
 8009c98:	f805 6b01 	strb.w	r6, [r5], #1
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	4689      	mov	r9, r1
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	d124      	bne.n	8009cf4 <_dtoa_r+0x60c>
 8009caa:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <_dtoa_r+0x630>)
 8009cac:	4650      	mov	r0, sl
 8009cae:	4659      	mov	r1, fp
 8009cb0:	f7f6 fac4 	bl	800023c <__adddf3>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff04 	bl	8000ac8 <__aeabi_dcmpgt>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d173      	bne.n	8009dac <_dtoa_r+0x6c4>
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	465b      	mov	r3, fp
 8009cc8:	4913      	ldr	r1, [pc, #76]	; (8009d18 <_dtoa_r+0x630>)
 8009cca:	2000      	movs	r0, #0
 8009ccc:	f7f6 fab4 	bl	8000238 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 fed8 	bl	8000a8c <__aeabi_dcmplt>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f43f af35 	beq.w	8009b4c <_dtoa_r+0x464>
 8009ce2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ce4:	1e6b      	subs	r3, r5, #1
 8009ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cec:	2b30      	cmp	r3, #48	; 0x30
 8009cee:	d0f8      	beq.n	8009ce2 <_dtoa_r+0x5fa>
 8009cf0:	9700      	str	r7, [sp, #0]
 8009cf2:	e049      	b.n	8009d88 <_dtoa_r+0x6a0>
 8009cf4:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <_dtoa_r+0x624>)
 8009cf6:	f7f6 fc57 	bl	80005a8 <__aeabi_dmul>
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	e7bd      	b.n	8009c7c <_dtoa_r+0x594>
 8009d00:	0800c930 	.word	0x0800c930
 8009d04:	0800c908 	.word	0x0800c908
 8009d08:	3ff00000 	.word	0x3ff00000
 8009d0c:	40240000 	.word	0x40240000
 8009d10:	401c0000 	.word	0x401c0000
 8009d14:	40140000 	.word	0x40140000
 8009d18:	3fe00000 	.word	0x3fe00000
 8009d1c:	9d01      	ldr	r5, [sp, #4]
 8009d1e:	4656      	mov	r6, sl
 8009d20:	465f      	mov	r7, fp
 8009d22:	4642      	mov	r2, r8
 8009d24:	464b      	mov	r3, r9
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fd67 	bl	80007fc <__aeabi_ddiv>
 8009d2e:	f7f6 feeb 	bl	8000b08 <__aeabi_d2iz>
 8009d32:	4682      	mov	sl, r0
 8009d34:	f7f6 fbce 	bl	80004d4 <__aeabi_i2d>
 8009d38:	4642      	mov	r2, r8
 8009d3a:	464b      	mov	r3, r9
 8009d3c:	f7f6 fc34 	bl	80005a8 <__aeabi_dmul>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009d4c:	f7f6 fa74 	bl	8000238 <__aeabi_dsub>
 8009d50:	f805 6b01 	strb.w	r6, [r5], #1
 8009d54:	9e01      	ldr	r6, [sp, #4]
 8009d56:	9f03      	ldr	r7, [sp, #12]
 8009d58:	1bae      	subs	r6, r5, r6
 8009d5a:	42b7      	cmp	r7, r6
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	d135      	bne.n	8009dce <_dtoa_r+0x6e6>
 8009d62:	f7f6 fa6b 	bl	800023c <__adddf3>
 8009d66:	4642      	mov	r2, r8
 8009d68:	464b      	mov	r3, r9
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	f7f6 feab 	bl	8000ac8 <__aeabi_dcmpgt>
 8009d72:	b9d0      	cbnz	r0, 8009daa <_dtoa_r+0x6c2>
 8009d74:	4642      	mov	r2, r8
 8009d76:	464b      	mov	r3, r9
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fe7c 	bl	8000a78 <__aeabi_dcmpeq>
 8009d80:	b110      	cbz	r0, 8009d88 <_dtoa_r+0x6a0>
 8009d82:	f01a 0f01 	tst.w	sl, #1
 8009d86:	d110      	bne.n	8009daa <_dtoa_r+0x6c2>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	ee18 1a10 	vmov	r1, s16
 8009d8e:	f001 f885 	bl	800ae9c <_Bfree>
 8009d92:	2300      	movs	r3, #0
 8009d94:	9800      	ldr	r0, [sp, #0]
 8009d96:	702b      	strb	r3, [r5, #0]
 8009d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	6018      	str	r0, [r3, #0]
 8009d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f43f acf1 	beq.w	8009788 <_dtoa_r+0xa0>
 8009da6:	601d      	str	r5, [r3, #0]
 8009da8:	e4ee      	b.n	8009788 <_dtoa_r+0xa0>
 8009daa:	9f00      	ldr	r7, [sp, #0]
 8009dac:	462b      	mov	r3, r5
 8009dae:	461d      	mov	r5, r3
 8009db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009db4:	2a39      	cmp	r2, #57	; 0x39
 8009db6:	d106      	bne.n	8009dc6 <_dtoa_r+0x6de>
 8009db8:	9a01      	ldr	r2, [sp, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d1f7      	bne.n	8009dae <_dtoa_r+0x6c6>
 8009dbe:	9901      	ldr	r1, [sp, #4]
 8009dc0:	2230      	movs	r2, #48	; 0x30
 8009dc2:	3701      	adds	r7, #1
 8009dc4:	700a      	strb	r2, [r1, #0]
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	3201      	adds	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
 8009dcc:	e790      	b.n	8009cf0 <_dtoa_r+0x608>
 8009dce:	4ba6      	ldr	r3, [pc, #664]	; (800a068 <_dtoa_r+0x980>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7f6 fbe9 	bl	80005a8 <__aeabi_dmul>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	f7f6 fe4b 	bl	8000a78 <__aeabi_dcmpeq>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d09d      	beq.n	8009d22 <_dtoa_r+0x63a>
 8009de6:	e7cf      	b.n	8009d88 <_dtoa_r+0x6a0>
 8009de8:	9a08      	ldr	r2, [sp, #32]
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	f000 80d7 	beq.w	8009f9e <_dtoa_r+0x8b6>
 8009df0:	9a06      	ldr	r2, [sp, #24]
 8009df2:	2a01      	cmp	r2, #1
 8009df4:	f300 80ba 	bgt.w	8009f6c <_dtoa_r+0x884>
 8009df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	f000 80b2 	beq.w	8009f64 <_dtoa_r+0x87c>
 8009e00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e04:	9e07      	ldr	r6, [sp, #28]
 8009e06:	9d04      	ldr	r5, [sp, #16]
 8009e08:	9a04      	ldr	r2, [sp, #16]
 8009e0a:	441a      	add	r2, r3
 8009e0c:	9204      	str	r2, [sp, #16]
 8009e0e:	9a05      	ldr	r2, [sp, #20]
 8009e10:	2101      	movs	r1, #1
 8009e12:	441a      	add	r2, r3
 8009e14:	4620      	mov	r0, r4
 8009e16:	9205      	str	r2, [sp, #20]
 8009e18:	f001 f942 	bl	800b0a0 <__i2b>
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	2d00      	cmp	r5, #0
 8009e20:	dd0c      	ble.n	8009e3c <_dtoa_r+0x754>
 8009e22:	9b05      	ldr	r3, [sp, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dd09      	ble.n	8009e3c <_dtoa_r+0x754>
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	9a04      	ldr	r2, [sp, #16]
 8009e2c:	bfa8      	it	ge
 8009e2e:	462b      	movge	r3, r5
 8009e30:	1ad2      	subs	r2, r2, r3
 8009e32:	9204      	str	r2, [sp, #16]
 8009e34:	9a05      	ldr	r2, [sp, #20]
 8009e36:	1aed      	subs	r5, r5, r3
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	9305      	str	r3, [sp, #20]
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	b31b      	cbz	r3, 8009e88 <_dtoa_r+0x7a0>
 8009e40:	9b08      	ldr	r3, [sp, #32]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 80af 	beq.w	8009fa6 <_dtoa_r+0x8be>
 8009e48:	2e00      	cmp	r6, #0
 8009e4a:	dd13      	ble.n	8009e74 <_dtoa_r+0x78c>
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	4632      	mov	r2, r6
 8009e50:	4620      	mov	r0, r4
 8009e52:	f001 f9e5 	bl	800b220 <__pow5mult>
 8009e56:	ee18 2a10 	vmov	r2, s16
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f001 f934 	bl	800b0cc <__multiply>
 8009e64:	ee18 1a10 	vmov	r1, s16
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f001 f816 	bl	800ae9c <_Bfree>
 8009e70:	ee08 8a10 	vmov	s16, r8
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	1b9a      	subs	r2, r3, r6
 8009e78:	d006      	beq.n	8009e88 <_dtoa_r+0x7a0>
 8009e7a:	ee18 1a10 	vmov	r1, s16
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f001 f9ce 	bl	800b220 <__pow5mult>
 8009e84:	ee08 0a10 	vmov	s16, r0
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f001 f908 	bl	800b0a0 <__i2b>
 8009e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	4606      	mov	r6, r0
 8009e96:	f340 8088 	ble.w	8009faa <_dtoa_r+0x8c2>
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f001 f9be 	bl	800b220 <__pow5mult>
 8009ea4:	9b06      	ldr	r3, [sp, #24]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	f340 8081 	ble.w	8009fb0 <_dtoa_r+0x8c8>
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	6933      	ldr	r3, [r6, #16]
 8009eb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009eb8:	6918      	ldr	r0, [r3, #16]
 8009eba:	f001 f8a1 	bl	800b000 <__hi0bits>
 8009ebe:	f1c0 0020 	rsb	r0, r0, #32
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	4418      	add	r0, r3
 8009ec6:	f010 001f 	ands.w	r0, r0, #31
 8009eca:	f000 8092 	beq.w	8009ff2 <_dtoa_r+0x90a>
 8009ece:	f1c0 0320 	rsb	r3, r0, #32
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	f340 808a 	ble.w	8009fec <_dtoa_r+0x904>
 8009ed8:	f1c0 001c 	rsb	r0, r0, #28
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	4403      	add	r3, r0
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	9b05      	ldr	r3, [sp, #20]
 8009ee4:	4403      	add	r3, r0
 8009ee6:	4405      	add	r5, r0
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd07      	ble.n	8009f00 <_dtoa_r+0x818>
 8009ef0:	ee18 1a10 	vmov	r1, s16
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f001 f9ec 	bl	800b2d4 <__lshift>
 8009efc:	ee08 0a10 	vmov	s16, r0
 8009f00:	9b05      	ldr	r3, [sp, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dd05      	ble.n	8009f12 <_dtoa_r+0x82a>
 8009f06:	4631      	mov	r1, r6
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f001 f9e2 	bl	800b2d4 <__lshift>
 8009f10:	4606      	mov	r6, r0
 8009f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d06e      	beq.n	8009ff6 <_dtoa_r+0x90e>
 8009f18:	ee18 0a10 	vmov	r0, s16
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	f001 fa49 	bl	800b3b4 <__mcmp>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	da67      	bge.n	8009ff6 <_dtoa_r+0x90e>
 8009f26:	9b00      	ldr	r3, [sp, #0]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	ee18 1a10 	vmov	r1, s16
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	220a      	movs	r2, #10
 8009f32:	2300      	movs	r3, #0
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 ffd3 	bl	800aee0 <__multadd>
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	ee08 0a10 	vmov	s16, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 81b1 	beq.w	800a2a8 <_dtoa_r+0xbc0>
 8009f46:	2300      	movs	r3, #0
 8009f48:	4639      	mov	r1, r7
 8009f4a:	220a      	movs	r2, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 ffc7 	bl	800aee0 <__multadd>
 8009f52:	9b02      	ldr	r3, [sp, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	4607      	mov	r7, r0
 8009f58:	f300 808e 	bgt.w	800a078 <_dtoa_r+0x990>
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	dc51      	bgt.n	800a006 <_dtoa_r+0x91e>
 8009f62:	e089      	b.n	800a078 <_dtoa_r+0x990>
 8009f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f6a:	e74b      	b.n	8009e04 <_dtoa_r+0x71c>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	1e5e      	subs	r6, r3, #1
 8009f70:	9b07      	ldr	r3, [sp, #28]
 8009f72:	42b3      	cmp	r3, r6
 8009f74:	bfbf      	itttt	lt
 8009f76:	9b07      	ldrlt	r3, [sp, #28]
 8009f78:	9607      	strlt	r6, [sp, #28]
 8009f7a:	1af2      	sublt	r2, r6, r3
 8009f7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f7e:	bfb6      	itet	lt
 8009f80:	189b      	addlt	r3, r3, r2
 8009f82:	1b9e      	subge	r6, r3, r6
 8009f84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	bfb8      	it	lt
 8009f8a:	2600      	movlt	r6, #0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfb7      	itett	lt
 8009f90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f98:	1a9d      	sublt	r5, r3, r2
 8009f9a:	2300      	movlt	r3, #0
 8009f9c:	e734      	b.n	8009e08 <_dtoa_r+0x720>
 8009f9e:	9e07      	ldr	r6, [sp, #28]
 8009fa0:	9d04      	ldr	r5, [sp, #16]
 8009fa2:	9f08      	ldr	r7, [sp, #32]
 8009fa4:	e73b      	b.n	8009e1e <_dtoa_r+0x736>
 8009fa6:	9a07      	ldr	r2, [sp, #28]
 8009fa8:	e767      	b.n	8009e7a <_dtoa_r+0x792>
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	dc18      	bgt.n	8009fe2 <_dtoa_r+0x8fa>
 8009fb0:	f1ba 0f00 	cmp.w	sl, #0
 8009fb4:	d115      	bne.n	8009fe2 <_dtoa_r+0x8fa>
 8009fb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fba:	b993      	cbnz	r3, 8009fe2 <_dtoa_r+0x8fa>
 8009fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fc0:	0d1b      	lsrs	r3, r3, #20
 8009fc2:	051b      	lsls	r3, r3, #20
 8009fc4:	b183      	cbz	r3, 8009fe8 <_dtoa_r+0x900>
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9b05      	ldr	r3, [sp, #20]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	f04f 0801 	mov.w	r8, #1
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f47f af6a 	bne.w	8009eb2 <_dtoa_r+0x7ca>
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e76f      	b.n	8009ec2 <_dtoa_r+0x7da>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	e7f6      	b.n	8009fd6 <_dtoa_r+0x8ee>
 8009fe8:	4698      	mov	r8, r3
 8009fea:	e7f4      	b.n	8009fd6 <_dtoa_r+0x8ee>
 8009fec:	f43f af7d 	beq.w	8009eea <_dtoa_r+0x802>
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	301c      	adds	r0, #28
 8009ff4:	e772      	b.n	8009edc <_dtoa_r+0x7f4>
 8009ff6:	9b03      	ldr	r3, [sp, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dc37      	bgt.n	800a06c <_dtoa_r+0x984>
 8009ffc:	9b06      	ldr	r3, [sp, #24]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	dd34      	ble.n	800a06c <_dtoa_r+0x984>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	9302      	str	r3, [sp, #8]
 800a006:	9b02      	ldr	r3, [sp, #8]
 800a008:	b96b      	cbnz	r3, 800a026 <_dtoa_r+0x93e>
 800a00a:	4631      	mov	r1, r6
 800a00c:	2205      	movs	r2, #5
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 ff66 	bl	800aee0 <__multadd>
 800a014:	4601      	mov	r1, r0
 800a016:	4606      	mov	r6, r0
 800a018:	ee18 0a10 	vmov	r0, s16
 800a01c:	f001 f9ca 	bl	800b3b4 <__mcmp>
 800a020:	2800      	cmp	r0, #0
 800a022:	f73f adbb 	bgt.w	8009b9c <_dtoa_r+0x4b4>
 800a026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a028:	9d01      	ldr	r5, [sp, #4]
 800a02a:	43db      	mvns	r3, r3
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	4631      	mov	r1, r6
 800a034:	4620      	mov	r0, r4
 800a036:	f000 ff31 	bl	800ae9c <_Bfree>
 800a03a:	2f00      	cmp	r7, #0
 800a03c:	f43f aea4 	beq.w	8009d88 <_dtoa_r+0x6a0>
 800a040:	f1b8 0f00 	cmp.w	r8, #0
 800a044:	d005      	beq.n	800a052 <_dtoa_r+0x96a>
 800a046:	45b8      	cmp	r8, r7
 800a048:	d003      	beq.n	800a052 <_dtoa_r+0x96a>
 800a04a:	4641      	mov	r1, r8
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 ff25 	bl	800ae9c <_Bfree>
 800a052:	4639      	mov	r1, r7
 800a054:	4620      	mov	r0, r4
 800a056:	f000 ff21 	bl	800ae9c <_Bfree>
 800a05a:	e695      	b.n	8009d88 <_dtoa_r+0x6a0>
 800a05c:	2600      	movs	r6, #0
 800a05e:	4637      	mov	r7, r6
 800a060:	e7e1      	b.n	800a026 <_dtoa_r+0x93e>
 800a062:	9700      	str	r7, [sp, #0]
 800a064:	4637      	mov	r7, r6
 800a066:	e599      	b.n	8009b9c <_dtoa_r+0x4b4>
 800a068:	40240000 	.word	0x40240000
 800a06c:	9b08      	ldr	r3, [sp, #32]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80ca 	beq.w	800a208 <_dtoa_r+0xb20>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	9302      	str	r3, [sp, #8]
 800a078:	2d00      	cmp	r5, #0
 800a07a:	dd05      	ble.n	800a088 <_dtoa_r+0x9a0>
 800a07c:	4639      	mov	r1, r7
 800a07e:	462a      	mov	r2, r5
 800a080:	4620      	mov	r0, r4
 800a082:	f001 f927 	bl	800b2d4 <__lshift>
 800a086:	4607      	mov	r7, r0
 800a088:	f1b8 0f00 	cmp.w	r8, #0
 800a08c:	d05b      	beq.n	800a146 <_dtoa_r+0xa5e>
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fec3 	bl	800ae1c <_Balloc>
 800a096:	4605      	mov	r5, r0
 800a098:	b928      	cbnz	r0, 800a0a6 <_dtoa_r+0x9be>
 800a09a:	4b87      	ldr	r3, [pc, #540]	; (800a2b8 <_dtoa_r+0xbd0>)
 800a09c:	4602      	mov	r2, r0
 800a09e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0a2:	f7ff bb3b 	b.w	800971c <_dtoa_r+0x34>
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	3202      	adds	r2, #2
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	f107 010c 	add.w	r1, r7, #12
 800a0b0:	300c      	adds	r0, #12
 800a0b2:	f7fd fbdb 	bl	800786c <memcpy>
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f001 f90a 	bl	800b2d4 <__lshift>
 800a0c0:	9b01      	ldr	r3, [sp, #4]
 800a0c2:	f103 0901 	add.w	r9, r3, #1
 800a0c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	f00a 0301 	and.w	r3, sl, #1
 800a0d2:	46b8      	mov	r8, r7
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	4631      	mov	r1, r6
 800a0da:	ee18 0a10 	vmov	r0, s16
 800a0de:	f7ff fa77 	bl	80095d0 <quorem>
 800a0e2:	4641      	mov	r1, r8
 800a0e4:	9002      	str	r0, [sp, #8]
 800a0e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0ea:	ee18 0a10 	vmov	r0, s16
 800a0ee:	f001 f961 	bl	800b3b4 <__mcmp>
 800a0f2:	463a      	mov	r2, r7
 800a0f4:	9003      	str	r0, [sp, #12]
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f001 f977 	bl	800b3ec <__mdiff>
 800a0fe:	68c2      	ldr	r2, [r0, #12]
 800a100:	f109 3bff 	add.w	fp, r9, #4294967295
 800a104:	4605      	mov	r5, r0
 800a106:	bb02      	cbnz	r2, 800a14a <_dtoa_r+0xa62>
 800a108:	4601      	mov	r1, r0
 800a10a:	ee18 0a10 	vmov	r0, s16
 800a10e:	f001 f951 	bl	800b3b4 <__mcmp>
 800a112:	4602      	mov	r2, r0
 800a114:	4629      	mov	r1, r5
 800a116:	4620      	mov	r0, r4
 800a118:	9207      	str	r2, [sp, #28]
 800a11a:	f000 febf 	bl	800ae9c <_Bfree>
 800a11e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a122:	ea43 0102 	orr.w	r1, r3, r2
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	430b      	orrs	r3, r1
 800a12a:	464d      	mov	r5, r9
 800a12c:	d10f      	bne.n	800a14e <_dtoa_r+0xa66>
 800a12e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a132:	d02a      	beq.n	800a18a <_dtoa_r+0xaa2>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dd02      	ble.n	800a140 <_dtoa_r+0xa58>
 800a13a:	9b02      	ldr	r3, [sp, #8]
 800a13c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a140:	f88b a000 	strb.w	sl, [fp]
 800a144:	e775      	b.n	800a032 <_dtoa_r+0x94a>
 800a146:	4638      	mov	r0, r7
 800a148:	e7ba      	b.n	800a0c0 <_dtoa_r+0x9d8>
 800a14a:	2201      	movs	r2, #1
 800a14c:	e7e2      	b.n	800a114 <_dtoa_r+0xa2c>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	db04      	blt.n	800a15e <_dtoa_r+0xa76>
 800a154:	9906      	ldr	r1, [sp, #24]
 800a156:	430b      	orrs	r3, r1
 800a158:	9904      	ldr	r1, [sp, #16]
 800a15a:	430b      	orrs	r3, r1
 800a15c:	d122      	bne.n	800a1a4 <_dtoa_r+0xabc>
 800a15e:	2a00      	cmp	r2, #0
 800a160:	ddee      	ble.n	800a140 <_dtoa_r+0xa58>
 800a162:	ee18 1a10 	vmov	r1, s16
 800a166:	2201      	movs	r2, #1
 800a168:	4620      	mov	r0, r4
 800a16a:	f001 f8b3 	bl	800b2d4 <__lshift>
 800a16e:	4631      	mov	r1, r6
 800a170:	ee08 0a10 	vmov	s16, r0
 800a174:	f001 f91e 	bl	800b3b4 <__mcmp>
 800a178:	2800      	cmp	r0, #0
 800a17a:	dc03      	bgt.n	800a184 <_dtoa_r+0xa9c>
 800a17c:	d1e0      	bne.n	800a140 <_dtoa_r+0xa58>
 800a17e:	f01a 0f01 	tst.w	sl, #1
 800a182:	d0dd      	beq.n	800a140 <_dtoa_r+0xa58>
 800a184:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a188:	d1d7      	bne.n	800a13a <_dtoa_r+0xa52>
 800a18a:	2339      	movs	r3, #57	; 0x39
 800a18c:	f88b 3000 	strb.w	r3, [fp]
 800a190:	462b      	mov	r3, r5
 800a192:	461d      	mov	r5, r3
 800a194:	3b01      	subs	r3, #1
 800a196:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a19a:	2a39      	cmp	r2, #57	; 0x39
 800a19c:	d071      	beq.n	800a282 <_dtoa_r+0xb9a>
 800a19e:	3201      	adds	r2, #1
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	e746      	b.n	800a032 <_dtoa_r+0x94a>
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	dd07      	ble.n	800a1b8 <_dtoa_r+0xad0>
 800a1a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1ac:	d0ed      	beq.n	800a18a <_dtoa_r+0xaa2>
 800a1ae:	f10a 0301 	add.w	r3, sl, #1
 800a1b2:	f88b 3000 	strb.w	r3, [fp]
 800a1b6:	e73c      	b.n	800a032 <_dtoa_r+0x94a>
 800a1b8:	9b05      	ldr	r3, [sp, #20]
 800a1ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a1be:	4599      	cmp	r9, r3
 800a1c0:	d047      	beq.n	800a252 <_dtoa_r+0xb6a>
 800a1c2:	ee18 1a10 	vmov	r1, s16
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fe88 	bl	800aee0 <__multadd>
 800a1d0:	45b8      	cmp	r8, r7
 800a1d2:	ee08 0a10 	vmov	s16, r0
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	f04f 020a 	mov.w	r2, #10
 800a1de:	4641      	mov	r1, r8
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	d106      	bne.n	800a1f2 <_dtoa_r+0xb0a>
 800a1e4:	f000 fe7c 	bl	800aee0 <__multadd>
 800a1e8:	4680      	mov	r8, r0
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	f109 0901 	add.w	r9, r9, #1
 800a1f0:	e772      	b.n	800a0d8 <_dtoa_r+0x9f0>
 800a1f2:	f000 fe75 	bl	800aee0 <__multadd>
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 fe6e 	bl	800aee0 <__multadd>
 800a204:	4607      	mov	r7, r0
 800a206:	e7f1      	b.n	800a1ec <_dtoa_r+0xb04>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	9302      	str	r3, [sp, #8]
 800a20c:	9d01      	ldr	r5, [sp, #4]
 800a20e:	ee18 0a10 	vmov	r0, s16
 800a212:	4631      	mov	r1, r6
 800a214:	f7ff f9dc 	bl	80095d0 <quorem>
 800a218:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	f805 ab01 	strb.w	sl, [r5], #1
 800a222:	1aea      	subs	r2, r5, r3
 800a224:	9b02      	ldr	r3, [sp, #8]
 800a226:	4293      	cmp	r3, r2
 800a228:	dd09      	ble.n	800a23e <_dtoa_r+0xb56>
 800a22a:	ee18 1a10 	vmov	r1, s16
 800a22e:	2300      	movs	r3, #0
 800a230:	220a      	movs	r2, #10
 800a232:	4620      	mov	r0, r4
 800a234:	f000 fe54 	bl	800aee0 <__multadd>
 800a238:	ee08 0a10 	vmov	s16, r0
 800a23c:	e7e7      	b.n	800a20e <_dtoa_r+0xb26>
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfc8      	it	gt
 800a244:	461d      	movgt	r5, r3
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	bfd8      	it	le
 800a24a:	2501      	movle	r5, #1
 800a24c:	441d      	add	r5, r3
 800a24e:	f04f 0800 	mov.w	r8, #0
 800a252:	ee18 1a10 	vmov	r1, s16
 800a256:	2201      	movs	r2, #1
 800a258:	4620      	mov	r0, r4
 800a25a:	f001 f83b 	bl	800b2d4 <__lshift>
 800a25e:	4631      	mov	r1, r6
 800a260:	ee08 0a10 	vmov	s16, r0
 800a264:	f001 f8a6 	bl	800b3b4 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	dc91      	bgt.n	800a190 <_dtoa_r+0xaa8>
 800a26c:	d102      	bne.n	800a274 <_dtoa_r+0xb8c>
 800a26e:	f01a 0f01 	tst.w	sl, #1
 800a272:	d18d      	bne.n	800a190 <_dtoa_r+0xaa8>
 800a274:	462b      	mov	r3, r5
 800a276:	461d      	mov	r5, r3
 800a278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a27c:	2a30      	cmp	r2, #48	; 0x30
 800a27e:	d0fa      	beq.n	800a276 <_dtoa_r+0xb8e>
 800a280:	e6d7      	b.n	800a032 <_dtoa_r+0x94a>
 800a282:	9a01      	ldr	r2, [sp, #4]
 800a284:	429a      	cmp	r2, r3
 800a286:	d184      	bne.n	800a192 <_dtoa_r+0xaaa>
 800a288:	9b00      	ldr	r3, [sp, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	2331      	movs	r3, #49	; 0x31
 800a290:	7013      	strb	r3, [r2, #0]
 800a292:	e6ce      	b.n	800a032 <_dtoa_r+0x94a>
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <_dtoa_r+0xbd4>)
 800a296:	f7ff ba95 	b.w	80097c4 <_dtoa_r+0xdc>
 800a29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f47f aa6e 	bne.w	800977e <_dtoa_r+0x96>
 800a2a2:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <_dtoa_r+0xbd8>)
 800a2a4:	f7ff ba8e 	b.w	80097c4 <_dtoa_r+0xdc>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dcae      	bgt.n	800a20c <_dtoa_r+0xb24>
 800a2ae:	9b06      	ldr	r3, [sp, #24]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f73f aea8 	bgt.w	800a006 <_dtoa_r+0x91e>
 800a2b6:	e7a9      	b.n	800a20c <_dtoa_r+0xb24>
 800a2b8:	0800c7b8 	.word	0x0800c7b8
 800a2bc:	0800c5b8 	.word	0x0800c5b8
 800a2c0:	0800c739 	.word	0x0800c739

0800a2c4 <__sflush_r>:
 800a2c4:	898a      	ldrh	r2, [r1, #12]
 800a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	0710      	lsls	r0, r2, #28
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	d458      	bmi.n	800a384 <__sflush_r+0xc0>
 800a2d2:	684b      	ldr	r3, [r1, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc05      	bgt.n	800a2e4 <__sflush_r+0x20>
 800a2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc02      	bgt.n	800a2e4 <__sflush_r+0x20>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	d0f9      	beq.n	800a2de <__sflush_r+0x1a>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2f0:	682f      	ldr	r7, [r5, #0]
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	d032      	beq.n	800a35c <__sflush_r+0x98>
 800a2f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	075a      	lsls	r2, r3, #29
 800a2fc:	d505      	bpl.n	800a30a <__sflush_r+0x46>
 800a2fe:	6863      	ldr	r3, [r4, #4]
 800a300:	1ac0      	subs	r0, r0, r3
 800a302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a304:	b10b      	cbz	r3, 800a30a <__sflush_r+0x46>
 800a306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a308:	1ac0      	subs	r0, r0, r3
 800a30a:	2300      	movs	r3, #0
 800a30c:	4602      	mov	r2, r0
 800a30e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a310:	6a21      	ldr	r1, [r4, #32]
 800a312:	4628      	mov	r0, r5
 800a314:	47b0      	blx	r6
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	d106      	bne.n	800a32a <__sflush_r+0x66>
 800a31c:	6829      	ldr	r1, [r5, #0]
 800a31e:	291d      	cmp	r1, #29
 800a320:	d82c      	bhi.n	800a37c <__sflush_r+0xb8>
 800a322:	4a2a      	ldr	r2, [pc, #168]	; (800a3cc <__sflush_r+0x108>)
 800a324:	40ca      	lsrs	r2, r1
 800a326:	07d6      	lsls	r6, r2, #31
 800a328:	d528      	bpl.n	800a37c <__sflush_r+0xb8>
 800a32a:	2200      	movs	r2, #0
 800a32c:	6062      	str	r2, [r4, #4]
 800a32e:	04d9      	lsls	r1, r3, #19
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	6022      	str	r2, [r4, #0]
 800a334:	d504      	bpl.n	800a340 <__sflush_r+0x7c>
 800a336:	1c42      	adds	r2, r0, #1
 800a338:	d101      	bne.n	800a33e <__sflush_r+0x7a>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	b903      	cbnz	r3, 800a340 <__sflush_r+0x7c>
 800a33e:	6560      	str	r0, [r4, #84]	; 0x54
 800a340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a342:	602f      	str	r7, [r5, #0]
 800a344:	2900      	cmp	r1, #0
 800a346:	d0ca      	beq.n	800a2de <__sflush_r+0x1a>
 800a348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a34c:	4299      	cmp	r1, r3
 800a34e:	d002      	beq.n	800a356 <__sflush_r+0x92>
 800a350:	4628      	mov	r0, r5
 800a352:	f001 fa3b 	bl	800b7cc <_free_r>
 800a356:	2000      	movs	r0, #0
 800a358:	6360      	str	r0, [r4, #52]	; 0x34
 800a35a:	e7c1      	b.n	800a2e0 <__sflush_r+0x1c>
 800a35c:	6a21      	ldr	r1, [r4, #32]
 800a35e:	2301      	movs	r3, #1
 800a360:	4628      	mov	r0, r5
 800a362:	47b0      	blx	r6
 800a364:	1c41      	adds	r1, r0, #1
 800a366:	d1c7      	bne.n	800a2f8 <__sflush_r+0x34>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0c4      	beq.n	800a2f8 <__sflush_r+0x34>
 800a36e:	2b1d      	cmp	r3, #29
 800a370:	d001      	beq.n	800a376 <__sflush_r+0xb2>
 800a372:	2b16      	cmp	r3, #22
 800a374:	d101      	bne.n	800a37a <__sflush_r+0xb6>
 800a376:	602f      	str	r7, [r5, #0]
 800a378:	e7b1      	b.n	800a2de <__sflush_r+0x1a>
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	e7ad      	b.n	800a2e0 <__sflush_r+0x1c>
 800a384:	690f      	ldr	r7, [r1, #16]
 800a386:	2f00      	cmp	r7, #0
 800a388:	d0a9      	beq.n	800a2de <__sflush_r+0x1a>
 800a38a:	0793      	lsls	r3, r2, #30
 800a38c:	680e      	ldr	r6, [r1, #0]
 800a38e:	bf08      	it	eq
 800a390:	694b      	ldreq	r3, [r1, #20]
 800a392:	600f      	str	r7, [r1, #0]
 800a394:	bf18      	it	ne
 800a396:	2300      	movne	r3, #0
 800a398:	eba6 0807 	sub.w	r8, r6, r7
 800a39c:	608b      	str	r3, [r1, #8]
 800a39e:	f1b8 0f00 	cmp.w	r8, #0
 800a3a2:	dd9c      	ble.n	800a2de <__sflush_r+0x1a>
 800a3a4:	6a21      	ldr	r1, [r4, #32]
 800a3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3a8:	4643      	mov	r3, r8
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b0      	blx	r6
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dc06      	bgt.n	800a3c2 <__sflush_r+0xfe>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e78e      	b.n	800a2e0 <__sflush_r+0x1c>
 800a3c2:	4407      	add	r7, r0
 800a3c4:	eba8 0800 	sub.w	r8, r8, r0
 800a3c8:	e7e9      	b.n	800a39e <__sflush_r+0xda>
 800a3ca:	bf00      	nop
 800a3cc:	20400001 	.word	0x20400001

0800a3d0 <_fflush_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	690b      	ldr	r3, [r1, #16]
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	b913      	cbnz	r3, 800a3e0 <_fflush_r+0x10>
 800a3da:	2500      	movs	r5, #0
 800a3dc:	4628      	mov	r0, r5
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	b118      	cbz	r0, 800a3ea <_fflush_r+0x1a>
 800a3e2:	6983      	ldr	r3, [r0, #24]
 800a3e4:	b90b      	cbnz	r3, 800a3ea <_fflush_r+0x1a>
 800a3e6:	f000 f887 	bl	800a4f8 <__sinit>
 800a3ea:	4b14      	ldr	r3, [pc, #80]	; (800a43c <_fflush_r+0x6c>)
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	d11b      	bne.n	800a428 <_fflush_r+0x58>
 800a3f0:	686c      	ldr	r4, [r5, #4]
 800a3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ef      	beq.n	800a3da <_fflush_r+0xa>
 800a3fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3fc:	07d0      	lsls	r0, r2, #31
 800a3fe:	d404      	bmi.n	800a40a <_fflush_r+0x3a>
 800a400:	0599      	lsls	r1, r3, #22
 800a402:	d402      	bmi.n	800a40a <_fflush_r+0x3a>
 800a404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a406:	f000 fc88 	bl	800ad1a <__retarget_lock_acquire_recursive>
 800a40a:	4628      	mov	r0, r5
 800a40c:	4621      	mov	r1, r4
 800a40e:	f7ff ff59 	bl	800a2c4 <__sflush_r>
 800a412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a414:	07da      	lsls	r2, r3, #31
 800a416:	4605      	mov	r5, r0
 800a418:	d4e0      	bmi.n	800a3dc <_fflush_r+0xc>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	059b      	lsls	r3, r3, #22
 800a41e:	d4dd      	bmi.n	800a3dc <_fflush_r+0xc>
 800a420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a422:	f000 fc7b 	bl	800ad1c <__retarget_lock_release_recursive>
 800a426:	e7d9      	b.n	800a3dc <_fflush_r+0xc>
 800a428:	4b05      	ldr	r3, [pc, #20]	; (800a440 <_fflush_r+0x70>)
 800a42a:	429c      	cmp	r4, r3
 800a42c:	d101      	bne.n	800a432 <_fflush_r+0x62>
 800a42e:	68ac      	ldr	r4, [r5, #8]
 800a430:	e7df      	b.n	800a3f2 <_fflush_r+0x22>
 800a432:	4b04      	ldr	r3, [pc, #16]	; (800a444 <_fflush_r+0x74>)
 800a434:	429c      	cmp	r4, r3
 800a436:	bf08      	it	eq
 800a438:	68ec      	ldreq	r4, [r5, #12]
 800a43a:	e7da      	b.n	800a3f2 <_fflush_r+0x22>
 800a43c:	0800c7ec 	.word	0x0800c7ec
 800a440:	0800c80c 	.word	0x0800c80c
 800a444:	0800c7cc 	.word	0x0800c7cc

0800a448 <std>:
 800a448:	2300      	movs	r3, #0
 800a44a:	b510      	push	{r4, lr}
 800a44c:	4604      	mov	r4, r0
 800a44e:	e9c0 3300 	strd	r3, r3, [r0]
 800a452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a456:	6083      	str	r3, [r0, #8]
 800a458:	8181      	strh	r1, [r0, #12]
 800a45a:	6643      	str	r3, [r0, #100]	; 0x64
 800a45c:	81c2      	strh	r2, [r0, #14]
 800a45e:	6183      	str	r3, [r0, #24]
 800a460:	4619      	mov	r1, r3
 800a462:	2208      	movs	r2, #8
 800a464:	305c      	adds	r0, #92	; 0x5c
 800a466:	f7fd fa0f 	bl	8007888 <memset>
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <std+0x38>)
 800a46c:	6263      	str	r3, [r4, #36]	; 0x24
 800a46e:	4b05      	ldr	r3, [pc, #20]	; (800a484 <std+0x3c>)
 800a470:	62a3      	str	r3, [r4, #40]	; 0x28
 800a472:	4b05      	ldr	r3, [pc, #20]	; (800a488 <std+0x40>)
 800a474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a476:	4b05      	ldr	r3, [pc, #20]	; (800a48c <std+0x44>)
 800a478:	6224      	str	r4, [r4, #32]
 800a47a:	6323      	str	r3, [r4, #48]	; 0x30
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	bf00      	nop
 800a480:	0800bf29 	.word	0x0800bf29
 800a484:	0800bf4b 	.word	0x0800bf4b
 800a488:	0800bf83 	.word	0x0800bf83
 800a48c:	0800bfa7 	.word	0x0800bfa7

0800a490 <_cleanup_r>:
 800a490:	4901      	ldr	r1, [pc, #4]	; (800a498 <_cleanup_r+0x8>)
 800a492:	f000 b8af 	b.w	800a5f4 <_fwalk_reent>
 800a496:	bf00      	nop
 800a498:	0800a3d1 	.word	0x0800a3d1

0800a49c <__sfmoreglue>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	2268      	movs	r2, #104	; 0x68
 800a4a0:	1e4d      	subs	r5, r1, #1
 800a4a2:	4355      	muls	r5, r2
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4aa:	f001 f9fb 	bl	800b8a4 <_malloc_r>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	b140      	cbz	r0, 800a4c4 <__sfmoreglue+0x28>
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4b8:	300c      	adds	r0, #12
 800a4ba:	60a0      	str	r0, [r4, #8]
 800a4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4c0:	f7fd f9e2 	bl	8007888 <memset>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}

0800a4c8 <__sfp_lock_acquire>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__sfp_lock_acquire+0x8>)
 800a4ca:	f000 bc26 	b.w	800ad1a <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	200004f5 	.word	0x200004f5

0800a4d4 <__sfp_lock_release>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__sfp_lock_release+0x8>)
 800a4d6:	f000 bc21 	b.w	800ad1c <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	200004f5 	.word	0x200004f5

0800a4e0 <__sinit_lock_acquire>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__sinit_lock_acquire+0x8>)
 800a4e2:	f000 bc1a 	b.w	800ad1a <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	200004f6 	.word	0x200004f6

0800a4ec <__sinit_lock_release>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__sinit_lock_release+0x8>)
 800a4ee:	f000 bc15 	b.w	800ad1c <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	200004f6 	.word	0x200004f6

0800a4f8 <__sinit>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	f7ff fff0 	bl	800a4e0 <__sinit_lock_acquire>
 800a500:	69a3      	ldr	r3, [r4, #24]
 800a502:	b11b      	cbz	r3, 800a50c <__sinit+0x14>
 800a504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a508:	f7ff bff0 	b.w	800a4ec <__sinit_lock_release>
 800a50c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a510:	6523      	str	r3, [r4, #80]	; 0x50
 800a512:	4b13      	ldr	r3, [pc, #76]	; (800a560 <__sinit+0x68>)
 800a514:	4a13      	ldr	r2, [pc, #76]	; (800a564 <__sinit+0x6c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	62a2      	str	r2, [r4, #40]	; 0x28
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	bf04      	itt	eq
 800a51e:	2301      	moveq	r3, #1
 800a520:	61a3      	streq	r3, [r4, #24]
 800a522:	4620      	mov	r0, r4
 800a524:	f000 f820 	bl	800a568 <__sfp>
 800a528:	6060      	str	r0, [r4, #4]
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f81c 	bl	800a568 <__sfp>
 800a530:	60a0      	str	r0, [r4, #8]
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f818 	bl	800a568 <__sfp>
 800a538:	2200      	movs	r2, #0
 800a53a:	60e0      	str	r0, [r4, #12]
 800a53c:	2104      	movs	r1, #4
 800a53e:	6860      	ldr	r0, [r4, #4]
 800a540:	f7ff ff82 	bl	800a448 <std>
 800a544:	68a0      	ldr	r0, [r4, #8]
 800a546:	2201      	movs	r2, #1
 800a548:	2109      	movs	r1, #9
 800a54a:	f7ff ff7d 	bl	800a448 <std>
 800a54e:	68e0      	ldr	r0, [r4, #12]
 800a550:	2202      	movs	r2, #2
 800a552:	2112      	movs	r1, #18
 800a554:	f7ff ff78 	bl	800a448 <std>
 800a558:	2301      	movs	r3, #1
 800a55a:	61a3      	str	r3, [r4, #24]
 800a55c:	e7d2      	b.n	800a504 <__sinit+0xc>
 800a55e:	bf00      	nop
 800a560:	0800c5a4 	.word	0x0800c5a4
 800a564:	0800a491 	.word	0x0800a491

0800a568 <__sfp>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	4607      	mov	r7, r0
 800a56c:	f7ff ffac 	bl	800a4c8 <__sfp_lock_acquire>
 800a570:	4b1e      	ldr	r3, [pc, #120]	; (800a5ec <__sfp+0x84>)
 800a572:	681e      	ldr	r6, [r3, #0]
 800a574:	69b3      	ldr	r3, [r6, #24]
 800a576:	b913      	cbnz	r3, 800a57e <__sfp+0x16>
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff ffbd 	bl	800a4f8 <__sinit>
 800a57e:	3648      	adds	r6, #72	; 0x48
 800a580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a584:	3b01      	subs	r3, #1
 800a586:	d503      	bpl.n	800a590 <__sfp+0x28>
 800a588:	6833      	ldr	r3, [r6, #0]
 800a58a:	b30b      	cbz	r3, 800a5d0 <__sfp+0x68>
 800a58c:	6836      	ldr	r6, [r6, #0]
 800a58e:	e7f7      	b.n	800a580 <__sfp+0x18>
 800a590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a594:	b9d5      	cbnz	r5, 800a5cc <__sfp+0x64>
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <__sfp+0x88>)
 800a598:	60e3      	str	r3, [r4, #12]
 800a59a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a59e:	6665      	str	r5, [r4, #100]	; 0x64
 800a5a0:	f000 fbba 	bl	800ad18 <__retarget_lock_init_recursive>
 800a5a4:	f7ff ff96 	bl	800a4d4 <__sfp_lock_release>
 800a5a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5b0:	6025      	str	r5, [r4, #0]
 800a5b2:	61a5      	str	r5, [r4, #24]
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5bc:	f7fd f964 	bl	8007888 <memset>
 800a5c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5cc:	3468      	adds	r4, #104	; 0x68
 800a5ce:	e7d9      	b.n	800a584 <__sfp+0x1c>
 800a5d0:	2104      	movs	r1, #4
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f7ff ff62 	bl	800a49c <__sfmoreglue>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	6030      	str	r0, [r6, #0]
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d1d5      	bne.n	800a58c <__sfp+0x24>
 800a5e0:	f7ff ff78 	bl	800a4d4 <__sfp_lock_release>
 800a5e4:	230c      	movs	r3, #12
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	e7ee      	b.n	800a5c8 <__sfp+0x60>
 800a5ea:	bf00      	nop
 800a5ec:	0800c5a4 	.word	0x0800c5a4
 800a5f0:	ffff0001 	.word	0xffff0001

0800a5f4 <_fwalk_reent>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a600:	2700      	movs	r7, #0
 800a602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a606:	f1b9 0901 	subs.w	r9, r9, #1
 800a60a:	d505      	bpl.n	800a618 <_fwalk_reent+0x24>
 800a60c:	6824      	ldr	r4, [r4, #0]
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d1f7      	bne.n	800a602 <_fwalk_reent+0xe>
 800a612:	4638      	mov	r0, r7
 800a614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a618:	89ab      	ldrh	r3, [r5, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d907      	bls.n	800a62e <_fwalk_reent+0x3a>
 800a61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a622:	3301      	adds	r3, #1
 800a624:	d003      	beq.n	800a62e <_fwalk_reent+0x3a>
 800a626:	4629      	mov	r1, r5
 800a628:	4630      	mov	r0, r6
 800a62a:	47c0      	blx	r8
 800a62c:	4307      	orrs	r7, r0
 800a62e:	3568      	adds	r5, #104	; 0x68
 800a630:	e7e9      	b.n	800a606 <_fwalk_reent+0x12>

0800a632 <rshift>:
 800a632:	6903      	ldr	r3, [r0, #16]
 800a634:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a63c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a640:	f100 0414 	add.w	r4, r0, #20
 800a644:	dd45      	ble.n	800a6d2 <rshift+0xa0>
 800a646:	f011 011f 	ands.w	r1, r1, #31
 800a64a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a64e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a652:	d10c      	bne.n	800a66e <rshift+0x3c>
 800a654:	f100 0710 	add.w	r7, r0, #16
 800a658:	4629      	mov	r1, r5
 800a65a:	42b1      	cmp	r1, r6
 800a65c:	d334      	bcc.n	800a6c8 <rshift+0x96>
 800a65e:	1a9b      	subs	r3, r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	1eea      	subs	r2, r5, #3
 800a664:	4296      	cmp	r6, r2
 800a666:	bf38      	it	cc
 800a668:	2300      	movcc	r3, #0
 800a66a:	4423      	add	r3, r4
 800a66c:	e015      	b.n	800a69a <rshift+0x68>
 800a66e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a672:	f1c1 0820 	rsb	r8, r1, #32
 800a676:	40cf      	lsrs	r7, r1
 800a678:	f105 0e04 	add.w	lr, r5, #4
 800a67c:	46a1      	mov	r9, r4
 800a67e:	4576      	cmp	r6, lr
 800a680:	46f4      	mov	ip, lr
 800a682:	d815      	bhi.n	800a6b0 <rshift+0x7e>
 800a684:	1a9a      	subs	r2, r3, r2
 800a686:	0092      	lsls	r2, r2, #2
 800a688:	3a04      	subs	r2, #4
 800a68a:	3501      	adds	r5, #1
 800a68c:	42ae      	cmp	r6, r5
 800a68e:	bf38      	it	cc
 800a690:	2200      	movcc	r2, #0
 800a692:	18a3      	adds	r3, r4, r2
 800a694:	50a7      	str	r7, [r4, r2]
 800a696:	b107      	cbz	r7, 800a69a <rshift+0x68>
 800a698:	3304      	adds	r3, #4
 800a69a:	1b1a      	subs	r2, r3, r4
 800a69c:	42a3      	cmp	r3, r4
 800a69e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6a2:	bf08      	it	eq
 800a6a4:	2300      	moveq	r3, #0
 800a6a6:	6102      	str	r2, [r0, #16]
 800a6a8:	bf08      	it	eq
 800a6aa:	6143      	streq	r3, [r0, #20]
 800a6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b0:	f8dc c000 	ldr.w	ip, [ip]
 800a6b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6b8:	ea4c 0707 	orr.w	r7, ip, r7
 800a6bc:	f849 7b04 	str.w	r7, [r9], #4
 800a6c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6c4:	40cf      	lsrs	r7, r1
 800a6c6:	e7da      	b.n	800a67e <rshift+0x4c>
 800a6c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6d0:	e7c3      	b.n	800a65a <rshift+0x28>
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	e7e1      	b.n	800a69a <rshift+0x68>

0800a6d6 <__hexdig_fun>:
 800a6d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6da:	2b09      	cmp	r3, #9
 800a6dc:	d802      	bhi.n	800a6e4 <__hexdig_fun+0xe>
 800a6de:	3820      	subs	r0, #32
 800a6e0:	b2c0      	uxtb	r0, r0
 800a6e2:	4770      	bx	lr
 800a6e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6e8:	2b05      	cmp	r3, #5
 800a6ea:	d801      	bhi.n	800a6f0 <__hexdig_fun+0x1a>
 800a6ec:	3847      	subs	r0, #71	; 0x47
 800a6ee:	e7f7      	b.n	800a6e0 <__hexdig_fun+0xa>
 800a6f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a6f4:	2b05      	cmp	r3, #5
 800a6f6:	d801      	bhi.n	800a6fc <__hexdig_fun+0x26>
 800a6f8:	3827      	subs	r0, #39	; 0x27
 800a6fa:	e7f1      	b.n	800a6e0 <__hexdig_fun+0xa>
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	4770      	bx	lr

0800a700 <__gethex>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	ed2d 8b02 	vpush	{d8}
 800a708:	b089      	sub	sp, #36	; 0x24
 800a70a:	ee08 0a10 	vmov	s16, r0
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	4bb4      	ldr	r3, [pc, #720]	; (800a9e4 <__gethex+0x2e4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	4618      	mov	r0, r3
 800a718:	468b      	mov	fp, r1
 800a71a:	4690      	mov	r8, r2
 800a71c:	f7f5 fd30 	bl	8000180 <strlen>
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	f8db 2000 	ldr.w	r2, [fp]
 800a726:	4403      	add	r3, r0
 800a728:	4682      	mov	sl, r0
 800a72a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a72e:	9305      	str	r3, [sp, #20]
 800a730:	1c93      	adds	r3, r2, #2
 800a732:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a736:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a73a:	32fe      	adds	r2, #254	; 0xfe
 800a73c:	18d1      	adds	r1, r2, r3
 800a73e:	461f      	mov	r7, r3
 800a740:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a744:	9100      	str	r1, [sp, #0]
 800a746:	2830      	cmp	r0, #48	; 0x30
 800a748:	d0f8      	beq.n	800a73c <__gethex+0x3c>
 800a74a:	f7ff ffc4 	bl	800a6d6 <__hexdig_fun>
 800a74e:	4604      	mov	r4, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d13a      	bne.n	800a7ca <__gethex+0xca>
 800a754:	9901      	ldr	r1, [sp, #4]
 800a756:	4652      	mov	r2, sl
 800a758:	4638      	mov	r0, r7
 800a75a:	f001 fc28 	bl	800bfae <strncmp>
 800a75e:	4605      	mov	r5, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d168      	bne.n	800a836 <__gethex+0x136>
 800a764:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a768:	eb07 060a 	add.w	r6, r7, sl
 800a76c:	f7ff ffb3 	bl	800a6d6 <__hexdig_fun>
 800a770:	2800      	cmp	r0, #0
 800a772:	d062      	beq.n	800a83a <__gethex+0x13a>
 800a774:	4633      	mov	r3, r6
 800a776:	7818      	ldrb	r0, [r3, #0]
 800a778:	2830      	cmp	r0, #48	; 0x30
 800a77a:	461f      	mov	r7, r3
 800a77c:	f103 0301 	add.w	r3, r3, #1
 800a780:	d0f9      	beq.n	800a776 <__gethex+0x76>
 800a782:	f7ff ffa8 	bl	800a6d6 <__hexdig_fun>
 800a786:	2301      	movs	r3, #1
 800a788:	fab0 f480 	clz	r4, r0
 800a78c:	0964      	lsrs	r4, r4, #5
 800a78e:	4635      	mov	r5, r6
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	463a      	mov	r2, r7
 800a794:	4616      	mov	r6, r2
 800a796:	3201      	adds	r2, #1
 800a798:	7830      	ldrb	r0, [r6, #0]
 800a79a:	f7ff ff9c 	bl	800a6d6 <__hexdig_fun>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d1f8      	bne.n	800a794 <__gethex+0x94>
 800a7a2:	9901      	ldr	r1, [sp, #4]
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f001 fc01 	bl	800bfae <strncmp>
 800a7ac:	b980      	cbnz	r0, 800a7d0 <__gethex+0xd0>
 800a7ae:	b94d      	cbnz	r5, 800a7c4 <__gethex+0xc4>
 800a7b0:	eb06 050a 	add.w	r5, r6, sl
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4616      	mov	r6, r2
 800a7b8:	3201      	adds	r2, #1
 800a7ba:	7830      	ldrb	r0, [r6, #0]
 800a7bc:	f7ff ff8b 	bl	800a6d6 <__hexdig_fun>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d1f8      	bne.n	800a7b6 <__gethex+0xb6>
 800a7c4:	1bad      	subs	r5, r5, r6
 800a7c6:	00ad      	lsls	r5, r5, #2
 800a7c8:	e004      	b.n	800a7d4 <__gethex+0xd4>
 800a7ca:	2400      	movs	r4, #0
 800a7cc:	4625      	mov	r5, r4
 800a7ce:	e7e0      	b.n	800a792 <__gethex+0x92>
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	d1f7      	bne.n	800a7c4 <__gethex+0xc4>
 800a7d4:	7833      	ldrb	r3, [r6, #0]
 800a7d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7da:	2b50      	cmp	r3, #80	; 0x50
 800a7dc:	d13b      	bne.n	800a856 <__gethex+0x156>
 800a7de:	7873      	ldrb	r3, [r6, #1]
 800a7e0:	2b2b      	cmp	r3, #43	; 0x2b
 800a7e2:	d02c      	beq.n	800a83e <__gethex+0x13e>
 800a7e4:	2b2d      	cmp	r3, #45	; 0x2d
 800a7e6:	d02e      	beq.n	800a846 <__gethex+0x146>
 800a7e8:	1c71      	adds	r1, r6, #1
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	7808      	ldrb	r0, [r1, #0]
 800a7f0:	f7ff ff71 	bl	800a6d6 <__hexdig_fun>
 800a7f4:	1e43      	subs	r3, r0, #1
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b18      	cmp	r3, #24
 800a7fa:	d82c      	bhi.n	800a856 <__gethex+0x156>
 800a7fc:	f1a0 0210 	sub.w	r2, r0, #16
 800a800:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a804:	f7ff ff67 	bl	800a6d6 <__hexdig_fun>
 800a808:	1e43      	subs	r3, r0, #1
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b18      	cmp	r3, #24
 800a80e:	d91d      	bls.n	800a84c <__gethex+0x14c>
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	d000      	beq.n	800a818 <__gethex+0x118>
 800a816:	4252      	negs	r2, r2
 800a818:	4415      	add	r5, r2
 800a81a:	f8cb 1000 	str.w	r1, [fp]
 800a81e:	b1e4      	cbz	r4, 800a85a <__gethex+0x15a>
 800a820:	9b00      	ldr	r3, [sp, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bf14      	ite	ne
 800a826:	2700      	movne	r7, #0
 800a828:	2706      	moveq	r7, #6
 800a82a:	4638      	mov	r0, r7
 800a82c:	b009      	add	sp, #36	; 0x24
 800a82e:	ecbd 8b02 	vpop	{d8}
 800a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a836:	463e      	mov	r6, r7
 800a838:	4625      	mov	r5, r4
 800a83a:	2401      	movs	r4, #1
 800a83c:	e7ca      	b.n	800a7d4 <__gethex+0xd4>
 800a83e:	f04f 0900 	mov.w	r9, #0
 800a842:	1cb1      	adds	r1, r6, #2
 800a844:	e7d3      	b.n	800a7ee <__gethex+0xee>
 800a846:	f04f 0901 	mov.w	r9, #1
 800a84a:	e7fa      	b.n	800a842 <__gethex+0x142>
 800a84c:	230a      	movs	r3, #10
 800a84e:	fb03 0202 	mla	r2, r3, r2, r0
 800a852:	3a10      	subs	r2, #16
 800a854:	e7d4      	b.n	800a800 <__gethex+0x100>
 800a856:	4631      	mov	r1, r6
 800a858:	e7df      	b.n	800a81a <__gethex+0x11a>
 800a85a:	1bf3      	subs	r3, r6, r7
 800a85c:	3b01      	subs	r3, #1
 800a85e:	4621      	mov	r1, r4
 800a860:	2b07      	cmp	r3, #7
 800a862:	dc0b      	bgt.n	800a87c <__gethex+0x17c>
 800a864:	ee18 0a10 	vmov	r0, s16
 800a868:	f000 fad8 	bl	800ae1c <_Balloc>
 800a86c:	4604      	mov	r4, r0
 800a86e:	b940      	cbnz	r0, 800a882 <__gethex+0x182>
 800a870:	4b5d      	ldr	r3, [pc, #372]	; (800a9e8 <__gethex+0x2e8>)
 800a872:	4602      	mov	r2, r0
 800a874:	21de      	movs	r1, #222	; 0xde
 800a876:	485d      	ldr	r0, [pc, #372]	; (800a9ec <__gethex+0x2ec>)
 800a878:	f001 fbcc 	bl	800c014 <__assert_func>
 800a87c:	3101      	adds	r1, #1
 800a87e:	105b      	asrs	r3, r3, #1
 800a880:	e7ee      	b.n	800a860 <__gethex+0x160>
 800a882:	f100 0914 	add.w	r9, r0, #20
 800a886:	f04f 0b00 	mov.w	fp, #0
 800a88a:	f1ca 0301 	rsb	r3, sl, #1
 800a88e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a892:	f8cd b000 	str.w	fp, [sp]
 800a896:	9306      	str	r3, [sp, #24]
 800a898:	42b7      	cmp	r7, r6
 800a89a:	d340      	bcc.n	800a91e <__gethex+0x21e>
 800a89c:	9802      	ldr	r0, [sp, #8]
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	f840 3b04 	str.w	r3, [r0], #4
 800a8a4:	eba0 0009 	sub.w	r0, r0, r9
 800a8a8:	1080      	asrs	r0, r0, #2
 800a8aa:	0146      	lsls	r6, r0, #5
 800a8ac:	6120      	str	r0, [r4, #16]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fba6 	bl	800b000 <__hi0bits>
 800a8b4:	1a30      	subs	r0, r6, r0
 800a8b6:	f8d8 6000 	ldr.w	r6, [r8]
 800a8ba:	42b0      	cmp	r0, r6
 800a8bc:	dd63      	ble.n	800a986 <__gethex+0x286>
 800a8be:	1b87      	subs	r7, r0, r6
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 ff4a 	bl	800b75c <__any_on>
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	b1a8      	cbz	r0, 800a8f8 <__gethex+0x1f8>
 800a8cc:	1e7b      	subs	r3, r7, #1
 800a8ce:	1159      	asrs	r1, r3, #5
 800a8d0:	f003 021f 	and.w	r2, r3, #31
 800a8d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8d8:	f04f 0a01 	mov.w	sl, #1
 800a8dc:	fa0a f202 	lsl.w	r2, sl, r2
 800a8e0:	420a      	tst	r2, r1
 800a8e2:	d009      	beq.n	800a8f8 <__gethex+0x1f8>
 800a8e4:	4553      	cmp	r3, sl
 800a8e6:	dd05      	ble.n	800a8f4 <__gethex+0x1f4>
 800a8e8:	1eb9      	subs	r1, r7, #2
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 ff36 	bl	800b75c <__any_on>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d145      	bne.n	800a980 <__gethex+0x280>
 800a8f4:	f04f 0a02 	mov.w	sl, #2
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff fe99 	bl	800a632 <rshift>
 800a900:	443d      	add	r5, r7
 800a902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a906:	42ab      	cmp	r3, r5
 800a908:	da4c      	bge.n	800a9a4 <__gethex+0x2a4>
 800a90a:	ee18 0a10 	vmov	r0, s16
 800a90e:	4621      	mov	r1, r4
 800a910:	f000 fac4 	bl	800ae9c <_Bfree>
 800a914:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a916:	2300      	movs	r3, #0
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	27a3      	movs	r7, #163	; 0xa3
 800a91c:	e785      	b.n	800a82a <__gethex+0x12a>
 800a91e:	1e73      	subs	r3, r6, #1
 800a920:	9a05      	ldr	r2, [sp, #20]
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a928:	4293      	cmp	r3, r2
 800a92a:	d019      	beq.n	800a960 <__gethex+0x260>
 800a92c:	f1bb 0f20 	cmp.w	fp, #32
 800a930:	d107      	bne.n	800a942 <__gethex+0x242>
 800a932:	9b02      	ldr	r3, [sp, #8]
 800a934:	9a00      	ldr	r2, [sp, #0]
 800a936:	f843 2b04 	str.w	r2, [r3], #4
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	2300      	movs	r3, #0
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	469b      	mov	fp, r3
 800a942:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a946:	f7ff fec6 	bl	800a6d6 <__hexdig_fun>
 800a94a:	9b00      	ldr	r3, [sp, #0]
 800a94c:	f000 000f 	and.w	r0, r0, #15
 800a950:	fa00 f00b 	lsl.w	r0, r0, fp
 800a954:	4303      	orrs	r3, r0
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	f10b 0b04 	add.w	fp, fp, #4
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	e00d      	b.n	800a97c <__gethex+0x27c>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	9a06      	ldr	r2, [sp, #24]
 800a964:	4413      	add	r3, r2
 800a966:	42bb      	cmp	r3, r7
 800a968:	d3e0      	bcc.n	800a92c <__gethex+0x22c>
 800a96a:	4618      	mov	r0, r3
 800a96c:	9901      	ldr	r1, [sp, #4]
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	4652      	mov	r2, sl
 800a972:	f001 fb1c 	bl	800bfae <strncmp>
 800a976:	9b07      	ldr	r3, [sp, #28]
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1d7      	bne.n	800a92c <__gethex+0x22c>
 800a97c:	461e      	mov	r6, r3
 800a97e:	e78b      	b.n	800a898 <__gethex+0x198>
 800a980:	f04f 0a03 	mov.w	sl, #3
 800a984:	e7b8      	b.n	800a8f8 <__gethex+0x1f8>
 800a986:	da0a      	bge.n	800a99e <__gethex+0x29e>
 800a988:	1a37      	subs	r7, r6, r0
 800a98a:	4621      	mov	r1, r4
 800a98c:	ee18 0a10 	vmov	r0, s16
 800a990:	463a      	mov	r2, r7
 800a992:	f000 fc9f 	bl	800b2d4 <__lshift>
 800a996:	1bed      	subs	r5, r5, r7
 800a998:	4604      	mov	r4, r0
 800a99a:	f100 0914 	add.w	r9, r0, #20
 800a99e:	f04f 0a00 	mov.w	sl, #0
 800a9a2:	e7ae      	b.n	800a902 <__gethex+0x202>
 800a9a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9a8:	42a8      	cmp	r0, r5
 800a9aa:	dd72      	ble.n	800aa92 <__gethex+0x392>
 800a9ac:	1b45      	subs	r5, r0, r5
 800a9ae:	42ae      	cmp	r6, r5
 800a9b0:	dc36      	bgt.n	800aa20 <__gethex+0x320>
 800a9b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d02a      	beq.n	800aa10 <__gethex+0x310>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d02c      	beq.n	800aa18 <__gethex+0x318>
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d11c      	bne.n	800a9fc <__gethex+0x2fc>
 800a9c2:	42ae      	cmp	r6, r5
 800a9c4:	d11a      	bne.n	800a9fc <__gethex+0x2fc>
 800a9c6:	2e01      	cmp	r6, #1
 800a9c8:	d112      	bne.n	800a9f0 <__gethex+0x2f0>
 800a9ca:	9a04      	ldr	r2, [sp, #16]
 800a9cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	f8c9 3000 	str.w	r3, [r9]
 800a9da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9dc:	2762      	movs	r7, #98	; 0x62
 800a9de:	601c      	str	r4, [r3, #0]
 800a9e0:	e723      	b.n	800a82a <__gethex+0x12a>
 800a9e2:	bf00      	nop
 800a9e4:	0800c894 	.word	0x0800c894
 800a9e8:	0800c7b8 	.word	0x0800c7b8
 800a9ec:	0800c82c 	.word	0x0800c82c
 800a9f0:	1e71      	subs	r1, r6, #1
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 feb2 	bl	800b75c <__any_on>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d1e6      	bne.n	800a9ca <__gethex+0x2ca>
 800a9fc:	ee18 0a10 	vmov	r0, s16
 800aa00:	4621      	mov	r1, r4
 800aa02:	f000 fa4b 	bl	800ae9c <_Bfree>
 800aa06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	2750      	movs	r7, #80	; 0x50
 800aa0e:	e70c      	b.n	800a82a <__gethex+0x12a>
 800aa10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1f2      	bne.n	800a9fc <__gethex+0x2fc>
 800aa16:	e7d8      	b.n	800a9ca <__gethex+0x2ca>
 800aa18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1d5      	bne.n	800a9ca <__gethex+0x2ca>
 800aa1e:	e7ed      	b.n	800a9fc <__gethex+0x2fc>
 800aa20:	1e6f      	subs	r7, r5, #1
 800aa22:	f1ba 0f00 	cmp.w	sl, #0
 800aa26:	d131      	bne.n	800aa8c <__gethex+0x38c>
 800aa28:	b127      	cbz	r7, 800aa34 <__gethex+0x334>
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fe95 	bl	800b75c <__any_on>
 800aa32:	4682      	mov	sl, r0
 800aa34:	117b      	asrs	r3, r7, #5
 800aa36:	2101      	movs	r1, #1
 800aa38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa3c:	f007 071f 	and.w	r7, r7, #31
 800aa40:	fa01 f707 	lsl.w	r7, r1, r7
 800aa44:	421f      	tst	r7, r3
 800aa46:	4629      	mov	r1, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	bf18      	it	ne
 800aa4c:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa50:	1b76      	subs	r6, r6, r5
 800aa52:	f7ff fdee 	bl	800a632 <rshift>
 800aa56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa5a:	2702      	movs	r7, #2
 800aa5c:	f1ba 0f00 	cmp.w	sl, #0
 800aa60:	d048      	beq.n	800aaf4 <__gethex+0x3f4>
 800aa62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d015      	beq.n	800aa96 <__gethex+0x396>
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d017      	beq.n	800aa9e <__gethex+0x39e>
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d109      	bne.n	800aa86 <__gethex+0x386>
 800aa72:	f01a 0f02 	tst.w	sl, #2
 800aa76:	d006      	beq.n	800aa86 <__gethex+0x386>
 800aa78:	f8d9 0000 	ldr.w	r0, [r9]
 800aa7c:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa80:	f01a 0f01 	tst.w	sl, #1
 800aa84:	d10e      	bne.n	800aaa4 <__gethex+0x3a4>
 800aa86:	f047 0710 	orr.w	r7, r7, #16
 800aa8a:	e033      	b.n	800aaf4 <__gethex+0x3f4>
 800aa8c:	f04f 0a01 	mov.w	sl, #1
 800aa90:	e7d0      	b.n	800aa34 <__gethex+0x334>
 800aa92:	2701      	movs	r7, #1
 800aa94:	e7e2      	b.n	800aa5c <__gethex+0x35c>
 800aa96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa98:	f1c3 0301 	rsb	r3, r3, #1
 800aa9c:	9315      	str	r3, [sp, #84]	; 0x54
 800aa9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d0f0      	beq.n	800aa86 <__gethex+0x386>
 800aaa4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aaa8:	f104 0314 	add.w	r3, r4, #20
 800aaac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aab0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aab4:	f04f 0c00 	mov.w	ip, #0
 800aab8:	4618      	mov	r0, r3
 800aaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aac2:	d01c      	beq.n	800aafe <__gethex+0x3fe>
 800aac4:	3201      	adds	r2, #1
 800aac6:	6002      	str	r2, [r0, #0]
 800aac8:	2f02      	cmp	r7, #2
 800aaca:	f104 0314 	add.w	r3, r4, #20
 800aace:	d13f      	bne.n	800ab50 <__gethex+0x450>
 800aad0:	f8d8 2000 	ldr.w	r2, [r8]
 800aad4:	3a01      	subs	r2, #1
 800aad6:	42b2      	cmp	r2, r6
 800aad8:	d10a      	bne.n	800aaf0 <__gethex+0x3f0>
 800aada:	1171      	asrs	r1, r6, #5
 800aadc:	2201      	movs	r2, #1
 800aade:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aae2:	f006 061f 	and.w	r6, r6, #31
 800aae6:	fa02 f606 	lsl.w	r6, r2, r6
 800aaea:	421e      	tst	r6, r3
 800aaec:	bf18      	it	ne
 800aaee:	4617      	movne	r7, r2
 800aaf0:	f047 0720 	orr.w	r7, r7, #32
 800aaf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaf6:	601c      	str	r4, [r3, #0]
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	601d      	str	r5, [r3, #0]
 800aafc:	e695      	b.n	800a82a <__gethex+0x12a>
 800aafe:	4299      	cmp	r1, r3
 800ab00:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab04:	d8d8      	bhi.n	800aab8 <__gethex+0x3b8>
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	459b      	cmp	fp, r3
 800ab0a:	db19      	blt.n	800ab40 <__gethex+0x440>
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	ee18 0a10 	vmov	r0, s16
 800ab12:	3101      	adds	r1, #1
 800ab14:	f000 f982 	bl	800ae1c <_Balloc>
 800ab18:	4681      	mov	r9, r0
 800ab1a:	b918      	cbnz	r0, 800ab24 <__gethex+0x424>
 800ab1c:	4b1a      	ldr	r3, [pc, #104]	; (800ab88 <__gethex+0x488>)
 800ab1e:	4602      	mov	r2, r0
 800ab20:	2184      	movs	r1, #132	; 0x84
 800ab22:	e6a8      	b.n	800a876 <__gethex+0x176>
 800ab24:	6922      	ldr	r2, [r4, #16]
 800ab26:	3202      	adds	r2, #2
 800ab28:	f104 010c 	add.w	r1, r4, #12
 800ab2c:	0092      	lsls	r2, r2, #2
 800ab2e:	300c      	adds	r0, #12
 800ab30:	f7fc fe9c 	bl	800786c <memcpy>
 800ab34:	4621      	mov	r1, r4
 800ab36:	ee18 0a10 	vmov	r0, s16
 800ab3a:	f000 f9af 	bl	800ae9c <_Bfree>
 800ab3e:	464c      	mov	r4, r9
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab48:	6122      	str	r2, [r4, #16]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	615a      	str	r2, [r3, #20]
 800ab4e:	e7bb      	b.n	800aac8 <__gethex+0x3c8>
 800ab50:	6922      	ldr	r2, [r4, #16]
 800ab52:	455a      	cmp	r2, fp
 800ab54:	dd0b      	ble.n	800ab6e <__gethex+0x46e>
 800ab56:	2101      	movs	r1, #1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7ff fd6a 	bl	800a632 <rshift>
 800ab5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab62:	3501      	adds	r5, #1
 800ab64:	42ab      	cmp	r3, r5
 800ab66:	f6ff aed0 	blt.w	800a90a <__gethex+0x20a>
 800ab6a:	2701      	movs	r7, #1
 800ab6c:	e7c0      	b.n	800aaf0 <__gethex+0x3f0>
 800ab6e:	f016 061f 	ands.w	r6, r6, #31
 800ab72:	d0fa      	beq.n	800ab6a <__gethex+0x46a>
 800ab74:	4453      	add	r3, sl
 800ab76:	f1c6 0620 	rsb	r6, r6, #32
 800ab7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab7e:	f000 fa3f 	bl	800b000 <__hi0bits>
 800ab82:	42b0      	cmp	r0, r6
 800ab84:	dbe7      	blt.n	800ab56 <__gethex+0x456>
 800ab86:	e7f0      	b.n	800ab6a <__gethex+0x46a>
 800ab88:	0800c7b8 	.word	0x0800c7b8

0800ab8c <L_shift>:
 800ab8c:	f1c2 0208 	rsb	r2, r2, #8
 800ab90:	0092      	lsls	r2, r2, #2
 800ab92:	b570      	push	{r4, r5, r6, lr}
 800ab94:	f1c2 0620 	rsb	r6, r2, #32
 800ab98:	6843      	ldr	r3, [r0, #4]
 800ab9a:	6804      	ldr	r4, [r0, #0]
 800ab9c:	fa03 f506 	lsl.w	r5, r3, r6
 800aba0:	432c      	orrs	r4, r5
 800aba2:	40d3      	lsrs	r3, r2
 800aba4:	6004      	str	r4, [r0, #0]
 800aba6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abaa:	4288      	cmp	r0, r1
 800abac:	d3f4      	bcc.n	800ab98 <L_shift+0xc>
 800abae:	bd70      	pop	{r4, r5, r6, pc}

0800abb0 <__match>:
 800abb0:	b530      	push	{r4, r5, lr}
 800abb2:	6803      	ldr	r3, [r0, #0]
 800abb4:	3301      	adds	r3, #1
 800abb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abba:	b914      	cbnz	r4, 800abc2 <__match+0x12>
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	2001      	movs	r0, #1
 800abc0:	bd30      	pop	{r4, r5, pc}
 800abc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abca:	2d19      	cmp	r5, #25
 800abcc:	bf98      	it	ls
 800abce:	3220      	addls	r2, #32
 800abd0:	42a2      	cmp	r2, r4
 800abd2:	d0f0      	beq.n	800abb6 <__match+0x6>
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7f3      	b.n	800abc0 <__match+0x10>

0800abd8 <__hexnan>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	680b      	ldr	r3, [r1, #0]
 800abde:	115e      	asrs	r6, r3, #5
 800abe0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abe4:	f013 031f 	ands.w	r3, r3, #31
 800abe8:	b087      	sub	sp, #28
 800abea:	bf18      	it	ne
 800abec:	3604      	addne	r6, #4
 800abee:	2500      	movs	r5, #0
 800abf0:	1f37      	subs	r7, r6, #4
 800abf2:	4690      	mov	r8, r2
 800abf4:	6802      	ldr	r2, [r0, #0]
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	4682      	mov	sl, r0
 800abfa:	f846 5c04 	str.w	r5, [r6, #-4]
 800abfe:	46b9      	mov	r9, r7
 800ac00:	463c      	mov	r4, r7
 800ac02:	9502      	str	r5, [sp, #8]
 800ac04:	46ab      	mov	fp, r5
 800ac06:	7851      	ldrb	r1, [r2, #1]
 800ac08:	1c53      	adds	r3, r2, #1
 800ac0a:	9303      	str	r3, [sp, #12]
 800ac0c:	b341      	cbz	r1, 800ac60 <__hexnan+0x88>
 800ac0e:	4608      	mov	r0, r1
 800ac10:	9205      	str	r2, [sp, #20]
 800ac12:	9104      	str	r1, [sp, #16]
 800ac14:	f7ff fd5f 	bl	800a6d6 <__hexdig_fun>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d14f      	bne.n	800acbc <__hexnan+0xe4>
 800ac1c:	9904      	ldr	r1, [sp, #16]
 800ac1e:	9a05      	ldr	r2, [sp, #20]
 800ac20:	2920      	cmp	r1, #32
 800ac22:	d818      	bhi.n	800ac56 <__hexnan+0x7e>
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	459b      	cmp	fp, r3
 800ac28:	dd13      	ble.n	800ac52 <__hexnan+0x7a>
 800ac2a:	454c      	cmp	r4, r9
 800ac2c:	d206      	bcs.n	800ac3c <__hexnan+0x64>
 800ac2e:	2d07      	cmp	r5, #7
 800ac30:	dc04      	bgt.n	800ac3c <__hexnan+0x64>
 800ac32:	462a      	mov	r2, r5
 800ac34:	4649      	mov	r1, r9
 800ac36:	4620      	mov	r0, r4
 800ac38:	f7ff ffa8 	bl	800ab8c <L_shift>
 800ac3c:	4544      	cmp	r4, r8
 800ac3e:	d950      	bls.n	800ace2 <__hexnan+0x10a>
 800ac40:	2300      	movs	r3, #0
 800ac42:	f1a4 0904 	sub.w	r9, r4, #4
 800ac46:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac4a:	f8cd b008 	str.w	fp, [sp, #8]
 800ac4e:	464c      	mov	r4, r9
 800ac50:	461d      	mov	r5, r3
 800ac52:	9a03      	ldr	r2, [sp, #12]
 800ac54:	e7d7      	b.n	800ac06 <__hexnan+0x2e>
 800ac56:	2929      	cmp	r1, #41	; 0x29
 800ac58:	d156      	bne.n	800ad08 <__hexnan+0x130>
 800ac5a:	3202      	adds	r2, #2
 800ac5c:	f8ca 2000 	str.w	r2, [sl]
 800ac60:	f1bb 0f00 	cmp.w	fp, #0
 800ac64:	d050      	beq.n	800ad08 <__hexnan+0x130>
 800ac66:	454c      	cmp	r4, r9
 800ac68:	d206      	bcs.n	800ac78 <__hexnan+0xa0>
 800ac6a:	2d07      	cmp	r5, #7
 800ac6c:	dc04      	bgt.n	800ac78 <__hexnan+0xa0>
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4649      	mov	r1, r9
 800ac72:	4620      	mov	r0, r4
 800ac74:	f7ff ff8a 	bl	800ab8c <L_shift>
 800ac78:	4544      	cmp	r4, r8
 800ac7a:	d934      	bls.n	800ace6 <__hexnan+0x10e>
 800ac7c:	f1a8 0204 	sub.w	r2, r8, #4
 800ac80:	4623      	mov	r3, r4
 800ac82:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac86:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac8a:	429f      	cmp	r7, r3
 800ac8c:	d2f9      	bcs.n	800ac82 <__hexnan+0xaa>
 800ac8e:	1b3b      	subs	r3, r7, r4
 800ac90:	f023 0303 	bic.w	r3, r3, #3
 800ac94:	3304      	adds	r3, #4
 800ac96:	3401      	adds	r4, #1
 800ac98:	3e03      	subs	r6, #3
 800ac9a:	42b4      	cmp	r4, r6
 800ac9c:	bf88      	it	hi
 800ac9e:	2304      	movhi	r3, #4
 800aca0:	4443      	add	r3, r8
 800aca2:	2200      	movs	r2, #0
 800aca4:	f843 2b04 	str.w	r2, [r3], #4
 800aca8:	429f      	cmp	r7, r3
 800acaa:	d2fb      	bcs.n	800aca4 <__hexnan+0xcc>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	b91b      	cbnz	r3, 800acb8 <__hexnan+0xe0>
 800acb0:	4547      	cmp	r7, r8
 800acb2:	d127      	bne.n	800ad04 <__hexnan+0x12c>
 800acb4:	2301      	movs	r3, #1
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	2005      	movs	r0, #5
 800acba:	e026      	b.n	800ad0a <__hexnan+0x132>
 800acbc:	3501      	adds	r5, #1
 800acbe:	2d08      	cmp	r5, #8
 800acc0:	f10b 0b01 	add.w	fp, fp, #1
 800acc4:	dd06      	ble.n	800acd4 <__hexnan+0xfc>
 800acc6:	4544      	cmp	r4, r8
 800acc8:	d9c3      	bls.n	800ac52 <__hexnan+0x7a>
 800acca:	2300      	movs	r3, #0
 800accc:	f844 3c04 	str.w	r3, [r4, #-4]
 800acd0:	2501      	movs	r5, #1
 800acd2:	3c04      	subs	r4, #4
 800acd4:	6822      	ldr	r2, [r4, #0]
 800acd6:	f000 000f 	and.w	r0, r0, #15
 800acda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800acde:	6022      	str	r2, [r4, #0]
 800ace0:	e7b7      	b.n	800ac52 <__hexnan+0x7a>
 800ace2:	2508      	movs	r5, #8
 800ace4:	e7b5      	b.n	800ac52 <__hexnan+0x7a>
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0df      	beq.n	800acac <__hexnan+0xd4>
 800acec:	f04f 32ff 	mov.w	r2, #4294967295
 800acf0:	f1c3 0320 	rsb	r3, r3, #32
 800acf4:	fa22 f303 	lsr.w	r3, r2, r3
 800acf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800acfc:	401a      	ands	r2, r3
 800acfe:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad02:	e7d3      	b.n	800acac <__hexnan+0xd4>
 800ad04:	3f04      	subs	r7, #4
 800ad06:	e7d1      	b.n	800acac <__hexnan+0xd4>
 800ad08:	2004      	movs	r0, #4
 800ad0a:	b007      	add	sp, #28
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad10 <_localeconv_r>:
 800ad10:	4800      	ldr	r0, [pc, #0]	; (800ad14 <_localeconv_r+0x4>)
 800ad12:	4770      	bx	lr
 800ad14:	20000174 	.word	0x20000174

0800ad18 <__retarget_lock_init_recursive>:
 800ad18:	4770      	bx	lr

0800ad1a <__retarget_lock_acquire_recursive>:
 800ad1a:	4770      	bx	lr

0800ad1c <__retarget_lock_release_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__swhatbuf_r>:
 800ad1e:	b570      	push	{r4, r5, r6, lr}
 800ad20:	460e      	mov	r6, r1
 800ad22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad26:	2900      	cmp	r1, #0
 800ad28:	b096      	sub	sp, #88	; 0x58
 800ad2a:	4614      	mov	r4, r2
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	da08      	bge.n	800ad42 <__swhatbuf_r+0x24>
 800ad30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	602a      	str	r2, [r5, #0]
 800ad38:	061a      	lsls	r2, r3, #24
 800ad3a:	d410      	bmi.n	800ad5e <__swhatbuf_r+0x40>
 800ad3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad40:	e00e      	b.n	800ad60 <__swhatbuf_r+0x42>
 800ad42:	466a      	mov	r2, sp
 800ad44:	f001 f9a6 	bl	800c094 <_fstat_r>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	dbf1      	blt.n	800ad30 <__swhatbuf_r+0x12>
 800ad4c:	9a01      	ldr	r2, [sp, #4]
 800ad4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad56:	425a      	negs	r2, r3
 800ad58:	415a      	adcs	r2, r3
 800ad5a:	602a      	str	r2, [r5, #0]
 800ad5c:	e7ee      	b.n	800ad3c <__swhatbuf_r+0x1e>
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	2000      	movs	r0, #0
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	b016      	add	sp, #88	; 0x58
 800ad66:	bd70      	pop	{r4, r5, r6, pc}

0800ad68 <__smakebuf_r>:
 800ad68:	898b      	ldrh	r3, [r1, #12]
 800ad6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad6c:	079d      	lsls	r5, r3, #30
 800ad6e:	4606      	mov	r6, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	d507      	bpl.n	800ad84 <__smakebuf_r+0x1c>
 800ad74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	6163      	str	r3, [r4, #20]
 800ad80:	b002      	add	sp, #8
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	ab01      	add	r3, sp, #4
 800ad86:	466a      	mov	r2, sp
 800ad88:	f7ff ffc9 	bl	800ad1e <__swhatbuf_r>
 800ad8c:	9900      	ldr	r1, [sp, #0]
 800ad8e:	4605      	mov	r5, r0
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 fd87 	bl	800b8a4 <_malloc_r>
 800ad96:	b948      	cbnz	r0, 800adac <__smakebuf_r+0x44>
 800ad98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9c:	059a      	lsls	r2, r3, #22
 800ad9e:	d4ef      	bmi.n	800ad80 <__smakebuf_r+0x18>
 800ada0:	f023 0303 	bic.w	r3, r3, #3
 800ada4:	f043 0302 	orr.w	r3, r3, #2
 800ada8:	81a3      	strh	r3, [r4, #12]
 800adaa:	e7e3      	b.n	800ad74 <__smakebuf_r+0xc>
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <__smakebuf_r+0x7c>)
 800adae:	62b3      	str	r3, [r6, #40]	; 0x28
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	6020      	str	r0, [r4, #0]
 800adb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	9b00      	ldr	r3, [sp, #0]
 800adbc:	6163      	str	r3, [r4, #20]
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	6120      	str	r0, [r4, #16]
 800adc2:	b15b      	cbz	r3, 800addc <__smakebuf_r+0x74>
 800adc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc8:	4630      	mov	r0, r6
 800adca:	f001 f975 	bl	800c0b8 <_isatty_r>
 800adce:	b128      	cbz	r0, 800addc <__smakebuf_r+0x74>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	89a0      	ldrh	r0, [r4, #12]
 800adde:	4305      	orrs	r5, r0
 800ade0:	81a5      	strh	r5, [r4, #12]
 800ade2:	e7cd      	b.n	800ad80 <__smakebuf_r+0x18>
 800ade4:	0800a491 	.word	0x0800a491

0800ade8 <malloc>:
 800ade8:	4b02      	ldr	r3, [pc, #8]	; (800adf4 <malloc+0xc>)
 800adea:	4601      	mov	r1, r0
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f000 bd59 	b.w	800b8a4 <_malloc_r>
 800adf2:	bf00      	nop
 800adf4:	2000001c 	.word	0x2000001c

0800adf8 <__ascii_mbtowc>:
 800adf8:	b082      	sub	sp, #8
 800adfa:	b901      	cbnz	r1, 800adfe <__ascii_mbtowc+0x6>
 800adfc:	a901      	add	r1, sp, #4
 800adfe:	b142      	cbz	r2, 800ae12 <__ascii_mbtowc+0x1a>
 800ae00:	b14b      	cbz	r3, 800ae16 <__ascii_mbtowc+0x1e>
 800ae02:	7813      	ldrb	r3, [r2, #0]
 800ae04:	600b      	str	r3, [r1, #0]
 800ae06:	7812      	ldrb	r2, [r2, #0]
 800ae08:	1e10      	subs	r0, r2, #0
 800ae0a:	bf18      	it	ne
 800ae0c:	2001      	movne	r0, #1
 800ae0e:	b002      	add	sp, #8
 800ae10:	4770      	bx	lr
 800ae12:	4610      	mov	r0, r2
 800ae14:	e7fb      	b.n	800ae0e <__ascii_mbtowc+0x16>
 800ae16:	f06f 0001 	mvn.w	r0, #1
 800ae1a:	e7f8      	b.n	800ae0e <__ascii_mbtowc+0x16>

0800ae1c <_Balloc>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	b976      	cbnz	r6, 800ae44 <_Balloc+0x28>
 800ae26:	2010      	movs	r0, #16
 800ae28:	f7ff ffde 	bl	800ade8 <malloc>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	6260      	str	r0, [r4, #36]	; 0x24
 800ae30:	b920      	cbnz	r0, 800ae3c <_Balloc+0x20>
 800ae32:	4b18      	ldr	r3, [pc, #96]	; (800ae94 <_Balloc+0x78>)
 800ae34:	4818      	ldr	r0, [pc, #96]	; (800ae98 <_Balloc+0x7c>)
 800ae36:	2166      	movs	r1, #102	; 0x66
 800ae38:	f001 f8ec 	bl	800c014 <__assert_func>
 800ae3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae40:	6006      	str	r6, [r0, #0]
 800ae42:	60c6      	str	r6, [r0, #12]
 800ae44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae46:	68f3      	ldr	r3, [r6, #12]
 800ae48:	b183      	cbz	r3, 800ae6c <_Balloc+0x50>
 800ae4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae52:	b9b8      	cbnz	r0, 800ae84 <_Balloc+0x68>
 800ae54:	2101      	movs	r1, #1
 800ae56:	fa01 f605 	lsl.w	r6, r1, r5
 800ae5a:	1d72      	adds	r2, r6, #5
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fc9d 	bl	800b79e <_calloc_r>
 800ae64:	b160      	cbz	r0, 800ae80 <_Balloc+0x64>
 800ae66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae6a:	e00e      	b.n	800ae8a <_Balloc+0x6e>
 800ae6c:	2221      	movs	r2, #33	; 0x21
 800ae6e:	2104      	movs	r1, #4
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fc94 	bl	800b79e <_calloc_r>
 800ae76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae78:	60f0      	str	r0, [r6, #12]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e4      	bne.n	800ae4a <_Balloc+0x2e>
 800ae80:	2000      	movs	r0, #0
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	6802      	ldr	r2, [r0, #0]
 800ae86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae90:	e7f7      	b.n	800ae82 <_Balloc+0x66>
 800ae92:	bf00      	nop
 800ae94:	0800c746 	.word	0x0800c746
 800ae98:	0800c8a8 	.word	0x0800c8a8

0800ae9c <_Bfree>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aea0:	4605      	mov	r5, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	b976      	cbnz	r6, 800aec4 <_Bfree+0x28>
 800aea6:	2010      	movs	r0, #16
 800aea8:	f7ff ff9e 	bl	800ade8 <malloc>
 800aeac:	4602      	mov	r2, r0
 800aeae:	6268      	str	r0, [r5, #36]	; 0x24
 800aeb0:	b920      	cbnz	r0, 800aebc <_Bfree+0x20>
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <_Bfree+0x3c>)
 800aeb4:	4809      	ldr	r0, [pc, #36]	; (800aedc <_Bfree+0x40>)
 800aeb6:	218a      	movs	r1, #138	; 0x8a
 800aeb8:	f001 f8ac 	bl	800c014 <__assert_func>
 800aebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec0:	6006      	str	r6, [r0, #0]
 800aec2:	60c6      	str	r6, [r0, #12]
 800aec4:	b13c      	cbz	r4, 800aed6 <_Bfree+0x3a>
 800aec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aec8:	6862      	ldr	r2, [r4, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aed0:	6021      	str	r1, [r4, #0]
 800aed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	0800c746 	.word	0x0800c746
 800aedc:	0800c8a8 	.word	0x0800c8a8

0800aee0 <__multadd>:
 800aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee4:	690d      	ldr	r5, [r1, #16]
 800aee6:	4607      	mov	r7, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	461e      	mov	r6, r3
 800aeec:	f101 0c14 	add.w	ip, r1, #20
 800aef0:	2000      	movs	r0, #0
 800aef2:	f8dc 3000 	ldr.w	r3, [ip]
 800aef6:	b299      	uxth	r1, r3
 800aef8:	fb02 6101 	mla	r1, r2, r1, r6
 800aefc:	0c1e      	lsrs	r6, r3, #16
 800aefe:	0c0b      	lsrs	r3, r1, #16
 800af00:	fb02 3306 	mla	r3, r2, r6, r3
 800af04:	b289      	uxth	r1, r1
 800af06:	3001      	adds	r0, #1
 800af08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af0c:	4285      	cmp	r5, r0
 800af0e:	f84c 1b04 	str.w	r1, [ip], #4
 800af12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af16:	dcec      	bgt.n	800aef2 <__multadd+0x12>
 800af18:	b30e      	cbz	r6, 800af5e <__multadd+0x7e>
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dc19      	bgt.n	800af54 <__multadd+0x74>
 800af20:	6861      	ldr	r1, [r4, #4]
 800af22:	4638      	mov	r0, r7
 800af24:	3101      	adds	r1, #1
 800af26:	f7ff ff79 	bl	800ae1c <_Balloc>
 800af2a:	4680      	mov	r8, r0
 800af2c:	b928      	cbnz	r0, 800af3a <__multadd+0x5a>
 800af2e:	4602      	mov	r2, r0
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <__multadd+0x84>)
 800af32:	480d      	ldr	r0, [pc, #52]	; (800af68 <__multadd+0x88>)
 800af34:	21b5      	movs	r1, #181	; 0xb5
 800af36:	f001 f86d 	bl	800c014 <__assert_func>
 800af3a:	6922      	ldr	r2, [r4, #16]
 800af3c:	3202      	adds	r2, #2
 800af3e:	f104 010c 	add.w	r1, r4, #12
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	300c      	adds	r0, #12
 800af46:	f7fc fc91 	bl	800786c <memcpy>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7ff ffa5 	bl	800ae9c <_Bfree>
 800af52:	4644      	mov	r4, r8
 800af54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af58:	3501      	adds	r5, #1
 800af5a:	615e      	str	r6, [r3, #20]
 800af5c:	6125      	str	r5, [r4, #16]
 800af5e:	4620      	mov	r0, r4
 800af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af64:	0800c7b8 	.word	0x0800c7b8
 800af68:	0800c8a8 	.word	0x0800c8a8

0800af6c <__s2b>:
 800af6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	4615      	mov	r5, r2
 800af74:	461f      	mov	r7, r3
 800af76:	2209      	movs	r2, #9
 800af78:	3308      	adds	r3, #8
 800af7a:	4606      	mov	r6, r0
 800af7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af80:	2100      	movs	r1, #0
 800af82:	2201      	movs	r2, #1
 800af84:	429a      	cmp	r2, r3
 800af86:	db09      	blt.n	800af9c <__s2b+0x30>
 800af88:	4630      	mov	r0, r6
 800af8a:	f7ff ff47 	bl	800ae1c <_Balloc>
 800af8e:	b940      	cbnz	r0, 800afa2 <__s2b+0x36>
 800af90:	4602      	mov	r2, r0
 800af92:	4b19      	ldr	r3, [pc, #100]	; (800aff8 <__s2b+0x8c>)
 800af94:	4819      	ldr	r0, [pc, #100]	; (800affc <__s2b+0x90>)
 800af96:	21ce      	movs	r1, #206	; 0xce
 800af98:	f001 f83c 	bl	800c014 <__assert_func>
 800af9c:	0052      	lsls	r2, r2, #1
 800af9e:	3101      	adds	r1, #1
 800afa0:	e7f0      	b.n	800af84 <__s2b+0x18>
 800afa2:	9b08      	ldr	r3, [sp, #32]
 800afa4:	6143      	str	r3, [r0, #20]
 800afa6:	2d09      	cmp	r5, #9
 800afa8:	f04f 0301 	mov.w	r3, #1
 800afac:	6103      	str	r3, [r0, #16]
 800afae:	dd16      	ble.n	800afde <__s2b+0x72>
 800afb0:	f104 0909 	add.w	r9, r4, #9
 800afb4:	46c8      	mov	r8, r9
 800afb6:	442c      	add	r4, r5
 800afb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afbc:	4601      	mov	r1, r0
 800afbe:	3b30      	subs	r3, #48	; 0x30
 800afc0:	220a      	movs	r2, #10
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ff8c 	bl	800aee0 <__multadd>
 800afc8:	45a0      	cmp	r8, r4
 800afca:	d1f5      	bne.n	800afb8 <__s2b+0x4c>
 800afcc:	f1a5 0408 	sub.w	r4, r5, #8
 800afd0:	444c      	add	r4, r9
 800afd2:	1b2d      	subs	r5, r5, r4
 800afd4:	1963      	adds	r3, r4, r5
 800afd6:	42bb      	cmp	r3, r7
 800afd8:	db04      	blt.n	800afe4 <__s2b+0x78>
 800afda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afde:	340a      	adds	r4, #10
 800afe0:	2509      	movs	r5, #9
 800afe2:	e7f6      	b.n	800afd2 <__s2b+0x66>
 800afe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afe8:	4601      	mov	r1, r0
 800afea:	3b30      	subs	r3, #48	; 0x30
 800afec:	220a      	movs	r2, #10
 800afee:	4630      	mov	r0, r6
 800aff0:	f7ff ff76 	bl	800aee0 <__multadd>
 800aff4:	e7ee      	b.n	800afd4 <__s2b+0x68>
 800aff6:	bf00      	nop
 800aff8:	0800c7b8 	.word	0x0800c7b8
 800affc:	0800c8a8 	.word	0x0800c8a8

0800b000 <__hi0bits>:
 800b000:	0c03      	lsrs	r3, r0, #16
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	b9d3      	cbnz	r3, 800b03c <__hi0bits+0x3c>
 800b006:	0400      	lsls	r0, r0, #16
 800b008:	2310      	movs	r3, #16
 800b00a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b00e:	bf04      	itt	eq
 800b010:	0200      	lsleq	r0, r0, #8
 800b012:	3308      	addeq	r3, #8
 800b014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b018:	bf04      	itt	eq
 800b01a:	0100      	lsleq	r0, r0, #4
 800b01c:	3304      	addeq	r3, #4
 800b01e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b022:	bf04      	itt	eq
 800b024:	0080      	lsleq	r0, r0, #2
 800b026:	3302      	addeq	r3, #2
 800b028:	2800      	cmp	r0, #0
 800b02a:	db05      	blt.n	800b038 <__hi0bits+0x38>
 800b02c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b030:	f103 0301 	add.w	r3, r3, #1
 800b034:	bf08      	it	eq
 800b036:	2320      	moveq	r3, #32
 800b038:	4618      	mov	r0, r3
 800b03a:	4770      	bx	lr
 800b03c:	2300      	movs	r3, #0
 800b03e:	e7e4      	b.n	800b00a <__hi0bits+0xa>

0800b040 <__lo0bits>:
 800b040:	6803      	ldr	r3, [r0, #0]
 800b042:	f013 0207 	ands.w	r2, r3, #7
 800b046:	4601      	mov	r1, r0
 800b048:	d00b      	beq.n	800b062 <__lo0bits+0x22>
 800b04a:	07da      	lsls	r2, r3, #31
 800b04c:	d423      	bmi.n	800b096 <__lo0bits+0x56>
 800b04e:	0798      	lsls	r0, r3, #30
 800b050:	bf49      	itett	mi
 800b052:	085b      	lsrmi	r3, r3, #1
 800b054:	089b      	lsrpl	r3, r3, #2
 800b056:	2001      	movmi	r0, #1
 800b058:	600b      	strmi	r3, [r1, #0]
 800b05a:	bf5c      	itt	pl
 800b05c:	600b      	strpl	r3, [r1, #0]
 800b05e:	2002      	movpl	r0, #2
 800b060:	4770      	bx	lr
 800b062:	b298      	uxth	r0, r3
 800b064:	b9a8      	cbnz	r0, 800b092 <__lo0bits+0x52>
 800b066:	0c1b      	lsrs	r3, r3, #16
 800b068:	2010      	movs	r0, #16
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	b90a      	cbnz	r2, 800b072 <__lo0bits+0x32>
 800b06e:	3008      	adds	r0, #8
 800b070:	0a1b      	lsrs	r3, r3, #8
 800b072:	071a      	lsls	r2, r3, #28
 800b074:	bf04      	itt	eq
 800b076:	091b      	lsreq	r3, r3, #4
 800b078:	3004      	addeq	r0, #4
 800b07a:	079a      	lsls	r2, r3, #30
 800b07c:	bf04      	itt	eq
 800b07e:	089b      	lsreq	r3, r3, #2
 800b080:	3002      	addeq	r0, #2
 800b082:	07da      	lsls	r2, r3, #31
 800b084:	d403      	bmi.n	800b08e <__lo0bits+0x4e>
 800b086:	085b      	lsrs	r3, r3, #1
 800b088:	f100 0001 	add.w	r0, r0, #1
 800b08c:	d005      	beq.n	800b09a <__lo0bits+0x5a>
 800b08e:	600b      	str	r3, [r1, #0]
 800b090:	4770      	bx	lr
 800b092:	4610      	mov	r0, r2
 800b094:	e7e9      	b.n	800b06a <__lo0bits+0x2a>
 800b096:	2000      	movs	r0, #0
 800b098:	4770      	bx	lr
 800b09a:	2020      	movs	r0, #32
 800b09c:	4770      	bx	lr
	...

0800b0a0 <__i2b>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	f7ff feb9 	bl	800ae1c <_Balloc>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	b928      	cbnz	r0, 800b0ba <__i2b+0x1a>
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <__i2b+0x24>)
 800b0b0:	4805      	ldr	r0, [pc, #20]	; (800b0c8 <__i2b+0x28>)
 800b0b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0b6:	f000 ffad 	bl	800c014 <__assert_func>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	6144      	str	r4, [r0, #20]
 800b0be:	6103      	str	r3, [r0, #16]
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	bf00      	nop
 800b0c4:	0800c7b8 	.word	0x0800c7b8
 800b0c8:	0800c8a8 	.word	0x0800c8a8

0800b0cc <__multiply>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	4691      	mov	r9, r2
 800b0d2:	690a      	ldr	r2, [r1, #16]
 800b0d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bfb8      	it	lt
 800b0dc:	460b      	movlt	r3, r1
 800b0de:	460c      	mov	r4, r1
 800b0e0:	bfbc      	itt	lt
 800b0e2:	464c      	movlt	r4, r9
 800b0e4:	4699      	movlt	r9, r3
 800b0e6:	6927      	ldr	r7, [r4, #16]
 800b0e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0ec:	68a3      	ldr	r3, [r4, #8]
 800b0ee:	6861      	ldr	r1, [r4, #4]
 800b0f0:	eb07 060a 	add.w	r6, r7, sl
 800b0f4:	42b3      	cmp	r3, r6
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	bfb8      	it	lt
 800b0fa:	3101      	addlt	r1, #1
 800b0fc:	f7ff fe8e 	bl	800ae1c <_Balloc>
 800b100:	b930      	cbnz	r0, 800b110 <__multiply+0x44>
 800b102:	4602      	mov	r2, r0
 800b104:	4b44      	ldr	r3, [pc, #272]	; (800b218 <__multiply+0x14c>)
 800b106:	4845      	ldr	r0, [pc, #276]	; (800b21c <__multiply+0x150>)
 800b108:	f240 115d 	movw	r1, #349	; 0x15d
 800b10c:	f000 ff82 	bl	800c014 <__assert_func>
 800b110:	f100 0514 	add.w	r5, r0, #20
 800b114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b118:	462b      	mov	r3, r5
 800b11a:	2200      	movs	r2, #0
 800b11c:	4543      	cmp	r3, r8
 800b11e:	d321      	bcc.n	800b164 <__multiply+0x98>
 800b120:	f104 0314 	add.w	r3, r4, #20
 800b124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b128:	f109 0314 	add.w	r3, r9, #20
 800b12c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b130:	9202      	str	r2, [sp, #8]
 800b132:	1b3a      	subs	r2, r7, r4
 800b134:	3a15      	subs	r2, #21
 800b136:	f022 0203 	bic.w	r2, r2, #3
 800b13a:	3204      	adds	r2, #4
 800b13c:	f104 0115 	add.w	r1, r4, #21
 800b140:	428f      	cmp	r7, r1
 800b142:	bf38      	it	cc
 800b144:	2204      	movcc	r2, #4
 800b146:	9201      	str	r2, [sp, #4]
 800b148:	9a02      	ldr	r2, [sp, #8]
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d80c      	bhi.n	800b16a <__multiply+0x9e>
 800b150:	2e00      	cmp	r6, #0
 800b152:	dd03      	ble.n	800b15c <__multiply+0x90>
 800b154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d05a      	beq.n	800b212 <__multiply+0x146>
 800b15c:	6106      	str	r6, [r0, #16]
 800b15e:	b005      	add	sp, #20
 800b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	f843 2b04 	str.w	r2, [r3], #4
 800b168:	e7d8      	b.n	800b11c <__multiply+0x50>
 800b16a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b16e:	f1ba 0f00 	cmp.w	sl, #0
 800b172:	d024      	beq.n	800b1be <__multiply+0xf2>
 800b174:	f104 0e14 	add.w	lr, r4, #20
 800b178:	46a9      	mov	r9, r5
 800b17a:	f04f 0c00 	mov.w	ip, #0
 800b17e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b182:	f8d9 1000 	ldr.w	r1, [r9]
 800b186:	fa1f fb82 	uxth.w	fp, r2
 800b18a:	b289      	uxth	r1, r1
 800b18c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b194:	f8d9 2000 	ldr.w	r2, [r9]
 800b198:	4461      	add	r1, ip
 800b19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b19e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1a6:	b289      	uxth	r1, r1
 800b1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1ac:	4577      	cmp	r7, lr
 800b1ae:	f849 1b04 	str.w	r1, [r9], #4
 800b1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1b6:	d8e2      	bhi.n	800b17e <__multiply+0xb2>
 800b1b8:	9a01      	ldr	r2, [sp, #4]
 800b1ba:	f845 c002 	str.w	ip, [r5, r2]
 800b1be:	9a03      	ldr	r2, [sp, #12]
 800b1c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ca:	d020      	beq.n	800b20e <__multiply+0x142>
 800b1cc:	6829      	ldr	r1, [r5, #0]
 800b1ce:	f104 0c14 	add.w	ip, r4, #20
 800b1d2:	46ae      	mov	lr, r5
 800b1d4:	f04f 0a00 	mov.w	sl, #0
 800b1d8:	f8bc b000 	ldrh.w	fp, [ip]
 800b1dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1e0:	fb09 220b 	mla	r2, r9, fp, r2
 800b1e4:	4492      	add	sl, r2
 800b1e6:	b289      	uxth	r1, r1
 800b1e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1ec:	f84e 1b04 	str.w	r1, [lr], #4
 800b1f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1f4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1f8:	0c12      	lsrs	r2, r2, #16
 800b1fa:	fb09 1102 	mla	r1, r9, r2, r1
 800b1fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b202:	4567      	cmp	r7, ip
 800b204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b208:	d8e6      	bhi.n	800b1d8 <__multiply+0x10c>
 800b20a:	9a01      	ldr	r2, [sp, #4]
 800b20c:	50a9      	str	r1, [r5, r2]
 800b20e:	3504      	adds	r5, #4
 800b210:	e79a      	b.n	800b148 <__multiply+0x7c>
 800b212:	3e01      	subs	r6, #1
 800b214:	e79c      	b.n	800b150 <__multiply+0x84>
 800b216:	bf00      	nop
 800b218:	0800c7b8 	.word	0x0800c7b8
 800b21c:	0800c8a8 	.word	0x0800c8a8

0800b220 <__pow5mult>:
 800b220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b224:	4615      	mov	r5, r2
 800b226:	f012 0203 	ands.w	r2, r2, #3
 800b22a:	4606      	mov	r6, r0
 800b22c:	460f      	mov	r7, r1
 800b22e:	d007      	beq.n	800b240 <__pow5mult+0x20>
 800b230:	4c25      	ldr	r4, [pc, #148]	; (800b2c8 <__pow5mult+0xa8>)
 800b232:	3a01      	subs	r2, #1
 800b234:	2300      	movs	r3, #0
 800b236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b23a:	f7ff fe51 	bl	800aee0 <__multadd>
 800b23e:	4607      	mov	r7, r0
 800b240:	10ad      	asrs	r5, r5, #2
 800b242:	d03d      	beq.n	800b2c0 <__pow5mult+0xa0>
 800b244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b246:	b97c      	cbnz	r4, 800b268 <__pow5mult+0x48>
 800b248:	2010      	movs	r0, #16
 800b24a:	f7ff fdcd 	bl	800ade8 <malloc>
 800b24e:	4602      	mov	r2, r0
 800b250:	6270      	str	r0, [r6, #36]	; 0x24
 800b252:	b928      	cbnz	r0, 800b260 <__pow5mult+0x40>
 800b254:	4b1d      	ldr	r3, [pc, #116]	; (800b2cc <__pow5mult+0xac>)
 800b256:	481e      	ldr	r0, [pc, #120]	; (800b2d0 <__pow5mult+0xb0>)
 800b258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b25c:	f000 feda 	bl	800c014 <__assert_func>
 800b260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b264:	6004      	str	r4, [r0, #0]
 800b266:	60c4      	str	r4, [r0, #12]
 800b268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b270:	b94c      	cbnz	r4, 800b286 <__pow5mult+0x66>
 800b272:	f240 2171 	movw	r1, #625	; 0x271
 800b276:	4630      	mov	r0, r6
 800b278:	f7ff ff12 	bl	800b0a0 <__i2b>
 800b27c:	2300      	movs	r3, #0
 800b27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b282:	4604      	mov	r4, r0
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	f04f 0900 	mov.w	r9, #0
 800b28a:	07eb      	lsls	r3, r5, #31
 800b28c:	d50a      	bpl.n	800b2a4 <__pow5mult+0x84>
 800b28e:	4639      	mov	r1, r7
 800b290:	4622      	mov	r2, r4
 800b292:	4630      	mov	r0, r6
 800b294:	f7ff ff1a 	bl	800b0cc <__multiply>
 800b298:	4639      	mov	r1, r7
 800b29a:	4680      	mov	r8, r0
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7ff fdfd 	bl	800ae9c <_Bfree>
 800b2a2:	4647      	mov	r7, r8
 800b2a4:	106d      	asrs	r5, r5, #1
 800b2a6:	d00b      	beq.n	800b2c0 <__pow5mult+0xa0>
 800b2a8:	6820      	ldr	r0, [r4, #0]
 800b2aa:	b938      	cbnz	r0, 800b2bc <__pow5mult+0x9c>
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff ff0b 	bl	800b0cc <__multiply>
 800b2b6:	6020      	str	r0, [r4, #0]
 800b2b8:	f8c0 9000 	str.w	r9, [r0]
 800b2bc:	4604      	mov	r4, r0
 800b2be:	e7e4      	b.n	800b28a <__pow5mult+0x6a>
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0800c9f8 	.word	0x0800c9f8
 800b2cc:	0800c746 	.word	0x0800c746
 800b2d0:	0800c8a8 	.word	0x0800c8a8

0800b2d4 <__lshift>:
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	460c      	mov	r4, r1
 800b2da:	6849      	ldr	r1, [r1, #4]
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2e2:	68a3      	ldr	r3, [r4, #8]
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	4691      	mov	r9, r2
 800b2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2ec:	f108 0601 	add.w	r6, r8, #1
 800b2f0:	42b3      	cmp	r3, r6
 800b2f2:	db0b      	blt.n	800b30c <__lshift+0x38>
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	f7ff fd91 	bl	800ae1c <_Balloc>
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	b948      	cbnz	r0, 800b312 <__lshift+0x3e>
 800b2fe:	4602      	mov	r2, r0
 800b300:	4b2a      	ldr	r3, [pc, #168]	; (800b3ac <__lshift+0xd8>)
 800b302:	482b      	ldr	r0, [pc, #172]	; (800b3b0 <__lshift+0xdc>)
 800b304:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b308:	f000 fe84 	bl	800c014 <__assert_func>
 800b30c:	3101      	adds	r1, #1
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	e7ee      	b.n	800b2f0 <__lshift+0x1c>
 800b312:	2300      	movs	r3, #0
 800b314:	f100 0114 	add.w	r1, r0, #20
 800b318:	f100 0210 	add.w	r2, r0, #16
 800b31c:	4618      	mov	r0, r3
 800b31e:	4553      	cmp	r3, sl
 800b320:	db37      	blt.n	800b392 <__lshift+0xbe>
 800b322:	6920      	ldr	r0, [r4, #16]
 800b324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b328:	f104 0314 	add.w	r3, r4, #20
 800b32c:	f019 091f 	ands.w	r9, r9, #31
 800b330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b338:	d02f      	beq.n	800b39a <__lshift+0xc6>
 800b33a:	f1c9 0e20 	rsb	lr, r9, #32
 800b33e:	468a      	mov	sl, r1
 800b340:	f04f 0c00 	mov.w	ip, #0
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	fa02 f209 	lsl.w	r2, r2, r9
 800b34a:	ea42 020c 	orr.w	r2, r2, ip
 800b34e:	f84a 2b04 	str.w	r2, [sl], #4
 800b352:	f853 2b04 	ldr.w	r2, [r3], #4
 800b356:	4298      	cmp	r0, r3
 800b358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b35c:	d8f2      	bhi.n	800b344 <__lshift+0x70>
 800b35e:	1b03      	subs	r3, r0, r4
 800b360:	3b15      	subs	r3, #21
 800b362:	f023 0303 	bic.w	r3, r3, #3
 800b366:	3304      	adds	r3, #4
 800b368:	f104 0215 	add.w	r2, r4, #21
 800b36c:	4290      	cmp	r0, r2
 800b36e:	bf38      	it	cc
 800b370:	2304      	movcc	r3, #4
 800b372:	f841 c003 	str.w	ip, [r1, r3]
 800b376:	f1bc 0f00 	cmp.w	ip, #0
 800b37a:	d001      	beq.n	800b380 <__lshift+0xac>
 800b37c:	f108 0602 	add.w	r6, r8, #2
 800b380:	3e01      	subs	r6, #1
 800b382:	4638      	mov	r0, r7
 800b384:	612e      	str	r6, [r5, #16]
 800b386:	4621      	mov	r1, r4
 800b388:	f7ff fd88 	bl	800ae9c <_Bfree>
 800b38c:	4628      	mov	r0, r5
 800b38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b392:	f842 0f04 	str.w	r0, [r2, #4]!
 800b396:	3301      	adds	r3, #1
 800b398:	e7c1      	b.n	800b31e <__lshift+0x4a>
 800b39a:	3904      	subs	r1, #4
 800b39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3a4:	4298      	cmp	r0, r3
 800b3a6:	d8f9      	bhi.n	800b39c <__lshift+0xc8>
 800b3a8:	e7ea      	b.n	800b380 <__lshift+0xac>
 800b3aa:	bf00      	nop
 800b3ac:	0800c7b8 	.word	0x0800c7b8
 800b3b0:	0800c8a8 	.word	0x0800c8a8

0800b3b4 <__mcmp>:
 800b3b4:	b530      	push	{r4, r5, lr}
 800b3b6:	6902      	ldr	r2, [r0, #16]
 800b3b8:	690c      	ldr	r4, [r1, #16]
 800b3ba:	1b12      	subs	r2, r2, r4
 800b3bc:	d10e      	bne.n	800b3dc <__mcmp+0x28>
 800b3be:	f100 0314 	add.w	r3, r0, #20
 800b3c2:	3114      	adds	r1, #20
 800b3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3d4:	42a5      	cmp	r5, r4
 800b3d6:	d003      	beq.n	800b3e0 <__mcmp+0x2c>
 800b3d8:	d305      	bcc.n	800b3e6 <__mcmp+0x32>
 800b3da:	2201      	movs	r2, #1
 800b3dc:	4610      	mov	r0, r2
 800b3de:	bd30      	pop	{r4, r5, pc}
 800b3e0:	4283      	cmp	r3, r0
 800b3e2:	d3f3      	bcc.n	800b3cc <__mcmp+0x18>
 800b3e4:	e7fa      	b.n	800b3dc <__mcmp+0x28>
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ea:	e7f7      	b.n	800b3dc <__mcmp+0x28>

0800b3ec <__mdiff>:
 800b3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4690      	mov	r8, r2
 800b3fa:	f7ff ffdb 	bl	800b3b4 <__mcmp>
 800b3fe:	1e05      	subs	r5, r0, #0
 800b400:	d110      	bne.n	800b424 <__mdiff+0x38>
 800b402:	4629      	mov	r1, r5
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff fd09 	bl	800ae1c <_Balloc>
 800b40a:	b930      	cbnz	r0, 800b41a <__mdiff+0x2e>
 800b40c:	4b3a      	ldr	r3, [pc, #232]	; (800b4f8 <__mdiff+0x10c>)
 800b40e:	4602      	mov	r2, r0
 800b410:	f240 2132 	movw	r1, #562	; 0x232
 800b414:	4839      	ldr	r0, [pc, #228]	; (800b4fc <__mdiff+0x110>)
 800b416:	f000 fdfd 	bl	800c014 <__assert_func>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b424:	bfa4      	itt	ge
 800b426:	4643      	movge	r3, r8
 800b428:	46a0      	movge	r8, r4
 800b42a:	4630      	mov	r0, r6
 800b42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b430:	bfa6      	itte	ge
 800b432:	461c      	movge	r4, r3
 800b434:	2500      	movge	r5, #0
 800b436:	2501      	movlt	r5, #1
 800b438:	f7ff fcf0 	bl	800ae1c <_Balloc>
 800b43c:	b920      	cbnz	r0, 800b448 <__mdiff+0x5c>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <__mdiff+0x10c>)
 800b440:	4602      	mov	r2, r0
 800b442:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b446:	e7e5      	b.n	800b414 <__mdiff+0x28>
 800b448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b44c:	6926      	ldr	r6, [r4, #16]
 800b44e:	60c5      	str	r5, [r0, #12]
 800b450:	f104 0914 	add.w	r9, r4, #20
 800b454:	f108 0514 	add.w	r5, r8, #20
 800b458:	f100 0e14 	add.w	lr, r0, #20
 800b45c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b464:	f108 0210 	add.w	r2, r8, #16
 800b468:	46f2      	mov	sl, lr
 800b46a:	2100      	movs	r1, #0
 800b46c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b474:	fa1f f883 	uxth.w	r8, r3
 800b478:	fa11 f18b 	uxtah	r1, r1, fp
 800b47c:	0c1b      	lsrs	r3, r3, #16
 800b47e:	eba1 0808 	sub.w	r8, r1, r8
 800b482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b48a:	fa1f f888 	uxth.w	r8, r8
 800b48e:	1419      	asrs	r1, r3, #16
 800b490:	454e      	cmp	r6, r9
 800b492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b496:	f84a 3b04 	str.w	r3, [sl], #4
 800b49a:	d8e7      	bhi.n	800b46c <__mdiff+0x80>
 800b49c:	1b33      	subs	r3, r6, r4
 800b49e:	3b15      	subs	r3, #21
 800b4a0:	f023 0303 	bic.w	r3, r3, #3
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	3415      	adds	r4, #21
 800b4a8:	42a6      	cmp	r6, r4
 800b4aa:	bf38      	it	cc
 800b4ac:	2304      	movcc	r3, #4
 800b4ae:	441d      	add	r5, r3
 800b4b0:	4473      	add	r3, lr
 800b4b2:	469e      	mov	lr, r3
 800b4b4:	462e      	mov	r6, r5
 800b4b6:	4566      	cmp	r6, ip
 800b4b8:	d30e      	bcc.n	800b4d8 <__mdiff+0xec>
 800b4ba:	f10c 0203 	add.w	r2, ip, #3
 800b4be:	1b52      	subs	r2, r2, r5
 800b4c0:	f022 0203 	bic.w	r2, r2, #3
 800b4c4:	3d03      	subs	r5, #3
 800b4c6:	45ac      	cmp	ip, r5
 800b4c8:	bf38      	it	cc
 800b4ca:	2200      	movcc	r2, #0
 800b4cc:	441a      	add	r2, r3
 800b4ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4d2:	b17b      	cbz	r3, 800b4f4 <__mdiff+0x108>
 800b4d4:	6107      	str	r7, [r0, #16]
 800b4d6:	e7a3      	b.n	800b420 <__mdiff+0x34>
 800b4d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4dc:	fa11 f288 	uxtah	r2, r1, r8
 800b4e0:	1414      	asrs	r4, r2, #16
 800b4e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4e6:	b292      	uxth	r2, r2
 800b4e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4ec:	f84e 2b04 	str.w	r2, [lr], #4
 800b4f0:	1421      	asrs	r1, r4, #16
 800b4f2:	e7e0      	b.n	800b4b6 <__mdiff+0xca>
 800b4f4:	3f01      	subs	r7, #1
 800b4f6:	e7ea      	b.n	800b4ce <__mdiff+0xe2>
 800b4f8:	0800c7b8 	.word	0x0800c7b8
 800b4fc:	0800c8a8 	.word	0x0800c8a8

0800b500 <__ulp>:
 800b500:	b082      	sub	sp, #8
 800b502:	ed8d 0b00 	vstr	d0, [sp]
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	4912      	ldr	r1, [pc, #72]	; (800b554 <__ulp+0x54>)
 800b50a:	4019      	ands	r1, r3
 800b50c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b510:	2900      	cmp	r1, #0
 800b512:	dd05      	ble.n	800b520 <__ulp+0x20>
 800b514:	2200      	movs	r2, #0
 800b516:	460b      	mov	r3, r1
 800b518:	ec43 2b10 	vmov	d0, r2, r3
 800b51c:	b002      	add	sp, #8
 800b51e:	4770      	bx	lr
 800b520:	4249      	negs	r1, r1
 800b522:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b526:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b52a:	f04f 0200 	mov.w	r2, #0
 800b52e:	f04f 0300 	mov.w	r3, #0
 800b532:	da04      	bge.n	800b53e <__ulp+0x3e>
 800b534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b538:	fa41 f300 	asr.w	r3, r1, r0
 800b53c:	e7ec      	b.n	800b518 <__ulp+0x18>
 800b53e:	f1a0 0114 	sub.w	r1, r0, #20
 800b542:	291e      	cmp	r1, #30
 800b544:	bfda      	itte	le
 800b546:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b54a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b54e:	2101      	movgt	r1, #1
 800b550:	460a      	mov	r2, r1
 800b552:	e7e1      	b.n	800b518 <__ulp+0x18>
 800b554:	7ff00000 	.word	0x7ff00000

0800b558 <__b2d>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	6905      	ldr	r5, [r0, #16]
 800b55c:	f100 0714 	add.w	r7, r0, #20
 800b560:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b564:	1f2e      	subs	r6, r5, #4
 800b566:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff fd48 	bl	800b000 <__hi0bits>
 800b570:	f1c0 0320 	rsb	r3, r0, #32
 800b574:	280a      	cmp	r0, #10
 800b576:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b5f4 <__b2d+0x9c>
 800b57a:	600b      	str	r3, [r1, #0]
 800b57c:	dc14      	bgt.n	800b5a8 <__b2d+0x50>
 800b57e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b582:	fa24 f10e 	lsr.w	r1, r4, lr
 800b586:	42b7      	cmp	r7, r6
 800b588:	ea41 030c 	orr.w	r3, r1, ip
 800b58c:	bf34      	ite	cc
 800b58e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b592:	2100      	movcs	r1, #0
 800b594:	3015      	adds	r0, #21
 800b596:	fa04 f000 	lsl.w	r0, r4, r0
 800b59a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b59e:	ea40 0201 	orr.w	r2, r0, r1
 800b5a2:	ec43 2b10 	vmov	d0, r2, r3
 800b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a8:	42b7      	cmp	r7, r6
 800b5aa:	bf3a      	itte	cc
 800b5ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b5b4:	2100      	movcs	r1, #0
 800b5b6:	380b      	subs	r0, #11
 800b5b8:	d017      	beq.n	800b5ea <__b2d+0x92>
 800b5ba:	f1c0 0c20 	rsb	ip, r0, #32
 800b5be:	fa04 f500 	lsl.w	r5, r4, r0
 800b5c2:	42be      	cmp	r6, r7
 800b5c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b5c8:	ea45 0504 	orr.w	r5, r5, r4
 800b5cc:	bf8c      	ite	hi
 800b5ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b5d2:	2400      	movls	r4, #0
 800b5d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b5d8:	fa01 f000 	lsl.w	r0, r1, r0
 800b5dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b5e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b5e4:	ea40 0204 	orr.w	r2, r0, r4
 800b5e8:	e7db      	b.n	800b5a2 <__b2d+0x4a>
 800b5ea:	ea44 030c 	orr.w	r3, r4, ip
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	e7d7      	b.n	800b5a2 <__b2d+0x4a>
 800b5f2:	bf00      	nop
 800b5f4:	3ff00000 	.word	0x3ff00000

0800b5f8 <__d2b>:
 800b5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	2101      	movs	r1, #1
 800b600:	ec57 6b10 	vmov	r6, r7, d0
 800b604:	4690      	mov	r8, r2
 800b606:	f7ff fc09 	bl	800ae1c <_Balloc>
 800b60a:	4604      	mov	r4, r0
 800b60c:	b930      	cbnz	r0, 800b61c <__d2b+0x24>
 800b60e:	4602      	mov	r2, r0
 800b610:	4b25      	ldr	r3, [pc, #148]	; (800b6a8 <__d2b+0xb0>)
 800b612:	4826      	ldr	r0, [pc, #152]	; (800b6ac <__d2b+0xb4>)
 800b614:	f240 310a 	movw	r1, #778	; 0x30a
 800b618:	f000 fcfc 	bl	800c014 <__assert_func>
 800b61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b624:	bb35      	cbnz	r5, 800b674 <__d2b+0x7c>
 800b626:	2e00      	cmp	r6, #0
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	d028      	beq.n	800b67e <__d2b+0x86>
 800b62c:	4668      	mov	r0, sp
 800b62e:	9600      	str	r6, [sp, #0]
 800b630:	f7ff fd06 	bl	800b040 <__lo0bits>
 800b634:	9900      	ldr	r1, [sp, #0]
 800b636:	b300      	cbz	r0, 800b67a <__d2b+0x82>
 800b638:	9a01      	ldr	r2, [sp, #4]
 800b63a:	f1c0 0320 	rsb	r3, r0, #32
 800b63e:	fa02 f303 	lsl.w	r3, r2, r3
 800b642:	430b      	orrs	r3, r1
 800b644:	40c2      	lsrs	r2, r0
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	9201      	str	r2, [sp, #4]
 800b64a:	9b01      	ldr	r3, [sp, #4]
 800b64c:	61a3      	str	r3, [r4, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bf14      	ite	ne
 800b652:	2202      	movne	r2, #2
 800b654:	2201      	moveq	r2, #1
 800b656:	6122      	str	r2, [r4, #16]
 800b658:	b1d5      	cbz	r5, 800b690 <__d2b+0x98>
 800b65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b65e:	4405      	add	r5, r0
 800b660:	f8c9 5000 	str.w	r5, [r9]
 800b664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b668:	f8c8 0000 	str.w	r0, [r8]
 800b66c:	4620      	mov	r0, r4
 800b66e:	b003      	add	sp, #12
 800b670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b678:	e7d5      	b.n	800b626 <__d2b+0x2e>
 800b67a:	6161      	str	r1, [r4, #20]
 800b67c:	e7e5      	b.n	800b64a <__d2b+0x52>
 800b67e:	a801      	add	r0, sp, #4
 800b680:	f7ff fcde 	bl	800b040 <__lo0bits>
 800b684:	9b01      	ldr	r3, [sp, #4]
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	2201      	movs	r2, #1
 800b68a:	6122      	str	r2, [r4, #16]
 800b68c:	3020      	adds	r0, #32
 800b68e:	e7e3      	b.n	800b658 <__d2b+0x60>
 800b690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b698:	f8c9 0000 	str.w	r0, [r9]
 800b69c:	6918      	ldr	r0, [r3, #16]
 800b69e:	f7ff fcaf 	bl	800b000 <__hi0bits>
 800b6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6a6:	e7df      	b.n	800b668 <__d2b+0x70>
 800b6a8:	0800c7b8 	.word	0x0800c7b8
 800b6ac:	0800c8a8 	.word	0x0800c8a8

0800b6b0 <__ratio>:
 800b6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4688      	mov	r8, r1
 800b6b6:	4669      	mov	r1, sp
 800b6b8:	4681      	mov	r9, r0
 800b6ba:	f7ff ff4d 	bl	800b558 <__b2d>
 800b6be:	a901      	add	r1, sp, #4
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	ec55 4b10 	vmov	r4, r5, d0
 800b6c6:	f7ff ff47 	bl	800b558 <__b2d>
 800b6ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6d2:	eba3 0c02 	sub.w	ip, r3, r2
 800b6d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6da:	1a9b      	subs	r3, r3, r2
 800b6dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6e0:	ec51 0b10 	vmov	r0, r1, d0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bfd6      	itet	le
 800b6e8:	460a      	movle	r2, r1
 800b6ea:	462a      	movgt	r2, r5
 800b6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6f0:	468b      	mov	fp, r1
 800b6f2:	462f      	mov	r7, r5
 800b6f4:	bfd4      	ite	le
 800b6f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6fe:	4620      	mov	r0, r4
 800b700:	ee10 2a10 	vmov	r2, s0
 800b704:	465b      	mov	r3, fp
 800b706:	4639      	mov	r1, r7
 800b708:	f7f5 f878 	bl	80007fc <__aeabi_ddiv>
 800b70c:	ec41 0b10 	vmov	d0, r0, r1
 800b710:	b003      	add	sp, #12
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b716 <__copybits>:
 800b716:	3901      	subs	r1, #1
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	1149      	asrs	r1, r1, #5
 800b71c:	6914      	ldr	r4, [r2, #16]
 800b71e:	3101      	adds	r1, #1
 800b720:	f102 0314 	add.w	r3, r2, #20
 800b724:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b72c:	1f05      	subs	r5, r0, #4
 800b72e:	42a3      	cmp	r3, r4
 800b730:	d30c      	bcc.n	800b74c <__copybits+0x36>
 800b732:	1aa3      	subs	r3, r4, r2
 800b734:	3b11      	subs	r3, #17
 800b736:	f023 0303 	bic.w	r3, r3, #3
 800b73a:	3211      	adds	r2, #17
 800b73c:	42a2      	cmp	r2, r4
 800b73e:	bf88      	it	hi
 800b740:	2300      	movhi	r3, #0
 800b742:	4418      	add	r0, r3
 800b744:	2300      	movs	r3, #0
 800b746:	4288      	cmp	r0, r1
 800b748:	d305      	bcc.n	800b756 <__copybits+0x40>
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b750:	f845 6f04 	str.w	r6, [r5, #4]!
 800b754:	e7eb      	b.n	800b72e <__copybits+0x18>
 800b756:	f840 3b04 	str.w	r3, [r0], #4
 800b75a:	e7f4      	b.n	800b746 <__copybits+0x30>

0800b75c <__any_on>:
 800b75c:	f100 0214 	add.w	r2, r0, #20
 800b760:	6900      	ldr	r0, [r0, #16]
 800b762:	114b      	asrs	r3, r1, #5
 800b764:	4298      	cmp	r0, r3
 800b766:	b510      	push	{r4, lr}
 800b768:	db11      	blt.n	800b78e <__any_on+0x32>
 800b76a:	dd0a      	ble.n	800b782 <__any_on+0x26>
 800b76c:	f011 011f 	ands.w	r1, r1, #31
 800b770:	d007      	beq.n	800b782 <__any_on+0x26>
 800b772:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b776:	fa24 f001 	lsr.w	r0, r4, r1
 800b77a:	fa00 f101 	lsl.w	r1, r0, r1
 800b77e:	428c      	cmp	r4, r1
 800b780:	d10b      	bne.n	800b79a <__any_on+0x3e>
 800b782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b786:	4293      	cmp	r3, r2
 800b788:	d803      	bhi.n	800b792 <__any_on+0x36>
 800b78a:	2000      	movs	r0, #0
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	4603      	mov	r3, r0
 800b790:	e7f7      	b.n	800b782 <__any_on+0x26>
 800b792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b796:	2900      	cmp	r1, #0
 800b798:	d0f5      	beq.n	800b786 <__any_on+0x2a>
 800b79a:	2001      	movs	r0, #1
 800b79c:	e7f6      	b.n	800b78c <__any_on+0x30>

0800b79e <_calloc_r>:
 800b79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7a0:	fba1 2402 	umull	r2, r4, r1, r2
 800b7a4:	b94c      	cbnz	r4, 800b7ba <_calloc_r+0x1c>
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	9201      	str	r2, [sp, #4]
 800b7aa:	f000 f87b 	bl	800b8a4 <_malloc_r>
 800b7ae:	9a01      	ldr	r2, [sp, #4]
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	b930      	cbnz	r0, 800b7c2 <_calloc_r+0x24>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	b003      	add	sp, #12
 800b7b8:	bd30      	pop	{r4, r5, pc}
 800b7ba:	220c      	movs	r2, #12
 800b7bc:	6002      	str	r2, [r0, #0]
 800b7be:	2500      	movs	r5, #0
 800b7c0:	e7f8      	b.n	800b7b4 <_calloc_r+0x16>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	f7fc f860 	bl	8007888 <memset>
 800b7c8:	e7f4      	b.n	800b7b4 <_calloc_r+0x16>
	...

0800b7cc <_free_r>:
 800b7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d044      	beq.n	800b85c <_free_r+0x90>
 800b7d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d6:	9001      	str	r0, [sp, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f1a1 0404 	sub.w	r4, r1, #4
 800b7de:	bfb8      	it	lt
 800b7e0:	18e4      	addlt	r4, r4, r3
 800b7e2:	f000 fca5 	bl	800c130 <__malloc_lock>
 800b7e6:	4a1e      	ldr	r2, [pc, #120]	; (800b860 <_free_r+0x94>)
 800b7e8:	9801      	ldr	r0, [sp, #4]
 800b7ea:	6813      	ldr	r3, [r2, #0]
 800b7ec:	b933      	cbnz	r3, 800b7fc <_free_r+0x30>
 800b7ee:	6063      	str	r3, [r4, #4]
 800b7f0:	6014      	str	r4, [r2, #0]
 800b7f2:	b003      	add	sp, #12
 800b7f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7f8:	f000 bca0 	b.w	800c13c <__malloc_unlock>
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	d908      	bls.n	800b812 <_free_r+0x46>
 800b800:	6825      	ldr	r5, [r4, #0]
 800b802:	1961      	adds	r1, r4, r5
 800b804:	428b      	cmp	r3, r1
 800b806:	bf01      	itttt	eq
 800b808:	6819      	ldreq	r1, [r3, #0]
 800b80a:	685b      	ldreq	r3, [r3, #4]
 800b80c:	1949      	addeq	r1, r1, r5
 800b80e:	6021      	streq	r1, [r4, #0]
 800b810:	e7ed      	b.n	800b7ee <_free_r+0x22>
 800b812:	461a      	mov	r2, r3
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	b10b      	cbz	r3, 800b81c <_free_r+0x50>
 800b818:	42a3      	cmp	r3, r4
 800b81a:	d9fa      	bls.n	800b812 <_free_r+0x46>
 800b81c:	6811      	ldr	r1, [r2, #0]
 800b81e:	1855      	adds	r5, r2, r1
 800b820:	42a5      	cmp	r5, r4
 800b822:	d10b      	bne.n	800b83c <_free_r+0x70>
 800b824:	6824      	ldr	r4, [r4, #0]
 800b826:	4421      	add	r1, r4
 800b828:	1854      	adds	r4, r2, r1
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	6011      	str	r1, [r2, #0]
 800b82e:	d1e0      	bne.n	800b7f2 <_free_r+0x26>
 800b830:	681c      	ldr	r4, [r3, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	6053      	str	r3, [r2, #4]
 800b836:	4421      	add	r1, r4
 800b838:	6011      	str	r1, [r2, #0]
 800b83a:	e7da      	b.n	800b7f2 <_free_r+0x26>
 800b83c:	d902      	bls.n	800b844 <_free_r+0x78>
 800b83e:	230c      	movs	r3, #12
 800b840:	6003      	str	r3, [r0, #0]
 800b842:	e7d6      	b.n	800b7f2 <_free_r+0x26>
 800b844:	6825      	ldr	r5, [r4, #0]
 800b846:	1961      	adds	r1, r4, r5
 800b848:	428b      	cmp	r3, r1
 800b84a:	bf04      	itt	eq
 800b84c:	6819      	ldreq	r1, [r3, #0]
 800b84e:	685b      	ldreq	r3, [r3, #4]
 800b850:	6063      	str	r3, [r4, #4]
 800b852:	bf04      	itt	eq
 800b854:	1949      	addeq	r1, r1, r5
 800b856:	6021      	streq	r1, [r4, #0]
 800b858:	6054      	str	r4, [r2, #4]
 800b85a:	e7ca      	b.n	800b7f2 <_free_r+0x26>
 800b85c:	b003      	add	sp, #12
 800b85e:	bd30      	pop	{r4, r5, pc}
 800b860:	200004f8 	.word	0x200004f8

0800b864 <sbrk_aligned>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	4e0e      	ldr	r6, [pc, #56]	; (800b8a0 <sbrk_aligned+0x3c>)
 800b868:	460c      	mov	r4, r1
 800b86a:	6831      	ldr	r1, [r6, #0]
 800b86c:	4605      	mov	r5, r0
 800b86e:	b911      	cbnz	r1, 800b876 <sbrk_aligned+0x12>
 800b870:	f000 fb4a 	bl	800bf08 <_sbrk_r>
 800b874:	6030      	str	r0, [r6, #0]
 800b876:	4621      	mov	r1, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 fb45 	bl	800bf08 <_sbrk_r>
 800b87e:	1c43      	adds	r3, r0, #1
 800b880:	d00a      	beq.n	800b898 <sbrk_aligned+0x34>
 800b882:	1cc4      	adds	r4, r0, #3
 800b884:	f024 0403 	bic.w	r4, r4, #3
 800b888:	42a0      	cmp	r0, r4
 800b88a:	d007      	beq.n	800b89c <sbrk_aligned+0x38>
 800b88c:	1a21      	subs	r1, r4, r0
 800b88e:	4628      	mov	r0, r5
 800b890:	f000 fb3a 	bl	800bf08 <_sbrk_r>
 800b894:	3001      	adds	r0, #1
 800b896:	d101      	bne.n	800b89c <sbrk_aligned+0x38>
 800b898:	f04f 34ff 	mov.w	r4, #4294967295
 800b89c:	4620      	mov	r0, r4
 800b89e:	bd70      	pop	{r4, r5, r6, pc}
 800b8a0:	200004fc 	.word	0x200004fc

0800b8a4 <_malloc_r>:
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	1ccd      	adds	r5, r1, #3
 800b8aa:	f025 0503 	bic.w	r5, r5, #3
 800b8ae:	3508      	adds	r5, #8
 800b8b0:	2d0c      	cmp	r5, #12
 800b8b2:	bf38      	it	cc
 800b8b4:	250c      	movcc	r5, #12
 800b8b6:	2d00      	cmp	r5, #0
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	db01      	blt.n	800b8c0 <_malloc_r+0x1c>
 800b8bc:	42a9      	cmp	r1, r5
 800b8be:	d905      	bls.n	800b8cc <_malloc_r+0x28>
 800b8c0:	230c      	movs	r3, #12
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8cc:	4e2e      	ldr	r6, [pc, #184]	; (800b988 <_malloc_r+0xe4>)
 800b8ce:	f000 fc2f 	bl	800c130 <__malloc_lock>
 800b8d2:	6833      	ldr	r3, [r6, #0]
 800b8d4:	461c      	mov	r4, r3
 800b8d6:	bb34      	cbnz	r4, 800b926 <_malloc_r+0x82>
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7ff ffc2 	bl	800b864 <sbrk_aligned>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	d14d      	bne.n	800b982 <_malloc_r+0xde>
 800b8e6:	6834      	ldr	r4, [r6, #0]
 800b8e8:	4626      	mov	r6, r4
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d140      	bne.n	800b970 <_malloc_r+0xcc>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	eb04 0803 	add.w	r8, r4, r3
 800b8f8:	f000 fb06 	bl	800bf08 <_sbrk_r>
 800b8fc:	4580      	cmp	r8, r0
 800b8fe:	d13a      	bne.n	800b976 <_malloc_r+0xd2>
 800b900:	6821      	ldr	r1, [r4, #0]
 800b902:	3503      	adds	r5, #3
 800b904:	1a6d      	subs	r5, r5, r1
 800b906:	f025 0503 	bic.w	r5, r5, #3
 800b90a:	3508      	adds	r5, #8
 800b90c:	2d0c      	cmp	r5, #12
 800b90e:	bf38      	it	cc
 800b910:	250c      	movcc	r5, #12
 800b912:	4629      	mov	r1, r5
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff ffa5 	bl	800b864 <sbrk_aligned>
 800b91a:	3001      	adds	r0, #1
 800b91c:	d02b      	beq.n	800b976 <_malloc_r+0xd2>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	442b      	add	r3, r5
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	e00e      	b.n	800b944 <_malloc_r+0xa0>
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	1b52      	subs	r2, r2, r5
 800b92a:	d41e      	bmi.n	800b96a <_malloc_r+0xc6>
 800b92c:	2a0b      	cmp	r2, #11
 800b92e:	d916      	bls.n	800b95e <_malloc_r+0xba>
 800b930:	1961      	adds	r1, r4, r5
 800b932:	42a3      	cmp	r3, r4
 800b934:	6025      	str	r5, [r4, #0]
 800b936:	bf18      	it	ne
 800b938:	6059      	strne	r1, [r3, #4]
 800b93a:	6863      	ldr	r3, [r4, #4]
 800b93c:	bf08      	it	eq
 800b93e:	6031      	streq	r1, [r6, #0]
 800b940:	5162      	str	r2, [r4, r5]
 800b942:	604b      	str	r3, [r1, #4]
 800b944:	4638      	mov	r0, r7
 800b946:	f104 060b 	add.w	r6, r4, #11
 800b94a:	f000 fbf7 	bl	800c13c <__malloc_unlock>
 800b94e:	f026 0607 	bic.w	r6, r6, #7
 800b952:	1d23      	adds	r3, r4, #4
 800b954:	1af2      	subs	r2, r6, r3
 800b956:	d0b6      	beq.n	800b8c6 <_malloc_r+0x22>
 800b958:	1b9b      	subs	r3, r3, r6
 800b95a:	50a3      	str	r3, [r4, r2]
 800b95c:	e7b3      	b.n	800b8c6 <_malloc_r+0x22>
 800b95e:	6862      	ldr	r2, [r4, #4]
 800b960:	42a3      	cmp	r3, r4
 800b962:	bf0c      	ite	eq
 800b964:	6032      	streq	r2, [r6, #0]
 800b966:	605a      	strne	r2, [r3, #4]
 800b968:	e7ec      	b.n	800b944 <_malloc_r+0xa0>
 800b96a:	4623      	mov	r3, r4
 800b96c:	6864      	ldr	r4, [r4, #4]
 800b96e:	e7b2      	b.n	800b8d6 <_malloc_r+0x32>
 800b970:	4634      	mov	r4, r6
 800b972:	6876      	ldr	r6, [r6, #4]
 800b974:	e7b9      	b.n	800b8ea <_malloc_r+0x46>
 800b976:	230c      	movs	r3, #12
 800b978:	603b      	str	r3, [r7, #0]
 800b97a:	4638      	mov	r0, r7
 800b97c:	f000 fbde 	bl	800c13c <__malloc_unlock>
 800b980:	e7a1      	b.n	800b8c6 <_malloc_r+0x22>
 800b982:	6025      	str	r5, [r4, #0]
 800b984:	e7de      	b.n	800b944 <_malloc_r+0xa0>
 800b986:	bf00      	nop
 800b988:	200004f8 	.word	0x200004f8

0800b98c <__ssputs_r>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	688e      	ldr	r6, [r1, #8]
 800b992:	429e      	cmp	r6, r3
 800b994:	4682      	mov	sl, r0
 800b996:	460c      	mov	r4, r1
 800b998:	4690      	mov	r8, r2
 800b99a:	461f      	mov	r7, r3
 800b99c:	d838      	bhi.n	800ba10 <__ssputs_r+0x84>
 800b99e:	898a      	ldrh	r2, [r1, #12]
 800b9a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9a4:	d032      	beq.n	800ba0c <__ssputs_r+0x80>
 800b9a6:	6825      	ldr	r5, [r4, #0]
 800b9a8:	6909      	ldr	r1, [r1, #16]
 800b9aa:	eba5 0901 	sub.w	r9, r5, r1
 800b9ae:	6965      	ldr	r5, [r4, #20]
 800b9b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	444b      	add	r3, r9
 800b9bc:	106d      	asrs	r5, r5, #1
 800b9be:	429d      	cmp	r5, r3
 800b9c0:	bf38      	it	cc
 800b9c2:	461d      	movcc	r5, r3
 800b9c4:	0553      	lsls	r3, r2, #21
 800b9c6:	d531      	bpl.n	800ba2c <__ssputs_r+0xa0>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7ff ff6b 	bl	800b8a4 <_malloc_r>
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	b950      	cbnz	r0, 800b9e8 <__ssputs_r+0x5c>
 800b9d2:	230c      	movs	r3, #12
 800b9d4:	f8ca 3000 	str.w	r3, [sl]
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	6921      	ldr	r1, [r4, #16]
 800b9ea:	464a      	mov	r2, r9
 800b9ec:	f7fb ff3e 	bl	800786c <memcpy>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	6126      	str	r6, [r4, #16]
 800b9fe:	6165      	str	r5, [r4, #20]
 800ba00:	444e      	add	r6, r9
 800ba02:	eba5 0509 	sub.w	r5, r5, r9
 800ba06:	6026      	str	r6, [r4, #0]
 800ba08:	60a5      	str	r5, [r4, #8]
 800ba0a:	463e      	mov	r6, r7
 800ba0c:	42be      	cmp	r6, r7
 800ba0e:	d900      	bls.n	800ba12 <__ssputs_r+0x86>
 800ba10:	463e      	mov	r6, r7
 800ba12:	6820      	ldr	r0, [r4, #0]
 800ba14:	4632      	mov	r2, r6
 800ba16:	4641      	mov	r1, r8
 800ba18:	f000 fb70 	bl	800c0fc <memmove>
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	1b9b      	subs	r3, r3, r6
 800ba20:	60a3      	str	r3, [r4, #8]
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	4433      	add	r3, r6
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7db      	b.n	800b9e4 <__ssputs_r+0x58>
 800ba2c:	462a      	mov	r2, r5
 800ba2e:	f000 fb8b 	bl	800c148 <_realloc_r>
 800ba32:	4606      	mov	r6, r0
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1e1      	bne.n	800b9fc <__ssputs_r+0x70>
 800ba38:	6921      	ldr	r1, [r4, #16]
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	f7ff fec6 	bl	800b7cc <_free_r>
 800ba40:	e7c7      	b.n	800b9d2 <__ssputs_r+0x46>
	...

0800ba44 <_svfiprintf_r>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	4698      	mov	r8, r3
 800ba4a:	898b      	ldrh	r3, [r1, #12]
 800ba4c:	061b      	lsls	r3, r3, #24
 800ba4e:	b09d      	sub	sp, #116	; 0x74
 800ba50:	4607      	mov	r7, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	4614      	mov	r4, r2
 800ba56:	d50e      	bpl.n	800ba76 <_svfiprintf_r+0x32>
 800ba58:	690b      	ldr	r3, [r1, #16]
 800ba5a:	b963      	cbnz	r3, 800ba76 <_svfiprintf_r+0x32>
 800ba5c:	2140      	movs	r1, #64	; 0x40
 800ba5e:	f7ff ff21 	bl	800b8a4 <_malloc_r>
 800ba62:	6028      	str	r0, [r5, #0]
 800ba64:	6128      	str	r0, [r5, #16]
 800ba66:	b920      	cbnz	r0, 800ba72 <_svfiprintf_r+0x2e>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	e0d1      	b.n	800bc16 <_svfiprintf_r+0x1d2>
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	616b      	str	r3, [r5, #20]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7a:	2320      	movs	r3, #32
 800ba7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba84:	2330      	movs	r3, #48	; 0x30
 800ba86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc30 <_svfiprintf_r+0x1ec>
 800ba8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba8e:	f04f 0901 	mov.w	r9, #1
 800ba92:	4623      	mov	r3, r4
 800ba94:	469a      	mov	sl, r3
 800ba96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba9a:	b10a      	cbz	r2, 800baa0 <_svfiprintf_r+0x5c>
 800ba9c:	2a25      	cmp	r2, #37	; 0x25
 800ba9e:	d1f9      	bne.n	800ba94 <_svfiprintf_r+0x50>
 800baa0:	ebba 0b04 	subs.w	fp, sl, r4
 800baa4:	d00b      	beq.n	800babe <_svfiprintf_r+0x7a>
 800baa6:	465b      	mov	r3, fp
 800baa8:	4622      	mov	r2, r4
 800baaa:	4629      	mov	r1, r5
 800baac:	4638      	mov	r0, r7
 800baae:	f7ff ff6d 	bl	800b98c <__ssputs_r>
 800bab2:	3001      	adds	r0, #1
 800bab4:	f000 80aa 	beq.w	800bc0c <_svfiprintf_r+0x1c8>
 800bab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baba:	445a      	add	r2, fp
 800babc:	9209      	str	r2, [sp, #36]	; 0x24
 800babe:	f89a 3000 	ldrb.w	r3, [sl]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80a2 	beq.w	800bc0c <_svfiprintf_r+0x1c8>
 800bac8:	2300      	movs	r3, #0
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad2:	f10a 0a01 	add.w	sl, sl, #1
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bade:	931a      	str	r3, [sp, #104]	; 0x68
 800bae0:	4654      	mov	r4, sl
 800bae2:	2205      	movs	r2, #5
 800bae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae8:	4851      	ldr	r0, [pc, #324]	; (800bc30 <_svfiprintf_r+0x1ec>)
 800baea:	f7f4 fb51 	bl	8000190 <memchr>
 800baee:	9a04      	ldr	r2, [sp, #16]
 800baf0:	b9d8      	cbnz	r0, 800bb2a <_svfiprintf_r+0xe6>
 800baf2:	06d0      	lsls	r0, r2, #27
 800baf4:	bf44      	itt	mi
 800baf6:	2320      	movmi	r3, #32
 800baf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bafc:	0711      	lsls	r1, r2, #28
 800bafe:	bf44      	itt	mi
 800bb00:	232b      	movmi	r3, #43	; 0x2b
 800bb02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb06:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0c:	d015      	beq.n	800bb3a <_svfiprintf_r+0xf6>
 800bb0e:	9a07      	ldr	r2, [sp, #28]
 800bb10:	4654      	mov	r4, sl
 800bb12:	2000      	movs	r0, #0
 800bb14:	f04f 0c0a 	mov.w	ip, #10
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb1e:	3b30      	subs	r3, #48	; 0x30
 800bb20:	2b09      	cmp	r3, #9
 800bb22:	d94e      	bls.n	800bbc2 <_svfiprintf_r+0x17e>
 800bb24:	b1b0      	cbz	r0, 800bb54 <_svfiprintf_r+0x110>
 800bb26:	9207      	str	r2, [sp, #28]
 800bb28:	e014      	b.n	800bb54 <_svfiprintf_r+0x110>
 800bb2a:	eba0 0308 	sub.w	r3, r0, r8
 800bb2e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb32:	4313      	orrs	r3, r2
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	46a2      	mov	sl, r4
 800bb38:	e7d2      	b.n	800bae0 <_svfiprintf_r+0x9c>
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	1d19      	adds	r1, r3, #4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	9103      	str	r1, [sp, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	bfbb      	ittet	lt
 800bb46:	425b      	neglt	r3, r3
 800bb48:	f042 0202 	orrlt.w	r2, r2, #2
 800bb4c:	9307      	strge	r3, [sp, #28]
 800bb4e:	9307      	strlt	r3, [sp, #28]
 800bb50:	bfb8      	it	lt
 800bb52:	9204      	strlt	r2, [sp, #16]
 800bb54:	7823      	ldrb	r3, [r4, #0]
 800bb56:	2b2e      	cmp	r3, #46	; 0x2e
 800bb58:	d10c      	bne.n	800bb74 <_svfiprintf_r+0x130>
 800bb5a:	7863      	ldrb	r3, [r4, #1]
 800bb5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb5e:	d135      	bne.n	800bbcc <_svfiprintf_r+0x188>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	1d1a      	adds	r2, r3, #4
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	9203      	str	r2, [sp, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfb8      	it	lt
 800bb6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb70:	3402      	adds	r4, #2
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc40 <_svfiprintf_r+0x1fc>
 800bb78:	7821      	ldrb	r1, [r4, #0]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	f7f4 fb07 	bl	8000190 <memchr>
 800bb82:	b140      	cbz	r0, 800bb96 <_svfiprintf_r+0x152>
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	eba0 000a 	sub.w	r0, r0, sl
 800bb8a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	4303      	orrs	r3, r0
 800bb92:	3401      	adds	r4, #1
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9a:	4826      	ldr	r0, [pc, #152]	; (800bc34 <_svfiprintf_r+0x1f0>)
 800bb9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bba0:	2206      	movs	r2, #6
 800bba2:	f7f4 faf5 	bl	8000190 <memchr>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d038      	beq.n	800bc1c <_svfiprintf_r+0x1d8>
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <_svfiprintf_r+0x1f4>)
 800bbac:	bb1b      	cbnz	r3, 800bbf6 <_svfiprintf_r+0x1b2>
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	f023 0307 	bic.w	r3, r3, #7
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	9303      	str	r3, [sp, #12]
 800bbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbc:	4433      	add	r3, r6
 800bbbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc0:	e767      	b.n	800ba92 <_svfiprintf_r+0x4e>
 800bbc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	2001      	movs	r0, #1
 800bbca:	e7a5      	b.n	800bb18 <_svfiprintf_r+0xd4>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	3401      	adds	r4, #1
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f04f 0c0a 	mov.w	ip, #10
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbde:	3a30      	subs	r2, #48	; 0x30
 800bbe0:	2a09      	cmp	r2, #9
 800bbe2:	d903      	bls.n	800bbec <_svfiprintf_r+0x1a8>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0c5      	beq.n	800bb74 <_svfiprintf_r+0x130>
 800bbe8:	9105      	str	r1, [sp, #20]
 800bbea:	e7c3      	b.n	800bb74 <_svfiprintf_r+0x130>
 800bbec:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e7f0      	b.n	800bbd8 <_svfiprintf_r+0x194>
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	462a      	mov	r2, r5
 800bbfc:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <_svfiprintf_r+0x1f8>)
 800bbfe:	a904      	add	r1, sp, #16
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7fb fee9 	bl	80079d8 <_printf_float>
 800bc06:	1c42      	adds	r2, r0, #1
 800bc08:	4606      	mov	r6, r0
 800bc0a:	d1d6      	bne.n	800bbba <_svfiprintf_r+0x176>
 800bc0c:	89ab      	ldrh	r3, [r5, #12]
 800bc0e:	065b      	lsls	r3, r3, #25
 800bc10:	f53f af2c 	bmi.w	800ba6c <_svfiprintf_r+0x28>
 800bc14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc16:	b01d      	add	sp, #116	; 0x74
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	ab03      	add	r3, sp, #12
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	462a      	mov	r2, r5
 800bc22:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <_svfiprintf_r+0x1f8>)
 800bc24:	a904      	add	r1, sp, #16
 800bc26:	4638      	mov	r0, r7
 800bc28:	f7fc f97a 	bl	8007f20 <_printf_i>
 800bc2c:	e7eb      	b.n	800bc06 <_svfiprintf_r+0x1c2>
 800bc2e:	bf00      	nop
 800bc30:	0800ca04 	.word	0x0800ca04
 800bc34:	0800ca0e 	.word	0x0800ca0e
 800bc38:	080079d9 	.word	0x080079d9
 800bc3c:	0800b98d 	.word	0x0800b98d
 800bc40:	0800ca0a 	.word	0x0800ca0a

0800bc44 <__sfputc_r>:
 800bc44:	6893      	ldr	r3, [r2, #8]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	b410      	push	{r4}
 800bc4c:	6093      	str	r3, [r2, #8]
 800bc4e:	da08      	bge.n	800bc62 <__sfputc_r+0x1e>
 800bc50:	6994      	ldr	r4, [r2, #24]
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	db01      	blt.n	800bc5a <__sfputc_r+0x16>
 800bc56:	290a      	cmp	r1, #10
 800bc58:	d103      	bne.n	800bc62 <__sfputc_r+0x1e>
 800bc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc5e:	f7fd bbf7 	b.w	8009450 <__swbuf_r>
 800bc62:	6813      	ldr	r3, [r2, #0]
 800bc64:	1c58      	adds	r0, r3, #1
 800bc66:	6010      	str	r0, [r2, #0]
 800bc68:	7019      	strb	r1, [r3, #0]
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <__sfputs_r>:
 800bc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc74:	4606      	mov	r6, r0
 800bc76:	460f      	mov	r7, r1
 800bc78:	4614      	mov	r4, r2
 800bc7a:	18d5      	adds	r5, r2, r3
 800bc7c:	42ac      	cmp	r4, r5
 800bc7e:	d101      	bne.n	800bc84 <__sfputs_r+0x12>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e007      	b.n	800bc94 <__sfputs_r+0x22>
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	463a      	mov	r2, r7
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff ffda 	bl	800bc44 <__sfputc_r>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d1f3      	bne.n	800bc7c <__sfputs_r+0xa>
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc98 <_vfiprintf_r>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	b09d      	sub	sp, #116	; 0x74
 800bca0:	4614      	mov	r4, r2
 800bca2:	4698      	mov	r8, r3
 800bca4:	4606      	mov	r6, r0
 800bca6:	b118      	cbz	r0, 800bcb0 <_vfiprintf_r+0x18>
 800bca8:	6983      	ldr	r3, [r0, #24]
 800bcaa:	b90b      	cbnz	r3, 800bcb0 <_vfiprintf_r+0x18>
 800bcac:	f7fe fc24 	bl	800a4f8 <__sinit>
 800bcb0:	4b89      	ldr	r3, [pc, #548]	; (800bed8 <_vfiprintf_r+0x240>)
 800bcb2:	429d      	cmp	r5, r3
 800bcb4:	d11b      	bne.n	800bcee <_vfiprintf_r+0x56>
 800bcb6:	6875      	ldr	r5, [r6, #4]
 800bcb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d405      	bmi.n	800bcca <_vfiprintf_r+0x32>
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	059a      	lsls	r2, r3, #22
 800bcc2:	d402      	bmi.n	800bcca <_vfiprintf_r+0x32>
 800bcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc6:	f7ff f828 	bl	800ad1a <__retarget_lock_acquire_recursive>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	071b      	lsls	r3, r3, #28
 800bcce:	d501      	bpl.n	800bcd4 <_vfiprintf_r+0x3c>
 800bcd0:	692b      	ldr	r3, [r5, #16]
 800bcd2:	b9eb      	cbnz	r3, 800bd10 <_vfiprintf_r+0x78>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7fd fc0c 	bl	80094f4 <__swsetup_r>
 800bcdc:	b1c0      	cbz	r0, 800bd10 <_vfiprintf_r+0x78>
 800bcde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce0:	07dc      	lsls	r4, r3, #31
 800bce2:	d50e      	bpl.n	800bd02 <_vfiprintf_r+0x6a>
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	b01d      	add	sp, #116	; 0x74
 800bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	4b7b      	ldr	r3, [pc, #492]	; (800bedc <_vfiprintf_r+0x244>)
 800bcf0:	429d      	cmp	r5, r3
 800bcf2:	d101      	bne.n	800bcf8 <_vfiprintf_r+0x60>
 800bcf4:	68b5      	ldr	r5, [r6, #8]
 800bcf6:	e7df      	b.n	800bcb8 <_vfiprintf_r+0x20>
 800bcf8:	4b79      	ldr	r3, [pc, #484]	; (800bee0 <_vfiprintf_r+0x248>)
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	bf08      	it	eq
 800bcfe:	68f5      	ldreq	r5, [r6, #12]
 800bd00:	e7da      	b.n	800bcb8 <_vfiprintf_r+0x20>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	0598      	lsls	r0, r3, #22
 800bd06:	d4ed      	bmi.n	800bce4 <_vfiprintf_r+0x4c>
 800bd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0a:	f7ff f807 	bl	800ad1c <__retarget_lock_release_recursive>
 800bd0e:	e7e9      	b.n	800bce4 <_vfiprintf_r+0x4c>
 800bd10:	2300      	movs	r3, #0
 800bd12:	9309      	str	r3, [sp, #36]	; 0x24
 800bd14:	2320      	movs	r3, #32
 800bd16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd1e:	2330      	movs	r3, #48	; 0x30
 800bd20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bee4 <_vfiprintf_r+0x24c>
 800bd24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd28:	f04f 0901 	mov.w	r9, #1
 800bd2c:	4623      	mov	r3, r4
 800bd2e:	469a      	mov	sl, r3
 800bd30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd34:	b10a      	cbz	r2, 800bd3a <_vfiprintf_r+0xa2>
 800bd36:	2a25      	cmp	r2, #37	; 0x25
 800bd38:	d1f9      	bne.n	800bd2e <_vfiprintf_r+0x96>
 800bd3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd3e:	d00b      	beq.n	800bd58 <_vfiprintf_r+0xc0>
 800bd40:	465b      	mov	r3, fp
 800bd42:	4622      	mov	r2, r4
 800bd44:	4629      	mov	r1, r5
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7ff ff93 	bl	800bc72 <__sfputs_r>
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f000 80aa 	beq.w	800bea6 <_vfiprintf_r+0x20e>
 800bd52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd54:	445a      	add	r2, fp
 800bd56:	9209      	str	r2, [sp, #36]	; 0x24
 800bd58:	f89a 3000 	ldrb.w	r3, [sl]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 80a2 	beq.w	800bea6 <_vfiprintf_r+0x20e>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295
 800bd68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd6c:	f10a 0a01 	add.w	sl, sl, #1
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	9307      	str	r3, [sp, #28]
 800bd74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd78:	931a      	str	r3, [sp, #104]	; 0x68
 800bd7a:	4654      	mov	r4, sl
 800bd7c:	2205      	movs	r2, #5
 800bd7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd82:	4858      	ldr	r0, [pc, #352]	; (800bee4 <_vfiprintf_r+0x24c>)
 800bd84:	f7f4 fa04 	bl	8000190 <memchr>
 800bd88:	9a04      	ldr	r2, [sp, #16]
 800bd8a:	b9d8      	cbnz	r0, 800bdc4 <_vfiprintf_r+0x12c>
 800bd8c:	06d1      	lsls	r1, r2, #27
 800bd8e:	bf44      	itt	mi
 800bd90:	2320      	movmi	r3, #32
 800bd92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd96:	0713      	lsls	r3, r2, #28
 800bd98:	bf44      	itt	mi
 800bd9a:	232b      	movmi	r3, #43	; 0x2b
 800bd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bda0:	f89a 3000 	ldrb.w	r3, [sl]
 800bda4:	2b2a      	cmp	r3, #42	; 0x2a
 800bda6:	d015      	beq.n	800bdd4 <_vfiprintf_r+0x13c>
 800bda8:	9a07      	ldr	r2, [sp, #28]
 800bdaa:	4654      	mov	r4, sl
 800bdac:	2000      	movs	r0, #0
 800bdae:	f04f 0c0a 	mov.w	ip, #10
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdb8:	3b30      	subs	r3, #48	; 0x30
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	d94e      	bls.n	800be5c <_vfiprintf_r+0x1c4>
 800bdbe:	b1b0      	cbz	r0, 800bdee <_vfiprintf_r+0x156>
 800bdc0:	9207      	str	r2, [sp, #28]
 800bdc2:	e014      	b.n	800bdee <_vfiprintf_r+0x156>
 800bdc4:	eba0 0308 	sub.w	r3, r0, r8
 800bdc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	46a2      	mov	sl, r4
 800bdd2:	e7d2      	b.n	800bd7a <_vfiprintf_r+0xe2>
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	1d19      	adds	r1, r3, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	9103      	str	r1, [sp, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	bfbb      	ittet	lt
 800bde0:	425b      	neglt	r3, r3
 800bde2:	f042 0202 	orrlt.w	r2, r2, #2
 800bde6:	9307      	strge	r3, [sp, #28]
 800bde8:	9307      	strlt	r3, [sp, #28]
 800bdea:	bfb8      	it	lt
 800bdec:	9204      	strlt	r2, [sp, #16]
 800bdee:	7823      	ldrb	r3, [r4, #0]
 800bdf0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf2:	d10c      	bne.n	800be0e <_vfiprintf_r+0x176>
 800bdf4:	7863      	ldrb	r3, [r4, #1]
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d135      	bne.n	800be66 <_vfiprintf_r+0x1ce>
 800bdfa:	9b03      	ldr	r3, [sp, #12]
 800bdfc:	1d1a      	adds	r2, r3, #4
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	9203      	str	r2, [sp, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	bfb8      	it	lt
 800be06:	f04f 33ff 	movlt.w	r3, #4294967295
 800be0a:	3402      	adds	r4, #2
 800be0c:	9305      	str	r3, [sp, #20]
 800be0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bef4 <_vfiprintf_r+0x25c>
 800be12:	7821      	ldrb	r1, [r4, #0]
 800be14:	2203      	movs	r2, #3
 800be16:	4650      	mov	r0, sl
 800be18:	f7f4 f9ba 	bl	8000190 <memchr>
 800be1c:	b140      	cbz	r0, 800be30 <_vfiprintf_r+0x198>
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	eba0 000a 	sub.w	r0, r0, sl
 800be24:	fa03 f000 	lsl.w	r0, r3, r0
 800be28:	9b04      	ldr	r3, [sp, #16]
 800be2a:	4303      	orrs	r3, r0
 800be2c:	3401      	adds	r4, #1
 800be2e:	9304      	str	r3, [sp, #16]
 800be30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be34:	482c      	ldr	r0, [pc, #176]	; (800bee8 <_vfiprintf_r+0x250>)
 800be36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be3a:	2206      	movs	r2, #6
 800be3c:	f7f4 f9a8 	bl	8000190 <memchr>
 800be40:	2800      	cmp	r0, #0
 800be42:	d03f      	beq.n	800bec4 <_vfiprintf_r+0x22c>
 800be44:	4b29      	ldr	r3, [pc, #164]	; (800beec <_vfiprintf_r+0x254>)
 800be46:	bb1b      	cbnz	r3, 800be90 <_vfiprintf_r+0x1f8>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	3307      	adds	r3, #7
 800be4c:	f023 0307 	bic.w	r3, r3, #7
 800be50:	3308      	adds	r3, #8
 800be52:	9303      	str	r3, [sp, #12]
 800be54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be56:	443b      	add	r3, r7
 800be58:	9309      	str	r3, [sp, #36]	; 0x24
 800be5a:	e767      	b.n	800bd2c <_vfiprintf_r+0x94>
 800be5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be60:	460c      	mov	r4, r1
 800be62:	2001      	movs	r0, #1
 800be64:	e7a5      	b.n	800bdb2 <_vfiprintf_r+0x11a>
 800be66:	2300      	movs	r3, #0
 800be68:	3401      	adds	r4, #1
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	4619      	mov	r1, r3
 800be6e:	f04f 0c0a 	mov.w	ip, #10
 800be72:	4620      	mov	r0, r4
 800be74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be78:	3a30      	subs	r2, #48	; 0x30
 800be7a:	2a09      	cmp	r2, #9
 800be7c:	d903      	bls.n	800be86 <_vfiprintf_r+0x1ee>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0c5      	beq.n	800be0e <_vfiprintf_r+0x176>
 800be82:	9105      	str	r1, [sp, #20]
 800be84:	e7c3      	b.n	800be0e <_vfiprintf_r+0x176>
 800be86:	fb0c 2101 	mla	r1, ip, r1, r2
 800be8a:	4604      	mov	r4, r0
 800be8c:	2301      	movs	r3, #1
 800be8e:	e7f0      	b.n	800be72 <_vfiprintf_r+0x1da>
 800be90:	ab03      	add	r3, sp, #12
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	462a      	mov	r2, r5
 800be96:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <_vfiprintf_r+0x258>)
 800be98:	a904      	add	r1, sp, #16
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7fb fd9c 	bl	80079d8 <_printf_float>
 800bea0:	4607      	mov	r7, r0
 800bea2:	1c78      	adds	r0, r7, #1
 800bea4:	d1d6      	bne.n	800be54 <_vfiprintf_r+0x1bc>
 800bea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bea8:	07d9      	lsls	r1, r3, #31
 800beaa:	d405      	bmi.n	800beb8 <_vfiprintf_r+0x220>
 800beac:	89ab      	ldrh	r3, [r5, #12]
 800beae:	059a      	lsls	r2, r3, #22
 800beb0:	d402      	bmi.n	800beb8 <_vfiprintf_r+0x220>
 800beb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb4:	f7fe ff32 	bl	800ad1c <__retarget_lock_release_recursive>
 800beb8:	89ab      	ldrh	r3, [r5, #12]
 800beba:	065b      	lsls	r3, r3, #25
 800bebc:	f53f af12 	bmi.w	800bce4 <_vfiprintf_r+0x4c>
 800bec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bec2:	e711      	b.n	800bce8 <_vfiprintf_r+0x50>
 800bec4:	ab03      	add	r3, sp, #12
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	462a      	mov	r2, r5
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <_vfiprintf_r+0x258>)
 800becc:	a904      	add	r1, sp, #16
 800bece:	4630      	mov	r0, r6
 800bed0:	f7fc f826 	bl	8007f20 <_printf_i>
 800bed4:	e7e4      	b.n	800bea0 <_vfiprintf_r+0x208>
 800bed6:	bf00      	nop
 800bed8:	0800c7ec 	.word	0x0800c7ec
 800bedc:	0800c80c 	.word	0x0800c80c
 800bee0:	0800c7cc 	.word	0x0800c7cc
 800bee4:	0800ca04 	.word	0x0800ca04
 800bee8:	0800ca0e 	.word	0x0800ca0e
 800beec:	080079d9 	.word	0x080079d9
 800bef0:	0800bc73 	.word	0x0800bc73
 800bef4:	0800ca0a 	.word	0x0800ca0a

0800bef8 <nan>:
 800bef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf00 <nan+0x8>
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	00000000 	.word	0x00000000
 800bf04:	7ff80000 	.word	0x7ff80000

0800bf08 <_sbrk_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	; (800bf24 <_sbrk_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f6 f9ae 	bl	8002274 <_sbrk>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_sbrk_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_sbrk_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20000500 	.word	0x20000500

0800bf28 <__sread>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf30:	f000 f93a 	bl	800c1a8 <_read_r>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	bfab      	itete	ge
 800bf38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf3c:	181b      	addge	r3, r3, r0
 800bf3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf42:	bfac      	ite	ge
 800bf44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf46:	81a3      	strhlt	r3, [r4, #12]
 800bf48:	bd10      	pop	{r4, pc}

0800bf4a <__swrite>:
 800bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	461f      	mov	r7, r3
 800bf50:	898b      	ldrh	r3, [r1, #12]
 800bf52:	05db      	lsls	r3, r3, #23
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	4616      	mov	r6, r2
 800bf5a:	d505      	bpl.n	800bf68 <__swrite+0x1e>
 800bf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf60:	2302      	movs	r3, #2
 800bf62:	2200      	movs	r2, #0
 800bf64:	f000 f8b8 	bl	800c0d8 <_lseek_r>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	4628      	mov	r0, r5
 800bf7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	f000 b837 	b.w	800bff0 <_write_r>

0800bf82 <__sseek>:
 800bf82:	b510      	push	{r4, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 f8a5 	bl	800c0d8 <_lseek_r>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	bf15      	itete	ne
 800bf94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf9e:	81a3      	strheq	r3, [r4, #12]
 800bfa0:	bf18      	it	ne
 800bfa2:	81a3      	strhne	r3, [r4, #12]
 800bfa4:	bd10      	pop	{r4, pc}

0800bfa6 <__sclose>:
 800bfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfaa:	f000 b851 	b.w	800c050 <_close_r>

0800bfae <strncmp>:
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	b17a      	cbz	r2, 800bfd2 <strncmp+0x24>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	3901      	subs	r1, #1
 800bfb6:	1884      	adds	r4, r0, r2
 800bfb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bfbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bfc0:	4290      	cmp	r0, r2
 800bfc2:	d101      	bne.n	800bfc8 <strncmp+0x1a>
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	d101      	bne.n	800bfcc <strncmp+0x1e>
 800bfc8:	1a80      	subs	r0, r0, r2
 800bfca:	bd10      	pop	{r4, pc}
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1f3      	bne.n	800bfb8 <strncmp+0xa>
 800bfd0:	e7fa      	b.n	800bfc8 <strncmp+0x1a>
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	e7f9      	b.n	800bfca <strncmp+0x1c>

0800bfd6 <__ascii_wctomb>:
 800bfd6:	b149      	cbz	r1, 800bfec <__ascii_wctomb+0x16>
 800bfd8:	2aff      	cmp	r2, #255	; 0xff
 800bfda:	bf85      	ittet	hi
 800bfdc:	238a      	movhi	r3, #138	; 0x8a
 800bfde:	6003      	strhi	r3, [r0, #0]
 800bfe0:	700a      	strbls	r2, [r1, #0]
 800bfe2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfe6:	bf98      	it	ls
 800bfe8:	2001      	movls	r0, #1
 800bfea:	4770      	bx	lr
 800bfec:	4608      	mov	r0, r1
 800bfee:	4770      	bx	lr

0800bff0 <_write_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d07      	ldr	r5, [pc, #28]	; (800c010 <_write_r+0x20>)
 800bff4:	4604      	mov	r4, r0
 800bff6:	4608      	mov	r0, r1
 800bff8:	4611      	mov	r1, r2
 800bffa:	2200      	movs	r2, #0
 800bffc:	602a      	str	r2, [r5, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	f7f6 f8e7 	bl	80021d2 <_write>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_write_r+0x1e>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_write_r+0x1e>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20000500 	.word	0x20000500

0800c014 <__assert_func>:
 800c014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c016:	4614      	mov	r4, r2
 800c018:	461a      	mov	r2, r3
 800c01a:	4b09      	ldr	r3, [pc, #36]	; (800c040 <__assert_func+0x2c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4605      	mov	r5, r0
 800c020:	68d8      	ldr	r0, [r3, #12]
 800c022:	b14c      	cbz	r4, 800c038 <__assert_func+0x24>
 800c024:	4b07      	ldr	r3, [pc, #28]	; (800c044 <__assert_func+0x30>)
 800c026:	9100      	str	r1, [sp, #0]
 800c028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c02c:	4906      	ldr	r1, [pc, #24]	; (800c048 <__assert_func+0x34>)
 800c02e:	462b      	mov	r3, r5
 800c030:	f000 f81e 	bl	800c070 <fiprintf>
 800c034:	f000 f8ca 	bl	800c1cc <abort>
 800c038:	4b04      	ldr	r3, [pc, #16]	; (800c04c <__assert_func+0x38>)
 800c03a:	461c      	mov	r4, r3
 800c03c:	e7f3      	b.n	800c026 <__assert_func+0x12>
 800c03e:	bf00      	nop
 800c040:	2000001c 	.word	0x2000001c
 800c044:	0800ca15 	.word	0x0800ca15
 800c048:	0800ca22 	.word	0x0800ca22
 800c04c:	0800ca50 	.word	0x0800ca50

0800c050 <_close_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	; (800c06c <_close_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f6 f8d5 	bl	800220a <_close>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_close_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_close_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20000500 	.word	0x20000500

0800c070 <fiprintf>:
 800c070:	b40e      	push	{r1, r2, r3}
 800c072:	b503      	push	{r0, r1, lr}
 800c074:	4601      	mov	r1, r0
 800c076:	ab03      	add	r3, sp, #12
 800c078:	4805      	ldr	r0, [pc, #20]	; (800c090 <fiprintf+0x20>)
 800c07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07e:	6800      	ldr	r0, [r0, #0]
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	f7ff fe09 	bl	800bc98 <_vfiprintf_r>
 800c086:	b002      	add	sp, #8
 800c088:	f85d eb04 	ldr.w	lr, [sp], #4
 800c08c:	b003      	add	sp, #12
 800c08e:	4770      	bx	lr
 800c090:	2000001c 	.word	0x2000001c

0800c094 <_fstat_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_fstat_r+0x20>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	4611      	mov	r1, r2
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	f7f6 f8be 	bl	8002222 <_fstat>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d102      	bne.n	800c0b0 <_fstat_r+0x1c>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b103      	cbz	r3, 800c0b0 <_fstat_r+0x1c>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20000500 	.word	0x20000500

0800c0b8 <_isatty_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_isatty_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f6 f8bd 	bl	8002242 <_isatty>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_isatty_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_isatty_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20000500 	.word	0x20000500

0800c0d8 <_lseek_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_lseek_r+0x20>)
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4608      	mov	r0, r1
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f7f6 f8b6 	bl	8002258 <_lseek>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_lseek_r+0x1e>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_lseek_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20000500 	.word	0x20000500

0800c0fc <memmove>:
 800c0fc:	4288      	cmp	r0, r1
 800c0fe:	b510      	push	{r4, lr}
 800c100:	eb01 0402 	add.w	r4, r1, r2
 800c104:	d902      	bls.n	800c10c <memmove+0x10>
 800c106:	4284      	cmp	r4, r0
 800c108:	4623      	mov	r3, r4
 800c10a:	d807      	bhi.n	800c11c <memmove+0x20>
 800c10c:	1e43      	subs	r3, r0, #1
 800c10e:	42a1      	cmp	r1, r4
 800c110:	d008      	beq.n	800c124 <memmove+0x28>
 800c112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c11a:	e7f8      	b.n	800c10e <memmove+0x12>
 800c11c:	4402      	add	r2, r0
 800c11e:	4601      	mov	r1, r0
 800c120:	428a      	cmp	r2, r1
 800c122:	d100      	bne.n	800c126 <memmove+0x2a>
 800c124:	bd10      	pop	{r4, pc}
 800c126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c12e:	e7f7      	b.n	800c120 <memmove+0x24>

0800c130 <__malloc_lock>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__malloc_lock+0x8>)
 800c132:	f7fe bdf2 	b.w	800ad1a <__retarget_lock_acquire_recursive>
 800c136:	bf00      	nop
 800c138:	200004f4 	.word	0x200004f4

0800c13c <__malloc_unlock>:
 800c13c:	4801      	ldr	r0, [pc, #4]	; (800c144 <__malloc_unlock+0x8>)
 800c13e:	f7fe bded 	b.w	800ad1c <__retarget_lock_release_recursive>
 800c142:	bf00      	nop
 800c144:	200004f4 	.word	0x200004f4

0800c148 <_realloc_r>:
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	4680      	mov	r8, r0
 800c14e:	4614      	mov	r4, r2
 800c150:	460e      	mov	r6, r1
 800c152:	b921      	cbnz	r1, 800c15e <_realloc_r+0x16>
 800c154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	4611      	mov	r1, r2
 800c15a:	f7ff bba3 	b.w	800b8a4 <_malloc_r>
 800c15e:	b92a      	cbnz	r2, 800c16c <_realloc_r+0x24>
 800c160:	f7ff fb34 	bl	800b7cc <_free_r>
 800c164:	4625      	mov	r5, r4
 800c166:	4628      	mov	r0, r5
 800c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16c:	f000 f835 	bl	800c1da <_malloc_usable_size_r>
 800c170:	4284      	cmp	r4, r0
 800c172:	4607      	mov	r7, r0
 800c174:	d802      	bhi.n	800c17c <_realloc_r+0x34>
 800c176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c17a:	d812      	bhi.n	800c1a2 <_realloc_r+0x5a>
 800c17c:	4621      	mov	r1, r4
 800c17e:	4640      	mov	r0, r8
 800c180:	f7ff fb90 	bl	800b8a4 <_malloc_r>
 800c184:	4605      	mov	r5, r0
 800c186:	2800      	cmp	r0, #0
 800c188:	d0ed      	beq.n	800c166 <_realloc_r+0x1e>
 800c18a:	42bc      	cmp	r4, r7
 800c18c:	4622      	mov	r2, r4
 800c18e:	4631      	mov	r1, r6
 800c190:	bf28      	it	cs
 800c192:	463a      	movcs	r2, r7
 800c194:	f7fb fb6a 	bl	800786c <memcpy>
 800c198:	4631      	mov	r1, r6
 800c19a:	4640      	mov	r0, r8
 800c19c:	f7ff fb16 	bl	800b7cc <_free_r>
 800c1a0:	e7e1      	b.n	800c166 <_realloc_r+0x1e>
 800c1a2:	4635      	mov	r5, r6
 800c1a4:	e7df      	b.n	800c166 <_realloc_r+0x1e>
	...

0800c1a8 <_read_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	; (800c1c8 <_read_r+0x20>)
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f7f5 ffee 	bl	8002198 <_read>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_read_r+0x1e>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_read_r+0x1e>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	20000500 	.word	0x20000500

0800c1cc <abort>:
 800c1cc:	b508      	push	{r3, lr}
 800c1ce:	2006      	movs	r0, #6
 800c1d0:	f000 f834 	bl	800c23c <raise>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	f7f5 ffd5 	bl	8002184 <_exit>

0800c1da <_malloc_usable_size_r>:
 800c1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1de:	1f18      	subs	r0, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	bfbc      	itt	lt
 800c1e4:	580b      	ldrlt	r3, [r1, r0]
 800c1e6:	18c0      	addlt	r0, r0, r3
 800c1e8:	4770      	bx	lr

0800c1ea <_raise_r>:
 800c1ea:	291f      	cmp	r1, #31
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	d904      	bls.n	800c1fe <_raise_r+0x14>
 800c1f4:	2316      	movs	r3, #22
 800c1f6:	6003      	str	r3, [r0, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c200:	b112      	cbz	r2, 800c208 <_raise_r+0x1e>
 800c202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c206:	b94b      	cbnz	r3, 800c21c <_raise_r+0x32>
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 f831 	bl	800c270 <_getpid_r>
 800c20e:	462a      	mov	r2, r5
 800c210:	4601      	mov	r1, r0
 800c212:	4620      	mov	r0, r4
 800c214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c218:	f000 b818 	b.w	800c24c <_kill_r>
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d00a      	beq.n	800c236 <_raise_r+0x4c>
 800c220:	1c59      	adds	r1, r3, #1
 800c222:	d103      	bne.n	800c22c <_raise_r+0x42>
 800c224:	2316      	movs	r3, #22
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	2001      	movs	r0, #1
 800c22a:	e7e7      	b.n	800c1fc <_raise_r+0x12>
 800c22c:	2400      	movs	r4, #0
 800c22e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c232:	4628      	mov	r0, r5
 800c234:	4798      	blx	r3
 800c236:	2000      	movs	r0, #0
 800c238:	e7e0      	b.n	800c1fc <_raise_r+0x12>
	...

0800c23c <raise>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <raise+0xc>)
 800c23e:	4601      	mov	r1, r0
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	f7ff bfd2 	b.w	800c1ea <_raise_r>
 800c246:	bf00      	nop
 800c248:	2000001c 	.word	0x2000001c

0800c24c <_kill_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	; (800c26c <_kill_r+0x20>)
 800c250:	2300      	movs	r3, #0
 800c252:	4604      	mov	r4, r0
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	f7f5 ff83 	bl	8002164 <_kill>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d102      	bne.n	800c268 <_kill_r+0x1c>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	b103      	cbz	r3, 800c268 <_kill_r+0x1c>
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	bf00      	nop
 800c26c:	20000500 	.word	0x20000500

0800c270 <_getpid_r>:
 800c270:	f7f5 bf70 	b.w	8002154 <_getpid>

0800c274 <_init>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr

0800c280 <_fini>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr
