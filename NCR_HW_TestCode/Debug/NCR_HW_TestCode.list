
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c79c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0800c8e0  0800c8e0  0001c8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d48c  0800d48c  0001d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d494  0800d494  0001d494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000008  0800d49c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a4  200001ec  0800d680  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000590  0800d680  00020590  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001781a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e39  00000000  00000000  00037a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001788  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001670  00000000  00000000  0003bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000221bd  00000000  00000000  0003d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016362  00000000  00000000  0005f825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dcb06  00000000  00000000  00075b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0015268d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a28  00000000  00000000  001526e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c8c4 	.word	0x0800c8c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800c8c4 	.word	0x0800c8c4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <initModbus>:
 *
 * @param serialPort Pointer to the UART handle for Modbus communication.
 * @param EN_GPIOPort GPIO port for MODBUS_EN pin.
 * @param EN_GPIOPin GPIO pin for MODBUS_EN.
 */
void initModbus(UART_HandleTypeDef *serialPort, GPIO_TypeDef * EN_GPIOPort, uint16_t EN_GPIOPin){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]

	modbusSerial = *serialPort;
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <initModbus+0x34>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2394      	movs	r3, #148	; 0x94
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f006 ff21 	bl	8007e08 <memcpy>
	MODBUS_EN.port = EN_GPIOPort;
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <initModbus+0x38>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	6013      	str	r3, [r2, #0]
	MODBUS_EN.pin = EN_GPIOPin;
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <initModbus+0x38>)
 8000fd2:	711a      	strb	r2, [r3, #4]

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000210 	.word	0x20000210
 8000fe0:	20000208 	.word	0x20000208

08000fe4 <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b95      	cmp	r3, #149	; 0x95
 8000ff2:	d810      	bhi.n	8001016 <Modbus_RxCallback+0x32>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <Modbus_RxCallback+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	440b      	add	r3, r1
 8001006:	709a      	strb	r2, [r3, #2]
        _ModbusResponse->rxIndex++;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	801a      	strh	r2, [r3, #0]
 8001014:	e002      	b.n	800101c <Modbus_RxCallback+0x38>


    } else {
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3302      	adds	r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	8812      	ldrh	r2, [r2, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <Modbus_RxCallback+0x54>)
 800102c:	f004 ff3e 	bl	8005eac <HAL_UART_Receive_IT>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000210 	.word	0x20000210

0800103c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001078:	1d39      	adds	r1, r7, #4
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	2201      	movs	r2, #1
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <__io_putchar+0x20>)
 8001082:	f004 fe85 	bl	8005d90 <HAL_UART_Transmit>
  return ch;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002f8 	.word	0x200002f8

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b0af      	sub	sp, #188	; 0xbc
 8001098:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f001 fd79 	bl	8002b90 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
  MCP23008_Init();
 800109e:	f000 fb3f 	bl	8001720 <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f9a3 	bl	80013ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010a6:	f000 f9f9 	bl	800149c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 faed 	bl	8001688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010ae:	f000 fa53 	bl	8001558 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80010b2:	f000 fa11 	bl	80014d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010b6:	f000 fa9b 	bl	80015f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 80010ba:	f000 fb31 	bl	8001720 <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 80010be:	f000 fbef 	bl	80018a0 <MCP23008_ConfigureInterrupts>

  // Initialize SHT20 Sensor
    uint32_t sht40_serial;
    if( SHT40_ReadSerial(&hi2c1, &sht40_serial) != HAL_ERROR ) {
 80010c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010c6:	4619      	mov	r1, r3
 80010c8:	48ad      	ldr	r0, [pc, #692]	; (8001380 <main+0x2ec>)
 80010ca:	f001 fc05 	bl	80028d8 <SHT40_ReadSerial>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d006      	beq.n	80010e2 <main+0x4e>
		printf("I2C connection established to SHT40 with serial %" PRIu32 "\r\n", sht40_serial);
 80010d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010d8:	4619      	mov	r1, r3
 80010da:	48aa      	ldr	r0, [pc, #680]	; (8001384 <main+0x2f0>)
 80010dc:	f007 fe04 	bl	8008ce8 <iprintf>
 80010e0:	e002      	b.n	80010e8 <main+0x54>
	} else {
		printf("Failed to read serial from SHT40; check connections and reset MCU\r\n");
 80010e2:	48a9      	ldr	r0, [pc, #676]	; (8001388 <main+0x2f4>)
 80010e4:	f007 fe86 	bl	8008df4 <puts>
	}



  // Initialize Modbus
  initModbus(&huart1, MODBUS_EN_GPIO_Port, MODBUS_EN_Pin);
 80010e8:	2210      	movs	r2, #16
 80010ea:	49a8      	ldr	r1, [pc, #672]	; (800138c <main+0x2f8>)
 80010ec:	48a8      	ldr	r0, [pc, #672]	; (8001390 <main+0x2fc>)
 80010ee:	f7ff ff5b 	bl	8000fa8 <initModbus>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 80010f2:	4ba8      	ldr	r3, [pc, #672]	; (8001394 <main+0x300>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4ba7      	ldr	r3, [pc, #668]	; (8001398 <main+0x304>)
 80010fa:	4413      	add	r3, r2
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	48a3      	ldr	r0, [pc, #652]	; (8001390 <main+0x2fc>)
 8001102:	f004 fed3 	bl	8005eac <HAL_UART_Receive_IT>
  uint8_t rxBuffer;
  HAL_UART_Receive_IT(&hlpuart1, &rxBuffer, 1);
 8001106:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	48a3      	ldr	r0, [pc, #652]	; (800139c <main+0x308>)
 8001110:	f004 fecc 	bl	8005eac <HAL_UART_Receive_IT>
  // Initialize timers;
  shtReadMillis = HAL_GetTick();
 8001114:	f001 fdaa 	bl	8002c6c <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	4aa1      	ldr	r2, [pc, #644]	; (80013a0 <main+0x30c>)
 800111c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" # # # # # # # # # # -> %s\r\n ", FirmwareName);
 800111e:	49a1      	ldr	r1, [pc, #644]	; (80013a4 <main+0x310>)
 8001120:	48a1      	ldr	r0, [pc, #644]	; (80013a8 <main+0x314>)
 8001122:	f007 fde1 	bl	8008ce8 <iprintf>
  printf("# # # # # # # # # # -> Firmware Version %d.%d.%d\r\n ", VERSION_MAJOR, VERSION_MID, VERSION_MINOR);
 8001126:	2303      	movs	r3, #3
 8001128:	2201      	movs	r2, #1
 800112a:	2101      	movs	r1, #1
 800112c:	489f      	ldr	r0, [pc, #636]	; (80013ac <main+0x318>)
 800112e:	f007 fddb 	bl	8008ce8 <iprintf>

#ifdef SCAN_I2C_DEVICES
  scanI2CDevices();
 8001132:	f000 fdbd 	bl	8001cb0 <scanI2CDevices>
#endif

  WDTReset();
 8001136:	f000 fda5 	bl	8001c84 <WDTReset>


  printf("Setting LoRa Credentials \r\n");
 800113a:	489d      	ldr	r0, [pc, #628]	; (80013b0 <main+0x31c>)
 800113c:	f007 fe5a 	bl	8008df4 <puts>
//	  printf("Error setting LoRa credentials \r\n");
//  }else{
//	  printf("Success setting LoRa credentials \r\n");
//  }

  printf("Joining to Network\r\n");
 8001140:	489c      	ldr	r0, [pc, #624]	; (80013b4 <main+0x320>)
 8001142:	f007 fe57 	bl	8008df4 <puts>

//  while(hasJoinedNetwork == false){
//	  joinNetwork();
//	  printf("Retrying Joining Lora\r\n");
//  }
  printf("Success Joining Lora \r\n");
 8001146:	489c      	ldr	r0, [pc, #624]	; (80013b8 <main+0x324>)
 8001148:	f007 fe54 	bl	8008df4 <puts>

  TxPayload initPayload;
  initPayload.buffer[0] = 0x00;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  initPayload.buffer[1] = 0x01;
 8001152:	2301      	movs	r3, #1
 8001154:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  initPayload.buffer[2] = 0x02;
 8001158:	2302      	movs	r3, #2
 800115a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  initPayload.length = 3;
 800115e:	2303      	movs	r3, #3
 8001160:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  initPayload.msgType = DIAGNOSTICS;
 8001164:	2302      	movs	r3, #2
 8001166:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

  //printf("Sending Test Lora Payload\r\n");
  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
 800116a:	466d      	mov	r5, sp
 800116c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001178:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800117c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001184:	cb0c      	ldmia	r3, {r2, r3}
 8001186:	2101      	movs	r1, #1
 8001188:	2004      	movs	r0, #4
 800118a:	f000 ffa7 	bl	80020dc <sendToLora>

  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
 800118e:	466d      	mov	r5, sp
 8001190:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a8:	cb0c      	ldmia	r3, {r2, r3}
 80011aa:	2101      	movs	r1, #1
 80011ac:	2004      	movs	r0, #4
 80011ae:	f000 ff95 	bl	80020dc <sendToLora>

  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
 80011b2:	466d      	mov	r5, sp
 80011b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011cc:	cb0c      	ldmia	r3, {r2, r3}
 80011ce:	2101      	movs	r1, #1
 80011d0:	2004      	movs	r0, #4
 80011d2:	f000 ff83 	bl	80020dc <sendToLora>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Check for Unscheduled Transmission Requests
	  handleInterruptTriggers(TxTriggers);
 80011d6:	4b79      	ldr	r3, [pc, #484]	; (80013bc <main+0x328>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fed2 	bl	8001f84 <handleInterruptTriggers>

  	  // Check Temperature Reading Every X Interval
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 80011e0:	f001 fd44 	bl	8002c6c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <main+0x30c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f0:	d907      	bls.n	8001202 <main+0x16e>

  		readSHT40(&sensors.sht40);
 80011f2:	4873      	ldr	r0, [pc, #460]	; (80013c0 <main+0x32c>)
 80011f4:	f001 f84e 	bl	8002294 <readSHT40>
  		printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht40.temperature, sensors.sht40.humidity);
  		printLineMarker('*');
#endif
  		/// @TODO: Insert Threshold Control here for Unscheduled TX

  		shtReadMillis = HAL_GetTick();
 80011f8:	f001 fd38 	bl	8002c6c <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a68      	ldr	r2, [pc, #416]	; (80013a0 <main+0x30c>)
 8001200:	6013      	str	r3, [r2, #0]
  	  }

  	  // Read All Sensors every Y Interval
  	  if(HAL_GetTick() - sensorsReadMillis > DEVICE_HEARTBEAL){
 8001202:	f001 fd33 	bl	8002c6c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <main+0x330>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	f240 80b1 	bls.w	800137a <main+0x2e6>

  		// Read SHT20
  		readSHT40(&sensors.sht40);
 8001218:	4869      	ldr	r0, [pc, #420]	; (80013c0 <main+0x32c>)
 800121a:	f001 f83b 	bl	8002294 <readSHT40>

	    // Read Smoke Sensor
	    sensors.smoke = ReadSmokeStatus();
 800121e:	4c68      	ldr	r4, [pc, #416]	; (80013c0 <main+0x32c>)
 8001220:	463b      	mov	r3, r7
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fbc2 	bl	80019ac <ReadSmokeStatus>
 8001228:	f104 0308 	add.w	r3, r4, #8
 800122c:	463a      	mov	r2, r7
 800122e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001230:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Read DryContacts
	    sensors.dryContact = MCP23008_ReadInputs();
 8001234:	4c62      	ldr	r4, [pc, #392]	; (80013c0 <main+0x32c>)
 8001236:	463b      	mov	r3, r7
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fa87 	bl	800174c <MCP23008_ReadInputs>
 800123e:	f104 0314 	add.w	r3, r4, #20
 8001242:	463a      	mov	r2, r7
 8001244:	6810      	ldr	r0, [r2, #0]
 8001246:	6851      	ldr	r1, [r2, #4]
 8001248:	c303      	stmia	r3!, {r0, r1}
 800124a:	7a12      	ldrb	r2, [r2, #8]
 800124c:	701a      	strb	r2, [r3, #0]

	    // PLaceholder for LTC4015
	    sensors.ltc4015.VIN = 24.123;
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <main+0x32c>)
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <main+0x334>)
 8001252:	621a      	str	r2, [r3, #32]
	    sensors.ltc4015.VBAT = 12.456;
 8001254:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <main+0x32c>)
 8001256:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <main+0x338>)
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
	    sensors.ltc4015.VSYS = 5.789;
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <main+0x32c>)
 800125c:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <main+0x33c>)
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
	    // Read ModBus Device
	    //sendRaw(getMeterDataCmd, GetMeterData_LEN, &ModbusResp);
	    //HAL_Delay(2000); // Give time to receive response

#ifdef SCAN_I2C_DEVICES
  		scanI2CDevices();
 8001260:	f000 fd26 	bl	8001cb0 <scanI2CDevices>
#endif

#ifdef SERIAL_DEBUG_SENSORS
	    printLineMarker('-');
 8001264:	202d      	movs	r0, #45	; 0x2d
 8001266:	f000 fd4d 	bl	8001d04 <printLineMarker>
	    printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht40.temperature, sensors.sht40.humidity);
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <main+0x32c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f942 	bl	80004f8 <__aeabi_f2d>
 8001274:	4604      	mov	r4, r0
 8001276:	460d      	mov	r5, r1
 8001278:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <main+0x32c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f93b 	bl	80004f8 <__aeabi_f2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	e9cd 2300 	strd	r2, r3, [sp]
 800128a:	4622      	mov	r2, r4
 800128c:	462b      	mov	r3, r5
 800128e:	4851      	ldr	r0, [pc, #324]	; (80013d4 <main+0x340>)
 8001290:	f007 fd2a 	bl	8008ce8 <iprintf>
	    printf("Smoke Level -> Level %d \r\n", sensors.smoke.level);
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <main+0x32c>)
 8001296:	7c1b      	ldrb	r3, [r3, #16]
 8001298:	4619      	mov	r1, r3
 800129a:	484f      	ldr	r0, [pc, #316]	; (80013d8 <main+0x344>)
 800129c:	f007 fd24 	bl	8008ce8 <iprintf>
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <main+0x32c>)
 80012a2:	7d5b      	ldrb	r3, [r3, #21]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012a4:	461d      	mov	r5, r3
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012a6:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <main+0x32c>)
 80012a8:	7d9b      	ldrb	r3, [r3, #22]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012aa:	461e      	mov	r6, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <main+0x32c>)
 80012ae:	7ddb      	ldrb	r3, [r3, #23]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012b0:	469c      	mov	ip, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <main+0x32c>)
 80012b4:	7e1b      	ldrb	r3, [r3, #24]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012b6:	461a      	mov	r2, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <main+0x32c>)
 80012ba:	7e5b      	ldrb	r3, [r3, #25]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012bc:	4619      	mov	r1, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <main+0x32c>)
 80012c0:	7e9b      	ldrb	r3, [r3, #26]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012c2:	4618      	mov	r0, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <main+0x32c>)
 80012c6:	7edb      	ldrb	r3, [r3, #27]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012c8:	461c      	mov	r4, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <main+0x32c>)
 80012cc:	7f1b      	ldrb	r3, [r3, #28]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012ce:	9304      	str	r3, [sp, #16]
 80012d0:	9403      	str	r4, [sp, #12]
 80012d2:	9002      	str	r0, [sp, #8]
 80012d4:	9101      	str	r1, [sp, #4]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	4663      	mov	r3, ip
 80012da:	4632      	mov	r2, r6
 80012dc:	4629      	mov	r1, r5
 80012de:	483f      	ldr	r0, [pc, #252]	; (80013dc <main+0x348>)
 80012e0:	f007 fd02 	bl	8008ce8 <iprintf>
	    printf("MODBUS RESPONSE (Hex): ");
 80012e4:	483e      	ldr	r0, [pc, #248]	; (80013e0 <main+0x34c>)
 80012e6:	f007 fcff 	bl	8008ce8 <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012f0:	e00e      	b.n	8001310 <main+0x27c>
	        printf("%02X ", ModbusResp.buffer[x]);
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <main+0x300>)
 80012f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012f8:	4413      	add	r3, r2
 80012fa:	3302      	adds	r3, #2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4838      	ldr	r0, [pc, #224]	; (80013e4 <main+0x350>)
 8001302:	f007 fcf1 	bl	8008ce8 <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 8001306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <main+0x300>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800131a:	4293      	cmp	r3, r2
 800131c:	dbe9      	blt.n	80012f2 <main+0x25e>
	    }
	    printf(" \r\n");
 800131e:	4832      	ldr	r0, [pc, #200]	; (80013e8 <main+0x354>)
 8001320:	f007 fd68 	bl	8008df4 <puts>
	    printLineMarker('-');
 8001324:	202d      	movs	r0, #45	; 0x2d
 8001326:	f000 fced 	bl	8001d04 <printLineMarker>
#endif

	    // Generate HEARTBEAT Payload
	    TxPayload _heartBeatPayload;
	    generateHeartbeatTxPayload(sensors, &_heartBeatPayload);
 800132a:	4e25      	ldr	r6, [pc, #148]	; (80013c0 <main+0x32c>)
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	9309      	str	r3, [sp, #36]	; 0x24
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	602b      	str	r3, [r5, #0]
 8001344:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001348:	f000 fdd8 	bl	8001efc <generateHeartbeatTxPayload>

	    sendToLora(HEARTBEAT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 800134c:	466d      	mov	r5, sp
 800134e:	f107 041c 	add.w	r4, r7, #28
 8001352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800135e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	cb0c      	ldmia	r3, {r2, r3}
 8001368:	2101      	movs	r1, #1
 800136a:	2002      	movs	r0, #2
 800136c:	f000 feb6 	bl	80020dc <sendToLora>

  		sensorsReadMillis = HAL_GetTick();
 8001370:	f001 fc7c 	bl	8002c6c <HAL_GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <main+0x330>)
 8001378:	6013      	str	r3, [r2, #0]
  	  }

  	WDTReset();
 800137a:	f000 fc83 	bl	8001c84 <WDTReset>
	  handleInterruptTriggers(TxTriggers);
 800137e:	e72a      	b.n	80011d6 <main+0x142>
 8001380:	200002a4 	.word	0x200002a4
 8001384:	0800c8e0 	.word	0x0800c8e0
 8001388:	0800c918 	.word	0x0800c918
 800138c:	48000400 	.word	0x48000400
 8001390:	2000038c 	.word	0x2000038c
 8001394:	20000424 	.word	0x20000424
 8001398:	20000426 	.word	0x20000426
 800139c:	200002f8 	.word	0x200002f8
 80013a0:	200004f4 	.word	0x200004f4
 80013a4:	0800c95c 	.word	0x0800c95c
 80013a8:	0800c978 	.word	0x0800c978
 80013ac:	0800c998 	.word	0x0800c998
 80013b0:	0800c9cc 	.word	0x0800c9cc
 80013b4:	0800c9e8 	.word	0x0800c9e8
 80013b8:	0800c9fc 	.word	0x0800c9fc
 80013bc:	20000420 	.word	0x20000420
 80013c0:	200004bc 	.word	0x200004bc
 80013c4:	200004f8 	.word	0x200004f8
 80013c8:	41c0fbe7 	.word	0x41c0fbe7
 80013cc:	41474bc7 	.word	0x41474bc7
 80013d0:	40b93f7d 	.word	0x40b93f7d
 80013d4:	0800ca14 	.word	0x0800ca14
 80013d8:	0800ca4c 	.word	0x0800ca4c
 80013dc:	0800ca68 	.word	0x0800ca68
 80013e0:	0800ca98 	.word	0x0800ca98
 80013e4:	0800cab0 	.word	0x0800cab0
 80013e8:	0800cab8 	.word	0x0800cab8

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09a      	sub	sp, #104	; 0x68
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2248      	movs	r2, #72	; 0x48
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 fd12 	bl	8007e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <SystemClock_Config+0xac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <SystemClock_Config+0xac>)
 800141c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <SystemClock_Config+0xac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800142e:	2322      	movs	r3, #34	; 0x22
 8001430:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001444:	23a0      	movs	r3, #160	; 0xa0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001448:	2300      	movs	r3, #0
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f9f3 	bl	800483c <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800145c:	f000 ff42 	bl	80022e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001460:	236f      	movs	r3, #111	; 0x6f
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fd4f 	bl	8004f24 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800148c:	f000 ff2a 	bl	80022e4 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3768      	adds	r7, #104	; 0x68
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58000400 	.word	0x58000400

0800149c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	; 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	2250      	movs	r2, #80	; 0x50
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 fcbb 	bl	8007e24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80014b4:	2300      	movs	r3, #0
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80014b8:	2310      	movs	r3, #16
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f96f 	bl	80057a2 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80014ca:	f000 ff0b 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014ce:	bf00      	nop
 80014d0:	3750      	adds	r7, #80	; 0x50
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_I2C1_Init+0x74>)
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <MX_I2C1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_I2C1_Init+0x74>)
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <MX_I2C1_Init+0x7c>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_I2C1_Init+0x74>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_I2C1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <MX_I2C1_Init+0x74>)
 8001514:	f001 ff54 	bl	80033c0 <HAL_I2C_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151e:	f000 fee1 	bl	80022e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <MX_I2C1_Init+0x74>)
 8001526:	f002 fd5d 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 fed8 	bl	80022e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_I2C1_Init+0x74>)
 8001538:	f002 fd9f 	bl	800407a <HAL_I2CEx_ConfigDigitalFilter>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fecf 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002a4 	.word	0x200002a4
 8001550:	40005400 	.word	0x40005400
 8001554:	00707cbb 	.word	0x00707cbb

08001558 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <MX_LPUART1_UART_Init+0x94>)
 8001560:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001568:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015a2:	f004 fba5 	bl	8005cf0 <HAL_UART_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80015ac:	f000 fe9a 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015b4:	f006 fb23 	bl	8007bfe <HAL_UARTEx_SetTxFifoThreshold>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015be:	f000 fe91 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015c6:	f006 fb58 	bl	8007c7a <HAL_UARTEx_SetRxFifoThreshold>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015d0:	f000 fe88 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015d6:	f006 fad9 	bl	8007b8c <HAL_UARTEx_DisableFifoMode>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015e0:	f000 fe80 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002f8 	.word	0x200002f8
 80015ec:	40008000 	.word	0x40008000

080015f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_USART1_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <MX_USART1_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_USART1_UART_Init+0x90>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800163a:	f004 fb59 	bl	8005cf0 <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 fe4e 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800164c:	f006 fad7 	bl	8007bfe <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 fe45 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800165e:	f006 fb0c 	bl	8007c7a <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 fe3c 	bl	80022e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_USART1_UART_Init+0x90>)
 800166e:	f006 fa8d 	bl	8007b8c <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 fe34 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000038c 	.word	0x2000038c
 8001684:	40013800 	.word	0x40013800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fccd 	bl	800103c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2004      	movs	r0, #4
 80016a4:	f7ff fcca 	bl	800103c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WDT_DONE_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f244 0110 	movw	r1, #16400	; 0x4010
 80016ae:	481b      	ldr	r0, [pc, #108]	; (800171c <MX_GPIO_Init+0x94>)
 80016b0:	f001 fe6e 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 80016b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_GPIO_Init+0x94>)
 80016ca:	f001 fcd9 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDT_DONE_Pin MODBUS_EN_Pin */
  GPIO_InitStruct.Pin = WDT_DONE_Pin|MODBUS_EN_Pin;
 80016ce:	f244 0310 	movw	r3, #16400	; 0x4010
 80016d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_GPIO_Init+0x94>)
 80016e6:	f001 fccb 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_GPIO_Init+0x94>)
 8001700:	f001 fcbe 	bl	8003080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2028      	movs	r0, #40	; 0x28
 800170a:	f001 fbc6 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800170e:	2028      	movs	r0, #40	; 0x28
 8001710:	f001 fbdd 	bl	8002ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48000400 	.word	0x48000400

08001720 <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 8001726:	2300      	movs	r3, #0
 8001728:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 800172a:	23ff      	movs	r3, #255	; 0xff
 800172c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800172e:	1d3a      	adds	r2, r7, #4
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2302      	movs	r3, #2
 8001738:	2142      	movs	r1, #66	; 0x42
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <MCP23008_Init+0x28>)
 800173c:	f001 fed0 	bl	80034e0 <HAL_I2C_Master_Transmit>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002a4 	.word	0x200002a4

0800174c <MCP23008_ReadInputs>:

DryContactStatus MCP23008_ReadInputs(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 8001754:	2309      	movs	r3, #9
 8001756:	753b      	strb	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 8001758:	f107 0214 	add.w	r2, r7, #20
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2142      	movs	r1, #66	; 0x42
 8001766:	4836      	ldr	r0, [pc, #216]	; (8001840 <MCP23008_ReadInputs+0xf4>)
 8001768:	f001 feba 	bl	80034e0 <HAL_I2C_Master_Transmit>
    //HAL_Delay(50);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 800176c:	f107 0213 	add.w	r2, r7, #19
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2301      	movs	r3, #1
 8001778:	2142      	movs	r1, #66	; 0x42
 800177a:	4831      	ldr	r0, [pc, #196]	; (8001840 <MCP23008_ReadInputs+0xf4>)
 800177c:	f001 ffa4 	bl	80036c8 <HAL_I2C_Master_Receive>

    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	723b      	strb	r3, [r7, #8]
	dryContact.DC1 = (gpioState & (1 << 0)) ? true : false;
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	727b      	strb	r3, [r7, #9]
	dryContact.DC2 = (gpioState & (1 << 1)) ? true : false;
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	105b      	asrs	r3, r3, #1
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	72bb      	strb	r3, [r7, #10]
	dryContact.DC3 = (gpioState & (1 << 2)) ? true : false;
 80017aa:	7cfb      	ldrb	r3, [r7, #19]
 80017ac:	109b      	asrs	r3, r3, #2
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	72fb      	strb	r3, [r7, #11]
	dryContact.DC4 = (gpioState & (1 << 3)) ? true : false;
 80017be:	7cfb      	ldrb	r3, [r7, #19]
 80017c0:	10db      	asrs	r3, r3, #3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
 80017d2:	7cfb      	ldrb	r3, [r7, #19]
 80017d4:	111b      	asrs	r3, r3, #4
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	737b      	strb	r3, [r7, #13]
	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	115b      	asrs	r3, r3, #5
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	73bb      	strb	r3, [r7, #14]
	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	119b      	asrs	r3, r3, #6
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	73fb      	strb	r3, [r7, #15]
	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;
 800180e:	7cfb      	ldrb	r3, [r7, #19]
 8001810:	b25b      	sxtb	r3, r3
 8001812:	11db      	asrs	r3, r3, #7
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	743b      	strb	r3, [r7, #16]

	return dryContact;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	cb03      	ldmia	r3!, {r0, r1}
 8001830:	6010      	str	r0, [r2, #0]
 8001832:	6051      	str	r1, [r2, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	7213      	strb	r3, [r2, #8]
}
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200002a4 	.word	0x200002a4

08001844 <MCP23008_ReadCapturedINT>:

DryContactStatus MCP23008_ReadCapturedINT(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_INTCAP;
 800184c:	2308      	movs	r3, #8
 800184e:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 8001850:	f107 020c 	add.w	r2, r7, #12
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	2142      	movs	r1, #66	; 0x42
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <MCP23008_ReadCapturedINT+0x54>)
 8001860:	f001 fe3e 	bl	80034e0 <HAL_I2C_Master_Transmit>
    //HAL_Delay(10);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8001864:	f107 020b 	add.w	r2, r7, #11
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2142      	movs	r1, #66	; 0x42
 8001872:	4809      	ldr	r0, [pc, #36]	; (8001898 <MCP23008_ReadCapturedINT+0x54>)
 8001874:	f001 ff28 	bl	80036c8 <HAL_I2C_Master_Receive>

//    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8001878:	7afa      	ldrb	r2, [r7, #11]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MCP23008_ReadCapturedINT+0x58>)
 800187c:	701a      	strb	r2, [r3, #0]
//	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
//	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
//	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
//	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;

	return dryContact;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <MCP23008_ReadCapturedINT+0x58>)
 8001882:	461a      	mov	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	cb03      	ldmia	r3!, {r0, r1}
 8001888:	6010      	str	r0, [r2, #0]
 800188a:	6051      	str	r1, [r2, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	7213      	strb	r3, [r2, #8]
}
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200002a4 	.word	0x200002a4
 800189c:	20000504 	.word	0x20000504

080018a0 <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 80018a6:	2302      	movs	r3, #2
 80018a8:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 80018aa:	23ff      	movs	r3, #255	; 0xff
 80018ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80018ae:	1d3a      	adds	r2, r7, #4
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2302      	movs	r3, #2
 80018b8:	2142      	movs	r1, #66	; 0x42
 80018ba:	4821      	ldr	r0, [pc, #132]	; (8001940 <MCP23008_ConfigureInterrupts+0xa0>)
 80018bc:	f001 fe10 	bl	80034e0 <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 80018c0:	2304      	movs	r3, #4
 80018c2:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 80018c4:	2300      	movs	r3, #0
 80018c6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80018c8:	1d3a      	adds	r2, r7, #4
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2302      	movs	r3, #2
 80018d2:	2142      	movs	r1, #66	; 0x42
 80018d4:	481a      	ldr	r0, [pc, #104]	; (8001940 <MCP23008_ConfigureInterrupts+0xa0>)
 80018d6:	f001 fe03 	bl	80034e0 <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 80018da:	2303      	movs	r3, #3
 80018dc:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 80018de:	2300      	movs	r3, #0
 80018e0:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80018e2:	1d3a      	adds	r2, r7, #4
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2302      	movs	r3, #2
 80018ec:	2142      	movs	r1, #66	; 0x42
 80018ee:	4814      	ldr	r0, [pc, #80]	; (8001940 <MCP23008_ConfigureInterrupts+0xa0>)
 80018f0:	f001 fdf6 	bl	80034e0 <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 80018f4:	2305      	movs	r3, #5
 80018f6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	2142      	movs	r1, #66	; 0x42
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <MCP23008_ConfigureInterrupts+0xa0>)
 8001908:	f001 fede 	bl	80036c8 <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	b25b      	sxtb	r3, r3
 8001910:	f023 0306 	bic.w	r3, r3, #6
 8001914:	b25b      	sxtb	r3, r3
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	b25b      	sxtb	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 8001920:	2305      	movs	r3, #5
 8001922:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001924:	1d3a      	adds	r2, r7, #4
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2302      	movs	r3, #2
 800192e:	2142      	movs	r1, #66	; 0x42
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MCP23008_ConfigureInterrupts+0xa0>)
 8001932:	f001 fdd5 	bl	80034e0 <HAL_I2C_Master_Transmit>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002a4 	.word	0x200002a4

08001944 <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	82fb      	strh	r3, [r7, #22]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x60>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	8afb      	ldrh	r3, [r7, #22]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01c      	beq.n	8001994 <HAL_GPIO_EXTI_IRQHandler+0x50>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x60>)
 800195c:	8afb      	ldrh	r3, [r7, #22]
 800195e:	60d3      	str	r3, [r2, #12]

    switch(GPIO_Pin)
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001966:	d009      	beq.n	800197c <HAL_GPIO_EXTI_IRQHandler+0x38>
 8001968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800196c:	dc14      	bgt.n	8001998 <HAL_GPIO_EXTI_IRQHandler+0x54>
 800196e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001972:	d00b      	beq.n	800198c <HAL_GPIO_EXTI_IRQHandler+0x48>
 8001974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001978:	d008      	beq.n	800198c <HAL_GPIO_EXTI_IRQHandler+0x48>
      case SMOKE_A_Pin:
      case SMOKE_B_Pin:
    	  TxTriggers = SMOKE_SENSOR;
          break;
      default:
        break;
 800197a:	e00d      	b.n	8001998 <HAL_GPIO_EXTI_IRQHandler+0x54>
    	  MCP23008_ReadCapturedINT();
 800197c:	463b      	mov	r3, r7
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff60 	bl	8001844 <MCP23008_ReadCapturedINT>
    	  TxTriggers = DRY_CONTACT;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
          break;
 800198a:	e006      	b.n	800199a <HAL_GPIO_EXTI_IRQHandler+0x56>
    	  TxTriggers = SMOKE_SENSOR;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
          break;
 8001992:	e002      	b.n	800199a <HAL_GPIO_EXTI_IRQHandler+0x56>
    }

  }
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <HAL_GPIO_EXTI_IRQHandler+0x56>
        break;
 8001998:	bf00      	nop
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58000800 	.word	0x58000800
 80019a8:	20000420 	.word	0x20000420

080019ac <ReadSmokeStatus>:

SmokeStatus ReadSmokeStatus(void)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    SmokeStatus smokeStatus;
    smokeStatus.pinA = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 80019b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b8:	482e      	ldr	r0, [pc, #184]	; (8001a74 <ReadSmokeStatus+0xc8>)
 80019ba:	f001 fcd1 	bl	8003360 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	733b      	strb	r3, [r7, #12]
    smokeStatus.pinB = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 80019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d0:	4828      	ldr	r0, [pc, #160]	; (8001a74 <ReadSmokeStatus+0xc8>)
 80019d2:	f001 fcc5 	bl	8003360 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]

    if (!smokeStatus.pinA && !smokeStatus.pinB) {
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00a      	beq.n	8001a06 <ReadSmokeStatus+0x5a>
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <ReadSmokeStatus+0x5a>
        smokeStatus.status = "Clean";
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <ReadSmokeStatus+0xcc>)
 80019fe:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	753b      	strb	r3, [r7, #20]
 8001a04:	e02a      	b.n	8001a5c <ReadSmokeStatus+0xb0>
    } else if (!smokeStatus.pinA && smokeStatus.pinB) {
 8001a06:	7b3b      	ldrb	r3, [r7, #12]
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <ReadSmokeStatus+0x76>
 8001a12:	7b7b      	ldrb	r3, [r7, #13]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <ReadSmokeStatus+0x76>
        smokeStatus.status = "Light Pollution";
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <ReadSmokeStatus+0xd0>)
 8001a1a:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	753b      	strb	r3, [r7, #20]
 8001a20:	e01c      	b.n	8001a5c <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && !smokeStatus.pinB) {
 8001a22:	7b3b      	ldrb	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00a      	beq.n	8001a3e <ReadSmokeStatus+0x92>
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <ReadSmokeStatus+0x92>
        smokeStatus.status = "Moderate Pollution";
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <ReadSmokeStatus+0xd4>)
 8001a36:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 3;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	753b      	strb	r3, [r7, #20]
 8001a3c:	e00e      	b.n	8001a5c <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && smokeStatus.pinB) {
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <ReadSmokeStatus+0xa8>
 8001a44:	7b7b      	ldrb	r3, [r7, #13]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <ReadSmokeStatus+0xa8>
        smokeStatus.status = "Severe Pollution";
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <ReadSmokeStatus+0xd8>)
 8001a4c:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	753b      	strb	r3, [r7, #20]
 8001a52:	e003      	b.n	8001a5c <ReadSmokeStatus+0xb0>
    } else {
        smokeStatus.status = "Unknown"; // Fallback case, should not occur
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <ReadSmokeStatus+0xdc>)
 8001a56:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	753b      	strb	r3, [r7, #20]
    }

    return smokeStatus;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	461c      	mov	r4, r3
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	48000400 	.word	0x48000400
 8001a78:	0800cabc 	.word	0x0800cabc
 8001a7c:	0800cac4 	.word	0x0800cac4
 8001a80:	0800cad4 	.word	0x0800cad4
 8001a84:	0800cae8 	.word	0x0800cae8
 8001a88:	0800cafc 	.word	0x0800cafc

08001a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a66      	ldr	r2, [pc, #408]	; (8001c34 <HAL_UART_RxCpltCallback+0x1a8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_UART_RxCpltCallback+0x2c>
	  {
		  Modbus_RxCallback(&ModbusResp);
 8001a9e:	4866      	ldr	r0, [pc, #408]	; (8001c38 <HAL_UART_RxCpltCallback+0x1ac>)
 8001aa0:	f7ff faa0 	bl	8000fe4 <Modbus_RxCallback>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8001aa4:	4b64      	ldr	r3, [pc, #400]	; (8001c38 <HAL_UART_RxCpltCallback+0x1ac>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <HAL_UART_RxCpltCallback+0x1b0>)
 8001aac:	4413      	add	r3, r2
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4863      	ldr	r0, [pc, #396]	; (8001c40 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ab4:	f004 f9fa 	bl	8005eac <HAL_UART_Receive_IT>
	  }

	  if (huart->Instance == LPUART1) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a61      	ldr	r2, [pc, #388]	; (8001c44 <HAL_UART_RxCpltCallback+0x1b8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	f040 80b4 	bne.w	8001c2c <HAL_UART_RxCpltCallback+0x1a0>
		  // Handle received data
		  uint8_t receivedData = huart->pRxBuffPtr[-1]; // Last received byte
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001acc:	73fb      	strb	r3, [r7, #15]

		  if(lpuartState != UART_IDLE){
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_UART_RxCpltCallback+0x1bc>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80a3 	beq.w	8001c1e <HAL_UART_RxCpltCallback+0x192>
			  // Store received data in buffer
			  responseBuffer[bufferIndex++] = receivedData;
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	b291      	uxth	r1, r2
 8001ae0:	4a5a      	ldr	r2, [pc, #360]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001ae2:	8011      	strh	r1, [r2, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	5453      	strb	r3, [r2, r1]

			  // Check if the buffer is full or if the received character is \r or \n
			  if (receivedData == '\r' || receivedData == '\n' || bufferIndex >= MAX_UART_BUFFER_SIZE) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b0d      	cmp	r3, #13
 8001af0:	d008      	beq.n	8001b04 <HAL_UART_RxCpltCallback+0x78>
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d005      	beq.n	8001b04 <HAL_UART_RxCpltCallback+0x78>
 8001af8:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b00:	f0c0 808d 	bcc.w	8001c1e <HAL_UART_RxCpltCallback+0x192>
				  //responseBuffer[bufferIndex] = '\r'; // Null-terminate the string
				  //printf("Received: %s\n", responseBuffer);
				  switch(lpuartState){
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_UART_RxCpltCallback+0x1bc>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	f200 8085 	bhi.w	8001c18 <HAL_UART_RxCpltCallback+0x18c>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <HAL_UART_RxCpltCallback+0x88>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001c19 	.word	0x08001c19
 8001b18:	08001b2d 	.word	0x08001b2d
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001b75 	.word	0x08001b75
 8001b24:	08001b8b 	.word	0x08001b8b
 8001b28:	08001bcf 	.word	0x08001bcf
				  case AT_RESPONSE_CAPTURE_OK:
					  if (strstr(responseBuffer, "OK") != NULL) {
 8001b2c:	4949      	ldr	r1, [pc, #292]	; (8001c54 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b2e:	4848      	ldr	r0, [pc, #288]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b30:	f007 f9e9 	bl	8008f06 <strstr>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d065      	beq.n	8001c06 <HAL_UART_RxCpltCallback+0x17a>
						  printf("OK RECEIVED\r\n");
 8001b3a:	4847      	ldr	r0, [pc, #284]	; (8001c58 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b3c:	f007 f95a 	bl	8008df4 <puts>
						  responseReceived = true;
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
					  }
					  break;
 8001b46:	e05e      	b.n	8001c06 <HAL_UART_RxCpltCallback+0x17a>
				  case AT_RESPONSE_CAPTURE_NVM_STORED:
					  if (strstr(responseBuffer, "NVM DATA STORED") != NULL) {
 8001b48:	4945      	ldr	r1, [pc, #276]	; (8001c60 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b4a:	4841      	ldr	r0, [pc, #260]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b4c:	f007 f9db 	bl	8008f06 <strstr>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_UART_RxCpltCallback+0xd2>
						  responseReceived = true;
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
					  }
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
						  responseReceived = true;
						  //printf("STORE OK RECEIVED\r\n");
					  }
					  break;
 8001b5c:	e055      	b.n	8001c0a <HAL_UART_RxCpltCallback+0x17e>
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
 8001b5e:	4941      	ldr	r1, [pc, #260]	; (8001c64 <HAL_UART_RxCpltCallback+0x1d8>)
 8001b60:	483b      	ldr	r0, [pc, #236]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b62:	f007 f9d0 	bl	8008f06 <strstr>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d04e      	beq.n	8001c0a <HAL_UART_RxCpltCallback+0x17e>
						  responseReceived = true;
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
					  break;
 8001b72:	e04a      	b.n	8001c0a <HAL_UART_RxCpltCallback+0x17e>
				  case AT_RESPONSE_CAPTURE_RESET:
					  if (strstr(responseBuffer, "APPLICATION_VERSION") != NULL) {
 8001b74:	493c      	ldr	r1, [pc, #240]	; (8001c68 <HAL_UART_RxCpltCallback+0x1dc>)
 8001b76:	4836      	ldr	r0, [pc, #216]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b78:	f007 f9c5 	bl	8008f06 <strstr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d045      	beq.n	8001c0e <HAL_UART_RxCpltCallback+0x182>
						  responseReceived = true;
 8001b82:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
						  //printf("RESET RECEIVED\r\n");
					  }
					  break;
 8001b88:	e041      	b.n	8001c0e <HAL_UART_RxCpltCallback+0x182>
				  case AT_RESPONSE_CAPTURE_JOIN:
					  if (strstr(responseBuffer, "EVT:JOINED") != NULL) {
 8001b8a:	4938      	ldr	r1, [pc, #224]	; (8001c6c <HAL_UART_RxCpltCallback+0x1e0>)
 8001b8c:	4830      	ldr	r0, [pc, #192]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b8e:	f007 f9ba 	bl	8008f06 <strstr>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_UART_RxCpltCallback+0x126>
						  responseReceived = true;
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
						  hasJoinedNetwork = true;
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_UART_RxCpltCallback+0x1e4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
						  printf("EVENT JOINED\r\n");
 8001ba4:	4833      	ldr	r0, [pc, #204]	; (8001c74 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ba6:	f007 f925 	bl	8008df4 <puts>
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
						  bufferIndex = 0;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	801a      	strh	r2, [r3, #0]
						  hasJoinedNetwork = false;
						  //printf("EVENT JOIN FAILED\r\n");
						  bufferIndex = 0;
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
					  }
					  break;
 8001bb0:	e02f      	b.n	8001c12 <HAL_UART_RxCpltCallback+0x186>
					  else if (strstr(responseBuffer, "EVT:JOIN FAILED") != NULL) {
 8001bb2:	4931      	ldr	r1, [pc, #196]	; (8001c78 <HAL_UART_RxCpltCallback+0x1ec>)
 8001bb4:	4826      	ldr	r0, [pc, #152]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bb6:	f007 f9a6 	bl	8008f06 <strstr>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d028      	beq.n	8001c12 <HAL_UART_RxCpltCallback+0x186>
						  hasJoinedNetwork = false;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_UART_RxCpltCallback+0x1e4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
						  bufferIndex = 0;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
					  break;
 8001bcc:	e021      	b.n	8001c12 <HAL_UART_RxCpltCallback+0x186>
				  case AT_RESPONSE_CAPTURE_SEND_OK:
					  if (strstr(responseBuffer, "NO_NETWORK_JOINED") != NULL) {
 8001bce:	492b      	ldr	r1, [pc, #172]	; (8001c7c <HAL_UART_RxCpltCallback+0x1f0>)
 8001bd0:	481f      	ldr	r0, [pc, #124]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001bd2:	f007 f998 	bl	8008f06 <strstr>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_UART_RxCpltCallback+0x158>
						  //responseReceived = true;

						  //printf("ERROR JOIN\r\n");
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
						  bufferIndex = 0;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
						  //printf("EVENT JOIN FAILED\r\n");
						  bufferIndex = 0;
						  //lpuartState = UART_IDLE;
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
					  }
					  break;
 8001be2:	e018      	b.n	8001c16 <HAL_UART_RxCpltCallback+0x18a>
					  else if (strstr(responseBuffer, "OK") != NULL) {
 8001be4:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_UART_RxCpltCallback+0x1c8>)
 8001be6:	481a      	ldr	r0, [pc, #104]	; (8001c50 <HAL_UART_RxCpltCallback+0x1c4>)
 8001be8:	f007 f98d 	bl	8008f06 <strstr>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d011      	beq.n	8001c16 <HAL_UART_RxCpltCallback+0x18a>
						  responseReceived = true;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_UART_RxCpltCallback+0x1d0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
						  printf("SEND PARAM OK\r\n");
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <HAL_UART_RxCpltCallback+0x1f4>)
 8001bfa:	f007 f8fb 	bl	8008df4 <puts>
						  bufferIndex = 0;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	801a      	strh	r2, [r3, #0]
					  break;
 8001c04:	e007      	b.n	8001c16 <HAL_UART_RxCpltCallback+0x18a>
					  break;
 8001c06:	bf00      	nop
 8001c08:	e006      	b.n	8001c18 <HAL_UART_RxCpltCallback+0x18c>
					  break;
 8001c0a:	bf00      	nop
 8001c0c:	e004      	b.n	8001c18 <HAL_UART_RxCpltCallback+0x18c>
					  break;
 8001c0e:	bf00      	nop
 8001c10:	e002      	b.n	8001c18 <HAL_UART_RxCpltCallback+0x18c>
					  break;
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <HAL_UART_RxCpltCallback+0x18c>
					  break;
 8001c16:	bf00      	nop
					  // do nothing for now
					  break;
				  }

				  // Clear the buffer and reset index
				  bufferIndex = 0;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
//				  bufferIndex = 0; // Reset buffer after handling event
//			  }
//		  }

		  // Restart reception
		  HAL_UART_Receive_IT(huart, huart->pRxBuffPtr, 1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	2201      	movs	r2, #1
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f004 f940 	bl	8005eac <HAL_UART_Receive_IT>
	  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	20000424 	.word	0x20000424
 8001c3c:	20000426 	.word	0x20000426
 8001c40:	2000038c 	.word	0x2000038c
 8001c44:	40008000 	.word	0x40008000
 8001c48:	200004f0 	.word	0x200004f0
 8001c4c:	20000574 	.word	0x20000574
 8001c50:	20000510 	.word	0x20000510
 8001c54:	0800cb04 	.word	0x0800cb04
 8001c58:	0800cb08 	.word	0x0800cb08
 8001c5c:	2000050d 	.word	0x2000050d
 8001c60:	0800cb18 	.word	0x0800cb18
 8001c64:	0800cb28 	.word	0x0800cb28
 8001c68:	0800cb3c 	.word	0x0800cb3c
 8001c6c:	0800cb50 	.word	0x0800cb50
 8001c70:	200004f1 	.word	0x200004f1
 8001c74:	0800cb5c 	.word	0x0800cb5c
 8001c78:	0800cb6c 	.word	0x0800cb6c
 8001c7c:	0800cb7c 	.word	0x0800cb7c
 8001c80:	0800cb90 	.word	0x0800cb90

08001c84 <WDTReset>:

void WDTReset(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <WDTReset+0x28>)
 8001c90:	f001 fb7e 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001c94:	2005      	movs	r0, #5
 8001c96:	f001 f801 	bl	8002c9c <HAL_Delay>
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <WDTReset+0x28>)
 8001ca2:	f001 fb75 	bl	8003390 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	48000400 	.word	0x48000400

08001cb0 <scanI2CDevices>:

void scanI2CDevices(void){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	e016      	b.n	8001cea <scanI2CDevices+0x3a>
	  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 5, 5000); // Adjust timeout as needed
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cc8:	2205      	movs	r2, #5
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <scanI2CDevices+0x4c>)
 8001ccc:	f001 fdf2 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71bb      	strb	r3, [r7, #6]

	  if (status == HAL_OK) {
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <scanI2CDevices+0x34>
		printf(" ---- > Device found at address 0x%02X\n", addr);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <scanI2CDevices+0x50>)
 8001ce0:	f007 f802 	bl	8008ce8 <iprintf>
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dae4      	bge.n	8001cbc <scanI2CDevices+0xc>
	  }
	  else{
		// printf("No device found at address 0x%02X\n", addr);
	  }
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200002a4 	.word	0x200002a4
 8001d00:	0800cba0 	.word	0x0800cba0

08001d04 <printLineMarker>:

void printLineMarker(char marker) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 25; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e007      	b.n	8001d24 <printLineMarker+0x20>
        printf("%c ", marker);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <printLineMarker+0x34>)
 8001d1a:	f006 ffe5 	bl	8008ce8 <iprintf>
    for (int i = 0; i < 25; i++) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b18      	cmp	r3, #24
 8001d28:	ddf4      	ble.n	8001d14 <printLineMarker+0x10>
    }
    printf("\r\n");
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <printLineMarker+0x38>)
 8001d2c:	f007 f862 	bl	8008df4 <puts>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	0800cbc8 	.word	0x0800cbc8
 8001d3c:	0800cbcc 	.word	0x0800cbcc

08001d40 <dataToByteArray>:

// Function to convert data to byte array
uint8_t dataToByteArray(void *input, uint8_t *output, DataType type) {
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t size = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    switch (type) {
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b06      	cmp	r3, #6
 8001d56:	d849      	bhi.n	8001dec <dataToByteArray+0xac>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <dataToByteArray+0x20>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d7d 	.word	0x08001d7d
 8001d64:	08001d8b 	.word	0x08001d8b
 8001d68:	08001d9b 	.word	0x08001d9b
 8001d6c:	08001dab 	.word	0x08001dab
 8001d70:	08001dbd 	.word	0x08001dbd
 8001d74:	08001dcd 	.word	0x08001dcd
 8001d78:	08001ddd 	.word	0x08001ddd
        case TYPE_UINT8:
            output[0] = *((uint8_t*)input);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	701a      	strb	r2, [r3, #0]
            size = sizeof(uint8_t);
 8001d84:	2301      	movs	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
            break;
 8001d88:	e030      	b.n	8001dec <dataToByteArray+0xac>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
        case TYPE_UINT16:
            memcpy(output, input, sizeof(uint16_t));
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	801a      	strh	r2, [r3, #0]
            size = sizeof(uint16_t);
 8001d94:	2302      	movs	r3, #2
 8001d96:	75fb      	strb	r3, [r7, #23]
            break;
 8001d98:	e028      	b.n	8001dec <dataToByteArray+0xac>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
        case TYPE_UINT32:
            memcpy(output, input, sizeof(uint32_t));
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	601a      	str	r2, [r3, #0]
            size = sizeof(uint32_t);
 8001da4:	2304      	movs	r3, #4
 8001da6:	75fb      	strb	r3, [r7, #23]
            break;
 8001da8:	e020      	b.n	8001dec <dataToByteArray+0xac>
        case TYPE_INT8:
            output[0] = *((int8_t*)input);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f993 3000 	ldrsb.w	r3, [r3]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	701a      	strb	r2, [r3, #0]
            size = sizeof(int8_t);
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dba:	e017      	b.n	8001dec <dataToByteArray+0xac>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
        case TYPE_INT16:
            memcpy(output, input, sizeof(int16_t));
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	801a      	strh	r2, [r3, #0]
            size = sizeof(int16_t);
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dca:	e00f      	b.n	8001dec <dataToByteArray+0xac>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
        case TYPE_INT32:
            memcpy(output, input, sizeof(int32_t));
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	601a      	str	r2, [r3, #0]
            size = sizeof(int32_t);
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dda:	e007      	b.n	8001dec <dataToByteArray+0xac>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
        case TYPE_FLOAT:
            memcpy(output, input, sizeof(float));
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	601a      	str	r2, [r3, #0]
            size = sizeof(float);
 8001de6:	2304      	movs	r3, #4
 8001de8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dea:	bf00      	nop
    }
    return size;
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <generatePayload>:


// Function to generate the payload
bool generatePayload(void **inputs, DataType *types, uint8_t itemCount, MessageType msgType, TxPayload *payload) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	71bb      	strb	r3, [r7, #6]
    if (inputs == NULL || types == NULL || itemCount == 0 || itemCount > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <generatePayload+0x2e>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <generatePayload+0x2e>
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <generatePayload+0x2e>
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b32      	cmp	r3, #50	; 0x32
 8001e28:	d901      	bls.n	8001e2e <generatePayload+0x32>
        return false;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e033      	b.n	8001e96 <generatePayload+0x9a>
    }

    payload->msgType = msgType;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	79ba      	ldrb	r2, [r7, #6]
 8001e32:	701a      	strb	r2, [r3, #0]
    payload->buffer[0] = msgType;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	79ba      	ldrb	r2, [r7, #6]
 8001e38:	705a      	strb	r2, [r3, #1]
    uint8_t index = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < itemCount; ++i) {
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75bb      	strb	r3, [r7, #22]
 8001e42:	e01f      	b.n	8001e84 <generatePayload+0x88>
        uint8_t size = dataToByteArray(inputs[i], &payload->buffer[index], types[i]);
 8001e44:	7dbb      	ldrb	r3, [r7, #22]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	4413      	add	r3, r2
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	7dbb      	ldrb	r3, [r7, #22]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f7ff ff6e 	bl	8001d40 <dataToByteArray>
 8001e64:	4603      	mov	r3, r0
 8001e66:	757b      	strb	r3, [r7, #21]
        if (index + size > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 8001e68:	7dfa      	ldrb	r2, [r7, #23]
 8001e6a:	7d7b      	ldrb	r3, [r7, #21]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	2b32      	cmp	r3, #50	; 0x32
 8001e70:	dd01      	ble.n	8001e76 <generatePayload+0x7a>
            return false; // Exceeds maximum buffer size
 8001e72:	2300      	movs	r3, #0
 8001e74:	e00f      	b.n	8001e96 <generatePayload+0x9a>
        }
        index += size;
 8001e76:	7dfa      	ldrb	r2, [r7, #23]
 8001e78:	7d7b      	ldrb	r3, [r7, #21]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < itemCount; ++i) {
 8001e7e:	7dbb      	ldrb	r3, [r7, #22]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75bb      	strb	r3, [r7, #22]
 8001e84:	7dba      	ldrb	r2, [r7, #22]
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3db      	bcc.n	8001e44 <generatePayload+0x48>
    }

    payload->length = index;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	7dfa      	ldrb	r2, [r7, #23]
 8001e90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return true;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <generateUnscheduledTxPayload>:

bool generateUnscheduledTxPayload(Sensors sensors, TxPayload *payload){
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b088      	sub	sp, #32
 8001ea6:	af02      	add	r7, sp, #8
 8001ea8:	f107 0c20 	add.w	ip, r7, #32
 8001eac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = UNSCHEDULED_TRANSMISSION;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value, &sensors.smoke.level};
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eca:	613b      	str	r3, [r7, #16]
	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8 };
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <generateUnscheduledTxPayload+0x58>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	603b      	str	r3, [r7, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 8001ed2:	7dfa      	ldrb	r2, [r7, #23]
 8001ed4:	4639      	mov	r1, r7
 8001ed6:	1d38      	adds	r0, r7, #4
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	2204      	movs	r2, #4
 8001ee0:	f7ff ff8c 	bl	8001dfc <generatePayload>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75bb      	strb	r3, [r7, #22]
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 8001ee8:	7dbb      	ldrb	r3, [r7, #22]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef4:	b004      	add	sp, #16
 8001ef6:	4770      	bx	lr
 8001ef8:	0800cbd0 	.word	0x0800cbd0

08001efc <generateHeartbeatTxPayload>:

bool generateHeartbeatTxPayload(Sensors sensors, TxPayload *payload){
 8001efc:	b084      	sub	sp, #16
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08c      	sub	sp, #48	; 0x30
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001f08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = HEARTBEAT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value,
 8001f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f3a:	623b      	str	r3, [r7, #32]
					  &sensors.smoke.level, &sensors.ltc4015.VIN, &sensors.ltc4015.VBAT, &sensors.ltc4015.VSYS};

	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8, TYPE_FLOAT, TYPE_FLOAT, TYPE_FLOAT };
 8001f3c:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <generateHeartbeatTxPayload+0x84>)
 8001f3e:	463b      	mov	r3, r7
 8001f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f44:	6018      	str	r0, [r3, #0]
 8001f46:	3304      	adds	r3, #4
 8001f48:	8019      	strh	r1, [r3, #0]
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	0c0a      	lsrs	r2, r1, #16
 8001f4e:	701a      	strb	r2, [r3, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 8001f50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f54:	4639      	mov	r1, r7
 8001f56:	f107 0008 	add.w	r0, r7, #8
 8001f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	2207      	movs	r2, #7
 8001f62:	f7ff ff4b 	bl	8001dfc <generatePayload>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 8001f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f7a:	b004      	add	sp, #16
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	0800cbd4 	.word	0x0800cbd4

08001f84 <handleInterruptTriggers>:

void handleInterruptTriggers(UnscheduledTxTriggers trigger){
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b0a1      	sub	sp, #132	; 0x84
 8001f88:	af0c      	add	r7, sp, #48	; 0x30
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]
	//__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);


	//DryContactStatus dryContact;
	//SmokeStatus smokeStatus;
	switch(trigger){
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8091 	beq.w	80020b8 <handleInterruptTriggers+0x134>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f2c0 8090 	blt.w	80020bc <handleInterruptTriggers+0x138>
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	f200 808c 	bhi.w	80020bc <handleInterruptTriggers+0x138>
		break;
	case DRY_CONTACT:
	case SMOKE_SENSOR:
	case SHT:

		sensors.dryContact = MCP23008_ReadInputs();
 8001fa4:	4c48      	ldr	r4, [pc, #288]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fbcf 	bl	800174c <MCP23008_ReadInputs>
 8001fae:	f104 0314 	add.w	r3, r4, #20
 8001fb2:	463a      	mov	r2, r7
 8001fb4:	6810      	ldr	r0, [r2, #0]
 8001fb6:	6851      	ldr	r1, [r2, #4]
 8001fb8:	c303      	stmia	r3!, {r0, r1}
 8001fba:	7a12      	ldrb	r2, [r2, #8]
 8001fbc:	701a      	strb	r2, [r3, #0]

	    sensors.smoke = ReadSmokeStatus();
 8001fbe:	4c42      	ldr	r4, [pc, #264]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fcf2 	bl	80019ac <ReadSmokeStatus>
 8001fc8:	f104 0308 	add.w	r3, r4, #8
 8001fcc:	463a      	mov	r2, r7
 8001fce:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    readSHT40(&sensors.sht40);
 8001fd4:	483c      	ldr	r0, [pc, #240]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fd6:	f000 f95d 	bl	8002294 <readSHT40>


#ifdef SERIAL_DEBUG_INTERRUPT
		printLineMarker('!');
 8001fda:	2021      	movs	r0, #33	; 0x21
 8001fdc:	f7ff fe92 	bl	8001d04 <printLineMarker>
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
				sensors.dryContact.DC8, sensors.dryContact.DC7, sensors.dryContact.DC6, sensors.dryContact.DC5,
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001fe4:	461d      	mov	r5, r3
				sensors.dryContact.DC8, sensors.dryContact.DC7, sensors.dryContact.DC6, sensors.dryContact.DC5,
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fe8:	7edb      	ldrb	r3, [r3, #27]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001fea:	461e      	mov	r6, r3
				sensors.dryContact.DC8, sensors.dryContact.DC7, sensors.dryContact.DC6, sensors.dryContact.DC5,
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001fee:	7e9b      	ldrb	r3, [r3, #26]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001ff0:	469c      	mov	ip, r3
				sensors.dryContact.DC8, sensors.dryContact.DC7, sensors.dryContact.DC6, sensors.dryContact.DC5,
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001ff4:	7e5b      	ldrb	r3, [r3, #25]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001ff6:	461a      	mov	r2, r3
				sensors.dryContact.DC4, sensors.dryContact.DC3, sensors.dryContact.DC2, sensors.dryContact.DC1);
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <handleInterruptTriggers+0x144>)
 8001ffa:	7e1b      	ldrb	r3, [r3, #24]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001ffc:	4619      	mov	r1, r3
				sensors.dryContact.DC4, sensors.dryContact.DC3, sensors.dryContact.DC2, sensors.dryContact.DC1);
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <handleInterruptTriggers+0x144>)
 8002000:	7ddb      	ldrb	r3, [r3, #23]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8002002:	4618      	mov	r0, r3
				sensors.dryContact.DC4, sensors.dryContact.DC3, sensors.dryContact.DC2, sensors.dryContact.DC1);
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <handleInterruptTriggers+0x144>)
 8002006:	7d9b      	ldrb	r3, [r3, #22]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8002008:	461c      	mov	r4, r3
				sensors.dryContact.DC4, sensors.dryContact.DC3, sensors.dryContact.DC2, sensors.dryContact.DC1);
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <handleInterruptTriggers+0x144>)
 800200c:	7d5b      	ldrb	r3, [r3, #21]
		printf("\nDRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 800200e:	9304      	str	r3, [sp, #16]
 8002010:	9403      	str	r4, [sp, #12]
 8002012:	9002      	str	r0, [sp, #8]
 8002014:	9101      	str	r1, [sp, #4]
 8002016:	9200      	str	r2, [sp, #0]
 8002018:	4663      	mov	r3, ip
 800201a:	4632      	mov	r2, r6
 800201c:	4629      	mov	r1, r5
 800201e:	482b      	ldr	r0, [pc, #172]	; (80020cc <handleInterruptTriggers+0x148>)
 8002020:	f006 fe62 	bl	8008ce8 <iprintf>
		printf("\nSMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
				sensors.smoke.pinA, sensors.smoke.pinB, sensors.smoke.status);
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <handleInterruptTriggers+0x144>)
 8002026:	7a1b      	ldrb	r3, [r3, #8]
		printf("\nSMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 8002028:	4619      	mov	r1, r3
				sensors.smoke.pinA, sensors.smoke.pinB, sensors.smoke.status);
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <handleInterruptTriggers+0x144>)
 800202c:	7a5b      	ldrb	r3, [r3, #9]
		printf("\nSMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 800202e:	461a      	mov	r2, r3
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <handleInterruptTriggers+0x144>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4826      	ldr	r0, [pc, #152]	; (80020d0 <handleInterruptTriggers+0x14c>)
 8002036:	f006 fe57 	bl	8008ce8 <iprintf>
		printf("\nSHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht40.temperature, sensors.sht40.humidity);
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <handleInterruptTriggers+0x144>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa5a 	bl	80004f8 <__aeabi_f2d>
 8002044:	4604      	mov	r4, r0
 8002046:	460d      	mov	r5, r1
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <handleInterruptTriggers+0x144>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa53 	bl	80004f8 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9cd 2300 	strd	r2, r3, [sp]
 800205a:	4622      	mov	r2, r4
 800205c:	462b      	mov	r3, r5
 800205e:	481d      	ldr	r0, [pc, #116]	; (80020d4 <handleInterruptTriggers+0x150>)
 8002060:	f006 fe42 	bl	8008ce8 <iprintf>
		printLineMarker('!');
 8002064:	2021      	movs	r0, #33	; 0x21
 8002066:	f7ff fe4d 	bl	8001d04 <printLineMarker>
#endif

		// Create Payload
		// Generate Unscheduled Payload
		TxPayload _heartBeatPayload;
		generateUnscheduledTxPayload(sensors, &_heartBeatPayload);
 800206a:	4e17      	ldr	r6, [pc, #92]	; (80020c8 <handleInterruptTriggers+0x144>)
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	9309      	str	r3, [sp, #36]	; 0x24
 8002072:	466d      	mov	r5, sp
 8002074:	f106 0410 	add.w	r4, r6, #16
 8002078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	602b      	str	r3, [r5, #0]
 8002084:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002088:	f7ff ff0a 	bl	8001ea0 <generateUnscheduledTxPayload>

		sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 800208c:	466d      	mov	r5, sp
 800208e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800209e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	cb0c      	ldmia	r3, {r2, r3}
 80020a8:	2101      	movs	r1, #1
 80020aa:	2003      	movs	r0, #3
 80020ac:	f000 f816 	bl	80020dc <sendToLora>

		TxTriggers = IDLE;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <handleInterruptTriggers+0x154>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]

		break;
 80020b6:	e002      	b.n	80020be <handleInterruptTriggers+0x13a>
		break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <handleInterruptTriggers+0x13a>
	default:
		// do nothing
		break;
 80020bc:	bf00      	nop
	}

}
 80020be:	bf00      	nop
 80020c0:	3754      	adds	r7, #84	; 0x54
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200004bc 	.word	0x200004bc
 80020cc:	0800cbdc 	.word	0x0800cbdc
 80020d0:	0800cc08 	.word	0x0800cc08
 80020d4:	0800cc34 	.word	0x0800cc34
 80020d8:	20000420 	.word	0x20000420

080020dc <sendToLora>:

    return result;
}


bool sendToLora(uint8_t portNumber, bool isConfirmedUplink, TxPayload payload){
 80020dc:	b082      	sub	sp, #8
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b08b      	sub	sp, #44	; 0x2c
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80020e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	460b      	mov	r3, r1
 80020f2:	71bb      	strb	r3, [r7, #6]
	// Base command string
	const char *AT_SEND_ = "AT+SEND=";
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <sendToLora+0x148>)
 80020f6:	623b      	str	r3, [r7, #32]

	// Convert portNumber and isConfirmedUplink to strings
	char portNumberStr[4]; // Assuming portNumber won't exceed 3 digits
	snprintf(portNumberStr, sizeof(portNumberStr), "%d", portNumber);
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f107 0010 	add.w	r0, r7, #16
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <sendToLora+0x14c>)
 8002100:	2104      	movs	r1, #4
 8002102:	f006 fe95 	bl	8008e30 <sniprintf>

	char confirmedUplinkStr[2]; // Single digit for true (1) or false (0)
	snprintf(confirmedUplinkStr, sizeof(confirmedUplinkStr), "%d", isConfirmedUplink);
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	f107 000c 	add.w	r0, r7, #12
 800210c:	4a46      	ldr	r2, [pc, #280]	; (8002228 <sendToLora+0x14c>)
 800210e:	2102      	movs	r1, #2
 8002110:	f006 fe8e 	bl	8008e30 <sniprintf>

	// Calculate the total length needed
	int total_length = strlen(AT_SEND_) + strlen(portNumberStr) + 1 + strlen(confirmedUplinkStr) + 1 + (payload.length * 2) + 2 + 1;
 8002114:	6a38      	ldr	r0, [r7, #32]
 8002116:	f7fe f833 	bl	8000180 <strlen>
 800211a:	4604      	mov	r4, r0
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f82d 	bl	8000180 <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	441c      	add	r4, r3
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f826 	bl	8000180 <strlen>
 8002134:	4603      	mov	r3, r0
 8002136:	4423      	add	r3, r4
 8002138:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	4413      	add	r3, r2
 8002140:	3305      	adds	r3, #5
 8002142:	61fb      	str	r3, [r7, #28]

	// Allocate memory for the full command string
	char *result = (char *)malloc(total_length * sizeof(char));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4618      	mov	r0, r3
 8002148:	f005 fe4e 	bl	8007de8 <malloc>
 800214c:	4603      	mov	r3, r0
 800214e:	61bb      	str	r3, [r7, #24]

	if (result == NULL) {
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <sendToLora+0x7e>
		// Handle memory allocation failure
		return false;
 8002156:	2300      	movs	r3, #0
 8002158:	e05c      	b.n	8002214 <sendToLora+0x138>
	}

	// Construct the command string
	strcpy(result, AT_SEND_);
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	69b8      	ldr	r0, [r7, #24]
 800215e:	f006 feca 	bl	8008ef6 <strcpy>
	strcat(result, portNumberStr);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4619      	mov	r1, r3
 8002168:	69b8      	ldr	r0, [r7, #24]
 800216a:	f006 feb5 	bl	8008ed8 <strcat>
	strcat(result, ":");
 800216e:	69b8      	ldr	r0, [r7, #24]
 8002170:	f7fe f806 	bl	8000180 <strlen>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	4413      	add	r3, r2
 800217c:	492b      	ldr	r1, [pc, #172]	; (800222c <sendToLora+0x150>)
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	8013      	strh	r3, [r2, #0]
	strcat(result, confirmedUplinkStr);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	69b8      	ldr	r0, [r7, #24]
 800218e:	f006 fea3 	bl	8008ed8 <strcat>
	strcat(result, ":");
 8002192:	69b8      	ldr	r0, [r7, #24]
 8002194:	f7fd fff4 	bl	8000180 <strlen>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4413      	add	r3, r2
 80021a0:	4922      	ldr	r1, [pc, #136]	; (800222c <sendToLora+0x150>)
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	8013      	strh	r3, [r2, #0]

	// Concatenate the payload
	for (int x = 0; x < payload.length; x++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	e013      	b.n	80021d8 <sendToLora+0xfc>
		char temp[3];
		snprintf(temp, sizeof(temp), "%02X", payload.buffer[x]);
 80021b0:	f107 0239 	add.w	r2, r7, #57	; 0x39
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f107 0008 	add.w	r0, r7, #8
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <sendToLora+0x154>)
 80021c0:	2103      	movs	r1, #3
 80021c2:	f006 fe35 	bl	8008e30 <sniprintf>
		strcat(result, temp);
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f006 fe83 	bl	8008ed8 <strcat>
	for (int x = 0; x < payload.length; x++) {
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80021dc:	461a      	mov	r2, r3
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	4293      	cmp	r3, r2
 80021e2:	dbe5      	blt.n	80021b0 <sendToLora+0xd4>
	}

	// Append \r\n at the end
	strcat(result, "\r\n");
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f7fd ffcb 	bl	8000180 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <sendToLora+0x158>)
 80021f4:	8811      	ldrh	r1, [r2, #0]
 80021f6:	7892      	ldrb	r2, [r2, #2]
 80021f8:	8019      	strh	r1, [r3, #0]
 80021fa:	709a      	strb	r2, [r3, #2]

	// Send the command
	bool commandSent = sendATCommand(result, 2000, AT_RESPONSE_CAPTURE_SEND_OK);
 80021fc:	2205      	movs	r2, #5
 80021fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002202:	69b8      	ldr	r0, [r7, #24]
 8002204:	f000 f818 	bl	8002238 <sendATCommand>
 8002208:	4603      	mov	r3, r0
 800220a:	75fb      	strb	r3, [r7, #23]

	// Free the allocated memory
	free(result);
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	f005 fdf3 	bl	8007df8 <free>

	return commandSent;
 8002212:	7dfb      	ldrb	r3, [r7, #23]

}
 8002214:	4618      	mov	r0, r3
 8002216:	372c      	adds	r7, #44	; 0x2c
 8002218:	46bd      	mov	sp, r7
 800221a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800221e:	b002      	add	sp, #8
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0800cdd8 	.word	0x0800cdd8
 8002228:	0800cde4 	.word	0x0800cde4
 800222c:	0800cde8 	.word	0x0800cde8
 8002230:	0800cdcc 	.word	0x0800cdcc
 8002234:	0800cdd4 	.word	0x0800cdd4

08002238 <sendATCommand>:

bool sendATCommand(char *command, uint32_t responseWaitTime, LPUARTState _lpuartState) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]

    lpuartState = _lpuartState;
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <sendATCommand+0x54>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	7013      	strb	r3, [r2, #0]
    //bufferIndex = 0;
    responseReceived = false;
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <sendATCommand+0x58>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
    //memset(responseBuffer, 0, MAX_UART_BUFFER_SIZE);
    printf(command);
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f006 fd48 	bl	8008ce8 <iprintf>

    // Wait for response or timeout
    uint32_t startTick = HAL_GetTick();
 8002258:	f000 fd08 	bl	8002c6c <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 800225e:	e005      	b.n	800226c <sendATCommand+0x34>
        if (responseReceived) {
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <sendATCommand+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <sendATCommand+0x34>
            return true; // "OK" response received
 8002268:	2301      	movs	r3, #1
 800226a:	e00b      	b.n	8002284 <sendATCommand+0x4c>
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 800226c:	f000 fcfe 	bl	8002c6c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f1      	bhi.n	8002260 <sendATCommand+0x28>
        }
    }

    lpuartState = UART_IDLE;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <sendATCommand+0x54>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]

    return false; // Timeout occurred without receiving "OK"
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200004f0 	.word	0x200004f0
 8002290:	2000050d 	.word	0x2000050d

08002294 <readSHT40>:

void readSHT40(SHT40 *_sht40){
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = SHT40_Measure(&hi2c1, &sht40, MED_PRECISION);
 800229c:	22f6      	movs	r2, #246	; 0xf6
 800229e:	490f      	ldr	r1, [pc, #60]	; (80022dc <readSHT40+0x48>)
 80022a0:	480f      	ldr	r0, [pc, #60]	; (80022e0 <readSHT40+0x4c>)
 80022a2:	f000 fafa 	bl	800289a <SHT40_Measure>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]

	if(ret == HAL_ERROR){
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <readSHT40+0x2e>
		_sht40->temperature  = 0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
		_sht40->humidity     = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
	}else{
		_sht40->temperature = sht40.temperature;
		_sht40->humidity    = sht40.rel_humidity;
	}

}
 80022c0:	e007      	b.n	80022d2 <readSHT40+0x3e>
		_sht40->temperature = sht40.temperature;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <readSHT40+0x48>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
		_sht40->humidity    = sht40.rel_humidity;
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <readSHT40+0x48>)
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200004fc 	.word	0x200004fc
 80022e0:	200002a4 	.word	0x200002a4

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ec:	e7fe      	b.n	80022ec <Error_Handler+0x8>

080022ee <LL_AHB2_GRP1_EnableClock>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002344:	68fb      	ldr	r3, [r7, #12]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b09c      	sub	sp, #112	; 0x70
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2250      	movs	r2, #80	; 0x50
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fd1d 	bl	8007e24 <memset>
  if(hi2c->Instance==I2C1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d126      	bne.n	8002442 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023f4:	2304      	movs	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4618      	mov	r0, r3
 8002404:	f003 f9cd 	bl	80057a2 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800240e:	f7ff ff69 	bl	80022e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	2002      	movs	r0, #2
 8002414:	f7ff ff6b 	bl	80022ee <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	2312      	movs	r3, #18
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800242a:	2304      	movs	r3, #4
 800242c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002432:	4619      	mov	r1, r3
 8002434:	4806      	ldr	r0, [pc, #24]	; (8002450 <HAL_I2C_MspInit+0x8c>)
 8002436:	f000 fe23 	bl	8003080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800243a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800243e:	f7ff ff6f 	bl	8002320 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002442:	bf00      	nop
 8002444:	3770      	adds	r7, #112	; 0x70
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40005400 	.word	0x40005400
 8002450:	48000400 	.word	0x48000400

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b09c      	sub	sp, #112	; 0x70
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2250      	movs	r2, #80	; 0x50
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f005 fcd5 	bl	8007e24 <memset>
  if(huart->Instance==LPUART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_UART_MspInit+0xf8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d12c      	bne.n	80024de <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002484:	2302      	movs	r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f986 	bl	80057a2 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800249c:	f7ff ff22 	bl	80022e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff ff56 	bl	8002352 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	2004      	movs	r0, #4
 80024a8:	f7ff ff21 	bl	80022ee <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ac:	2303      	movs	r3, #3
 80024ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024bc:	2308      	movs	r3, #8
 80024be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4822      	ldr	r0, [pc, #136]	; (8002550 <HAL_UART_MspInit+0xfc>)
 80024c8:	f000 fdda 	bl	8003080 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2025      	movs	r0, #37	; 0x25
 80024d2:	f000 fce2 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024d6:	2025      	movs	r0, #37	; 0x25
 80024d8:	f000 fcf9 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024dc:	e031      	b.n	8002542 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_UART_MspInit+0x100>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d12c      	bne.n	8002542 <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f954 	bl	80057a2 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 8002500:	f7ff fef0 	bl	80022e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002508:	f7ff ff3c 	bl	8002384 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	2002      	movs	r0, #2
 800250e:	f7ff feee 	bl	80022ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002522:	2307      	movs	r3, #7
 8002524:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800252a:	4619      	mov	r1, r3
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <HAL_UART_MspInit+0x104>)
 800252e:	f000 fda7 	bl	8003080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	2024      	movs	r0, #36	; 0x24
 8002538:	f000 fcaf 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800253c:	2024      	movs	r0, #36	; 0x24
 800253e:	f000 fcc6 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3770      	adds	r7, #112	; 0x70
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40008000 	.word	0x40008000
 8002550:	48000800 	.word	0x48000800
 8002554:	40013800 	.word	0x40013800
 8002558:	48000400 	.word	0x48000400

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 fb4c 	bl	8002c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <USART1_IRQHandler+0x10>)
 80025b6:	f003 fcc5 	bl	8005f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000038c 	.word	0x2000038c

080025c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <LPUART1_IRQHandler+0x10>)
 80025ca:	f003 fcbb 	bl	8005f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002f8 	.word	0x200002f8

080025d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 80025dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025e0:	f7ff f9b0 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 80025e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025e8:	f7ff f9ac 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025f0:	f7ff f9a8 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return 1;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_kill>:

int _kill(int pid, int sig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002612:	f005 fbbf 	bl	8007d94 <__errno>
 8002616:	4603      	mov	r3, r0
 8002618:	2216      	movs	r2, #22
 800261a:	601a      	str	r2, [r3, #0]
  return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_exit>:

void _exit (int status)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffe7 	bl	8002608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800263a:	e7fe      	b.n	800263a <_exit+0x12>

0800263c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e00a      	b.n	8002664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800264e:	f3af 8000 	nop.w
 8002652:	4601      	mov	r1, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	60ba      	str	r2, [r7, #8]
 800265a:	b2ca      	uxtb	r2, r1
 800265c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbf0      	blt.n	800264e <_read+0x12>
  }

  return len;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e009      	b.n	800269c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fced 	bl	8001070 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbf1      	blt.n	8002688 <_write+0x12>
  }
  return len;
 80026a4:	687b      	ldr	r3, [r7, #4]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_close>:

int _close(int file)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d6:	605a      	str	r2, [r3, #4]
  return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <_isatty>:

int _isatty(int file)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f005 fb24 	bl	8007d94 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <_sbrk+0x64>)
 8002768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20030000 	.word	0x20030000
 8002778:	00000400 	.word	0x00000400
 800277c:	20000578 	.word	0x20000578
 8002780:	20000590 	.word	0x20000590

08002784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <SystemInit+0x98>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <SystemInit+0x98>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80027b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <SystemInit+0x9c>)
 80027be:	4013      	ands	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ce:	f023 0305 	bic.w	r3, r3, #5
 80027d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <SystemInit+0xa0>)
 80027f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <SystemInit+0xa0>)
 80027f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	faf6fefb 	.word	0xfaf6fefb
 8002824:	22041000 	.word	0x22041000

08002828 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002828:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282c:	3304      	adds	r3, #4

0800282e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800282e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002830:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002832:	d3f9      	bcc.n	8002828 <CopyDataInit>
  bx lr
 8002834:	4770      	bx	lr

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002836:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002838:	3004      	adds	r0, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800283a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>
  bx lr
 800283e:	4770      	bx	lr

08002840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff ff9e 	bl	8002784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <LoopForever+0x6>)
 800284a:	490c      	ldr	r1, [pc, #48]	; (800287c <LoopForever+0xa>)
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <LoopForever+0xe>)
 800284e:	2300      	movs	r3, #0
 8002850:	f7ff ffed 	bl	800282e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <LoopForever+0x12>)
 8002856:	490c      	ldr	r1, [pc, #48]	; (8002888 <LoopForever+0x16>)
 8002858:	4a0c      	ldr	r2, [pc, #48]	; (800288c <LoopForever+0x1a>)
 800285a:	2300      	movs	r3, #0
 800285c:	f7ff ffe7 	bl	800282e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <LoopForever+0x1e>)
 8002862:	490c      	ldr	r1, [pc, #48]	; (8002894 <LoopForever+0x22>)
 8002864:	2300      	movs	r3, #0
 8002866:	f7ff ffe8 	bl	800283a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800286a:	f005 fa99 	bl	8007da0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800286e:	f7fe fc11 	bl	8001094 <main>

08002872 <LoopForever>:

LoopForever:
  b LoopForever
 8002872:	e7fe      	b.n	8002872 <LoopForever>
  ldr   r0, =_estack
 8002874:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002878:	20000008 	.word	0x20000008
 800287c:	200001ec 	.word	0x200001ec
 8002880:	0800d49c 	.word	0x0800d49c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002884:	20030000 	.word	0x20030000
 8002888:	20030000 	.word	0x20030000
 800288c:	0800d680 	.word	0x0800d680
  INIT_BSS _sbss, _ebss
 8002890:	200001ec 	.word	0x200001ec
 8002894:	20000590 	.word	0x20000590

08002898 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC1_IRQHandler>

0800289a <SHT40_Measure>:
};

/*
 * Measurement-Taking
 */
HAL_StatusTypeDef SHT40_Measure(I2C_HandleTypeDef* i2cHandle, SHT40_Measurement* result, SHT40_Precision precision) {
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
    uint8_t response[6];
    if (i2c_communicate(i2cHandle, (uint8_t*)&precision, response) == HAL_OK) {
 80028a8:	f107 0210 	add.w	r2, r7, #16
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	4619      	mov	r1, r3
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f879 	bl	80029a8 <i2c_communicate>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <SHT40_Measure+0x32>
        return read_temp_humidity(response, result);
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f8a4 	bl	8002a10 <read_temp_humidity>
 80028c8:	4603      	mov	r3, r0
 80028ca:	e000      	b.n	80028ce <SHT40_Measure+0x34>
    }
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <SHT40_ReadSerial>:
}

/*
 * Serial
 */
HAL_StatusTypeDef SHT40_ReadSerial(I2C_HandleTypeDef* i2cHandle, uint32_t* result) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    static uint8_t COMMAND = SHT40_READ_SERIAL;
    uint8_t serial_response[6];

    if( i2c_communicate(i2cHandle, &COMMAND, serial_response) == HAL_OK ) {
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	461a      	mov	r2, r3
 80028e8:	491a      	ldr	r1, [pc, #104]	; (8002954 <SHT40_ReadSerial+0x7c>)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f85c 	bl	80029a8 <i2c_communicate>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d129      	bne.n	800294a <SHT40_ReadSerial+0x72>
        uint16_t serial_msb = serial_response[0] << 8 | serial_response[1];
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b21b      	sxth	r3, r3
 8002904:	82fb      	strh	r3, [r7, #22]
        uint16_t serial_lsb = serial_response[3] << 8 | serial_response[4];
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	7c3b      	ldrb	r3, [r7, #16]
 800290e:	b21b      	sxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b21b      	sxth	r3, r3
 8002914:	82bb      	strh	r3, [r7, #20]

        if( verify_checksum(serial_msb, serial_response[2]) && verify_checksum(serial_lsb, serial_response[5]) ) {
 8002916:	7bba      	ldrb	r2, [r7, #14]
 8002918:	8afb      	ldrh	r3, [r7, #22]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f81b 	bl	8002958 <verify_checksum>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <SHT40_ReadSerial+0x72>
 8002928:	7c7a      	ldrb	r2, [r7, #17]
 800292a:	8abb      	ldrh	r3, [r7, #20]
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f812 	bl	8002958 <verify_checksum>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <SHT40_ReadSerial+0x72>
            *result = ((uint32_t)serial_msb << 16) | serial_lsb;
 800293a:	8afb      	ldrh	r3, [r7, #22]
 800293c:	041a      	lsls	r2, r3, #16
 800293e:	8abb      	ldrh	r3, [r7, #20]
 8002940:	431a      	orrs	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <SHT40_ReadSerial+0x74>
        }
    }
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000000c 	.word	0x2000000c

08002958 <verify_checksum>:

/*
 * Returns whether the provided CRC8 checksum matches that
 * of the provided 16-bit data
 */
static bool verify_checksum(uint16_t data, uint8_t checksum) {
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	80fb      	strh	r3, [r7, #6]
 8002964:	4613      	mov	r3, r2
 8002966:	717b      	strb	r3, [r7, #5]
    uint8_t calculated_crc = 0xFF;
 8002968:	23ff      	movs	r3, #255	; 0xff
 800296a:	73fb      	strb	r3, [r7, #15]

    calculated_crc = CRC8_TABLE[calculated_crc ^ (data >> 8)];
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	88fa      	ldrh	r2, [r7, #6]
 8002970:	0a12      	lsrs	r2, r2, #8
 8002972:	b292      	uxth	r2, r2
 8002974:	4053      	eors	r3, r2
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <verify_checksum+0x4c>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	73fb      	strb	r3, [r7, #15]
    calculated_crc = CRC8_TABLE[calculated_crc ^ (data & 0xFF)];
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4053      	eors	r3, r2
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <verify_checksum+0x4c>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	73fb      	strb	r3, [r7, #15]

    return calculated_crc == checksum;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	797b      	ldrb	r3, [r7, #5]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	0800ceb8 	.word	0x0800ceb8

080029a8 <i2c_communicate>:

/*
 * Common I2C communication function
 */
static HAL_StatusTypeDef i2c_communicate(I2C_HandleTypeDef* i2cHandle, uint8_t* command, uint8_t* response) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
//        return HAL_ERROR;
//    }

    HAL_StatusTypeDef ret;

    HAL_Delay(100);
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	f000 f971 	bl	8002c9c <HAL_Delay>

    ret = HAL_I2C_Master_Transmit(i2cHandle, SHT40_I2C_ADDR, command, 1, SHT40_I2C_TIMEOUT);
 80029ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	2188      	movs	r1, #136	; 0x88
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fd8a 	bl	80034e0 <HAL_I2C_Master_Transmit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <i2c_communicate+0x32>
    	return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e016      	b.n	8002a08 <i2c_communicate+0x60>
    }

    HAL_Delay(100);
 80029da:	2064      	movs	r0, #100	; 0x64
 80029dc:	f000 f95e 	bl	8002c9c <HAL_Delay>

    ret = HAL_I2C_Master_Receive(i2cHandle, SHT40_I2C_ADDR, response, SHT40_I2C_RESP_LEN, SHT40_I2C_TIMEOUT);
 80029e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2306      	movs	r3, #6
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	2188      	movs	r1, #136	; 0x88
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fe6b 	bl	80036c8 <HAL_I2C_Master_Receive>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <i2c_communicate+0x58>
		return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e003      	b.n	8002a08 <i2c_communicate+0x60>
	}

    HAL_Delay(100);
 8002a00:	2064      	movs	r0, #100	; 0x64
 8002a02:	f000 f94b 	bl	8002c9c <HAL_Delay>

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <read_temp_humidity>:

/*
 * Read temperature and humidity from the I2C response
 */
static HAL_StatusTypeDef read_temp_humidity(uint8_t* response, SHT40_Measurement* result) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    uint16_t temperature = response[0] << 8 | response[1];
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	81fb      	strh	r3, [r7, #14]
    uint16_t humidity = response[3] << 8 | response[4];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3303      	adds	r3, #3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	81bb      	strh	r3, [r7, #12]

    if( verify_checksum(temperature, response[2]) && verify_checksum(humidity, response[5]) ) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff80 	bl	8002958 <verify_checksum>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01e      	beq.n	8002a9c <read_temp_humidity+0x8c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3305      	adds	r3, #5
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff75 	bl	8002958 <verify_checksum>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <read_temp_humidity+0x8c>
        result->temperature = hardware_to_celsius(temperature);
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f816 	bl	8002aa8 <hardware_to_celsius>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	edc3 7a00 	vstr	s15, [r3]
        result->rel_humidity = hardware_to_humidity_percentage(humidity);
 8002a86:	89bb      	ldrh	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f849 	bl	8002b20 <hardware_to_humidity_percentage>
 8002a8e:	eef0 7a40 	vmov.f32	s15, s0
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	edc3 7a01 	vstr	s15, [r3, #4]
        return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <read_temp_humidity+0x8e>
    }
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <hardware_to_celsius>:

/*
 * Converts hardware representation of temperature to C
 */
static float hardware_to_celsius(uint16_t reading) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
    return -45.0 + 175.0 * (reading / 65535.0);
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd0d 	bl	80004d4 <__aeabi_i2d>
 8002aba:	a314      	add	r3, pc, #80	; (adr r3, 8002b0c <hardware_to_celsius+0x64>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fe9c 	bl	80007fc <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	a311      	add	r3, pc, #68	; (adr r3, 8002b14 <hardware_to_celsius+0x6c>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fd69 	bl	80005a8 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <hardware_to_celsius+0x60>)
 8002ae4:	f7fd fba8 	bl	8000238 <__aeabi_dsub>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f852 	bl	8000b98 <__aeabi_d2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	ee07 3a90 	vmov	s15, r3
}
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	f3af 8000 	nop.w
 8002b08:	40468000 	.word	0x40468000
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	40efffe0 	.word	0x40efffe0
 8002b14:	00000000 	.word	0x00000000
 8002b18:	4065e000 	.word	0x4065e000
 8002b1c:	00000000 	.word	0x00000000

08002b20 <hardware_to_humidity_percentage>:

/*
 * Converts hardware representation of humidity to relative humidity as percentage
 */
static float hardware_to_humidity_percentage(uint16_t reading) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
    return -6.0 + 125.0 * (reading / 65535.0);
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcd1 	bl	80004d4 <__aeabi_i2d>
 8002b32:	a315      	add	r3, pc, #84	; (adr r3, 8002b88 <hardware_to_humidity_percentage+0x68>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fe60 	bl	80007fc <__aeabi_ddiv>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <hardware_to_humidity_percentage+0x60>)
 8002b4a:	f7fd fd2d 	bl	80005a8 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <hardware_to_humidity_percentage+0x64>)
 8002b5c:	f7fd fb6c 	bl	8000238 <__aeabi_dsub>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fe f816 	bl	8000b98 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	ee07 3a90 	vmov	s15, r3
}
 8002b72:	eeb0 0a67 	vmov.f32	s0, s15
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f3af 8000 	nop.w
 8002b80:	405f4000 	.word	0x405f4000
 8002b84:	40180000 	.word	0x40180000
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40efffe0 	.word	0x40efffe0

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_Init+0x3c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_Init+0x3c>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba6:	2003      	movs	r0, #3
 8002ba8:	f000 f96c 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bac:	200f      	movs	r0, #15
 8002bae:	f000 f80f 	bl	8002bd0 <HAL_InitTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	e001      	b.n	8002bc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bbe:	f7ff fbfa 	bl	80023b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58004000 	.word	0x58004000

08002bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_InitTick+0x6c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d024      	beq.n	8002c2e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002be4:	f002 fb4c 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_InitTick+0x6c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f974 	bl	8002eea <HAL_SYSTICK_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d809      	bhi.n	8002c22 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295
 8002c16:	f000 f940 	bl	8002e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_InitTick+0x70>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e007      	b.n	8002c32 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e004      	b.n	8002c32 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e001      	b.n	8002c32 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000014 	.word	0x20000014
 8002c40:	20000010 	.word	0x20000010

08002c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x20>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x24>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_IncTick+0x24>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000014 	.word	0x20000014
 8002c68:	2000057c 	.word	0x2000057c

08002c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_GetTick+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	2000057c 	.word	0x2000057c

08002c84 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_GetTickPrio+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000010 	.word	0x20000010

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffe2 	bl	8002c6c <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_Delay+0x44>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffd2 	bl	8002c6c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000014 	.word	0x20000014

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	; (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff29 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff40 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff90 	bl	8002dd8 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5f 	bl	8002d84 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff33 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa4 	bl	8002e40 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04f      	b.n	8002fb4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e040      	b.n	8002fb4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 020e 	bic.w	r2, r2, #14
 8002f40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 021c 	and.w	r2, r3, #28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fa0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d005      	beq.n	8002fe4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e047      	b.n	8003074 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 020e 	bic.w	r2, r2, #14
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f003 021c 	and.w	r2, r3, #28
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
    }
  }
  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	e14c      	b.n	800332a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 813e 	beq.w	8003324 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d005      	beq.n	80030c0 <HAL_GPIO_Init+0x40>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d130      	bne.n	8003122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f6:	2201      	movs	r2, #1
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f003 0201 	and.w	r2, r3, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b03      	cmp	r3, #3
 800312c:	d017      	beq.n	800315e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d123      	bne.n	80031b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	6939      	ldr	r1, [r7, #16]
 80031ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0203 	and.w	r2, r3, #3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8098 	beq.w	8003324 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80031f4:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800321e:	d019      	beq.n	8003254 <HAL_GPIO_Init+0x1d4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4a      	ldr	r2, [pc, #296]	; (800334c <HAL_GPIO_Init+0x2cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_GPIO_Init+0x1d0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a49      	ldr	r2, [pc, #292]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x1cc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a48      	ldr	r2, [pc, #288]	; (8003354 <HAL_GPIO_Init+0x2d4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1c8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a47      	ldr	r2, [pc, #284]	; (8003358 <HAL_GPIO_Init+0x2d8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_GPIO_Init+0x1c4>
 8003240:	2304      	movs	r3, #4
 8003242:	e008      	b.n	8003256 <HAL_GPIO_Init+0x1d6>
 8003244:	2307      	movs	r3, #7
 8003246:	e006      	b.n	8003256 <HAL_GPIO_Init+0x1d6>
 8003248:	2303      	movs	r3, #3
 800324a:	e004      	b.n	8003256 <HAL_GPIO_Init+0x1d6>
 800324c:	2302      	movs	r3, #2
 800324e:	e002      	b.n	8003256 <HAL_GPIO_Init+0x1d6>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_GPIO_Init+0x1d6>
 8003254:	2300      	movs	r3, #0
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003266:	4938      	ldr	r1, [pc, #224]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_GPIO_Init+0x2dc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <HAL_GPIO_Init+0x2dc>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_GPIO_Init+0x2dc>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c2:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_GPIO_Init+0x2dc>)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_GPIO_Init+0x2dc>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_GPIO_Init+0x2dc>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80032f6:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_GPIO_Init+0x2dc>)
 80032f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800331c:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_GPIO_Init+0x2dc>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3301      	adds	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f aeab 	bne.w	8003090 <HAL_GPIO_Init+0x10>
  }
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40010000 	.word	0x40010000
 800334c:	48000400 	.word	0x48000400
 8003350:	48000800 	.word	0x48000800
 8003354:	48000c00 	.word	0x48000c00
 8003358:	48001000 	.word	0x48001000
 800335c:	58000800 	.word	0x58000800

08003360 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e081      	b.n	80034d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe ffec 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e006      	b.n	8003448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d104      	bne.n	800345a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800347c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 80da 	bne.w	80036b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_I2C_Master_Transmit+0x30>
 800350c:	2302      	movs	r3, #2
 800350e:	e0d3      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003518:	f7ff fba8 	bl	8002c6c <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2319      	movs	r3, #25
 8003524:	2201      	movs	r2, #1
 8003526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 faed 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0be      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	; 0x21
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2210      	movs	r2, #16
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2bff      	cmp	r3, #255	; 0xff
 800356a:	d90e      	bls.n	800358a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	22ff      	movs	r2, #255	; 0xff
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	b2da      	uxtb	r2, r3
 8003578:	8979      	ldrh	r1, [r7, #10]
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fcfc 	bl	8003f80 <I2C_TransferConfig>
 8003588:	e06c      	b.n	8003664 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	b2da      	uxtb	r2, r3
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fceb 	bl	8003f80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035aa:	e05b      	b.n	8003664 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 faf9 	bl	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e07b      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d034      	beq.n	8003664 <HAL_I2C_Master_Transmit+0x184>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d130      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa7c 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e04d      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2bff      	cmp	r3, #255	; 0xff
 8003624:	d90e      	bls.n	8003644 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	22ff      	movs	r2, #255	; 0xff
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fc9f 	bl	8003f80 <I2C_TransferConfig>
 8003642:	e00f      	b.n	8003664 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	b2da      	uxtb	r2, r3
 8003654:	8979      	ldrh	r1, [r7, #10]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fc8e 	bl	8003f80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d19e      	bne.n	80035ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fadf 	bl	8003c36 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e01a      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2220      	movs	r2, #32
 8003688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003696:	400b      	ands	r3, r1
 8003698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	80002000 	.word	0x80002000
 80036c4:	fe00e800 	.word	0xfe00e800

080036c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	461a      	mov	r2, r3
 80036d4:	460b      	mov	r3, r1
 80036d6:	817b      	strh	r3, [r7, #10]
 80036d8:	4613      	mov	r3, r2
 80036da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	f040 80db 	bne.w	80038a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2C_Master_Receive+0x30>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0d4      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003700:	f7ff fab4 	bl	8002c6c <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2319      	movs	r3, #25
 800370c:	2201      	movs	r2, #1
 800370e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f9f9 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0bf      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2222      	movs	r2, #34	; 0x22
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2210      	movs	r2, #16
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	893a      	ldrh	r2, [r7, #8]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2bff      	cmp	r3, #255	; 0xff
 8003752:	d90e      	bls.n	8003772 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	b2da      	uxtb	r2, r3
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	4b52      	ldr	r3, [pc, #328]	; (80038ac <HAL_I2C_Master_Receive+0x1e4>)
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fc08 	bl	8003f80 <I2C_TransferConfig>
 8003770:	e06d      	b.n	800384e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	4b49      	ldr	r3, [pc, #292]	; (80038ac <HAL_I2C_Master_Receive+0x1e4>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fbf7 	bl	8003f80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003792:	e05c      	b.n	800384e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	6a39      	ldr	r1, [r7, #32]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fa8f 	bl	8003cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e07c      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d034      	beq.n	800384e <HAL_I2C_Master_Receive+0x186>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d130      	bne.n	800384e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f987 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e04d      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d90e      	bls.n	800382e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fbaa 	bl	8003f80 <I2C_TransferConfig>
 800382c:	e00f      	b.n	800384e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	b2da      	uxtb	r2, r3
 800383e:	8979      	ldrh	r1, [r7, #10]
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fb99 	bl	8003f80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d19d      	bne.n	8003794 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6a39      	ldr	r1, [r7, #32]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9ea 	bl	8003c36 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e01a      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <HAL_I2C_Master_Receive+0x1e8>)
 8003880:	400b      	ands	r3, r1
 8003882:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	80002400 	.word	0x80002400
 80038b0:	fe00e800 	.word	0xfe00e800

080038b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	f040 80f1 	bne.w	8003ab8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
 80038e8:	e0e7      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2C_IsDeviceReady+0x44>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0e0      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <HAL_I2C_IsDeviceReady+0x72>
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003924:	e004      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x7c>
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003936:	f7ff f999 	bl	8002c6c <HAL_GetTick>
 800393a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003968:	e034      	b.n	80039d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d01a      	beq.n	80039a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7ff f97b 	bl	8002c6c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <HAL_I2C_IsDeviceReady+0xd4>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e088      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_I2C_IsDeviceReady+0x12c>
 80039da:	7fbb      	ldrb	r3, [r7, #30]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0c4      	beq.n	800396a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d01a      	beq.n	8003a24 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2120      	movs	r1, #32
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f886 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e058      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e04a      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f86b 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03d      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d118      	bne.n	8003a88 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a64:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2120      	movs	r1, #32
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f84a 	bl	8003b0a <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e01c      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2220      	movs	r2, #32
 8003a86:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	f63f af3b 	bhi.w	800390e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d103      	bne.n	8003ae0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d007      	beq.n	8003afe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	619a      	str	r2, [r3, #24]
  }
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1a:	e031      	b.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d02d      	beq.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7ff f8a2 	bl	8002c6c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d122      	bne.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d113      	bne.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e00f      	b.n	8003ba0 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d0be      	beq.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb4:	e033      	b.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f900 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e031      	b.n	8003c2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d025      	beq.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7ff f84b 	bl	8002c6c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11a      	bne.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d013      	beq.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d1c4      	bne.n	8003bb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c42:	e02f      	b.n	8003ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f8b9 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e02d      	b.n	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7ff f808 	bl	8002c6c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11a      	bne.n	8003ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d013      	beq.n	8003ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e007      	b.n	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d1c8      	bne.n	8003c44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc8:	e06b      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f876 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e069      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d138      	bne.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d105      	bne.n	8003d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e055      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d107      	bne.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
 8003d22:	e002      	b.n	8003d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e029      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fe ff85 	bl	8002c6c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d116      	bne.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d00f      	beq.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f043 0220 	orr.w	r2, r3, #32
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e007      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d18c      	bne.n	8003cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	fe00e800 	.word	0xfe00e800

08003dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d068      	beq.n	8003ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df4:	e049      	b.n	8003e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d045      	beq.n	8003e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fe ff35 	bl	8002c6c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_IsErrorOccurred+0x54>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13a      	bne.n	8003e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e36:	d121      	bne.n	8003e7c <I2C_IsErrorOccurred+0xbc>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d01d      	beq.n	8003e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d01a      	beq.n	8003e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e56:	f7fe ff09 	bl	8002c6c <HAL_GetTick>
 8003e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5c:	e00e      	b.n	8003e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e5e:	f7fe ff05 	bl	8002c6c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b19      	cmp	r3, #25
 8003e6a:	d907      	bls.n	8003e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003e7a:	e006      	b.n	8003e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d1e9      	bne.n	8003e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d003      	beq.n	8003ea0 <I2C_IsErrorOccurred+0xe0>
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0aa      	beq.n	8003df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2220      	movs	r2, #32
 8003eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f043 0308 	orr.w	r3, r3, #8
 8003ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01c      	beq.n	8003f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fdc4 	bl	8003ac2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <I2C_IsErrorOccurred+0x1bc>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3728      	adds	r7, #40	; 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f98:	7a7b      	ldrb	r3, [r7, #9]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	0d5b      	lsrs	r3, r3, #21
 8003fba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <I2C_TransferConfig+0x60>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	ea02 0103 	and.w	r1, r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	03ff63ff 	.word	0x03ff63ff

08003fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d138      	bne.n	800406c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004004:	2302      	movs	r3, #2
 8004006:	e032      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d139      	bne.n	8004104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800409a:	2302      	movs	r3, #2
 800409c:	e033      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2224      	movs	r2, #36	; 0x24
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	58000400 	.word	0x58000400

08004134 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <HAL_PWREx_GetVoltageRange+0x18>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	58000400 	.word	0x58000400

08004150 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004162:	d101      	bne.n	8004168 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c2:	d101      	bne.n	80041c8 <LL_RCC_HSE_IsReady+0x18>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_RCC_HSE_IsReady+0x1a>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d101      	bne.n	8004228 <LL_RCC_HSI_IsReady+0x18>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <LL_RCC_HSI_IsReady+0x1a>
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800428c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d101      	bne.n	80042ba <LL_RCC_HSI48_IsReady+0x18>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_RCC_HSI48_IsReady+0x1a>
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433c:	f023 0304 	bic.w	r3, r3, #4
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d101      	bne.n	8004366 <LL_RCC_LSE_IsReady+0x18>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <LL_RCC_LSE_IsReady+0x1a>
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d101      	bne.n	80043ce <LL_RCC_LSI1_IsReady+0x18>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_RCC_LSI1_IsReady+0x1a>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800441e:	b480      	push	{r7}
 8004420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b08      	cmp	r3, #8
 8004430:	d101      	bne.n	8004436 <LL_RCC_LSI2_IsReady+0x18>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_RCC_LSI2_IsReady+0x1a>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004452:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6013      	str	r3, [r2, #0]
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d101      	bne.n	80044c2 <LL_RCC_MSI_IsReady+0x16>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_RCC_MSI_IsReady+0x18>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2bb0      	cmp	r3, #176	; 0xb0
 800450c:	d901      	bls.n	8004512 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800450e:	23b0      	movs	r3, #176	; 0xb0
 8004510:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004512:	687b      	ldr	r3, [r7, #4]
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 0203 	bic.w	r2, r3, #3
 800455c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045ee:	f023 020f 	bic.w	r2, r3, #15
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800461e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f0:	6013      	str	r3, [r2, #0]
}
 80046f2:	bf00      	nop
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470e:	d101      	bne.n	8004714 <LL_RCC_PLL_IsReady+0x18>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <LL_RCC_PLL_IsReady+0x1a>
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0303 	and.w	r3, r3, #3
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d101      	bne.n	800479a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ba:	d101      	bne.n	80047c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d101      	bne.n	80047e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004804:	d101      	bne.n	800480a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004828:	d101      	bne.n	800482e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b08d      	sub	sp, #52	; 0x34
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e363      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 808d 	beq.w	8004976 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485c:	f7ff fe89 	bl	8004572 <LL_RCC_GetSysClkSource>
 8004860:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004862:	f7ff ff82 	bl	800476a <LL_RCC_PLL_GetMainSource>
 8004866:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x3e>
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d147      	bne.n	8004904 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b01      	cmp	r3, #1
 8004878:	d144      	bne.n	8004904 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e347      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800488a:	f7ff fe34 	bl	80044f6 <LL_RCC_MSI_GetRange>
 800488e:	4603      	mov	r3, r0
 8004890:	429c      	cmp	r4, r3
 8004892:	d914      	bls.n	80048be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fd31 	bl	8005300 <RCC_SetFlashLatencyFromMSIRange>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e336      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fe0e 	bl	80044ce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe32 	bl	8004520 <LL_RCC_MSI_SetCalibTrimming>
 80048bc:	e013      	b.n	80048e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe03 	bl	80044ce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fe27 	bl	8004520 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fd12 	bl	8005300 <RCC_SetFlashLatencyFromMSIRange>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e317      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048e6:	f000 fccb 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4aa4      	ldr	r2, [pc, #656]	; (8004b80 <HAL_RCC_OscConfig+0x344>)
 80048ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048f0:	4ba4      	ldr	r3, [pc, #656]	; (8004b84 <HAL_RCC_OscConfig+0x348>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe f96b 	bl	8002bd0 <HAL_InitTick>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d039      	beq.n	8004974 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e308      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01e      	beq.n	800494a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800490c:	f7ff fdb0 	bl	8004470 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004910:	f7fe f9ac 	bl	8002c6c <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004918:	f7fe f9a8 	bl	8002c6c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e2f5      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800492a:	f7ff fdbf 	bl	80044ac <LL_RCC_MSI_IsReady>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f1      	beq.n	8004918 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fdc8 	bl	80044ce <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fdec 	bl	8004520 <LL_RCC_MSI_SetCalibTrimming>
 8004948:	e015      	b.n	8004976 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800494a:	f7ff fda0 	bl	800448e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494e:	f7fe f98d 	bl	8002c6c <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004956:	f7fe f989 	bl	8002c6c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e2d6      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004968:	f7ff fda0 	bl	80044ac <LL_RCC_MSI_IsReady>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f1      	bne.n	8004956 <HAL_RCC_OscConfig+0x11a>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004974:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d047      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004982:	f7ff fdf6 	bl	8004572 <LL_RCC_GetSysClkSource>
 8004986:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004988:	f7ff feef 	bl	800476a <LL_RCC_PLL_GetMainSource>
 800498c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_OscConfig+0x164>
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d108      	bne.n	80049ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d105      	bne.n	80049ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d134      	bne.n	8004a12 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e2b4      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_OscConfig+0x180>
 80049b6:	f7ff fbdd 	bl	8004174 <LL_RCC_HSE_Enable>
 80049ba:	e001      	b.n	80049c0 <HAL_RCC_OscConfig+0x184>
 80049bc:	f7ff fbe9 	bl	8004192 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe f950 	bl	8002c6c <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe f94c 	bl	8002c6c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e299      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80049e2:	f7ff fbe5 	bl	80041b0 <LL_RCC_HSE_IsReady>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f1      	beq.n	80049d0 <HAL_RCC_OscConfig+0x194>
 80049ec:	e011      	b.n	8004a12 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fe f93d 	bl	8002c6c <HAL_GetTick>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f6:	f7fe f939 	bl	8002c6c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e286      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a08:	f7ff fbd2 	bl	80041b0 <LL_RCC_HSE_IsReady>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f1      	bne.n	80049f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1e:	f7ff fda8 	bl	8004572 <LL_RCC_GetSysClkSource>
 8004a22:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a24:	f7ff fea1 	bl	800476a <LL_RCC_PLL_GetMainSource>
 8004a28:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d10e      	bne.n	8004a54 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e266      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fbf1 	bl	8004234 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a52:	e031      	b.n	8004ab8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d019      	beq.n	8004a90 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5c:	f7ff fbba 	bl	80041d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe f904 	bl	8002c6c <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fe f900 	bl	8002c6c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e24d      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a7a:	f7ff fbc9 	bl	8004210 <LL_RCC_HSI_IsReady>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f1      	beq.n	8004a68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fbd3 	bl	8004234 <LL_RCC_HSI_SetCalibTrimming>
 8004a8e:	e013      	b.n	8004ab8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a90:	f7ff fbaf 	bl	80041f2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe f8ea 	bl	8002c6c <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9c:	f7fe f8e6 	bl	8002c6c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e233      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004aae:	f7ff fbaf 	bl	8004210 <LL_RCC_HSI_IsReady>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f1      	bne.n	8004a9c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80a3 	beq.w	8004c18 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d076      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d046      	beq.n	8004b74 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004ae6:	f7ff fc66 	bl	80043b6 <LL_RCC_LSI1_IsReady>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004af0:	f7ff fc3f 	bl	8004372 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004af4:	f7fe f8ba 	bl	8002c6c <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004afc:	f7fe f8b6 	bl	8002c6c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e203      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b0e:	f7ff fc52 	bl	80043b6 <LL_RCC_LSI1_IsReady>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f1      	beq.n	8004afc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004b18:	f7ff fc5f 	bl	80043da <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fe f8a6 	bl	8002c6c <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b24:	f7fe f8a2 	bl	8002c6c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e1ef      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b36:	f7ff fc72 	bl	800441e <LL_RCC_LSI2_IsReady>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f1      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fc7c 	bl	8004442 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004b4a:	f7ff fc23 	bl	8004394 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fe f88d 	bl	8002c6c <HAL_GetTick>
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b56:	f7fe f889 	bl	8002c6c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1d6      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b68:	f7ff fc25 	bl	80043b6 <LL_RCC_LSI1_IsReady>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f1      	bne.n	8004b56 <HAL_RCC_OscConfig+0x31a>
 8004b72:	e051      	b.n	8004c18 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004b74:	f7ff fbfd 	bl	8004372 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe f878 	bl	8002c6c <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCC_OscConfig+0x35e>
 8004b80:	20000008 	.word	0x20000008
 8004b84:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b88:	f7fe f870 	bl	8002c6c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e1bd      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b9a:	f7ff fc0c 	bl	80043b6 <LL_RCC_LSI1_IsReady>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f1      	beq.n	8004b88 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ba4:	f7ff fc2a 	bl	80043fc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004baa:	f7fe f85f 	bl	8002c6c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e1ac      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004bbc:	f7ff fc2f 	bl	800441e <LL_RCC_LSI2_IsReady>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f1      	bne.n	8004baa <HAL_RCC_OscConfig+0x36e>
 8004bc6:	e027      	b.n	8004c18 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004bc8:	f7ff fc18 	bl	80043fc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fe f84e 	bl	8002c6c <HAL_GetTick>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bd4:	f7fe f84a 	bl	8002c6c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e197      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004be6:	f7ff fc1a 	bl	800441e <LL_RCC_LSI2_IsReady>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f1      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004bf0:	f7ff fbd0 	bl	8004394 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe f83a 	bl	8002c6c <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bfc:	f7fe f836 	bl	8002c6c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e183      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c0e:	f7ff fbd2 	bl	80043b6 <LL_RCC_LSI1_IsReady>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f1      	bne.n	8004bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05b      	beq.n	8004cdc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c24:	4ba7      	ldr	r3, [pc, #668]	; (8004ec4 <HAL_RCC_OscConfig+0x688>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d114      	bne.n	8004c5a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c30:	f7ff fa70 	bl	8004114 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c34:	f7fe f81a 	bl	8002c6c <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fe f816 	bl	8002c6c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e163      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c4e:	4b9d      	ldr	r3, [pc, #628]	; (8004ec4 <HAL_RCC_OscConfig+0x688>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x42c>
 8004c62:	f7ff fb30 	bl	80042c6 <LL_RCC_LSE_Enable>
 8004c66:	e00c      	b.n	8004c82 <HAL_RCC_OscConfig+0x446>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d104      	bne.n	8004c7a <HAL_RCC_OscConfig+0x43e>
 8004c70:	f7ff fb4b 	bl	800430a <LL_RCC_LSE_EnableBypass>
 8004c74:	f7ff fb27 	bl	80042c6 <LL_RCC_LSE_Enable>
 8004c78:	e003      	b.n	8004c82 <HAL_RCC_OscConfig+0x446>
 8004c7a:	f7ff fb35 	bl	80042e8 <LL_RCC_LSE_Disable>
 8004c7e:	f7ff fb55 	bl	800432c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d014      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8a:	f7fd ffef 	bl	8002c6c <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c92:	f7fd ffeb 	bl	8002c6c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e136      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ca8:	f7ff fb51 	bl	800434e <LL_RCC_LSE_IsReady>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ef      	beq.n	8004c92 <HAL_RCC_OscConfig+0x456>
 8004cb2:	e013      	b.n	8004cdc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd ffda 	bl	8002c6c <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fd ffd6 	bl	8002c6c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e121      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cd2:	f7ff fb3c 	bl	800434e <LL_RCC_LSE_IsReady>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ef      	bne.n	8004cbc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d014      	beq.n	8004d1a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cf0:	f7ff fab5 	bl	800425e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd ffba 	bl	8002c6c <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cfc:	f7fd ffb6 	bl	8002c6c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e103      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d0e:	f7ff fac8 	bl	80042a2 <LL_RCC_HSI48_IsReady>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f1      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4c0>
 8004d18:	e013      	b.n	8004d42 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d1a:	f7ff fab1 	bl	8004280 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fd ffa5 	bl	8002c6c <HAL_GetTick>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d26:	f7fd ffa1 	bl	8002c6c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0ee      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d38:	f7ff fab3 	bl	80042a2 <LL_RCC_HSI48_IsReady>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f1      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80e4 	beq.w	8004f14 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4c:	f7ff fc11 	bl	8004572 <LL_RCC_GetSysClkSource>
 8004d50:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	f040 80b4 	bne.w	8004ecc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d123      	bne.n	8004dba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d11c      	bne.n	8004dba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d114      	bne.n	8004dba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d10d      	bne.n	8004dba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d05d      	beq.n	8004e76 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d058      	beq.n	8004e72 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0a1      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dd2:	f7ff fc84 	bl	80046de <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd6:	f7fd ff49 	bl	8002c6c <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fd ff45 	bl	8002c6c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e092      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_RCC_OscConfig+0x68c>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e16:	0212      	lsls	r2, r2, #8
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e34:	f7ff fc44 	bl	80046c0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e48:	f7fd ff10 	bl	8002c6c <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd ff0c 	bl	8002c6c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e059      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0ef      	beq.n	8004e50 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e70:	e050      	b.n	8004f14 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e04f      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d147      	bne.n	8004f14 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e84:	f7ff fc1c 	bl	80046c0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e98:	f7fd fee8 	bl	8002c6c <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fee4 	bl	8002c6c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e031      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ef      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x664>
 8004ec0:	e028      	b.n	8004f14 <HAL_RCC_OscConfig+0x6d8>
 8004ec2:	bf00      	nop
 8004ec4:	58000400 	.word	0x58000400
 8004ec8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d01e      	beq.n	8004f10 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	f7ff fc04 	bl	80046de <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fd fec9 	bl	8002c6c <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd fec5 	bl	8002c6c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e012      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ef      	bne.n	8004ede <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_OscConfig+0x6e4>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60cb      	str	r3, [r1, #12]
 8004f0e:	e001      	b.n	8004f14 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3734      	adds	r7, #52	; 0x34
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	eefefffc 	.word	0xeefefffc

08004f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e12d      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f38:	4b98      	ldr	r3, [pc, #608]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d91b      	bls.n	8004f7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b95      	ldr	r3, [pc, #596]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 0207 	bic.w	r2, r3, #7
 8004f4e:	4993      	ldr	r1, [pc, #588]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f56:	f7fd fe89 	bl	8002c6c <HAL_GetTick>
 8004f5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f5e:	f7fd fe85 	bl	8002c6c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e111      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f70:	4b8a      	ldr	r3, [pc, #552]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d1ef      	bne.n	8004f5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fafb 	bl	800458a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f94:	f7fd fe6a 	bl	8002c6c <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f9c:	f7fd fe66 	bl	8002c6c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0f2      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004fae:	f7ff fbe8 	bl	8004782 <LL_RCC_IsActiveFlag_HPRE>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f1      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d016      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff faf2 	bl	80045b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fce:	f7fd fe4d 	bl	8002c6c <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fd6:	f7fd fe49 	bl	8002c6c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0d5      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fe8:	f7ff fbdd 	bl	80047a6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f1      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff faeb 	bl	80045de <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005008:	f7fd fe30 	bl	8002c6c <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005010:	f7fd fe2c 	bl	8002c6c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0b8      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005022:	f7ff fbd3 	bl	80047cc <LL_RCC_IsActiveFlag_SHDHPRE>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f1      	beq.n	8005010 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d016      	beq.n	8005066 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fae5 	bl	800460c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005042:	f7fd fe13 	bl	8002c6c <HAL_GetTick>
 8005046:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800504a:	f7fd fe0f 	bl	8002c6c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e09b      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800505c:	f7ff fbc9 	bl	80047f2 <LL_RCC_IsActiveFlag_PPRE1>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f1      	beq.n	800504a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d017      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fadb 	bl	8004634 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800507e:	f7fd fdf5 	bl	8002c6c <HAL_GetTick>
 8005082:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005086:	f7fd fdf1 	bl	8002c6c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e07d      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005098:	f7ff fbbd 	bl	8004816 <LL_RCC_IsActiveFlag_PPRE2>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f1      	beq.n	8005086 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d043      	beq.n	8005136 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80050b6:	f7ff f87b 	bl	80041b0 <LL_RCC_HSE_IsReady>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11e      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e067      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d106      	bne.n	80050da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050cc:	f7ff fb16 	bl	80046fc <LL_RCC_PLL_IsReady>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d113      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e05c      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80050e2:	f7ff f9e3 	bl	80044ac <LL_RCC_MSI_IsReady>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e051      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80050f0:	f7ff f88e 	bl	8004210 <LL_RCC_HSI_IsReady>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e04a      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fa21 	bl	800454a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005108:	f7fd fdb0 	bl	8002c6c <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fd fdac 	bl	8002c6c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e036      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	f7ff fa24 	bl	8004572 <LL_RCC_GetSysClkSource>
 800512a:	4602      	mov	r2, r0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	429a      	cmp	r2, r3
 8005134:	d1ec      	bne.n	8005110 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005136:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d21b      	bcs.n	800517c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	4913      	ldr	r1, [pc, #76]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fd fd8a 	bl	8002c6c <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	e008      	b.n	800516e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800515c:	f7fd fd86 	bl	8002c6c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e012      	b.n	8005194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_ClockConfig+0x278>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d1ef      	bne.n	800515c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800517c:	f000 f880 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 8005180:	4603      	mov	r3, r0
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <HAL_RCC_ClockConfig+0x27c>)
 8005184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005186:	f7fd fd7d 	bl	8002c84 <HAL_GetTickPrio>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	f7fd fd1f 	bl	8002bd0 <HAL_InitTick>
 8005192:	4603      	mov	r3, r0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	58004000 	.word	0x58004000
 80051a0:	20000008 	.word	0x20000008

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051aa:	f7ff f9e2 	bl	8004572 <LL_RCC_GetSysClkSource>
 80051ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051b6:	f7ff f99e 	bl	80044f6 <LL_RCC_MSI_GetRange>
 80051ba:	4603      	mov	r3, r0
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	4a2b      	ldr	r2, [pc, #172]	; (8005270 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e04b      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051d2:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e045      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051de:	f7fe ffb7 	bl	8004150 <LL_RCC_HSE_IsEnabledDiv2>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d102      	bne.n	80051ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80051e8:	4b23      	ldr	r3, [pc, #140]	; (8005278 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e03a      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_RCC_GetSysClockFreq+0xd8>)
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e037      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051f4:	f7ff fab9 	bl	800476a <LL_RCC_PLL_GetMainSource>
 80051f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d003      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x64>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d003      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x6a>
 8005206:	e00d      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_GetSysClockFreq+0xd0>)
 800520a:	60bb      	str	r3, [r7, #8]
        break;
 800520c:	e015      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800520e:	f7fe ff9f 	bl	8004150 <LL_RCC_HSE_IsEnabledDiv2>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d102      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <HAL_RCC_GetSysClockFreq+0xd4>)
 800521a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800521c:	e00d      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_RCC_GetSysClockFreq+0xd8>)
 8005220:	60bb      	str	r3, [r7, #8]
        break;
 8005222:	e00a      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005224:	f7ff f967 	bl	80044f6 <LL_RCC_MSI_GetRange>
 8005228:	4603      	mov	r3, r0
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005236:	60bb      	str	r3, [r7, #8]
        break;
 8005238:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800523a:	f7ff fa71 	bl	8004720 <LL_RCC_PLL_GetN>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	fb03 f402 	mul.w	r4, r3, r2
 8005246:	f7ff fa84 	bl	8004752 <LL_RCC_PLL_GetDivider>
 800524a:	4603      	mov	r3, r0
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	3301      	adds	r3, #1
 8005250:	fbb4 f4f3 	udiv	r4, r4, r3
 8005254:	f7ff fa71 	bl	800473a <LL_RCC_PLL_GetR>
 8005258:	4603      	mov	r3, r0
 800525a:	0f5b      	lsrs	r3, r3, #29
 800525c:	3301      	adds	r3, #1
 800525e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005262:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	0800ce78 	.word	0x0800ce78
 8005274:	00f42400 	.word	0x00f42400
 8005278:	003d0900 	.word	0x003d0900
 800527c:	007a1200 	.word	0x007a1200

08005280 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005280:	b598      	push	{r3, r4, r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005284:	f7ff ff8e 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8005288:	4604      	mov	r4, r0
 800528a:	f7ff f9e7 	bl	800465c <LL_RCC_GetAHBPrescaler>
 800528e:	4603      	mov	r3, r0
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a03      	ldr	r2, [pc, #12]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd98      	pop	{r3, r4, r7, pc}
 80052a4:	0800ce18 	.word	0x0800ce18

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b598      	push	{r3, r4, r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052ac:	f7ff ffe8 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052b0:	4604      	mov	r4, r0
 80052b2:	f7ff f9ed 	bl	8004690 <LL_RCC_GetAPB1Prescaler>
 80052b6:	4603      	mov	r3, r0
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd98      	pop	{r3, r4, r7, pc}
 80052d0:	0800ce58 	.word	0x0800ce58

080052d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d4:	b598      	push	{r3, r4, r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80052d8:	f7ff ffd2 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052dc:	4604      	mov	r4, r0
 80052de:	f7ff f9e3 	bl	80046a8 <LL_RCC_GetAPB2Prescaler>
 80052e2:	4603      	mov	r3, r0
 80052e4:	0adb      	lsrs	r3, r3, #11
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd98      	pop	{r3, r4, r7, pc}
 80052fc:	0800ce58 	.word	0x0800ce58

08005300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2bb0      	cmp	r3, #176	; 0xb0
 800530c:	d903      	bls.n	8005316 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e007      	b.n	8005326 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	4a11      	ldr	r2, [pc, #68]	; (8005364 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005324:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005326:	f7ff f9a5 	bl	8004674 <LL_RCC_GetAHB4Prescaler>
 800532a:	4603      	mov	r3, r0
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	0c9c      	lsrs	r4, r3, #18
 800534a:	f7fe fef3 	bl	8004134 <HAL_PWREx_GetVoltageRange>
 800534e:	4603      	mov	r3, r0
 8005350:	4619      	mov	r1, r3
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f80c 	bl	8005370 <RCC_SetFlashLatency>
 8005358:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}
 8005362:	bf00      	nop
 8005364:	0800ce78 	.word	0x0800ce78
 8005368:	0800ce18 	.word	0x0800ce18
 800536c:	431bde83 	.word	0x431bde83

08005370 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b093      	sub	sp, #76	; 0x4c
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <RCC_SetFlashLatency+0xe8>)
 800537c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005386:	4a35      	ldr	r2, [pc, #212]	; (800545c <RCC_SetFlashLatency+0xec>)
 8005388:	f107 031c 	add.w	r3, r7, #28
 800538c:	ca07      	ldmia	r2, {r0, r1, r2}
 800538e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005392:	4b33      	ldr	r3, [pc, #204]	; (8005460 <RCC_SetFlashLatency+0xf0>)
 8005394:	f107 040c 	add.w	r4, r7, #12
 8005398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800539a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800539e:	2300      	movs	r3, #0
 80053a0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a8:	d11a      	bne.n	80053e0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	643b      	str	r3, [r7, #64]	; 0x40
 80053ae:	e013      	b.n	80053d8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	3348      	adds	r3, #72	; 0x48
 80053b6:	443b      	add	r3, r7
 80053b8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d807      	bhi.n	80053d2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3348      	adds	r3, #72	; 0x48
 80053c8:	443b      	add	r3, r7
 80053ca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053ce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053d0:	e020      	b.n	8005414 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d4:	3301      	adds	r3, #1
 80053d6:	643b      	str	r3, [r7, #64]	; 0x40
 80053d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d9e8      	bls.n	80053b0 <RCC_SetFlashLatency+0x40>
 80053de:	e019      	b.n	8005414 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e4:	e013      	b.n	800540e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3348      	adds	r3, #72	; 0x48
 80053ec:	443b      	add	r3, r7
 80053ee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d807      	bhi.n	8005408 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3348      	adds	r3, #72	; 0x48
 80053fe:	443b      	add	r3, r7
 8005400:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005404:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005406:	e005      	b.n	8005414 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540a:	3301      	adds	r3, #1
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	2b02      	cmp	r3, #2
 8005412:	d9e8      	bls.n	80053e6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <RCC_SetFlashLatency+0xf4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 0207 	bic.w	r2, r3, #7
 800541c:	4911      	ldr	r1, [pc, #68]	; (8005464 <RCC_SetFlashLatency+0xf4>)
 800541e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005424:	f7fd fc22 	bl	8002c6c <HAL_GetTick>
 8005428:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800542a:	e008      	b.n	800543e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800542c:	f7fd fc1e 	bl	8002c6c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e007      	b.n	800544e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <RCC_SetFlashLatency+0xf4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005448:	429a      	cmp	r2, r3
 800544a:	d1ef      	bne.n	800542c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	374c      	adds	r7, #76	; 0x4c
 8005452:	46bd      	mov	sp, r7
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	bf00      	nop
 8005458:	0800cdec 	.word	0x0800cdec
 800545c:	0800cdfc 	.word	0x0800cdfc
 8005460:	0800ce08 	.word	0x0800ce08
 8005464:	58004000 	.word	0x58004000

08005468 <LL_RCC_LSE_IsEnabled>:
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <LL_RCC_LSE_IsEnabled+0x18>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <LL_RCC_LSE_IsEnabled+0x1a>
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <LL_RCC_LSE_IsReady>:
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d101      	bne.n	80054a4 <LL_RCC_LSE_IsReady+0x18>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <LL_RCC_LSE_IsReady+0x1a>
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_RCC_SetRFWKPClockSource>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_RCC_SetSMPSClockSource>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_RCC_SetSMPSPrescaler>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4313      	orrs	r3, r2
 800551e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_RCC_SetUSARTClockSource>:
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f023 0203 	bic.w	r2, r3, #3
 8005540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_RCC_SetLPUARTClockSource>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_RCC_SetI2CClockSource>:
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005590:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <LL_RCC_SetLPTIMClockSource>:
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	43db      	mvns	r3, r3
 80055d6:	401a      	ands	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_RCC_SetSAIClockSource>:
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_RCC_SetRNGClockSource>:
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_RCC_SetCLK48ClockSource>:
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800565e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_RCC_SetUSBClockSource>:
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ffe3 	bl	800564a <LL_RCC_SetCLK48ClockSource>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <LL_RCC_SetADCClockSource>:
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_RCC_SetRTCClockSource>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_RCC_GetRTCClockSource>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <LL_RCC_ForceBackupDomainReset>:
{
 80056fe:	b480      	push	{r7}
 8005700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005716:	bf00      	nop
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <LL_RCC_PLLSAI1_Enable>:
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	bf00      	nop
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_RCC_PLLSAI1_Disable>:
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800576e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005772:	6013      	str	r3, [r2, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_RCC_PLLSAI1_IsReady>:
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005790:	d101      	bne.n	8005796 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80057ae:	2300      	movs	r3, #0
 80057b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d034      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c6:	d021      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80057c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057cc:	d81b      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d2:	d01d      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d8:	d815      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e2:	d110      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057f4:	e00d      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f947 	bl	8005a8e <RCCEx_PLLSAI1_ConfigNP>
 8005800:	4603      	mov	r3, r0
 8005802:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005804:	e005      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
        break;
 800580a:	e002      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005812:	7ffb      	ldrb	r3, [r7, #31]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fee8 	bl	80055f2 <LL_RCC_SetSAIClockSource>
 8005822:	e001      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	7ffb      	ldrb	r3, [r7, #31]
 8005826:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005830:	2b00      	cmp	r3, #0
 8005832:	d046      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005834:	f7ff ff56 	bl	80056e4 <LL_RCC_GetRTCClockSource>
 8005838:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	429a      	cmp	r2, r3
 8005842:	d03c      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005844:	f7fe fc66 	bl	8004114 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ff30 	bl	80056b8 <LL_RCC_SetRTCClockSource>
 8005858:	e02e      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005864:	f7ff ff4b 	bl	80056fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005868:	f7ff ff5a 	bl	8005720 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800587a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005884:	f7ff fdf0 	bl	8005468 <LL_RCC_LSE_IsEnabled>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d114      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800588e:	f7fd f9ed 	bl	8002c6c <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005894:	e00b      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fd f9e9 	bl	8002c6c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d902      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	77fb      	strb	r3, [r7, #31]
              break;
 80058ac:	e004      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058ae:	f7ff fded 	bl	800548c <LL_RCC_LSE_IsReady>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d1ee      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	77bb      	strb	r3, [r7, #30]
 80058bc:	e001      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fe2a 	bl	800552c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fe35 	bl	8005558 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fe5d 	bl	80055be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fe52 	bl	80055be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fe2a 	bl	8005584 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fe1f 	bl	8005584 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fe8d 	bl	8005676 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005964:	d107      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005974:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800597e:	d10b      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f8dd 	bl	8005b44 <RCCEx_PLLSAI1_ConfigNQ>
 800598a:	4603      	mov	r3, r0
 800598c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005994:	7ffb      	ldrb	r3, [r7, #31]
 8005996:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d02b      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d008      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fe2a 	bl	800561e <LL_RCC_SetRNGClockSource>
 80059ca:	e00a      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7ff fe21 	bl	800561e <LL_RCC_SetRNGClockSource>
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff fe34 	bl	800564a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059ea:	d107      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d022      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fe3d 	bl	800568c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a34:	d10b      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f8dd 	bl	8005bfa <RCCEx_PLLSAI1_ConfigNR>
 8005a40:	4603      	mov	r3, r0
 8005a42:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a4a:	7ffb      	ldrb	r3, [r7, #31]
 8005a4c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fd26 	bl	80054b0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fd45 	bl	8005504 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fd2c 	bl	80054dc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005a84:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a9a:	f7ff fe61 	bl	8005760 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a9e:	f7fd f8e5 	bl	8002c6c <HAL_GetTick>
 8005aa2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005aa4:	e009      	b.n	8005aba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa6:	f7fd f8e1 	bl	8002c6c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d902      	bls.n	8005aba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab8:	e004      	b.n	8005ac4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005aba:	f7ff fe60 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d137      	bne.n	8005b3a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005af8:	f7ff fe23 	bl	8005742 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fd f8b6 	bl	8002c6c <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b02:	e009      	b.n	8005b18 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b04:	f7fd f8b2 	bl	8002c6c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d902      	bls.n	8005b18 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	73fb      	strb	r3, [r7, #15]
        break;
 8005b16:	e004      	b.n	8005b22 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b18:	f7ff fe31 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d1f0      	bne.n	8005b04 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d108      	bne.n	8005b3a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b50:	f7ff fe06 	bl	8005760 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b54:	f7fd f88a 	bl	8002c6c <HAL_GetTick>
 8005b58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b5a:	e009      	b.n	8005b70 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5c:	f7fd f886 	bl	8002c6c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d902      	bls.n	8005b70 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6e:	e004      	b.n	8005b7a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b70:	f7ff fe05 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d137      	bne.n	8005bf0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005baa:	4313      	orrs	r3, r2
 8005bac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bae:	f7ff fdc8 	bl	8005742 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb2:	f7fd f85b 	bl	8002c6c <HAL_GetTick>
 8005bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bb8:	e009      	b.n	8005bce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bba:	f7fd f857 	bl	8002c6c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d902      	bls.n	8005bce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
        break;
 8005bcc:	e004      	b.n	8005bd8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bce:	f7ff fdd6 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d1f0      	bne.n	8005bba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c06:	f7ff fdab 	bl	8005760 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c0a:	f7fd f82f 	bl	8002c6c <HAL_GetTick>
 8005c0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c10:	e009      	b.n	8005c26 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c12:	f7fd f82b 	bl	8002c6c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d902      	bls.n	8005c26 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e004      	b.n	8005c30 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c26:	f7ff fdaa 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d137      	bne.n	8005ca6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c64:	f7ff fd6d 	bl	8005742 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c68:	f7fd f800 	bl	8002c6c <HAL_GetTick>
 8005c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c6e:	e009      	b.n	8005c84 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c70:	f7fc fffc 	bl	8002c6c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d902      	bls.n	8005c84 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	73fb      	strb	r3, [r7, #15]
        break;
 8005c82:	e004      	b.n	8005c8e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c84:	f7ff fd7b 	bl	800577e <LL_RCC_PLLSAI1_IsReady>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d1f0      	bne.n	8005c70 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <LL_RCC_GetUSARTClockSource>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4013      	ands	r3, r2
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_RCC_GetLPUARTClockSource>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4013      	ands	r3, r2
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e042      	b.n	8005d88 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7fc fb9d 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2224      	movs	r2, #36	; 0x24
 8005d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc4a 	bl	80065cc <UART_SetConfig>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e022      	b.n	8005d88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fe66 	bl	8006a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 feed 	bl	8006b60 <UART_CheckIdleState>
 8005d86:	4603      	mov	r3, r0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d17b      	bne.n	8005ea2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_UART_Transmit+0x26>
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e074      	b.n	8005ea4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	; 0x21
 8005dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dca:	f7fc ff4f 	bl	8002c6c <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de8:	d108      	bne.n	8005dfc <HAL_UART_Transmit+0x6c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e003      	b.n	8005e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e04:	e030      	b.n	8005e68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 ff4f 	bl	8006cb4 <UART_WaitOnFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e03d      	b.n	8005ea4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	3302      	adds	r3, #2
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e007      	b.n	8005e56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	781a      	ldrb	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1c8      	bne.n	8005e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 ff18 	bl	8006cb4 <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d137      	bne.n	8005f34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_UART_Receive_IT+0x24>
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e030      	b.n	8005f36 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_UART_Receive_IT+0x94>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d01f      	beq.n	8005f24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d018      	beq.n	8005f24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	613b      	str	r3, [r7, #16]
   return(result);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	6a3a      	ldr	r2, [r7, #32]
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 ff2a 	bl	8006d84 <UART_Start_Receive_IT>
 8005f30:	4603      	mov	r3, r0
 8005f32:	e000      	b.n	8005f36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40008000 	.word	0x40008000

08005f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b0ba      	sub	sp, #232	; 0xe8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f72:	4013      	ands	r3, r2
 8005f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 82e3 	beq.w	8006574 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      }
      return;
 8005fb6:	e2dd      	b.n	8006574 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8123 	beq.w	8006208 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005fc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005fc6:	4b8d      	ldr	r3, [pc, #564]	; (80061fc <HAL_UART_IRQHandler+0x2b8>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005fce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fd2:	4b8b      	ldr	r3, [pc, #556]	; (8006200 <HAL_UART_IRQHandler+0x2bc>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8116 	beq.w	8006208 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d011      	beq.n	800600c <HAL_UART_IRQHandler+0xc8>
 8005fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d011      	beq.n	800603c <HAL_UART_IRQHandler+0xf8>
 8006018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2202      	movs	r2, #2
 800602a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800603c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d011      	beq.n	800606c <HAL_UART_IRQHandler+0x128>
 8006048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2204      	movs	r2, #4
 800605a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800606c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d017      	beq.n	80060a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d105      	bne.n	8006090 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006084:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006088:	4b5c      	ldr	r3, [pc, #368]	; (80061fc <HAL_UART_IRQHandler+0x2b8>)
 800608a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2208      	movs	r2, #8
 8006096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f043 0208 	orr.w	r2, r3, #8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <HAL_UART_IRQHandler+0x196>
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8249 	beq.w	8006578 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d013      	beq.n	800611a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d005      	beq.n	800613e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006136:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800613a:	2b00      	cmp	r3, #0
 800613c:	d054      	beq.n	80061e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 ff42 	bl	8006fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d146      	bne.n	80061e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800616c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800617e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800618a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1d9      	bne.n	8006152 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ae:	4a15      	ldr	r2, [pc, #84]	; (8006204 <HAL_UART_IRQHandler+0x2c0>)
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fc ff01 	bl	8002fc0 <HAL_DMA_Abort_IT>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d019      	beq.n	80061f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	e00f      	b.n	80061f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f9e1 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061de:	e00b      	b.n	80061f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9dd 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	e007      	b.n	80061f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9d9 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80061f6:	e1bf      	b.n	8006578 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	bf00      	nop
    return;
 80061fa:	e1bd      	b.n	8006578 <HAL_UART_IRQHandler+0x634>
 80061fc:	10000001 	.word	0x10000001
 8006200:	04000120 	.word	0x04000120
 8006204:	08007095 	.word	0x08007095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 8153 	bne.w	80064b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 814c 	beq.w	80064b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8145 	beq.w	80064b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2210      	movs	r2, #16
 8006234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	f040 80bb 	bne.w	80063bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 818f 	beq.w	800657c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006268:	429a      	cmp	r2, r3
 800626a:	f080 8187 	bcs.w	800657c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 8087 	bne.w	800639a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1da      	bne.n	800628c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800630c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e1      	bne.n	80062d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800633c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e3      	bne.n	8006312 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006368:	f023 0310 	bic.w	r3, r3, #16
 800636c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800637a:	65bb      	str	r3, [r7, #88]	; 0x58
 800637c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e4      	bne.n	8006358 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006394:	4618      	mov	r0, r3
 8006396:	f7fc fdb4 	bl	8002f02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8fd 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063ba:	e0df      	b.n	800657c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80d1 	beq.w	8006580 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80063de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80cc 	beq.w	8006580 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800640a:	647b      	str	r3, [r7, #68]	; 0x44
 800640c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e4      	bne.n	80063e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	623b      	str	r3, [r7, #32]
   return(result);
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006446:	633a      	str	r2, [r7, #48]	; 0x30
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e1      	bne.n	800641e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	60fb      	str	r3, [r7, #12]
   return(result);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	617b      	str	r3, [r7, #20]
   return(result);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e4      	bne.n	800646e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f87f 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064b6:	e063      	b.n	8006580 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <HAL_UART_IRQHandler+0x59e>
 80064c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fb38 	bl	8007b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e0:	e051      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d014      	beq.n	8006518 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	2b00      	cmp	r3, #0
 800650c:	d03a      	beq.n	8006584 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
    }
    return;
 8006516:	e035      	b.n	8006584 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d009      	beq.n	8006538 <HAL_UART_IRQHandler+0x5f4>
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fdc5 	bl	80070c0 <UART_EndTransmit_IT>
    return;
 8006536:	e026      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <HAL_UART_IRQHandler+0x614>
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fb11 	bl	8007b78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006556:	e016      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_UART_IRQHandler+0x642>
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006568:	2b00      	cmp	r3, #0
 800656a:	da0c      	bge.n	8006586 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 faf9 	bl	8007b64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006572:	e008      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
      return;
 8006574:	bf00      	nop
 8006576:	e006      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
    return;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
      return;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
      return;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_UART_IRQHandler+0x642>
    return;
 8006584:	bf00      	nop
  }
}
 8006586:	37e8      	adds	r7, #232	; 0xe8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d0:	b08c      	sub	sp, #48	; 0x30
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4baf      	ldr	r3, [pc, #700]	; (80068b8 <UART_SetConfig+0x2ec>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006604:	430b      	orrs	r3, r1
 8006606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4aa4      	ldr	r2, [pc, #656]	; (80068bc <UART_SetConfig+0x2f0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006634:	4313      	orrs	r3, r2
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006642:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800664c:	430b      	orrs	r3, r1
 800664e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	f023 010f 	bic.w	r1, r3, #15
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a95      	ldr	r2, [pc, #596]	; (80068c0 <UART_SetConfig+0x2f4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0xf0>
 8006670:	2003      	movs	r0, #3
 8006672:	f7ff fb1d 	bl	8005cb0 <LL_RCC_GetUSARTClockSource>
 8006676:	4603      	mov	r3, r0
 8006678:	2b03      	cmp	r3, #3
 800667a:	d81b      	bhi.n	80066b4 <UART_SetConfig+0xe8>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0xb8>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	08006695 	.word	0x08006695
 8006688:	080066a5 	.word	0x080066a5
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066ad 	.word	0x080066ad
 8006694:	2301      	movs	r3, #1
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669a:	e042      	b.n	8006722 <UART_SetConfig+0x156>
 800669c:	2302      	movs	r3, #2
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a2:	e03e      	b.n	8006722 <UART_SetConfig+0x156>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066aa:	e03a      	b.n	8006722 <UART_SetConfig+0x156>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b2:	e036      	b.n	8006722 <UART_SetConfig+0x156>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ba:	e032      	b.n	8006722 <UART_SetConfig+0x156>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a7e      	ldr	r2, [pc, #504]	; (80068bc <UART_SetConfig+0x2f0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d12a      	bne.n	800671c <UART_SetConfig+0x150>
 80066c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80066ca:	f7ff fb01 	bl	8005cd0 <LL_RCC_GetLPUARTClockSource>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d4:	d01a      	beq.n	800670c <UART_SetConfig+0x140>
 80066d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066da:	d81b      	bhi.n	8006714 <UART_SetConfig+0x148>
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	d00c      	beq.n	80066fc <UART_SetConfig+0x130>
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d815      	bhi.n	8006714 <UART_SetConfig+0x148>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <UART_SetConfig+0x128>
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d008      	beq.n	8006704 <UART_SetConfig+0x138>
 80066f2:	e00f      	b.n	8006714 <UART_SetConfig+0x148>
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fa:	e012      	b.n	8006722 <UART_SetConfig+0x156>
 80066fc:	2302      	movs	r3, #2
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006702:	e00e      	b.n	8006722 <UART_SetConfig+0x156>
 8006704:	2304      	movs	r3, #4
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e00a      	b.n	8006722 <UART_SetConfig+0x156>
 800670c:	2308      	movs	r3, #8
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006712:	e006      	b.n	8006722 <UART_SetConfig+0x156>
 8006714:	2310      	movs	r3, #16
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671a:	e002      	b.n	8006722 <UART_SetConfig+0x156>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a65      	ldr	r2, [pc, #404]	; (80068bc <UART_SetConfig+0x2f0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	f040 8097 	bne.w	800685c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800672e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006732:	2b08      	cmp	r3, #8
 8006734:	d823      	bhi.n	800677e <UART_SetConfig+0x1b2>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x170>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006761 	.word	0x08006761
 8006740:	0800677f 	.word	0x0800677f
 8006744:	08006769 	.word	0x08006769
 8006748:	0800677f 	.word	0x0800677f
 800674c:	0800676f 	.word	0x0800676f
 8006750:	0800677f 	.word	0x0800677f
 8006754:	0800677f 	.word	0x0800677f
 8006758:	0800677f 	.word	0x0800677f
 800675c:	08006777 	.word	0x08006777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fe fda2 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8006764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006766:	e010      	b.n	800678a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006768:	4b56      	ldr	r3, [pc, #344]	; (80068c4 <UART_SetConfig+0x2f8>)
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800676c:	e00d      	b.n	800678a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676e:	f7fe fd19 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006774:	e009      	b.n	800678a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800677c:	e005      	b.n	800678a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 812b 	beq.w	80069e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	4a4c      	ldr	r2, [pc, #304]	; (80068c8 <UART_SetConfig+0x2fc>)
 8006798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679c:	461a      	mov	r2, r3
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d305      	bcc.n	80067c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d903      	bls.n	80067ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067c8:	e10e      	b.n	80069e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2200      	movs	r2, #0
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	60fa      	str	r2, [r7, #12]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <UART_SetConfig+0x2fc>)
 80067d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2200      	movs	r2, #0
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067ec:	f7fa fa24 	bl	8000c38 <__aeabi_uldivmod>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4610      	mov	r0, r2
 80067f6:	4619      	mov	r1, r3
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	020b      	lsls	r3, r1, #8
 8006802:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006806:	0202      	lsls	r2, r0, #8
 8006808:	6979      	ldr	r1, [r7, #20]
 800680a:	6849      	ldr	r1, [r1, #4]
 800680c:	0849      	lsrs	r1, r1, #1
 800680e:	2000      	movs	r0, #0
 8006810:	460c      	mov	r4, r1
 8006812:	4605      	mov	r5, r0
 8006814:	eb12 0804 	adds.w	r8, r2, r4
 8006818:	eb43 0905 	adc.w	r9, r3, r5
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	469a      	mov	sl, r3
 8006824:	4693      	mov	fp, r2
 8006826:	4652      	mov	r2, sl
 8006828:	465b      	mov	r3, fp
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7fa fa03 	bl	8000c38 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4613      	mov	r3, r2
 8006838:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006840:	d308      	bcc.n	8006854 <UART_SetConfig+0x288>
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006848:	d204      	bcs.n	8006854 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e0c9      	b.n	80069e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800685a:	e0c5      	b.n	80069e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006864:	d16d      	bne.n	8006942 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800686a:	3b01      	subs	r3, #1
 800686c:	2b07      	cmp	r3, #7
 800686e:	d82d      	bhi.n	80068cc <UART_SetConfig+0x300>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x2ac>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006899 	.word	0x08006899
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068cd 	.word	0x080068cd
 8006884:	080068a7 	.word	0x080068a7
 8006888:	080068cd 	.word	0x080068cd
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068cd 	.word	0x080068cd
 8006894:	080068af 	.word	0x080068af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7fe fd1c 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800689e:	e01b      	b.n	80068d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <UART_SetConfig+0x2f8>)
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a4:	e018      	b.n	80068d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fe fc7d 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ac:	e014      	b.n	80068d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068b4:	e010      	b.n	80068d8 <UART_SetConfig+0x30c>
 80068b6:	bf00      	nop
 80068b8:	cfff69f3 	.word	0xcfff69f3
 80068bc:	40008000 	.word	0x40008000
 80068c0:	40013800 	.word	0x40013800
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	0800cfb8 	.word	0x0800cfb8
      default:
        pclk = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 8084 	beq.w	80069e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	4a4b      	ldr	r2, [pc, #300]	; (8006a14 <UART_SetConfig+0x448>)
 80068e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f2:	005a      	lsls	r2, r3, #1
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	441a      	add	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	2b0f      	cmp	r3, #15
 800690a:	d916      	bls.n	800693a <UART_SetConfig+0x36e>
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006912:	d212      	bcs.n	800693a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f023 030f 	bic.w	r3, r3, #15
 800691c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	b29a      	uxth	r2, r3
 800692a:	8bfb      	ldrh	r3, [r7, #30]
 800692c:	4313      	orrs	r3, r2
 800692e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	8bfa      	ldrh	r2, [r7, #30]
 8006936:	60da      	str	r2, [r3, #12]
 8006938:	e056      	b.n	80069e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006940:	e052      	b.n	80069e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006946:	3b01      	subs	r3, #1
 8006948:	2b07      	cmp	r3, #7
 800694a:	d822      	bhi.n	8006992 <UART_SetConfig+0x3c6>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x388>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006975 	.word	0x08006975
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006993 	.word	0x08006993
 8006960:	08006983 	.word	0x08006983
 8006964:	08006993 	.word	0x08006993
 8006968:	08006993 	.word	0x08006993
 800696c:	08006993 	.word	0x08006993
 8006970:	0800698b 	.word	0x0800698b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fe fcae 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8006978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800697a:	e010      	b.n	800699e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <UART_SetConfig+0x44c>)
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006980:	e00d      	b.n	800699e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006982:	f7fe fc0f 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006988:	e009      	b.n	800699e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006990:	e005      	b.n	800699e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800699c:	bf00      	nop
    }

    if (pclk != 0U)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d021      	beq.n	80069e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	4a1a      	ldr	r2, [pc, #104]	; (8006a14 <UART_SetConfig+0x448>)
 80069aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	441a      	add	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d909      	bls.n	80069e2 <UART_SetConfig+0x416>
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d205      	bcs.n	80069e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
 80069e0:	e002      	b.n	80069e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2200      	movs	r2, #0
 80069fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3730      	adds	r7, #48	; 0x30
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a12:	bf00      	nop
 8006a14:	0800cfb8 	.word	0x0800cfb8
 8006a18:	00f42400 	.word	0x00f42400

08006a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01a      	beq.n	8006b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1a:	d10a      	bne.n	8006b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b098      	sub	sp, #96	; 0x60
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b70:	f7fc f87c 	bl	8002c6c <HAL_GetTick>
 8006b74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d12f      	bne.n	8006be4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f88e 	bl	8006cb4 <UART_WaitOnFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d022      	beq.n	8006be4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e6      	bne.n	8006b9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e063      	b.n	8006cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d149      	bne.n	8006c86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f857 	bl	8006cb4 <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d03c      	beq.n	8006c86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c5e:	61fa      	str	r2, [r7, #28]
 8006c60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	69b9      	ldr	r1, [r7, #24]
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e012      	b.n	8006cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3758      	adds	r7, #88	; 0x58
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc4:	e049      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d045      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cce:	f7fb ffcd 	bl	8002c6c <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d302      	bcc.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e048      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d031      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d110      	bne.n	8006d26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f95b 	bl	8006fc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2208      	movs	r2, #8
 8006d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e029      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d34:	d111      	bne.n	8006d5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f941 	bl	8006fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e00f      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d0a6      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b0a3      	sub	sp, #140	; 0x8c
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d10e      	bne.n	8006dd6 <UART_Start_Receive_IT+0x52>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <UART_Start_Receive_IT+0x48>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006dc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dca:	e02d      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dd4:	e028      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <UART_Start_Receive_IT+0x76>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <UART_Start_Receive_IT+0x6c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	22ff      	movs	r2, #255	; 0xff
 8006dea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dee:	e01b      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	227f      	movs	r2, #127	; 0x7f
 8006df4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006df8:	e016      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e02:	d10d      	bne.n	8006e20 <UART_Start_Receive_IT+0x9c>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <UART_Start_Receive_IT+0x92>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	227f      	movs	r2, #127	; 0x7f
 8006e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e14:	e008      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	223f      	movs	r2, #63	; 0x3f
 8006e1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e1e:	e003      	b.n	8006e28 <UART_Start_Receive_IT+0xa4>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2222      	movs	r2, #34	; 0x22
 8006e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e5c:	673a      	str	r2, [r7, #112]	; 0x70
 8006e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e3      	bne.n	8006e38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e78:	d14f      	bne.n	8006f1a <UART_Start_Receive_IT+0x196>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d349      	bcc.n	8006f1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d107      	bne.n	8006ea0 <UART_Start_Receive_IT+0x11c>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a47      	ldr	r2, [pc, #284]	; (8006fb8 <UART_Start_Receive_IT+0x234>)
 8006e9c:	675a      	str	r2, [r3, #116]	; 0x74
 8006e9e:	e002      	b.n	8006ea6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <UART_Start_Receive_IT+0x238>)
 8006ea4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01a      	beq.n	8006ee4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ed6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e4      	bne.n	8006eae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f04:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_Start_Receive_IT+0x160>
 8006f18:	e046      	b.n	8006fa8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d107      	bne.n	8006f34 <UART_Start_Receive_IT+0x1b0>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <UART_Start_Receive_IT+0x23c>)
 8006f30:	675a      	str	r2, [r3, #116]	; 0x74
 8006f32:	e002      	b.n	8006f3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4a23      	ldr	r2, [pc, #140]	; (8006fc4 <UART_Start_Receive_IT+0x240>)
 8006f38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d019      	beq.n	8006f76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f56:	677b      	str	r3, [r7, #116]	; 0x74
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
 8006f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_Start_Receive_IT+0x1be>
 8006f74:	e018      	b.n	8006fa8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f043 0320 	orr.w	r3, r3, #32
 8006f8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f94:	623b      	str	r3, [r7, #32]
 8006f96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e6      	bne.n	8006f76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	378c      	adds	r7, #140	; 0x8c
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	080077e9 	.word	0x080077e9
 8006fbc:	08007489 	.word	0x08007489
 8006fc0:	080072d1 	.word	0x080072d1
 8006fc4:	08007119 	.word	0x08007119

08006fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b095      	sub	sp, #84	; 0x54
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	61fb      	str	r3, [r7, #28]
   return(result);
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800702c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d118      	bne.n	8007074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	647b      	str	r3, [r7, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007088:	bf00      	nop
 800708a:	3754      	adds	r7, #84	; 0x54
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fa74 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fa3f 	bl	800658c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710e:	bf00      	nop
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b09c      	sub	sp, #112	; 0x70
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007126:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007130:	2b22      	cmp	r3, #34	; 0x22
 8007132:	f040 80be 	bne.w	80072b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007144:	b2d9      	uxtb	r1, r3
 8007146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800714a:	b2da      	uxtb	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007150:	400a      	ands	r2, r1
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 80a1 	bne.w	80072c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007194:	66bb      	str	r3, [r7, #104]	; 0x68
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800719e:	65bb      	str	r3, [r7, #88]	; 0x58
 80071a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e6      	bne.n	8007180 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071d2:	647a      	str	r2, [r7, #68]	; 0x44
 80071d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a33      	ldr	r2, [pc, #204]	; (80072cc <UART_RxISR_8BIT+0x1b4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d01f      	beq.n	8007244 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	623b      	str	r3, [r7, #32]
   return(result);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007226:	663b      	str	r3, [r7, #96]	; 0x60
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
 8007232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d12e      	bne.n	80072aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0310 	bic.w	r3, r3, #16
 8007266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	69b9      	ldr	r1, [r7, #24]
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	617b      	str	r3, [r7, #20]
   return(result);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e6      	bne.n	8007252 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b10      	cmp	r3, #16
 8007290:	d103      	bne.n	800729a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2210      	movs	r2, #16
 8007298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff f986 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072a8:	e00b      	b.n	80072c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fa fbee 	bl	8001a8c <HAL_UART_RxCpltCallback>
}
 80072b0:	e007      	b.n	80072c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0208 	orr.w	r2, r2, #8
 80072c0:	619a      	str	r2, [r3, #24]
}
 80072c2:	bf00      	nop
 80072c4:	3770      	adds	r7, #112	; 0x70
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40008000 	.word	0x40008000

080072d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b09c      	sub	sp, #112	; 0x70
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e8:	2b22      	cmp	r3, #34	; 0x22
 80072ea:	f040 80be 	bne.w	800746a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80072fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007306:	4013      	ands	r3, r2
 8007308:	b29a      	uxth	r2, r3
 800730a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800730c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 80a1 	bne.w	800747a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800734c:	667b      	str	r3, [r7, #100]	; 0x64
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007356:	657b      	str	r3, [r7, #84]	; 0x54
 8007358:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800735c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	663b      	str	r3, [r7, #96]	; 0x60
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800738a:	643a      	str	r2, [r7, #64]	; 0x40
 800738c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a33      	ldr	r2, [pc, #204]	; (8007484 <UART_RxISR_16BIT+0x1b4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d01f      	beq.n	80073fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d018      	beq.n	80073fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e6      	bne.n	80073ca <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d12e      	bne.n	8007462 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	60bb      	str	r3, [r7, #8]
   return(result);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0310 	bic.w	r3, r3, #16
 800741e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6979      	ldr	r1, [r7, #20]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b10      	cmp	r3, #16
 8007448:	d103      	bne.n	8007452 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2210      	movs	r2, #16
 8007450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff f8aa 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007460:	e00b      	b.n	800747a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fa fb12 	bl	8001a8c <HAL_UART_RxCpltCallback>
}
 8007468:	e007      	b.n	800747a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0208 	orr.w	r2, r2, #8
 8007478:	619a      	str	r2, [r3, #24]
}
 800747a:	bf00      	nop
 800747c:	3770      	adds	r7, #112	; 0x70
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40008000 	.word	0x40008000

08007488 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b0ac      	sub	sp, #176	; 0xb0
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007496:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074be:	2b22      	cmp	r3, #34	; 0x22
 80074c0:	f040 8182 	bne.w	80077c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ce:	e125      	b.n	800771c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80074de:	b2d9      	uxtb	r1, r3
 80074e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	400a      	ands	r2, r1
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d053      	beq.n	80075ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d011      	beq.n	8007552 <UART_RxISR_8BIT_FIFOEN+0xca>
 800752e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2201      	movs	r2, #1
 8007540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	f043 0201 	orr.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800755e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2202      	movs	r2, #2
 8007570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	f043 0204 	orr.w	r2, r3, #4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800758e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2204      	movs	r2, #4
 80075a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a8:	f043 0202 	orr.w	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d006      	beq.n	80075ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7fe ffef 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 80a2 	bne.w	800771c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80075e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007600:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e4      	bne.n	80075d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800761e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007636:	66ba      	str	r2, [r7, #104]	; 0x68
 8007638:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800763c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e1      	bne.n	800760e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a5f      	ldr	r2, [pc, #380]	; (80077e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d021      	beq.n	80076ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01a      	beq.n	80076ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800768a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007698:	657b      	str	r3, [r7, #84]	; 0x54
 800769a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800769e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e4      	bne.n	8007676 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d130      	bne.n	8007716 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076dc:	643b      	str	r3, [r7, #64]	; 0x40
 80076de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e4      	bne.n	80076ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d103      	bne.n	8007706 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2210      	movs	r2, #16
 8007704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fe ff50 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
 8007714:	e002      	b.n	800771c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fa f9b8 	bl	8001a8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800771c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	f47f aecf 	bne.w	80074d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007738:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800773c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007740:	2b00      	cmp	r3, #0
 8007742:	d049      	beq.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800774e:	429a      	cmp	r2, r3
 8007750:	d242      	bcs.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	61fb      	str	r3, [r7, #28]
   return(result);
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800777c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e3      	bne.n	8007752 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800778e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	60bb      	str	r3, [r7, #8]
   return(result);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f043 0320 	orr.w	r3, r3, #32
 80077a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6979      	ldr	r1, [r7, #20]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	613b      	str	r3, [r7, #16]
   return(result);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e4      	bne.n	8007790 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c6:	e007      	b.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0208 	orr.w	r2, r2, #8
 80077d6:	619a      	str	r2, [r3, #24]
}
 80077d8:	bf00      	nop
 80077da:	37b0      	adds	r7, #176	; 0xb0
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40008000 	.word	0x40008000
 80077e4:	08007119 	.word	0x08007119

080077e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b0ae      	sub	sp, #184	; 0xb8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781e:	2b22      	cmp	r3, #34	; 0x22
 8007820:	f040 8186 	bne.w	8007b30 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800782a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800782e:	e129      	b.n	8007a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007842:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007846:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800784a:	4013      	ands	r3, r2
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007852:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	1c9a      	adds	r2, r3, #2
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800787a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b00      	cmp	r3, #0
 8007884:	d053      	beq.n	800792e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d011      	beq.n	80078b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2201      	movs	r2, #1
 80078a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ac:	f043 0201 	orr.w	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80078c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2202      	movs	r2, #2
 80078d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	f043 0204 	orr.w	r2, r3, #4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d011      	beq.n	8007916 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2204      	movs	r2, #4
 8007904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790c:	f043 0202 	orr.w	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe fe3d 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	f040 80a4 	bne.w	8007a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800794a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800795e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007962:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e2      	bne.n	800793c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800799e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e1      	bne.n	8007976 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a5f      	ldr	r2, [pc, #380]	; (8007b48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d021      	beq.n	8007a14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01a      	beq.n	8007a14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e4      	bne.n	80079de <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d130      	bne.n	8007a7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	f023 0310 	bic.w	r3, r3, #16
 8007a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a44:	647b      	str	r3, [r7, #68]	; 0x44
 8007a46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e4      	bne.n	8007a22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d103      	bne.n	8007a6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fe fd9c 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
 8007a7c:	e002      	b.n	8007a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fa f804 	bl	8001a8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d006      	beq.n	8007a9a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f47f aecb 	bne.w	8007830 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aa0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007aa4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d049      	beq.n	8007b40 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ab2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d242      	bcs.n	8007b40 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ade:	633a      	str	r2, [r7, #48]	; 0x30
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e3      	bne.n	8007aba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a15      	ldr	r2, [pc, #84]	; (8007b4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007af6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f043 0320 	orr.w	r3, r3, #32
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	69b9      	ldr	r1, [r7, #24]
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	617b      	str	r3, [r7, #20]
   return(result);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e4      	bne.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b2e:	e007      	b.n	8007b40 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0208 	orr.w	r2, r2, #8
 8007b3e:	619a      	str	r2, [r3, #24]
}
 8007b40:	bf00      	nop
 8007b42:	37b8      	adds	r7, #184	; 0xb8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	40008000 	.word	0x40008000
 8007b4c:	080072d1 	.word	0x080072d1

08007b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e027      	b.n	8007bf2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2224      	movs	r2, #36	; 0x24
 8007bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e02d      	b.n	8007c72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2224      	movs	r2, #36	; 0x24
 8007c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f850 	bl	8007cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e02d      	b.n	8007cee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2224      	movs	r2, #36	; 0x24
 8007c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f812 	bl	8007cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d108      	bne.n	8007d1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d18:	e031      	b.n	8007d7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d1e:	2308      	movs	r3, #8
 8007d20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	0e5b      	lsrs	r3, r3, #25
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	0f5b      	lsrs	r3, r3, #29
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	7b3a      	ldrb	r2, [r7, #12]
 8007d46:	4911      	ldr	r1, [pc, #68]	; (8007d8c <UARTEx_SetNbDataToProcess+0x94>)
 8007d48:	5c8a      	ldrb	r2, [r1, r2]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d4e:	7b3a      	ldrb	r2, [r7, #12]
 8007d50:	490f      	ldr	r1, [pc, #60]	; (8007d90 <UARTEx_SetNbDataToProcess+0x98>)
 8007d52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d54:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	7b7a      	ldrb	r2, [r7, #13]
 8007d64:	4909      	ldr	r1, [pc, #36]	; (8007d8c <UARTEx_SetNbDataToProcess+0x94>)
 8007d66:	5c8a      	ldrb	r2, [r1, r2]
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d6c:	7b7a      	ldrb	r2, [r7, #13]
 8007d6e:	4908      	ldr	r1, [pc, #32]	; (8007d90 <UARTEx_SetNbDataToProcess+0x98>)
 8007d70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d72:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	0800cfd0 	.word	0x0800cfd0
 8007d90:	0800cfd8 	.word	0x0800cfd8

08007d94 <__errno>:
 8007d94:	4b01      	ldr	r3, [pc, #4]	; (8007d9c <__errno+0x8>)
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000018 	.word	0x20000018

08007da0 <__libc_init_array>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4d0d      	ldr	r5, [pc, #52]	; (8007dd8 <__libc_init_array+0x38>)
 8007da4:	4c0d      	ldr	r4, [pc, #52]	; (8007ddc <__libc_init_array+0x3c>)
 8007da6:	1b64      	subs	r4, r4, r5
 8007da8:	10a4      	asrs	r4, r4, #2
 8007daa:	2600      	movs	r6, #0
 8007dac:	42a6      	cmp	r6, r4
 8007dae:	d109      	bne.n	8007dc4 <__libc_init_array+0x24>
 8007db0:	4d0b      	ldr	r5, [pc, #44]	; (8007de0 <__libc_init_array+0x40>)
 8007db2:	4c0c      	ldr	r4, [pc, #48]	; (8007de4 <__libc_init_array+0x44>)
 8007db4:	f004 fd86 	bl	800c8c4 <_init>
 8007db8:	1b64      	subs	r4, r4, r5
 8007dba:	10a4      	asrs	r4, r4, #2
 8007dbc:	2600      	movs	r6, #0
 8007dbe:	42a6      	cmp	r6, r4
 8007dc0:	d105      	bne.n	8007dce <__libc_init_array+0x2e>
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc8:	4798      	blx	r3
 8007dca:	3601      	adds	r6, #1
 8007dcc:	e7ee      	b.n	8007dac <__libc_init_array+0xc>
 8007dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd2:	4798      	blx	r3
 8007dd4:	3601      	adds	r6, #1
 8007dd6:	e7f2      	b.n	8007dbe <__libc_init_array+0x1e>
 8007dd8:	0800d494 	.word	0x0800d494
 8007ddc:	0800d494 	.word	0x0800d494
 8007de0:	0800d494 	.word	0x0800d494
 8007de4:	0800d498 	.word	0x0800d498

08007de8 <malloc>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <malloc+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f000 b88d 	b.w	8007f0c <_malloc_r>
 8007df2:	bf00      	nop
 8007df4:	20000018 	.word	0x20000018

08007df8 <free>:
 8007df8:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <free+0xc>)
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	f000 b819 	b.w	8007e34 <_free_r>
 8007e02:	bf00      	nop
 8007e04:	20000018 	.word	0x20000018

08007e08 <memcpy>:
 8007e08:	440a      	add	r2, r1
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e10:	d100      	bne.n	8007e14 <memcpy+0xc>
 8007e12:	4770      	bx	lr
 8007e14:	b510      	push	{r4, lr}
 8007e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	d1f9      	bne.n	8007e16 <memcpy+0xe>
 8007e22:	bd10      	pop	{r4, pc}

08007e24 <memset>:
 8007e24:	4402      	add	r2, r0
 8007e26:	4603      	mov	r3, r0
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <memset+0xa>
 8007e2c:	4770      	bx	lr
 8007e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e32:	e7f9      	b.n	8007e28 <memset+0x4>

08007e34 <_free_r>:
 8007e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e36:	2900      	cmp	r1, #0
 8007e38:	d044      	beq.n	8007ec4 <_free_r+0x90>
 8007e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3e:	9001      	str	r0, [sp, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f1a1 0404 	sub.w	r4, r1, #4
 8007e46:	bfb8      	it	lt
 8007e48:	18e4      	addlt	r4, r4, r3
 8007e4a:	f003 fbff 	bl	800b64c <__malloc_lock>
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ec8 <_free_r+0x94>)
 8007e50:	9801      	ldr	r0, [sp, #4]
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	b933      	cbnz	r3, 8007e64 <_free_r+0x30>
 8007e56:	6063      	str	r3, [r4, #4]
 8007e58:	6014      	str	r4, [r2, #0]
 8007e5a:	b003      	add	sp, #12
 8007e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e60:	f003 bbfa 	b.w	800b658 <__malloc_unlock>
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	d908      	bls.n	8007e7a <_free_r+0x46>
 8007e68:	6825      	ldr	r5, [r4, #0]
 8007e6a:	1961      	adds	r1, r4, r5
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	bf01      	itttt	eq
 8007e70:	6819      	ldreq	r1, [r3, #0]
 8007e72:	685b      	ldreq	r3, [r3, #4]
 8007e74:	1949      	addeq	r1, r1, r5
 8007e76:	6021      	streq	r1, [r4, #0]
 8007e78:	e7ed      	b.n	8007e56 <_free_r+0x22>
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b10b      	cbz	r3, 8007e84 <_free_r+0x50>
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d9fa      	bls.n	8007e7a <_free_r+0x46>
 8007e84:	6811      	ldr	r1, [r2, #0]
 8007e86:	1855      	adds	r5, r2, r1
 8007e88:	42a5      	cmp	r5, r4
 8007e8a:	d10b      	bne.n	8007ea4 <_free_r+0x70>
 8007e8c:	6824      	ldr	r4, [r4, #0]
 8007e8e:	4421      	add	r1, r4
 8007e90:	1854      	adds	r4, r2, r1
 8007e92:	42a3      	cmp	r3, r4
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	d1e0      	bne.n	8007e5a <_free_r+0x26>
 8007e98:	681c      	ldr	r4, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	6053      	str	r3, [r2, #4]
 8007e9e:	4421      	add	r1, r4
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	e7da      	b.n	8007e5a <_free_r+0x26>
 8007ea4:	d902      	bls.n	8007eac <_free_r+0x78>
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	6003      	str	r3, [r0, #0]
 8007eaa:	e7d6      	b.n	8007e5a <_free_r+0x26>
 8007eac:	6825      	ldr	r5, [r4, #0]
 8007eae:	1961      	adds	r1, r4, r5
 8007eb0:	428b      	cmp	r3, r1
 8007eb2:	bf04      	itt	eq
 8007eb4:	6819      	ldreq	r1, [r3, #0]
 8007eb6:	685b      	ldreq	r3, [r3, #4]
 8007eb8:	6063      	str	r3, [r4, #4]
 8007eba:	bf04      	itt	eq
 8007ebc:	1949      	addeq	r1, r1, r5
 8007ebe:	6021      	streq	r1, [r4, #0]
 8007ec0:	6054      	str	r4, [r2, #4]
 8007ec2:	e7ca      	b.n	8007e5a <_free_r+0x26>
 8007ec4:	b003      	add	sp, #12
 8007ec6:	bd30      	pop	{r4, r5, pc}
 8007ec8:	20000580 	.word	0x20000580

08007ecc <sbrk_aligned>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4e0e      	ldr	r6, [pc, #56]	; (8007f08 <sbrk_aligned+0x3c>)
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	6831      	ldr	r1, [r6, #0]
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b911      	cbnz	r1, 8007ede <sbrk_aligned+0x12>
 8007ed8:	f000 ff94 	bl	8008e04 <_sbrk_r>
 8007edc:	6030      	str	r0, [r6, #0]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 ff8f 	bl	8008e04 <_sbrk_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d00a      	beq.n	8007f00 <sbrk_aligned+0x34>
 8007eea:	1cc4      	adds	r4, r0, #3
 8007eec:	f024 0403 	bic.w	r4, r4, #3
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d007      	beq.n	8007f04 <sbrk_aligned+0x38>
 8007ef4:	1a21      	subs	r1, r4, r0
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 ff84 	bl	8008e04 <_sbrk_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d101      	bne.n	8007f04 <sbrk_aligned+0x38>
 8007f00:	f04f 34ff 	mov.w	r4, #4294967295
 8007f04:	4620      	mov	r0, r4
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	20000584 	.word	0x20000584

08007f0c <_malloc_r>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	1ccd      	adds	r5, r1, #3
 8007f12:	f025 0503 	bic.w	r5, r5, #3
 8007f16:	3508      	adds	r5, #8
 8007f18:	2d0c      	cmp	r5, #12
 8007f1a:	bf38      	it	cc
 8007f1c:	250c      	movcc	r5, #12
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	4607      	mov	r7, r0
 8007f22:	db01      	blt.n	8007f28 <_malloc_r+0x1c>
 8007f24:	42a9      	cmp	r1, r5
 8007f26:	d905      	bls.n	8007f34 <_malloc_r+0x28>
 8007f28:	230c      	movs	r3, #12
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	4e2e      	ldr	r6, [pc, #184]	; (8007ff0 <_malloc_r+0xe4>)
 8007f36:	f003 fb89 	bl	800b64c <__malloc_lock>
 8007f3a:	6833      	ldr	r3, [r6, #0]
 8007f3c:	461c      	mov	r4, r3
 8007f3e:	bb34      	cbnz	r4, 8007f8e <_malloc_r+0x82>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff ffc2 	bl	8007ecc <sbrk_aligned>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	d14d      	bne.n	8007fea <_malloc_r+0xde>
 8007f4e:	6834      	ldr	r4, [r6, #0]
 8007f50:	4626      	mov	r6, r4
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	d140      	bne.n	8007fd8 <_malloc_r+0xcc>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	eb04 0803 	add.w	r8, r4, r3
 8007f60:	f000 ff50 	bl	8008e04 <_sbrk_r>
 8007f64:	4580      	cmp	r8, r0
 8007f66:	d13a      	bne.n	8007fde <_malloc_r+0xd2>
 8007f68:	6821      	ldr	r1, [r4, #0]
 8007f6a:	3503      	adds	r5, #3
 8007f6c:	1a6d      	subs	r5, r5, r1
 8007f6e:	f025 0503 	bic.w	r5, r5, #3
 8007f72:	3508      	adds	r5, #8
 8007f74:	2d0c      	cmp	r5, #12
 8007f76:	bf38      	it	cc
 8007f78:	250c      	movcc	r5, #12
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff ffa5 	bl	8007ecc <sbrk_aligned>
 8007f82:	3001      	adds	r0, #1
 8007f84:	d02b      	beq.n	8007fde <_malloc_r+0xd2>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	442b      	add	r3, r5
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	e00e      	b.n	8007fac <_malloc_r+0xa0>
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	1b52      	subs	r2, r2, r5
 8007f92:	d41e      	bmi.n	8007fd2 <_malloc_r+0xc6>
 8007f94:	2a0b      	cmp	r2, #11
 8007f96:	d916      	bls.n	8007fc6 <_malloc_r+0xba>
 8007f98:	1961      	adds	r1, r4, r5
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	bf18      	it	ne
 8007fa0:	6059      	strne	r1, [r3, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	bf08      	it	eq
 8007fa6:	6031      	streq	r1, [r6, #0]
 8007fa8:	5162      	str	r2, [r4, r5]
 8007faa:	604b      	str	r3, [r1, #4]
 8007fac:	4638      	mov	r0, r7
 8007fae:	f104 060b 	add.w	r6, r4, #11
 8007fb2:	f003 fb51 	bl	800b658 <__malloc_unlock>
 8007fb6:	f026 0607 	bic.w	r6, r6, #7
 8007fba:	1d23      	adds	r3, r4, #4
 8007fbc:	1af2      	subs	r2, r6, r3
 8007fbe:	d0b6      	beq.n	8007f2e <_malloc_r+0x22>
 8007fc0:	1b9b      	subs	r3, r3, r6
 8007fc2:	50a3      	str	r3, [r4, r2]
 8007fc4:	e7b3      	b.n	8007f2e <_malloc_r+0x22>
 8007fc6:	6862      	ldr	r2, [r4, #4]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	bf0c      	ite	eq
 8007fcc:	6032      	streq	r2, [r6, #0]
 8007fce:	605a      	strne	r2, [r3, #4]
 8007fd0:	e7ec      	b.n	8007fac <_malloc_r+0xa0>
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	6864      	ldr	r4, [r4, #4]
 8007fd6:	e7b2      	b.n	8007f3e <_malloc_r+0x32>
 8007fd8:	4634      	mov	r4, r6
 8007fda:	6876      	ldr	r6, [r6, #4]
 8007fdc:	e7b9      	b.n	8007f52 <_malloc_r+0x46>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f003 fb38 	bl	800b658 <__malloc_unlock>
 8007fe8:	e7a1      	b.n	8007f2e <_malloc_r+0x22>
 8007fea:	6025      	str	r5, [r4, #0]
 8007fec:	e7de      	b.n	8007fac <_malloc_r+0xa0>
 8007fee:	bf00      	nop
 8007ff0:	20000580 	.word	0x20000580

08007ff4 <__cvt>:
 8007ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	ec55 4b10 	vmov	r4, r5, d0
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	460e      	mov	r6, r1
 8008000:	4619      	mov	r1, r3
 8008002:	462b      	mov	r3, r5
 8008004:	bfbb      	ittet	lt
 8008006:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800800a:	461d      	movlt	r5, r3
 800800c:	2300      	movge	r3, #0
 800800e:	232d      	movlt	r3, #45	; 0x2d
 8008010:	700b      	strb	r3, [r1, #0]
 8008012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008018:	4691      	mov	r9, r2
 800801a:	f023 0820 	bic.w	r8, r3, #32
 800801e:	bfbc      	itt	lt
 8008020:	4622      	movlt	r2, r4
 8008022:	4614      	movlt	r4, r2
 8008024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008028:	d005      	beq.n	8008036 <__cvt+0x42>
 800802a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800802e:	d100      	bne.n	8008032 <__cvt+0x3e>
 8008030:	3601      	adds	r6, #1
 8008032:	2102      	movs	r1, #2
 8008034:	e000      	b.n	8008038 <__cvt+0x44>
 8008036:	2103      	movs	r1, #3
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	ab02      	add	r3, sp, #8
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	ec45 4b10 	vmov	d0, r4, r5
 8008044:	4653      	mov	r3, sl
 8008046:	4632      	mov	r2, r6
 8008048:	f001 ff6e 	bl	8009f28 <_dtoa_r>
 800804c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008050:	4607      	mov	r7, r0
 8008052:	d102      	bne.n	800805a <__cvt+0x66>
 8008054:	f019 0f01 	tst.w	r9, #1
 8008058:	d022      	beq.n	80080a0 <__cvt+0xac>
 800805a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800805e:	eb07 0906 	add.w	r9, r7, r6
 8008062:	d110      	bne.n	8008086 <__cvt+0x92>
 8008064:	783b      	ldrb	r3, [r7, #0]
 8008066:	2b30      	cmp	r3, #48	; 0x30
 8008068:	d10a      	bne.n	8008080 <__cvt+0x8c>
 800806a:	2200      	movs	r2, #0
 800806c:	2300      	movs	r3, #0
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 fd01 	bl	8000a78 <__aeabi_dcmpeq>
 8008076:	b918      	cbnz	r0, 8008080 <__cvt+0x8c>
 8008078:	f1c6 0601 	rsb	r6, r6, #1
 800807c:	f8ca 6000 	str.w	r6, [sl]
 8008080:	f8da 3000 	ldr.w	r3, [sl]
 8008084:	4499      	add	r9, r3
 8008086:	2200      	movs	r2, #0
 8008088:	2300      	movs	r3, #0
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 fcf3 	bl	8000a78 <__aeabi_dcmpeq>
 8008092:	b108      	cbz	r0, 8008098 <__cvt+0xa4>
 8008094:	f8cd 900c 	str.w	r9, [sp, #12]
 8008098:	2230      	movs	r2, #48	; 0x30
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	454b      	cmp	r3, r9
 800809e:	d307      	bcc.n	80080b0 <__cvt+0xbc>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080a4:	1bdb      	subs	r3, r3, r7
 80080a6:	4638      	mov	r0, r7
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	b004      	add	sp, #16
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	9103      	str	r1, [sp, #12]
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e7f0      	b.n	800809a <__cvt+0xa6>

080080b8 <__exponent>:
 80080b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ba:	4603      	mov	r3, r0
 80080bc:	2900      	cmp	r1, #0
 80080be:	bfb8      	it	lt
 80080c0:	4249      	neglt	r1, r1
 80080c2:	f803 2b02 	strb.w	r2, [r3], #2
 80080c6:	bfb4      	ite	lt
 80080c8:	222d      	movlt	r2, #45	; 0x2d
 80080ca:	222b      	movge	r2, #43	; 0x2b
 80080cc:	2909      	cmp	r1, #9
 80080ce:	7042      	strb	r2, [r0, #1]
 80080d0:	dd2a      	ble.n	8008128 <__exponent+0x70>
 80080d2:	f10d 0407 	add.w	r4, sp, #7
 80080d6:	46a4      	mov	ip, r4
 80080d8:	270a      	movs	r7, #10
 80080da:	46a6      	mov	lr, r4
 80080dc:	460a      	mov	r2, r1
 80080de:	fb91 f6f7 	sdiv	r6, r1, r7
 80080e2:	fb07 1516 	mls	r5, r7, r6, r1
 80080e6:	3530      	adds	r5, #48	; 0x30
 80080e8:	2a63      	cmp	r2, #99	; 0x63
 80080ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80080ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080f2:	4631      	mov	r1, r6
 80080f4:	dcf1      	bgt.n	80080da <__exponent+0x22>
 80080f6:	3130      	adds	r1, #48	; 0x30
 80080f8:	f1ae 0502 	sub.w	r5, lr, #2
 80080fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008100:	1c44      	adds	r4, r0, #1
 8008102:	4629      	mov	r1, r5
 8008104:	4561      	cmp	r1, ip
 8008106:	d30a      	bcc.n	800811e <__exponent+0x66>
 8008108:	f10d 0209 	add.w	r2, sp, #9
 800810c:	eba2 020e 	sub.w	r2, r2, lr
 8008110:	4565      	cmp	r5, ip
 8008112:	bf88      	it	hi
 8008114:	2200      	movhi	r2, #0
 8008116:	4413      	add	r3, r2
 8008118:	1a18      	subs	r0, r3, r0
 800811a:	b003      	add	sp, #12
 800811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008122:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008126:	e7ed      	b.n	8008104 <__exponent+0x4c>
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	3130      	adds	r1, #48	; 0x30
 800812c:	7083      	strb	r3, [r0, #2]
 800812e:	70c1      	strb	r1, [r0, #3]
 8008130:	1d03      	adds	r3, r0, #4
 8008132:	e7f1      	b.n	8008118 <__exponent+0x60>

08008134 <_printf_float>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	ed2d 8b02 	vpush	{d8}
 800813c:	b08d      	sub	sp, #52	; 0x34
 800813e:	460c      	mov	r4, r1
 8008140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008144:	4616      	mov	r6, r2
 8008146:	461f      	mov	r7, r3
 8008148:	4605      	mov	r5, r0
 800814a:	f003 fa01 	bl	800b550 <_localeconv_r>
 800814e:	f8d0 a000 	ldr.w	sl, [r0]
 8008152:	4650      	mov	r0, sl
 8008154:	f7f8 f814 	bl	8000180 <strlen>
 8008158:	2300      	movs	r3, #0
 800815a:	930a      	str	r3, [sp, #40]	; 0x28
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	f8d8 3000 	ldr.w	r3, [r8]
 8008164:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008168:	3307      	adds	r3, #7
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	f103 0208 	add.w	r2, r3, #8
 8008172:	f8c8 2000 	str.w	r2, [r8]
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800817e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008186:	9307      	str	r3, [sp, #28]
 8008188:	f8cd 8018 	str.w	r8, [sp, #24]
 800818c:	ee08 0a10 	vmov	s16, r0
 8008190:	4b9f      	ldr	r3, [pc, #636]	; (8008410 <_printf_float+0x2dc>)
 8008192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008196:	f04f 32ff 	mov.w	r2, #4294967295
 800819a:	f7f8 fc9f 	bl	8000adc <__aeabi_dcmpun>
 800819e:	bb88      	cbnz	r0, 8008204 <_printf_float+0xd0>
 80081a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a4:	4b9a      	ldr	r3, [pc, #616]	; (8008410 <_printf_float+0x2dc>)
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	f7f8 fc79 	bl	8000aa0 <__aeabi_dcmple>
 80081ae:	bb48      	cbnz	r0, 8008204 <_printf_float+0xd0>
 80081b0:	2200      	movs	r2, #0
 80081b2:	2300      	movs	r3, #0
 80081b4:	4640      	mov	r0, r8
 80081b6:	4649      	mov	r1, r9
 80081b8:	f7f8 fc68 	bl	8000a8c <__aeabi_dcmplt>
 80081bc:	b110      	cbz	r0, 80081c4 <_printf_float+0x90>
 80081be:	232d      	movs	r3, #45	; 0x2d
 80081c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c4:	4b93      	ldr	r3, [pc, #588]	; (8008414 <_printf_float+0x2e0>)
 80081c6:	4894      	ldr	r0, [pc, #592]	; (8008418 <_printf_float+0x2e4>)
 80081c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081cc:	bf94      	ite	ls
 80081ce:	4698      	movls	r8, r3
 80081d0:	4680      	movhi	r8, r0
 80081d2:	2303      	movs	r3, #3
 80081d4:	6123      	str	r3, [r4, #16]
 80081d6:	9b05      	ldr	r3, [sp, #20]
 80081d8:	f023 0204 	bic.w	r2, r3, #4
 80081dc:	6022      	str	r2, [r4, #0]
 80081de:	f04f 0900 	mov.w	r9, #0
 80081e2:	9700      	str	r7, [sp, #0]
 80081e4:	4633      	mov	r3, r6
 80081e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f9d8 	bl	80085a0 <_printf_common>
 80081f0:	3001      	adds	r0, #1
 80081f2:	f040 8090 	bne.w	8008316 <_printf_float+0x1e2>
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	b00d      	add	sp, #52	; 0x34
 80081fc:	ecbd 8b02 	vpop	{d8}
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f7f8 fc66 	bl	8000adc <__aeabi_dcmpun>
 8008210:	b140      	cbz	r0, 8008224 <_printf_float+0xf0>
 8008212:	464b      	mov	r3, r9
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfbc      	itt	lt
 8008218:	232d      	movlt	r3, #45	; 0x2d
 800821a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800821e:	487f      	ldr	r0, [pc, #508]	; (800841c <_printf_float+0x2e8>)
 8008220:	4b7f      	ldr	r3, [pc, #508]	; (8008420 <_printf_float+0x2ec>)
 8008222:	e7d1      	b.n	80081c8 <_printf_float+0x94>
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800822a:	9206      	str	r2, [sp, #24]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	d13f      	bne.n	80082b0 <_printf_float+0x17c>
 8008230:	2306      	movs	r3, #6
 8008232:	6063      	str	r3, [r4, #4]
 8008234:	9b05      	ldr	r3, [sp, #20]
 8008236:	6861      	ldr	r1, [r4, #4]
 8008238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800823c:	2300      	movs	r3, #0
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	ab0a      	add	r3, sp, #40	; 0x28
 8008242:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008246:	ab09      	add	r3, sp, #36	; 0x24
 8008248:	ec49 8b10 	vmov	d0, r8, r9
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	6022      	str	r2, [r4, #0]
 8008250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008254:	4628      	mov	r0, r5
 8008256:	f7ff fecd 	bl	8007ff4 <__cvt>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800825e:	2b47      	cmp	r3, #71	; 0x47
 8008260:	4680      	mov	r8, r0
 8008262:	d108      	bne.n	8008276 <_printf_float+0x142>
 8008264:	1cc8      	adds	r0, r1, #3
 8008266:	db02      	blt.n	800826e <_printf_float+0x13a>
 8008268:	6863      	ldr	r3, [r4, #4]
 800826a:	4299      	cmp	r1, r3
 800826c:	dd41      	ble.n	80082f2 <_printf_float+0x1be>
 800826e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008272:	fa5f fb8b 	uxtb.w	fp, fp
 8008276:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800827a:	d820      	bhi.n	80082be <_printf_float+0x18a>
 800827c:	3901      	subs	r1, #1
 800827e:	465a      	mov	r2, fp
 8008280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008284:	9109      	str	r1, [sp, #36]	; 0x24
 8008286:	f7ff ff17 	bl	80080b8 <__exponent>
 800828a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828c:	1813      	adds	r3, r2, r0
 800828e:	2a01      	cmp	r2, #1
 8008290:	4681      	mov	r9, r0
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	dc02      	bgt.n	800829c <_printf_float+0x168>
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	07d2      	lsls	r2, r2, #31
 800829a:	d501      	bpl.n	80082a0 <_printf_float+0x16c>
 800829c:	3301      	adds	r3, #1
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d09c      	beq.n	80081e2 <_printf_float+0xae>
 80082a8:	232d      	movs	r3, #45	; 0x2d
 80082aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ae:	e798      	b.n	80081e2 <_printf_float+0xae>
 80082b0:	9a06      	ldr	r2, [sp, #24]
 80082b2:	2a47      	cmp	r2, #71	; 0x47
 80082b4:	d1be      	bne.n	8008234 <_printf_float+0x100>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1bc      	bne.n	8008234 <_printf_float+0x100>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e7b9      	b.n	8008232 <_printf_float+0xfe>
 80082be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082c2:	d118      	bne.n	80082f6 <_printf_float+0x1c2>
 80082c4:	2900      	cmp	r1, #0
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	dd0b      	ble.n	80082e2 <_printf_float+0x1ae>
 80082ca:	6121      	str	r1, [r4, #16]
 80082cc:	b913      	cbnz	r3, 80082d4 <_printf_float+0x1a0>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	07d0      	lsls	r0, r2, #31
 80082d2:	d502      	bpl.n	80082da <_printf_float+0x1a6>
 80082d4:	3301      	adds	r3, #1
 80082d6:	440b      	add	r3, r1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	65a1      	str	r1, [r4, #88]	; 0x58
 80082dc:	f04f 0900 	mov.w	r9, #0
 80082e0:	e7de      	b.n	80082a0 <_printf_float+0x16c>
 80082e2:	b913      	cbnz	r3, 80082ea <_printf_float+0x1b6>
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	07d2      	lsls	r2, r2, #31
 80082e8:	d501      	bpl.n	80082ee <_printf_float+0x1ba>
 80082ea:	3302      	adds	r3, #2
 80082ec:	e7f4      	b.n	80082d8 <_printf_float+0x1a4>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e7f2      	b.n	80082d8 <_printf_float+0x1a4>
 80082f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f8:	4299      	cmp	r1, r3
 80082fa:	db05      	blt.n	8008308 <_printf_float+0x1d4>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	6121      	str	r1, [r4, #16]
 8008300:	07d8      	lsls	r0, r3, #31
 8008302:	d5ea      	bpl.n	80082da <_printf_float+0x1a6>
 8008304:	1c4b      	adds	r3, r1, #1
 8008306:	e7e7      	b.n	80082d8 <_printf_float+0x1a4>
 8008308:	2900      	cmp	r1, #0
 800830a:	bfd4      	ite	le
 800830c:	f1c1 0202 	rsble	r2, r1, #2
 8008310:	2201      	movgt	r2, #1
 8008312:	4413      	add	r3, r2
 8008314:	e7e0      	b.n	80082d8 <_printf_float+0x1a4>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	055a      	lsls	r2, r3, #21
 800831a:	d407      	bmi.n	800832c <_printf_float+0x1f8>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	4642      	mov	r2, r8
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	d12c      	bne.n	8008384 <_printf_float+0x250>
 800832a:	e764      	b.n	80081f6 <_printf_float+0xc2>
 800832c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008330:	f240 80e0 	bls.w	80084f4 <_printf_float+0x3c0>
 8008334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	f7f8 fb9c 	bl	8000a78 <__aeabi_dcmpeq>
 8008340:	2800      	cmp	r0, #0
 8008342:	d034      	beq.n	80083ae <_printf_float+0x27a>
 8008344:	4a37      	ldr	r2, [pc, #220]	; (8008424 <_printf_float+0x2f0>)
 8008346:	2301      	movs	r3, #1
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f af51 	beq.w	80081f6 <_printf_float+0xc2>
 8008354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008358:	429a      	cmp	r2, r3
 800835a:	db02      	blt.n	8008362 <_printf_float+0x22e>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	07d8      	lsls	r0, r3, #31
 8008360:	d510      	bpl.n	8008384 <_printf_float+0x250>
 8008362:	ee18 3a10 	vmov	r3, s16
 8008366:	4652      	mov	r2, sl
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	47b8      	blx	r7
 800836e:	3001      	adds	r0, #1
 8008370:	f43f af41 	beq.w	80081f6 <_printf_float+0xc2>
 8008374:	f04f 0800 	mov.w	r8, #0
 8008378:	f104 091a 	add.w	r9, r4, #26
 800837c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837e:	3b01      	subs	r3, #1
 8008380:	4543      	cmp	r3, r8
 8008382:	dc09      	bgt.n	8008398 <_printf_float+0x264>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	079b      	lsls	r3, r3, #30
 8008388:	f100 8105 	bmi.w	8008596 <_printf_float+0x462>
 800838c:	68e0      	ldr	r0, [r4, #12]
 800838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008390:	4298      	cmp	r0, r3
 8008392:	bfb8      	it	lt
 8008394:	4618      	movlt	r0, r3
 8008396:	e730      	b.n	80081fa <_printf_float+0xc6>
 8008398:	2301      	movs	r3, #1
 800839a:	464a      	mov	r2, r9
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f af27 	beq.w	80081f6 <_printf_float+0xc2>
 80083a8:	f108 0801 	add.w	r8, r8, #1
 80083ac:	e7e6      	b.n	800837c <_printf_float+0x248>
 80083ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dc39      	bgt.n	8008428 <_printf_float+0x2f4>
 80083b4:	4a1b      	ldr	r2, [pc, #108]	; (8008424 <_printf_float+0x2f0>)
 80083b6:	2301      	movs	r3, #1
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af19 	beq.w	80081f6 <_printf_float+0xc2>
 80083c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c8:	4313      	orrs	r3, r2
 80083ca:	d102      	bne.n	80083d2 <_printf_float+0x29e>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d5d8      	bpl.n	8008384 <_printf_float+0x250>
 80083d2:	ee18 3a10 	vmov	r3, s16
 80083d6:	4652      	mov	r2, sl
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f af09 	beq.w	80081f6 <_printf_float+0xc2>
 80083e4:	f04f 0900 	mov.w	r9, #0
 80083e8:	f104 0a1a 	add.w	sl, r4, #26
 80083ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ee:	425b      	negs	r3, r3
 80083f0:	454b      	cmp	r3, r9
 80083f2:	dc01      	bgt.n	80083f8 <_printf_float+0x2c4>
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	e792      	b.n	800831e <_printf_float+0x1ea>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4652      	mov	r2, sl
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f aef7 	beq.w	80081f6 <_printf_float+0xc2>
 8008408:	f109 0901 	add.w	r9, r9, #1
 800840c:	e7ee      	b.n	80083ec <_printf_float+0x2b8>
 800840e:	bf00      	nop
 8008410:	7fefffff 	.word	0x7fefffff
 8008414:	0800cfe4 	.word	0x0800cfe4
 8008418:	0800cfe8 	.word	0x0800cfe8
 800841c:	0800cff0 	.word	0x0800cff0
 8008420:	0800cfec 	.word	0x0800cfec
 8008424:	0800cff4 	.word	0x0800cff4
 8008428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800842c:	429a      	cmp	r2, r3
 800842e:	bfa8      	it	ge
 8008430:	461a      	movge	r2, r3
 8008432:	2a00      	cmp	r2, #0
 8008434:	4691      	mov	r9, r2
 8008436:	dc37      	bgt.n	80084a8 <_printf_float+0x374>
 8008438:	f04f 0b00 	mov.w	fp, #0
 800843c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008440:	f104 021a 	add.w	r2, r4, #26
 8008444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	eba3 0309 	sub.w	r3, r3, r9
 800844c:	455b      	cmp	r3, fp
 800844e:	dc33      	bgt.n	80084b8 <_printf_float+0x384>
 8008450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008454:	429a      	cmp	r2, r3
 8008456:	db3b      	blt.n	80084d0 <_printf_float+0x39c>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	07da      	lsls	r2, r3, #31
 800845c:	d438      	bmi.n	80084d0 <_printf_float+0x39c>
 800845e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008460:	9a05      	ldr	r2, [sp, #20]
 8008462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008464:	1a9a      	subs	r2, r3, r2
 8008466:	eba3 0901 	sub.w	r9, r3, r1
 800846a:	4591      	cmp	r9, r2
 800846c:	bfa8      	it	ge
 800846e:	4691      	movge	r9, r2
 8008470:	f1b9 0f00 	cmp.w	r9, #0
 8008474:	dc35      	bgt.n	80084e2 <_printf_float+0x3ae>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800847e:	f104 0a1a 	add.w	sl, r4, #26
 8008482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008486:	1a9b      	subs	r3, r3, r2
 8008488:	eba3 0309 	sub.w	r3, r3, r9
 800848c:	4543      	cmp	r3, r8
 800848e:	f77f af79 	ble.w	8008384 <_printf_float+0x250>
 8008492:	2301      	movs	r3, #1
 8008494:	4652      	mov	r2, sl
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f aeaa 	beq.w	80081f6 <_printf_float+0xc2>
 80084a2:	f108 0801 	add.w	r8, r8, #1
 80084a6:	e7ec      	b.n	8008482 <_printf_float+0x34e>
 80084a8:	4613      	mov	r3, r2
 80084aa:	4631      	mov	r1, r6
 80084ac:	4642      	mov	r2, r8
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	d1c0      	bne.n	8008438 <_printf_float+0x304>
 80084b6:	e69e      	b.n	80081f6 <_printf_float+0xc2>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	9205      	str	r2, [sp, #20]
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f ae97 	beq.w	80081f6 <_printf_float+0xc2>
 80084c8:	9a05      	ldr	r2, [sp, #20]
 80084ca:	f10b 0b01 	add.w	fp, fp, #1
 80084ce:	e7b9      	b.n	8008444 <_printf_float+0x310>
 80084d0:	ee18 3a10 	vmov	r3, s16
 80084d4:	4652      	mov	r2, sl
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	d1be      	bne.n	800845e <_printf_float+0x32a>
 80084e0:	e689      	b.n	80081f6 <_printf_float+0xc2>
 80084e2:	9a05      	ldr	r2, [sp, #20]
 80084e4:	464b      	mov	r3, r9
 80084e6:	4442      	add	r2, r8
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	d1c1      	bne.n	8008476 <_printf_float+0x342>
 80084f2:	e680      	b.n	80081f6 <_printf_float+0xc2>
 80084f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f6:	2a01      	cmp	r2, #1
 80084f8:	dc01      	bgt.n	80084fe <_printf_float+0x3ca>
 80084fa:	07db      	lsls	r3, r3, #31
 80084fc:	d538      	bpl.n	8008570 <_printf_float+0x43c>
 80084fe:	2301      	movs	r3, #1
 8008500:	4642      	mov	r2, r8
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f ae74 	beq.w	80081f6 <_printf_float+0xc2>
 800850e:	ee18 3a10 	vmov	r3, s16
 8008512:	4652      	mov	r2, sl
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f ae6b 	beq.w	80081f6 <_printf_float+0xc2>
 8008520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008524:	2200      	movs	r2, #0
 8008526:	2300      	movs	r3, #0
 8008528:	f7f8 faa6 	bl	8000a78 <__aeabi_dcmpeq>
 800852c:	b9d8      	cbnz	r0, 8008566 <_printf_float+0x432>
 800852e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008530:	f108 0201 	add.w	r2, r8, #1
 8008534:	3b01      	subs	r3, #1
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	d10e      	bne.n	800855e <_printf_float+0x42a>
 8008540:	e659      	b.n	80081f6 <_printf_float+0xc2>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	f43f ae52 	beq.w	80081f6 <_printf_float+0xc2>
 8008552:	f108 0801 	add.w	r8, r8, #1
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	3b01      	subs	r3, #1
 800855a:	4543      	cmp	r3, r8
 800855c:	dcf1      	bgt.n	8008542 <_printf_float+0x40e>
 800855e:	464b      	mov	r3, r9
 8008560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008564:	e6dc      	b.n	8008320 <_printf_float+0x1ec>
 8008566:	f04f 0800 	mov.w	r8, #0
 800856a:	f104 0a1a 	add.w	sl, r4, #26
 800856e:	e7f2      	b.n	8008556 <_printf_float+0x422>
 8008570:	2301      	movs	r3, #1
 8008572:	4642      	mov	r2, r8
 8008574:	e7df      	b.n	8008536 <_printf_float+0x402>
 8008576:	2301      	movs	r3, #1
 8008578:	464a      	mov	r2, r9
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	f43f ae38 	beq.w	80081f6 <_printf_float+0xc2>
 8008586:	f108 0801 	add.w	r8, r8, #1
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800858e:	1a5b      	subs	r3, r3, r1
 8008590:	4543      	cmp	r3, r8
 8008592:	dcf0      	bgt.n	8008576 <_printf_float+0x442>
 8008594:	e6fa      	b.n	800838c <_printf_float+0x258>
 8008596:	f04f 0800 	mov.w	r8, #0
 800859a:	f104 0919 	add.w	r9, r4, #25
 800859e:	e7f4      	b.n	800858a <_printf_float+0x456>

080085a0 <_printf_common>:
 80085a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a4:	4616      	mov	r6, r2
 80085a6:	4699      	mov	r9, r3
 80085a8:	688a      	ldr	r2, [r1, #8]
 80085aa:	690b      	ldr	r3, [r1, #16]
 80085ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bfb8      	it	lt
 80085b4:	4613      	movlt	r3, r2
 80085b6:	6033      	str	r3, [r6, #0]
 80085b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085bc:	4607      	mov	r7, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b10a      	cbz	r2, 80085c6 <_printf_common+0x26>
 80085c2:	3301      	adds	r3, #1
 80085c4:	6033      	str	r3, [r6, #0]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	0699      	lsls	r1, r3, #26
 80085ca:	bf42      	ittt	mi
 80085cc:	6833      	ldrmi	r3, [r6, #0]
 80085ce:	3302      	addmi	r3, #2
 80085d0:	6033      	strmi	r3, [r6, #0]
 80085d2:	6825      	ldr	r5, [r4, #0]
 80085d4:	f015 0506 	ands.w	r5, r5, #6
 80085d8:	d106      	bne.n	80085e8 <_printf_common+0x48>
 80085da:	f104 0a19 	add.w	sl, r4, #25
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	6832      	ldr	r2, [r6, #0]
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dc26      	bgt.n	8008636 <_printf_common+0x96>
 80085e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085ec:	1e13      	subs	r3, r2, #0
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	bf18      	it	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	0692      	lsls	r2, r2, #26
 80085f6:	d42b      	bmi.n	8008650 <_printf_common+0xb0>
 80085f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085fc:	4649      	mov	r1, r9
 80085fe:	4638      	mov	r0, r7
 8008600:	47c0      	blx	r8
 8008602:	3001      	adds	r0, #1
 8008604:	d01e      	beq.n	8008644 <_printf_common+0xa4>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	68e5      	ldr	r5, [r4, #12]
 800860a:	6832      	ldr	r2, [r6, #0]
 800860c:	f003 0306 	and.w	r3, r3, #6
 8008610:	2b04      	cmp	r3, #4
 8008612:	bf08      	it	eq
 8008614:	1aad      	subeq	r5, r5, r2
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	6922      	ldr	r2, [r4, #16]
 800861a:	bf0c      	ite	eq
 800861c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008620:	2500      	movne	r5, #0
 8008622:	4293      	cmp	r3, r2
 8008624:	bfc4      	itt	gt
 8008626:	1a9b      	subgt	r3, r3, r2
 8008628:	18ed      	addgt	r5, r5, r3
 800862a:	2600      	movs	r6, #0
 800862c:	341a      	adds	r4, #26
 800862e:	42b5      	cmp	r5, r6
 8008630:	d11a      	bne.n	8008668 <_printf_common+0xc8>
 8008632:	2000      	movs	r0, #0
 8008634:	e008      	b.n	8008648 <_printf_common+0xa8>
 8008636:	2301      	movs	r3, #1
 8008638:	4652      	mov	r2, sl
 800863a:	4649      	mov	r1, r9
 800863c:	4638      	mov	r0, r7
 800863e:	47c0      	blx	r8
 8008640:	3001      	adds	r0, #1
 8008642:	d103      	bne.n	800864c <_printf_common+0xac>
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	3501      	adds	r5, #1
 800864e:	e7c6      	b.n	80085de <_printf_common+0x3e>
 8008650:	18e1      	adds	r1, r4, r3
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	2030      	movs	r0, #48	; 0x30
 8008656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800865a:	4422      	add	r2, r4
 800865c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008664:	3302      	adds	r3, #2
 8008666:	e7c7      	b.n	80085f8 <_printf_common+0x58>
 8008668:	2301      	movs	r3, #1
 800866a:	4622      	mov	r2, r4
 800866c:	4649      	mov	r1, r9
 800866e:	4638      	mov	r0, r7
 8008670:	47c0      	blx	r8
 8008672:	3001      	adds	r0, #1
 8008674:	d0e6      	beq.n	8008644 <_printf_common+0xa4>
 8008676:	3601      	adds	r6, #1
 8008678:	e7d9      	b.n	800862e <_printf_common+0x8e>
	...

0800867c <_printf_i>:
 800867c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	7e0f      	ldrb	r7, [r1, #24]
 8008682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008684:	2f78      	cmp	r7, #120	; 0x78
 8008686:	4691      	mov	r9, r2
 8008688:	4680      	mov	r8, r0
 800868a:	460c      	mov	r4, r1
 800868c:	469a      	mov	sl, r3
 800868e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008692:	d807      	bhi.n	80086a4 <_printf_i+0x28>
 8008694:	2f62      	cmp	r7, #98	; 0x62
 8008696:	d80a      	bhi.n	80086ae <_printf_i+0x32>
 8008698:	2f00      	cmp	r7, #0
 800869a:	f000 80d8 	beq.w	800884e <_printf_i+0x1d2>
 800869e:	2f58      	cmp	r7, #88	; 0x58
 80086a0:	f000 80a3 	beq.w	80087ea <_printf_i+0x16e>
 80086a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086ac:	e03a      	b.n	8008724 <_printf_i+0xa8>
 80086ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086b2:	2b15      	cmp	r3, #21
 80086b4:	d8f6      	bhi.n	80086a4 <_printf_i+0x28>
 80086b6:	a101      	add	r1, pc, #4	; (adr r1, 80086bc <_printf_i+0x40>)
 80086b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086bc:	08008715 	.word	0x08008715
 80086c0:	08008729 	.word	0x08008729
 80086c4:	080086a5 	.word	0x080086a5
 80086c8:	080086a5 	.word	0x080086a5
 80086cc:	080086a5 	.word	0x080086a5
 80086d0:	080086a5 	.word	0x080086a5
 80086d4:	08008729 	.word	0x08008729
 80086d8:	080086a5 	.word	0x080086a5
 80086dc:	080086a5 	.word	0x080086a5
 80086e0:	080086a5 	.word	0x080086a5
 80086e4:	080086a5 	.word	0x080086a5
 80086e8:	08008835 	.word	0x08008835
 80086ec:	08008759 	.word	0x08008759
 80086f0:	08008817 	.word	0x08008817
 80086f4:	080086a5 	.word	0x080086a5
 80086f8:	080086a5 	.word	0x080086a5
 80086fc:	08008857 	.word	0x08008857
 8008700:	080086a5 	.word	0x080086a5
 8008704:	08008759 	.word	0x08008759
 8008708:	080086a5 	.word	0x080086a5
 800870c:	080086a5 	.word	0x080086a5
 8008710:	0800881f 	.word	0x0800881f
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	602a      	str	r2, [r5, #0]
 800871c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008724:	2301      	movs	r3, #1
 8008726:	e0a3      	b.n	8008870 <_printf_i+0x1f4>
 8008728:	6820      	ldr	r0, [r4, #0]
 800872a:	6829      	ldr	r1, [r5, #0]
 800872c:	0606      	lsls	r6, r0, #24
 800872e:	f101 0304 	add.w	r3, r1, #4
 8008732:	d50a      	bpl.n	800874a <_printf_i+0xce>
 8008734:	680e      	ldr	r6, [r1, #0]
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	2e00      	cmp	r6, #0
 800873a:	da03      	bge.n	8008744 <_printf_i+0xc8>
 800873c:	232d      	movs	r3, #45	; 0x2d
 800873e:	4276      	negs	r6, r6
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	485e      	ldr	r0, [pc, #376]	; (80088c0 <_printf_i+0x244>)
 8008746:	230a      	movs	r3, #10
 8008748:	e019      	b.n	800877e <_printf_i+0x102>
 800874a:	680e      	ldr	r6, [r1, #0]
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008752:	bf18      	it	ne
 8008754:	b236      	sxthne	r6, r6
 8008756:	e7ef      	b.n	8008738 <_printf_i+0xbc>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	6820      	ldr	r0, [r4, #0]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	6029      	str	r1, [r5, #0]
 8008760:	0601      	lsls	r1, r0, #24
 8008762:	d501      	bpl.n	8008768 <_printf_i+0xec>
 8008764:	681e      	ldr	r6, [r3, #0]
 8008766:	e002      	b.n	800876e <_printf_i+0xf2>
 8008768:	0646      	lsls	r6, r0, #25
 800876a:	d5fb      	bpl.n	8008764 <_printf_i+0xe8>
 800876c:	881e      	ldrh	r6, [r3, #0]
 800876e:	4854      	ldr	r0, [pc, #336]	; (80088c0 <_printf_i+0x244>)
 8008770:	2f6f      	cmp	r7, #111	; 0x6f
 8008772:	bf0c      	ite	eq
 8008774:	2308      	moveq	r3, #8
 8008776:	230a      	movne	r3, #10
 8008778:	2100      	movs	r1, #0
 800877a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800877e:	6865      	ldr	r5, [r4, #4]
 8008780:	60a5      	str	r5, [r4, #8]
 8008782:	2d00      	cmp	r5, #0
 8008784:	bfa2      	ittt	ge
 8008786:	6821      	ldrge	r1, [r4, #0]
 8008788:	f021 0104 	bicge.w	r1, r1, #4
 800878c:	6021      	strge	r1, [r4, #0]
 800878e:	b90e      	cbnz	r6, 8008794 <_printf_i+0x118>
 8008790:	2d00      	cmp	r5, #0
 8008792:	d04d      	beq.n	8008830 <_printf_i+0x1b4>
 8008794:	4615      	mov	r5, r2
 8008796:	fbb6 f1f3 	udiv	r1, r6, r3
 800879a:	fb03 6711 	mls	r7, r3, r1, r6
 800879e:	5dc7      	ldrb	r7, [r0, r7]
 80087a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087a4:	4637      	mov	r7, r6
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	460e      	mov	r6, r1
 80087aa:	d9f4      	bls.n	8008796 <_printf_i+0x11a>
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d10b      	bne.n	80087c8 <_printf_i+0x14c>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	07de      	lsls	r6, r3, #31
 80087b4:	d508      	bpl.n	80087c8 <_printf_i+0x14c>
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	6861      	ldr	r1, [r4, #4]
 80087ba:	4299      	cmp	r1, r3
 80087bc:	bfde      	ittt	le
 80087be:	2330      	movle	r3, #48	; 0x30
 80087c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087c8:	1b52      	subs	r2, r2, r5
 80087ca:	6122      	str	r2, [r4, #16]
 80087cc:	f8cd a000 	str.w	sl, [sp]
 80087d0:	464b      	mov	r3, r9
 80087d2:	aa03      	add	r2, sp, #12
 80087d4:	4621      	mov	r1, r4
 80087d6:	4640      	mov	r0, r8
 80087d8:	f7ff fee2 	bl	80085a0 <_printf_common>
 80087dc:	3001      	adds	r0, #1
 80087de:	d14c      	bne.n	800887a <_printf_i+0x1fe>
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	b004      	add	sp, #16
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	4835      	ldr	r0, [pc, #212]	; (80088c0 <_printf_i+0x244>)
 80087ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087f0:	6829      	ldr	r1, [r5, #0]
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087f8:	6029      	str	r1, [r5, #0]
 80087fa:	061d      	lsls	r5, r3, #24
 80087fc:	d514      	bpl.n	8008828 <_printf_i+0x1ac>
 80087fe:	07df      	lsls	r7, r3, #31
 8008800:	bf44      	itt	mi
 8008802:	f043 0320 	orrmi.w	r3, r3, #32
 8008806:	6023      	strmi	r3, [r4, #0]
 8008808:	b91e      	cbnz	r6, 8008812 <_printf_i+0x196>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f023 0320 	bic.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	2310      	movs	r3, #16
 8008814:	e7b0      	b.n	8008778 <_printf_i+0xfc>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f043 0320 	orr.w	r3, r3, #32
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	2378      	movs	r3, #120	; 0x78
 8008820:	4828      	ldr	r0, [pc, #160]	; (80088c4 <_printf_i+0x248>)
 8008822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008826:	e7e3      	b.n	80087f0 <_printf_i+0x174>
 8008828:	0659      	lsls	r1, r3, #25
 800882a:	bf48      	it	mi
 800882c:	b2b6      	uxthmi	r6, r6
 800882e:	e7e6      	b.n	80087fe <_printf_i+0x182>
 8008830:	4615      	mov	r5, r2
 8008832:	e7bb      	b.n	80087ac <_printf_i+0x130>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	6826      	ldr	r6, [r4, #0]
 8008838:	6961      	ldr	r1, [r4, #20]
 800883a:	1d18      	adds	r0, r3, #4
 800883c:	6028      	str	r0, [r5, #0]
 800883e:	0635      	lsls	r5, r6, #24
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	d501      	bpl.n	8008848 <_printf_i+0x1cc>
 8008844:	6019      	str	r1, [r3, #0]
 8008846:	e002      	b.n	800884e <_printf_i+0x1d2>
 8008848:	0670      	lsls	r0, r6, #25
 800884a:	d5fb      	bpl.n	8008844 <_printf_i+0x1c8>
 800884c:	8019      	strh	r1, [r3, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	4615      	mov	r5, r2
 8008854:	e7ba      	b.n	80087cc <_printf_i+0x150>
 8008856:	682b      	ldr	r3, [r5, #0]
 8008858:	1d1a      	adds	r2, r3, #4
 800885a:	602a      	str	r2, [r5, #0]
 800885c:	681d      	ldr	r5, [r3, #0]
 800885e:	6862      	ldr	r2, [r4, #4]
 8008860:	2100      	movs	r1, #0
 8008862:	4628      	mov	r0, r5
 8008864:	f7f7 fc94 	bl	8000190 <memchr>
 8008868:	b108      	cbz	r0, 800886e <_printf_i+0x1f2>
 800886a:	1b40      	subs	r0, r0, r5
 800886c:	6060      	str	r0, [r4, #4]
 800886e:	6863      	ldr	r3, [r4, #4]
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	2300      	movs	r3, #0
 8008874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008878:	e7a8      	b.n	80087cc <_printf_i+0x150>
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	462a      	mov	r2, r5
 800887e:	4649      	mov	r1, r9
 8008880:	4640      	mov	r0, r8
 8008882:	47d0      	blx	sl
 8008884:	3001      	adds	r0, #1
 8008886:	d0ab      	beq.n	80087e0 <_printf_i+0x164>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	079b      	lsls	r3, r3, #30
 800888c:	d413      	bmi.n	80088b6 <_printf_i+0x23a>
 800888e:	68e0      	ldr	r0, [r4, #12]
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	4298      	cmp	r0, r3
 8008894:	bfb8      	it	lt
 8008896:	4618      	movlt	r0, r3
 8008898:	e7a4      	b.n	80087e4 <_printf_i+0x168>
 800889a:	2301      	movs	r3, #1
 800889c:	4632      	mov	r2, r6
 800889e:	4649      	mov	r1, r9
 80088a0:	4640      	mov	r0, r8
 80088a2:	47d0      	blx	sl
 80088a4:	3001      	adds	r0, #1
 80088a6:	d09b      	beq.n	80087e0 <_printf_i+0x164>
 80088a8:	3501      	adds	r5, #1
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	9903      	ldr	r1, [sp, #12]
 80088ae:	1a5b      	subs	r3, r3, r1
 80088b0:	42ab      	cmp	r3, r5
 80088b2:	dcf2      	bgt.n	800889a <_printf_i+0x21e>
 80088b4:	e7eb      	b.n	800888e <_printf_i+0x212>
 80088b6:	2500      	movs	r5, #0
 80088b8:	f104 0619 	add.w	r6, r4, #25
 80088bc:	e7f5      	b.n	80088aa <_printf_i+0x22e>
 80088be:	bf00      	nop
 80088c0:	0800cff6 	.word	0x0800cff6
 80088c4:	0800d007 	.word	0x0800d007

080088c8 <_scanf_float>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	b087      	sub	sp, #28
 80088ce:	4617      	mov	r7, r2
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	688b      	ldr	r3, [r1, #8]
 80088d4:	1e5a      	subs	r2, r3, #1
 80088d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088da:	bf83      	ittte	hi
 80088dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088e0:	195b      	addhi	r3, r3, r5
 80088e2:	9302      	strhi	r3, [sp, #8]
 80088e4:	2300      	movls	r3, #0
 80088e6:	bf86      	itte	hi
 80088e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088ec:	608b      	strhi	r3, [r1, #8]
 80088ee:	9302      	strls	r3, [sp, #8]
 80088f0:	680b      	ldr	r3, [r1, #0]
 80088f2:	468b      	mov	fp, r1
 80088f4:	2500      	movs	r5, #0
 80088f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80088fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008902:	4680      	mov	r8, r0
 8008904:	460c      	mov	r4, r1
 8008906:	465e      	mov	r6, fp
 8008908:	46aa      	mov	sl, r5
 800890a:	46a9      	mov	r9, r5
 800890c:	9501      	str	r5, [sp, #4]
 800890e:	68a2      	ldr	r2, [r4, #8]
 8008910:	b152      	cbz	r2, 8008928 <_scanf_float+0x60>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b4e      	cmp	r3, #78	; 0x4e
 8008918:	d864      	bhi.n	80089e4 <_scanf_float+0x11c>
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d83c      	bhi.n	8008998 <_scanf_float+0xd0>
 800891e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008922:	b2c8      	uxtb	r0, r1
 8008924:	280e      	cmp	r0, #14
 8008926:	d93a      	bls.n	800899e <_scanf_float+0xd6>
 8008928:	f1b9 0f00 	cmp.w	r9, #0
 800892c:	d003      	beq.n	8008936 <_scanf_float+0x6e>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800893a:	f1ba 0f01 	cmp.w	sl, #1
 800893e:	f200 8113 	bhi.w	8008b68 <_scanf_float+0x2a0>
 8008942:	455e      	cmp	r6, fp
 8008944:	f200 8105 	bhi.w	8008b52 <_scanf_float+0x28a>
 8008948:	2501      	movs	r5, #1
 800894a:	4628      	mov	r0, r5
 800894c:	b007      	add	sp, #28
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008956:	2a0d      	cmp	r2, #13
 8008958:	d8e6      	bhi.n	8008928 <_scanf_float+0x60>
 800895a:	a101      	add	r1, pc, #4	; (adr r1, 8008960 <_scanf_float+0x98>)
 800895c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008960:	08008a9f 	.word	0x08008a9f
 8008964:	08008929 	.word	0x08008929
 8008968:	08008929 	.word	0x08008929
 800896c:	08008929 	.word	0x08008929
 8008970:	08008aff 	.word	0x08008aff
 8008974:	08008ad7 	.word	0x08008ad7
 8008978:	08008929 	.word	0x08008929
 800897c:	08008929 	.word	0x08008929
 8008980:	08008aad 	.word	0x08008aad
 8008984:	08008929 	.word	0x08008929
 8008988:	08008929 	.word	0x08008929
 800898c:	08008929 	.word	0x08008929
 8008990:	08008929 	.word	0x08008929
 8008994:	08008a65 	.word	0x08008a65
 8008998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800899c:	e7db      	b.n	8008956 <_scanf_float+0x8e>
 800899e:	290e      	cmp	r1, #14
 80089a0:	d8c2      	bhi.n	8008928 <_scanf_float+0x60>
 80089a2:	a001      	add	r0, pc, #4	; (adr r0, 80089a8 <_scanf_float+0xe0>)
 80089a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80089a8:	08008a57 	.word	0x08008a57
 80089ac:	08008929 	.word	0x08008929
 80089b0:	08008a57 	.word	0x08008a57
 80089b4:	08008aeb 	.word	0x08008aeb
 80089b8:	08008929 	.word	0x08008929
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a41 	.word	0x08008a41
 80089c4:	08008a41 	.word	0x08008a41
 80089c8:	08008a41 	.word	0x08008a41
 80089cc:	08008a41 	.word	0x08008a41
 80089d0:	08008a41 	.word	0x08008a41
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a41 	.word	0x08008a41
 80089e4:	2b6e      	cmp	r3, #110	; 0x6e
 80089e6:	d809      	bhi.n	80089fc <_scanf_float+0x134>
 80089e8:	2b60      	cmp	r3, #96	; 0x60
 80089ea:	d8b2      	bhi.n	8008952 <_scanf_float+0x8a>
 80089ec:	2b54      	cmp	r3, #84	; 0x54
 80089ee:	d077      	beq.n	8008ae0 <_scanf_float+0x218>
 80089f0:	2b59      	cmp	r3, #89	; 0x59
 80089f2:	d199      	bne.n	8008928 <_scanf_float+0x60>
 80089f4:	2d07      	cmp	r5, #7
 80089f6:	d197      	bne.n	8008928 <_scanf_float+0x60>
 80089f8:	2508      	movs	r5, #8
 80089fa:	e029      	b.n	8008a50 <_scanf_float+0x188>
 80089fc:	2b74      	cmp	r3, #116	; 0x74
 80089fe:	d06f      	beq.n	8008ae0 <_scanf_float+0x218>
 8008a00:	2b79      	cmp	r3, #121	; 0x79
 8008a02:	e7f6      	b.n	80089f2 <_scanf_float+0x12a>
 8008a04:	6821      	ldr	r1, [r4, #0]
 8008a06:	05c8      	lsls	r0, r1, #23
 8008a08:	d51a      	bpl.n	8008a40 <_scanf_float+0x178>
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a10:	6021      	str	r1, [r4, #0]
 8008a12:	f109 0901 	add.w	r9, r9, #1
 8008a16:	b11b      	cbz	r3, 8008a20 <_scanf_float+0x158>
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	9302      	str	r3, [sp, #8]
 8008a1e:	60a2      	str	r2, [r4, #8]
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	f340 8084 	ble.w	8008b40 <_scanf_float+0x278>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	e766      	b.n	800890e <_scanf_float+0x46>
 8008a40:	eb1a 0f05 	cmn.w	sl, r5
 8008a44:	f47f af70 	bne.w	8008928 <_scanf_float+0x60>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	f806 3b01 	strb.w	r3, [r6], #1
 8008a54:	e7e4      	b.n	8008a20 <_scanf_float+0x158>
 8008a56:	6822      	ldr	r2, [r4, #0]
 8008a58:	0610      	lsls	r0, r2, #24
 8008a5a:	f57f af65 	bpl.w	8008928 <_scanf_float+0x60>
 8008a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a62:	e7f4      	b.n	8008a4e <_scanf_float+0x186>
 8008a64:	f1ba 0f00 	cmp.w	sl, #0
 8008a68:	d10e      	bne.n	8008a88 <_scanf_float+0x1c0>
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	d10e      	bne.n	8008a8e <_scanf_float+0x1c6>
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a7a:	d108      	bne.n	8008a8e <_scanf_float+0x1c6>
 8008a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a80:	6022      	str	r2, [r4, #0]
 8008a82:	f04f 0a01 	mov.w	sl, #1
 8008a86:	e7e3      	b.n	8008a50 <_scanf_float+0x188>
 8008a88:	f1ba 0f02 	cmp.w	sl, #2
 8008a8c:	d055      	beq.n	8008b3a <_scanf_float+0x272>
 8008a8e:	2d01      	cmp	r5, #1
 8008a90:	d002      	beq.n	8008a98 <_scanf_float+0x1d0>
 8008a92:	2d04      	cmp	r5, #4
 8008a94:	f47f af48 	bne.w	8008928 <_scanf_float+0x60>
 8008a98:	3501      	adds	r5, #1
 8008a9a:	b2ed      	uxtb	r5, r5
 8008a9c:	e7d8      	b.n	8008a50 <_scanf_float+0x188>
 8008a9e:	f1ba 0f01 	cmp.w	sl, #1
 8008aa2:	f47f af41 	bne.w	8008928 <_scanf_float+0x60>
 8008aa6:	f04f 0a02 	mov.w	sl, #2
 8008aaa:	e7d1      	b.n	8008a50 <_scanf_float+0x188>
 8008aac:	b97d      	cbnz	r5, 8008ace <_scanf_float+0x206>
 8008aae:	f1b9 0f00 	cmp.w	r9, #0
 8008ab2:	f47f af3c 	bne.w	800892e <_scanf_float+0x66>
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008abc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ac0:	f47f af39 	bne.w	8008936 <_scanf_float+0x6e>
 8008ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ac8:	6022      	str	r2, [r4, #0]
 8008aca:	2501      	movs	r5, #1
 8008acc:	e7c0      	b.n	8008a50 <_scanf_float+0x188>
 8008ace:	2d03      	cmp	r5, #3
 8008ad0:	d0e2      	beq.n	8008a98 <_scanf_float+0x1d0>
 8008ad2:	2d05      	cmp	r5, #5
 8008ad4:	e7de      	b.n	8008a94 <_scanf_float+0x1cc>
 8008ad6:	2d02      	cmp	r5, #2
 8008ad8:	f47f af26 	bne.w	8008928 <_scanf_float+0x60>
 8008adc:	2503      	movs	r5, #3
 8008ade:	e7b7      	b.n	8008a50 <_scanf_float+0x188>
 8008ae0:	2d06      	cmp	r5, #6
 8008ae2:	f47f af21 	bne.w	8008928 <_scanf_float+0x60>
 8008ae6:	2507      	movs	r5, #7
 8008ae8:	e7b2      	b.n	8008a50 <_scanf_float+0x188>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	0591      	lsls	r1, r2, #22
 8008aee:	f57f af1b 	bpl.w	8008928 <_scanf_float+0x60>
 8008af2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008af6:	6022      	str	r2, [r4, #0]
 8008af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008afc:	e7a8      	b.n	8008a50 <_scanf_float+0x188>
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008b04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b08:	d006      	beq.n	8008b18 <_scanf_float+0x250>
 8008b0a:	0550      	lsls	r0, r2, #21
 8008b0c:	f57f af0c 	bpl.w	8008928 <_scanf_float+0x60>
 8008b10:	f1b9 0f00 	cmp.w	r9, #0
 8008b14:	f43f af0f 	beq.w	8008936 <_scanf_float+0x6e>
 8008b18:	0591      	lsls	r1, r2, #22
 8008b1a:	bf58      	it	pl
 8008b1c:	9901      	ldrpl	r1, [sp, #4]
 8008b1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b22:	bf58      	it	pl
 8008b24:	eba9 0101 	subpl.w	r1, r9, r1
 8008b28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b2c:	bf58      	it	pl
 8008b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	f04f 0900 	mov.w	r9, #0
 8008b38:	e78a      	b.n	8008a50 <_scanf_float+0x188>
 8008b3a:	f04f 0a03 	mov.w	sl, #3
 8008b3e:	e787      	b.n	8008a50 <_scanf_float+0x188>
 8008b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b44:	4639      	mov	r1, r7
 8008b46:	4640      	mov	r0, r8
 8008b48:	4798      	blx	r3
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f43f aedf 	beq.w	800890e <_scanf_float+0x46>
 8008b50:	e6ea      	b.n	8008928 <_scanf_float+0x60>
 8008b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	4798      	blx	r3
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	e6ec      	b.n	8008942 <_scanf_float+0x7a>
 8008b68:	1e6b      	subs	r3, r5, #1
 8008b6a:	2b06      	cmp	r3, #6
 8008b6c:	d825      	bhi.n	8008bba <_scanf_float+0x2f2>
 8008b6e:	2d02      	cmp	r5, #2
 8008b70:	d836      	bhi.n	8008be0 <_scanf_float+0x318>
 8008b72:	455e      	cmp	r6, fp
 8008b74:	f67f aee8 	bls.w	8008948 <_scanf_float+0x80>
 8008b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b80:	463a      	mov	r2, r7
 8008b82:	4640      	mov	r0, r8
 8008b84:	4798      	blx	r3
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	e7f1      	b.n	8008b72 <_scanf_float+0x2aa>
 8008b8e:	9802      	ldr	r0, [sp, #8]
 8008b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b98:	9002      	str	r0, [sp, #8]
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4798      	blx	r3
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	6123      	str	r3, [r4, #16]
 8008ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008baa:	fa5f fa8a 	uxtb.w	sl, sl
 8008bae:	f1ba 0f02 	cmp.w	sl, #2
 8008bb2:	d1ec      	bne.n	8008b8e <_scanf_float+0x2c6>
 8008bb4:	3d03      	subs	r5, #3
 8008bb6:	b2ed      	uxtb	r5, r5
 8008bb8:	1b76      	subs	r6, r6, r5
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	05da      	lsls	r2, r3, #23
 8008bbe:	d52f      	bpl.n	8008c20 <_scanf_float+0x358>
 8008bc0:	055b      	lsls	r3, r3, #21
 8008bc2:	d510      	bpl.n	8008be6 <_scanf_float+0x31e>
 8008bc4:	455e      	cmp	r6, fp
 8008bc6:	f67f aebf 	bls.w	8008948 <_scanf_float+0x80>
 8008bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	4798      	blx	r3
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	e7f1      	b.n	8008bc4 <_scanf_float+0x2fc>
 8008be0:	46aa      	mov	sl, r5
 8008be2:	9602      	str	r6, [sp, #8]
 8008be4:	e7df      	b.n	8008ba6 <_scanf_float+0x2de>
 8008be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	2965      	cmp	r1, #101	; 0x65
 8008bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	d00c      	beq.n	8008c14 <_scanf_float+0x34c>
 8008bfa:	2945      	cmp	r1, #69	; 0x45
 8008bfc:	d00a      	beq.n	8008c14 <_scanf_float+0x34c>
 8008bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c02:	463a      	mov	r2, r7
 8008c04:	4640      	mov	r0, r8
 8008c06:	4798      	blx	r3
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	1eb5      	subs	r5, r6, #2
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c18:	463a      	mov	r2, r7
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	4798      	blx	r3
 8008c1e:	462e      	mov	r6, r5
 8008c20:	6825      	ldr	r5, [r4, #0]
 8008c22:	f015 0510 	ands.w	r5, r5, #16
 8008c26:	d159      	bne.n	8008cdc <_scanf_float+0x414>
 8008c28:	7035      	strb	r5, [r6, #0]
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c34:	d11b      	bne.n	8008c6e <_scanf_float+0x3a6>
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	454b      	cmp	r3, r9
 8008c3a:	eba3 0209 	sub.w	r2, r3, r9
 8008c3e:	d123      	bne.n	8008c88 <_scanf_float+0x3c0>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4659      	mov	r1, fp
 8008c44:	4640      	mov	r0, r8
 8008c46:	f000 ff99 	bl	8009b7c <_strtod_r>
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	f012 0f02 	tst.w	r2, #2
 8008c52:	ec57 6b10 	vmov	r6, r7, d0
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	d021      	beq.n	8008c9e <_scanf_float+0x3d6>
 8008c5a:	9903      	ldr	r1, [sp, #12]
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	600a      	str	r2, [r1, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	e9c3 6700 	strd	r6, r7, [r3]
 8008c66:	68e3      	ldr	r3, [r4, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60e3      	str	r3, [r4, #12]
 8008c6c:	e66d      	b.n	800894a <_scanf_float+0x82>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0e5      	beq.n	8008c40 <_scanf_float+0x378>
 8008c74:	9905      	ldr	r1, [sp, #20]
 8008c76:	230a      	movs	r3, #10
 8008c78:	462a      	mov	r2, r5
 8008c7a:	3101      	adds	r1, #1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	f001 f805 	bl	8009c8c <_strtol_r>
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	9e05      	ldr	r6, [sp, #20]
 8008c86:	1ac2      	subs	r2, r0, r3
 8008c88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c8c:	429e      	cmp	r6, r3
 8008c8e:	bf28      	it	cs
 8008c90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c94:	4912      	ldr	r1, [pc, #72]	; (8008ce0 <_scanf_float+0x418>)
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 f8fe 	bl	8008e98 <siprintf>
 8008c9c:	e7d0      	b.n	8008c40 <_scanf_float+0x378>
 8008c9e:	9903      	ldr	r1, [sp, #12]
 8008ca0:	f012 0f04 	tst.w	r2, #4
 8008ca4:	f103 0204 	add.w	r2, r3, #4
 8008ca8:	600a      	str	r2, [r1, #0]
 8008caa:	d1d9      	bne.n	8008c60 <_scanf_float+0x398>
 8008cac:	f8d3 8000 	ldr.w	r8, [r3]
 8008cb0:	ee10 2a10 	vmov	r2, s0
 8008cb4:	ee10 0a10 	vmov	r0, s0
 8008cb8:	463b      	mov	r3, r7
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 ff0e 	bl	8000adc <__aeabi_dcmpun>
 8008cc0:	b128      	cbz	r0, 8008cce <_scanf_float+0x406>
 8008cc2:	4808      	ldr	r0, [pc, #32]	; (8008ce4 <_scanf_float+0x41c>)
 8008cc4:	f000 f8ae 	bl	8008e24 <nanf>
 8008cc8:	ed88 0a00 	vstr	s0, [r8]
 8008ccc:	e7cb      	b.n	8008c66 <_scanf_float+0x39e>
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 ff61 	bl	8000b98 <__aeabi_d2f>
 8008cd6:	f8c8 0000 	str.w	r0, [r8]
 8008cda:	e7c4      	b.n	8008c66 <_scanf_float+0x39e>
 8008cdc:	2500      	movs	r5, #0
 8008cde:	e634      	b.n	800894a <_scanf_float+0x82>
 8008ce0:	0800d018 	.word	0x0800d018
 8008ce4:	0800d488 	.word	0x0800d488

08008ce8 <iprintf>:
 8008ce8:	b40f      	push	{r0, r1, r2, r3}
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <iprintf+0x2c>)
 8008cec:	b513      	push	{r0, r1, r4, lr}
 8008cee:	681c      	ldr	r4, [r3, #0]
 8008cf0:	b124      	cbz	r4, 8008cfc <iprintf+0x14>
 8008cf2:	69a3      	ldr	r3, [r4, #24]
 8008cf4:	b913      	cbnz	r3, 8008cfc <iprintf+0x14>
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f002 f81e 	bl	800ad38 <__sinit>
 8008cfc:	ab05      	add	r3, sp, #20
 8008cfe:	9a04      	ldr	r2, [sp, #16]
 8008d00:	68a1      	ldr	r1, [r4, #8]
 8008d02:	9301      	str	r3, [sp, #4]
 8008d04:	4620      	mov	r0, r4
 8008d06:	f003 fb09 	bl	800c31c <_vfiprintf_r>
 8008d0a:	b002      	add	sp, #8
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	b004      	add	sp, #16
 8008d12:	4770      	bx	lr
 8008d14:	20000018 	.word	0x20000018

08008d18 <_puts_r>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b118      	cbz	r0, 8008d28 <_puts_r+0x10>
 8008d20:	6983      	ldr	r3, [r0, #24]
 8008d22:	b90b      	cbnz	r3, 8008d28 <_puts_r+0x10>
 8008d24:	f002 f808 	bl	800ad38 <__sinit>
 8008d28:	69ab      	ldr	r3, [r5, #24]
 8008d2a:	68ac      	ldr	r4, [r5, #8]
 8008d2c:	b913      	cbnz	r3, 8008d34 <_puts_r+0x1c>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f002 f802 	bl	800ad38 <__sinit>
 8008d34:	4b2c      	ldr	r3, [pc, #176]	; (8008de8 <_puts_r+0xd0>)
 8008d36:	429c      	cmp	r4, r3
 8008d38:	d120      	bne.n	8008d7c <_puts_r+0x64>
 8008d3a:	686c      	ldr	r4, [r5, #4]
 8008d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d405      	bmi.n	8008d4e <_puts_r+0x36>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	0598      	lsls	r0, r3, #22
 8008d46:	d402      	bmi.n	8008d4e <_puts_r+0x36>
 8008d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d4a:	f002 fc06 	bl	800b55a <__retarget_lock_acquire_recursive>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	0719      	lsls	r1, r3, #28
 8008d52:	d51d      	bpl.n	8008d90 <_puts_r+0x78>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	b1db      	cbz	r3, 8008d90 <_puts_r+0x78>
 8008d58:	3e01      	subs	r6, #1
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d60:	3b01      	subs	r3, #1
 8008d62:	60a3      	str	r3, [r4, #8]
 8008d64:	bb39      	cbnz	r1, 8008db6 <_puts_r+0x9e>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da38      	bge.n	8008ddc <_puts_r+0xc4>
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	210a      	movs	r1, #10
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 ff8e 	bl	8009c90 <__swbuf_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d011      	beq.n	8008d9c <_puts_r+0x84>
 8008d78:	250a      	movs	r5, #10
 8008d7a:	e011      	b.n	8008da0 <_puts_r+0x88>
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <_puts_r+0xd4>)
 8008d7e:	429c      	cmp	r4, r3
 8008d80:	d101      	bne.n	8008d86 <_puts_r+0x6e>
 8008d82:	68ac      	ldr	r4, [r5, #8]
 8008d84:	e7da      	b.n	8008d3c <_puts_r+0x24>
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <_puts_r+0xd8>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	bf08      	it	eq
 8008d8c:	68ec      	ldreq	r4, [r5, #12]
 8008d8e:	e7d5      	b.n	8008d3c <_puts_r+0x24>
 8008d90:	4621      	mov	r1, r4
 8008d92:	4628      	mov	r0, r5
 8008d94:	f000 ffce 	bl	8009d34 <__swsetup_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0dd      	beq.n	8008d58 <_puts_r+0x40>
 8008d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8008da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da2:	07da      	lsls	r2, r3, #31
 8008da4:	d405      	bmi.n	8008db2 <_puts_r+0x9a>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	059b      	lsls	r3, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_puts_r+0x9a>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f002 fbd5 	bl	800b55c <__retarget_lock_release_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da04      	bge.n	8008dc4 <_puts_r+0xac>
 8008dba:	69a2      	ldr	r2, [r4, #24]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	dc06      	bgt.n	8008dce <_puts_r+0xb6>
 8008dc0:	290a      	cmp	r1, #10
 8008dc2:	d004      	beq.n	8008dce <_puts_r+0xb6>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	7019      	strb	r1, [r3, #0]
 8008dcc:	e7c5      	b.n	8008d5a <_puts_r+0x42>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 ff5d 	bl	8009c90 <__swbuf_r>
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d1bf      	bne.n	8008d5a <_puts_r+0x42>
 8008dda:	e7df      	b.n	8008d9c <_puts_r+0x84>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	250a      	movs	r5, #10
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	6022      	str	r2, [r4, #0]
 8008de4:	701d      	strb	r5, [r3, #0]
 8008de6:	e7db      	b.n	8008da0 <_puts_r+0x88>
 8008de8:	0800d224 	.word	0x0800d224
 8008dec:	0800d244 	.word	0x0800d244
 8008df0:	0800d204 	.word	0x0800d204

08008df4 <puts>:
 8008df4:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <puts+0xc>)
 8008df6:	4601      	mov	r1, r0
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	f7ff bf8d 	b.w	8008d18 <_puts_r>
 8008dfe:	bf00      	nop
 8008e00:	20000018 	.word	0x20000018

08008e04 <_sbrk_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	; (8008e20 <_sbrk_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f9 fc82 	bl	8002718 <_sbrk>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_sbrk_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_sbrk_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	2000058c 	.word	0x2000058c

08008e24 <nanf>:
 8008e24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e2c <nanf+0x8>
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	7fc00000 	.word	0x7fc00000

08008e30 <sniprintf>:
 8008e30:	b40c      	push	{r2, r3}
 8008e32:	b530      	push	{r4, r5, lr}
 8008e34:	4b17      	ldr	r3, [pc, #92]	; (8008e94 <sniprintf+0x64>)
 8008e36:	1e0c      	subs	r4, r1, #0
 8008e38:	681d      	ldr	r5, [r3, #0]
 8008e3a:	b09d      	sub	sp, #116	; 0x74
 8008e3c:	da08      	bge.n	8008e50 <sniprintf+0x20>
 8008e3e:	238b      	movs	r3, #139	; 0x8b
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	b01d      	add	sp, #116	; 0x74
 8008e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e4c:	b002      	add	sp, #8
 8008e4e:	4770      	bx	lr
 8008e50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e58:	bf14      	ite	ne
 8008e5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e5e:	4623      	moveq	r3, r4
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	9307      	str	r3, [sp, #28]
 8008e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e68:	9002      	str	r0, [sp, #8]
 8008e6a:	9006      	str	r0, [sp, #24]
 8008e6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e72:	ab21      	add	r3, sp, #132	; 0x84
 8008e74:	a902      	add	r1, sp, #8
 8008e76:	4628      	mov	r0, r5
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	f003 f925 	bl	800c0c8 <_svfiprintf_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	bfbc      	itt	lt
 8008e82:	238b      	movlt	r3, #139	; 0x8b
 8008e84:	602b      	strlt	r3, [r5, #0]
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d0dd      	beq.n	8008e46 <sniprintf+0x16>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e7d9      	b.n	8008e46 <sniprintf+0x16>
 8008e92:	bf00      	nop
 8008e94:	20000018 	.word	0x20000018

08008e98 <siprintf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b500      	push	{lr}
 8008e9c:	b09c      	sub	sp, #112	; 0x70
 8008e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8008ea0:	9002      	str	r0, [sp, #8]
 8008ea2:	9006      	str	r0, [sp, #24]
 8008ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ea8:	4809      	ldr	r0, [pc, #36]	; (8008ed0 <siprintf+0x38>)
 8008eaa:	9107      	str	r1, [sp, #28]
 8008eac:	9104      	str	r1, [sp, #16]
 8008eae:	4909      	ldr	r1, [pc, #36]	; (8008ed4 <siprintf+0x3c>)
 8008eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb4:	9105      	str	r1, [sp, #20]
 8008eb6:	6800      	ldr	r0, [r0, #0]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	a902      	add	r1, sp, #8
 8008ebc:	f003 f904 	bl	800c0c8 <_svfiprintf_r>
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	b01c      	add	sp, #112	; 0x70
 8008ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ecc:	b003      	add	sp, #12
 8008ece:	4770      	bx	lr
 8008ed0:	20000018 	.word	0x20000018
 8008ed4:	ffff0208 	.word	0xffff0208

08008ed8 <strcat>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4602      	mov	r2, r0
 8008edc:	7814      	ldrb	r4, [r2, #0]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	2c00      	cmp	r4, #0
 8008ee4:	d1fa      	bne.n	8008edc <strcat+0x4>
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d1f9      	bne.n	8008ee8 <strcat+0x10>
 8008ef4:	bd10      	pop	{r4, pc}

08008ef6 <strcpy>:
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efc:	f803 2b01 	strb.w	r2, [r3], #1
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d1f9      	bne.n	8008ef8 <strcpy+0x2>
 8008f04:	4770      	bx	lr

08008f06 <strstr>:
 8008f06:	780a      	ldrb	r2, [r1, #0]
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	b96a      	cbnz	r2, 8008f28 <strstr+0x22>
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d109      	bne.n	8008f26 <strstr+0x20>
 8008f12:	460c      	mov	r4, r1
 8008f14:	4605      	mov	r5, r0
 8008f16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f6      	beq.n	8008f0c <strstr+0x6>
 8008f1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008f22:	429e      	cmp	r6, r3
 8008f24:	d0f7      	beq.n	8008f16 <strstr+0x10>
 8008f26:	3001      	adds	r0, #1
 8008f28:	7803      	ldrb	r3, [r0, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1ef      	bne.n	8008f0e <strstr+0x8>
 8008f2e:	4618      	mov	r0, r3
 8008f30:	e7ec      	b.n	8008f0c <strstr+0x6>

08008f32 <sulp>:
 8008f32:	b570      	push	{r4, r5, r6, lr}
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	ec45 4b10 	vmov	d0, r4, r5
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	f002 ff03 	bl	800bd48 <__ulp>
 8008f42:	ec51 0b10 	vmov	r0, r1, d0
 8008f46:	b17e      	cbz	r6, 8008f68 <sulp+0x36>
 8008f48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dd09      	ble.n	8008f68 <sulp+0x36>
 8008f54:	051b      	lsls	r3, r3, #20
 8008f56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f60:	4622      	mov	r2, r4
 8008f62:	462b      	mov	r3, r5
 8008f64:	f7f7 fb20 	bl	80005a8 <__aeabi_dmul>
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	0000      	movs	r0, r0
 8008f6c:	0000      	movs	r0, r0
	...

08008f70 <_strtod_l>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	ed2d 8b02 	vpush	{d8}
 8008f78:	b09d      	sub	sp, #116	; 0x74
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9318      	str	r3, [sp, #96]	; 0x60
 8008f80:	4ba2      	ldr	r3, [pc, #648]	; (800920c <_strtod_l+0x29c>)
 8008f82:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	4604      	mov	r4, r0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	4688      	mov	r8, r1
 8008f8e:	f7f7 f8f7 	bl	8000180 <strlen>
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	4605      	mov	r5, r0
 8008f98:	f04f 0b00 	mov.w	fp, #0
 8008f9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8008fa6:	d04e      	beq.n	8009046 <_strtod_l+0xd6>
 8008fa8:	d83b      	bhi.n	8009022 <_strtod_l+0xb2>
 8008faa:	2a0d      	cmp	r2, #13
 8008fac:	d834      	bhi.n	8009018 <_strtod_l+0xa8>
 8008fae:	2a08      	cmp	r2, #8
 8008fb0:	d834      	bhi.n	800901c <_strtod_l+0xac>
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	d03e      	beq.n	8009034 <_strtod_l+0xc4>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8008fba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008fbc:	7833      	ldrb	r3, [r6, #0]
 8008fbe:	2b30      	cmp	r3, #48	; 0x30
 8008fc0:	f040 80b0 	bne.w	8009124 <_strtod_l+0x1b4>
 8008fc4:	7873      	ldrb	r3, [r6, #1]
 8008fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fca:	2b58      	cmp	r3, #88	; 0x58
 8008fcc:	d168      	bne.n	80090a0 <_strtod_l+0x130>
 8008fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	ab18      	add	r3, sp, #96	; 0x60
 8008fd4:	9702      	str	r7, [sp, #8]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4a8d      	ldr	r2, [pc, #564]	; (8009210 <_strtod_l+0x2a0>)
 8008fda:	ab19      	add	r3, sp, #100	; 0x64
 8008fdc:	a917      	add	r1, sp, #92	; 0x5c
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f001 ffae 	bl	800af40 <__gethex>
 8008fe4:	f010 0707 	ands.w	r7, r0, #7
 8008fe8:	4605      	mov	r5, r0
 8008fea:	d005      	beq.n	8008ff8 <_strtod_l+0x88>
 8008fec:	2f06      	cmp	r7, #6
 8008fee:	d12c      	bne.n	800904a <_strtod_l+0xda>
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 8590 	bne.w	8009b20 <_strtod_l+0xbb0>
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	b1eb      	cbz	r3, 8009040 <_strtod_l+0xd0>
 8009004:	4652      	mov	r2, sl
 8009006:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800900a:	ec43 2b10 	vmov	d0, r2, r3
 800900e:	b01d      	add	sp, #116	; 0x74
 8009010:	ecbd 8b02 	vpop	{d8}
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	2a20      	cmp	r2, #32
 800901a:	d1cc      	bne.n	8008fb6 <_strtod_l+0x46>
 800901c:	3301      	adds	r3, #1
 800901e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009020:	e7be      	b.n	8008fa0 <_strtod_l+0x30>
 8009022:	2a2d      	cmp	r2, #45	; 0x2d
 8009024:	d1c7      	bne.n	8008fb6 <_strtod_l+0x46>
 8009026:	2201      	movs	r2, #1
 8009028:	920a      	str	r2, [sp, #40]	; 0x28
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	9217      	str	r2, [sp, #92]	; 0x5c
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1c2      	bne.n	8008fba <_strtod_l+0x4a>
 8009034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009036:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 856e 	bne.w	8009b1c <_strtod_l+0xbac>
 8009040:	4652      	mov	r2, sl
 8009042:	465b      	mov	r3, fp
 8009044:	e7e1      	b.n	800900a <_strtod_l+0x9a>
 8009046:	2200      	movs	r2, #0
 8009048:	e7ee      	b.n	8009028 <_strtod_l+0xb8>
 800904a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800904c:	b13a      	cbz	r2, 800905e <_strtod_l+0xee>
 800904e:	2135      	movs	r1, #53	; 0x35
 8009050:	a81a      	add	r0, sp, #104	; 0x68
 8009052:	f002 ff84 	bl	800bf5e <__copybits>
 8009056:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009058:	4620      	mov	r0, r4
 800905a:	f002 fb43 	bl	800b6e4 <_Bfree>
 800905e:	3f01      	subs	r7, #1
 8009060:	2f04      	cmp	r7, #4
 8009062:	d806      	bhi.n	8009072 <_strtod_l+0x102>
 8009064:	e8df f007 	tbb	[pc, r7]
 8009068:	1714030a 	.word	0x1714030a
 800906c:	0a          	.byte	0x0a
 800906d:	00          	.byte	0x00
 800906e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009072:	0728      	lsls	r0, r5, #28
 8009074:	d5c0      	bpl.n	8008ff8 <_strtod_l+0x88>
 8009076:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800907a:	e7bd      	b.n	8008ff8 <_strtod_l+0x88>
 800907c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009080:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009086:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800908a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800908e:	e7f0      	b.n	8009072 <_strtod_l+0x102>
 8009090:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009214 <_strtod_l+0x2a4>
 8009094:	e7ed      	b.n	8009072 <_strtod_l+0x102>
 8009096:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800909a:	f04f 3aff 	mov.w	sl, #4294967295
 800909e:	e7e8      	b.n	8009072 <_strtod_l+0x102>
 80090a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d0f9      	beq.n	80090a0 <_strtod_l+0x130>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0a3      	beq.n	8008ff8 <_strtod_l+0x88>
 80090b0:	2301      	movs	r3, #1
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	9304      	str	r3, [sp, #16]
 80090b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80090c0:	464f      	mov	r7, r9
 80090c2:	220a      	movs	r2, #10
 80090c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80090c6:	7806      	ldrb	r6, [r0, #0]
 80090c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80090cc:	b2d9      	uxtb	r1, r3
 80090ce:	2909      	cmp	r1, #9
 80090d0:	d92a      	bls.n	8009128 <_strtod_l+0x1b8>
 80090d2:	9905      	ldr	r1, [sp, #20]
 80090d4:	462a      	mov	r2, r5
 80090d6:	f003 fa9e 	bl	800c616 <strncmp>
 80090da:	b398      	cbz	r0, 8009144 <_strtod_l+0x1d4>
 80090dc:	2000      	movs	r0, #0
 80090de:	4632      	mov	r2, r6
 80090e0:	463d      	mov	r5, r7
 80090e2:	9005      	str	r0, [sp, #20]
 80090e4:	4603      	mov	r3, r0
 80090e6:	2a65      	cmp	r2, #101	; 0x65
 80090e8:	d001      	beq.n	80090ee <_strtod_l+0x17e>
 80090ea:	2a45      	cmp	r2, #69	; 0x45
 80090ec:	d118      	bne.n	8009120 <_strtod_l+0x1b0>
 80090ee:	b91d      	cbnz	r5, 80090f8 <_strtod_l+0x188>
 80090f0:	9a04      	ldr	r2, [sp, #16]
 80090f2:	4302      	orrs	r2, r0
 80090f4:	d09e      	beq.n	8009034 <_strtod_l+0xc4>
 80090f6:	2500      	movs	r5, #0
 80090f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80090fc:	f108 0201 	add.w	r2, r8, #1
 8009100:	9217      	str	r2, [sp, #92]	; 0x5c
 8009102:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009106:	2a2b      	cmp	r2, #43	; 0x2b
 8009108:	d075      	beq.n	80091f6 <_strtod_l+0x286>
 800910a:	2a2d      	cmp	r2, #45	; 0x2d
 800910c:	d07b      	beq.n	8009206 <_strtod_l+0x296>
 800910e:	f04f 0c00 	mov.w	ip, #0
 8009112:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009116:	2909      	cmp	r1, #9
 8009118:	f240 8082 	bls.w	8009220 <_strtod_l+0x2b0>
 800911c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009120:	2600      	movs	r6, #0
 8009122:	e09d      	b.n	8009260 <_strtod_l+0x2f0>
 8009124:	2300      	movs	r3, #0
 8009126:	e7c4      	b.n	80090b2 <_strtod_l+0x142>
 8009128:	2f08      	cmp	r7, #8
 800912a:	bfd8      	it	le
 800912c:	9907      	ldrle	r1, [sp, #28]
 800912e:	f100 0001 	add.w	r0, r0, #1
 8009132:	bfda      	itte	le
 8009134:	fb02 3301 	mlale	r3, r2, r1, r3
 8009138:	9307      	strle	r3, [sp, #28]
 800913a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800913e:	3701      	adds	r7, #1
 8009140:	9017      	str	r0, [sp, #92]	; 0x5c
 8009142:	e7bf      	b.n	80090c4 <_strtod_l+0x154>
 8009144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009146:	195a      	adds	r2, r3, r5
 8009148:	9217      	str	r2, [sp, #92]	; 0x5c
 800914a:	5d5a      	ldrb	r2, [r3, r5]
 800914c:	2f00      	cmp	r7, #0
 800914e:	d037      	beq.n	80091c0 <_strtod_l+0x250>
 8009150:	9005      	str	r0, [sp, #20]
 8009152:	463d      	mov	r5, r7
 8009154:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009158:	2b09      	cmp	r3, #9
 800915a:	d912      	bls.n	8009182 <_strtod_l+0x212>
 800915c:	2301      	movs	r3, #1
 800915e:	e7c2      	b.n	80090e6 <_strtod_l+0x176>
 8009160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	9217      	str	r2, [sp, #92]	; 0x5c
 8009166:	785a      	ldrb	r2, [r3, #1]
 8009168:	3001      	adds	r0, #1
 800916a:	2a30      	cmp	r2, #48	; 0x30
 800916c:	d0f8      	beq.n	8009160 <_strtod_l+0x1f0>
 800916e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009172:	2b08      	cmp	r3, #8
 8009174:	f200 84d9 	bhi.w	8009b2a <_strtod_l+0xbba>
 8009178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800917a:	9005      	str	r0, [sp, #20]
 800917c:	2000      	movs	r0, #0
 800917e:	9308      	str	r3, [sp, #32]
 8009180:	4605      	mov	r5, r0
 8009182:	3a30      	subs	r2, #48	; 0x30
 8009184:	f100 0301 	add.w	r3, r0, #1
 8009188:	d014      	beq.n	80091b4 <_strtod_l+0x244>
 800918a:	9905      	ldr	r1, [sp, #20]
 800918c:	4419      	add	r1, r3
 800918e:	9105      	str	r1, [sp, #20]
 8009190:	462b      	mov	r3, r5
 8009192:	eb00 0e05 	add.w	lr, r0, r5
 8009196:	210a      	movs	r1, #10
 8009198:	4573      	cmp	r3, lr
 800919a:	d113      	bne.n	80091c4 <_strtod_l+0x254>
 800919c:	182b      	adds	r3, r5, r0
 800919e:	2b08      	cmp	r3, #8
 80091a0:	f105 0501 	add.w	r5, r5, #1
 80091a4:	4405      	add	r5, r0
 80091a6:	dc1c      	bgt.n	80091e2 <_strtod_l+0x272>
 80091a8:	9907      	ldr	r1, [sp, #28]
 80091aa:	230a      	movs	r3, #10
 80091ac:	fb03 2301 	mla	r3, r3, r1, r2
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091b6:	1c51      	adds	r1, r2, #1
 80091b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80091ba:	7852      	ldrb	r2, [r2, #1]
 80091bc:	4618      	mov	r0, r3
 80091be:	e7c9      	b.n	8009154 <_strtod_l+0x1e4>
 80091c0:	4638      	mov	r0, r7
 80091c2:	e7d2      	b.n	800916a <_strtod_l+0x1fa>
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	dc04      	bgt.n	80091d2 <_strtod_l+0x262>
 80091c8:	9e07      	ldr	r6, [sp, #28]
 80091ca:	434e      	muls	r6, r1
 80091cc:	9607      	str	r6, [sp, #28]
 80091ce:	3301      	adds	r3, #1
 80091d0:	e7e2      	b.n	8009198 <_strtod_l+0x228>
 80091d2:	f103 0c01 	add.w	ip, r3, #1
 80091d6:	f1bc 0f10 	cmp.w	ip, #16
 80091da:	bfd8      	it	le
 80091dc:	fb01 f909 	mulle.w	r9, r1, r9
 80091e0:	e7f5      	b.n	80091ce <_strtod_l+0x25e>
 80091e2:	2d10      	cmp	r5, #16
 80091e4:	bfdc      	itt	le
 80091e6:	230a      	movle	r3, #10
 80091e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80091ec:	e7e1      	b.n	80091b2 <_strtod_l+0x242>
 80091ee:	2300      	movs	r3, #0
 80091f0:	9305      	str	r3, [sp, #20]
 80091f2:	2301      	movs	r3, #1
 80091f4:	e77c      	b.n	80090f0 <_strtod_l+0x180>
 80091f6:	f04f 0c00 	mov.w	ip, #0
 80091fa:	f108 0202 	add.w	r2, r8, #2
 80091fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8009200:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009204:	e785      	b.n	8009112 <_strtod_l+0x1a2>
 8009206:	f04f 0c01 	mov.w	ip, #1
 800920a:	e7f6      	b.n	80091fa <_strtod_l+0x28a>
 800920c:	0800d2cc 	.word	0x0800d2cc
 8009210:	0800d020 	.word	0x0800d020
 8009214:	7ff00000 	.word	0x7ff00000
 8009218:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800921a:	1c51      	adds	r1, r2, #1
 800921c:	9117      	str	r1, [sp, #92]	; 0x5c
 800921e:	7852      	ldrb	r2, [r2, #1]
 8009220:	2a30      	cmp	r2, #48	; 0x30
 8009222:	d0f9      	beq.n	8009218 <_strtod_l+0x2a8>
 8009224:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009228:	2908      	cmp	r1, #8
 800922a:	f63f af79 	bhi.w	8009120 <_strtod_l+0x1b0>
 800922e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009234:	9206      	str	r2, [sp, #24]
 8009236:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009238:	1c51      	adds	r1, r2, #1
 800923a:	9117      	str	r1, [sp, #92]	; 0x5c
 800923c:	7852      	ldrb	r2, [r2, #1]
 800923e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009242:	2e09      	cmp	r6, #9
 8009244:	d937      	bls.n	80092b6 <_strtod_l+0x346>
 8009246:	9e06      	ldr	r6, [sp, #24]
 8009248:	1b89      	subs	r1, r1, r6
 800924a:	2908      	cmp	r1, #8
 800924c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009250:	dc02      	bgt.n	8009258 <_strtod_l+0x2e8>
 8009252:	4576      	cmp	r6, lr
 8009254:	bfa8      	it	ge
 8009256:	4676      	movge	r6, lr
 8009258:	f1bc 0f00 	cmp.w	ip, #0
 800925c:	d000      	beq.n	8009260 <_strtod_l+0x2f0>
 800925e:	4276      	negs	r6, r6
 8009260:	2d00      	cmp	r5, #0
 8009262:	d14d      	bne.n	8009300 <_strtod_l+0x390>
 8009264:	9904      	ldr	r1, [sp, #16]
 8009266:	4301      	orrs	r1, r0
 8009268:	f47f aec6 	bne.w	8008ff8 <_strtod_l+0x88>
 800926c:	2b00      	cmp	r3, #0
 800926e:	f47f aee1 	bne.w	8009034 <_strtod_l+0xc4>
 8009272:	2a69      	cmp	r2, #105	; 0x69
 8009274:	d027      	beq.n	80092c6 <_strtod_l+0x356>
 8009276:	dc24      	bgt.n	80092c2 <_strtod_l+0x352>
 8009278:	2a49      	cmp	r2, #73	; 0x49
 800927a:	d024      	beq.n	80092c6 <_strtod_l+0x356>
 800927c:	2a4e      	cmp	r2, #78	; 0x4e
 800927e:	f47f aed9 	bne.w	8009034 <_strtod_l+0xc4>
 8009282:	499f      	ldr	r1, [pc, #636]	; (8009500 <_strtod_l+0x590>)
 8009284:	a817      	add	r0, sp, #92	; 0x5c
 8009286:	f002 f8b3 	bl	800b3f0 <__match>
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f aed2 	beq.w	8009034 <_strtod_l+0xc4>
 8009290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b28      	cmp	r3, #40	; 0x28
 8009296:	d12d      	bne.n	80092f4 <_strtod_l+0x384>
 8009298:	499a      	ldr	r1, [pc, #616]	; (8009504 <_strtod_l+0x594>)
 800929a:	aa1a      	add	r2, sp, #104	; 0x68
 800929c:	a817      	add	r0, sp, #92	; 0x5c
 800929e:	f002 f8bb 	bl	800b418 <__hexnan>
 80092a2:	2805      	cmp	r0, #5
 80092a4:	d126      	bne.n	80092f4 <_strtod_l+0x384>
 80092a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80092ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80092b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80092b4:	e6a0      	b.n	8008ff8 <_strtod_l+0x88>
 80092b6:	210a      	movs	r1, #10
 80092b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80092bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80092c0:	e7b9      	b.n	8009236 <_strtod_l+0x2c6>
 80092c2:	2a6e      	cmp	r2, #110	; 0x6e
 80092c4:	e7db      	b.n	800927e <_strtod_l+0x30e>
 80092c6:	4990      	ldr	r1, [pc, #576]	; (8009508 <_strtod_l+0x598>)
 80092c8:	a817      	add	r0, sp, #92	; 0x5c
 80092ca:	f002 f891 	bl	800b3f0 <__match>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f43f aeb0 	beq.w	8009034 <_strtod_l+0xc4>
 80092d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092d6:	498d      	ldr	r1, [pc, #564]	; (800950c <_strtod_l+0x59c>)
 80092d8:	3b01      	subs	r3, #1
 80092da:	a817      	add	r0, sp, #92	; 0x5c
 80092dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80092de:	f002 f887 	bl	800b3f0 <__match>
 80092e2:	b910      	cbnz	r0, 80092ea <_strtod_l+0x37a>
 80092e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092e6:	3301      	adds	r3, #1
 80092e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80092ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800951c <_strtod_l+0x5ac>
 80092ee:	f04f 0a00 	mov.w	sl, #0
 80092f2:	e681      	b.n	8008ff8 <_strtod_l+0x88>
 80092f4:	4886      	ldr	r0, [pc, #536]	; (8009510 <_strtod_l+0x5a0>)
 80092f6:	f003 f943 	bl	800c580 <nan>
 80092fa:	ec5b ab10 	vmov	sl, fp, d0
 80092fe:	e67b      	b.n	8008ff8 <_strtod_l+0x88>
 8009300:	9b05      	ldr	r3, [sp, #20]
 8009302:	9807      	ldr	r0, [sp, #28]
 8009304:	1af3      	subs	r3, r6, r3
 8009306:	2f00      	cmp	r7, #0
 8009308:	bf08      	it	eq
 800930a:	462f      	moveq	r7, r5
 800930c:	2d10      	cmp	r5, #16
 800930e:	9306      	str	r3, [sp, #24]
 8009310:	46a8      	mov	r8, r5
 8009312:	bfa8      	it	ge
 8009314:	f04f 0810 	movge.w	r8, #16
 8009318:	f7f7 f8cc 	bl	80004b4 <__aeabi_ui2d>
 800931c:	2d09      	cmp	r5, #9
 800931e:	4682      	mov	sl, r0
 8009320:	468b      	mov	fp, r1
 8009322:	dd13      	ble.n	800934c <_strtod_l+0x3dc>
 8009324:	4b7b      	ldr	r3, [pc, #492]	; (8009514 <_strtod_l+0x5a4>)
 8009326:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800932a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800932e:	f7f7 f93b 	bl	80005a8 <__aeabi_dmul>
 8009332:	4682      	mov	sl, r0
 8009334:	4648      	mov	r0, r9
 8009336:	468b      	mov	fp, r1
 8009338:	f7f7 f8bc 	bl	80004b4 <__aeabi_ui2d>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	f7f6 ff7a 	bl	800023c <__adddf3>
 8009348:	4682      	mov	sl, r0
 800934a:	468b      	mov	fp, r1
 800934c:	2d0f      	cmp	r5, #15
 800934e:	dc38      	bgt.n	80093c2 <_strtod_l+0x452>
 8009350:	9b06      	ldr	r3, [sp, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f43f ae50 	beq.w	8008ff8 <_strtod_l+0x88>
 8009358:	dd24      	ble.n	80093a4 <_strtod_l+0x434>
 800935a:	2b16      	cmp	r3, #22
 800935c:	dc0b      	bgt.n	8009376 <_strtod_l+0x406>
 800935e:	496d      	ldr	r1, [pc, #436]	; (8009514 <_strtod_l+0x5a4>)
 8009360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009368:	4652      	mov	r2, sl
 800936a:	465b      	mov	r3, fp
 800936c:	f7f7 f91c 	bl	80005a8 <__aeabi_dmul>
 8009370:	4682      	mov	sl, r0
 8009372:	468b      	mov	fp, r1
 8009374:	e640      	b.n	8008ff8 <_strtod_l+0x88>
 8009376:	9a06      	ldr	r2, [sp, #24]
 8009378:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800937c:	4293      	cmp	r3, r2
 800937e:	db20      	blt.n	80093c2 <_strtod_l+0x452>
 8009380:	4c64      	ldr	r4, [pc, #400]	; (8009514 <_strtod_l+0x5a4>)
 8009382:	f1c5 050f 	rsb	r5, r5, #15
 8009386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009392:	f7f7 f909 	bl	80005a8 <__aeabi_dmul>
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	1b5d      	subs	r5, r3, r5
 800939a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800939e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093a2:	e7e3      	b.n	800936c <_strtod_l+0x3fc>
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	3316      	adds	r3, #22
 80093a8:	db0b      	blt.n	80093c2 <_strtod_l+0x452>
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	1b9e      	subs	r6, r3, r6
 80093ae:	4b59      	ldr	r3, [pc, #356]	; (8009514 <_strtod_l+0x5a4>)
 80093b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80093b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093b8:	4650      	mov	r0, sl
 80093ba:	4659      	mov	r1, fp
 80093bc:	f7f7 fa1e 	bl	80007fc <__aeabi_ddiv>
 80093c0:	e7d6      	b.n	8009370 <_strtod_l+0x400>
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	eba5 0808 	sub.w	r8, r5, r8
 80093c8:	4498      	add	r8, r3
 80093ca:	f1b8 0f00 	cmp.w	r8, #0
 80093ce:	dd74      	ble.n	80094ba <_strtod_l+0x54a>
 80093d0:	f018 030f 	ands.w	r3, r8, #15
 80093d4:	d00a      	beq.n	80093ec <_strtod_l+0x47c>
 80093d6:	494f      	ldr	r1, [pc, #316]	; (8009514 <_strtod_l+0x5a4>)
 80093d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093dc:	4652      	mov	r2, sl
 80093de:	465b      	mov	r3, fp
 80093e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e4:	f7f7 f8e0 	bl	80005a8 <__aeabi_dmul>
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	f038 080f 	bics.w	r8, r8, #15
 80093f0:	d04f      	beq.n	8009492 <_strtod_l+0x522>
 80093f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80093f6:	dd22      	ble.n	800943e <_strtod_l+0x4ce>
 80093f8:	2500      	movs	r5, #0
 80093fa:	462e      	mov	r6, r5
 80093fc:	9507      	str	r5, [sp, #28]
 80093fe:	9505      	str	r5, [sp, #20]
 8009400:	2322      	movs	r3, #34	; 0x22
 8009402:	f8df b118 	ldr.w	fp, [pc, #280]	; 800951c <_strtod_l+0x5ac>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	f04f 0a00 	mov.w	sl, #0
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f43f adf2 	beq.w	8008ff8 <_strtod_l+0x88>
 8009414:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009416:	4620      	mov	r0, r4
 8009418:	f002 f964 	bl	800b6e4 <_Bfree>
 800941c:	9905      	ldr	r1, [sp, #20]
 800941e:	4620      	mov	r0, r4
 8009420:	f002 f960 	bl	800b6e4 <_Bfree>
 8009424:	4631      	mov	r1, r6
 8009426:	4620      	mov	r0, r4
 8009428:	f002 f95c 	bl	800b6e4 <_Bfree>
 800942c:	9907      	ldr	r1, [sp, #28]
 800942e:	4620      	mov	r0, r4
 8009430:	f002 f958 	bl	800b6e4 <_Bfree>
 8009434:	4629      	mov	r1, r5
 8009436:	4620      	mov	r0, r4
 8009438:	f002 f954 	bl	800b6e4 <_Bfree>
 800943c:	e5dc      	b.n	8008ff8 <_strtod_l+0x88>
 800943e:	4b36      	ldr	r3, [pc, #216]	; (8009518 <_strtod_l+0x5a8>)
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	2300      	movs	r3, #0
 8009444:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	4699      	mov	r9, r3
 800944e:	f1b8 0f01 	cmp.w	r8, #1
 8009452:	dc21      	bgt.n	8009498 <_strtod_l+0x528>
 8009454:	b10b      	cbz	r3, 800945a <_strtod_l+0x4ea>
 8009456:	4682      	mov	sl, r0
 8009458:	468b      	mov	fp, r1
 800945a:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <_strtod_l+0x5a8>)
 800945c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009460:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009464:	4652      	mov	r2, sl
 8009466:	465b      	mov	r3, fp
 8009468:	e9d9 0100 	ldrd	r0, r1, [r9]
 800946c:	f7f7 f89c 	bl	80005a8 <__aeabi_dmul>
 8009470:	4b2a      	ldr	r3, [pc, #168]	; (800951c <_strtod_l+0x5ac>)
 8009472:	460a      	mov	r2, r1
 8009474:	400b      	ands	r3, r1
 8009476:	492a      	ldr	r1, [pc, #168]	; (8009520 <_strtod_l+0x5b0>)
 8009478:	428b      	cmp	r3, r1
 800947a:	4682      	mov	sl, r0
 800947c:	d8bc      	bhi.n	80093f8 <_strtod_l+0x488>
 800947e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009482:	428b      	cmp	r3, r1
 8009484:	bf86      	itte	hi
 8009486:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009524 <_strtod_l+0x5b4>
 800948a:	f04f 3aff 	movhi.w	sl, #4294967295
 800948e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009492:	2300      	movs	r3, #0
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	e084      	b.n	80095a2 <_strtod_l+0x632>
 8009498:	f018 0f01 	tst.w	r8, #1
 800949c:	d005      	beq.n	80094aa <_strtod_l+0x53a>
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f7 f880 	bl	80005a8 <__aeabi_dmul>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9a04      	ldr	r2, [sp, #16]
 80094ac:	3208      	adds	r2, #8
 80094ae:	f109 0901 	add.w	r9, r9, #1
 80094b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094b6:	9204      	str	r2, [sp, #16]
 80094b8:	e7c9      	b.n	800944e <_strtod_l+0x4de>
 80094ba:	d0ea      	beq.n	8009492 <_strtod_l+0x522>
 80094bc:	f1c8 0800 	rsb	r8, r8, #0
 80094c0:	f018 020f 	ands.w	r2, r8, #15
 80094c4:	d00a      	beq.n	80094dc <_strtod_l+0x56c>
 80094c6:	4b13      	ldr	r3, [pc, #76]	; (8009514 <_strtod_l+0x5a4>)
 80094c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094cc:	4650      	mov	r0, sl
 80094ce:	4659      	mov	r1, fp
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f7 f992 	bl	80007fc <__aeabi_ddiv>
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80094e0:	d0d7      	beq.n	8009492 <_strtod_l+0x522>
 80094e2:	f1b8 0f1f 	cmp.w	r8, #31
 80094e6:	dd1f      	ble.n	8009528 <_strtod_l+0x5b8>
 80094e8:	2500      	movs	r5, #0
 80094ea:	462e      	mov	r6, r5
 80094ec:	9507      	str	r5, [sp, #28]
 80094ee:	9505      	str	r5, [sp, #20]
 80094f0:	2322      	movs	r3, #34	; 0x22
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	f04f 0b00 	mov.w	fp, #0
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	e786      	b.n	800940c <_strtod_l+0x49c>
 80094fe:	bf00      	nop
 8009500:	0800cff1 	.word	0x0800cff1
 8009504:	0800d034 	.word	0x0800d034
 8009508:	0800cfe9 	.word	0x0800cfe9
 800950c:	0800d174 	.word	0x0800d174
 8009510:	0800d488 	.word	0x0800d488
 8009514:	0800d368 	.word	0x0800d368
 8009518:	0800d340 	.word	0x0800d340
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	7ca00000 	.word	0x7ca00000
 8009524:	7fefffff 	.word	0x7fefffff
 8009528:	f018 0310 	ands.w	r3, r8, #16
 800952c:	bf18      	it	ne
 800952e:	236a      	movne	r3, #106	; 0x6a
 8009530:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80098e0 <_strtod_l+0x970>
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	4650      	mov	r0, sl
 8009538:	4659      	mov	r1, fp
 800953a:	2300      	movs	r3, #0
 800953c:	f018 0f01 	tst.w	r8, #1
 8009540:	d004      	beq.n	800954c <_strtod_l+0x5dc>
 8009542:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009546:	f7f7 f82f 	bl	80005a8 <__aeabi_dmul>
 800954a:	2301      	movs	r3, #1
 800954c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009550:	f109 0908 	add.w	r9, r9, #8
 8009554:	d1f2      	bne.n	800953c <_strtod_l+0x5cc>
 8009556:	b10b      	cbz	r3, 800955c <_strtod_l+0x5ec>
 8009558:	4682      	mov	sl, r0
 800955a:	468b      	mov	fp, r1
 800955c:	9b04      	ldr	r3, [sp, #16]
 800955e:	b1c3      	cbz	r3, 8009592 <_strtod_l+0x622>
 8009560:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009564:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009568:	2b00      	cmp	r3, #0
 800956a:	4659      	mov	r1, fp
 800956c:	dd11      	ble.n	8009592 <_strtod_l+0x622>
 800956e:	2b1f      	cmp	r3, #31
 8009570:	f340 8124 	ble.w	80097bc <_strtod_l+0x84c>
 8009574:	2b34      	cmp	r3, #52	; 0x34
 8009576:	bfde      	ittt	le
 8009578:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800957c:	f04f 33ff 	movle.w	r3, #4294967295
 8009580:	fa03 f202 	lslle.w	r2, r3, r2
 8009584:	f04f 0a00 	mov.w	sl, #0
 8009588:	bfcc      	ite	gt
 800958a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800958e:	ea02 0b01 	andle.w	fp, r2, r1
 8009592:	2200      	movs	r2, #0
 8009594:	2300      	movs	r3, #0
 8009596:	4650      	mov	r0, sl
 8009598:	4659      	mov	r1, fp
 800959a:	f7f7 fa6d 	bl	8000a78 <__aeabi_dcmpeq>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d1a2      	bne.n	80094e8 <_strtod_l+0x578>
 80095a2:	9b07      	ldr	r3, [sp, #28]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	9908      	ldr	r1, [sp, #32]
 80095a8:	462b      	mov	r3, r5
 80095aa:	463a      	mov	r2, r7
 80095ac:	4620      	mov	r0, r4
 80095ae:	f002 f901 	bl	800b7b4 <__s2b>
 80095b2:	9007      	str	r0, [sp, #28]
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f43f af1f 	beq.w	80093f8 <_strtod_l+0x488>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	1b9e      	subs	r6, r3, r6
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfb4      	ite	lt
 80095c4:	4633      	movlt	r3, r6
 80095c6:	2300      	movge	r3, #0
 80095c8:	930c      	str	r3, [sp, #48]	; 0x30
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	2500      	movs	r5, #0
 80095ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095d2:	9312      	str	r3, [sp, #72]	; 0x48
 80095d4:	462e      	mov	r6, r5
 80095d6:	9b07      	ldr	r3, [sp, #28]
 80095d8:	4620      	mov	r0, r4
 80095da:	6859      	ldr	r1, [r3, #4]
 80095dc:	f002 f842 	bl	800b664 <_Balloc>
 80095e0:	9005      	str	r0, [sp, #20]
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f43f af0c 	beq.w	8009400 <_strtod_l+0x490>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	691a      	ldr	r2, [r3, #16]
 80095ec:	3202      	adds	r2, #2
 80095ee:	f103 010c 	add.w	r1, r3, #12
 80095f2:	0092      	lsls	r2, r2, #2
 80095f4:	300c      	adds	r0, #12
 80095f6:	f7fe fc07 	bl	8007e08 <memcpy>
 80095fa:	ec4b ab10 	vmov	d0, sl, fp
 80095fe:	aa1a      	add	r2, sp, #104	; 0x68
 8009600:	a919      	add	r1, sp, #100	; 0x64
 8009602:	4620      	mov	r0, r4
 8009604:	f002 fc1c 	bl	800be40 <__d2b>
 8009608:	ec4b ab18 	vmov	d8, sl, fp
 800960c:	9018      	str	r0, [sp, #96]	; 0x60
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f aef6 	beq.w	8009400 <_strtod_l+0x490>
 8009614:	2101      	movs	r1, #1
 8009616:	4620      	mov	r0, r4
 8009618:	f002 f966 	bl	800b8e8 <__i2b>
 800961c:	4606      	mov	r6, r0
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aeee 	beq.w	8009400 <_strtod_l+0x490>
 8009624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009626:	9904      	ldr	r1, [sp, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	bfab      	itete	ge
 800962c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800962e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009630:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009632:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009636:	bfac      	ite	ge
 8009638:	eb03 0902 	addge.w	r9, r3, r2
 800963c:	1ad7      	sublt	r7, r2, r3
 800963e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009640:	eba3 0801 	sub.w	r8, r3, r1
 8009644:	4490      	add	r8, r2
 8009646:	4ba1      	ldr	r3, [pc, #644]	; (80098cc <_strtod_l+0x95c>)
 8009648:	f108 38ff 	add.w	r8, r8, #4294967295
 800964c:	4598      	cmp	r8, r3
 800964e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009652:	f280 80c7 	bge.w	80097e4 <_strtod_l+0x874>
 8009656:	eba3 0308 	sub.w	r3, r3, r8
 800965a:	2b1f      	cmp	r3, #31
 800965c:	eba2 0203 	sub.w	r2, r2, r3
 8009660:	f04f 0101 	mov.w	r1, #1
 8009664:	f300 80b1 	bgt.w	80097ca <_strtod_l+0x85a>
 8009668:	fa01 f303 	lsl.w	r3, r1, r3
 800966c:	930d      	str	r3, [sp, #52]	; 0x34
 800966e:	2300      	movs	r3, #0
 8009670:	9308      	str	r3, [sp, #32]
 8009672:	eb09 0802 	add.w	r8, r9, r2
 8009676:	9b04      	ldr	r3, [sp, #16]
 8009678:	45c1      	cmp	r9, r8
 800967a:	4417      	add	r7, r2
 800967c:	441f      	add	r7, r3
 800967e:	464b      	mov	r3, r9
 8009680:	bfa8      	it	ge
 8009682:	4643      	movge	r3, r8
 8009684:	42bb      	cmp	r3, r7
 8009686:	bfa8      	it	ge
 8009688:	463b      	movge	r3, r7
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfc2      	ittt	gt
 800968e:	eba8 0803 	subgt.w	r8, r8, r3
 8009692:	1aff      	subgt	r7, r7, r3
 8009694:	eba9 0903 	subgt.w	r9, r9, r3
 8009698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969a:	2b00      	cmp	r3, #0
 800969c:	dd17      	ble.n	80096ce <_strtod_l+0x75e>
 800969e:	4631      	mov	r1, r6
 80096a0:	461a      	mov	r2, r3
 80096a2:	4620      	mov	r0, r4
 80096a4:	f002 f9e0 	bl	800ba68 <__pow5mult>
 80096a8:	4606      	mov	r6, r0
 80096aa:	2800      	cmp	r0, #0
 80096ac:	f43f aea8 	beq.w	8009400 <_strtod_l+0x490>
 80096b0:	4601      	mov	r1, r0
 80096b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096b4:	4620      	mov	r0, r4
 80096b6:	f002 f92d 	bl	800b914 <__multiply>
 80096ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f ae9f 	beq.w	8009400 <_strtod_l+0x490>
 80096c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096c4:	4620      	mov	r0, r4
 80096c6:	f002 f80d 	bl	800b6e4 <_Bfree>
 80096ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096cc:	9318      	str	r3, [sp, #96]	; 0x60
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	f300 808c 	bgt.w	80097ee <_strtod_l+0x87e>
 80096d6:	9b06      	ldr	r3, [sp, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dd08      	ble.n	80096ee <_strtod_l+0x77e>
 80096dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096de:	9905      	ldr	r1, [sp, #20]
 80096e0:	4620      	mov	r0, r4
 80096e2:	f002 f9c1 	bl	800ba68 <__pow5mult>
 80096e6:	9005      	str	r0, [sp, #20]
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f43f ae89 	beq.w	8009400 <_strtod_l+0x490>
 80096ee:	2f00      	cmp	r7, #0
 80096f0:	dd08      	ble.n	8009704 <_strtod_l+0x794>
 80096f2:	9905      	ldr	r1, [sp, #20]
 80096f4:	463a      	mov	r2, r7
 80096f6:	4620      	mov	r0, r4
 80096f8:	f002 fa10 	bl	800bb1c <__lshift>
 80096fc:	9005      	str	r0, [sp, #20]
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f ae7e 	beq.w	8009400 <_strtod_l+0x490>
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	dd08      	ble.n	800971c <_strtod_l+0x7ac>
 800970a:	4631      	mov	r1, r6
 800970c:	464a      	mov	r2, r9
 800970e:	4620      	mov	r0, r4
 8009710:	f002 fa04 	bl	800bb1c <__lshift>
 8009714:	4606      	mov	r6, r0
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f ae72 	beq.w	8009400 <_strtod_l+0x490>
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009720:	4620      	mov	r0, r4
 8009722:	f002 fa87 	bl	800bc34 <__mdiff>
 8009726:	4605      	mov	r5, r0
 8009728:	2800      	cmp	r0, #0
 800972a:	f43f ae69 	beq.w	8009400 <_strtod_l+0x490>
 800972e:	68c3      	ldr	r3, [r0, #12]
 8009730:	930b      	str	r3, [sp, #44]	; 0x2c
 8009732:	2300      	movs	r3, #0
 8009734:	60c3      	str	r3, [r0, #12]
 8009736:	4631      	mov	r1, r6
 8009738:	f002 fa60 	bl	800bbfc <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	da60      	bge.n	8009802 <_strtod_l+0x892>
 8009740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009742:	ea53 030a 	orrs.w	r3, r3, sl
 8009746:	f040 8082 	bne.w	800984e <_strtod_l+0x8de>
 800974a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800974e:	2b00      	cmp	r3, #0
 8009750:	d17d      	bne.n	800984e <_strtod_l+0x8de>
 8009752:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009756:	0d1b      	lsrs	r3, r3, #20
 8009758:	051b      	lsls	r3, r3, #20
 800975a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800975e:	d976      	bls.n	800984e <_strtod_l+0x8de>
 8009760:	696b      	ldr	r3, [r5, #20]
 8009762:	b913      	cbnz	r3, 800976a <_strtod_l+0x7fa>
 8009764:	692b      	ldr	r3, [r5, #16]
 8009766:	2b01      	cmp	r3, #1
 8009768:	dd71      	ble.n	800984e <_strtod_l+0x8de>
 800976a:	4629      	mov	r1, r5
 800976c:	2201      	movs	r2, #1
 800976e:	4620      	mov	r0, r4
 8009770:	f002 f9d4 	bl	800bb1c <__lshift>
 8009774:	4631      	mov	r1, r6
 8009776:	4605      	mov	r5, r0
 8009778:	f002 fa40 	bl	800bbfc <__mcmp>
 800977c:	2800      	cmp	r0, #0
 800977e:	dd66      	ble.n	800984e <_strtod_l+0x8de>
 8009780:	9904      	ldr	r1, [sp, #16]
 8009782:	4a53      	ldr	r2, [pc, #332]	; (80098d0 <_strtod_l+0x960>)
 8009784:	465b      	mov	r3, fp
 8009786:	2900      	cmp	r1, #0
 8009788:	f000 8081 	beq.w	800988e <_strtod_l+0x91e>
 800978c:	ea02 010b 	and.w	r1, r2, fp
 8009790:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009794:	dc7b      	bgt.n	800988e <_strtod_l+0x91e>
 8009796:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800979a:	f77f aea9 	ble.w	80094f0 <_strtod_l+0x580>
 800979e:	4b4d      	ldr	r3, [pc, #308]	; (80098d4 <_strtod_l+0x964>)
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	2200      	movs	r2, #0
 80097a6:	f7f6 feff 	bl	80005a8 <__aeabi_dmul>
 80097aa:	460b      	mov	r3, r1
 80097ac:	4303      	orrs	r3, r0
 80097ae:	bf08      	it	eq
 80097b0:	2322      	moveq	r3, #34	; 0x22
 80097b2:	4682      	mov	sl, r0
 80097b4:	468b      	mov	fp, r1
 80097b6:	bf08      	it	eq
 80097b8:	6023      	streq	r3, [r4, #0]
 80097ba:	e62b      	b.n	8009414 <_strtod_l+0x4a4>
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	fa02 f303 	lsl.w	r3, r2, r3
 80097c4:	ea03 0a0a 	and.w	sl, r3, sl
 80097c8:	e6e3      	b.n	8009592 <_strtod_l+0x622>
 80097ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80097ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80097d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80097d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80097da:	fa01 f308 	lsl.w	r3, r1, r8
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	910d      	str	r1, [sp, #52]	; 0x34
 80097e2:	e746      	b.n	8009672 <_strtod_l+0x702>
 80097e4:	2300      	movs	r3, #0
 80097e6:	9308      	str	r3, [sp, #32]
 80097e8:	2301      	movs	r3, #1
 80097ea:	930d      	str	r3, [sp, #52]	; 0x34
 80097ec:	e741      	b.n	8009672 <_strtod_l+0x702>
 80097ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097f0:	4642      	mov	r2, r8
 80097f2:	4620      	mov	r0, r4
 80097f4:	f002 f992 	bl	800bb1c <__lshift>
 80097f8:	9018      	str	r0, [sp, #96]	; 0x60
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f47f af6b 	bne.w	80096d6 <_strtod_l+0x766>
 8009800:	e5fe      	b.n	8009400 <_strtod_l+0x490>
 8009802:	465f      	mov	r7, fp
 8009804:	d16e      	bne.n	80098e4 <_strtod_l+0x974>
 8009806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800980c:	b342      	cbz	r2, 8009860 <_strtod_l+0x8f0>
 800980e:	4a32      	ldr	r2, [pc, #200]	; (80098d8 <_strtod_l+0x968>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d128      	bne.n	8009866 <_strtod_l+0x8f6>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	4651      	mov	r1, sl
 8009818:	b1eb      	cbz	r3, 8009856 <_strtod_l+0x8e6>
 800981a:	4b2d      	ldr	r3, [pc, #180]	; (80098d0 <_strtod_l+0x960>)
 800981c:	403b      	ands	r3, r7
 800981e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	d819      	bhi.n	800985c <_strtod_l+0x8ec>
 8009828:	0d1b      	lsrs	r3, r3, #20
 800982a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	4299      	cmp	r1, r3
 8009834:	d117      	bne.n	8009866 <_strtod_l+0x8f6>
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <_strtod_l+0x96c>)
 8009838:	429f      	cmp	r7, r3
 800983a:	d102      	bne.n	8009842 <_strtod_l+0x8d2>
 800983c:	3101      	adds	r1, #1
 800983e:	f43f addf 	beq.w	8009400 <_strtod_l+0x490>
 8009842:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <_strtod_l+0x960>)
 8009844:	403b      	ands	r3, r7
 8009846:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800984a:	f04f 0a00 	mov.w	sl, #0
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1a4      	bne.n	800979e <_strtod_l+0x82e>
 8009854:	e5de      	b.n	8009414 <_strtod_l+0x4a4>
 8009856:	f04f 33ff 	mov.w	r3, #4294967295
 800985a:	e7ea      	b.n	8009832 <_strtod_l+0x8c2>
 800985c:	4613      	mov	r3, r2
 800985e:	e7e8      	b.n	8009832 <_strtod_l+0x8c2>
 8009860:	ea53 030a 	orrs.w	r3, r3, sl
 8009864:	d08c      	beq.n	8009780 <_strtod_l+0x810>
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	b1db      	cbz	r3, 80098a2 <_strtod_l+0x932>
 800986a:	423b      	tst	r3, r7
 800986c:	d0ef      	beq.n	800984e <_strtod_l+0x8de>
 800986e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009870:	9a04      	ldr	r2, [sp, #16]
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	b1c3      	cbz	r3, 80098aa <_strtod_l+0x93a>
 8009878:	f7ff fb5b 	bl	8008f32 <sulp>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	ec51 0b18 	vmov	r0, r1, d8
 8009884:	f7f6 fcda 	bl	800023c <__adddf3>
 8009888:	4682      	mov	sl, r0
 800988a:	468b      	mov	fp, r1
 800988c:	e7df      	b.n	800984e <_strtod_l+0x8de>
 800988e:	4013      	ands	r3, r2
 8009890:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009894:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009898:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800989c:	f04f 3aff 	mov.w	sl, #4294967295
 80098a0:	e7d5      	b.n	800984e <_strtod_l+0x8de>
 80098a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a4:	ea13 0f0a 	tst.w	r3, sl
 80098a8:	e7e0      	b.n	800986c <_strtod_l+0x8fc>
 80098aa:	f7ff fb42 	bl	8008f32 <sulp>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	ec51 0b18 	vmov	r0, r1, d8
 80098b6:	f7f6 fcbf 	bl	8000238 <__aeabi_dsub>
 80098ba:	2200      	movs	r2, #0
 80098bc:	2300      	movs	r3, #0
 80098be:	4682      	mov	sl, r0
 80098c0:	468b      	mov	fp, r1
 80098c2:	f7f7 f8d9 	bl	8000a78 <__aeabi_dcmpeq>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0c1      	beq.n	800984e <_strtod_l+0x8de>
 80098ca:	e611      	b.n	80094f0 <_strtod_l+0x580>
 80098cc:	fffffc02 	.word	0xfffffc02
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	39500000 	.word	0x39500000
 80098d8:	000fffff 	.word	0x000fffff
 80098dc:	7fefffff 	.word	0x7fefffff
 80098e0:	0800d048 	.word	0x0800d048
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	f002 fb06 	bl	800bef8 <__ratio>
 80098ec:	ec59 8b10 	vmov	r8, r9, d0
 80098f0:	ee10 0a10 	vmov	r0, s0
 80098f4:	2200      	movs	r2, #0
 80098f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f7 f8d0 	bl	8000aa0 <__aeabi_dcmple>
 8009900:	2800      	cmp	r0, #0
 8009902:	d07a      	beq.n	80099fa <_strtod_l+0xa8a>
 8009904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d04a      	beq.n	80099a0 <_strtod_l+0xa30>
 800990a:	4b95      	ldr	r3, [pc, #596]	; (8009b60 <_strtod_l+0xbf0>)
 800990c:	2200      	movs	r2, #0
 800990e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009912:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b60 <_strtod_l+0xbf0>
 8009916:	f04f 0800 	mov.w	r8, #0
 800991a:	4b92      	ldr	r3, [pc, #584]	; (8009b64 <_strtod_l+0xbf4>)
 800991c:	403b      	ands	r3, r7
 800991e:	930d      	str	r3, [sp, #52]	; 0x34
 8009920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009922:	4b91      	ldr	r3, [pc, #580]	; (8009b68 <_strtod_l+0xbf8>)
 8009924:	429a      	cmp	r2, r3
 8009926:	f040 80b0 	bne.w	8009a8a <_strtod_l+0xb1a>
 800992a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800992e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009932:	ec4b ab10 	vmov	d0, sl, fp
 8009936:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800993a:	f002 fa05 	bl	800bd48 <__ulp>
 800993e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009942:	ec53 2b10 	vmov	r2, r3, d0
 8009946:	f7f6 fe2f 	bl	80005a8 <__aeabi_dmul>
 800994a:	4652      	mov	r2, sl
 800994c:	465b      	mov	r3, fp
 800994e:	f7f6 fc75 	bl	800023c <__adddf3>
 8009952:	460b      	mov	r3, r1
 8009954:	4983      	ldr	r1, [pc, #524]	; (8009b64 <_strtod_l+0xbf4>)
 8009956:	4a85      	ldr	r2, [pc, #532]	; (8009b6c <_strtod_l+0xbfc>)
 8009958:	4019      	ands	r1, r3
 800995a:	4291      	cmp	r1, r2
 800995c:	4682      	mov	sl, r0
 800995e:	d960      	bls.n	8009a22 <_strtod_l+0xab2>
 8009960:	ee18 3a90 	vmov	r3, s17
 8009964:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009968:	4293      	cmp	r3, r2
 800996a:	d104      	bne.n	8009976 <_strtod_l+0xa06>
 800996c:	ee18 3a10 	vmov	r3, s16
 8009970:	3301      	adds	r3, #1
 8009972:	f43f ad45 	beq.w	8009400 <_strtod_l+0x490>
 8009976:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009b78 <_strtod_l+0xc08>
 800997a:	f04f 3aff 	mov.w	sl, #4294967295
 800997e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009980:	4620      	mov	r0, r4
 8009982:	f001 feaf 	bl	800b6e4 <_Bfree>
 8009986:	9905      	ldr	r1, [sp, #20]
 8009988:	4620      	mov	r0, r4
 800998a:	f001 feab 	bl	800b6e4 <_Bfree>
 800998e:	4631      	mov	r1, r6
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fea7 	bl	800b6e4 <_Bfree>
 8009996:	4629      	mov	r1, r5
 8009998:	4620      	mov	r0, r4
 800999a:	f001 fea3 	bl	800b6e4 <_Bfree>
 800999e:	e61a      	b.n	80095d6 <_strtod_l+0x666>
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	d11b      	bne.n	80099de <_strtod_l+0xa6e>
 80099a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099aa:	b9f3      	cbnz	r3, 80099ea <_strtod_l+0xa7a>
 80099ac:	4b6c      	ldr	r3, [pc, #432]	; (8009b60 <_strtod_l+0xbf0>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f7 f86a 	bl	8000a8c <__aeabi_dcmplt>
 80099b8:	b9d0      	cbnz	r0, 80099f0 <_strtod_l+0xa80>
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	4b6c      	ldr	r3, [pc, #432]	; (8009b70 <_strtod_l+0xc00>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fdf1 	bl	80005a8 <__aeabi_dmul>
 80099c6:	4680      	mov	r8, r0
 80099c8:	4689      	mov	r9, r1
 80099ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80099d2:	9315      	str	r3, [sp, #84]	; 0x54
 80099d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80099d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099dc:	e79d      	b.n	800991a <_strtod_l+0x9aa>
 80099de:	f1ba 0f01 	cmp.w	sl, #1
 80099e2:	d102      	bne.n	80099ea <_strtod_l+0xa7a>
 80099e4:	2f00      	cmp	r7, #0
 80099e6:	f43f ad83 	beq.w	80094f0 <_strtod_l+0x580>
 80099ea:	4b62      	ldr	r3, [pc, #392]	; (8009b74 <_strtod_l+0xc04>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	e78e      	b.n	800990e <_strtod_l+0x99e>
 80099f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009b70 <_strtod_l+0xc00>
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	e7e7      	b.n	80099ca <_strtod_l+0xa5a>
 80099fa:	4b5d      	ldr	r3, [pc, #372]	; (8009b70 <_strtod_l+0xc00>)
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	2200      	movs	r2, #0
 8009a02:	f7f6 fdd1 	bl	80005a8 <__aeabi_dmul>
 8009a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a08:	4680      	mov	r8, r0
 8009a0a:	4689      	mov	r9, r1
 8009a0c:	b933      	cbnz	r3, 8009a1c <_strtod_l+0xaac>
 8009a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a12:	900e      	str	r0, [sp, #56]	; 0x38
 8009a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009a1a:	e7dd      	b.n	80099d8 <_strtod_l+0xa68>
 8009a1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009a20:	e7f9      	b.n	8009a16 <_strtod_l+0xaa6>
 8009a22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1a8      	bne.n	800997e <_strtod_l+0xa0e>
 8009a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a32:	0d1b      	lsrs	r3, r3, #20
 8009a34:	051b      	lsls	r3, r3, #20
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d1a1      	bne.n	800997e <_strtod_l+0xa0e>
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	f7f7 f913 	bl	8000c68 <__aeabi_d2lz>
 8009a42:	f7f6 fd83 	bl	800054c <__aeabi_l2d>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fbf3 	bl	8000238 <__aeabi_dsub>
 8009a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a58:	ea43 030a 	orr.w	r3, r3, sl
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4689      	mov	r9, r1
 8009a62:	d055      	beq.n	8009b10 <_strtod_l+0xba0>
 8009a64:	a336      	add	r3, pc, #216	; (adr r3, 8009b40 <_strtod_l+0xbd0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f7 f80f 	bl	8000a8c <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f47f acd0 	bne.w	8009414 <_strtod_l+0x4a4>
 8009a74:	a334      	add	r3, pc, #208	; (adr r3, 8009b48 <_strtod_l+0xbd8>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	f7f7 f823 	bl	8000ac8 <__aeabi_dcmpgt>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f af7b 	beq.w	800997e <_strtod_l+0xa0e>
 8009a88:	e4c4      	b.n	8009414 <_strtod_l+0x4a4>
 8009a8a:	9b04      	ldr	r3, [sp, #16]
 8009a8c:	b333      	cbz	r3, 8009adc <_strtod_l+0xb6c>
 8009a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a94:	d822      	bhi.n	8009adc <_strtod_l+0xb6c>
 8009a96:	a32e      	add	r3, pc, #184	; (adr r3, 8009b50 <_strtod_l+0xbe0>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	f7f6 fffe 	bl	8000aa0 <__aeabi_dcmple>
 8009aa4:	b1a0      	cbz	r0, 8009ad0 <_strtod_l+0xb60>
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	f7f7 f855 	bl	8000b58 <__aeabi_d2uiz>
 8009aae:	2801      	cmp	r0, #1
 8009ab0:	bf38      	it	cc
 8009ab2:	2001      	movcc	r0, #1
 8009ab4:	f7f6 fcfe 	bl	80004b4 <__aeabi_ui2d>
 8009ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aba:	4680      	mov	r8, r0
 8009abc:	4689      	mov	r9, r1
 8009abe:	bb23      	cbnz	r3, 8009b0a <_strtod_l+0xb9a>
 8009ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ac4:	9010      	str	r0, [sp, #64]	; 0x40
 8009ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8009ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009acc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	9309      	str	r3, [sp, #36]	; 0x24
 8009adc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ae4:	eef0 0a68 	vmov.f32	s1, s17
 8009ae8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009aec:	f002 f92c 	bl	800bd48 <__ulp>
 8009af0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009af4:	ec53 2b10 	vmov	r2, r3, d0
 8009af8:	f7f6 fd56 	bl	80005a8 <__aeabi_dmul>
 8009afc:	ec53 2b18 	vmov	r2, r3, d8
 8009b00:	f7f6 fb9c 	bl	800023c <__adddf3>
 8009b04:	4682      	mov	sl, r0
 8009b06:	468b      	mov	fp, r1
 8009b08:	e78d      	b.n	8009a26 <_strtod_l+0xab6>
 8009b0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009b0e:	e7db      	b.n	8009ac8 <_strtod_l+0xb58>
 8009b10:	a311      	add	r3, pc, #68	; (adr r3, 8009b58 <_strtod_l+0xbe8>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 ffb9 	bl	8000a8c <__aeabi_dcmplt>
 8009b1a:	e7b2      	b.n	8009a82 <_strtod_l+0xb12>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	f7ff ba6b 	b.w	8009000 <_strtod_l+0x90>
 8009b2a:	2a65      	cmp	r2, #101	; 0x65
 8009b2c:	f43f ab5f 	beq.w	80091ee <_strtod_l+0x27e>
 8009b30:	2a45      	cmp	r2, #69	; 0x45
 8009b32:	f43f ab5c 	beq.w	80091ee <_strtod_l+0x27e>
 8009b36:	2301      	movs	r3, #1
 8009b38:	f7ff bb94 	b.w	8009264 <_strtod_l+0x2f4>
 8009b3c:	f3af 8000 	nop.w
 8009b40:	94a03595 	.word	0x94a03595
 8009b44:	3fdfffff 	.word	0x3fdfffff
 8009b48:	35afe535 	.word	0x35afe535
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	ffc00000 	.word	0xffc00000
 8009b54:	41dfffff 	.word	0x41dfffff
 8009b58:	94a03595 	.word	0x94a03595
 8009b5c:	3fcfffff 	.word	0x3fcfffff
 8009b60:	3ff00000 	.word	0x3ff00000
 8009b64:	7ff00000 	.word	0x7ff00000
 8009b68:	7fe00000 	.word	0x7fe00000
 8009b6c:	7c9fffff 	.word	0x7c9fffff
 8009b70:	3fe00000 	.word	0x3fe00000
 8009b74:	bff00000 	.word	0xbff00000
 8009b78:	7fefffff 	.word	0x7fefffff

08009b7c <_strtod_r>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	; (8009b84 <_strtod_r+0x8>)
 8009b7e:	f7ff b9f7 	b.w	8008f70 <_strtod_l>
 8009b82:	bf00      	nop
 8009b84:	20000080 	.word	0x20000080

08009b88 <_strtol_l.constprop.0>:
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8e:	d001      	beq.n	8009b94 <_strtol_l.constprop.0+0xc>
 8009b90:	2b24      	cmp	r3, #36	; 0x24
 8009b92:	d906      	bls.n	8009ba2 <_strtol_l.constprop.0+0x1a>
 8009b94:	f7fe f8fe 	bl	8007d94 <__errno>
 8009b98:	2316      	movs	r3, #22
 8009b9a:	6003      	str	r3, [r0, #0]
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c88 <_strtol_l.constprop.0+0x100>
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	462e      	mov	r6, r5
 8009baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009bb2:	f017 0708 	ands.w	r7, r7, #8
 8009bb6:	d1f7      	bne.n	8009ba8 <_strtol_l.constprop.0+0x20>
 8009bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8009bba:	d132      	bne.n	8009c22 <_strtol_l.constprop.0+0x9a>
 8009bbc:	782c      	ldrb	r4, [r5, #0]
 8009bbe:	2701      	movs	r7, #1
 8009bc0:	1cb5      	adds	r5, r6, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d05b      	beq.n	8009c7e <_strtol_l.constprop.0+0xf6>
 8009bc6:	2b10      	cmp	r3, #16
 8009bc8:	d109      	bne.n	8009bde <_strtol_l.constprop.0+0x56>
 8009bca:	2c30      	cmp	r4, #48	; 0x30
 8009bcc:	d107      	bne.n	8009bde <_strtol_l.constprop.0+0x56>
 8009bce:	782c      	ldrb	r4, [r5, #0]
 8009bd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009bd4:	2c58      	cmp	r4, #88	; 0x58
 8009bd6:	d14d      	bne.n	8009c74 <_strtol_l.constprop.0+0xec>
 8009bd8:	786c      	ldrb	r4, [r5, #1]
 8009bda:	2310      	movs	r3, #16
 8009bdc:	3502      	adds	r5, #2
 8009bde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009be2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009be6:	f04f 0c00 	mov.w	ip, #0
 8009bea:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bee:	4666      	mov	r6, ip
 8009bf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009bf8:	f1be 0f09 	cmp.w	lr, #9
 8009bfc:	d816      	bhi.n	8009c2c <_strtol_l.constprop.0+0xa4>
 8009bfe:	4674      	mov	r4, lr
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	dd24      	ble.n	8009c4e <_strtol_l.constprop.0+0xc6>
 8009c04:	f1bc 0f00 	cmp.w	ip, #0
 8009c08:	db1e      	blt.n	8009c48 <_strtol_l.constprop.0+0xc0>
 8009c0a:	45b1      	cmp	r9, r6
 8009c0c:	d31c      	bcc.n	8009c48 <_strtol_l.constprop.0+0xc0>
 8009c0e:	d101      	bne.n	8009c14 <_strtol_l.constprop.0+0x8c>
 8009c10:	45a2      	cmp	sl, r4
 8009c12:	db19      	blt.n	8009c48 <_strtol_l.constprop.0+0xc0>
 8009c14:	fb06 4603 	mla	r6, r6, r3, r4
 8009c18:	f04f 0c01 	mov.w	ip, #1
 8009c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c20:	e7e8      	b.n	8009bf4 <_strtol_l.constprop.0+0x6c>
 8009c22:	2c2b      	cmp	r4, #43	; 0x2b
 8009c24:	bf04      	itt	eq
 8009c26:	782c      	ldrbeq	r4, [r5, #0]
 8009c28:	1cb5      	addeq	r5, r6, #2
 8009c2a:	e7ca      	b.n	8009bc2 <_strtol_l.constprop.0+0x3a>
 8009c2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c30:	f1be 0f19 	cmp.w	lr, #25
 8009c34:	d801      	bhi.n	8009c3a <_strtol_l.constprop.0+0xb2>
 8009c36:	3c37      	subs	r4, #55	; 0x37
 8009c38:	e7e2      	b.n	8009c00 <_strtol_l.constprop.0+0x78>
 8009c3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c3e:	f1be 0f19 	cmp.w	lr, #25
 8009c42:	d804      	bhi.n	8009c4e <_strtol_l.constprop.0+0xc6>
 8009c44:	3c57      	subs	r4, #87	; 0x57
 8009c46:	e7db      	b.n	8009c00 <_strtol_l.constprop.0+0x78>
 8009c48:	f04f 3cff 	mov.w	ip, #4294967295
 8009c4c:	e7e6      	b.n	8009c1c <_strtol_l.constprop.0+0x94>
 8009c4e:	f1bc 0f00 	cmp.w	ip, #0
 8009c52:	da05      	bge.n	8009c60 <_strtol_l.constprop.0+0xd8>
 8009c54:	2322      	movs	r3, #34	; 0x22
 8009c56:	6003      	str	r3, [r0, #0]
 8009c58:	4646      	mov	r6, r8
 8009c5a:	b942      	cbnz	r2, 8009c6e <_strtol_l.constprop.0+0xe6>
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	e79e      	b.n	8009b9e <_strtol_l.constprop.0+0x16>
 8009c60:	b107      	cbz	r7, 8009c64 <_strtol_l.constprop.0+0xdc>
 8009c62:	4276      	negs	r6, r6
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	d0f9      	beq.n	8009c5c <_strtol_l.constprop.0+0xd4>
 8009c68:	f1bc 0f00 	cmp.w	ip, #0
 8009c6c:	d000      	beq.n	8009c70 <_strtol_l.constprop.0+0xe8>
 8009c6e:	1e69      	subs	r1, r5, #1
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	e7f3      	b.n	8009c5c <_strtol_l.constprop.0+0xd4>
 8009c74:	2430      	movs	r4, #48	; 0x30
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1b1      	bne.n	8009bde <_strtol_l.constprop.0+0x56>
 8009c7a:	2308      	movs	r3, #8
 8009c7c:	e7af      	b.n	8009bde <_strtol_l.constprop.0+0x56>
 8009c7e:	2c30      	cmp	r4, #48	; 0x30
 8009c80:	d0a5      	beq.n	8009bce <_strtol_l.constprop.0+0x46>
 8009c82:	230a      	movs	r3, #10
 8009c84:	e7ab      	b.n	8009bde <_strtol_l.constprop.0+0x56>
 8009c86:	bf00      	nop
 8009c88:	0800d071 	.word	0x0800d071

08009c8c <_strtol_r>:
 8009c8c:	f7ff bf7c 	b.w	8009b88 <_strtol_l.constprop.0>

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f001 f84b 	bl	800ad38 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 ffa0 	bl	800ac10 <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 ff8b 	bl	800ac10 <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f80c 	bl	8009d34 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	0800d224 	.word	0x0800d224
 8009d2c:	0800d244 	.word	0x0800d244
 8009d30:	0800d204 	.word	0x0800d204

08009d34 <__swsetup_r>:
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <__swsetup_r+0xcc>)
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	b125      	cbz	r5, 8009d4a <__swsetup_r+0x16>
 8009d40:	69ab      	ldr	r3, [r5, #24]
 8009d42:	b913      	cbnz	r3, 8009d4a <__swsetup_r+0x16>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f000 fff7 	bl	800ad38 <__sinit>
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	; (8009e04 <__swsetup_r+0xd0>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	d10f      	bne.n	8009d70 <__swsetup_r+0x3c>
 8009d50:	686c      	ldr	r4, [r5, #4]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	d42c      	bmi.n	8009db6 <__swsetup_r+0x82>
 8009d5c:	06dd      	lsls	r5, r3, #27
 8009d5e:	d411      	bmi.n	8009d84 <__swsetup_r+0x50>
 8009d60:	2309      	movs	r3, #9
 8009d62:	6033      	str	r3, [r6, #0]
 8009d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e03e      	b.n	8009dee <__swsetup_r+0xba>
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <__swsetup_r+0xd4>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <__swsetup_r+0x46>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7eb      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <__swsetup_r+0xd8>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7e6      	b.n	8009d52 <__swsetup_r+0x1e>
 8009d84:	0758      	lsls	r0, r3, #29
 8009d86:	d512      	bpl.n	8009dae <__swsetup_r+0x7a>
 8009d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d8a:	b141      	cbz	r1, 8009d9e <__swsetup_r+0x6a>
 8009d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d90:	4299      	cmp	r1, r3
 8009d92:	d002      	beq.n	8009d9a <__swsetup_r+0x66>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7fe f84d 	bl	8007e34 <_free_r>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0308 	orr.w	r3, r3, #8
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	b94b      	cbnz	r3, 8009dce <__swsetup_r+0x9a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc4:	d003      	beq.n	8009dce <__swsetup_r+0x9a>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f001 fbed 	bl	800b5a8 <__smakebuf_r>
 8009dce:	89a0      	ldrh	r0, [r4, #12]
 8009dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd4:	f010 0301 	ands.w	r3, r0, #1
 8009dd8:	d00a      	beq.n	8009df0 <__swsetup_r+0xbc>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	425b      	negs	r3, r3
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	b943      	cbnz	r3, 8009dfa <__swsetup_r+0xc6>
 8009de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dec:	d1ba      	bne.n	8009d64 <__swsetup_r+0x30>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	0781      	lsls	r1, r0, #30
 8009df2:	bf58      	it	pl
 8009df4:	6963      	ldrpl	r3, [r4, #20]
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	e7f4      	b.n	8009de4 <__swsetup_r+0xb0>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e7f7      	b.n	8009dee <__swsetup_r+0xba>
 8009dfe:	bf00      	nop
 8009e00:	20000018 	.word	0x20000018
 8009e04:	0800d224 	.word	0x0800d224
 8009e08:	0800d244 	.word	0x0800d244
 8009e0c:	0800d204 	.word	0x0800d204

08009e10 <quorem>:
 8009e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	6903      	ldr	r3, [r0, #16]
 8009e16:	690c      	ldr	r4, [r1, #16]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	f2c0 8081 	blt.w	8009f22 <quorem+0x112>
 8009e20:	3c01      	subs	r4, #1
 8009e22:	f101 0814 	add.w	r8, r1, #20
 8009e26:	f100 0514 	add.w	r5, r0, #20
 8009e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e48:	d331      	bcc.n	8009eae <quorem+0x9e>
 8009e4a:	f04f 0e00 	mov.w	lr, #0
 8009e4e:	4640      	mov	r0, r8
 8009e50:	46ac      	mov	ip, r5
 8009e52:	46f2      	mov	sl, lr
 8009e54:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e58:	b293      	uxth	r3, r2
 8009e5a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ebaa 0303 	sub.w	r3, sl, r3
 8009e68:	f8dc a000 	ldr.w	sl, [ip]
 8009e6c:	0c12      	lsrs	r2, r2, #16
 8009e6e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e72:	fb06 e202 	mla	r2, r6, r2, lr
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e7e:	b292      	uxth	r2, r2
 8009e80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e88:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e8c:	4581      	cmp	r9, r0
 8009e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e92:	f84c 3b04 	str.w	r3, [ip], #4
 8009e96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e9a:	d2db      	bcs.n	8009e54 <quorem+0x44>
 8009e9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ea0:	b92b      	cbnz	r3, 8009eae <quorem+0x9e>
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	d32e      	bcc.n	8009f0a <quorem+0xfa>
 8009eac:	613c      	str	r4, [r7, #16]
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f001 fea4 	bl	800bbfc <__mcmp>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	db24      	blt.n	8009f02 <quorem+0xf2>
 8009eb8:	3601      	adds	r6, #1
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f04f 0c00 	mov.w	ip, #0
 8009ec0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ec4:	f8d0 e000 	ldr.w	lr, [r0]
 8009ec8:	b293      	uxth	r3, r2
 8009eca:	ebac 0303 	sub.w	r3, ip, r3
 8009ece:	0c12      	lsrs	r2, r2, #16
 8009ed0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ed4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee2:	45c1      	cmp	r9, r8
 8009ee4:	f840 3b04 	str.w	r3, [r0], #4
 8009ee8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eec:	d2e8      	bcs.n	8009ec0 <quorem+0xb0>
 8009eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ef6:	b922      	cbnz	r2, 8009f02 <quorem+0xf2>
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	429d      	cmp	r5, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	d30a      	bcc.n	8009f16 <quorem+0x106>
 8009f00:	613c      	str	r4, [r7, #16]
 8009f02:	4630      	mov	r0, r6
 8009f04:	b003      	add	sp, #12
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	d1cc      	bne.n	8009eac <quorem+0x9c>
 8009f12:	3c01      	subs	r4, #1
 8009f14:	e7c7      	b.n	8009ea6 <quorem+0x96>
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	d1f0      	bne.n	8009f00 <quorem+0xf0>
 8009f1e:	3c01      	subs	r4, #1
 8009f20:	e7eb      	b.n	8009efa <quorem+0xea>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e7ee      	b.n	8009f04 <quorem+0xf4>
	...

08009f28 <_dtoa_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	ed2d 8b04 	vpush	{d8-d9}
 8009f30:	ec57 6b10 	vmov	r6, r7, d0
 8009f34:	b093      	sub	sp, #76	; 0x4c
 8009f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f3c:	9106      	str	r1, [sp, #24]
 8009f3e:	ee10 aa10 	vmov	sl, s0
 8009f42:	4604      	mov	r4, r0
 8009f44:	9209      	str	r2, [sp, #36]	; 0x24
 8009f46:	930c      	str	r3, [sp, #48]	; 0x30
 8009f48:	46bb      	mov	fp, r7
 8009f4a:	b975      	cbnz	r5, 8009f6a <_dtoa_r+0x42>
 8009f4c:	2010      	movs	r0, #16
 8009f4e:	f7fd ff4b 	bl	8007de8 <malloc>
 8009f52:	4602      	mov	r2, r0
 8009f54:	6260      	str	r0, [r4, #36]	; 0x24
 8009f56:	b920      	cbnz	r0, 8009f62 <_dtoa_r+0x3a>
 8009f58:	4ba7      	ldr	r3, [pc, #668]	; (800a1f8 <_dtoa_r+0x2d0>)
 8009f5a:	21ea      	movs	r1, #234	; 0xea
 8009f5c:	48a7      	ldr	r0, [pc, #668]	; (800a1fc <_dtoa_r+0x2d4>)
 8009f5e:	f002 fb8d 	bl	800c67c <__assert_func>
 8009f62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f66:	6005      	str	r5, [r0, #0]
 8009f68:	60c5      	str	r5, [r0, #12]
 8009f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f6c:	6819      	ldr	r1, [r3, #0]
 8009f6e:	b151      	cbz	r1, 8009f86 <_dtoa_r+0x5e>
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	604a      	str	r2, [r1, #4]
 8009f74:	2301      	movs	r3, #1
 8009f76:	4093      	lsls	r3, r2
 8009f78:	608b      	str	r3, [r1, #8]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f001 fbb2 	bl	800b6e4 <_Bfree>
 8009f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	1e3b      	subs	r3, r7, #0
 8009f88:	bfaa      	itet	ge
 8009f8a:	2300      	movge	r3, #0
 8009f8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f90:	f8c8 3000 	strge.w	r3, [r8]
 8009f94:	4b9a      	ldr	r3, [pc, #616]	; (800a200 <_dtoa_r+0x2d8>)
 8009f96:	bfbc      	itt	lt
 8009f98:	2201      	movlt	r2, #1
 8009f9a:	f8c8 2000 	strlt.w	r2, [r8]
 8009f9e:	ea33 030b 	bics.w	r3, r3, fp
 8009fa2:	d11b      	bne.n	8009fdc <_dtoa_r+0xb4>
 8009fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fb0:	4333      	orrs	r3, r6
 8009fb2:	f000 8592 	beq.w	800aada <_dtoa_r+0xbb2>
 8009fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb8:	b963      	cbnz	r3, 8009fd4 <_dtoa_r+0xac>
 8009fba:	4b92      	ldr	r3, [pc, #584]	; (800a204 <_dtoa_r+0x2dc>)
 8009fbc:	e022      	b.n	800a004 <_dtoa_r+0xdc>
 8009fbe:	4b92      	ldr	r3, [pc, #584]	; (800a208 <_dtoa_r+0x2e0>)
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	9801      	ldr	r0, [sp, #4]
 8009fca:	b013      	add	sp, #76	; 0x4c
 8009fcc:	ecbd 8b04 	vpop	{d8-d9}
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	4b8b      	ldr	r3, [pc, #556]	; (800a204 <_dtoa_r+0x2dc>)
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	3303      	adds	r3, #3
 8009fda:	e7f3      	b.n	8009fc4 <_dtoa_r+0x9c>
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	f7f6 fd48 	bl	8000a78 <__aeabi_dcmpeq>
 8009fe8:	ec4b ab19 	vmov	d9, sl, fp
 8009fec:	4680      	mov	r8, r0
 8009fee:	b158      	cbz	r0, 800a008 <_dtoa_r+0xe0>
 8009ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 856b 	beq.w	800aad4 <_dtoa_r+0xbac>
 8009ffe:	4883      	ldr	r0, [pc, #524]	; (800a20c <_dtoa_r+0x2e4>)
 800a000:	6018      	str	r0, [r3, #0]
 800a002:	1e43      	subs	r3, r0, #1
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	e7df      	b.n	8009fc8 <_dtoa_r+0xa0>
 800a008:	ec4b ab10 	vmov	d0, sl, fp
 800a00c:	aa10      	add	r2, sp, #64	; 0x40
 800a00e:	a911      	add	r1, sp, #68	; 0x44
 800a010:	4620      	mov	r0, r4
 800a012:	f001 ff15 	bl	800be40 <__d2b>
 800a016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a01a:	ee08 0a10 	vmov	s16, r0
 800a01e:	2d00      	cmp	r5, #0
 800a020:	f000 8084 	beq.w	800a12c <_dtoa_r+0x204>
 800a024:	ee19 3a90 	vmov	r3, s19
 800a028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a02c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a030:	4656      	mov	r6, sl
 800a032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a03a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a03e:	4b74      	ldr	r3, [pc, #464]	; (800a210 <_dtoa_r+0x2e8>)
 800a040:	2200      	movs	r2, #0
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 f8f7 	bl	8000238 <__aeabi_dsub>
 800a04a:	a365      	add	r3, pc, #404	; (adr r3, 800a1e0 <_dtoa_r+0x2b8>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 faaa 	bl	80005a8 <__aeabi_dmul>
 800a054:	a364      	add	r3, pc, #400	; (adr r3, 800a1e8 <_dtoa_r+0x2c0>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 f8ef 	bl	800023c <__adddf3>
 800a05e:	4606      	mov	r6, r0
 800a060:	4628      	mov	r0, r5
 800a062:	460f      	mov	r7, r1
 800a064:	f7f6 fa36 	bl	80004d4 <__aeabi_i2d>
 800a068:	a361      	add	r3, pc, #388	; (adr r3, 800a1f0 <_dtoa_r+0x2c8>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 fa9b 	bl	80005a8 <__aeabi_dmul>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	f7f6 f8df 	bl	800023c <__adddf3>
 800a07e:	4606      	mov	r6, r0
 800a080:	460f      	mov	r7, r1
 800a082:	f7f6 fd41 	bl	8000b08 <__aeabi_d2iz>
 800a086:	2200      	movs	r2, #0
 800a088:	9000      	str	r0, [sp, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	4630      	mov	r0, r6
 800a08e:	4639      	mov	r1, r7
 800a090:	f7f6 fcfc 	bl	8000a8c <__aeabi_dcmplt>
 800a094:	b150      	cbz	r0, 800a0ac <_dtoa_r+0x184>
 800a096:	9800      	ldr	r0, [sp, #0]
 800a098:	f7f6 fa1c 	bl	80004d4 <__aeabi_i2d>
 800a09c:	4632      	mov	r2, r6
 800a09e:	463b      	mov	r3, r7
 800a0a0:	f7f6 fcea 	bl	8000a78 <__aeabi_dcmpeq>
 800a0a4:	b910      	cbnz	r0, 800a0ac <_dtoa_r+0x184>
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	9b00      	ldr	r3, [sp, #0]
 800a0ae:	2b16      	cmp	r3, #22
 800a0b0:	d85a      	bhi.n	800a168 <_dtoa_r+0x240>
 800a0b2:	9a00      	ldr	r2, [sp, #0]
 800a0b4:	4b57      	ldr	r3, [pc, #348]	; (800a214 <_dtoa_r+0x2ec>)
 800a0b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	ec51 0b19 	vmov	r0, r1, d9
 800a0c2:	f7f6 fce3 	bl	8000a8c <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d050      	beq.n	800a16c <_dtoa_r+0x244>
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0d6:	1b5d      	subs	r5, r3, r5
 800a0d8:	1e6b      	subs	r3, r5, #1
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	bf45      	ittet	mi
 800a0de:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0e2:	9304      	strmi	r3, [sp, #16]
 800a0e4:	2300      	movpl	r3, #0
 800a0e6:	2300      	movmi	r3, #0
 800a0e8:	bf4c      	ite	mi
 800a0ea:	9305      	strmi	r3, [sp, #20]
 800a0ec:	9304      	strpl	r3, [sp, #16]
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	db3d      	blt.n	800a170 <_dtoa_r+0x248>
 800a0f4:	9b05      	ldr	r3, [sp, #20]
 800a0f6:	9a00      	ldr	r2, [sp, #0]
 800a0f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a0fa:	4413      	add	r3, r2
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	2300      	movs	r3, #0
 800a100:	9307      	str	r3, [sp, #28]
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	2b09      	cmp	r3, #9
 800a106:	f200 8089 	bhi.w	800a21c <_dtoa_r+0x2f4>
 800a10a:	2b05      	cmp	r3, #5
 800a10c:	bfc4      	itt	gt
 800a10e:	3b04      	subgt	r3, #4
 800a110:	9306      	strgt	r3, [sp, #24]
 800a112:	9b06      	ldr	r3, [sp, #24]
 800a114:	f1a3 0302 	sub.w	r3, r3, #2
 800a118:	bfcc      	ite	gt
 800a11a:	2500      	movgt	r5, #0
 800a11c:	2501      	movle	r5, #1
 800a11e:	2b03      	cmp	r3, #3
 800a120:	f200 8087 	bhi.w	800a232 <_dtoa_r+0x30a>
 800a124:	e8df f003 	tbb	[pc, r3]
 800a128:	59383a2d 	.word	0x59383a2d
 800a12c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a130:	441d      	add	r5, r3
 800a132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a136:	2b20      	cmp	r3, #32
 800a138:	bfc1      	itttt	gt
 800a13a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a13e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a142:	fa0b f303 	lslgt.w	r3, fp, r3
 800a146:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a14a:	bfda      	itte	le
 800a14c:	f1c3 0320 	rsble	r3, r3, #32
 800a150:	fa06 f003 	lslle.w	r0, r6, r3
 800a154:	4318      	orrgt	r0, r3
 800a156:	f7f6 f9ad 	bl	80004b4 <__aeabi_ui2d>
 800a15a:	2301      	movs	r3, #1
 800a15c:	4606      	mov	r6, r0
 800a15e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a162:	3d01      	subs	r5, #1
 800a164:	930e      	str	r3, [sp, #56]	; 0x38
 800a166:	e76a      	b.n	800a03e <_dtoa_r+0x116>
 800a168:	2301      	movs	r3, #1
 800a16a:	e7b2      	b.n	800a0d2 <_dtoa_r+0x1aa>
 800a16c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a16e:	e7b1      	b.n	800a0d4 <_dtoa_r+0x1ac>
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	9a00      	ldr	r2, [sp, #0]
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	4253      	negs	r3, r2
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	2300      	movs	r3, #0
 800a17e:	930a      	str	r3, [sp, #40]	; 0x28
 800a180:	e7bf      	b.n	800a102 <_dtoa_r+0x1da>
 800a182:	2300      	movs	r3, #0
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc55      	bgt.n	800a238 <_dtoa_r+0x310>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a192:	461a      	mov	r2, r3
 800a194:	9209      	str	r2, [sp, #36]	; 0x24
 800a196:	e00c      	b.n	800a1b2 <_dtoa_r+0x28a>
 800a198:	2301      	movs	r3, #1
 800a19a:	e7f3      	b.n	800a184 <_dtoa_r+0x25c>
 800a19c:	2300      	movs	r3, #0
 800a19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1a0:	9308      	str	r3, [sp, #32]
 800a1a2:	9b00      	ldr	r3, [sp, #0]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	9302      	str	r3, [sp, #8]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	bfb8      	it	lt
 800a1b0:	2301      	movlt	r3, #1
 800a1b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	6042      	str	r2, [r0, #4]
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	f102 0614 	add.w	r6, r2, #20
 800a1be:	429e      	cmp	r6, r3
 800a1c0:	6841      	ldr	r1, [r0, #4]
 800a1c2:	d93d      	bls.n	800a240 <_dtoa_r+0x318>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f001 fa4d 	bl	800b664 <_Balloc>
 800a1ca:	9001      	str	r0, [sp, #4]
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d13b      	bne.n	800a248 <_dtoa_r+0x320>
 800a1d0:	4b11      	ldr	r3, [pc, #68]	; (800a218 <_dtoa_r+0x2f0>)
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1d8:	e6c0      	b.n	8009f5c <_dtoa_r+0x34>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e7df      	b.n	800a19e <_dtoa_r+0x276>
 800a1de:	bf00      	nop
 800a1e0:	636f4361 	.word	0x636f4361
 800a1e4:	3fd287a7 	.word	0x3fd287a7
 800a1e8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ec:	3fc68a28 	.word	0x3fc68a28
 800a1f0:	509f79fb 	.word	0x509f79fb
 800a1f4:	3fd34413 	.word	0x3fd34413
 800a1f8:	0800d17e 	.word	0x0800d17e
 800a1fc:	0800d195 	.word	0x0800d195
 800a200:	7ff00000 	.word	0x7ff00000
 800a204:	0800d17a 	.word	0x0800d17a
 800a208:	0800d171 	.word	0x0800d171
 800a20c:	0800cff5 	.word	0x0800cff5
 800a210:	3ff80000 	.word	0x3ff80000
 800a214:	0800d368 	.word	0x0800d368
 800a218:	0800d1f0 	.word	0x0800d1f0
 800a21c:	2501      	movs	r5, #1
 800a21e:	2300      	movs	r3, #0
 800a220:	9306      	str	r3, [sp, #24]
 800a222:	9508      	str	r5, [sp, #32]
 800a224:	f04f 33ff 	mov.w	r3, #4294967295
 800a228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a22c:	2200      	movs	r2, #0
 800a22e:	2312      	movs	r3, #18
 800a230:	e7b0      	b.n	800a194 <_dtoa_r+0x26c>
 800a232:	2301      	movs	r3, #1
 800a234:	9308      	str	r3, [sp, #32]
 800a236:	e7f5      	b.n	800a224 <_dtoa_r+0x2fc>
 800a238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a23e:	e7b8      	b.n	800a1b2 <_dtoa_r+0x28a>
 800a240:	3101      	adds	r1, #1
 800a242:	6041      	str	r1, [r0, #4]
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	e7b8      	b.n	800a1ba <_dtoa_r+0x292>
 800a248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a24a:	9a01      	ldr	r2, [sp, #4]
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	2b0e      	cmp	r3, #14
 800a252:	f200 809d 	bhi.w	800a390 <_dtoa_r+0x468>
 800a256:	2d00      	cmp	r5, #0
 800a258:	f000 809a 	beq.w	800a390 <_dtoa_r+0x468>
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd32      	ble.n	800a2c8 <_dtoa_r+0x3a0>
 800a262:	4ab7      	ldr	r2, [pc, #732]	; (800a540 <_dtoa_r+0x618>)
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a270:	9b00      	ldr	r3, [sp, #0]
 800a272:	05d8      	lsls	r0, r3, #23
 800a274:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a278:	d516      	bpl.n	800a2a8 <_dtoa_r+0x380>
 800a27a:	4bb2      	ldr	r3, [pc, #712]	; (800a544 <_dtoa_r+0x61c>)
 800a27c:	ec51 0b19 	vmov	r0, r1, d9
 800a280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a284:	f7f6 faba 	bl	80007fc <__aeabi_ddiv>
 800a288:	f007 070f 	and.w	r7, r7, #15
 800a28c:	4682      	mov	sl, r0
 800a28e:	468b      	mov	fp, r1
 800a290:	2503      	movs	r5, #3
 800a292:	4eac      	ldr	r6, [pc, #688]	; (800a544 <_dtoa_r+0x61c>)
 800a294:	b957      	cbnz	r7, 800a2ac <_dtoa_r+0x384>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	4650      	mov	r0, sl
 800a29c:	4659      	mov	r1, fp
 800a29e:	f7f6 faad 	bl	80007fc <__aeabi_ddiv>
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	468b      	mov	fp, r1
 800a2a6:	e028      	b.n	800a2fa <_dtoa_r+0x3d2>
 800a2a8:	2502      	movs	r5, #2
 800a2aa:	e7f2      	b.n	800a292 <_dtoa_r+0x36a>
 800a2ac:	07f9      	lsls	r1, r7, #31
 800a2ae:	d508      	bpl.n	800a2c2 <_dtoa_r+0x39a>
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2b8:	f7f6 f976 	bl	80005a8 <__aeabi_dmul>
 800a2bc:	3501      	adds	r5, #1
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	107f      	asrs	r7, r7, #1
 800a2c4:	3608      	adds	r6, #8
 800a2c6:	e7e5      	b.n	800a294 <_dtoa_r+0x36c>
 800a2c8:	f000 809b 	beq.w	800a402 <_dtoa_r+0x4da>
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	4f9d      	ldr	r7, [pc, #628]	; (800a544 <_dtoa_r+0x61c>)
 800a2d0:	425e      	negs	r6, r3
 800a2d2:	4b9b      	ldr	r3, [pc, #620]	; (800a540 <_dtoa_r+0x618>)
 800a2d4:	f006 020f 	and.w	r2, r6, #15
 800a2d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	ec51 0b19 	vmov	r0, r1, d9
 800a2e4:	f7f6 f960 	bl	80005a8 <__aeabi_dmul>
 800a2e8:	1136      	asrs	r6, r6, #4
 800a2ea:	4682      	mov	sl, r0
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2502      	movs	r5, #2
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	d17a      	bne.n	800a3ec <_dtoa_r+0x4c4>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1d3      	bne.n	800a2a2 <_dtoa_r+0x37a>
 800a2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 8082 	beq.w	800a406 <_dtoa_r+0x4de>
 800a302:	4b91      	ldr	r3, [pc, #580]	; (800a548 <_dtoa_r+0x620>)
 800a304:	2200      	movs	r2, #0
 800a306:	4650      	mov	r0, sl
 800a308:	4659      	mov	r1, fp
 800a30a:	f7f6 fbbf 	bl	8000a8c <__aeabi_dcmplt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d079      	beq.n	800a406 <_dtoa_r+0x4de>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d076      	beq.n	800a406 <_dtoa_r+0x4de>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dd36      	ble.n	800a38c <_dtoa_r+0x464>
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	4650      	mov	r0, sl
 800a322:	4659      	mov	r1, fp
 800a324:	1e5f      	subs	r7, r3, #1
 800a326:	2200      	movs	r2, #0
 800a328:	4b88      	ldr	r3, [pc, #544]	; (800a54c <_dtoa_r+0x624>)
 800a32a:	f7f6 f93d 	bl	80005a8 <__aeabi_dmul>
 800a32e:	9e02      	ldr	r6, [sp, #8]
 800a330:	4682      	mov	sl, r0
 800a332:	468b      	mov	fp, r1
 800a334:	3501      	adds	r5, #1
 800a336:	4628      	mov	r0, r5
 800a338:	f7f6 f8cc 	bl	80004d4 <__aeabi_i2d>
 800a33c:	4652      	mov	r2, sl
 800a33e:	465b      	mov	r3, fp
 800a340:	f7f6 f932 	bl	80005a8 <__aeabi_dmul>
 800a344:	4b82      	ldr	r3, [pc, #520]	; (800a550 <_dtoa_r+0x628>)
 800a346:	2200      	movs	r2, #0
 800a348:	f7f5 ff78 	bl	800023c <__adddf3>
 800a34c:	46d0      	mov	r8, sl
 800a34e:	46d9      	mov	r9, fp
 800a350:	4682      	mov	sl, r0
 800a352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a356:	2e00      	cmp	r6, #0
 800a358:	d158      	bne.n	800a40c <_dtoa_r+0x4e4>
 800a35a:	4b7e      	ldr	r3, [pc, #504]	; (800a554 <_dtoa_r+0x62c>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	4640      	mov	r0, r8
 800a360:	4649      	mov	r1, r9
 800a362:	f7f5 ff69 	bl	8000238 <__aeabi_dsub>
 800a366:	4652      	mov	r2, sl
 800a368:	465b      	mov	r3, fp
 800a36a:	4680      	mov	r8, r0
 800a36c:	4689      	mov	r9, r1
 800a36e:	f7f6 fbab 	bl	8000ac8 <__aeabi_dcmpgt>
 800a372:	2800      	cmp	r0, #0
 800a374:	f040 8295 	bne.w	800a8a2 <_dtoa_r+0x97a>
 800a378:	4652      	mov	r2, sl
 800a37a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	f7f6 fb83 	bl	8000a8c <__aeabi_dcmplt>
 800a386:	2800      	cmp	r0, #0
 800a388:	f040 8289 	bne.w	800a89e <_dtoa_r+0x976>
 800a38c:	ec5b ab19 	vmov	sl, fp, d9
 800a390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a392:	2b00      	cmp	r3, #0
 800a394:	f2c0 8148 	blt.w	800a628 <_dtoa_r+0x700>
 800a398:	9a00      	ldr	r2, [sp, #0]
 800a39a:	2a0e      	cmp	r2, #14
 800a39c:	f300 8144 	bgt.w	800a628 <_dtoa_r+0x700>
 800a3a0:	4b67      	ldr	r3, [pc, #412]	; (800a540 <_dtoa_r+0x618>)
 800a3a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f280 80d5 	bge.w	800a55c <_dtoa_r+0x634>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f300 80d1 	bgt.w	800a55c <_dtoa_r+0x634>
 800a3ba:	f040 826f 	bne.w	800a89c <_dtoa_r+0x974>
 800a3be:	4b65      	ldr	r3, [pc, #404]	; (800a554 <_dtoa_r+0x62c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f6 f8ef 	bl	80005a8 <__aeabi_dmul>
 800a3ca:	4652      	mov	r2, sl
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	f7f6 fb71 	bl	8000ab4 <__aeabi_dcmpge>
 800a3d2:	9e03      	ldr	r6, [sp, #12]
 800a3d4:	4637      	mov	r7, r6
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8245 	bne.w	800a866 <_dtoa_r+0x93e>
 800a3dc:	9d01      	ldr	r5, [sp, #4]
 800a3de:	2331      	movs	r3, #49	; 0x31
 800a3e0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	e240      	b.n	800a86e <_dtoa_r+0x946>
 800a3ec:	07f2      	lsls	r2, r6, #31
 800a3ee:	d505      	bpl.n	800a3fc <_dtoa_r+0x4d4>
 800a3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3f4:	f7f6 f8d8 	bl	80005a8 <__aeabi_dmul>
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	1076      	asrs	r6, r6, #1
 800a3fe:	3708      	adds	r7, #8
 800a400:	e777      	b.n	800a2f2 <_dtoa_r+0x3ca>
 800a402:	2502      	movs	r5, #2
 800a404:	e779      	b.n	800a2fa <_dtoa_r+0x3d2>
 800a406:	9f00      	ldr	r7, [sp, #0]
 800a408:	9e03      	ldr	r6, [sp, #12]
 800a40a:	e794      	b.n	800a336 <_dtoa_r+0x40e>
 800a40c:	9901      	ldr	r1, [sp, #4]
 800a40e:	4b4c      	ldr	r3, [pc, #304]	; (800a540 <_dtoa_r+0x618>)
 800a410:	4431      	add	r1, r6
 800a412:	910d      	str	r1, [sp, #52]	; 0x34
 800a414:	9908      	ldr	r1, [sp, #32]
 800a416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a41a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a41e:	2900      	cmp	r1, #0
 800a420:	d043      	beq.n	800a4aa <_dtoa_r+0x582>
 800a422:	494d      	ldr	r1, [pc, #308]	; (800a558 <_dtoa_r+0x630>)
 800a424:	2000      	movs	r0, #0
 800a426:	f7f6 f9e9 	bl	80007fc <__aeabi_ddiv>
 800a42a:	4652      	mov	r2, sl
 800a42c:	465b      	mov	r3, fp
 800a42e:	f7f5 ff03 	bl	8000238 <__aeabi_dsub>
 800a432:	9d01      	ldr	r5, [sp, #4]
 800a434:	4682      	mov	sl, r0
 800a436:	468b      	mov	fp, r1
 800a438:	4649      	mov	r1, r9
 800a43a:	4640      	mov	r0, r8
 800a43c:	f7f6 fb64 	bl	8000b08 <__aeabi_d2iz>
 800a440:	4606      	mov	r6, r0
 800a442:	f7f6 f847 	bl	80004d4 <__aeabi_i2d>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f5 fef3 	bl	8000238 <__aeabi_dsub>
 800a452:	3630      	adds	r6, #48	; 0x30
 800a454:	f805 6b01 	strb.w	r6, [r5], #1
 800a458:	4652      	mov	r2, sl
 800a45a:	465b      	mov	r3, fp
 800a45c:	4680      	mov	r8, r0
 800a45e:	4689      	mov	r9, r1
 800a460:	f7f6 fb14 	bl	8000a8c <__aeabi_dcmplt>
 800a464:	2800      	cmp	r0, #0
 800a466:	d163      	bne.n	800a530 <_dtoa_r+0x608>
 800a468:	4642      	mov	r2, r8
 800a46a:	464b      	mov	r3, r9
 800a46c:	4936      	ldr	r1, [pc, #216]	; (800a548 <_dtoa_r+0x620>)
 800a46e:	2000      	movs	r0, #0
 800a470:	f7f5 fee2 	bl	8000238 <__aeabi_dsub>
 800a474:	4652      	mov	r2, sl
 800a476:	465b      	mov	r3, fp
 800a478:	f7f6 fb08 	bl	8000a8c <__aeabi_dcmplt>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f040 80b5 	bne.w	800a5ec <_dtoa_r+0x6c4>
 800a482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a484:	429d      	cmp	r5, r3
 800a486:	d081      	beq.n	800a38c <_dtoa_r+0x464>
 800a488:	4b30      	ldr	r3, [pc, #192]	; (800a54c <_dtoa_r+0x624>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	4650      	mov	r0, sl
 800a48e:	4659      	mov	r1, fp
 800a490:	f7f6 f88a 	bl	80005a8 <__aeabi_dmul>
 800a494:	4b2d      	ldr	r3, [pc, #180]	; (800a54c <_dtoa_r+0x624>)
 800a496:	4682      	mov	sl, r0
 800a498:	468b      	mov	fp, r1
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f7f6 f882 	bl	80005a8 <__aeabi_dmul>
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	e7c6      	b.n	800a438 <_dtoa_r+0x510>
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	f7f6 f87b 	bl	80005a8 <__aeabi_dmul>
 800a4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b4:	9d01      	ldr	r5, [sp, #4]
 800a4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b8:	4682      	mov	sl, r0
 800a4ba:	468b      	mov	fp, r1
 800a4bc:	4649      	mov	r1, r9
 800a4be:	4640      	mov	r0, r8
 800a4c0:	f7f6 fb22 	bl	8000b08 <__aeabi_d2iz>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	f7f6 f805 	bl	80004d4 <__aeabi_i2d>
 800a4ca:	3630      	adds	r6, #48	; 0x30
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f5 feb0 	bl	8000238 <__aeabi_dsub>
 800a4d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4689      	mov	r9, r1
 800a4e4:	f04f 0200 	mov.w	r2, #0
 800a4e8:	d124      	bne.n	800a534 <_dtoa_r+0x60c>
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <_dtoa_r+0x630>)
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 fea4 	bl	800023c <__adddf3>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	f7f6 fae4 	bl	8000ac8 <__aeabi_dcmpgt>
 800a500:	2800      	cmp	r0, #0
 800a502:	d173      	bne.n	800a5ec <_dtoa_r+0x6c4>
 800a504:	4652      	mov	r2, sl
 800a506:	465b      	mov	r3, fp
 800a508:	4913      	ldr	r1, [pc, #76]	; (800a558 <_dtoa_r+0x630>)
 800a50a:	2000      	movs	r0, #0
 800a50c:	f7f5 fe94 	bl	8000238 <__aeabi_dsub>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4640      	mov	r0, r8
 800a516:	4649      	mov	r1, r9
 800a518:	f7f6 fab8 	bl	8000a8c <__aeabi_dcmplt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f43f af35 	beq.w	800a38c <_dtoa_r+0x464>
 800a522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a524:	1e6b      	subs	r3, r5, #1
 800a526:	930f      	str	r3, [sp, #60]	; 0x3c
 800a528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a52c:	2b30      	cmp	r3, #48	; 0x30
 800a52e:	d0f8      	beq.n	800a522 <_dtoa_r+0x5fa>
 800a530:	9700      	str	r7, [sp, #0]
 800a532:	e049      	b.n	800a5c8 <_dtoa_r+0x6a0>
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <_dtoa_r+0x624>)
 800a536:	f7f6 f837 	bl	80005a8 <__aeabi_dmul>
 800a53a:	4680      	mov	r8, r0
 800a53c:	4689      	mov	r9, r1
 800a53e:	e7bd      	b.n	800a4bc <_dtoa_r+0x594>
 800a540:	0800d368 	.word	0x0800d368
 800a544:	0800d340 	.word	0x0800d340
 800a548:	3ff00000 	.word	0x3ff00000
 800a54c:	40240000 	.word	0x40240000
 800a550:	401c0000 	.word	0x401c0000
 800a554:	40140000 	.word	0x40140000
 800a558:	3fe00000 	.word	0x3fe00000
 800a55c:	9d01      	ldr	r5, [sp, #4]
 800a55e:	4656      	mov	r6, sl
 800a560:	465f      	mov	r7, fp
 800a562:	4642      	mov	r2, r8
 800a564:	464b      	mov	r3, r9
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 f947 	bl	80007fc <__aeabi_ddiv>
 800a56e:	f7f6 facb 	bl	8000b08 <__aeabi_d2iz>
 800a572:	4682      	mov	sl, r0
 800a574:	f7f5 ffae 	bl	80004d4 <__aeabi_i2d>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f6 f814 	bl	80005a8 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a58c:	f7f5 fe54 	bl	8000238 <__aeabi_dsub>
 800a590:	f805 6b01 	strb.w	r6, [r5], #1
 800a594:	9e01      	ldr	r6, [sp, #4]
 800a596:	9f03      	ldr	r7, [sp, #12]
 800a598:	1bae      	subs	r6, r5, r6
 800a59a:	42b7      	cmp	r7, r6
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	d135      	bne.n	800a60e <_dtoa_r+0x6e6>
 800a5a2:	f7f5 fe4b 	bl	800023c <__adddf3>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	f7f6 fa8b 	bl	8000ac8 <__aeabi_dcmpgt>
 800a5b2:	b9d0      	cbnz	r0, 800a5ea <_dtoa_r+0x6c2>
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fa5c 	bl	8000a78 <__aeabi_dcmpeq>
 800a5c0:	b110      	cbz	r0, 800a5c8 <_dtoa_r+0x6a0>
 800a5c2:	f01a 0f01 	tst.w	sl, #1
 800a5c6:	d110      	bne.n	800a5ea <_dtoa_r+0x6c2>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	ee18 1a10 	vmov	r1, s16
 800a5ce:	f001 f889 	bl	800b6e4 <_Bfree>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9800      	ldr	r0, [sp, #0]
 800a5d6:	702b      	strb	r3, [r5, #0]
 800a5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5da:	3001      	adds	r0, #1
 800a5dc:	6018      	str	r0, [r3, #0]
 800a5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f43f acf1 	beq.w	8009fc8 <_dtoa_r+0xa0>
 800a5e6:	601d      	str	r5, [r3, #0]
 800a5e8:	e4ee      	b.n	8009fc8 <_dtoa_r+0xa0>
 800a5ea:	9f00      	ldr	r7, [sp, #0]
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f4:	2a39      	cmp	r2, #57	; 0x39
 800a5f6:	d106      	bne.n	800a606 <_dtoa_r+0x6de>
 800a5f8:	9a01      	ldr	r2, [sp, #4]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d1f7      	bne.n	800a5ee <_dtoa_r+0x6c6>
 800a5fe:	9901      	ldr	r1, [sp, #4]
 800a600:	2230      	movs	r2, #48	; 0x30
 800a602:	3701      	adds	r7, #1
 800a604:	700a      	strb	r2, [r1, #0]
 800a606:	781a      	ldrb	r2, [r3, #0]
 800a608:	3201      	adds	r2, #1
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	e790      	b.n	800a530 <_dtoa_r+0x608>
 800a60e:	4ba6      	ldr	r3, [pc, #664]	; (800a8a8 <_dtoa_r+0x980>)
 800a610:	2200      	movs	r2, #0
 800a612:	f7f5 ffc9 	bl	80005a8 <__aeabi_dmul>
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	f7f6 fa2b 	bl	8000a78 <__aeabi_dcmpeq>
 800a622:	2800      	cmp	r0, #0
 800a624:	d09d      	beq.n	800a562 <_dtoa_r+0x63a>
 800a626:	e7cf      	b.n	800a5c8 <_dtoa_r+0x6a0>
 800a628:	9a08      	ldr	r2, [sp, #32]
 800a62a:	2a00      	cmp	r2, #0
 800a62c:	f000 80d7 	beq.w	800a7de <_dtoa_r+0x8b6>
 800a630:	9a06      	ldr	r2, [sp, #24]
 800a632:	2a01      	cmp	r2, #1
 800a634:	f300 80ba 	bgt.w	800a7ac <_dtoa_r+0x884>
 800a638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	f000 80b2 	beq.w	800a7a4 <_dtoa_r+0x87c>
 800a640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a644:	9e07      	ldr	r6, [sp, #28]
 800a646:	9d04      	ldr	r5, [sp, #16]
 800a648:	9a04      	ldr	r2, [sp, #16]
 800a64a:	441a      	add	r2, r3
 800a64c:	9204      	str	r2, [sp, #16]
 800a64e:	9a05      	ldr	r2, [sp, #20]
 800a650:	2101      	movs	r1, #1
 800a652:	441a      	add	r2, r3
 800a654:	4620      	mov	r0, r4
 800a656:	9205      	str	r2, [sp, #20]
 800a658:	f001 f946 	bl	800b8e8 <__i2b>
 800a65c:	4607      	mov	r7, r0
 800a65e:	2d00      	cmp	r5, #0
 800a660:	dd0c      	ble.n	800a67c <_dtoa_r+0x754>
 800a662:	9b05      	ldr	r3, [sp, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd09      	ble.n	800a67c <_dtoa_r+0x754>
 800a668:	42ab      	cmp	r3, r5
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	bfa8      	it	ge
 800a66e:	462b      	movge	r3, r5
 800a670:	1ad2      	subs	r2, r2, r3
 800a672:	9204      	str	r2, [sp, #16]
 800a674:	9a05      	ldr	r2, [sp, #20]
 800a676:	1aed      	subs	r5, r5, r3
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	b31b      	cbz	r3, 800a6c8 <_dtoa_r+0x7a0>
 800a680:	9b08      	ldr	r3, [sp, #32]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 80af 	beq.w	800a7e6 <_dtoa_r+0x8be>
 800a688:	2e00      	cmp	r6, #0
 800a68a:	dd13      	ble.n	800a6b4 <_dtoa_r+0x78c>
 800a68c:	4639      	mov	r1, r7
 800a68e:	4632      	mov	r2, r6
 800a690:	4620      	mov	r0, r4
 800a692:	f001 f9e9 	bl	800ba68 <__pow5mult>
 800a696:	ee18 2a10 	vmov	r2, s16
 800a69a:	4601      	mov	r1, r0
 800a69c:	4607      	mov	r7, r0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f001 f938 	bl	800b914 <__multiply>
 800a6a4:	ee18 1a10 	vmov	r1, s16
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f001 f81a 	bl	800b6e4 <_Bfree>
 800a6b0:	ee08 8a10 	vmov	s16, r8
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	1b9a      	subs	r2, r3, r6
 800a6b8:	d006      	beq.n	800a6c8 <_dtoa_r+0x7a0>
 800a6ba:	ee18 1a10 	vmov	r1, s16
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f001 f9d2 	bl	800ba68 <__pow5mult>
 800a6c4:	ee08 0a10 	vmov	s16, r0
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f001 f90c 	bl	800b8e8 <__i2b>
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	f340 8088 	ble.w	800a7ea <_dtoa_r+0x8c2>
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4601      	mov	r1, r0
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f001 f9c2 	bl	800ba68 <__pow5mult>
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	f340 8081 	ble.w	800a7f0 <_dtoa_r+0x8c8>
 800a6ee:	f04f 0800 	mov.w	r8, #0
 800a6f2:	6933      	ldr	r3, [r6, #16]
 800a6f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6f8:	6918      	ldr	r0, [r3, #16]
 800a6fa:	f001 f8a5 	bl	800b848 <__hi0bits>
 800a6fe:	f1c0 0020 	rsb	r0, r0, #32
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	4418      	add	r0, r3
 800a706:	f010 001f 	ands.w	r0, r0, #31
 800a70a:	f000 8092 	beq.w	800a832 <_dtoa_r+0x90a>
 800a70e:	f1c0 0320 	rsb	r3, r0, #32
 800a712:	2b04      	cmp	r3, #4
 800a714:	f340 808a 	ble.w	800a82c <_dtoa_r+0x904>
 800a718:	f1c0 001c 	rsb	r0, r0, #28
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	4403      	add	r3, r0
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	9b05      	ldr	r3, [sp, #20]
 800a724:	4403      	add	r3, r0
 800a726:	4405      	add	r5, r0
 800a728:	9305      	str	r3, [sp, #20]
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dd07      	ble.n	800a740 <_dtoa_r+0x818>
 800a730:	ee18 1a10 	vmov	r1, s16
 800a734:	461a      	mov	r2, r3
 800a736:	4620      	mov	r0, r4
 800a738:	f001 f9f0 	bl	800bb1c <__lshift>
 800a73c:	ee08 0a10 	vmov	s16, r0
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	dd05      	ble.n	800a752 <_dtoa_r+0x82a>
 800a746:	4631      	mov	r1, r6
 800a748:	461a      	mov	r2, r3
 800a74a:	4620      	mov	r0, r4
 800a74c:	f001 f9e6 	bl	800bb1c <__lshift>
 800a750:	4606      	mov	r6, r0
 800a752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d06e      	beq.n	800a836 <_dtoa_r+0x90e>
 800a758:	ee18 0a10 	vmov	r0, s16
 800a75c:	4631      	mov	r1, r6
 800a75e:	f001 fa4d 	bl	800bbfc <__mcmp>
 800a762:	2800      	cmp	r0, #0
 800a764:	da67      	bge.n	800a836 <_dtoa_r+0x90e>
 800a766:	9b00      	ldr	r3, [sp, #0]
 800a768:	3b01      	subs	r3, #1
 800a76a:	ee18 1a10 	vmov	r1, s16
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	220a      	movs	r2, #10
 800a772:	2300      	movs	r3, #0
 800a774:	4620      	mov	r0, r4
 800a776:	f000 ffd7 	bl	800b728 <__multadd>
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	ee08 0a10 	vmov	s16, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 81b1 	beq.w	800aae8 <_dtoa_r+0xbc0>
 800a786:	2300      	movs	r3, #0
 800a788:	4639      	mov	r1, r7
 800a78a:	220a      	movs	r2, #10
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 ffcb 	bl	800b728 <__multadd>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	4607      	mov	r7, r0
 800a798:	f300 808e 	bgt.w	800a8b8 <_dtoa_r+0x990>
 800a79c:	9b06      	ldr	r3, [sp, #24]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	dc51      	bgt.n	800a846 <_dtoa_r+0x91e>
 800a7a2:	e089      	b.n	800a8b8 <_dtoa_r+0x990>
 800a7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7aa:	e74b      	b.n	800a644 <_dtoa_r+0x71c>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	1e5e      	subs	r6, r3, #1
 800a7b0:	9b07      	ldr	r3, [sp, #28]
 800a7b2:	42b3      	cmp	r3, r6
 800a7b4:	bfbf      	itttt	lt
 800a7b6:	9b07      	ldrlt	r3, [sp, #28]
 800a7b8:	9607      	strlt	r6, [sp, #28]
 800a7ba:	1af2      	sublt	r2, r6, r3
 800a7bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7be:	bfb6      	itet	lt
 800a7c0:	189b      	addlt	r3, r3, r2
 800a7c2:	1b9e      	subge	r6, r3, r6
 800a7c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	bfb8      	it	lt
 800a7ca:	2600      	movlt	r6, #0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfb7      	itett	lt
 800a7d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a7d8:	1a9d      	sublt	r5, r3, r2
 800a7da:	2300      	movlt	r3, #0
 800a7dc:	e734      	b.n	800a648 <_dtoa_r+0x720>
 800a7de:	9e07      	ldr	r6, [sp, #28]
 800a7e0:	9d04      	ldr	r5, [sp, #16]
 800a7e2:	9f08      	ldr	r7, [sp, #32]
 800a7e4:	e73b      	b.n	800a65e <_dtoa_r+0x736>
 800a7e6:	9a07      	ldr	r2, [sp, #28]
 800a7e8:	e767      	b.n	800a6ba <_dtoa_r+0x792>
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	dc18      	bgt.n	800a822 <_dtoa_r+0x8fa>
 800a7f0:	f1ba 0f00 	cmp.w	sl, #0
 800a7f4:	d115      	bne.n	800a822 <_dtoa_r+0x8fa>
 800a7f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7fa:	b993      	cbnz	r3, 800a822 <_dtoa_r+0x8fa>
 800a7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a800:	0d1b      	lsrs	r3, r3, #20
 800a802:	051b      	lsls	r3, r3, #20
 800a804:	b183      	cbz	r3, 800a828 <_dtoa_r+0x900>
 800a806:	9b04      	ldr	r3, [sp, #16]
 800a808:	3301      	adds	r3, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9b05      	ldr	r3, [sp, #20]
 800a80e:	3301      	adds	r3, #1
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	f04f 0801 	mov.w	r8, #1
 800a816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f47f af6a 	bne.w	800a6f2 <_dtoa_r+0x7ca>
 800a81e:	2001      	movs	r0, #1
 800a820:	e76f      	b.n	800a702 <_dtoa_r+0x7da>
 800a822:	f04f 0800 	mov.w	r8, #0
 800a826:	e7f6      	b.n	800a816 <_dtoa_r+0x8ee>
 800a828:	4698      	mov	r8, r3
 800a82a:	e7f4      	b.n	800a816 <_dtoa_r+0x8ee>
 800a82c:	f43f af7d 	beq.w	800a72a <_dtoa_r+0x802>
 800a830:	4618      	mov	r0, r3
 800a832:	301c      	adds	r0, #28
 800a834:	e772      	b.n	800a71c <_dtoa_r+0x7f4>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	dc37      	bgt.n	800a8ac <_dtoa_r+0x984>
 800a83c:	9b06      	ldr	r3, [sp, #24]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	dd34      	ble.n	800a8ac <_dtoa_r+0x984>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	9b02      	ldr	r3, [sp, #8]
 800a848:	b96b      	cbnz	r3, 800a866 <_dtoa_r+0x93e>
 800a84a:	4631      	mov	r1, r6
 800a84c:	2205      	movs	r2, #5
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 ff6a 	bl	800b728 <__multadd>
 800a854:	4601      	mov	r1, r0
 800a856:	4606      	mov	r6, r0
 800a858:	ee18 0a10 	vmov	r0, s16
 800a85c:	f001 f9ce 	bl	800bbfc <__mcmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	f73f adbb 	bgt.w	800a3dc <_dtoa_r+0x4b4>
 800a866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a868:	9d01      	ldr	r5, [sp, #4]
 800a86a:	43db      	mvns	r3, r3
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	f04f 0800 	mov.w	r8, #0
 800a872:	4631      	mov	r1, r6
 800a874:	4620      	mov	r0, r4
 800a876:	f000 ff35 	bl	800b6e4 <_Bfree>
 800a87a:	2f00      	cmp	r7, #0
 800a87c:	f43f aea4 	beq.w	800a5c8 <_dtoa_r+0x6a0>
 800a880:	f1b8 0f00 	cmp.w	r8, #0
 800a884:	d005      	beq.n	800a892 <_dtoa_r+0x96a>
 800a886:	45b8      	cmp	r8, r7
 800a888:	d003      	beq.n	800a892 <_dtoa_r+0x96a>
 800a88a:	4641      	mov	r1, r8
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 ff29 	bl	800b6e4 <_Bfree>
 800a892:	4639      	mov	r1, r7
 800a894:	4620      	mov	r0, r4
 800a896:	f000 ff25 	bl	800b6e4 <_Bfree>
 800a89a:	e695      	b.n	800a5c8 <_dtoa_r+0x6a0>
 800a89c:	2600      	movs	r6, #0
 800a89e:	4637      	mov	r7, r6
 800a8a0:	e7e1      	b.n	800a866 <_dtoa_r+0x93e>
 800a8a2:	9700      	str	r7, [sp, #0]
 800a8a4:	4637      	mov	r7, r6
 800a8a6:	e599      	b.n	800a3dc <_dtoa_r+0x4b4>
 800a8a8:	40240000 	.word	0x40240000
 800a8ac:	9b08      	ldr	r3, [sp, #32]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 80ca 	beq.w	800aa48 <_dtoa_r+0xb20>
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	dd05      	ble.n	800a8c8 <_dtoa_r+0x9a0>
 800a8bc:	4639      	mov	r1, r7
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f001 f92b 	bl	800bb1c <__lshift>
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	f1b8 0f00 	cmp.w	r8, #0
 800a8cc:	d05b      	beq.n	800a986 <_dtoa_r+0xa5e>
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fec7 	bl	800b664 <_Balloc>
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <_dtoa_r+0x9be>
 800a8da:	4b87      	ldr	r3, [pc, #540]	; (800aaf8 <_dtoa_r+0xbd0>)
 800a8dc:	4602      	mov	r2, r0
 800a8de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8e2:	f7ff bb3b 	b.w	8009f5c <_dtoa_r+0x34>
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	3202      	adds	r2, #2
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	f107 010c 	add.w	r1, r7, #12
 800a8f0:	300c      	adds	r0, #12
 800a8f2:	f7fd fa89 	bl	8007e08 <memcpy>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f001 f90e 	bl	800bb1c <__lshift>
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	f103 0901 	add.w	r9, r3, #1
 800a906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a90a:	4413      	add	r3, r2
 800a90c:	9305      	str	r3, [sp, #20]
 800a90e:	f00a 0301 	and.w	r3, sl, #1
 800a912:	46b8      	mov	r8, r7
 800a914:	9304      	str	r3, [sp, #16]
 800a916:	4607      	mov	r7, r0
 800a918:	4631      	mov	r1, r6
 800a91a:	ee18 0a10 	vmov	r0, s16
 800a91e:	f7ff fa77 	bl	8009e10 <quorem>
 800a922:	4641      	mov	r1, r8
 800a924:	9002      	str	r0, [sp, #8]
 800a926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a92a:	ee18 0a10 	vmov	r0, s16
 800a92e:	f001 f965 	bl	800bbfc <__mcmp>
 800a932:	463a      	mov	r2, r7
 800a934:	9003      	str	r0, [sp, #12]
 800a936:	4631      	mov	r1, r6
 800a938:	4620      	mov	r0, r4
 800a93a:	f001 f97b 	bl	800bc34 <__mdiff>
 800a93e:	68c2      	ldr	r2, [r0, #12]
 800a940:	f109 3bff 	add.w	fp, r9, #4294967295
 800a944:	4605      	mov	r5, r0
 800a946:	bb02      	cbnz	r2, 800a98a <_dtoa_r+0xa62>
 800a948:	4601      	mov	r1, r0
 800a94a:	ee18 0a10 	vmov	r0, s16
 800a94e:	f001 f955 	bl	800bbfc <__mcmp>
 800a952:	4602      	mov	r2, r0
 800a954:	4629      	mov	r1, r5
 800a956:	4620      	mov	r0, r4
 800a958:	9207      	str	r2, [sp, #28]
 800a95a:	f000 fec3 	bl	800b6e4 <_Bfree>
 800a95e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a962:	ea43 0102 	orr.w	r1, r3, r2
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	430b      	orrs	r3, r1
 800a96a:	464d      	mov	r5, r9
 800a96c:	d10f      	bne.n	800a98e <_dtoa_r+0xa66>
 800a96e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a972:	d02a      	beq.n	800a9ca <_dtoa_r+0xaa2>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	dd02      	ble.n	800a980 <_dtoa_r+0xa58>
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a980:	f88b a000 	strb.w	sl, [fp]
 800a984:	e775      	b.n	800a872 <_dtoa_r+0x94a>
 800a986:	4638      	mov	r0, r7
 800a988:	e7ba      	b.n	800a900 <_dtoa_r+0x9d8>
 800a98a:	2201      	movs	r2, #1
 800a98c:	e7e2      	b.n	800a954 <_dtoa_r+0xa2c>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	db04      	blt.n	800a99e <_dtoa_r+0xa76>
 800a994:	9906      	ldr	r1, [sp, #24]
 800a996:	430b      	orrs	r3, r1
 800a998:	9904      	ldr	r1, [sp, #16]
 800a99a:	430b      	orrs	r3, r1
 800a99c:	d122      	bne.n	800a9e4 <_dtoa_r+0xabc>
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	ddee      	ble.n	800a980 <_dtoa_r+0xa58>
 800a9a2:	ee18 1a10 	vmov	r1, s16
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f001 f8b7 	bl	800bb1c <__lshift>
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	ee08 0a10 	vmov	s16, r0
 800a9b4:	f001 f922 	bl	800bbfc <__mcmp>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	dc03      	bgt.n	800a9c4 <_dtoa_r+0xa9c>
 800a9bc:	d1e0      	bne.n	800a980 <_dtoa_r+0xa58>
 800a9be:	f01a 0f01 	tst.w	sl, #1
 800a9c2:	d0dd      	beq.n	800a980 <_dtoa_r+0xa58>
 800a9c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9c8:	d1d7      	bne.n	800a97a <_dtoa_r+0xa52>
 800a9ca:	2339      	movs	r3, #57	; 0x39
 800a9cc:	f88b 3000 	strb.w	r3, [fp]
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	461d      	mov	r5, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9da:	2a39      	cmp	r2, #57	; 0x39
 800a9dc:	d071      	beq.n	800aac2 <_dtoa_r+0xb9a>
 800a9de:	3201      	adds	r2, #1
 800a9e0:	701a      	strb	r2, [r3, #0]
 800a9e2:	e746      	b.n	800a872 <_dtoa_r+0x94a>
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	dd07      	ble.n	800a9f8 <_dtoa_r+0xad0>
 800a9e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9ec:	d0ed      	beq.n	800a9ca <_dtoa_r+0xaa2>
 800a9ee:	f10a 0301 	add.w	r3, sl, #1
 800a9f2:	f88b 3000 	strb.w	r3, [fp]
 800a9f6:	e73c      	b.n	800a872 <_dtoa_r+0x94a>
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9fe:	4599      	cmp	r9, r3
 800aa00:	d047      	beq.n	800aa92 <_dtoa_r+0xb6a>
 800aa02:	ee18 1a10 	vmov	r1, s16
 800aa06:	2300      	movs	r3, #0
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fe8c 	bl	800b728 <__multadd>
 800aa10:	45b8      	cmp	r8, r7
 800aa12:	ee08 0a10 	vmov	s16, r0
 800aa16:	f04f 0300 	mov.w	r3, #0
 800aa1a:	f04f 020a 	mov.w	r2, #10
 800aa1e:	4641      	mov	r1, r8
 800aa20:	4620      	mov	r0, r4
 800aa22:	d106      	bne.n	800aa32 <_dtoa_r+0xb0a>
 800aa24:	f000 fe80 	bl	800b728 <__multadd>
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	f109 0901 	add.w	r9, r9, #1
 800aa30:	e772      	b.n	800a918 <_dtoa_r+0x9f0>
 800aa32:	f000 fe79 	bl	800b728 <__multadd>
 800aa36:	4639      	mov	r1, r7
 800aa38:	4680      	mov	r8, r0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	220a      	movs	r2, #10
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 fe72 	bl	800b728 <__multadd>
 800aa44:	4607      	mov	r7, r0
 800aa46:	e7f1      	b.n	800aa2c <_dtoa_r+0xb04>
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	9d01      	ldr	r5, [sp, #4]
 800aa4e:	ee18 0a10 	vmov	r0, s16
 800aa52:	4631      	mov	r1, r6
 800aa54:	f7ff f9dc 	bl	8009e10 <quorem>
 800aa58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa62:	1aea      	subs	r2, r5, r3
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	4293      	cmp	r3, r2
 800aa68:	dd09      	ble.n	800aa7e <_dtoa_r+0xb56>
 800aa6a:	ee18 1a10 	vmov	r1, s16
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 fe58 	bl	800b728 <__multadd>
 800aa78:	ee08 0a10 	vmov	s16, r0
 800aa7c:	e7e7      	b.n	800aa4e <_dtoa_r+0xb26>
 800aa7e:	9b02      	ldr	r3, [sp, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfc8      	it	gt
 800aa84:	461d      	movgt	r5, r3
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	bfd8      	it	le
 800aa8a:	2501      	movle	r5, #1
 800aa8c:	441d      	add	r5, r3
 800aa8e:	f04f 0800 	mov.w	r8, #0
 800aa92:	ee18 1a10 	vmov	r1, s16
 800aa96:	2201      	movs	r2, #1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 f83f 	bl	800bb1c <__lshift>
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	ee08 0a10 	vmov	s16, r0
 800aaa4:	f001 f8aa 	bl	800bbfc <__mcmp>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	dc91      	bgt.n	800a9d0 <_dtoa_r+0xaa8>
 800aaac:	d102      	bne.n	800aab4 <_dtoa_r+0xb8c>
 800aaae:	f01a 0f01 	tst.w	sl, #1
 800aab2:	d18d      	bne.n	800a9d0 <_dtoa_r+0xaa8>
 800aab4:	462b      	mov	r3, r5
 800aab6:	461d      	mov	r5, r3
 800aab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aabc:	2a30      	cmp	r2, #48	; 0x30
 800aabe:	d0fa      	beq.n	800aab6 <_dtoa_r+0xb8e>
 800aac0:	e6d7      	b.n	800a872 <_dtoa_r+0x94a>
 800aac2:	9a01      	ldr	r2, [sp, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d184      	bne.n	800a9d2 <_dtoa_r+0xaaa>
 800aac8:	9b00      	ldr	r3, [sp, #0]
 800aaca:	3301      	adds	r3, #1
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	2331      	movs	r3, #49	; 0x31
 800aad0:	7013      	strb	r3, [r2, #0]
 800aad2:	e6ce      	b.n	800a872 <_dtoa_r+0x94a>
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <_dtoa_r+0xbd4>)
 800aad6:	f7ff ba95 	b.w	800a004 <_dtoa_r+0xdc>
 800aada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f47f aa6e 	bne.w	8009fbe <_dtoa_r+0x96>
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <_dtoa_r+0xbd8>)
 800aae4:	f7ff ba8e 	b.w	800a004 <_dtoa_r+0xdc>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dcae      	bgt.n	800aa4c <_dtoa_r+0xb24>
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	f73f aea8 	bgt.w	800a846 <_dtoa_r+0x91e>
 800aaf6:	e7a9      	b.n	800aa4c <_dtoa_r+0xb24>
 800aaf8:	0800d1f0 	.word	0x0800d1f0
 800aafc:	0800cff4 	.word	0x0800cff4
 800ab00:	0800d171 	.word	0x0800d171

0800ab04 <__sflush_r>:
 800ab04:	898a      	ldrh	r2, [r1, #12]
 800ab06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	0710      	lsls	r0, r2, #28
 800ab0e:	460c      	mov	r4, r1
 800ab10:	d458      	bmi.n	800abc4 <__sflush_r+0xc0>
 800ab12:	684b      	ldr	r3, [r1, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dc05      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dc02      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	d0f9      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab30:	682f      	ldr	r7, [r5, #0]
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	d032      	beq.n	800ab9c <__sflush_r+0x98>
 800ab36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	075a      	lsls	r2, r3, #29
 800ab3c:	d505      	bpl.n	800ab4a <__sflush_r+0x46>
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	1ac0      	subs	r0, r0, r3
 800ab42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab44:	b10b      	cbz	r3, 800ab4a <__sflush_r+0x46>
 800ab46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab48:	1ac0      	subs	r0, r0, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab50:	6a21      	ldr	r1, [r4, #32]
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b0      	blx	r6
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	d106      	bne.n	800ab6a <__sflush_r+0x66>
 800ab5c:	6829      	ldr	r1, [r5, #0]
 800ab5e:	291d      	cmp	r1, #29
 800ab60:	d82c      	bhi.n	800abbc <__sflush_r+0xb8>
 800ab62:	4a2a      	ldr	r2, [pc, #168]	; (800ac0c <__sflush_r+0x108>)
 800ab64:	40ca      	lsrs	r2, r1
 800ab66:	07d6      	lsls	r6, r2, #31
 800ab68:	d528      	bpl.n	800abbc <__sflush_r+0xb8>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	6062      	str	r2, [r4, #4]
 800ab6e:	04d9      	lsls	r1, r3, #19
 800ab70:	6922      	ldr	r2, [r4, #16]
 800ab72:	6022      	str	r2, [r4, #0]
 800ab74:	d504      	bpl.n	800ab80 <__sflush_r+0x7c>
 800ab76:	1c42      	adds	r2, r0, #1
 800ab78:	d101      	bne.n	800ab7e <__sflush_r+0x7a>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	b903      	cbnz	r3, 800ab80 <__sflush_r+0x7c>
 800ab7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab82:	602f      	str	r7, [r5, #0]
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d0ca      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	d002      	beq.n	800ab96 <__sflush_r+0x92>
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7fd f94f 	bl	8007e34 <_free_r>
 800ab96:	2000      	movs	r0, #0
 800ab98:	6360      	str	r0, [r4, #52]	; 0x34
 800ab9a:	e7c1      	b.n	800ab20 <__sflush_r+0x1c>
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b0      	blx	r6
 800aba4:	1c41      	adds	r1, r0, #1
 800aba6:	d1c7      	bne.n	800ab38 <__sflush_r+0x34>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c4      	beq.n	800ab38 <__sflush_r+0x34>
 800abae:	2b1d      	cmp	r3, #29
 800abb0:	d001      	beq.n	800abb6 <__sflush_r+0xb2>
 800abb2:	2b16      	cmp	r3, #22
 800abb4:	d101      	bne.n	800abba <__sflush_r+0xb6>
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	e7b1      	b.n	800ab1e <__sflush_r+0x1a>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7ad      	b.n	800ab20 <__sflush_r+0x1c>
 800abc4:	690f      	ldr	r7, [r1, #16]
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	d0a9      	beq.n	800ab1e <__sflush_r+0x1a>
 800abca:	0793      	lsls	r3, r2, #30
 800abcc:	680e      	ldr	r6, [r1, #0]
 800abce:	bf08      	it	eq
 800abd0:	694b      	ldreq	r3, [r1, #20]
 800abd2:	600f      	str	r7, [r1, #0]
 800abd4:	bf18      	it	ne
 800abd6:	2300      	movne	r3, #0
 800abd8:	eba6 0807 	sub.w	r8, r6, r7
 800abdc:	608b      	str	r3, [r1, #8]
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	dd9c      	ble.n	800ab1e <__sflush_r+0x1a>
 800abe4:	6a21      	ldr	r1, [r4, #32]
 800abe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abe8:	4643      	mov	r3, r8
 800abea:	463a      	mov	r2, r7
 800abec:	4628      	mov	r0, r5
 800abee:	47b0      	blx	r6
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dc06      	bgt.n	800ac02 <__sflush_r+0xfe>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	e78e      	b.n	800ab20 <__sflush_r+0x1c>
 800ac02:	4407      	add	r7, r0
 800ac04:	eba8 0800 	sub.w	r8, r8, r0
 800ac08:	e7e9      	b.n	800abde <__sflush_r+0xda>
 800ac0a:	bf00      	nop
 800ac0c:	20400001 	.word	0x20400001

0800ac10 <_fflush_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	4605      	mov	r5, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b913      	cbnz	r3, 800ac20 <_fflush_r+0x10>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	b118      	cbz	r0, 800ac2a <_fflush_r+0x1a>
 800ac22:	6983      	ldr	r3, [r0, #24]
 800ac24:	b90b      	cbnz	r3, 800ac2a <_fflush_r+0x1a>
 800ac26:	f000 f887 	bl	800ad38 <__sinit>
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <_fflush_r+0x6c>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	d11b      	bne.n	800ac68 <_fflush_r+0x58>
 800ac30:	686c      	ldr	r4, [r5, #4]
 800ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0ef      	beq.n	800ac1a <_fflush_r+0xa>
 800ac3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac3c:	07d0      	lsls	r0, r2, #31
 800ac3e:	d404      	bmi.n	800ac4a <_fflush_r+0x3a>
 800ac40:	0599      	lsls	r1, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_fflush_r+0x3a>
 800ac44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac46:	f000 fc88 	bl	800b55a <__retarget_lock_acquire_recursive>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	f7ff ff59 	bl	800ab04 <__sflush_r>
 800ac52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac54:	07da      	lsls	r2, r3, #31
 800ac56:	4605      	mov	r5, r0
 800ac58:	d4e0      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	059b      	lsls	r3, r3, #22
 800ac5e:	d4dd      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac62:	f000 fc7b 	bl	800b55c <__retarget_lock_release_recursive>
 800ac66:	e7d9      	b.n	800ac1c <_fflush_r+0xc>
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <_fflush_r+0x70>)
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	d101      	bne.n	800ac72 <_fflush_r+0x62>
 800ac6e:	68ac      	ldr	r4, [r5, #8]
 800ac70:	e7df      	b.n	800ac32 <_fflush_r+0x22>
 800ac72:	4b04      	ldr	r3, [pc, #16]	; (800ac84 <_fflush_r+0x74>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	bf08      	it	eq
 800ac78:	68ec      	ldreq	r4, [r5, #12]
 800ac7a:	e7da      	b.n	800ac32 <_fflush_r+0x22>
 800ac7c:	0800d224 	.word	0x0800d224
 800ac80:	0800d244 	.word	0x0800d244
 800ac84:	0800d204 	.word	0x0800d204

0800ac88 <std>:
 800ac88:	2300      	movs	r3, #0
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac96:	6083      	str	r3, [r0, #8]
 800ac98:	8181      	strh	r1, [r0, #12]
 800ac9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac9c:	81c2      	strh	r2, [r0, #14]
 800ac9e:	6183      	str	r3, [r0, #24]
 800aca0:	4619      	mov	r1, r3
 800aca2:	2208      	movs	r2, #8
 800aca4:	305c      	adds	r0, #92	; 0x5c
 800aca6:	f7fd f8bd 	bl	8007e24 <memset>
 800acaa:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <std+0x38>)
 800acac:	6263      	str	r3, [r4, #36]	; 0x24
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <std+0x3c>)
 800acb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <std+0x40>)
 800acb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x44>)
 800acb8:	6224      	str	r4, [r4, #32]
 800acba:	6323      	str	r3, [r4, #48]	; 0x30
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	bf00      	nop
 800acc0:	0800c591 	.word	0x0800c591
 800acc4:	0800c5b3 	.word	0x0800c5b3
 800acc8:	0800c5eb 	.word	0x0800c5eb
 800accc:	0800c60f 	.word	0x0800c60f

0800acd0 <_cleanup_r>:
 800acd0:	4901      	ldr	r1, [pc, #4]	; (800acd8 <_cleanup_r+0x8>)
 800acd2:	f000 b8af 	b.w	800ae34 <_fwalk_reent>
 800acd6:	bf00      	nop
 800acd8:	0800ac11 	.word	0x0800ac11

0800acdc <__sfmoreglue>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	2268      	movs	r2, #104	; 0x68
 800ace0:	1e4d      	subs	r5, r1, #1
 800ace2:	4355      	muls	r5, r2
 800ace4:	460e      	mov	r6, r1
 800ace6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acea:	f7fd f90f 	bl	8007f0c <_malloc_r>
 800acee:	4604      	mov	r4, r0
 800acf0:	b140      	cbz	r0, 800ad04 <__sfmoreglue+0x28>
 800acf2:	2100      	movs	r1, #0
 800acf4:	e9c0 1600 	strd	r1, r6, [r0]
 800acf8:	300c      	adds	r0, #12
 800acfa:	60a0      	str	r0, [r4, #8]
 800acfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad00:	f7fd f890 	bl	8007e24 <memset>
 800ad04:	4620      	mov	r0, r4
 800ad06:	bd70      	pop	{r4, r5, r6, pc}

0800ad08 <__sfp_lock_acquire>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__sfp_lock_acquire+0x8>)
 800ad0a:	f000 bc26 	b.w	800b55a <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20000589 	.word	0x20000589

0800ad14 <__sfp_lock_release>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__sfp_lock_release+0x8>)
 800ad16:	f000 bc21 	b.w	800b55c <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20000589 	.word	0x20000589

0800ad20 <__sinit_lock_acquire>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sinit_lock_acquire+0x8>)
 800ad22:	f000 bc1a 	b.w	800b55a <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	2000058a 	.word	0x2000058a

0800ad2c <__sinit_lock_release>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sinit_lock_release+0x8>)
 800ad2e:	f000 bc15 	b.w	800b55c <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	2000058a 	.word	0x2000058a

0800ad38 <__sinit>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f7ff fff0 	bl	800ad20 <__sinit_lock_acquire>
 800ad40:	69a3      	ldr	r3, [r4, #24]
 800ad42:	b11b      	cbz	r3, 800ad4c <__sinit+0x14>
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f7ff bff0 	b.w	800ad2c <__sinit_lock_release>
 800ad4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad50:	6523      	str	r3, [r4, #80]	; 0x50
 800ad52:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <__sinit+0x68>)
 800ad54:	4a13      	ldr	r2, [pc, #76]	; (800ada4 <__sinit+0x6c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	bf04      	itt	eq
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	61a3      	streq	r3, [r4, #24]
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f820 	bl	800ada8 <__sfp>
 800ad68:	6060      	str	r0, [r4, #4]
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 f81c 	bl	800ada8 <__sfp>
 800ad70:	60a0      	str	r0, [r4, #8]
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 f818 	bl	800ada8 <__sfp>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	60e0      	str	r0, [r4, #12]
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	6860      	ldr	r0, [r4, #4]
 800ad80:	f7ff ff82 	bl	800ac88 <std>
 800ad84:	68a0      	ldr	r0, [r4, #8]
 800ad86:	2201      	movs	r2, #1
 800ad88:	2109      	movs	r1, #9
 800ad8a:	f7ff ff7d 	bl	800ac88 <std>
 800ad8e:	68e0      	ldr	r0, [r4, #12]
 800ad90:	2202      	movs	r2, #2
 800ad92:	2112      	movs	r1, #18
 800ad94:	f7ff ff78 	bl	800ac88 <std>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	61a3      	str	r3, [r4, #24]
 800ad9c:	e7d2      	b.n	800ad44 <__sinit+0xc>
 800ad9e:	bf00      	nop
 800ada0:	0800cfe0 	.word	0x0800cfe0
 800ada4:	0800acd1 	.word	0x0800acd1

0800ada8 <__sfp>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	4607      	mov	r7, r0
 800adac:	f7ff ffac 	bl	800ad08 <__sfp_lock_acquire>
 800adb0:	4b1e      	ldr	r3, [pc, #120]	; (800ae2c <__sfp+0x84>)
 800adb2:	681e      	ldr	r6, [r3, #0]
 800adb4:	69b3      	ldr	r3, [r6, #24]
 800adb6:	b913      	cbnz	r3, 800adbe <__sfp+0x16>
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff ffbd 	bl	800ad38 <__sinit>
 800adbe:	3648      	adds	r6, #72	; 0x48
 800adc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	d503      	bpl.n	800add0 <__sfp+0x28>
 800adc8:	6833      	ldr	r3, [r6, #0]
 800adca:	b30b      	cbz	r3, 800ae10 <__sfp+0x68>
 800adcc:	6836      	ldr	r6, [r6, #0]
 800adce:	e7f7      	b.n	800adc0 <__sfp+0x18>
 800add0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800add4:	b9d5      	cbnz	r5, 800ae0c <__sfp+0x64>
 800add6:	4b16      	ldr	r3, [pc, #88]	; (800ae30 <__sfp+0x88>)
 800add8:	60e3      	str	r3, [r4, #12]
 800adda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adde:	6665      	str	r5, [r4, #100]	; 0x64
 800ade0:	f000 fbba 	bl	800b558 <__retarget_lock_init_recursive>
 800ade4:	f7ff ff96 	bl	800ad14 <__sfp_lock_release>
 800ade8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adf0:	6025      	str	r5, [r4, #0]
 800adf2:	61a5      	str	r5, [r4, #24]
 800adf4:	2208      	movs	r2, #8
 800adf6:	4629      	mov	r1, r5
 800adf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adfc:	f7fd f812 	bl	8007e24 <memset>
 800ae00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae08:	4620      	mov	r0, r4
 800ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0c:	3468      	adds	r4, #104	; 0x68
 800ae0e:	e7d9      	b.n	800adc4 <__sfp+0x1c>
 800ae10:	2104      	movs	r1, #4
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7ff ff62 	bl	800acdc <__sfmoreglue>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	6030      	str	r0, [r6, #0]
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d1d5      	bne.n	800adcc <__sfp+0x24>
 800ae20:	f7ff ff78 	bl	800ad14 <__sfp_lock_release>
 800ae24:	230c      	movs	r3, #12
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	e7ee      	b.n	800ae08 <__sfp+0x60>
 800ae2a:	bf00      	nop
 800ae2c:	0800cfe0 	.word	0x0800cfe0
 800ae30:	ffff0001 	.word	0xffff0001

0800ae34 <_fwalk_reent>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	4606      	mov	r6, r0
 800ae3a:	4688      	mov	r8, r1
 800ae3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae40:	2700      	movs	r7, #0
 800ae42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae46:	f1b9 0901 	subs.w	r9, r9, #1
 800ae4a:	d505      	bpl.n	800ae58 <_fwalk_reent+0x24>
 800ae4c:	6824      	ldr	r4, [r4, #0]
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d1f7      	bne.n	800ae42 <_fwalk_reent+0xe>
 800ae52:	4638      	mov	r0, r7
 800ae54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae58:	89ab      	ldrh	r3, [r5, #12]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d907      	bls.n	800ae6e <_fwalk_reent+0x3a>
 800ae5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae62:	3301      	adds	r3, #1
 800ae64:	d003      	beq.n	800ae6e <_fwalk_reent+0x3a>
 800ae66:	4629      	mov	r1, r5
 800ae68:	4630      	mov	r0, r6
 800ae6a:	47c0      	blx	r8
 800ae6c:	4307      	orrs	r7, r0
 800ae6e:	3568      	adds	r5, #104	; 0x68
 800ae70:	e7e9      	b.n	800ae46 <_fwalk_reent+0x12>

0800ae72 <rshift>:
 800ae72:	6903      	ldr	r3, [r0, #16]
 800ae74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae80:	f100 0414 	add.w	r4, r0, #20
 800ae84:	dd45      	ble.n	800af12 <rshift+0xa0>
 800ae86:	f011 011f 	ands.w	r1, r1, #31
 800ae8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae92:	d10c      	bne.n	800aeae <rshift+0x3c>
 800ae94:	f100 0710 	add.w	r7, r0, #16
 800ae98:	4629      	mov	r1, r5
 800ae9a:	42b1      	cmp	r1, r6
 800ae9c:	d334      	bcc.n	800af08 <rshift+0x96>
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	1eea      	subs	r2, r5, #3
 800aea4:	4296      	cmp	r6, r2
 800aea6:	bf38      	it	cc
 800aea8:	2300      	movcc	r3, #0
 800aeaa:	4423      	add	r3, r4
 800aeac:	e015      	b.n	800aeda <rshift+0x68>
 800aeae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeb2:	f1c1 0820 	rsb	r8, r1, #32
 800aeb6:	40cf      	lsrs	r7, r1
 800aeb8:	f105 0e04 	add.w	lr, r5, #4
 800aebc:	46a1      	mov	r9, r4
 800aebe:	4576      	cmp	r6, lr
 800aec0:	46f4      	mov	ip, lr
 800aec2:	d815      	bhi.n	800aef0 <rshift+0x7e>
 800aec4:	1a9a      	subs	r2, r3, r2
 800aec6:	0092      	lsls	r2, r2, #2
 800aec8:	3a04      	subs	r2, #4
 800aeca:	3501      	adds	r5, #1
 800aecc:	42ae      	cmp	r6, r5
 800aece:	bf38      	it	cc
 800aed0:	2200      	movcc	r2, #0
 800aed2:	18a3      	adds	r3, r4, r2
 800aed4:	50a7      	str	r7, [r4, r2]
 800aed6:	b107      	cbz	r7, 800aeda <rshift+0x68>
 800aed8:	3304      	adds	r3, #4
 800aeda:	1b1a      	subs	r2, r3, r4
 800aedc:	42a3      	cmp	r3, r4
 800aede:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aee2:	bf08      	it	eq
 800aee4:	2300      	moveq	r3, #0
 800aee6:	6102      	str	r2, [r0, #16]
 800aee8:	bf08      	it	eq
 800aeea:	6143      	streq	r3, [r0, #20]
 800aeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef0:	f8dc c000 	ldr.w	ip, [ip]
 800aef4:	fa0c fc08 	lsl.w	ip, ip, r8
 800aef8:	ea4c 0707 	orr.w	r7, ip, r7
 800aefc:	f849 7b04 	str.w	r7, [r9], #4
 800af00:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af04:	40cf      	lsrs	r7, r1
 800af06:	e7da      	b.n	800aebe <rshift+0x4c>
 800af08:	f851 cb04 	ldr.w	ip, [r1], #4
 800af0c:	f847 cf04 	str.w	ip, [r7, #4]!
 800af10:	e7c3      	b.n	800ae9a <rshift+0x28>
 800af12:	4623      	mov	r3, r4
 800af14:	e7e1      	b.n	800aeda <rshift+0x68>

0800af16 <__hexdig_fun>:
 800af16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d802      	bhi.n	800af24 <__hexdig_fun+0xe>
 800af1e:	3820      	subs	r0, #32
 800af20:	b2c0      	uxtb	r0, r0
 800af22:	4770      	bx	lr
 800af24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d801      	bhi.n	800af30 <__hexdig_fun+0x1a>
 800af2c:	3847      	subs	r0, #71	; 0x47
 800af2e:	e7f7      	b.n	800af20 <__hexdig_fun+0xa>
 800af30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af34:	2b05      	cmp	r3, #5
 800af36:	d801      	bhi.n	800af3c <__hexdig_fun+0x26>
 800af38:	3827      	subs	r0, #39	; 0x27
 800af3a:	e7f1      	b.n	800af20 <__hexdig_fun+0xa>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4770      	bx	lr

0800af40 <__gethex>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ed2d 8b02 	vpush	{d8}
 800af48:	b089      	sub	sp, #36	; 0x24
 800af4a:	ee08 0a10 	vmov	s16, r0
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	4bb4      	ldr	r3, [pc, #720]	; (800b224 <__gethex+0x2e4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	4618      	mov	r0, r3
 800af58:	468b      	mov	fp, r1
 800af5a:	4690      	mov	r8, r2
 800af5c:	f7f5 f910 	bl	8000180 <strlen>
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f8db 2000 	ldr.w	r2, [fp]
 800af66:	4403      	add	r3, r0
 800af68:	4682      	mov	sl, r0
 800af6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	1c93      	adds	r3, r2, #2
 800af72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7a:	32fe      	adds	r2, #254	; 0xfe
 800af7c:	18d1      	adds	r1, r2, r3
 800af7e:	461f      	mov	r7, r3
 800af80:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af84:	9100      	str	r1, [sp, #0]
 800af86:	2830      	cmp	r0, #48	; 0x30
 800af88:	d0f8      	beq.n	800af7c <__gethex+0x3c>
 800af8a:	f7ff ffc4 	bl	800af16 <__hexdig_fun>
 800af8e:	4604      	mov	r4, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d13a      	bne.n	800b00a <__gethex+0xca>
 800af94:	9901      	ldr	r1, [sp, #4]
 800af96:	4652      	mov	r2, sl
 800af98:	4638      	mov	r0, r7
 800af9a:	f001 fb3c 	bl	800c616 <strncmp>
 800af9e:	4605      	mov	r5, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d168      	bne.n	800b076 <__gethex+0x136>
 800afa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afa8:	eb07 060a 	add.w	r6, r7, sl
 800afac:	f7ff ffb3 	bl	800af16 <__hexdig_fun>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d062      	beq.n	800b07a <__gethex+0x13a>
 800afb4:	4633      	mov	r3, r6
 800afb6:	7818      	ldrb	r0, [r3, #0]
 800afb8:	2830      	cmp	r0, #48	; 0x30
 800afba:	461f      	mov	r7, r3
 800afbc:	f103 0301 	add.w	r3, r3, #1
 800afc0:	d0f9      	beq.n	800afb6 <__gethex+0x76>
 800afc2:	f7ff ffa8 	bl	800af16 <__hexdig_fun>
 800afc6:	2301      	movs	r3, #1
 800afc8:	fab0 f480 	clz	r4, r0
 800afcc:	0964      	lsrs	r4, r4, #5
 800afce:	4635      	mov	r5, r6
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	463a      	mov	r2, r7
 800afd4:	4616      	mov	r6, r2
 800afd6:	3201      	adds	r2, #1
 800afd8:	7830      	ldrb	r0, [r6, #0]
 800afda:	f7ff ff9c 	bl	800af16 <__hexdig_fun>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d1f8      	bne.n	800afd4 <__gethex+0x94>
 800afe2:	9901      	ldr	r1, [sp, #4]
 800afe4:	4652      	mov	r2, sl
 800afe6:	4630      	mov	r0, r6
 800afe8:	f001 fb15 	bl	800c616 <strncmp>
 800afec:	b980      	cbnz	r0, 800b010 <__gethex+0xd0>
 800afee:	b94d      	cbnz	r5, 800b004 <__gethex+0xc4>
 800aff0:	eb06 050a 	add.w	r5, r6, sl
 800aff4:	462a      	mov	r2, r5
 800aff6:	4616      	mov	r6, r2
 800aff8:	3201      	adds	r2, #1
 800affa:	7830      	ldrb	r0, [r6, #0]
 800affc:	f7ff ff8b 	bl	800af16 <__hexdig_fun>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1f8      	bne.n	800aff6 <__gethex+0xb6>
 800b004:	1bad      	subs	r5, r5, r6
 800b006:	00ad      	lsls	r5, r5, #2
 800b008:	e004      	b.n	800b014 <__gethex+0xd4>
 800b00a:	2400      	movs	r4, #0
 800b00c:	4625      	mov	r5, r4
 800b00e:	e7e0      	b.n	800afd2 <__gethex+0x92>
 800b010:	2d00      	cmp	r5, #0
 800b012:	d1f7      	bne.n	800b004 <__gethex+0xc4>
 800b014:	7833      	ldrb	r3, [r6, #0]
 800b016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01a:	2b50      	cmp	r3, #80	; 0x50
 800b01c:	d13b      	bne.n	800b096 <__gethex+0x156>
 800b01e:	7873      	ldrb	r3, [r6, #1]
 800b020:	2b2b      	cmp	r3, #43	; 0x2b
 800b022:	d02c      	beq.n	800b07e <__gethex+0x13e>
 800b024:	2b2d      	cmp	r3, #45	; 0x2d
 800b026:	d02e      	beq.n	800b086 <__gethex+0x146>
 800b028:	1c71      	adds	r1, r6, #1
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	7808      	ldrb	r0, [r1, #0]
 800b030:	f7ff ff71 	bl	800af16 <__hexdig_fun>
 800b034:	1e43      	subs	r3, r0, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b18      	cmp	r3, #24
 800b03a:	d82c      	bhi.n	800b096 <__gethex+0x156>
 800b03c:	f1a0 0210 	sub.w	r2, r0, #16
 800b040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b044:	f7ff ff67 	bl	800af16 <__hexdig_fun>
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b18      	cmp	r3, #24
 800b04e:	d91d      	bls.n	800b08c <__gethex+0x14c>
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	d000      	beq.n	800b058 <__gethex+0x118>
 800b056:	4252      	negs	r2, r2
 800b058:	4415      	add	r5, r2
 800b05a:	f8cb 1000 	str.w	r1, [fp]
 800b05e:	b1e4      	cbz	r4, 800b09a <__gethex+0x15a>
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	bf14      	ite	ne
 800b066:	2700      	movne	r7, #0
 800b068:	2706      	moveq	r7, #6
 800b06a:	4638      	mov	r0, r7
 800b06c:	b009      	add	sp, #36	; 0x24
 800b06e:	ecbd 8b02 	vpop	{d8}
 800b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b076:	463e      	mov	r6, r7
 800b078:	4625      	mov	r5, r4
 800b07a:	2401      	movs	r4, #1
 800b07c:	e7ca      	b.n	800b014 <__gethex+0xd4>
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	1cb1      	adds	r1, r6, #2
 800b084:	e7d3      	b.n	800b02e <__gethex+0xee>
 800b086:	f04f 0901 	mov.w	r9, #1
 800b08a:	e7fa      	b.n	800b082 <__gethex+0x142>
 800b08c:	230a      	movs	r3, #10
 800b08e:	fb03 0202 	mla	r2, r3, r2, r0
 800b092:	3a10      	subs	r2, #16
 800b094:	e7d4      	b.n	800b040 <__gethex+0x100>
 800b096:	4631      	mov	r1, r6
 800b098:	e7df      	b.n	800b05a <__gethex+0x11a>
 800b09a:	1bf3      	subs	r3, r6, r7
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4621      	mov	r1, r4
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	dc0b      	bgt.n	800b0bc <__gethex+0x17c>
 800b0a4:	ee18 0a10 	vmov	r0, s16
 800b0a8:	f000 fadc 	bl	800b664 <_Balloc>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	b940      	cbnz	r0, 800b0c2 <__gethex+0x182>
 800b0b0:	4b5d      	ldr	r3, [pc, #372]	; (800b228 <__gethex+0x2e8>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	21de      	movs	r1, #222	; 0xde
 800b0b6:	485d      	ldr	r0, [pc, #372]	; (800b22c <__gethex+0x2ec>)
 800b0b8:	f001 fae0 	bl	800c67c <__assert_func>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	105b      	asrs	r3, r3, #1
 800b0c0:	e7ee      	b.n	800b0a0 <__gethex+0x160>
 800b0c2:	f100 0914 	add.w	r9, r0, #20
 800b0c6:	f04f 0b00 	mov.w	fp, #0
 800b0ca:	f1ca 0301 	rsb	r3, sl, #1
 800b0ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0d2:	f8cd b000 	str.w	fp, [sp]
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	42b7      	cmp	r7, r6
 800b0da:	d340      	bcc.n	800b15e <__gethex+0x21e>
 800b0dc:	9802      	ldr	r0, [sp, #8]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	f840 3b04 	str.w	r3, [r0], #4
 800b0e4:	eba0 0009 	sub.w	r0, r0, r9
 800b0e8:	1080      	asrs	r0, r0, #2
 800b0ea:	0146      	lsls	r6, r0, #5
 800b0ec:	6120      	str	r0, [r4, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fbaa 	bl	800b848 <__hi0bits>
 800b0f4:	1a30      	subs	r0, r6, r0
 800b0f6:	f8d8 6000 	ldr.w	r6, [r8]
 800b0fa:	42b0      	cmp	r0, r6
 800b0fc:	dd63      	ble.n	800b1c6 <__gethex+0x286>
 800b0fe:	1b87      	subs	r7, r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	4620      	mov	r0, r4
 800b104:	f000 ff4e 	bl	800bfa4 <__any_on>
 800b108:	4682      	mov	sl, r0
 800b10a:	b1a8      	cbz	r0, 800b138 <__gethex+0x1f8>
 800b10c:	1e7b      	subs	r3, r7, #1
 800b10e:	1159      	asrs	r1, r3, #5
 800b110:	f003 021f 	and.w	r2, r3, #31
 800b114:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b118:	f04f 0a01 	mov.w	sl, #1
 800b11c:	fa0a f202 	lsl.w	r2, sl, r2
 800b120:	420a      	tst	r2, r1
 800b122:	d009      	beq.n	800b138 <__gethex+0x1f8>
 800b124:	4553      	cmp	r3, sl
 800b126:	dd05      	ble.n	800b134 <__gethex+0x1f4>
 800b128:	1eb9      	subs	r1, r7, #2
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 ff3a 	bl	800bfa4 <__any_on>
 800b130:	2800      	cmp	r0, #0
 800b132:	d145      	bne.n	800b1c0 <__gethex+0x280>
 800b134:	f04f 0a02 	mov.w	sl, #2
 800b138:	4639      	mov	r1, r7
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff fe99 	bl	800ae72 <rshift>
 800b140:	443d      	add	r5, r7
 800b142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b146:	42ab      	cmp	r3, r5
 800b148:	da4c      	bge.n	800b1e4 <__gethex+0x2a4>
 800b14a:	ee18 0a10 	vmov	r0, s16
 800b14e:	4621      	mov	r1, r4
 800b150:	f000 fac8 	bl	800b6e4 <_Bfree>
 800b154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b156:	2300      	movs	r3, #0
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	27a3      	movs	r7, #163	; 0xa3
 800b15c:	e785      	b.n	800b06a <__gethex+0x12a>
 800b15e:	1e73      	subs	r3, r6, #1
 800b160:	9a05      	ldr	r2, [sp, #20]
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b168:	4293      	cmp	r3, r2
 800b16a:	d019      	beq.n	800b1a0 <__gethex+0x260>
 800b16c:	f1bb 0f20 	cmp.w	fp, #32
 800b170:	d107      	bne.n	800b182 <__gethex+0x242>
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	9a00      	ldr	r2, [sp, #0]
 800b176:	f843 2b04 	str.w	r2, [r3], #4
 800b17a:	9302      	str	r3, [sp, #8]
 800b17c:	2300      	movs	r3, #0
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	469b      	mov	fp, r3
 800b182:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b186:	f7ff fec6 	bl	800af16 <__hexdig_fun>
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	f000 000f 	and.w	r0, r0, #15
 800b190:	fa00 f00b 	lsl.w	r0, r0, fp
 800b194:	4303      	orrs	r3, r0
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	f10b 0b04 	add.w	fp, fp, #4
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	e00d      	b.n	800b1bc <__gethex+0x27c>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	9a06      	ldr	r2, [sp, #24]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	42bb      	cmp	r3, r7
 800b1a8:	d3e0      	bcc.n	800b16c <__gethex+0x22c>
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	f001 fa30 	bl	800c616 <strncmp>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d1d7      	bne.n	800b16c <__gethex+0x22c>
 800b1bc:	461e      	mov	r6, r3
 800b1be:	e78b      	b.n	800b0d8 <__gethex+0x198>
 800b1c0:	f04f 0a03 	mov.w	sl, #3
 800b1c4:	e7b8      	b.n	800b138 <__gethex+0x1f8>
 800b1c6:	da0a      	bge.n	800b1de <__gethex+0x29e>
 800b1c8:	1a37      	subs	r7, r6, r0
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	ee18 0a10 	vmov	r0, s16
 800b1d0:	463a      	mov	r2, r7
 800b1d2:	f000 fca3 	bl	800bb1c <__lshift>
 800b1d6:	1bed      	subs	r5, r5, r7
 800b1d8:	4604      	mov	r4, r0
 800b1da:	f100 0914 	add.w	r9, r0, #20
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	e7ae      	b.n	800b142 <__gethex+0x202>
 800b1e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1e8:	42a8      	cmp	r0, r5
 800b1ea:	dd72      	ble.n	800b2d2 <__gethex+0x392>
 800b1ec:	1b45      	subs	r5, r0, r5
 800b1ee:	42ae      	cmp	r6, r5
 800b1f0:	dc36      	bgt.n	800b260 <__gethex+0x320>
 800b1f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d02a      	beq.n	800b250 <__gethex+0x310>
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d02c      	beq.n	800b258 <__gethex+0x318>
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d11c      	bne.n	800b23c <__gethex+0x2fc>
 800b202:	42ae      	cmp	r6, r5
 800b204:	d11a      	bne.n	800b23c <__gethex+0x2fc>
 800b206:	2e01      	cmp	r6, #1
 800b208:	d112      	bne.n	800b230 <__gethex+0x2f0>
 800b20a:	9a04      	ldr	r2, [sp, #16]
 800b20c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	2301      	movs	r3, #1
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	f8c9 3000 	str.w	r3, [r9]
 800b21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b21c:	2762      	movs	r7, #98	; 0x62
 800b21e:	601c      	str	r4, [r3, #0]
 800b220:	e723      	b.n	800b06a <__gethex+0x12a>
 800b222:	bf00      	nop
 800b224:	0800d2cc 	.word	0x0800d2cc
 800b228:	0800d1f0 	.word	0x0800d1f0
 800b22c:	0800d264 	.word	0x0800d264
 800b230:	1e71      	subs	r1, r6, #1
 800b232:	4620      	mov	r0, r4
 800b234:	f000 feb6 	bl	800bfa4 <__any_on>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d1e6      	bne.n	800b20a <__gethex+0x2ca>
 800b23c:	ee18 0a10 	vmov	r0, s16
 800b240:	4621      	mov	r1, r4
 800b242:	f000 fa4f 	bl	800b6e4 <_Bfree>
 800b246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b248:	2300      	movs	r3, #0
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	2750      	movs	r7, #80	; 0x50
 800b24e:	e70c      	b.n	800b06a <__gethex+0x12a>
 800b250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f2      	bne.n	800b23c <__gethex+0x2fc>
 800b256:	e7d8      	b.n	800b20a <__gethex+0x2ca>
 800b258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1d5      	bne.n	800b20a <__gethex+0x2ca>
 800b25e:	e7ed      	b.n	800b23c <__gethex+0x2fc>
 800b260:	1e6f      	subs	r7, r5, #1
 800b262:	f1ba 0f00 	cmp.w	sl, #0
 800b266:	d131      	bne.n	800b2cc <__gethex+0x38c>
 800b268:	b127      	cbz	r7, 800b274 <__gethex+0x334>
 800b26a:	4639      	mov	r1, r7
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fe99 	bl	800bfa4 <__any_on>
 800b272:	4682      	mov	sl, r0
 800b274:	117b      	asrs	r3, r7, #5
 800b276:	2101      	movs	r1, #1
 800b278:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b27c:	f007 071f 	and.w	r7, r7, #31
 800b280:	fa01 f707 	lsl.w	r7, r1, r7
 800b284:	421f      	tst	r7, r3
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	bf18      	it	ne
 800b28c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b290:	1b76      	subs	r6, r6, r5
 800b292:	f7ff fdee 	bl	800ae72 <rshift>
 800b296:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b29a:	2702      	movs	r7, #2
 800b29c:	f1ba 0f00 	cmp.w	sl, #0
 800b2a0:	d048      	beq.n	800b334 <__gethex+0x3f4>
 800b2a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d015      	beq.n	800b2d6 <__gethex+0x396>
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d017      	beq.n	800b2de <__gethex+0x39e>
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d109      	bne.n	800b2c6 <__gethex+0x386>
 800b2b2:	f01a 0f02 	tst.w	sl, #2
 800b2b6:	d006      	beq.n	800b2c6 <__gethex+0x386>
 800b2b8:	f8d9 0000 	ldr.w	r0, [r9]
 800b2bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2c0:	f01a 0f01 	tst.w	sl, #1
 800b2c4:	d10e      	bne.n	800b2e4 <__gethex+0x3a4>
 800b2c6:	f047 0710 	orr.w	r7, r7, #16
 800b2ca:	e033      	b.n	800b334 <__gethex+0x3f4>
 800b2cc:	f04f 0a01 	mov.w	sl, #1
 800b2d0:	e7d0      	b.n	800b274 <__gethex+0x334>
 800b2d2:	2701      	movs	r7, #1
 800b2d4:	e7e2      	b.n	800b29c <__gethex+0x35c>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	f1c3 0301 	rsb	r3, r3, #1
 800b2dc:	9315      	str	r3, [sp, #84]	; 0x54
 800b2de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <__gethex+0x386>
 800b2e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2e8:	f104 0314 	add.w	r3, r4, #20
 800b2ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2f4:	f04f 0c00 	mov.w	ip, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b302:	d01c      	beq.n	800b33e <__gethex+0x3fe>
 800b304:	3201      	adds	r2, #1
 800b306:	6002      	str	r2, [r0, #0]
 800b308:	2f02      	cmp	r7, #2
 800b30a:	f104 0314 	add.w	r3, r4, #20
 800b30e:	d13f      	bne.n	800b390 <__gethex+0x450>
 800b310:	f8d8 2000 	ldr.w	r2, [r8]
 800b314:	3a01      	subs	r2, #1
 800b316:	42b2      	cmp	r2, r6
 800b318:	d10a      	bne.n	800b330 <__gethex+0x3f0>
 800b31a:	1171      	asrs	r1, r6, #5
 800b31c:	2201      	movs	r2, #1
 800b31e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b322:	f006 061f 	and.w	r6, r6, #31
 800b326:	fa02 f606 	lsl.w	r6, r2, r6
 800b32a:	421e      	tst	r6, r3
 800b32c:	bf18      	it	ne
 800b32e:	4617      	movne	r7, r2
 800b330:	f047 0720 	orr.w	r7, r7, #32
 800b334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b336:	601c      	str	r4, [r3, #0]
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	601d      	str	r5, [r3, #0]
 800b33c:	e695      	b.n	800b06a <__gethex+0x12a>
 800b33e:	4299      	cmp	r1, r3
 800b340:	f843 cc04 	str.w	ip, [r3, #-4]
 800b344:	d8d8      	bhi.n	800b2f8 <__gethex+0x3b8>
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	459b      	cmp	fp, r3
 800b34a:	db19      	blt.n	800b380 <__gethex+0x440>
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	ee18 0a10 	vmov	r0, s16
 800b352:	3101      	adds	r1, #1
 800b354:	f000 f986 	bl	800b664 <_Balloc>
 800b358:	4681      	mov	r9, r0
 800b35a:	b918      	cbnz	r0, 800b364 <__gethex+0x424>
 800b35c:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <__gethex+0x488>)
 800b35e:	4602      	mov	r2, r0
 800b360:	2184      	movs	r1, #132	; 0x84
 800b362:	e6a8      	b.n	800b0b6 <__gethex+0x176>
 800b364:	6922      	ldr	r2, [r4, #16]
 800b366:	3202      	adds	r2, #2
 800b368:	f104 010c 	add.w	r1, r4, #12
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	300c      	adds	r0, #12
 800b370:	f7fc fd4a 	bl	8007e08 <memcpy>
 800b374:	4621      	mov	r1, r4
 800b376:	ee18 0a10 	vmov	r0, s16
 800b37a:	f000 f9b3 	bl	800b6e4 <_Bfree>
 800b37e:	464c      	mov	r4, r9
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b388:	6122      	str	r2, [r4, #16]
 800b38a:	2201      	movs	r2, #1
 800b38c:	615a      	str	r2, [r3, #20]
 800b38e:	e7bb      	b.n	800b308 <__gethex+0x3c8>
 800b390:	6922      	ldr	r2, [r4, #16]
 800b392:	455a      	cmp	r2, fp
 800b394:	dd0b      	ble.n	800b3ae <__gethex+0x46e>
 800b396:	2101      	movs	r1, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff fd6a 	bl	800ae72 <rshift>
 800b39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a2:	3501      	adds	r5, #1
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	f6ff aed0 	blt.w	800b14a <__gethex+0x20a>
 800b3aa:	2701      	movs	r7, #1
 800b3ac:	e7c0      	b.n	800b330 <__gethex+0x3f0>
 800b3ae:	f016 061f 	ands.w	r6, r6, #31
 800b3b2:	d0fa      	beq.n	800b3aa <__gethex+0x46a>
 800b3b4:	4453      	add	r3, sl
 800b3b6:	f1c6 0620 	rsb	r6, r6, #32
 800b3ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3be:	f000 fa43 	bl	800b848 <__hi0bits>
 800b3c2:	42b0      	cmp	r0, r6
 800b3c4:	dbe7      	blt.n	800b396 <__gethex+0x456>
 800b3c6:	e7f0      	b.n	800b3aa <__gethex+0x46a>
 800b3c8:	0800d1f0 	.word	0x0800d1f0

0800b3cc <L_shift>:
 800b3cc:	f1c2 0208 	rsb	r2, r2, #8
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	b570      	push	{r4, r5, r6, lr}
 800b3d4:	f1c2 0620 	rsb	r6, r2, #32
 800b3d8:	6843      	ldr	r3, [r0, #4]
 800b3da:	6804      	ldr	r4, [r0, #0]
 800b3dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	40d3      	lsrs	r3, r2
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ea:	4288      	cmp	r0, r1
 800b3ec:	d3f4      	bcc.n	800b3d8 <L_shift+0xc>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <__match>:
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	6803      	ldr	r3, [r0, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	b914      	cbnz	r4, 800b402 <__match+0x12>
 800b3fc:	6003      	str	r3, [r0, #0]
 800b3fe:	2001      	movs	r0, #1
 800b400:	bd30      	pop	{r4, r5, pc}
 800b402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b40a:	2d19      	cmp	r5, #25
 800b40c:	bf98      	it	ls
 800b40e:	3220      	addls	r2, #32
 800b410:	42a2      	cmp	r2, r4
 800b412:	d0f0      	beq.n	800b3f6 <__match+0x6>
 800b414:	2000      	movs	r0, #0
 800b416:	e7f3      	b.n	800b400 <__match+0x10>

0800b418 <__hexnan>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	115e      	asrs	r6, r3, #5
 800b420:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b424:	f013 031f 	ands.w	r3, r3, #31
 800b428:	b087      	sub	sp, #28
 800b42a:	bf18      	it	ne
 800b42c:	3604      	addne	r6, #4
 800b42e:	2500      	movs	r5, #0
 800b430:	1f37      	subs	r7, r6, #4
 800b432:	4690      	mov	r8, r2
 800b434:	6802      	ldr	r2, [r0, #0]
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	4682      	mov	sl, r0
 800b43a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b43e:	46b9      	mov	r9, r7
 800b440:	463c      	mov	r4, r7
 800b442:	9502      	str	r5, [sp, #8]
 800b444:	46ab      	mov	fp, r5
 800b446:	7851      	ldrb	r1, [r2, #1]
 800b448:	1c53      	adds	r3, r2, #1
 800b44a:	9303      	str	r3, [sp, #12]
 800b44c:	b341      	cbz	r1, 800b4a0 <__hexnan+0x88>
 800b44e:	4608      	mov	r0, r1
 800b450:	9205      	str	r2, [sp, #20]
 800b452:	9104      	str	r1, [sp, #16]
 800b454:	f7ff fd5f 	bl	800af16 <__hexdig_fun>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d14f      	bne.n	800b4fc <__hexnan+0xe4>
 800b45c:	9904      	ldr	r1, [sp, #16]
 800b45e:	9a05      	ldr	r2, [sp, #20]
 800b460:	2920      	cmp	r1, #32
 800b462:	d818      	bhi.n	800b496 <__hexnan+0x7e>
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	459b      	cmp	fp, r3
 800b468:	dd13      	ble.n	800b492 <__hexnan+0x7a>
 800b46a:	454c      	cmp	r4, r9
 800b46c:	d206      	bcs.n	800b47c <__hexnan+0x64>
 800b46e:	2d07      	cmp	r5, #7
 800b470:	dc04      	bgt.n	800b47c <__hexnan+0x64>
 800b472:	462a      	mov	r2, r5
 800b474:	4649      	mov	r1, r9
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff ffa8 	bl	800b3cc <L_shift>
 800b47c:	4544      	cmp	r4, r8
 800b47e:	d950      	bls.n	800b522 <__hexnan+0x10a>
 800b480:	2300      	movs	r3, #0
 800b482:	f1a4 0904 	sub.w	r9, r4, #4
 800b486:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48a:	f8cd b008 	str.w	fp, [sp, #8]
 800b48e:	464c      	mov	r4, r9
 800b490:	461d      	mov	r5, r3
 800b492:	9a03      	ldr	r2, [sp, #12]
 800b494:	e7d7      	b.n	800b446 <__hexnan+0x2e>
 800b496:	2929      	cmp	r1, #41	; 0x29
 800b498:	d156      	bne.n	800b548 <__hexnan+0x130>
 800b49a:	3202      	adds	r2, #2
 800b49c:	f8ca 2000 	str.w	r2, [sl]
 800b4a0:	f1bb 0f00 	cmp.w	fp, #0
 800b4a4:	d050      	beq.n	800b548 <__hexnan+0x130>
 800b4a6:	454c      	cmp	r4, r9
 800b4a8:	d206      	bcs.n	800b4b8 <__hexnan+0xa0>
 800b4aa:	2d07      	cmp	r5, #7
 800b4ac:	dc04      	bgt.n	800b4b8 <__hexnan+0xa0>
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ff8a 	bl	800b3cc <L_shift>
 800b4b8:	4544      	cmp	r4, r8
 800b4ba:	d934      	bls.n	800b526 <__hexnan+0x10e>
 800b4bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ca:	429f      	cmp	r7, r3
 800b4cc:	d2f9      	bcs.n	800b4c2 <__hexnan+0xaa>
 800b4ce:	1b3b      	subs	r3, r7, r4
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	3401      	adds	r4, #1
 800b4d8:	3e03      	subs	r6, #3
 800b4da:	42b4      	cmp	r4, r6
 800b4dc:	bf88      	it	hi
 800b4de:	2304      	movhi	r3, #4
 800b4e0:	4443      	add	r3, r8
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f843 2b04 	str.w	r2, [r3], #4
 800b4e8:	429f      	cmp	r7, r3
 800b4ea:	d2fb      	bcs.n	800b4e4 <__hexnan+0xcc>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	b91b      	cbnz	r3, 800b4f8 <__hexnan+0xe0>
 800b4f0:	4547      	cmp	r7, r8
 800b4f2:	d127      	bne.n	800b544 <__hexnan+0x12c>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	2005      	movs	r0, #5
 800b4fa:	e026      	b.n	800b54a <__hexnan+0x132>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	2d08      	cmp	r5, #8
 800b500:	f10b 0b01 	add.w	fp, fp, #1
 800b504:	dd06      	ble.n	800b514 <__hexnan+0xfc>
 800b506:	4544      	cmp	r4, r8
 800b508:	d9c3      	bls.n	800b492 <__hexnan+0x7a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b510:	2501      	movs	r5, #1
 800b512:	3c04      	subs	r4, #4
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	f000 000f 	and.w	r0, r0, #15
 800b51a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	e7b7      	b.n	800b492 <__hexnan+0x7a>
 800b522:	2508      	movs	r5, #8
 800b524:	e7b5      	b.n	800b492 <__hexnan+0x7a>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0df      	beq.n	800b4ec <__hexnan+0xd4>
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	f1c3 0320 	rsb	r3, r3, #32
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
 800b538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b53c:	401a      	ands	r2, r3
 800b53e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b542:	e7d3      	b.n	800b4ec <__hexnan+0xd4>
 800b544:	3f04      	subs	r7, #4
 800b546:	e7d1      	b.n	800b4ec <__hexnan+0xd4>
 800b548:	2004      	movs	r0, #4
 800b54a:	b007      	add	sp, #28
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b550 <_localeconv_r>:
 800b550:	4800      	ldr	r0, [pc, #0]	; (800b554 <_localeconv_r+0x4>)
 800b552:	4770      	bx	lr
 800b554:	20000170 	.word	0x20000170

0800b558 <__retarget_lock_init_recursive>:
 800b558:	4770      	bx	lr

0800b55a <__retarget_lock_acquire_recursive>:
 800b55a:	4770      	bx	lr

0800b55c <__retarget_lock_release_recursive>:
 800b55c:	4770      	bx	lr

0800b55e <__swhatbuf_r>:
 800b55e:	b570      	push	{r4, r5, r6, lr}
 800b560:	460e      	mov	r6, r1
 800b562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b566:	2900      	cmp	r1, #0
 800b568:	b096      	sub	sp, #88	; 0x58
 800b56a:	4614      	mov	r4, r2
 800b56c:	461d      	mov	r5, r3
 800b56e:	da08      	bge.n	800b582 <__swhatbuf_r+0x24>
 800b570:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	602a      	str	r2, [r5, #0]
 800b578:	061a      	lsls	r2, r3, #24
 800b57a:	d410      	bmi.n	800b59e <__swhatbuf_r+0x40>
 800b57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b580:	e00e      	b.n	800b5a0 <__swhatbuf_r+0x42>
 800b582:	466a      	mov	r2, sp
 800b584:	f001 f8ba 	bl	800c6fc <_fstat_r>
 800b588:	2800      	cmp	r0, #0
 800b58a:	dbf1      	blt.n	800b570 <__swhatbuf_r+0x12>
 800b58c:	9a01      	ldr	r2, [sp, #4]
 800b58e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b596:	425a      	negs	r2, r3
 800b598:	415a      	adcs	r2, r3
 800b59a:	602a      	str	r2, [r5, #0]
 800b59c:	e7ee      	b.n	800b57c <__swhatbuf_r+0x1e>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	b016      	add	sp, #88	; 0x58
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}

0800b5a8 <__smakebuf_r>:
 800b5a8:	898b      	ldrh	r3, [r1, #12]
 800b5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5ac:	079d      	lsls	r5, r3, #30
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	d507      	bpl.n	800b5c4 <__smakebuf_r+0x1c>
 800b5b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	6123      	str	r3, [r4, #16]
 800b5bc:	2301      	movs	r3, #1
 800b5be:	6163      	str	r3, [r4, #20]
 800b5c0:	b002      	add	sp, #8
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	ab01      	add	r3, sp, #4
 800b5c6:	466a      	mov	r2, sp
 800b5c8:	f7ff ffc9 	bl	800b55e <__swhatbuf_r>
 800b5cc:	9900      	ldr	r1, [sp, #0]
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fc fc9b 	bl	8007f0c <_malloc_r>
 800b5d6:	b948      	cbnz	r0, 800b5ec <__smakebuf_r+0x44>
 800b5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d4ef      	bmi.n	800b5c0 <__smakebuf_r+0x18>
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	f043 0302 	orr.w	r3, r3, #2
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	e7e3      	b.n	800b5b4 <__smakebuf_r+0xc>
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <__smakebuf_r+0x7c>)
 800b5ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	6020      	str	r0, [r4, #0]
 800b5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	9b00      	ldr	r3, [sp, #0]
 800b5fc:	6163      	str	r3, [r4, #20]
 800b5fe:	9b01      	ldr	r3, [sp, #4]
 800b600:	6120      	str	r0, [r4, #16]
 800b602:	b15b      	cbz	r3, 800b61c <__smakebuf_r+0x74>
 800b604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b608:	4630      	mov	r0, r6
 800b60a:	f001 f889 	bl	800c720 <_isatty_r>
 800b60e:	b128      	cbz	r0, 800b61c <__smakebuf_r+0x74>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	89a0      	ldrh	r0, [r4, #12]
 800b61e:	4305      	orrs	r5, r0
 800b620:	81a5      	strh	r5, [r4, #12]
 800b622:	e7cd      	b.n	800b5c0 <__smakebuf_r+0x18>
 800b624:	0800acd1 	.word	0x0800acd1

0800b628 <__ascii_mbtowc>:
 800b628:	b082      	sub	sp, #8
 800b62a:	b901      	cbnz	r1, 800b62e <__ascii_mbtowc+0x6>
 800b62c:	a901      	add	r1, sp, #4
 800b62e:	b142      	cbz	r2, 800b642 <__ascii_mbtowc+0x1a>
 800b630:	b14b      	cbz	r3, 800b646 <__ascii_mbtowc+0x1e>
 800b632:	7813      	ldrb	r3, [r2, #0]
 800b634:	600b      	str	r3, [r1, #0]
 800b636:	7812      	ldrb	r2, [r2, #0]
 800b638:	1e10      	subs	r0, r2, #0
 800b63a:	bf18      	it	ne
 800b63c:	2001      	movne	r0, #1
 800b63e:	b002      	add	sp, #8
 800b640:	4770      	bx	lr
 800b642:	4610      	mov	r0, r2
 800b644:	e7fb      	b.n	800b63e <__ascii_mbtowc+0x16>
 800b646:	f06f 0001 	mvn.w	r0, #1
 800b64a:	e7f8      	b.n	800b63e <__ascii_mbtowc+0x16>

0800b64c <__malloc_lock>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__malloc_lock+0x8>)
 800b64e:	f7ff bf84 	b.w	800b55a <__retarget_lock_acquire_recursive>
 800b652:	bf00      	nop
 800b654:	20000588 	.word	0x20000588

0800b658 <__malloc_unlock>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__malloc_unlock+0x8>)
 800b65a:	f7ff bf7f 	b.w	800b55c <__retarget_lock_release_recursive>
 800b65e:	bf00      	nop
 800b660:	20000588 	.word	0x20000588

0800b664 <_Balloc>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b668:	4604      	mov	r4, r0
 800b66a:	460d      	mov	r5, r1
 800b66c:	b976      	cbnz	r6, 800b68c <_Balloc+0x28>
 800b66e:	2010      	movs	r0, #16
 800b670:	f7fc fbba 	bl	8007de8 <malloc>
 800b674:	4602      	mov	r2, r0
 800b676:	6260      	str	r0, [r4, #36]	; 0x24
 800b678:	b920      	cbnz	r0, 800b684 <_Balloc+0x20>
 800b67a:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <_Balloc+0x78>)
 800b67c:	4818      	ldr	r0, [pc, #96]	; (800b6e0 <_Balloc+0x7c>)
 800b67e:	2166      	movs	r1, #102	; 0x66
 800b680:	f000 fffc 	bl	800c67c <__assert_func>
 800b684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b688:	6006      	str	r6, [r0, #0]
 800b68a:	60c6      	str	r6, [r0, #12]
 800b68c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b68e:	68f3      	ldr	r3, [r6, #12]
 800b690:	b183      	cbz	r3, 800b6b4 <_Balloc+0x50>
 800b692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b69a:	b9b8      	cbnz	r0, 800b6cc <_Balloc+0x68>
 800b69c:	2101      	movs	r1, #1
 800b69e:	fa01 f605 	lsl.w	r6, r1, r5
 800b6a2:	1d72      	adds	r2, r6, #5
 800b6a4:	0092      	lsls	r2, r2, #2
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fc9d 	bl	800bfe6 <_calloc_r>
 800b6ac:	b160      	cbz	r0, 800b6c8 <_Balloc+0x64>
 800b6ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6b2:	e00e      	b.n	800b6d2 <_Balloc+0x6e>
 800b6b4:	2221      	movs	r2, #33	; 0x21
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 fc94 	bl	800bfe6 <_calloc_r>
 800b6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c0:	60f0      	str	r0, [r6, #12]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e4      	bne.n	800b692 <_Balloc+0x2e>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	6802      	ldr	r2, [r0, #0]
 800b6ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6d8:	e7f7      	b.n	800b6ca <_Balloc+0x66>
 800b6da:	bf00      	nop
 800b6dc:	0800d17e 	.word	0x0800d17e
 800b6e0:	0800d2e0 	.word	0x0800d2e0

0800b6e4 <_Bfree>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	b976      	cbnz	r6, 800b70c <_Bfree+0x28>
 800b6ee:	2010      	movs	r0, #16
 800b6f0:	f7fc fb7a 	bl	8007de8 <malloc>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b6f8:	b920      	cbnz	r0, 800b704 <_Bfree+0x20>
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <_Bfree+0x3c>)
 800b6fc:	4809      	ldr	r0, [pc, #36]	; (800b724 <_Bfree+0x40>)
 800b6fe:	218a      	movs	r1, #138	; 0x8a
 800b700:	f000 ffbc 	bl	800c67c <__assert_func>
 800b704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b708:	6006      	str	r6, [r0, #0]
 800b70a:	60c6      	str	r6, [r0, #12]
 800b70c:	b13c      	cbz	r4, 800b71e <_Bfree+0x3a>
 800b70e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b710:	6862      	ldr	r2, [r4, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b718:	6021      	str	r1, [r4, #0]
 800b71a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	0800d17e 	.word	0x0800d17e
 800b724:	0800d2e0 	.word	0x0800d2e0

0800b728 <__multadd>:
 800b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72c:	690d      	ldr	r5, [r1, #16]
 800b72e:	4607      	mov	r7, r0
 800b730:	460c      	mov	r4, r1
 800b732:	461e      	mov	r6, r3
 800b734:	f101 0c14 	add.w	ip, r1, #20
 800b738:	2000      	movs	r0, #0
 800b73a:	f8dc 3000 	ldr.w	r3, [ip]
 800b73e:	b299      	uxth	r1, r3
 800b740:	fb02 6101 	mla	r1, r2, r1, r6
 800b744:	0c1e      	lsrs	r6, r3, #16
 800b746:	0c0b      	lsrs	r3, r1, #16
 800b748:	fb02 3306 	mla	r3, r2, r6, r3
 800b74c:	b289      	uxth	r1, r1
 800b74e:	3001      	adds	r0, #1
 800b750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b754:	4285      	cmp	r5, r0
 800b756:	f84c 1b04 	str.w	r1, [ip], #4
 800b75a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b75e:	dcec      	bgt.n	800b73a <__multadd+0x12>
 800b760:	b30e      	cbz	r6, 800b7a6 <__multadd+0x7e>
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	42ab      	cmp	r3, r5
 800b766:	dc19      	bgt.n	800b79c <__multadd+0x74>
 800b768:	6861      	ldr	r1, [r4, #4]
 800b76a:	4638      	mov	r0, r7
 800b76c:	3101      	adds	r1, #1
 800b76e:	f7ff ff79 	bl	800b664 <_Balloc>
 800b772:	4680      	mov	r8, r0
 800b774:	b928      	cbnz	r0, 800b782 <__multadd+0x5a>
 800b776:	4602      	mov	r2, r0
 800b778:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <__multadd+0x84>)
 800b77a:	480d      	ldr	r0, [pc, #52]	; (800b7b0 <__multadd+0x88>)
 800b77c:	21b5      	movs	r1, #181	; 0xb5
 800b77e:	f000 ff7d 	bl	800c67c <__assert_func>
 800b782:	6922      	ldr	r2, [r4, #16]
 800b784:	3202      	adds	r2, #2
 800b786:	f104 010c 	add.w	r1, r4, #12
 800b78a:	0092      	lsls	r2, r2, #2
 800b78c:	300c      	adds	r0, #12
 800b78e:	f7fc fb3b 	bl	8007e08 <memcpy>
 800b792:	4621      	mov	r1, r4
 800b794:	4638      	mov	r0, r7
 800b796:	f7ff ffa5 	bl	800b6e4 <_Bfree>
 800b79a:	4644      	mov	r4, r8
 800b79c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7a0:	3501      	adds	r5, #1
 800b7a2:	615e      	str	r6, [r3, #20]
 800b7a4:	6125      	str	r5, [r4, #16]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ac:	0800d1f0 	.word	0x0800d1f0
 800b7b0:	0800d2e0 	.word	0x0800d2e0

0800b7b4 <__s2b>:
 800b7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	4615      	mov	r5, r2
 800b7bc:	461f      	mov	r7, r3
 800b7be:	2209      	movs	r2, #9
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	db09      	blt.n	800b7e4 <__s2b+0x30>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ff47 	bl	800b664 <_Balloc>
 800b7d6:	b940      	cbnz	r0, 800b7ea <__s2b+0x36>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	4b19      	ldr	r3, [pc, #100]	; (800b840 <__s2b+0x8c>)
 800b7dc:	4819      	ldr	r0, [pc, #100]	; (800b844 <__s2b+0x90>)
 800b7de:	21ce      	movs	r1, #206	; 0xce
 800b7e0:	f000 ff4c 	bl	800c67c <__assert_func>
 800b7e4:	0052      	lsls	r2, r2, #1
 800b7e6:	3101      	adds	r1, #1
 800b7e8:	e7f0      	b.n	800b7cc <__s2b+0x18>
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	6143      	str	r3, [r0, #20]
 800b7ee:	2d09      	cmp	r5, #9
 800b7f0:	f04f 0301 	mov.w	r3, #1
 800b7f4:	6103      	str	r3, [r0, #16]
 800b7f6:	dd16      	ble.n	800b826 <__s2b+0x72>
 800b7f8:	f104 0909 	add.w	r9, r4, #9
 800b7fc:	46c8      	mov	r8, r9
 800b7fe:	442c      	add	r4, r5
 800b800:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b804:	4601      	mov	r1, r0
 800b806:	3b30      	subs	r3, #48	; 0x30
 800b808:	220a      	movs	r2, #10
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ff8c 	bl	800b728 <__multadd>
 800b810:	45a0      	cmp	r8, r4
 800b812:	d1f5      	bne.n	800b800 <__s2b+0x4c>
 800b814:	f1a5 0408 	sub.w	r4, r5, #8
 800b818:	444c      	add	r4, r9
 800b81a:	1b2d      	subs	r5, r5, r4
 800b81c:	1963      	adds	r3, r4, r5
 800b81e:	42bb      	cmp	r3, r7
 800b820:	db04      	blt.n	800b82c <__s2b+0x78>
 800b822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b826:	340a      	adds	r4, #10
 800b828:	2509      	movs	r5, #9
 800b82a:	e7f6      	b.n	800b81a <__s2b+0x66>
 800b82c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b830:	4601      	mov	r1, r0
 800b832:	3b30      	subs	r3, #48	; 0x30
 800b834:	220a      	movs	r2, #10
 800b836:	4630      	mov	r0, r6
 800b838:	f7ff ff76 	bl	800b728 <__multadd>
 800b83c:	e7ee      	b.n	800b81c <__s2b+0x68>
 800b83e:	bf00      	nop
 800b840:	0800d1f0 	.word	0x0800d1f0
 800b844:	0800d2e0 	.word	0x0800d2e0

0800b848 <__hi0bits>:
 800b848:	0c03      	lsrs	r3, r0, #16
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	b9d3      	cbnz	r3, 800b884 <__hi0bits+0x3c>
 800b84e:	0400      	lsls	r0, r0, #16
 800b850:	2310      	movs	r3, #16
 800b852:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b856:	bf04      	itt	eq
 800b858:	0200      	lsleq	r0, r0, #8
 800b85a:	3308      	addeq	r3, #8
 800b85c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b860:	bf04      	itt	eq
 800b862:	0100      	lsleq	r0, r0, #4
 800b864:	3304      	addeq	r3, #4
 800b866:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b86a:	bf04      	itt	eq
 800b86c:	0080      	lsleq	r0, r0, #2
 800b86e:	3302      	addeq	r3, #2
 800b870:	2800      	cmp	r0, #0
 800b872:	db05      	blt.n	800b880 <__hi0bits+0x38>
 800b874:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b878:	f103 0301 	add.w	r3, r3, #1
 800b87c:	bf08      	it	eq
 800b87e:	2320      	moveq	r3, #32
 800b880:	4618      	mov	r0, r3
 800b882:	4770      	bx	lr
 800b884:	2300      	movs	r3, #0
 800b886:	e7e4      	b.n	800b852 <__hi0bits+0xa>

0800b888 <__lo0bits>:
 800b888:	6803      	ldr	r3, [r0, #0]
 800b88a:	f013 0207 	ands.w	r2, r3, #7
 800b88e:	4601      	mov	r1, r0
 800b890:	d00b      	beq.n	800b8aa <__lo0bits+0x22>
 800b892:	07da      	lsls	r2, r3, #31
 800b894:	d423      	bmi.n	800b8de <__lo0bits+0x56>
 800b896:	0798      	lsls	r0, r3, #30
 800b898:	bf49      	itett	mi
 800b89a:	085b      	lsrmi	r3, r3, #1
 800b89c:	089b      	lsrpl	r3, r3, #2
 800b89e:	2001      	movmi	r0, #1
 800b8a0:	600b      	strmi	r3, [r1, #0]
 800b8a2:	bf5c      	itt	pl
 800b8a4:	600b      	strpl	r3, [r1, #0]
 800b8a6:	2002      	movpl	r0, #2
 800b8a8:	4770      	bx	lr
 800b8aa:	b298      	uxth	r0, r3
 800b8ac:	b9a8      	cbnz	r0, 800b8da <__lo0bits+0x52>
 800b8ae:	0c1b      	lsrs	r3, r3, #16
 800b8b0:	2010      	movs	r0, #16
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	b90a      	cbnz	r2, 800b8ba <__lo0bits+0x32>
 800b8b6:	3008      	adds	r0, #8
 800b8b8:	0a1b      	lsrs	r3, r3, #8
 800b8ba:	071a      	lsls	r2, r3, #28
 800b8bc:	bf04      	itt	eq
 800b8be:	091b      	lsreq	r3, r3, #4
 800b8c0:	3004      	addeq	r0, #4
 800b8c2:	079a      	lsls	r2, r3, #30
 800b8c4:	bf04      	itt	eq
 800b8c6:	089b      	lsreq	r3, r3, #2
 800b8c8:	3002      	addeq	r0, #2
 800b8ca:	07da      	lsls	r2, r3, #31
 800b8cc:	d403      	bmi.n	800b8d6 <__lo0bits+0x4e>
 800b8ce:	085b      	lsrs	r3, r3, #1
 800b8d0:	f100 0001 	add.w	r0, r0, #1
 800b8d4:	d005      	beq.n	800b8e2 <__lo0bits+0x5a>
 800b8d6:	600b      	str	r3, [r1, #0]
 800b8d8:	4770      	bx	lr
 800b8da:	4610      	mov	r0, r2
 800b8dc:	e7e9      	b.n	800b8b2 <__lo0bits+0x2a>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	4770      	bx	lr
 800b8e2:	2020      	movs	r0, #32
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <__i2b>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	f7ff feb9 	bl	800b664 <_Balloc>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	b928      	cbnz	r0, 800b902 <__i2b+0x1a>
 800b8f6:	4b05      	ldr	r3, [pc, #20]	; (800b90c <__i2b+0x24>)
 800b8f8:	4805      	ldr	r0, [pc, #20]	; (800b910 <__i2b+0x28>)
 800b8fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8fe:	f000 febd 	bl	800c67c <__assert_func>
 800b902:	2301      	movs	r3, #1
 800b904:	6144      	str	r4, [r0, #20]
 800b906:	6103      	str	r3, [r0, #16]
 800b908:	bd10      	pop	{r4, pc}
 800b90a:	bf00      	nop
 800b90c:	0800d1f0 	.word	0x0800d1f0
 800b910:	0800d2e0 	.word	0x0800d2e0

0800b914 <__multiply>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	4691      	mov	r9, r2
 800b91a:	690a      	ldr	r2, [r1, #16]
 800b91c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b920:	429a      	cmp	r2, r3
 800b922:	bfb8      	it	lt
 800b924:	460b      	movlt	r3, r1
 800b926:	460c      	mov	r4, r1
 800b928:	bfbc      	itt	lt
 800b92a:	464c      	movlt	r4, r9
 800b92c:	4699      	movlt	r9, r3
 800b92e:	6927      	ldr	r7, [r4, #16]
 800b930:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b934:	68a3      	ldr	r3, [r4, #8]
 800b936:	6861      	ldr	r1, [r4, #4]
 800b938:	eb07 060a 	add.w	r6, r7, sl
 800b93c:	42b3      	cmp	r3, r6
 800b93e:	b085      	sub	sp, #20
 800b940:	bfb8      	it	lt
 800b942:	3101      	addlt	r1, #1
 800b944:	f7ff fe8e 	bl	800b664 <_Balloc>
 800b948:	b930      	cbnz	r0, 800b958 <__multiply+0x44>
 800b94a:	4602      	mov	r2, r0
 800b94c:	4b44      	ldr	r3, [pc, #272]	; (800ba60 <__multiply+0x14c>)
 800b94e:	4845      	ldr	r0, [pc, #276]	; (800ba64 <__multiply+0x150>)
 800b950:	f240 115d 	movw	r1, #349	; 0x15d
 800b954:	f000 fe92 	bl	800c67c <__assert_func>
 800b958:	f100 0514 	add.w	r5, r0, #20
 800b95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b960:	462b      	mov	r3, r5
 800b962:	2200      	movs	r2, #0
 800b964:	4543      	cmp	r3, r8
 800b966:	d321      	bcc.n	800b9ac <__multiply+0x98>
 800b968:	f104 0314 	add.w	r3, r4, #20
 800b96c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b970:	f109 0314 	add.w	r3, r9, #20
 800b974:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b978:	9202      	str	r2, [sp, #8]
 800b97a:	1b3a      	subs	r2, r7, r4
 800b97c:	3a15      	subs	r2, #21
 800b97e:	f022 0203 	bic.w	r2, r2, #3
 800b982:	3204      	adds	r2, #4
 800b984:	f104 0115 	add.w	r1, r4, #21
 800b988:	428f      	cmp	r7, r1
 800b98a:	bf38      	it	cc
 800b98c:	2204      	movcc	r2, #4
 800b98e:	9201      	str	r2, [sp, #4]
 800b990:	9a02      	ldr	r2, [sp, #8]
 800b992:	9303      	str	r3, [sp, #12]
 800b994:	429a      	cmp	r2, r3
 800b996:	d80c      	bhi.n	800b9b2 <__multiply+0x9e>
 800b998:	2e00      	cmp	r6, #0
 800b99a:	dd03      	ble.n	800b9a4 <__multiply+0x90>
 800b99c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d05a      	beq.n	800ba5a <__multiply+0x146>
 800b9a4:	6106      	str	r6, [r0, #16]
 800b9a6:	b005      	add	sp, #20
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	f843 2b04 	str.w	r2, [r3], #4
 800b9b0:	e7d8      	b.n	800b964 <__multiply+0x50>
 800b9b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9b6:	f1ba 0f00 	cmp.w	sl, #0
 800b9ba:	d024      	beq.n	800ba06 <__multiply+0xf2>
 800b9bc:	f104 0e14 	add.w	lr, r4, #20
 800b9c0:	46a9      	mov	r9, r5
 800b9c2:	f04f 0c00 	mov.w	ip, #0
 800b9c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9ca:	f8d9 1000 	ldr.w	r1, [r9]
 800b9ce:	fa1f fb82 	uxth.w	fp, r2
 800b9d2:	b289      	uxth	r1, r1
 800b9d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9dc:	f8d9 2000 	ldr.w	r2, [r9]
 800b9e0:	4461      	add	r1, ip
 800b9e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9ee:	b289      	uxth	r1, r1
 800b9f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9f4:	4577      	cmp	r7, lr
 800b9f6:	f849 1b04 	str.w	r1, [r9], #4
 800b9fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9fe:	d8e2      	bhi.n	800b9c6 <__multiply+0xb2>
 800ba00:	9a01      	ldr	r2, [sp, #4]
 800ba02:	f845 c002 	str.w	ip, [r5, r2]
 800ba06:	9a03      	ldr	r2, [sp, #12]
 800ba08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	f1b9 0f00 	cmp.w	r9, #0
 800ba12:	d020      	beq.n	800ba56 <__multiply+0x142>
 800ba14:	6829      	ldr	r1, [r5, #0]
 800ba16:	f104 0c14 	add.w	ip, r4, #20
 800ba1a:	46ae      	mov	lr, r5
 800ba1c:	f04f 0a00 	mov.w	sl, #0
 800ba20:	f8bc b000 	ldrh.w	fp, [ip]
 800ba24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba28:	fb09 220b 	mla	r2, r9, fp, r2
 800ba2c:	4492      	add	sl, r2
 800ba2e:	b289      	uxth	r1, r1
 800ba30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba34:	f84e 1b04 	str.w	r1, [lr], #4
 800ba38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba3c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba40:	0c12      	lsrs	r2, r2, #16
 800ba42:	fb09 1102 	mla	r1, r9, r2, r1
 800ba46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba4a:	4567      	cmp	r7, ip
 800ba4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba50:	d8e6      	bhi.n	800ba20 <__multiply+0x10c>
 800ba52:	9a01      	ldr	r2, [sp, #4]
 800ba54:	50a9      	str	r1, [r5, r2]
 800ba56:	3504      	adds	r5, #4
 800ba58:	e79a      	b.n	800b990 <__multiply+0x7c>
 800ba5a:	3e01      	subs	r6, #1
 800ba5c:	e79c      	b.n	800b998 <__multiply+0x84>
 800ba5e:	bf00      	nop
 800ba60:	0800d1f0 	.word	0x0800d1f0
 800ba64:	0800d2e0 	.word	0x0800d2e0

0800ba68 <__pow5mult>:
 800ba68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba6c:	4615      	mov	r5, r2
 800ba6e:	f012 0203 	ands.w	r2, r2, #3
 800ba72:	4606      	mov	r6, r0
 800ba74:	460f      	mov	r7, r1
 800ba76:	d007      	beq.n	800ba88 <__pow5mult+0x20>
 800ba78:	4c25      	ldr	r4, [pc, #148]	; (800bb10 <__pow5mult+0xa8>)
 800ba7a:	3a01      	subs	r2, #1
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba82:	f7ff fe51 	bl	800b728 <__multadd>
 800ba86:	4607      	mov	r7, r0
 800ba88:	10ad      	asrs	r5, r5, #2
 800ba8a:	d03d      	beq.n	800bb08 <__pow5mult+0xa0>
 800ba8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba8e:	b97c      	cbnz	r4, 800bab0 <__pow5mult+0x48>
 800ba90:	2010      	movs	r0, #16
 800ba92:	f7fc f9a9 	bl	8007de8 <malloc>
 800ba96:	4602      	mov	r2, r0
 800ba98:	6270      	str	r0, [r6, #36]	; 0x24
 800ba9a:	b928      	cbnz	r0, 800baa8 <__pow5mult+0x40>
 800ba9c:	4b1d      	ldr	r3, [pc, #116]	; (800bb14 <__pow5mult+0xac>)
 800ba9e:	481e      	ldr	r0, [pc, #120]	; (800bb18 <__pow5mult+0xb0>)
 800baa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800baa4:	f000 fdea 	bl	800c67c <__assert_func>
 800baa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baac:	6004      	str	r4, [r0, #0]
 800baae:	60c4      	str	r4, [r0, #12]
 800bab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bab8:	b94c      	cbnz	r4, 800bace <__pow5mult+0x66>
 800baba:	f240 2171 	movw	r1, #625	; 0x271
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff12 	bl	800b8e8 <__i2b>
 800bac4:	2300      	movs	r3, #0
 800bac6:	f8c8 0008 	str.w	r0, [r8, #8]
 800baca:	4604      	mov	r4, r0
 800bacc:	6003      	str	r3, [r0, #0]
 800bace:	f04f 0900 	mov.w	r9, #0
 800bad2:	07eb      	lsls	r3, r5, #31
 800bad4:	d50a      	bpl.n	800baec <__pow5mult+0x84>
 800bad6:	4639      	mov	r1, r7
 800bad8:	4622      	mov	r2, r4
 800bada:	4630      	mov	r0, r6
 800badc:	f7ff ff1a 	bl	800b914 <__multiply>
 800bae0:	4639      	mov	r1, r7
 800bae2:	4680      	mov	r8, r0
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7ff fdfd 	bl	800b6e4 <_Bfree>
 800baea:	4647      	mov	r7, r8
 800baec:	106d      	asrs	r5, r5, #1
 800baee:	d00b      	beq.n	800bb08 <__pow5mult+0xa0>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	b938      	cbnz	r0, 800bb04 <__pow5mult+0x9c>
 800baf4:	4622      	mov	r2, r4
 800baf6:	4621      	mov	r1, r4
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7ff ff0b 	bl	800b914 <__multiply>
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	f8c0 9000 	str.w	r9, [r0]
 800bb04:	4604      	mov	r4, r0
 800bb06:	e7e4      	b.n	800bad2 <__pow5mult+0x6a>
 800bb08:	4638      	mov	r0, r7
 800bb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb0e:	bf00      	nop
 800bb10:	0800d430 	.word	0x0800d430
 800bb14:	0800d17e 	.word	0x0800d17e
 800bb18:	0800d2e0 	.word	0x0800d2e0

0800bb1c <__lshift>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	460c      	mov	r4, r1
 800bb22:	6849      	ldr	r1, [r1, #4]
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb2a:	68a3      	ldr	r3, [r4, #8]
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	4691      	mov	r9, r2
 800bb30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb34:	f108 0601 	add.w	r6, r8, #1
 800bb38:	42b3      	cmp	r3, r6
 800bb3a:	db0b      	blt.n	800bb54 <__lshift+0x38>
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff fd91 	bl	800b664 <_Balloc>
 800bb42:	4605      	mov	r5, r0
 800bb44:	b948      	cbnz	r0, 800bb5a <__lshift+0x3e>
 800bb46:	4602      	mov	r2, r0
 800bb48:	4b2a      	ldr	r3, [pc, #168]	; (800bbf4 <__lshift+0xd8>)
 800bb4a:	482b      	ldr	r0, [pc, #172]	; (800bbf8 <__lshift+0xdc>)
 800bb4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb50:	f000 fd94 	bl	800c67c <__assert_func>
 800bb54:	3101      	adds	r1, #1
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	e7ee      	b.n	800bb38 <__lshift+0x1c>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f100 0114 	add.w	r1, r0, #20
 800bb60:	f100 0210 	add.w	r2, r0, #16
 800bb64:	4618      	mov	r0, r3
 800bb66:	4553      	cmp	r3, sl
 800bb68:	db37      	blt.n	800bbda <__lshift+0xbe>
 800bb6a:	6920      	ldr	r0, [r4, #16]
 800bb6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb70:	f104 0314 	add.w	r3, r4, #20
 800bb74:	f019 091f 	ands.w	r9, r9, #31
 800bb78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb80:	d02f      	beq.n	800bbe2 <__lshift+0xc6>
 800bb82:	f1c9 0e20 	rsb	lr, r9, #32
 800bb86:	468a      	mov	sl, r1
 800bb88:	f04f 0c00 	mov.w	ip, #0
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	fa02 f209 	lsl.w	r2, r2, r9
 800bb92:	ea42 020c 	orr.w	r2, r2, ip
 800bb96:	f84a 2b04 	str.w	r2, [sl], #4
 800bb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9e:	4298      	cmp	r0, r3
 800bba0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bba4:	d8f2      	bhi.n	800bb8c <__lshift+0x70>
 800bba6:	1b03      	subs	r3, r0, r4
 800bba8:	3b15      	subs	r3, #21
 800bbaa:	f023 0303 	bic.w	r3, r3, #3
 800bbae:	3304      	adds	r3, #4
 800bbb0:	f104 0215 	add.w	r2, r4, #21
 800bbb4:	4290      	cmp	r0, r2
 800bbb6:	bf38      	it	cc
 800bbb8:	2304      	movcc	r3, #4
 800bbba:	f841 c003 	str.w	ip, [r1, r3]
 800bbbe:	f1bc 0f00 	cmp.w	ip, #0
 800bbc2:	d001      	beq.n	800bbc8 <__lshift+0xac>
 800bbc4:	f108 0602 	add.w	r6, r8, #2
 800bbc8:	3e01      	subs	r6, #1
 800bbca:	4638      	mov	r0, r7
 800bbcc:	612e      	str	r6, [r5, #16]
 800bbce:	4621      	mov	r1, r4
 800bbd0:	f7ff fd88 	bl	800b6e4 <_Bfree>
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbde:	3301      	adds	r3, #1
 800bbe0:	e7c1      	b.n	800bb66 <__lshift+0x4a>
 800bbe2:	3904      	subs	r1, #4
 800bbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbec:	4298      	cmp	r0, r3
 800bbee:	d8f9      	bhi.n	800bbe4 <__lshift+0xc8>
 800bbf0:	e7ea      	b.n	800bbc8 <__lshift+0xac>
 800bbf2:	bf00      	nop
 800bbf4:	0800d1f0 	.word	0x0800d1f0
 800bbf8:	0800d2e0 	.word	0x0800d2e0

0800bbfc <__mcmp>:
 800bbfc:	b530      	push	{r4, r5, lr}
 800bbfe:	6902      	ldr	r2, [r0, #16]
 800bc00:	690c      	ldr	r4, [r1, #16]
 800bc02:	1b12      	subs	r2, r2, r4
 800bc04:	d10e      	bne.n	800bc24 <__mcmp+0x28>
 800bc06:	f100 0314 	add.w	r3, r0, #20
 800bc0a:	3114      	adds	r1, #20
 800bc0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc1c:	42a5      	cmp	r5, r4
 800bc1e:	d003      	beq.n	800bc28 <__mcmp+0x2c>
 800bc20:	d305      	bcc.n	800bc2e <__mcmp+0x32>
 800bc22:	2201      	movs	r2, #1
 800bc24:	4610      	mov	r0, r2
 800bc26:	bd30      	pop	{r4, r5, pc}
 800bc28:	4283      	cmp	r3, r0
 800bc2a:	d3f3      	bcc.n	800bc14 <__mcmp+0x18>
 800bc2c:	e7fa      	b.n	800bc24 <__mcmp+0x28>
 800bc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc32:	e7f7      	b.n	800bc24 <__mcmp+0x28>

0800bc34 <__mdiff>:
 800bc34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	460c      	mov	r4, r1
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4690      	mov	r8, r2
 800bc42:	f7ff ffdb 	bl	800bbfc <__mcmp>
 800bc46:	1e05      	subs	r5, r0, #0
 800bc48:	d110      	bne.n	800bc6c <__mdiff+0x38>
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7ff fd09 	bl	800b664 <_Balloc>
 800bc52:	b930      	cbnz	r0, 800bc62 <__mdiff+0x2e>
 800bc54:	4b3a      	ldr	r3, [pc, #232]	; (800bd40 <__mdiff+0x10c>)
 800bc56:	4602      	mov	r2, r0
 800bc58:	f240 2132 	movw	r1, #562	; 0x232
 800bc5c:	4839      	ldr	r0, [pc, #228]	; (800bd44 <__mdiff+0x110>)
 800bc5e:	f000 fd0d 	bl	800c67c <__assert_func>
 800bc62:	2301      	movs	r3, #1
 800bc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	bfa4      	itt	ge
 800bc6e:	4643      	movge	r3, r8
 800bc70:	46a0      	movge	r8, r4
 800bc72:	4630      	mov	r0, r6
 800bc74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc78:	bfa6      	itte	ge
 800bc7a:	461c      	movge	r4, r3
 800bc7c:	2500      	movge	r5, #0
 800bc7e:	2501      	movlt	r5, #1
 800bc80:	f7ff fcf0 	bl	800b664 <_Balloc>
 800bc84:	b920      	cbnz	r0, 800bc90 <__mdiff+0x5c>
 800bc86:	4b2e      	ldr	r3, [pc, #184]	; (800bd40 <__mdiff+0x10c>)
 800bc88:	4602      	mov	r2, r0
 800bc8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc8e:	e7e5      	b.n	800bc5c <__mdiff+0x28>
 800bc90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc94:	6926      	ldr	r6, [r4, #16]
 800bc96:	60c5      	str	r5, [r0, #12]
 800bc98:	f104 0914 	add.w	r9, r4, #20
 800bc9c:	f108 0514 	add.w	r5, r8, #20
 800bca0:	f100 0e14 	add.w	lr, r0, #20
 800bca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bcac:	f108 0210 	add.w	r2, r8, #16
 800bcb0:	46f2      	mov	sl, lr
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcbc:	fa1f f883 	uxth.w	r8, r3
 800bcc0:	fa11 f18b 	uxtah	r1, r1, fp
 800bcc4:	0c1b      	lsrs	r3, r3, #16
 800bcc6:	eba1 0808 	sub.w	r8, r1, r8
 800bcca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcd2:	fa1f f888 	uxth.w	r8, r8
 800bcd6:	1419      	asrs	r1, r3, #16
 800bcd8:	454e      	cmp	r6, r9
 800bcda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcde:	f84a 3b04 	str.w	r3, [sl], #4
 800bce2:	d8e7      	bhi.n	800bcb4 <__mdiff+0x80>
 800bce4:	1b33      	subs	r3, r6, r4
 800bce6:	3b15      	subs	r3, #21
 800bce8:	f023 0303 	bic.w	r3, r3, #3
 800bcec:	3304      	adds	r3, #4
 800bcee:	3415      	adds	r4, #21
 800bcf0:	42a6      	cmp	r6, r4
 800bcf2:	bf38      	it	cc
 800bcf4:	2304      	movcc	r3, #4
 800bcf6:	441d      	add	r5, r3
 800bcf8:	4473      	add	r3, lr
 800bcfa:	469e      	mov	lr, r3
 800bcfc:	462e      	mov	r6, r5
 800bcfe:	4566      	cmp	r6, ip
 800bd00:	d30e      	bcc.n	800bd20 <__mdiff+0xec>
 800bd02:	f10c 0203 	add.w	r2, ip, #3
 800bd06:	1b52      	subs	r2, r2, r5
 800bd08:	f022 0203 	bic.w	r2, r2, #3
 800bd0c:	3d03      	subs	r5, #3
 800bd0e:	45ac      	cmp	ip, r5
 800bd10:	bf38      	it	cc
 800bd12:	2200      	movcc	r2, #0
 800bd14:	441a      	add	r2, r3
 800bd16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd1a:	b17b      	cbz	r3, 800bd3c <__mdiff+0x108>
 800bd1c:	6107      	str	r7, [r0, #16]
 800bd1e:	e7a3      	b.n	800bc68 <__mdiff+0x34>
 800bd20:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd24:	fa11 f288 	uxtah	r2, r1, r8
 800bd28:	1414      	asrs	r4, r2, #16
 800bd2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd2e:	b292      	uxth	r2, r2
 800bd30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd34:	f84e 2b04 	str.w	r2, [lr], #4
 800bd38:	1421      	asrs	r1, r4, #16
 800bd3a:	e7e0      	b.n	800bcfe <__mdiff+0xca>
 800bd3c:	3f01      	subs	r7, #1
 800bd3e:	e7ea      	b.n	800bd16 <__mdiff+0xe2>
 800bd40:	0800d1f0 	.word	0x0800d1f0
 800bd44:	0800d2e0 	.word	0x0800d2e0

0800bd48 <__ulp>:
 800bd48:	b082      	sub	sp, #8
 800bd4a:	ed8d 0b00 	vstr	d0, [sp]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	4912      	ldr	r1, [pc, #72]	; (800bd9c <__ulp+0x54>)
 800bd52:	4019      	ands	r1, r3
 800bd54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	dd05      	ble.n	800bd68 <__ulp+0x20>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	ec43 2b10 	vmov	d0, r2, r3
 800bd64:	b002      	add	sp, #8
 800bd66:	4770      	bx	lr
 800bd68:	4249      	negs	r1, r1
 800bd6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd72:	f04f 0200 	mov.w	r2, #0
 800bd76:	f04f 0300 	mov.w	r3, #0
 800bd7a:	da04      	bge.n	800bd86 <__ulp+0x3e>
 800bd7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd80:	fa41 f300 	asr.w	r3, r1, r0
 800bd84:	e7ec      	b.n	800bd60 <__ulp+0x18>
 800bd86:	f1a0 0114 	sub.w	r1, r0, #20
 800bd8a:	291e      	cmp	r1, #30
 800bd8c:	bfda      	itte	le
 800bd8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd92:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd96:	2101      	movgt	r1, #1
 800bd98:	460a      	mov	r2, r1
 800bd9a:	e7e1      	b.n	800bd60 <__ulp+0x18>
 800bd9c:	7ff00000 	.word	0x7ff00000

0800bda0 <__b2d>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	6905      	ldr	r5, [r0, #16]
 800bda4:	f100 0714 	add.w	r7, r0, #20
 800bda8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bdac:	1f2e      	subs	r6, r5, #4
 800bdae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f7ff fd48 	bl	800b848 <__hi0bits>
 800bdb8:	f1c0 0320 	rsb	r3, r0, #32
 800bdbc:	280a      	cmp	r0, #10
 800bdbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be3c <__b2d+0x9c>
 800bdc2:	600b      	str	r3, [r1, #0]
 800bdc4:	dc14      	bgt.n	800bdf0 <__b2d+0x50>
 800bdc6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdca:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdce:	42b7      	cmp	r7, r6
 800bdd0:	ea41 030c 	orr.w	r3, r1, ip
 800bdd4:	bf34      	ite	cc
 800bdd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdda:	2100      	movcs	r1, #0
 800bddc:	3015      	adds	r0, #21
 800bdde:	fa04 f000 	lsl.w	r0, r4, r0
 800bde2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bde6:	ea40 0201 	orr.w	r2, r0, r1
 800bdea:	ec43 2b10 	vmov	d0, r2, r3
 800bdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf0:	42b7      	cmp	r7, r6
 800bdf2:	bf3a      	itte	cc
 800bdf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdf8:	f1a5 0608 	subcc.w	r6, r5, #8
 800bdfc:	2100      	movcs	r1, #0
 800bdfe:	380b      	subs	r0, #11
 800be00:	d017      	beq.n	800be32 <__b2d+0x92>
 800be02:	f1c0 0c20 	rsb	ip, r0, #32
 800be06:	fa04 f500 	lsl.w	r5, r4, r0
 800be0a:	42be      	cmp	r6, r7
 800be0c:	fa21 f40c 	lsr.w	r4, r1, ip
 800be10:	ea45 0504 	orr.w	r5, r5, r4
 800be14:	bf8c      	ite	hi
 800be16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be1a:	2400      	movls	r4, #0
 800be1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be20:	fa01 f000 	lsl.w	r0, r1, r0
 800be24:	fa24 f40c 	lsr.w	r4, r4, ip
 800be28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be2c:	ea40 0204 	orr.w	r2, r0, r4
 800be30:	e7db      	b.n	800bdea <__b2d+0x4a>
 800be32:	ea44 030c 	orr.w	r3, r4, ip
 800be36:	460a      	mov	r2, r1
 800be38:	e7d7      	b.n	800bdea <__b2d+0x4a>
 800be3a:	bf00      	nop
 800be3c:	3ff00000 	.word	0x3ff00000

0800be40 <__d2b>:
 800be40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be44:	4689      	mov	r9, r1
 800be46:	2101      	movs	r1, #1
 800be48:	ec57 6b10 	vmov	r6, r7, d0
 800be4c:	4690      	mov	r8, r2
 800be4e:	f7ff fc09 	bl	800b664 <_Balloc>
 800be52:	4604      	mov	r4, r0
 800be54:	b930      	cbnz	r0, 800be64 <__d2b+0x24>
 800be56:	4602      	mov	r2, r0
 800be58:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <__d2b+0xb0>)
 800be5a:	4826      	ldr	r0, [pc, #152]	; (800bef4 <__d2b+0xb4>)
 800be5c:	f240 310a 	movw	r1, #778	; 0x30a
 800be60:	f000 fc0c 	bl	800c67c <__assert_func>
 800be64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be6c:	bb35      	cbnz	r5, 800bebc <__d2b+0x7c>
 800be6e:	2e00      	cmp	r6, #0
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	d028      	beq.n	800bec6 <__d2b+0x86>
 800be74:	4668      	mov	r0, sp
 800be76:	9600      	str	r6, [sp, #0]
 800be78:	f7ff fd06 	bl	800b888 <__lo0bits>
 800be7c:	9900      	ldr	r1, [sp, #0]
 800be7e:	b300      	cbz	r0, 800bec2 <__d2b+0x82>
 800be80:	9a01      	ldr	r2, [sp, #4]
 800be82:	f1c0 0320 	rsb	r3, r0, #32
 800be86:	fa02 f303 	lsl.w	r3, r2, r3
 800be8a:	430b      	orrs	r3, r1
 800be8c:	40c2      	lsrs	r2, r0
 800be8e:	6163      	str	r3, [r4, #20]
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	61a3      	str	r3, [r4, #24]
 800be96:	2b00      	cmp	r3, #0
 800be98:	bf14      	ite	ne
 800be9a:	2202      	movne	r2, #2
 800be9c:	2201      	moveq	r2, #1
 800be9e:	6122      	str	r2, [r4, #16]
 800bea0:	b1d5      	cbz	r5, 800bed8 <__d2b+0x98>
 800bea2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bea6:	4405      	add	r5, r0
 800bea8:	f8c9 5000 	str.w	r5, [r9]
 800beac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800beb0:	f8c8 0000 	str.w	r0, [r8]
 800beb4:	4620      	mov	r0, r4
 800beb6:	b003      	add	sp, #12
 800beb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bec0:	e7d5      	b.n	800be6e <__d2b+0x2e>
 800bec2:	6161      	str	r1, [r4, #20]
 800bec4:	e7e5      	b.n	800be92 <__d2b+0x52>
 800bec6:	a801      	add	r0, sp, #4
 800bec8:	f7ff fcde 	bl	800b888 <__lo0bits>
 800becc:	9b01      	ldr	r3, [sp, #4]
 800bece:	6163      	str	r3, [r4, #20]
 800bed0:	2201      	movs	r2, #1
 800bed2:	6122      	str	r2, [r4, #16]
 800bed4:	3020      	adds	r0, #32
 800bed6:	e7e3      	b.n	800bea0 <__d2b+0x60>
 800bed8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bee0:	f8c9 0000 	str.w	r0, [r9]
 800bee4:	6918      	ldr	r0, [r3, #16]
 800bee6:	f7ff fcaf 	bl	800b848 <__hi0bits>
 800beea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800beee:	e7df      	b.n	800beb0 <__d2b+0x70>
 800bef0:	0800d1f0 	.word	0x0800d1f0
 800bef4:	0800d2e0 	.word	0x0800d2e0

0800bef8 <__ratio>:
 800bef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	4688      	mov	r8, r1
 800befe:	4669      	mov	r1, sp
 800bf00:	4681      	mov	r9, r0
 800bf02:	f7ff ff4d 	bl	800bda0 <__b2d>
 800bf06:	a901      	add	r1, sp, #4
 800bf08:	4640      	mov	r0, r8
 800bf0a:	ec55 4b10 	vmov	r4, r5, d0
 800bf0e:	f7ff ff47 	bl	800bda0 <__b2d>
 800bf12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf1a:	eba3 0c02 	sub.w	ip, r3, r2
 800bf1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf22:	1a9b      	subs	r3, r3, r2
 800bf24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf28:	ec51 0b10 	vmov	r0, r1, d0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	bfd6      	itet	le
 800bf30:	460a      	movle	r2, r1
 800bf32:	462a      	movgt	r2, r5
 800bf34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf38:	468b      	mov	fp, r1
 800bf3a:	462f      	mov	r7, r5
 800bf3c:	bfd4      	ite	le
 800bf3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf46:	4620      	mov	r0, r4
 800bf48:	ee10 2a10 	vmov	r2, s0
 800bf4c:	465b      	mov	r3, fp
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 fc54 	bl	80007fc <__aeabi_ddiv>
 800bf54:	ec41 0b10 	vmov	d0, r0, r1
 800bf58:	b003      	add	sp, #12
 800bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf5e <__copybits>:
 800bf5e:	3901      	subs	r1, #1
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	1149      	asrs	r1, r1, #5
 800bf64:	6914      	ldr	r4, [r2, #16]
 800bf66:	3101      	adds	r1, #1
 800bf68:	f102 0314 	add.w	r3, r2, #20
 800bf6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf74:	1f05      	subs	r5, r0, #4
 800bf76:	42a3      	cmp	r3, r4
 800bf78:	d30c      	bcc.n	800bf94 <__copybits+0x36>
 800bf7a:	1aa3      	subs	r3, r4, r2
 800bf7c:	3b11      	subs	r3, #17
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	3211      	adds	r2, #17
 800bf84:	42a2      	cmp	r2, r4
 800bf86:	bf88      	it	hi
 800bf88:	2300      	movhi	r3, #0
 800bf8a:	4418      	add	r0, r3
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4288      	cmp	r0, r1
 800bf90:	d305      	bcc.n	800bf9e <__copybits+0x40>
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf98:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf9c:	e7eb      	b.n	800bf76 <__copybits+0x18>
 800bf9e:	f840 3b04 	str.w	r3, [r0], #4
 800bfa2:	e7f4      	b.n	800bf8e <__copybits+0x30>

0800bfa4 <__any_on>:
 800bfa4:	f100 0214 	add.w	r2, r0, #20
 800bfa8:	6900      	ldr	r0, [r0, #16]
 800bfaa:	114b      	asrs	r3, r1, #5
 800bfac:	4298      	cmp	r0, r3
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	db11      	blt.n	800bfd6 <__any_on+0x32>
 800bfb2:	dd0a      	ble.n	800bfca <__any_on+0x26>
 800bfb4:	f011 011f 	ands.w	r1, r1, #31
 800bfb8:	d007      	beq.n	800bfca <__any_on+0x26>
 800bfba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfbe:	fa24 f001 	lsr.w	r0, r4, r1
 800bfc2:	fa00 f101 	lsl.w	r1, r0, r1
 800bfc6:	428c      	cmp	r4, r1
 800bfc8:	d10b      	bne.n	800bfe2 <__any_on+0x3e>
 800bfca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d803      	bhi.n	800bfda <__any_on+0x36>
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	bd10      	pop	{r4, pc}
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	e7f7      	b.n	800bfca <__any_on+0x26>
 800bfda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d0f5      	beq.n	800bfce <__any_on+0x2a>
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	e7f6      	b.n	800bfd4 <__any_on+0x30>

0800bfe6 <_calloc_r>:
 800bfe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfe8:	fba1 2402 	umull	r2, r4, r1, r2
 800bfec:	b94c      	cbnz	r4, 800c002 <_calloc_r+0x1c>
 800bfee:	4611      	mov	r1, r2
 800bff0:	9201      	str	r2, [sp, #4]
 800bff2:	f7fb ff8b 	bl	8007f0c <_malloc_r>
 800bff6:	9a01      	ldr	r2, [sp, #4]
 800bff8:	4605      	mov	r5, r0
 800bffa:	b930      	cbnz	r0, 800c00a <_calloc_r+0x24>
 800bffc:	4628      	mov	r0, r5
 800bffe:	b003      	add	sp, #12
 800c000:	bd30      	pop	{r4, r5, pc}
 800c002:	220c      	movs	r2, #12
 800c004:	6002      	str	r2, [r0, #0]
 800c006:	2500      	movs	r5, #0
 800c008:	e7f8      	b.n	800bffc <_calloc_r+0x16>
 800c00a:	4621      	mov	r1, r4
 800c00c:	f7fb ff0a 	bl	8007e24 <memset>
 800c010:	e7f4      	b.n	800bffc <_calloc_r+0x16>

0800c012 <__ssputs_r>:
 800c012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c016:	688e      	ldr	r6, [r1, #8]
 800c018:	429e      	cmp	r6, r3
 800c01a:	4682      	mov	sl, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	4690      	mov	r8, r2
 800c020:	461f      	mov	r7, r3
 800c022:	d838      	bhi.n	800c096 <__ssputs_r+0x84>
 800c024:	898a      	ldrh	r2, [r1, #12]
 800c026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02a:	d032      	beq.n	800c092 <__ssputs_r+0x80>
 800c02c:	6825      	ldr	r5, [r4, #0]
 800c02e:	6909      	ldr	r1, [r1, #16]
 800c030:	eba5 0901 	sub.w	r9, r5, r1
 800c034:	6965      	ldr	r5, [r4, #20]
 800c036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c03e:	3301      	adds	r3, #1
 800c040:	444b      	add	r3, r9
 800c042:	106d      	asrs	r5, r5, #1
 800c044:	429d      	cmp	r5, r3
 800c046:	bf38      	it	cc
 800c048:	461d      	movcc	r5, r3
 800c04a:	0553      	lsls	r3, r2, #21
 800c04c:	d531      	bpl.n	800c0b2 <__ssputs_r+0xa0>
 800c04e:	4629      	mov	r1, r5
 800c050:	f7fb ff5c 	bl	8007f0c <_malloc_r>
 800c054:	4606      	mov	r6, r0
 800c056:	b950      	cbnz	r0, 800c06e <__ssputs_r+0x5c>
 800c058:	230c      	movs	r3, #12
 800c05a:	f8ca 3000 	str.w	r3, [sl]
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	464a      	mov	r2, r9
 800c072:	f7fb fec9 	bl	8007e08 <memcpy>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	6126      	str	r6, [r4, #16]
 800c084:	6165      	str	r5, [r4, #20]
 800c086:	444e      	add	r6, r9
 800c088:	eba5 0509 	sub.w	r5, r5, r9
 800c08c:	6026      	str	r6, [r4, #0]
 800c08e:	60a5      	str	r5, [r4, #8]
 800c090:	463e      	mov	r6, r7
 800c092:	42be      	cmp	r6, r7
 800c094:	d900      	bls.n	800c098 <__ssputs_r+0x86>
 800c096:	463e      	mov	r6, r7
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	4632      	mov	r2, r6
 800c09c:	4641      	mov	r1, r8
 800c09e:	f000 fb61 	bl	800c764 <memmove>
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	1b9b      	subs	r3, r3, r6
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	4433      	add	r3, r6
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	e7db      	b.n	800c06a <__ssputs_r+0x58>
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	f000 fb70 	bl	800c798 <_realloc_r>
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1e1      	bne.n	800c082 <__ssputs_r+0x70>
 800c0be:	6921      	ldr	r1, [r4, #16]
 800c0c0:	4650      	mov	r0, sl
 800c0c2:	f7fb feb7 	bl	8007e34 <_free_r>
 800c0c6:	e7c7      	b.n	800c058 <__ssputs_r+0x46>

0800c0c8 <_svfiprintf_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4698      	mov	r8, r3
 800c0ce:	898b      	ldrh	r3, [r1, #12]
 800c0d0:	061b      	lsls	r3, r3, #24
 800c0d2:	b09d      	sub	sp, #116	; 0x74
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	d50e      	bpl.n	800c0fa <_svfiprintf_r+0x32>
 800c0dc:	690b      	ldr	r3, [r1, #16]
 800c0de:	b963      	cbnz	r3, 800c0fa <_svfiprintf_r+0x32>
 800c0e0:	2140      	movs	r1, #64	; 0x40
 800c0e2:	f7fb ff13 	bl	8007f0c <_malloc_r>
 800c0e6:	6028      	str	r0, [r5, #0]
 800c0e8:	6128      	str	r0, [r5, #16]
 800c0ea:	b920      	cbnz	r0, 800c0f6 <_svfiprintf_r+0x2e>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e0d1      	b.n	800c29a <_svfiprintf_r+0x1d2>
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	616b      	str	r3, [r5, #20]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fe:	2320      	movs	r3, #32
 800c100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c104:	f8cd 800c 	str.w	r8, [sp, #12]
 800c108:	2330      	movs	r3, #48	; 0x30
 800c10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b4 <_svfiprintf_r+0x1ec>
 800c10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c112:	f04f 0901 	mov.w	r9, #1
 800c116:	4623      	mov	r3, r4
 800c118:	469a      	mov	sl, r3
 800c11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c11e:	b10a      	cbz	r2, 800c124 <_svfiprintf_r+0x5c>
 800c120:	2a25      	cmp	r2, #37	; 0x25
 800c122:	d1f9      	bne.n	800c118 <_svfiprintf_r+0x50>
 800c124:	ebba 0b04 	subs.w	fp, sl, r4
 800c128:	d00b      	beq.n	800c142 <_svfiprintf_r+0x7a>
 800c12a:	465b      	mov	r3, fp
 800c12c:	4622      	mov	r2, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff ff6e 	bl	800c012 <__ssputs_r>
 800c136:	3001      	adds	r0, #1
 800c138:	f000 80aa 	beq.w	800c290 <_svfiprintf_r+0x1c8>
 800c13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c13e:	445a      	add	r2, fp
 800c140:	9209      	str	r2, [sp, #36]	; 0x24
 800c142:	f89a 3000 	ldrb.w	r3, [sl]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80a2 	beq.w	800c290 <_svfiprintf_r+0x1c8>
 800c14c:	2300      	movs	r3, #0
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c156:	f10a 0a01 	add.w	sl, sl, #1
 800c15a:	9304      	str	r3, [sp, #16]
 800c15c:	9307      	str	r3, [sp, #28]
 800c15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c162:	931a      	str	r3, [sp, #104]	; 0x68
 800c164:	4654      	mov	r4, sl
 800c166:	2205      	movs	r2, #5
 800c168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16c:	4851      	ldr	r0, [pc, #324]	; (800c2b4 <_svfiprintf_r+0x1ec>)
 800c16e:	f7f4 f80f 	bl	8000190 <memchr>
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	b9d8      	cbnz	r0, 800c1ae <_svfiprintf_r+0xe6>
 800c176:	06d0      	lsls	r0, r2, #27
 800c178:	bf44      	itt	mi
 800c17a:	2320      	movmi	r3, #32
 800c17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c180:	0711      	lsls	r1, r2, #28
 800c182:	bf44      	itt	mi
 800c184:	232b      	movmi	r3, #43	; 0x2b
 800c186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18a:	f89a 3000 	ldrb.w	r3, [sl]
 800c18e:	2b2a      	cmp	r3, #42	; 0x2a
 800c190:	d015      	beq.n	800c1be <_svfiprintf_r+0xf6>
 800c192:	9a07      	ldr	r2, [sp, #28]
 800c194:	4654      	mov	r4, sl
 800c196:	2000      	movs	r0, #0
 800c198:	f04f 0c0a 	mov.w	ip, #10
 800c19c:	4621      	mov	r1, r4
 800c19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a2:	3b30      	subs	r3, #48	; 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d94e      	bls.n	800c246 <_svfiprintf_r+0x17e>
 800c1a8:	b1b0      	cbz	r0, 800c1d8 <_svfiprintf_r+0x110>
 800c1aa:	9207      	str	r2, [sp, #28]
 800c1ac:	e014      	b.n	800c1d8 <_svfiprintf_r+0x110>
 800c1ae:	eba0 0308 	sub.w	r3, r0, r8
 800c1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	46a2      	mov	sl, r4
 800c1bc:	e7d2      	b.n	800c164 <_svfiprintf_r+0x9c>
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	9103      	str	r1, [sp, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfbb      	ittet	lt
 800c1ca:	425b      	neglt	r3, r3
 800c1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d0:	9307      	strge	r3, [sp, #28]
 800c1d2:	9307      	strlt	r3, [sp, #28]
 800c1d4:	bfb8      	it	lt
 800c1d6:	9204      	strlt	r2, [sp, #16]
 800c1d8:	7823      	ldrb	r3, [r4, #0]
 800c1da:	2b2e      	cmp	r3, #46	; 0x2e
 800c1dc:	d10c      	bne.n	800c1f8 <_svfiprintf_r+0x130>
 800c1de:	7863      	ldrb	r3, [r4, #1]
 800c1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e2:	d135      	bne.n	800c250 <_svfiprintf_r+0x188>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9203      	str	r2, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfb8      	it	lt
 800c1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f4:	3402      	adds	r4, #2
 800c1f6:	9305      	str	r3, [sp, #20]
 800c1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c4 <_svfiprintf_r+0x1fc>
 800c1fc:	7821      	ldrb	r1, [r4, #0]
 800c1fe:	2203      	movs	r2, #3
 800c200:	4650      	mov	r0, sl
 800c202:	f7f3 ffc5 	bl	8000190 <memchr>
 800c206:	b140      	cbz	r0, 800c21a <_svfiprintf_r+0x152>
 800c208:	2340      	movs	r3, #64	; 0x40
 800c20a:	eba0 000a 	sub.w	r0, r0, sl
 800c20e:	fa03 f000 	lsl.w	r0, r3, r0
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	4303      	orrs	r3, r0
 800c216:	3401      	adds	r4, #1
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21e:	4826      	ldr	r0, [pc, #152]	; (800c2b8 <_svfiprintf_r+0x1f0>)
 800c220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c224:	2206      	movs	r2, #6
 800c226:	f7f3 ffb3 	bl	8000190 <memchr>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d038      	beq.n	800c2a0 <_svfiprintf_r+0x1d8>
 800c22e:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <_svfiprintf_r+0x1f4>)
 800c230:	bb1b      	cbnz	r3, 800c27a <_svfiprintf_r+0x1b2>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	3307      	adds	r3, #7
 800c236:	f023 0307 	bic.w	r3, r3, #7
 800c23a:	3308      	adds	r3, #8
 800c23c:	9303      	str	r3, [sp, #12]
 800c23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c240:	4433      	add	r3, r6
 800c242:	9309      	str	r3, [sp, #36]	; 0x24
 800c244:	e767      	b.n	800c116 <_svfiprintf_r+0x4e>
 800c246:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24a:	460c      	mov	r4, r1
 800c24c:	2001      	movs	r0, #1
 800c24e:	e7a5      	b.n	800c19c <_svfiprintf_r+0xd4>
 800c250:	2300      	movs	r3, #0
 800c252:	3401      	adds	r4, #1
 800c254:	9305      	str	r3, [sp, #20]
 800c256:	4619      	mov	r1, r3
 800c258:	f04f 0c0a 	mov.w	ip, #10
 800c25c:	4620      	mov	r0, r4
 800c25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c262:	3a30      	subs	r2, #48	; 0x30
 800c264:	2a09      	cmp	r2, #9
 800c266:	d903      	bls.n	800c270 <_svfiprintf_r+0x1a8>
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d0c5      	beq.n	800c1f8 <_svfiprintf_r+0x130>
 800c26c:	9105      	str	r1, [sp, #20]
 800c26e:	e7c3      	b.n	800c1f8 <_svfiprintf_r+0x130>
 800c270:	fb0c 2101 	mla	r1, ip, r1, r2
 800c274:	4604      	mov	r4, r0
 800c276:	2301      	movs	r3, #1
 800c278:	e7f0      	b.n	800c25c <_svfiprintf_r+0x194>
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	462a      	mov	r2, r5
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <_svfiprintf_r+0x1f8>)
 800c282:	a904      	add	r1, sp, #16
 800c284:	4638      	mov	r0, r7
 800c286:	f7fb ff55 	bl	8008134 <_printf_float>
 800c28a:	1c42      	adds	r2, r0, #1
 800c28c:	4606      	mov	r6, r0
 800c28e:	d1d6      	bne.n	800c23e <_svfiprintf_r+0x176>
 800c290:	89ab      	ldrh	r3, [r5, #12]
 800c292:	065b      	lsls	r3, r3, #25
 800c294:	f53f af2c 	bmi.w	800c0f0 <_svfiprintf_r+0x28>
 800c298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29a:	b01d      	add	sp, #116	; 0x74
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a0:	ab03      	add	r3, sp, #12
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	462a      	mov	r2, r5
 800c2a6:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <_svfiprintf_r+0x1f8>)
 800c2a8:	a904      	add	r1, sp, #16
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f7fc f9e6 	bl	800867c <_printf_i>
 800c2b0:	e7eb      	b.n	800c28a <_svfiprintf_r+0x1c2>
 800c2b2:	bf00      	nop
 800c2b4:	0800d43c 	.word	0x0800d43c
 800c2b8:	0800d446 	.word	0x0800d446
 800c2bc:	08008135 	.word	0x08008135
 800c2c0:	0800c013 	.word	0x0800c013
 800c2c4:	0800d442 	.word	0x0800d442

0800c2c8 <__sfputc_r>:
 800c2c8:	6893      	ldr	r3, [r2, #8]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	b410      	push	{r4}
 800c2d0:	6093      	str	r3, [r2, #8]
 800c2d2:	da08      	bge.n	800c2e6 <__sfputc_r+0x1e>
 800c2d4:	6994      	ldr	r4, [r2, #24]
 800c2d6:	42a3      	cmp	r3, r4
 800c2d8:	db01      	blt.n	800c2de <__sfputc_r+0x16>
 800c2da:	290a      	cmp	r1, #10
 800c2dc:	d103      	bne.n	800c2e6 <__sfputc_r+0x1e>
 800c2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e2:	f7fd bcd5 	b.w	8009c90 <__swbuf_r>
 800c2e6:	6813      	ldr	r3, [r2, #0]
 800c2e8:	1c58      	adds	r0, r3, #1
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	7019      	strb	r1, [r3, #0]
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <__sfputs_r>:
 800c2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	18d5      	adds	r5, r2, r3
 800c300:	42ac      	cmp	r4, r5
 800c302:	d101      	bne.n	800c308 <__sfputs_r+0x12>
 800c304:	2000      	movs	r0, #0
 800c306:	e007      	b.n	800c318 <__sfputs_r+0x22>
 800c308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30c:	463a      	mov	r2, r7
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ffda 	bl	800c2c8 <__sfputc_r>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d1f3      	bne.n	800c300 <__sfputs_r+0xa>
 800c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c31c <_vfiprintf_r>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	460d      	mov	r5, r1
 800c322:	b09d      	sub	sp, #116	; 0x74
 800c324:	4614      	mov	r4, r2
 800c326:	4698      	mov	r8, r3
 800c328:	4606      	mov	r6, r0
 800c32a:	b118      	cbz	r0, 800c334 <_vfiprintf_r+0x18>
 800c32c:	6983      	ldr	r3, [r0, #24]
 800c32e:	b90b      	cbnz	r3, 800c334 <_vfiprintf_r+0x18>
 800c330:	f7fe fd02 	bl	800ad38 <__sinit>
 800c334:	4b89      	ldr	r3, [pc, #548]	; (800c55c <_vfiprintf_r+0x240>)
 800c336:	429d      	cmp	r5, r3
 800c338:	d11b      	bne.n	800c372 <_vfiprintf_r+0x56>
 800c33a:	6875      	ldr	r5, [r6, #4]
 800c33c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c33e:	07d9      	lsls	r1, r3, #31
 800c340:	d405      	bmi.n	800c34e <_vfiprintf_r+0x32>
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	059a      	lsls	r2, r3, #22
 800c346:	d402      	bmi.n	800c34e <_vfiprintf_r+0x32>
 800c348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c34a:	f7ff f906 	bl	800b55a <__retarget_lock_acquire_recursive>
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	071b      	lsls	r3, r3, #28
 800c352:	d501      	bpl.n	800c358 <_vfiprintf_r+0x3c>
 800c354:	692b      	ldr	r3, [r5, #16]
 800c356:	b9eb      	cbnz	r3, 800c394 <_vfiprintf_r+0x78>
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7fd fcea 	bl	8009d34 <__swsetup_r>
 800c360:	b1c0      	cbz	r0, 800c394 <_vfiprintf_r+0x78>
 800c362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c364:	07dc      	lsls	r4, r3, #31
 800c366:	d50e      	bpl.n	800c386 <_vfiprintf_r+0x6a>
 800c368:	f04f 30ff 	mov.w	r0, #4294967295
 800c36c:	b01d      	add	sp, #116	; 0x74
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	4b7b      	ldr	r3, [pc, #492]	; (800c560 <_vfiprintf_r+0x244>)
 800c374:	429d      	cmp	r5, r3
 800c376:	d101      	bne.n	800c37c <_vfiprintf_r+0x60>
 800c378:	68b5      	ldr	r5, [r6, #8]
 800c37a:	e7df      	b.n	800c33c <_vfiprintf_r+0x20>
 800c37c:	4b79      	ldr	r3, [pc, #484]	; (800c564 <_vfiprintf_r+0x248>)
 800c37e:	429d      	cmp	r5, r3
 800c380:	bf08      	it	eq
 800c382:	68f5      	ldreq	r5, [r6, #12]
 800c384:	e7da      	b.n	800c33c <_vfiprintf_r+0x20>
 800c386:	89ab      	ldrh	r3, [r5, #12]
 800c388:	0598      	lsls	r0, r3, #22
 800c38a:	d4ed      	bmi.n	800c368 <_vfiprintf_r+0x4c>
 800c38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c38e:	f7ff f8e5 	bl	800b55c <__retarget_lock_release_recursive>
 800c392:	e7e9      	b.n	800c368 <_vfiprintf_r+0x4c>
 800c394:	2300      	movs	r3, #0
 800c396:	9309      	str	r3, [sp, #36]	; 0x24
 800c398:	2320      	movs	r3, #32
 800c39a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3a2:	2330      	movs	r3, #48	; 0x30
 800c3a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c568 <_vfiprintf_r+0x24c>
 800c3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3ac:	f04f 0901 	mov.w	r9, #1
 800c3b0:	4623      	mov	r3, r4
 800c3b2:	469a      	mov	sl, r3
 800c3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3b8:	b10a      	cbz	r2, 800c3be <_vfiprintf_r+0xa2>
 800c3ba:	2a25      	cmp	r2, #37	; 0x25
 800c3bc:	d1f9      	bne.n	800c3b2 <_vfiprintf_r+0x96>
 800c3be:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c2:	d00b      	beq.n	800c3dc <_vfiprintf_r+0xc0>
 800c3c4:	465b      	mov	r3, fp
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7ff ff93 	bl	800c2f6 <__sfputs_r>
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f000 80aa 	beq.w	800c52a <_vfiprintf_r+0x20e>
 800c3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d8:	445a      	add	r2, fp
 800c3da:	9209      	str	r2, [sp, #36]	; 0x24
 800c3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 80a2 	beq.w	800c52a <_vfiprintf_r+0x20e>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f0:	f10a 0a01 	add.w	sl, sl, #1
 800c3f4:	9304      	str	r3, [sp, #16]
 800c3f6:	9307      	str	r3, [sp, #28]
 800c3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c3fe:	4654      	mov	r4, sl
 800c400:	2205      	movs	r2, #5
 800c402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c406:	4858      	ldr	r0, [pc, #352]	; (800c568 <_vfiprintf_r+0x24c>)
 800c408:	f7f3 fec2 	bl	8000190 <memchr>
 800c40c:	9a04      	ldr	r2, [sp, #16]
 800c40e:	b9d8      	cbnz	r0, 800c448 <_vfiprintf_r+0x12c>
 800c410:	06d1      	lsls	r1, r2, #27
 800c412:	bf44      	itt	mi
 800c414:	2320      	movmi	r3, #32
 800c416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c41a:	0713      	lsls	r3, r2, #28
 800c41c:	bf44      	itt	mi
 800c41e:	232b      	movmi	r3, #43	; 0x2b
 800c420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c424:	f89a 3000 	ldrb.w	r3, [sl]
 800c428:	2b2a      	cmp	r3, #42	; 0x2a
 800c42a:	d015      	beq.n	800c458 <_vfiprintf_r+0x13c>
 800c42c:	9a07      	ldr	r2, [sp, #28]
 800c42e:	4654      	mov	r4, sl
 800c430:	2000      	movs	r0, #0
 800c432:	f04f 0c0a 	mov.w	ip, #10
 800c436:	4621      	mov	r1, r4
 800c438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c43c:	3b30      	subs	r3, #48	; 0x30
 800c43e:	2b09      	cmp	r3, #9
 800c440:	d94e      	bls.n	800c4e0 <_vfiprintf_r+0x1c4>
 800c442:	b1b0      	cbz	r0, 800c472 <_vfiprintf_r+0x156>
 800c444:	9207      	str	r2, [sp, #28]
 800c446:	e014      	b.n	800c472 <_vfiprintf_r+0x156>
 800c448:	eba0 0308 	sub.w	r3, r0, r8
 800c44c:	fa09 f303 	lsl.w	r3, r9, r3
 800c450:	4313      	orrs	r3, r2
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	46a2      	mov	sl, r4
 800c456:	e7d2      	b.n	800c3fe <_vfiprintf_r+0xe2>
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	1d19      	adds	r1, r3, #4
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	9103      	str	r1, [sp, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	bfbb      	ittet	lt
 800c464:	425b      	neglt	r3, r3
 800c466:	f042 0202 	orrlt.w	r2, r2, #2
 800c46a:	9307      	strge	r3, [sp, #28]
 800c46c:	9307      	strlt	r3, [sp, #28]
 800c46e:	bfb8      	it	lt
 800c470:	9204      	strlt	r2, [sp, #16]
 800c472:	7823      	ldrb	r3, [r4, #0]
 800c474:	2b2e      	cmp	r3, #46	; 0x2e
 800c476:	d10c      	bne.n	800c492 <_vfiprintf_r+0x176>
 800c478:	7863      	ldrb	r3, [r4, #1]
 800c47a:	2b2a      	cmp	r3, #42	; 0x2a
 800c47c:	d135      	bne.n	800c4ea <_vfiprintf_r+0x1ce>
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	1d1a      	adds	r2, r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	9203      	str	r2, [sp, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfb8      	it	lt
 800c48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c48e:	3402      	adds	r4, #2
 800c490:	9305      	str	r3, [sp, #20]
 800c492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c578 <_vfiprintf_r+0x25c>
 800c496:	7821      	ldrb	r1, [r4, #0]
 800c498:	2203      	movs	r2, #3
 800c49a:	4650      	mov	r0, sl
 800c49c:	f7f3 fe78 	bl	8000190 <memchr>
 800c4a0:	b140      	cbz	r0, 800c4b4 <_vfiprintf_r+0x198>
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	eba0 000a 	sub.w	r0, r0, sl
 800c4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	4303      	orrs	r3, r0
 800c4b0:	3401      	adds	r4, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b8:	482c      	ldr	r0, [pc, #176]	; (800c56c <_vfiprintf_r+0x250>)
 800c4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4be:	2206      	movs	r2, #6
 800c4c0:	f7f3 fe66 	bl	8000190 <memchr>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d03f      	beq.n	800c548 <_vfiprintf_r+0x22c>
 800c4c8:	4b29      	ldr	r3, [pc, #164]	; (800c570 <_vfiprintf_r+0x254>)
 800c4ca:	bb1b      	cbnz	r3, 800c514 <_vfiprintf_r+0x1f8>
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	3307      	adds	r3, #7
 800c4d0:	f023 0307 	bic.w	r3, r3, #7
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	9303      	str	r3, [sp, #12]
 800c4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4da:	443b      	add	r3, r7
 800c4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4de:	e767      	b.n	800c3b0 <_vfiprintf_r+0x94>
 800c4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	e7a5      	b.n	800c436 <_vfiprintf_r+0x11a>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	3401      	adds	r4, #1
 800c4ee:	9305      	str	r3, [sp, #20]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	f04f 0c0a 	mov.w	ip, #10
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4fc:	3a30      	subs	r2, #48	; 0x30
 800c4fe:	2a09      	cmp	r2, #9
 800c500:	d903      	bls.n	800c50a <_vfiprintf_r+0x1ee>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0c5      	beq.n	800c492 <_vfiprintf_r+0x176>
 800c506:	9105      	str	r1, [sp, #20]
 800c508:	e7c3      	b.n	800c492 <_vfiprintf_r+0x176>
 800c50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c50e:	4604      	mov	r4, r0
 800c510:	2301      	movs	r3, #1
 800c512:	e7f0      	b.n	800c4f6 <_vfiprintf_r+0x1da>
 800c514:	ab03      	add	r3, sp, #12
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	462a      	mov	r2, r5
 800c51a:	4b16      	ldr	r3, [pc, #88]	; (800c574 <_vfiprintf_r+0x258>)
 800c51c:	a904      	add	r1, sp, #16
 800c51e:	4630      	mov	r0, r6
 800c520:	f7fb fe08 	bl	8008134 <_printf_float>
 800c524:	4607      	mov	r7, r0
 800c526:	1c78      	adds	r0, r7, #1
 800c528:	d1d6      	bne.n	800c4d8 <_vfiprintf_r+0x1bc>
 800c52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	d405      	bmi.n	800c53c <_vfiprintf_r+0x220>
 800c530:	89ab      	ldrh	r3, [r5, #12]
 800c532:	059a      	lsls	r2, r3, #22
 800c534:	d402      	bmi.n	800c53c <_vfiprintf_r+0x220>
 800c536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c538:	f7ff f810 	bl	800b55c <__retarget_lock_release_recursive>
 800c53c:	89ab      	ldrh	r3, [r5, #12]
 800c53e:	065b      	lsls	r3, r3, #25
 800c540:	f53f af12 	bmi.w	800c368 <_vfiprintf_r+0x4c>
 800c544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c546:	e711      	b.n	800c36c <_vfiprintf_r+0x50>
 800c548:	ab03      	add	r3, sp, #12
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	462a      	mov	r2, r5
 800c54e:	4b09      	ldr	r3, [pc, #36]	; (800c574 <_vfiprintf_r+0x258>)
 800c550:	a904      	add	r1, sp, #16
 800c552:	4630      	mov	r0, r6
 800c554:	f7fc f892 	bl	800867c <_printf_i>
 800c558:	e7e4      	b.n	800c524 <_vfiprintf_r+0x208>
 800c55a:	bf00      	nop
 800c55c:	0800d224 	.word	0x0800d224
 800c560:	0800d244 	.word	0x0800d244
 800c564:	0800d204 	.word	0x0800d204
 800c568:	0800d43c 	.word	0x0800d43c
 800c56c:	0800d446 	.word	0x0800d446
 800c570:	08008135 	.word	0x08008135
 800c574:	0800c2f7 	.word	0x0800c2f7
 800c578:	0800d442 	.word	0x0800d442
 800c57c:	00000000 	.word	0x00000000

0800c580 <nan>:
 800c580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c588 <nan+0x8>
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	00000000 	.word	0x00000000
 800c58c:	7ff80000 	.word	0x7ff80000

0800c590 <__sread>:
 800c590:	b510      	push	{r4, lr}
 800c592:	460c      	mov	r4, r1
 800c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c598:	f000 f92e 	bl	800c7f8 <_read_r>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	bfab      	itete	ge
 800c5a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5a4:	181b      	addge	r3, r3, r0
 800c5a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5aa:	bfac      	ite	ge
 800c5ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5ae:	81a3      	strhlt	r3, [r4, #12]
 800c5b0:	bd10      	pop	{r4, pc}

0800c5b2 <__swrite>:
 800c5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	898b      	ldrh	r3, [r1, #12]
 800c5ba:	05db      	lsls	r3, r3, #23
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	4616      	mov	r6, r2
 800c5c2:	d505      	bpl.n	800c5d0 <__swrite+0x1e>
 800c5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f000 f8b8 	bl	800c740 <_lseek_r>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	4632      	mov	r2, r6
 800c5de:	463b      	mov	r3, r7
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e6:	f000 b837 	b.w	800c658 <_write_r>

0800c5ea <__sseek>:
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f2:	f000 f8a5 	bl	800c740 <_lseek_r>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	bf15      	itete	ne
 800c5fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c606:	81a3      	strheq	r3, [r4, #12]
 800c608:	bf18      	it	ne
 800c60a:	81a3      	strhne	r3, [r4, #12]
 800c60c:	bd10      	pop	{r4, pc}

0800c60e <__sclose>:
 800c60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c612:	f000 b851 	b.w	800c6b8 <_close_r>

0800c616 <strncmp>:
 800c616:	b510      	push	{r4, lr}
 800c618:	b17a      	cbz	r2, 800c63a <strncmp+0x24>
 800c61a:	4603      	mov	r3, r0
 800c61c:	3901      	subs	r1, #1
 800c61e:	1884      	adds	r4, r0, r2
 800c620:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c624:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c628:	4290      	cmp	r0, r2
 800c62a:	d101      	bne.n	800c630 <strncmp+0x1a>
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	d101      	bne.n	800c634 <strncmp+0x1e>
 800c630:	1a80      	subs	r0, r0, r2
 800c632:	bd10      	pop	{r4, pc}
 800c634:	2800      	cmp	r0, #0
 800c636:	d1f3      	bne.n	800c620 <strncmp+0xa>
 800c638:	e7fa      	b.n	800c630 <strncmp+0x1a>
 800c63a:	4610      	mov	r0, r2
 800c63c:	e7f9      	b.n	800c632 <strncmp+0x1c>

0800c63e <__ascii_wctomb>:
 800c63e:	b149      	cbz	r1, 800c654 <__ascii_wctomb+0x16>
 800c640:	2aff      	cmp	r2, #255	; 0xff
 800c642:	bf85      	ittet	hi
 800c644:	238a      	movhi	r3, #138	; 0x8a
 800c646:	6003      	strhi	r3, [r0, #0]
 800c648:	700a      	strbls	r2, [r1, #0]
 800c64a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c64e:	bf98      	it	ls
 800c650:	2001      	movls	r0, #1
 800c652:	4770      	bx	lr
 800c654:	4608      	mov	r0, r1
 800c656:	4770      	bx	lr

0800c658 <_write_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d07      	ldr	r5, [pc, #28]	; (800c678 <_write_r+0x20>)
 800c65c:	4604      	mov	r4, r0
 800c65e:	4608      	mov	r0, r1
 800c660:	4611      	mov	r1, r2
 800c662:	2200      	movs	r2, #0
 800c664:	602a      	str	r2, [r5, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	f7f6 f805 	bl	8002676 <_write>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	d102      	bne.n	800c676 <_write_r+0x1e>
 800c670:	682b      	ldr	r3, [r5, #0]
 800c672:	b103      	cbz	r3, 800c676 <_write_r+0x1e>
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	2000058c 	.word	0x2000058c

0800c67c <__assert_func>:
 800c67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c67e:	4614      	mov	r4, r2
 800c680:	461a      	mov	r2, r3
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <__assert_func+0x2c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4605      	mov	r5, r0
 800c688:	68d8      	ldr	r0, [r3, #12]
 800c68a:	b14c      	cbz	r4, 800c6a0 <__assert_func+0x24>
 800c68c:	4b07      	ldr	r3, [pc, #28]	; (800c6ac <__assert_func+0x30>)
 800c68e:	9100      	str	r1, [sp, #0]
 800c690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c694:	4906      	ldr	r1, [pc, #24]	; (800c6b0 <__assert_func+0x34>)
 800c696:	462b      	mov	r3, r5
 800c698:	f000 f81e 	bl	800c6d8 <fiprintf>
 800c69c:	f000 f8be 	bl	800c81c <abort>
 800c6a0:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <__assert_func+0x38>)
 800c6a2:	461c      	mov	r4, r3
 800c6a4:	e7f3      	b.n	800c68e <__assert_func+0x12>
 800c6a6:	bf00      	nop
 800c6a8:	20000018 	.word	0x20000018
 800c6ac:	0800d44d 	.word	0x0800d44d
 800c6b0:	0800d45a 	.word	0x0800d45a
 800c6b4:	0800d488 	.word	0x0800d488

0800c6b8 <_close_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d06      	ldr	r5, [pc, #24]	; (800c6d4 <_close_r+0x1c>)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7f5 fff3 	bl	80026ae <_close>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_close_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_close_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	2000058c 	.word	0x2000058c

0800c6d8 <fiprintf>:
 800c6d8:	b40e      	push	{r1, r2, r3}
 800c6da:	b503      	push	{r0, r1, lr}
 800c6dc:	4601      	mov	r1, r0
 800c6de:	ab03      	add	r3, sp, #12
 800c6e0:	4805      	ldr	r0, [pc, #20]	; (800c6f8 <fiprintf+0x20>)
 800c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e6:	6800      	ldr	r0, [r0, #0]
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	f7ff fe17 	bl	800c31c <_vfiprintf_r>
 800c6ee:	b002      	add	sp, #8
 800c6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6f4:	b003      	add	sp, #12
 800c6f6:	4770      	bx	lr
 800c6f8:	20000018 	.word	0x20000018

0800c6fc <_fstat_r>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	4d07      	ldr	r5, [pc, #28]	; (800c71c <_fstat_r+0x20>)
 800c700:	2300      	movs	r3, #0
 800c702:	4604      	mov	r4, r0
 800c704:	4608      	mov	r0, r1
 800c706:	4611      	mov	r1, r2
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	f7f5 ffdc 	bl	80026c6 <_fstat>
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	d102      	bne.n	800c718 <_fstat_r+0x1c>
 800c712:	682b      	ldr	r3, [r5, #0]
 800c714:	b103      	cbz	r3, 800c718 <_fstat_r+0x1c>
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	bd38      	pop	{r3, r4, r5, pc}
 800c71a:	bf00      	nop
 800c71c:	2000058c 	.word	0x2000058c

0800c720 <_isatty_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	; (800c73c <_isatty_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f5 ffdb 	bl	80026e6 <_isatty>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_isatty_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_isatty_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	2000058c 	.word	0x2000058c

0800c740 <_lseek_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	; (800c760 <_lseek_r+0x20>)
 800c744:	4604      	mov	r4, r0
 800c746:	4608      	mov	r0, r1
 800c748:	4611      	mov	r1, r2
 800c74a:	2200      	movs	r2, #0
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f5 ffd4 	bl	80026fc <_lseek>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_lseek_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_lseek_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	2000058c 	.word	0x2000058c

0800c764 <memmove>:
 800c764:	4288      	cmp	r0, r1
 800c766:	b510      	push	{r4, lr}
 800c768:	eb01 0402 	add.w	r4, r1, r2
 800c76c:	d902      	bls.n	800c774 <memmove+0x10>
 800c76e:	4284      	cmp	r4, r0
 800c770:	4623      	mov	r3, r4
 800c772:	d807      	bhi.n	800c784 <memmove+0x20>
 800c774:	1e43      	subs	r3, r0, #1
 800c776:	42a1      	cmp	r1, r4
 800c778:	d008      	beq.n	800c78c <memmove+0x28>
 800c77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c782:	e7f8      	b.n	800c776 <memmove+0x12>
 800c784:	4402      	add	r2, r0
 800c786:	4601      	mov	r1, r0
 800c788:	428a      	cmp	r2, r1
 800c78a:	d100      	bne.n	800c78e <memmove+0x2a>
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c796:	e7f7      	b.n	800c788 <memmove+0x24>

0800c798 <_realloc_r>:
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	4680      	mov	r8, r0
 800c79e:	4614      	mov	r4, r2
 800c7a0:	460e      	mov	r6, r1
 800c7a2:	b921      	cbnz	r1, 800c7ae <_realloc_r+0x16>
 800c7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	f7fb bbaf 	b.w	8007f0c <_malloc_r>
 800c7ae:	b92a      	cbnz	r2, 800c7bc <_realloc_r+0x24>
 800c7b0:	f7fb fb40 	bl	8007e34 <_free_r>
 800c7b4:	4625      	mov	r5, r4
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	f000 f835 	bl	800c82a <_malloc_usable_size_r>
 800c7c0:	4284      	cmp	r4, r0
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	d802      	bhi.n	800c7cc <_realloc_r+0x34>
 800c7c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7ca:	d812      	bhi.n	800c7f2 <_realloc_r+0x5a>
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	f7fb fb9c 	bl	8007f0c <_malloc_r>
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d0ed      	beq.n	800c7b6 <_realloc_r+0x1e>
 800c7da:	42bc      	cmp	r4, r7
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4631      	mov	r1, r6
 800c7e0:	bf28      	it	cs
 800c7e2:	463a      	movcs	r2, r7
 800c7e4:	f7fb fb10 	bl	8007e08 <memcpy>
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	f7fb fb22 	bl	8007e34 <_free_r>
 800c7f0:	e7e1      	b.n	800c7b6 <_realloc_r+0x1e>
 800c7f2:	4635      	mov	r5, r6
 800c7f4:	e7df      	b.n	800c7b6 <_realloc_r+0x1e>
	...

0800c7f8 <_read_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	; (800c818 <_read_r+0x20>)
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	4608      	mov	r0, r1
 800c800:	4611      	mov	r1, r2
 800c802:	2200      	movs	r2, #0
 800c804:	602a      	str	r2, [r5, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	f7f5 ff18 	bl	800263c <_read>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_read_r+0x1e>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_read_r+0x1e>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	2000058c 	.word	0x2000058c

0800c81c <abort>:
 800c81c:	b508      	push	{r3, lr}
 800c81e:	2006      	movs	r0, #6
 800c820:	f000 f834 	bl	800c88c <raise>
 800c824:	2001      	movs	r0, #1
 800c826:	f7f5 feff 	bl	8002628 <_exit>

0800c82a <_malloc_usable_size_r>:
 800c82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c82e:	1f18      	subs	r0, r3, #4
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbc      	itt	lt
 800c834:	580b      	ldrlt	r3, [r1, r0]
 800c836:	18c0      	addlt	r0, r0, r3
 800c838:	4770      	bx	lr

0800c83a <_raise_r>:
 800c83a:	291f      	cmp	r1, #31
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	460d      	mov	r5, r1
 800c842:	d904      	bls.n	800c84e <_raise_r+0x14>
 800c844:	2316      	movs	r3, #22
 800c846:	6003      	str	r3, [r0, #0]
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
 800c84e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c850:	b112      	cbz	r2, 800c858 <_raise_r+0x1e>
 800c852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c856:	b94b      	cbnz	r3, 800c86c <_raise_r+0x32>
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 f831 	bl	800c8c0 <_getpid_r>
 800c85e:	462a      	mov	r2, r5
 800c860:	4601      	mov	r1, r0
 800c862:	4620      	mov	r0, r4
 800c864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c868:	f000 b818 	b.w	800c89c <_kill_r>
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d00a      	beq.n	800c886 <_raise_r+0x4c>
 800c870:	1c59      	adds	r1, r3, #1
 800c872:	d103      	bne.n	800c87c <_raise_r+0x42>
 800c874:	2316      	movs	r3, #22
 800c876:	6003      	str	r3, [r0, #0]
 800c878:	2001      	movs	r0, #1
 800c87a:	e7e7      	b.n	800c84c <_raise_r+0x12>
 800c87c:	2400      	movs	r4, #0
 800c87e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c882:	4628      	mov	r0, r5
 800c884:	4798      	blx	r3
 800c886:	2000      	movs	r0, #0
 800c888:	e7e0      	b.n	800c84c <_raise_r+0x12>
	...

0800c88c <raise>:
 800c88c:	4b02      	ldr	r3, [pc, #8]	; (800c898 <raise+0xc>)
 800c88e:	4601      	mov	r1, r0
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	f7ff bfd2 	b.w	800c83a <_raise_r>
 800c896:	bf00      	nop
 800c898:	20000018 	.word	0x20000018

0800c89c <_kill_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d07      	ldr	r5, [pc, #28]	; (800c8bc <_kill_r+0x20>)
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	f7f5 fead 	bl	8002608 <_kill>
 800c8ae:	1c43      	adds	r3, r0, #1
 800c8b0:	d102      	bne.n	800c8b8 <_kill_r+0x1c>
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	b103      	cbz	r3, 800c8b8 <_kill_r+0x1c>
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ba:	bf00      	nop
 800c8bc:	2000058c 	.word	0x2000058c

0800c8c0 <_getpid_r>:
 800c8c0:	f7f5 be9a 	b.w	80025f8 <_getpid>

0800c8c4 <_init>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <_fini>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr
