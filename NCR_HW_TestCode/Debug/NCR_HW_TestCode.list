
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e20c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800e350  0800e350  0001e350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800edfc  0800edfc  0001edfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000008  0800ee0c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005e8  20000230  0800f034  00020230  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000818  0800f034  00020818  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d8c6  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000348c  00000000  00000000  0003db26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c40  00000000  00000000  00040fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001af8  00000000  00000000  00042bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002448e  00000000  00000000  000446f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019400  00000000  00000000  00068b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000df7d2  00000000  00000000  00081f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00161750  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ed0  00000000  00000000  001617a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000230 	.word	0x20000230
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e334 	.word	0x0800e334

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000234 	.word	0x20000234
 800017c:	0800e334 	.word	0x0800e334

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	72fb      	strb	r3, [r7, #11]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <lis2dw12_read_reg+0x20>
  {
    return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <lis2dw12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685c      	ldr	r4, [r3, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68d8      	ldr	r0, [r3, #12]
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	7af9      	ldrb	r1, [r7, #11]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	47a0      	blx	r4
 8000fd8:	6178      	str	r0, [r7, #20]

  return ret;
 8000fda:	697b      	ldr	r3, [r7, #20]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}

08000fe4 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	72fb      	strb	r3, [r7, #11]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <lis2dw12_write_reg+0x20>
  {
    return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <lis2dw12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681c      	ldr	r4, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68d8      	ldr	r0, [r3, #12]
 800100c:	893b      	ldrh	r3, [r7, #8]
 800100e:	7af9      	ldrb	r1, [r7, #11]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	47a0      	blx	r4
 8001014:	6178      	str	r0, [r7, #20]

  return ret;
 8001016:	697b      	ldr	r3, [r7, #20]
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	2301      	movs	r3, #1
 8001032:	2120      	movs	r1, #32
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffb7 	bl	8000fa8 <lis2dw12_read_reg>
 800103a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d118      	bne.n	8001074 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	7c3b      	ldrb	r3, [r7, #16]
 800104e:	f362 0383 	bfi	r3, r2, #2, #2
 8001052:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	b2da      	uxtb	r2, r3
 800105c:	7c3b      	ldrb	r3, [r7, #16]
 800105e:	f362 0301 	bfi	r3, r2, #0, #2
 8001062:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	2301      	movs	r3, #1
 800106a:	2120      	movs	r1, #32
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffb9 	bl	8000fe4 <lis2dw12_write_reg>
 8001072:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2301      	movs	r3, #1
 8001080:	2125      	movs	r1, #37	; 0x25
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff90 	bl	8000fa8 <lis2dw12_read_reg>
 8001088:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d110      	bne.n	80010b2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	f362 0382 	bfi	r3, r2, #2, #1
 80010a0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	2301      	movs	r3, #1
 80010a8:	2125      	movs	r1, #37	; 0x25
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff9a 	bl	8000fe4 <lis2dw12_write_reg>
 80010b0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80010b2:	697b      	ldr	r3, [r7, #20]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80010c8:	f107 0210 	add.w	r2, r7, #16
 80010cc:	2301      	movs	r3, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff69 	bl	8000fa8 <lis2dw12_read_reg>
 80010d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	7c3b      	ldrb	r3, [r7, #16]
 80010e8:	f362 1307 	bfi	r3, r2, #4, #4
 80010ec:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	2301      	movs	r3, #1
 80010f4:	2120      	movs	r1, #32
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff74 	bl	8000fe4 <lis2dw12_write_reg>
 80010fc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	2301      	movs	r3, #1
 800110a:	2122      	movs	r1, #34	; 0x22
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4b 	bl	8000fa8 <lis2dw12_read_reg>
 8001112:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d110      	bne.n	800113c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	b2da      	uxtb	r2, r3
 8001124:	7b3b      	ldrb	r3, [r7, #12]
 8001126:	f362 0301 	bfi	r3, r2, #0, #2
 800112a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	2301      	movs	r3, #1
 8001132:	2122      	movs	r1, #34	; 0x22
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff55 	bl	8000fe4 <lis2dw12_write_reg>
 800113a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800113c:	697b      	ldr	r3, [r7, #20]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	2301      	movs	r3, #1
 8001158:	2125      	movs	r1, #37	; 0x25
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff24 	bl	8000fa8 <lis2dw12_read_reg>
 8001160:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7a3b      	ldrb	r3, [r7, #8]
 8001172:	f362 1305 	bfi	r3, r2, #4, #2
 8001176:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2301      	movs	r3, #1
 800117e:	2125      	movs	r1, #37	; 0x25
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff2f 	bl	8000fe4 <lis2dw12_write_reg>
 8001186:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <lis2dw12_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_all_sources_get(const stmdev_ctx_t *ctx,
                                 lis2dw12_all_sources_t *val)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS_DUP, (uint8_t *) val, 5);
 800119c:	2305      	movs	r3, #5
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	2137      	movs	r1, #55	; 0x37
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff00 	bl	8000fa8 <lis2dw12_read_reg>
 80011a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80011be:	2301      	movs	r3, #1
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	210f      	movs	r1, #15
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff feef 	bl	8000fa8 <lis2dw12_read_reg>
 80011ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80011cc:	68fb      	ldr	r3, [r7, #12]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	2301      	movs	r3, #1
 80011e8:	2121      	movs	r1, #33	; 0x21
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fedc 	bl	8000fa8 <lis2dw12_read_reg>
 80011f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10f      	bne.n	8001218 <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7a3b      	ldrb	r3, [r7, #8]
 8001202:	f362 1386 	bfi	r3, r2, #6, #1
 8001206:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2301      	movs	r3, #1
 800120e:	2121      	movs	r1, #33	; 0x21
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fee7 	bl	8000fe4 <lis2dw12_write_reg>
 8001216:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	2301      	movs	r3, #1
 8001232:	2121      	movs	r1, #33	; 0x21
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff feb7 	bl	8000fa8 <lis2dw12_read_reg>
 800123a:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_reset;
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	701a      	strb	r2, [r3, #0]

  return ret;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(const stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001260:	f107 0210 	add.w	r2, r7, #16
 8001264:	2301      	movs	r3, #1
 8001266:	2125      	movs	r1, #37	; 0x25
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe9d 	bl	8000fa8 <lis2dw12_read_reg>
 800126e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d110      	bne.n	8001298 <lis2dw12_filter_path_set+0x44>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	7c3b      	ldrb	r3, [r7, #16]
 8001282:	f362 03c3 	bfi	r3, r2, #3, #1
 8001286:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001288:	f107 0210 	add.w	r2, r7, #16
 800128c:	2301      	movs	r3, #1
 800128e:	2125      	movs	r1, #37	; 0x25
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fea7 	bl	8000fe4 <lis2dw12_write_reg>
 8001296:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <lis2dw12_filter_path_set+0x5a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	2301      	movs	r3, #1
 80012a4:	213f      	movs	r1, #63	; 0x3f
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fe7e 	bl	8000fa8 <lis2dw12_read_reg>
 80012ac:	6178      	str	r0, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10f      	bne.n	80012d4 <lis2dw12_filter_path_set+0x80>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	f362 1304 	bfi	r3, r2, #4, #1
 80012c2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	2301      	movs	r3, #1
 80012ca:	213f      	movs	r1, #63	; 0x3f
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fe89 	bl	8000fe4 <lis2dw12_write_reg>
 80012d2:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 80012d4:	697b      	ldr	r3, [r7, #20]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(const stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80012ea:	f107 0208 	add.w	r2, r7, #8
 80012ee:	2301      	movs	r3, #1
 80012f0:	2125      	movs	r1, #37	; 0x25
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe58 	bl	8000fa8 <lis2dw12_read_reg>
 80012f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <lis2dw12_filter_bandwidth_set+0x42>
  {
    reg.bw_filt = (uint8_t) val;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7a3b      	ldrb	r3, [r7, #8]
 800130a:	f362 1387 	bfi	r3, r2, #6, #2
 800130e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001310:	f107 0208 	add.w	r2, r7, #8
 8001314:	2301      	movs	r3, #1
 8001316:	2125      	movs	r1, #37	; 0x25
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe63 	bl	8000fe4 <lis2dw12_write_reg>
 800131e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8001334:	f107 0210 	add.w	r2, r7, #16
 8001338:	2301      	movs	r3, #1
 800133a:	2124      	movs	r1, #36	; 0x24
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe33 	bl	8000fa8 <lis2dw12_read_reg>
 8001342:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d107      	bne.n	800135a <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	2301      	movs	r3, #1
 8001350:	213f      	movs	r1, #63	; 0x3f
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fe28 	bl	8000fa8 <lis2dw12_read_reg>
 8001358:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d13e      	bne.n	80013de <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001368:	b2da      	uxtb	r2, r3
         val->int1_ff |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001372:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8001374:	4313      	orrs	r3, r2
 8001376:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001380:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800138e:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8001390:	4313      	orrs	r3, r2
 8001392:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800139c:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80013a2:	7c3b      	ldrb	r3, [r7, #16]
 80013a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a8:	b2db      	uxtb	r3, r3
         val->int1_6d |
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 80013ae:	7c3b      	ldrb	r3, [r7, #16]
 80013b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013b4:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	733b      	strb	r3, [r7, #12]
 80013c6:	e003      	b.n	80013d0 <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	f36f 1345 	bfc	r3, #5, #1
 80013ce:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 80013d0:	2301      	movs	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	2123      	movs	r1, #35	; 0x23
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe04 	bl	8000fe4 <lis2dw12_write_reg>
 80013dc:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	2301      	movs	r3, #1
 80013ea:	213f      	movs	r1, #63	; 0x3f
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fdf9 	bl	8000fe4 <lis2dw12_write_reg>
 80013f2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80013f4:	697b      	ldr	r3, [r7, #20]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8001408:	2301      	movs	r3, #1
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	2123      	movs	r1, #35	; 0x23
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fdca 	bl	8000fa8 <lis2dw12_read_reg>
 8001414:	60f8      	str	r0, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 800142c:	f107 0208 	add.w	r2, r7, #8
 8001430:	2301      	movs	r3, #1
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fdb7 	bl	8000fa8 <lis2dw12_read_reg>
 800143a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <lis2dw12_wkup_threshold_set+0x42>
  {
    reg.wk_ths = val;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	f362 0305 	bfi	r3, r2, #0, #6
 8001450:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001452:	f107 0208 	add.w	r2, r7, #8
 8001456:	2301      	movs	r3, #1
 8001458:	2134      	movs	r1, #52	; 0x34
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fdc2 	bl	8000fe4 <lis2dw12_write_reg>
 8001460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	2301      	movs	r3, #1
 800147e:	2135      	movs	r1, #53	; 0x35
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fd91 	bl	8000fa8 <lis2dw12_read_reg>
 8001486:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <lis2dw12_wkup_dur_set+0x42>
  {
    reg.wake_dur = val;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	b2da      	uxtb	r2, r3
 8001496:	7a3b      	ldrb	r3, [r7, #8]
 8001498:	f362 1346 	bfi	r3, r2, #5, #2
 800149c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	2301      	movs	r3, #1
 80014a4:	2135      	movs	r1, #53	; 0x35
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fd9c 	bl	8000fe4 <lis2dw12_write_reg>
 80014ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <lis2dw12_wkup_feed_data_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_feed_data_set(const stmdev_ctx_t *ctx,
                                    lis2dw12_usr_off_on_wu_t val)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	2301      	movs	r3, #1
 80014ca:	213f      	movs	r1, #63	; 0x3f
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fd6b 	bl	8000fa8 <lis2dw12_read_reg>
 80014d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <lis2dw12_wkup_feed_data_set+0x42>
  {
    reg.usr_off_on_wu = (uint8_t) val;
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	f362 03c3 	bfi	r3, r2, #3, #1
 80014e8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	213f      	movs	r1, #63	; 0x3f
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd76 	bl	8000fe4 <lis2dw12_write_reg>
 80014f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <lis2dw12_act_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_act_mode_set(const stmdev_ctx_t *ctx,
                              lis2dw12_sleep_on_t val)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_ths_t wake_up_ths;
  lis2dw12_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS,
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	2301      	movs	r3, #1
 8001516:	2134      	movs	r1, #52	; 0x34
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fd45 	bl	8000fa8 <lis2dw12_read_reg>
 800151e:	6178      	str	r0, [r7, #20]
                          (uint8_t *) &wake_up_ths, 1);

  if (ret == 0)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <lis2dw12_act_mode_set+0x32>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR,
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	2301      	movs	r3, #1
 800152c:	2135      	movs	r1, #53	; 0x35
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd3a 	bl	8000fa8 <lis2dw12_read_reg>
 8001534:	6178      	str	r0, [r7, #20]
                            (uint8_t *) &wake_up_dur, 1);
  }

  if (ret == 0)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <lis2dw12_act_mode_set+0x58>
  {
    wake_up_ths.sleep_on = (uint8_t) val & 0x01U;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	7c3b      	ldrb	r3, [r7, #16]
 8001546:	f362 1386 	bfi	r3, r2, #6, #1
 800154a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS,
 800154c:	f107 0210 	add.w	r2, r7, #16
 8001550:	2301      	movs	r3, #1
 8001552:	2134      	movs	r1, #52	; 0x34
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fd45 	bl	8000fe4 <lis2dw12_write_reg>
 800155a:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &wake_up_ths, 1);
  }

  if (ret == 0)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d110      	bne.n	8001584 <lis2dw12_act_mode_set+0x80>
  {
    wake_up_dur.stationary = ((uint8_t)val & 0x02U) >> 1;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	f362 1304 	bfi	r3, r2, #4, #1
 8001572:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR,
 8001574:	f107 020c 	add.w	r2, r7, #12
 8001578:	2301      	movs	r3, #1
 800157a:	2135      	movs	r1, #53	; 0x35
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd31 	bl	8000fe4 <lis2dw12_write_reg>
 8001582:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &wake_up_dur, 1);
  }

  return ret;
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lis2dw12_act_sleep_dur_set>:
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_act_sleep_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 800159a:	f107 0208 	add.w	r2, r7, #8
 800159e:	2301      	movs	r3, #1
 80015a0:	2135      	movs	r1, #53	; 0x35
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fd00 	bl	8000fa8 <lis2dw12_read_reg>
 80015a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10f      	bne.n	80015d0 <lis2dw12_act_sleep_dur_set+0x42>
  {
    reg.sleep_dur = val;
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	7a3b      	ldrb	r3, [r7, #8]
 80015ba:	f362 0303 	bfi	r3, r2, #0, #4
 80015be:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	2301      	movs	r3, #1
 80015c6:	2135      	movs	r1, #53	; 0x35
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fd0b 	bl	8000fe4 <lis2dw12_write_reg>
 80015ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <initModbus>:
 *
 * @param serialPort Pointer to the UART handle for Modbus communication.
 * @param EN_GPIOPort GPIO port for MODBUS_EN pin.
 * @param EN_GPIOPin GPIO pin for MODBUS_EN.
 */
void initModbus(UART_HandleTypeDef *serialPort, GPIO_TypeDef * EN_GPIOPort, uint16_t EN_GPIOPin){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]

	modbusSerial = *serialPort;
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <initModbus+0x34>)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	2394      	movs	r3, #148	; 0x94
 80015f4:	461a      	mov	r2, r3
 80015f6:	f008 f93f 	bl	8009878 <memcpy>
	MODBUS_EN.port = EN_GPIOPort;
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <initModbus+0x38>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	6013      	str	r3, [r2, #0]
	MODBUS_EN.pin = EN_GPIOPin;
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <initModbus+0x38>)
 8001606:	711a      	strb	r2, [r3, #4]

}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000254 	.word	0x20000254
 8001614:	2000024c 	.word	0x2000024c

08001618 <sendRaw>:
 *
 * @param modbusCMD Pointer to the raw Modbus command data.
 * @param cmdLen Length of the Modbus command data.
 * @param modbusResponse Pointer to the ModBus response structure.
 */
void sendRaw(uint8_t *modbusCMD, uint16_t cmdLen, ModBus_t *modbusResponse) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	460b      	mov	r3, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	817b      	strh	r3, [r7, #10]

	// Clear response buffer and reset index
	memset(modbusResponse->buffer, '\0', sizeof(modbusResponse->buffer) * sizeof(modbusResponse->buffer[0]));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3302      	adds	r3, #2
 800162a:	2296      	movs	r2, #150	; 0x96
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f008 f930 	bl	8009894 <memset>
	modbusResponse->rxIndex = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	801a      	strh	r2, [r3, #0]

	// Enable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_SET);
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <sendRaw+0x6c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <sendRaw+0x6c>)
 8001640:	7912      	ldrb	r2, [r2, #4]
 8001642:	b291      	uxth	r1, r2
 8001644:	2201      	movs	r2, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f003 f8a4 	bl	8004794 <HAL_GPIO_WritePin>

	// Receive data using UART interrupt
	HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)modbusResponse->buffer, 1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3302      	adds	r3, #2
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <sendRaw+0x70>)
 8001656:	f006 f961 	bl	800791c <HAL_UART_Receive_IT>
//		printf("%02X ", modbusCMD[i]);
//	}
//	printf("\n");

	// Transmit the raw data
	Serial_Transmit(modbusCMD, cmdLen);
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	4619      	mov	r1, r3
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f814 	bl	800168c <Serial_Transmit>

	// Delay to ensure proper communication
	//HAL_Delay(1);

	// Disable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_RESET);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <sendRaw+0x6c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <sendRaw+0x6c>)
 800166a:	7912      	ldrb	r2, [r2, #4]
 800166c:	b291      	uxth	r1, r2
 800166e:	2200      	movs	r2, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f88f 	bl	8004794 <HAL_GPIO_WritePin>

	// Delay for stability
	HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f002 fcf8 	bl	800406c <HAL_Delay>


}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000024c 	.word	0x2000024c
 8001688:	20000254 	.word	0x20000254

0800168c <Serial_Transmit>:
	HAL_Delay(10);

}

// Transmit data through UART
void Serial_Transmit(uint8_t *data, uint16_t length) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
    // Assuming UART1 has been initialized
    // Transmit data
    HAL_UART_Transmit(&modbusSerial, data, length, HAL_MAX_DELAY);
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <Serial_Transmit+0x24>)
 80016a2:	f006 f8ad 	bl	8007800 <HAL_UART_Transmit>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000254 	.word	0x20000254

080016b4 <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b95      	cmp	r3, #149	; 0x95
 80016c2:	d810      	bhi.n	80016e6 <Modbus_RxCallback+0x32>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <Modbus_RxCallback+0x54>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	440b      	add	r3, r1
 80016d6:	709a      	strb	r2, [r3, #2]
        _ModbusResponse->rxIndex++;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	e002      	b.n	80016ec <Modbus_RxCallback+0x38>


    } else {
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	801a      	strh	r2, [r3, #0]
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3302      	adds	r3, #2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	8812      	ldrh	r2, [r2, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	4619      	mov	r1, r3
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <Modbus_RxCallback+0x54>)
 80016fc:	f006 f90e 	bl	800791c <HAL_UART_Receive_IT>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000254 	.word	0x20000254

0800170c <ADS1115_Init>:
uint8_t ADS1115_config[2];
uint8_t ADS1115_rawValue[2];
float ADS1115_voltCoef; // Voltage coefficient.

/* Function definitions. */
HAL_StatusTypeDef ADS1115_Init(I2C_HandleTypeDef *handler, uint16_t setDataRate, uint16_t setPGA) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	803b      	strh	r3, [r7, #0]

	// Handler
	memcpy(&ADS1115_I2C_Handler, handler, sizeof(*handler));
 800171c:	2254      	movs	r2, #84	; 0x54
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	482f      	ldr	r0, [pc, #188]	; (80017e0 <ADS1115_Init+0xd4>)
 8001722:	f008 f8a9 	bl	8009878 <memcpy>

	// Data rate and PGA configurations.
	ADS1115_dataRate = setDataRate;
 8001726:	4a2f      	ldr	r2, [pc, #188]	; (80017e4 <ADS1115_Init+0xd8>)
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	8013      	strh	r3, [r2, #0]
	ADS1115_pga = setPGA;
 800172c:	4a2e      	ldr	r2, [pc, #184]	; (80017e8 <ADS1115_Init+0xdc>)
 800172e:	883b      	ldrh	r3, [r7, #0]
 8001730:	8013      	strh	r3, [r2, #0]

	// Voltage coefficient update.
	switch (ADS1115_pga) {
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <ADS1115_Init+0xdc>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	2b0e      	cmp	r3, #14
 8001738:	d83e      	bhi.n	80017b8 <ADS1115_Init+0xac>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <ADS1115_Init+0x34>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	0800177d 	.word	0x0800177d
 8001744:	080017b9 	.word	0x080017b9
 8001748:	08001787 	.word	0x08001787
 800174c:	080017b9 	.word	0x080017b9
 8001750:	08001791 	.word	0x08001791
 8001754:	080017b9 	.word	0x080017b9
 8001758:	0800179b 	.word	0x0800179b
 800175c:	080017b9 	.word	0x080017b9
 8001760:	080017a5 	.word	0x080017a5
 8001764:	080017b9 	.word	0x080017b9
 8001768:	080017b9 	.word	0x080017b9
 800176c:	080017b9 	.word	0x080017b9
 8001770:	080017b9 	.word	0x080017b9
 8001774:	080017b9 	.word	0x080017b9
 8001778:	080017af 	.word	0x080017af

	case ADS1115_PGA_TWOTHIRDS:
		ADS1115_voltCoef = 0.1875;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <ADS1115_Init+0xe0>)
 800177e:	f04f 5279 	mov.w	r2, #1044381696	; 0x3e400000
 8001782:	601a      	str	r2, [r3, #0]
		break;
 8001784:	e018      	b.n	80017b8 <ADS1115_Init+0xac>

	case ADS1115_PGA_ONE:
		ADS1115_voltCoef = 0.125;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <ADS1115_Init+0xe0>)
 8001788:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800178c:	601a      	str	r2, [r3, #0]
		break;
 800178e:	e013      	b.n	80017b8 <ADS1115_Init+0xac>

	case ADS1115_PGA_TWO:
		ADS1115_voltCoef = 0.0625;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <ADS1115_Init+0xe0>)
 8001792:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8001796:	601a      	str	r2, [r3, #0]
		break;
 8001798:	e00e      	b.n	80017b8 <ADS1115_Init+0xac>

	case ADS1115_PGA_FOUR:
		ADS1115_voltCoef = 0.03125;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <ADS1115_Init+0xe0>)
 800179c:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 80017a0:	601a      	str	r2, [r3, #0]
		break;
 80017a2:	e009      	b.n	80017b8 <ADS1115_Init+0xac>

	case ADS1115_PGA_EIGHT:
		ADS1115_voltCoef = 0.015625;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <ADS1115_Init+0xe0>)
 80017a6:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80017aa:	601a      	str	r2, [r3, #0]
		break;
 80017ac:	e004      	b.n	80017b8 <ADS1115_Init+0xac>

	case ADS1115_PGA_SIXTEEN:
		ADS1115_voltCoef = 0.0078125;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <ADS1115_Init+0xe0>)
 80017b0:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 80017b4:	601a      	str	r2, [r3, #0]
		break;
 80017b6:	bf00      	nop

		}

	if (HAL_I2C_IsDeviceReady(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <ADS1115_Init+0xe4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	b299      	uxth	r1, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	2205      	movs	r2, #5
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <ADS1115_Init+0xd4>)
 80017c8:	f003 fca4 	bl	8005114 <HAL_I2C_IsDeviceReady>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <ADS1115_Init+0xca>
		return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <ADS1115_Init+0xcc>
	} else {
		return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
	}

}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002e8 	.word	0x200002e8
 80017e4:	2000000a 	.word	0x2000000a
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000344 	.word	0x20000344
 80017f0:	20000008 	.word	0x20000008

080017f4 <ADS1115_readSingleEnded>:

HAL_StatusTypeDef ADS1115_readSingleEnded(uint16_t muxPort, float *voltage) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]

	ADS1115_config[0] = ADS1115_OS | muxPort | ADS1115_pga | ADS1115_MODE;
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <ADS1115_readSingleEnded+0xbc>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <ADS1115_readSingleEnded+0xc0>)
 8001816:	701a      	strb	r2, [r3, #0]
	ADS1115_config[1] = ADS1115_dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <ADS1115_readSingleEnded+0xc4>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f043 0303 	orr.w	r3, r3, #3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <ADS1115_readSingleEnded+0xc0>)
 8001826:	705a      	strb	r2, [r3, #1]

	if(HAL_I2C_Mem_Write(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK){
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <ADS1115_readSingleEnded+0xc8>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	b299      	uxth	r1, r3
 8001832:	2301      	movs	r3, #1
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2302      	movs	r3, #2
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <ADS1115_readSingleEnded+0xc0>)
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	2201      	movs	r2, #1
 8001842:	481f      	ldr	r0, [pc, #124]	; (80018c0 <ADS1115_readSingleEnded+0xcc>)
 8001844:	f003 fa38 	bl	8004cb8 <HAL_I2C_Mem_Write>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d12b      	bne.n	80018a6 <ADS1115_readSingleEnded+0xb2>

		if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT) == HAL_OK){
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <ADS1115_readSingleEnded+0xc8>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	b21b      	sxth	r3, r3
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	b21b      	sxth	r3, r3
 800185c:	b299      	uxth	r1, r3
 800185e:	2301      	movs	r3, #1
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2302      	movs	r3, #2
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <ADS1115_readSingleEnded+0xd0>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2200      	movs	r2, #0
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <ADS1115_readSingleEnded+0xcc>)
 8001870:	f003 fb36 	bl	8004ee0 <HAL_I2C_Mem_Read>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <ADS1115_readSingleEnded+0xb2>

			*voltage = (float) (((int16_t) (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1]) * ADS1115_voltCoef);
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <ADS1115_readSingleEnded+0xd0>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b21b      	sxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <ADS1115_readSingleEnded+0xd0>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	4313      	orrs	r3, r2
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <ADS1115_readSingleEnded+0xd4>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	edc3 7a00 	vstr	s15, [r3]
			return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <ADS1115_readSingleEnded+0xb4>

		}

	}

	return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1

}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	2000033c 	.word	0x2000033c
 80018b8:	2000000a 	.word	0x2000000a
 80018bc:	20000008 	.word	0x20000008
 80018c0:	200002e8 	.word	0x200002e8
 80018c4:	20000340 	.word	0x20000340
 80018c8:	20000344 	.word	0x20000344

080018cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001908:	1d39      	adds	r1, r7, #4
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	2201      	movs	r2, #1
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <__io_putchar+0x20>)
 8001912:	f005 ff75 	bl	8007800 <HAL_UART_Transmit>
  return ch;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200003ac 	.word	0x200003ac

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b0ac      	sub	sp, #176	; 0xb0
 8001928:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192a:	f002 fb19 	bl	8003f60 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
  MCP23008_Init();
 800192e:	f000 fccd 	bl	80022cc <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 fb11 	bl	8001f58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001936:	f000 fb69 	bl	800200c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193a:	f000 fc7b 	bl	8002234 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800193e:	f000 fbe1 	bl	8002104 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001942:	f000 fb81 	bl	8002048 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001946:	f000 fc29 	bl	800219c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 800194a:	f000 fbbd 	bl	80020c8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 800194e:	f000 fcbd 	bl	80022cc <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 8001952:	f000 fd7b 	bl	800244c <MCP23008_ConfigureInterrupts>

  // Initialize SHT20 Sensor
  uint32_t sht40_serial;
  if( SHT40_ReadSerial(&hi2c1, &sht40_serial) != HAL_ERROR ) {
 8001956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800195a:	4619      	mov	r1, r3
 800195c:	483d      	ldr	r0, [pc, #244]	; (8001a54 <main+0x130>)
 800195e:	f001 fecb 	bl	80036f8 <SHT40_ReadSerial>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d01b      	beq.n	80019a0 <main+0x7c>
	  	sensors.sht40.alarmState.temperature = NORMAL;
 8001968:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <main+0x134>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
	  	sensors.sht40.alarmState.humidity = NORMAL;
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <main+0x134>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  	sensors.sht40.thresholds.temp_high = TEMP_HIGH;
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <main+0x134>)
 800197a:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <main+0x138>)
 800197c:	60da      	str	r2, [r3, #12]
	  	sensors.sht40.thresholds.temp_low  = TEMP_LOW;
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <main+0x134>)
 8001980:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <main+0x13c>)
 8001982:	609a      	str	r2, [r3, #8]
	  	sensors.sht40.thresholds.temp_hys  = TEMP_HYS;
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <main+0x134>)
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
	  	sensors.sht40.thresholds.rel_high  = RH_HIGH;
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <main+0x134>)
 800198e:	4a35      	ldr	r2, [pc, #212]	; (8001a64 <main+0x140>)
 8001990:	619a      	str	r2, [r3, #24]
		sensors.sht40.thresholds.rel_low   = RH_LOW;
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <main+0x134>)
 8001994:	4a34      	ldr	r2, [pc, #208]	; (8001a68 <main+0x144>)
 8001996:	615a      	str	r2, [r3, #20]
		sensors.sht40.thresholds.rel_hys   = RH_HYS;
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <main+0x134>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	61da      	str	r2, [r3, #28]
		//printf("Failed to read serial from SHT40; check connections and reset MCU\r\n");
  }


  // Initialize accelerometer
  if(initAccelerometer()){
 80019a0:	f001 fb5e 	bl	8003060 <initAccelerometer>
  }
  else{
	  //printf("Error Accelerometer Initialization \r\n ");
  }

  if(ADS1115_Init(&hi2c1, ADS1115_DATA_RATE_64, ADS1115_PGA_ONE) == HAL_OK){
 80019a4:	2202      	movs	r2, #2
 80019a6:	2160      	movs	r1, #96	; 0x60
 80019a8:	482a      	ldr	r0, [pc, #168]	; (8001a54 <main+0x130>)
 80019aa:	f7ff feaf 	bl	800170c <ADS1115_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <main+0x98>
	  HAL_Delay(1500);
 80019b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80019b8:	f002 fb58 	bl	800406c <HAL_Delay>
  }



  // Initialize Modbus
  initModbus(&huart1, MODBUS_EN_GPIO_Port, MODBUS_EN_Pin);
 80019bc:	2210      	movs	r2, #16
 80019be:	492b      	ldr	r1, [pc, #172]	; (8001a6c <main+0x148>)
 80019c0:	482b      	ldr	r0, [pc, #172]	; (8001a70 <main+0x14c>)
 80019c2:	f7ff fe0b 	bl	80015dc <initModbus>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <main+0x150>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <main+0x154>)
 80019ce:	4413      	add	r3, r2
 80019d0:	2201      	movs	r2, #1
 80019d2:	4619      	mov	r1, r3
 80019d4:	4826      	ldr	r0, [pc, #152]	; (8001a70 <main+0x14c>)
 80019d6:	f005 ffa1 	bl	800791c <HAL_UART_Receive_IT>

  // Init ST50H AT Slave Communication
  uint8_t rxBuffer;
  HAL_UART_Receive_IT(&hlpuart1, &rxBuffer, 1);
 80019da:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80019de:	2201      	movs	r2, #1
 80019e0:	4619      	mov	r1, r3
 80019e2:	4826      	ldr	r0, [pc, #152]	; (8001a7c <main+0x158>)
 80019e4:	f005 ff9a 	bl	800791c <HAL_UART_Receive_IT>
  // Initialize timers;
  shtReadMillis = HAL_GetTick();
 80019e8:	f002 fb28 	bl	800403c <HAL_GetTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <main+0x15c>)
 80019f0:	6013      	str	r3, [r2, #0]
  payloadQueueMilis  = HAL_GetTick();
 80019f2:	f002 fb23 	bl	800403c <HAL_GetTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <main+0x160>)
 80019fa:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" # # # # # # # # # # -> %s\r\n ", FirmwareName);
 80019fc:	4922      	ldr	r1, [pc, #136]	; (8001a88 <main+0x164>)
 80019fe:	4823      	ldr	r0, [pc, #140]	; (8001a8c <main+0x168>)
 8001a00:	f008 feaa 	bl	800a758 <iprintf>
  printf("# # # # # # # # # # -> Firmware Version %d.%d.%d\r\n ", VERSION_MAJOR, VERSION_MID, VERSION_MINOR);
 8001a04:	2308      	movs	r3, #8
 8001a06:	2203      	movs	r2, #3
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4821      	ldr	r0, [pc, #132]	; (8001a90 <main+0x16c>)
 8001a0c:	f008 fea4 	bl	800a758 <iprintf>

#ifdef SCAN_I2C_DEVICES
  scanI2CDevices();
#endif

  WDTReset();
 8001a10:	f000 ff24 	bl	800285c <WDTReset>
  HAL_Delay(2000);
 8001a14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a18:	f002 fb28 	bl	800406c <HAL_Delay>

  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a22:	481c      	ldr	r0, [pc, #112]	; (8001a94 <main+0x170>)
 8001a24:	f001 f9b0 	bl	8002d88 <sendATCommand>
  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a2e:	4819      	ldr	r0, [pc, #100]	; (8001a94 <main+0x170>)
 8001a30:	f001 f9aa 	bl	8002d88 <sendATCommand>
  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a3a:	4816      	ldr	r0, [pc, #88]	; (8001a94 <main+0x170>)
 8001a3c:	f001 f9a4 	bl	8002d88 <sendATCommand>

  HAL_Delay(2000);
 8001a40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a44:	f002 fb12 	bl	800406c <HAL_Delay>
  //printf("Setting LoRa Credentials \r\n");
  if(!setLoraCredentials()){
 8001a48:	f001 f852 	bl	8002af0 <setLoraCredentials>

  }else{
	  //printf("Success setting LoRa credentials \r\n");
  }

  printf("Joining to Network \r\n");
 8001a4c:	4812      	ldr	r0, [pc, #72]	; (8001a98 <main+0x174>)
 8001a4e:	f008 ff09 	bl	800a864 <puts>

  while(hasJoinedNetwork == false){
 8001a52:	e028      	b.n	8001aa6 <main+0x182>
 8001a54:	20000348 	.word	0x20000348
 8001a58:	20000570 	.word	0x20000570
 8001a5c:	41f80000 	.word	0x41f80000
 8001a60:	41e00000 	.word	0x41e00000
 8001a64:	428c0000 	.word	0x428c0000
 8001a68:	41f00000 	.word	0x41f00000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	20000440 	.word	0x20000440
 8001a74:	200004d8 	.word	0x200004d8
 8001a78:	200004da 	.word	0x200004da
 8001a7c:	200003ac 	.word	0x200003ac
 8001a80:	200005d0 	.word	0x200005d0
 8001a84:	200005e0 	.word	0x200005e0
 8001a88:	0800e350 	.word	0x0800e350
 8001a8c:	0800e36c 	.word	0x0800e36c
 8001a90:	0800e38c 	.word	0x0800e38c
 8001a94:	0800e3c0 	.word	0x0800e3c0
 8001a98:	0800e3cc 	.word	0x0800e3cc
	  joinNetwork();
 8001a9c:	f001 f8ae 	bl	8002bfc <joinNetwork>
	  printf("Retrying Joining Lora\r\n");
 8001aa0:	4887      	ldr	r0, [pc, #540]	; (8001cc0 <main+0x39c>)
 8001aa2:	f008 fedf 	bl	800a864 <puts>
  while(hasJoinedNetwork == false){
 8001aa6:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <main+0x3a0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f3      	bne.n	8001a9c <main+0x178>
  }
  printf("Success Joining Lora \r\n");
 8001ab4:	4884      	ldr	r0, [pc, #528]	; (8001cc8 <main+0x3a4>)
 8001ab6:	f008 fed5 	bl	800a864 <puts>

  TxPayload initPayload;
  initPayload.buffer[0] = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  initPayload.buffer[1] = 0x01;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  initPayload.buffer[2] = 0x02;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  initPayload.length = 3;
 8001acc:	2303      	movs	r3, #3
 8001ace:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  initPayload.msgType = DIAGNOSTICS;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  //printf("Sending Test Lora Payload\r\n");
  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
 8001ad8:	466d      	mov	r5, sp
 8001ada:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001aea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001aee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001af2:	cb0c      	ldmia	r3, {r2, r3}
 8001af4:	2101      	movs	r1, #1
 8001af6:	2004      	movs	r0, #4
 8001af8:	f001 f898 	bl	8002c2c <sendToLora>

//  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
//
//  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
  mcuResetMillis = HAL_GetTick();
 8001afc:	f002 fa9e 	bl	800403c <HAL_GetTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a72      	ldr	r2, [pc, #456]	; (8001ccc <main+0x3a8>)
 8001b04:	6013      	str	r3, [r2, #0]
  warmUpMillis = HAL_GetTick();
 8001b06:	f002 fa99 	bl	800403c <HAL_GetTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <main+0x3ac>)
 8001b0e:	6013      	str	r3, [r2, #0]
  acrelReadMillis = HAL_GetTick();
 8001b10:	f002 fa94 	bl	800403c <HAL_GetTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a6f      	ldr	r2, [pc, #444]	; (8001cd4 <main+0x3b0>)
 8001b18:	6013      	str	r3, [r2, #0]


  initQueue(&payLoadQueue);
 8001b1a:	486f      	ldr	r0, [pc, #444]	; (8001cd8 <main+0x3b4>)
 8001b1c:	f001 fc5e 	bl	80033dc <initQueue>

  while (1)
  {

	  // Internal IWDT Feed
	  HAL_IWDG_Refresh(&hiwdg);
 8001b20:	486e      	ldr	r0, [pc, #440]	; (8001cdc <main+0x3b8>)
 8001b22:	f004 f81f 	bl	8005b64 <HAL_IWDG_Refresh>

	  // External WDT Feed
	  if(HAL_GetTick() - wdtResetMillis > WDT_RESET_INTERVAL){
 8001b26:	f002 fa89 	bl	800403c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <main+0x3bc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d906      	bls.n	8001b48 <main+0x224>
		  WDTReset();
 8001b3a:	f000 fe8f 	bl	800285c <WDTReset>
		  wdtResetMillis = HAL_GetTick();
 8001b3e:	f002 fa7d 	bl	800403c <HAL_GetTick>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <main+0x3bc>)
 8001b46:	6013      	str	r3, [r2, #0]
	  }

	  //Do Warm up to exclude false readings
	  if(isWarmedUp == false){
 8001b48:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <main+0x3c0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <main+0x24c>
		  if(HAL_GetTick() - warmUpMillis > WARM_UP_TIME){
 8001b56:	f002 fa71 	bl	800403c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <main+0x3ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d902      	bls.n	8001b70 <main+0x24c>
			  isWarmedUp = true;
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <main+0x3c0>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(2000);




	  if(isDownlinkReceived == true){
 8001b70:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <main+0x3c4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d045      	beq.n	8001c04 <main+0x2e0>
		  isDownlinkReceived = false;
 8001b78:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <main+0x3c4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
		  printf("DOWNLINK MESSAGE RECEIVED \r\n");
 8001b7e:	485b      	ldr	r0, [pc, #364]	; (8001cec <main+0x3c8>)
 8001b80:	f008 fe70 	bl	800a864 <puts>
		  printf("Received Buffer: %.*s\r\n", downlinkBufferLen, downlinkBuffer);
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <main+0x3cc>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <main+0x3d0>)
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	485a      	ldr	r0, [pc, #360]	; (8001cf8 <main+0x3d4>)
 8001b8e:	f008 fde3 	bl	800a758 <iprintf>

		  // Check for Modbus Control
		  if(strstr(downlinkBuffer, "0101") != NULL){
 8001b92:	495a      	ldr	r1, [pc, #360]	; (8001cfc <main+0x3d8>)
 8001b94:	4857      	ldr	r0, [pc, #348]	; (8001cf4 <main+0x3d0>)
 8001b96:	f008 feee 	bl	800a976 <strstr>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <main+0x294>
			  printf("Modbus Command: Turn ON \r\n ");
 8001ba0:	4857      	ldr	r0, [pc, #348]	; (8001d00 <main+0x3dc>)
 8001ba2:	f008 fdd9 	bl	800a758 <iprintf>
			  sendRaw(setMeterOn, METER_CMD_ON_LEN, &ModbusResp);
 8001ba6:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <main+0x3e0>)
 8001ba8:	210d      	movs	r1, #13
 8001baa:	4857      	ldr	r0, [pc, #348]	; (8001d08 <main+0x3e4>)
 8001bac:	f7ff fd34 	bl	8001618 <sendRaw>
			  HAL_Delay(1000);
 8001bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb4:	f002 fa5a 	bl	800406c <HAL_Delay>
		  }
		  if(strstr(downlinkBuffer, "0102") != NULL){
 8001bb8:	4954      	ldr	r1, [pc, #336]	; (8001d0c <main+0x3e8>)
 8001bba:	484e      	ldr	r0, [pc, #312]	; (8001cf4 <main+0x3d0>)
 8001bbc:	f008 fedb 	bl	800a976 <strstr>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <main+0x2ba>
			  printf("Modbus Command: Turn OFF \r\n ");
 8001bc6:	4852      	ldr	r0, [pc, #328]	; (8001d10 <main+0x3ec>)
 8001bc8:	f008 fdc6 	bl	800a758 <iprintf>
			  sendRaw(setMeterOff, METER_CMD_OFF_LEN, &ModbusResp);
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <main+0x3e0>)
 8001bce:	210d      	movs	r1, #13
 8001bd0:	4850      	ldr	r0, [pc, #320]	; (8001d14 <main+0x3f0>)
 8001bd2:	f7ff fd21 	bl	8001618 <sendRaw>
			  HAL_Delay(1000);
 8001bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bda:	f002 fa47 	bl	800406c <HAL_Delay>
		  }
		  if(strstr(downlinkBuffer, "0103") != NULL){
 8001bde:	494e      	ldr	r1, [pc, #312]	; (8001d18 <main+0x3f4>)
 8001be0:	4844      	ldr	r0, [pc, #272]	; (8001cf4 <main+0x3d0>)
 8001be2:	f008 fec8 	bl	800a976 <strstr>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <main+0x2e0>
			  printf("Modbus Command: Prepaid \r\n ");
 8001bec:	484b      	ldr	r0, [pc, #300]	; (8001d1c <main+0x3f8>)
 8001bee:	f008 fdb3 	bl	800a758 <iprintf>
			  sendRaw(setMeterPrepaid, METER_CMD_PREPAID_LEN, &ModbusResp);
 8001bf2:	4a44      	ldr	r2, [pc, #272]	; (8001d04 <main+0x3e0>)
 8001bf4:	210d      	movs	r1, #13
 8001bf6:	484a      	ldr	r0, [pc, #296]	; (8001d20 <main+0x3fc>)
 8001bf8:	f7ff fd0e 	bl	8001618 <sendRaw>
			  HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	f002 fa34 	bl	800406c <HAL_Delay>
		  }
	  }
	  if(isDownlinkReceived == true){
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <main+0x3c4>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <main+0x2f4>
		  isDownlinkReceived = false;
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <main+0x3c4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		  printf("CONFIRMED UPLINK RECEIVED \r\n");
 8001c12:	4844      	ldr	r0, [pc, #272]	; (8001d24 <main+0x400>)
 8001c14:	f008 fe26 	bl	800a864 <puts>
	  }



	  // Hanging / Freezing BAND AID Solution
	  if(HAL_GetTick() - mcuResetMillis > MCU_REST_INTERVAL){
 8001c18:	f002 fa10 	bl	800403c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <main+0x3a8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a40      	ldr	r2, [pc, #256]	; (8001d28 <main+0x404>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d90a      	bls.n	8001c40 <main+0x31c>
		  //printf("RESTARTING MCU NOW... \r\n");
		  HAL_Delay(1000);
 8001c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c2e:	f002 fa1d 	bl	800406c <HAL_Delay>
		  HAL_NVIC_SystemReset();
 8001c32:	f002 fb58 	bl	80042e6 <HAL_NVIC_SystemReset>
		  mcuResetMillis = HAL_GetTick();
 8001c36:	f002 fa01 	bl	800403c <HAL_GetTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <main+0x3a8>)
 8001c3e:	6013      	str	r3, [r2, #0]
	  }


	  // Handle Dequeue for Payloads
	  if(HAL_GetTick() - payloadQueueMilis > QUEUE_SEND_INTERVAL){
 8001c40:	f002 f9fc 	bl	800403c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <main+0x408>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f240 8087 	bls.w	8001d64 <main+0x440>
		  TxPayload payload;
		  if (dequeue(&payLoadQueue, &payload) == 0) {
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <main+0x3b4>)
 8001c5e:	f001 fc27 	bl	80034b0 <dequeue>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d178      	bne.n	8001d5a <main+0x436>
		      //printf("Sending To Lora \r\n ");

		      if(payload.msgType == UNSCHEDULED_TRANSMISSION){
 8001c68:	7c3b      	ldrb	r3, [r7, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d112      	bne.n	8001c94 <main+0x370>
		    	  sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, payload);
 8001c6e:	466d      	mov	r5, sp
 8001c70:	f107 0418 	add.w	r4, r7, #24
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	cb0c      	ldmia	r3, {r2, r3}
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 ffcd 	bl	8002c2c <sendToLora>
 8001c92:	e062      	b.n	8001d5a <main+0x436>
		      }

		      else if(payload.msgType == HEARTBEAT){
 8001c94:	7c3b      	ldrb	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d14a      	bne.n	8001d30 <main+0x40c>
		    	  sendToLora(HEARTBEAT_PORT, UNCONFIRMED_UPLINK, payload);
 8001c9a:	466d      	mov	r5, sp
 8001c9c:	f107 0418 	add.w	r4, r7, #24
 8001ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	cb0c      	ldmia	r3, {r2, r3}
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 ffb7 	bl	8002c2c <sendToLora>
 8001cbe:	e04c      	b.n	8001d5a <main+0x436>
 8001cc0:	0800e3e4 	.word	0x0800e3e4
 8001cc4:	200005cd 	.word	0x200005cd
 8001cc8:	0800e3fc 	.word	0x0800e3fc
 8001ccc:	200005dc 	.word	0x200005dc
 8001cd0:	200006c8 	.word	0x200006c8
 8001cd4:	200006cc 	.word	0x200006cc
 8001cd8:	200006f4 	.word	0x200006f4
 8001cdc:	2000039c 	.word	0x2000039c
 8001ce0:	200005d8 	.word	0x200005d8
 8001ce4:	200006c4 	.word	0x200006c4
 8001ce8:	200006c2 	.word	0x200006c2
 8001cec:	0800e414 	.word	0x0800e414
 8001cf0:	200006c3 	.word	0x200006c3
 8001cf4:	2000065c 	.word	0x2000065c
 8001cf8:	0800e430 	.word	0x0800e430
 8001cfc:	0800e448 	.word	0x0800e448
 8001d00:	0800e450 	.word	0x0800e450
 8001d04:	200004d8 	.word	0x200004d8
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	0800e46c 	.word	0x0800e46c
 8001d10:	0800e474 	.word	0x0800e474
 8001d14:	20000020 	.word	0x20000020
 8001d18:	0800e494 	.word	0x0800e494
 8001d1c:	0800e49c 	.word	0x0800e49c
 8001d20:	20000040 	.word	0x20000040
 8001d24:	0800e4b8 	.word	0x0800e4b8
 8001d28:	0002bf20 	.word	0x0002bf20
 8001d2c:	200005e0 	.word	0x200005e0
		      }
		      else if(payload.msgType == POWER_PARAMS){
 8001d30:	7c3b      	ldrb	r3, [r7, #16]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d111      	bne.n	8001d5a <main+0x436>
				  sendToLora(POWER_PORT, UNCONFIRMED_UPLINK, payload);
 8001d36:	466d      	mov	r5, sp
 8001d38:	f107 0418 	add.w	r4, r7, #24
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d44:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	cb0c      	ldmia	r3, {r2, r3}
 8001d52:	2100      	movs	r1, #0
 8001d54:	2005      	movs	r0, #5
 8001d56:	f000 ff69 	bl	8002c2c <sendToLora>
			  }

		  } else {
		      //printf("NOTHING TO SEND ... \r\n");
		  }
		  payloadQueueMilis = HAL_GetTick();
 8001d5a:	f002 f96f 	bl	800403c <HAL_GetTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <main+0x5f0>)
 8001d62:	6013      	str	r3, [r2, #0]





	  readAccelerometer(&sensors.accel);
 8001d64:	486c      	ldr	r0, [pc, #432]	; (8001f18 <main+0x5f4>)
 8001d66:	f001 f9f3 	bl	8003150 <readAccelerometer>




  	  // Check "INTERUPT EVENTS"
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 8001d6a:	f002 f967 	bl	800403c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <main+0x5f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d7a:	d955      	bls.n	8001e28 <main+0x504>

  		 // Read Water Leak
  		readWaterLeak(&sensors.leak);
 8001d7c:	4868      	ldr	r0, [pc, #416]	; (8001f20 <main+0x5fc>)
 8001d7e:	f001 fc6f 	bl	8003660 <readWaterLeak>
  		current_leak = sensors.leak.state;
 8001d82:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <main+0x600>)
 8001d84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001d88:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <main+0x604>)
 8001d8a:	701a      	strb	r2, [r3, #0]
  		if(current_leak != prev_leak){
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <main+0x604>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <main+0x608>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <main+0x480>
  			//printf("ALERT ON LEAK \r\n");
  			prev_leak = current_leak;
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <main+0x604>)
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <main+0x608>)
 8001d9e:	701a      	strb	r2, [r3, #0]

  			queueUnscheduledPayload();
 8001da0:	f001 fbd6 	bl	8003550 <queueUnscheduledPayload>


  		}

  		// Read Temperature
  		readSHT40(&sensors.sht40);
 8001da4:	485f      	ldr	r0, [pc, #380]	; (8001f24 <main+0x600>)
 8001da6:	f001 f823 	bl	8002df0 <readSHT40>

  		// Read Smoke Sensor
  		sensors.smoke = ReadSmokeStatus();
 8001daa:	4c5e      	ldr	r4, [pc, #376]	; (8001f24 <main+0x600>)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fbd2 	bl	8002558 <ReadSmokeStatus>
 8001db4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001db8:	463a      	mov	r2, r7
 8001dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		current_smoke =  sensors.smoke.level;
 8001dc0:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <main+0x600>)
 8001dc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <main+0x60c>)
 8001dc8:	701a      	strb	r2, [r3, #0]
  		if(current_smoke != prev_smoke){
 8001dca:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <main+0x60c>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <main+0x610>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d005      	beq.n	8001de2 <main+0x4be>
  			//printf("ALERT ON SMOKE \r\n");
  			prev_smoke = current_smoke;
 8001dd6:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <main+0x60c>)
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <main+0x610>)
 8001ddc:	701a      	strb	r2, [r3, #0]

  			queueUnscheduledPayload();
 8001dde:	f001 fbb7 	bl	8003550 <queueUnscheduledPayload>

  		}

  		// Read DryContacts
  	    sensors.dryContact = MCP23008_ReadInputs();
 8001de2:	4c50      	ldr	r4, [pc, #320]	; (8001f24 <main+0x600>)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fa86 	bl	80022f8 <MCP23008_ReadInputs>
 8001dec:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001df0:	463a      	mov	r2, r7
 8001df2:	6810      	ldr	r0, [r2, #0]
 8001df4:	6851      	ldr	r1, [r2, #4]
 8001df6:	c303      	stmia	r3!, {r0, r1}
 8001df8:	7a12      	ldrb	r2, [r2, #8]
 8001dfa:	701a      	strb	r2, [r3, #0]
  	    current_dryContact = sensors.dryContact.value;
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <main+0x600>)
 8001dfe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <main+0x614>)
 8001e04:	701a      	strb	r2, [r3, #0]
  	    if(current_dryContact != prev_dryContact){
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <main+0x614>)
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <main+0x618>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d005      	beq.n	8001e1e <main+0x4fa>
  	    	//printf("ALERT ON DRY CONTACT \r\n");
  	    	prev_dryContact = current_dryContact;
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <main+0x614>)
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <main+0x618>)
 8001e18:	701a      	strb	r2, [r3, #0]

  	    	queueUnscheduledPayload();
 8001e1a:	f001 fb99 	bl	8003550 <queueUnscheduledPayload>
//				sensors.dryContact.DC7, sensors.dryContact.DC8);
//  		printLineMarker('*');
#endif


  		shtReadMillis = HAL_GetTick();
 8001e1e:	f002 f90d 	bl	800403c <HAL_GetTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a3d      	ldr	r2, [pc, #244]	; (8001f1c <main+0x5f8>)
 8001e26:	6013      	str	r3, [r2, #0]
  	  }

  	  // Read Acrel Meter every Y Interval
  	  if(HAL_GetTick() - acrelReadMillis > ACREL_READ_INTERVAL){
 8001e28:	f002 f908 	bl	800403c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <main+0x61c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d937      	bls.n	8001eac <main+0x588>

  		  	TxPayload _powerPayload;
  		    _powerPayload.msgType = POWER_PARAMS;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	743b      	strb	r3, [r7, #16]
  		    _powerPayload.buffer[0] = POWER_PARAMS;
 8001e40:	2305      	movs	r3, #5
 8001e42:	747b      	strb	r3, [r7, #17]
  		    _powerPayload.length = 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			// First Modbus Command
			sendRaw(getMeterDataCmd1, GetMeterData_LEN, &ModbusResp);
 8001e4a:	4a3e      	ldr	r2, [pc, #248]	; (8001f44 <main+0x620>)
 8001e4c:	2108      	movs	r1, #8
 8001e4e:	483e      	ldr	r0, [pc, #248]	; (8001f48 <main+0x624>)
 8001e50:	f7ff fbe2 	bl	8001618 <sendRaw>
			HAL_Delay(2000);
 8001e54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e58:	f002 f908 	bl	800406c <HAL_Delay>
//			  for (int x = 0; x < ModbusResp.rxIndex; x++) {
//					printf("%02X ", ModbusResp.buffer[x]);
//			  }
//			  printf("\r\n");

			appendModbusToPayload(&_powerPayload, &ModbusResp);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4938      	ldr	r1, [pc, #224]	; (8001f44 <main+0x620>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fa98 	bl	8003398 <appendModbusToPayload>

			// Second Modbus Command
			sendRaw(getMeterDataCmd2, GetMeterData_LEN, &ModbusResp);
 8001e68:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <main+0x620>)
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <main+0x628>)
 8001e6e:	f7ff fbd3 	bl	8001618 <sendRaw>
			HAL_Delay(2000);
 8001e72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e76:	f002 f8f9 	bl	800406c <HAL_Delay>
//			  for (int x = 0; x < ModbusResp.rxIndex; x++) {
//					printf("%02X ", ModbusResp.buffer[x]);
//			  }
//			  printf("\r\n");

			appendModbusToPayload(&_powerPayload, &ModbusResp);
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	4931      	ldr	r1, [pc, #196]	; (8001f44 <main+0x620>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fa89 	bl	8003398 <appendModbusToPayload>

			queuePayload(_powerPayload);
 8001e86:	466d      	mov	r5, sp
 8001e88:	f107 0420 	add.w	r4, r7, #32
 8001e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	602b      	str	r3, [r5, #0]
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9e:	f001 fbb7 	bl	8003610 <queuePayload>

			acrelReadMillis = HAL_GetTick();
 8001ea2:	f002 f8cb 	bl	800403c <HAL_GetTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <main+0x61c>)
 8001eaa:	6013      	str	r3, [r2, #0]
  	  }



  	  // Read All Sensors every Y Interval - HEART BEAT
  	  if(HAL_GetTick() - sensorsReadMillis > DEVICE_HEARTBEAT){
 8001eac:	f002 f8c6 	bl	800403c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <main+0x62c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f67f ae2f 	bls.w	8001b20 <main+0x1fc>

  		// Read Water Leak
  		readWaterLeak(&sensors.leak);
 8001ec2:	4817      	ldr	r0, [pc, #92]	; (8001f20 <main+0x5fc>)
 8001ec4:	f001 fbcc 	bl	8003660 <readWaterLeak>


  		// Read SHT20
  		readSHT40(&sensors.sht40);
 8001ec8:	4816      	ldr	r0, [pc, #88]	; (8001f24 <main+0x600>)
 8001eca:	f000 ff91 	bl	8002df0 <readSHT40>

	    // Read Smoke Sensor
	    sensors.smoke = ReadSmokeStatus();
 8001ece:	4c15      	ldr	r4, [pc, #84]	; (8001f24 <main+0x600>)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fb40 	bl	8002558 <ReadSmokeStatus>
 8001ed8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001edc:	463a      	mov	r2, r7
 8001ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Read DryContacts
	    sensors.dryContact = MCP23008_ReadInputs();
 8001ee4:	4c0f      	ldr	r4, [pc, #60]	; (8001f24 <main+0x600>)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fa05 	bl	80022f8 <MCP23008_ReadInputs>
 8001eee:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001ef2:	463a      	mov	r2, r7
 8001ef4:	6810      	ldr	r0, [r2, #0]
 8001ef6:	6851      	ldr	r1, [r2, #4]
 8001ef8:	c303      	stmia	r3!, {r0, r1}
 8001efa:	7a12      	ldrb	r2, [r2, #8]
 8001efc:	701a      	strb	r2, [r3, #0]

	    // PLaceholder for LTC4015
	    readLTC4015(&sensors.ltc4015);
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <main+0x630>)
 8001f00:	f001 f9ca 	bl	8003298 <readLTC4015>


	    queueHeartbeatPayload();
 8001f04:	f001 fb54 	bl	80035b0 <queueHeartbeatPayload>
//	    TxPayload _heartBeatPayload;
//	    generateHeartbeatTxPayload(sensors, &_heartBeatPayload);
//
//	    sendToLora(HEARTBEAT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);

  		sensorsReadMillis = HAL_GetTick();
 8001f08:	f002 f898 	bl	800403c <HAL_GetTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <main+0x62c>)
 8001f10:	6013      	str	r3, [r2, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8001f12:	e605      	b.n	8001b20 <main+0x1fc>
 8001f14:	200005e0 	.word	0x200005e0
 8001f18:	200005c0 	.word	0x200005c0
 8001f1c:	200005d0 	.word	0x200005d0
 8001f20:	200005c4 	.word	0x200005c4
 8001f24:	20000570 	.word	0x20000570
 8001f28:	200006f0 	.word	0x200006f0
 8001f2c:	200006f1 	.word	0x200006f1
 8001f30:	200006ef 	.word	0x200006ef
 8001f34:	200006ee 	.word	0x200006ee
 8001f38:	200006ed 	.word	0x200006ed
 8001f3c:	200006ec 	.word	0x200006ec
 8001f40:	200006cc 	.word	0x200006cc
 8001f44:	200004d8 	.word	0x200004d8
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	20000018 	.word	0x20000018
 8001f50:	200005d4 	.word	0x200005d4
 8001f54:	200005ac 	.word	0x200005ac

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b09a      	sub	sp, #104	; 0x68
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	2248      	movs	r2, #72	; 0x48
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 fc94 	bl	8009894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <SystemClock_Config+0xb0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f86:	4a20      	ldr	r2, [pc, #128]	; (8002008 <SystemClock_Config+0xb0>)
 8001f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <SystemClock_Config+0xb0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001f9a:	232a      	movs	r3, #42	; 0x2a
 8001f9c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001fb0:	23a0      	movs	r3, #160	; 0xa0
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f973 	bl	80062ac <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001fcc:	f001 fb70 	bl	80036b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001fd0:	236f      	movs	r3, #111	; 0x6f
 8001fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fccf 	bl	8006994 <HAL_RCC_ClockConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ffc:	f001 fb58 	bl	80036b0 <Error_Handler>
  }
}
 8002000:	bf00      	nop
 8002002:	3768      	adds	r7, #104	; 0x68
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58000400 	.word	0x58000400

0800200c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	; 0x50
 8002010:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002012:	463b      	mov	r3, r7
 8002014:	2250      	movs	r2, #80	; 0x50
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f007 fc3b 	bl	8009894 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800201e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002022:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002024:	2300      	movs	r3, #0
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002028:	2310      	movs	r3, #16
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4618      	mov	r0, r3
 8002030:	f005 f8ef 	bl	8007212 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800203a:	f001 fb39 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800203e:	bf00      	nop
 8002040:	3750      	adds	r7, #80	; 0x50
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_I2C1_Init+0x74>)
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <MX_I2C1_Init+0x78>)
 8002050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_I2C1_Init+0x74>)
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <MX_I2C1_Init+0x7c>)
 8002056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <MX_I2C1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_I2C1_Init+0x74>)
 8002060:	2201      	movs	r2, #1
 8002062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_I2C1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_I2C1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_I2C1_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_I2C1_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_I2C1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002082:	480e      	ldr	r0, [pc, #56]	; (80020bc <MX_I2C1_Init+0x74>)
 8002084:	f002 fb9e 	bl	80047c4 <HAL_I2C_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800208e:	f001 fb0f 	bl	80036b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002092:	2100      	movs	r1, #0
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <MX_I2C1_Init+0x74>)
 8002096:	f003 fc7f 	bl	8005998 <HAL_I2CEx_ConfigAnalogFilter>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a0:	f001 fb06 	bl	80036b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a4:	2100      	movs	r1, #0
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_I2C1_Init+0x74>)
 80020a8:	f003 fcc1 	bl	8005a2e <HAL_I2CEx_ConfigDigitalFilter>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020b2:	f001 fafd 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000348 	.word	0x20000348
 80020c0:	40005400 	.word	0x40005400
 80020c4:	00707cbb 	.word	0x00707cbb

080020c8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <MX_IWDG_Init+0x34>)
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <MX_IWDG_Init+0x38>)
 80020d0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_IWDG_Init+0x34>)
 80020d4:	2206      	movs	r2, #6
 80020d6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <MX_IWDG_Init+0x34>)
 80020da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020de:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_IWDG_Init+0x34>)
 80020e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020e6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_IWDG_Init+0x34>)
 80020ea:	f003 fcec 	bl	8005ac6 <HAL_IWDG_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80020f4:	f001 fadc 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000039c 	.word	0x2000039c
 8002100:	40003000 	.word	0x40003000

08002104 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <MX_LPUART1_UART_Init+0x94>)
 800210c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002114:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 800214e:	f005 fb07 	bl	8007760 <HAL_UART_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002158:	f001 faaa 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002160:	f007 fa85 	bl	800966e <HAL_UARTEx_SetTxFifoThreshold>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800216a:	f001 faa1 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	4808      	ldr	r0, [pc, #32]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002172:	f007 faba 	bl	80096ea <HAL_UARTEx_SetRxFifoThreshold>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800217c:	f001 fa98 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_LPUART1_UART_Init+0x90>)
 8002182:	f007 fa3b 	bl	80095fc <HAL_UARTEx_DisableFifoMode>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800218c:	f001 fa90 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200003ac 	.word	0x200003ac
 8002198:	40008000 	.word	0x40008000

0800219c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021a2:	4a23      	ldr	r2, [pc, #140]	; (8002230 <MX_USART1_UART_Init+0x94>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e4:	4811      	ldr	r0, [pc, #68]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021e6:	f005 fabb 	bl	8007760 <HAL_UART_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021f0:	f001 fa5e 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f4:	2100      	movs	r1, #0
 80021f6:	480d      	ldr	r0, [pc, #52]	; (800222c <MX_USART1_UART_Init+0x90>)
 80021f8:	f007 fa39 	bl	800966e <HAL_UARTEx_SetTxFifoThreshold>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002202:	f001 fa55 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002206:	2100      	movs	r1, #0
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <MX_USART1_UART_Init+0x90>)
 800220a:	f007 fa6e 	bl	80096ea <HAL_UARTEx_SetRxFifoThreshold>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002214:	f001 fa4c 	bl	80036b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <MX_USART1_UART_Init+0x90>)
 800221a:	f007 f9ef 	bl	80095fc <HAL_UARTEx_DisableFifoMode>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002224:	f001 fa44 	bl	80036b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000440 	.word	0x20000440
 8002230:	40013800 	.word	0x40013800

08002234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	2002      	movs	r0, #2
 800224a:	f7ff fb3f 	bl	80018cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2004      	movs	r0, #4
 8002250:	f7ff fb3c 	bl	80018cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WDT_DONE_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	f244 0110 	movw	r1, #16400	; 0x4010
 800225a:	481b      	ldr	r0, [pc, #108]	; (80022c8 <MX_GPIO_Init+0x94>)
 800225c:	f002 fa9a 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 8002260:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002264:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002266:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800226a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <MX_GPIO_Init+0x94>)
 8002276:	f002 f905 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDT_DONE_Pin MODBUS_EN_Pin */
  GPIO_InitStruct.Pin = WDT_DONE_Pin|MODBUS_EN_Pin;
 800227a:	f244 0310 	movw	r3, #16400	; 0x4010
 800227e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002280:	2301      	movs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_GPIO_Init+0x94>)
 8002292:	f002 f8f7 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MX_GPIO_Init+0x94>)
 80022ac:	f002 f8ea 	bl	8004484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2028      	movs	r0, #40	; 0x28
 80022b6:	f001 ffee 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022ba:	2028      	movs	r0, #40	; 0x28
 80022bc:	f002 f805 	bl	80042ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	48000400 	.word	0x48000400

080022cc <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 80022d2:	2300      	movs	r3, #0
 80022d4:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 80022d6:	23ff      	movs	r3, #255	; 0xff
 80022d8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80022da:	1d3a      	adds	r2, r7, #4
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2302      	movs	r3, #2
 80022e4:	2142      	movs	r1, #66	; 0x42
 80022e6:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MCP23008_Init+0x28>)
 80022e8:	f002 fafc 	bl	80048e4 <HAL_I2C_Master_Transmit>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000348 	.word	0x20000348

080022f8 <MCP23008_ReadInputs>:

DryContactStatus MCP23008_ReadInputs(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 8002300:	2309      	movs	r3, #9
 8002302:	753b      	strb	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 8002304:	f107 0214 	add.w	r2, r7, #20
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2142      	movs	r1, #66	; 0x42
 8002312:	4836      	ldr	r0, [pc, #216]	; (80023ec <MCP23008_ReadInputs+0xf4>)
 8002314:	f002 fae6 	bl	80048e4 <HAL_I2C_Master_Transmit>
    //HAL_Delay(50);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8002318:	f107 0213 	add.w	r2, r7, #19
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	2142      	movs	r1, #66	; 0x42
 8002326:	4831      	ldr	r0, [pc, #196]	; (80023ec <MCP23008_ReadInputs+0xf4>)
 8002328:	f002 fbd0 	bl	8004acc <HAL_I2C_Master_Receive>

    DryContactStatus dryContact;
    dryContact.value = gpioState;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	723b      	strb	r3, [r7, #8]
	dryContact.DC1 = (gpioState & (1 << 0)) ? true : false;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	727b      	strb	r3, [r7, #9]
	dryContact.DC2 = (gpioState & (1 << 1)) ? true : false;
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	105b      	asrs	r3, r3, #1
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	72bb      	strb	r3, [r7, #10]
	dryContact.DC3 = (gpioState & (1 << 2)) ? true : false;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	109b      	asrs	r3, r3, #2
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	72fb      	strb	r3, [r7, #11]
	dryContact.DC4 = (gpioState & (1 << 3)) ? true : false;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	10db      	asrs	r3, r3, #3
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	733b      	strb	r3, [r7, #12]
	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	111b      	asrs	r3, r3, #4
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	737b      	strb	r3, [r7, #13]
	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	115b      	asrs	r3, r3, #5
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	73bb      	strb	r3, [r7, #14]
	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	119b      	asrs	r3, r3, #6
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	73fb      	strb	r3, [r7, #15]
	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	11db      	asrs	r3, r3, #7
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	743b      	strb	r3, [r7, #16]

	return dryContact;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	cb03      	ldmia	r3!, {r0, r1}
 80023dc:	6010      	str	r0, [r2, #0]
 80023de:	6051      	str	r1, [r2, #4]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	7213      	strb	r3, [r2, #8]
}
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000348 	.word	0x20000348

080023f0 <MCP23008_ReadCapturedINT>:

DryContactStatus MCP23008_ReadCapturedINT(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_INTCAP;
 80023f8:	2308      	movs	r3, #8
 80023fa:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 80023fc:	f107 020c 	add.w	r2, r7, #12
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	2142      	movs	r1, #66	; 0x42
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <MCP23008_ReadCapturedINT+0x54>)
 800240c:	f002 fa6a 	bl	80048e4 <HAL_I2C_Master_Transmit>
    //HAL_Delay(10);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8002410:	f107 020b 	add.w	r2, r7, #11
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2301      	movs	r3, #1
 800241c:	2142      	movs	r1, #66	; 0x42
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <MCP23008_ReadCapturedINT+0x54>)
 8002420:	f002 fb54 	bl	8004acc <HAL_I2C_Master_Receive>

//    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8002424:	7afa      	ldrb	r2, [r7, #11]
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MCP23008_ReadCapturedINT+0x58>)
 8002428:	701a      	strb	r2, [r3, #0]
//	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
//	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
//	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
//	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;

	return dryContact;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <MCP23008_ReadCapturedINT+0x58>)
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	cb03      	ldmia	r3!, {r0, r1}
 8002434:	6010      	str	r0, [r2, #0]
 8002436:	6051      	str	r1, [r2, #4]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	7213      	strb	r3, [r2, #8]
}
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000348 	.word	0x20000348
 8002448:	200005ec 	.word	0x200005ec

0800244c <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 8002452:	2302      	movs	r3, #2
 8002454:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 8002456:	23ff      	movs	r3, #255	; 0xff
 8002458:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800245a:	1d3a      	adds	r2, r7, #4
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2302      	movs	r3, #2
 8002464:	2142      	movs	r1, #66	; 0x42
 8002466:	4821      	ldr	r0, [pc, #132]	; (80024ec <MCP23008_ConfigureInterrupts+0xa0>)
 8002468:	f002 fa3c 	bl	80048e4 <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 800246c:	2304      	movs	r3, #4
 800246e:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 8002470:	2300      	movs	r3, #0
 8002472:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002474:	1d3a      	adds	r2, r7, #4
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2302      	movs	r3, #2
 800247e:	2142      	movs	r1, #66	; 0x42
 8002480:	481a      	ldr	r0, [pc, #104]	; (80024ec <MCP23008_ConfigureInterrupts+0xa0>)
 8002482:	f002 fa2f 	bl	80048e4 <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 8002486:	2303      	movs	r3, #3
 8002488:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 800248a:	2300      	movs	r3, #0
 800248c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800248e:	1d3a      	adds	r2, r7, #4
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2302      	movs	r3, #2
 8002498:	2142      	movs	r1, #66	; 0x42
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <MCP23008_ConfigureInterrupts+0xa0>)
 800249c:	f002 fa22 	bl	80048e4 <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 80024a0:	2305      	movs	r3, #5
 80024a2:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	2142      	movs	r1, #66	; 0x42
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <MCP23008_ConfigureInterrupts+0xa0>)
 80024b4:	f002 fb0a 	bl	8004acc <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	f023 0306 	bic.w	r3, r3, #6
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 80024cc:	2305      	movs	r3, #5
 80024ce:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80024d0:	1d3a      	adds	r2, r7, #4
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2302      	movs	r3, #2
 80024da:	2142      	movs	r1, #66	; 0x42
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <MCP23008_ConfigureInterrupts+0xa0>)
 80024de:	f002 fa01 	bl	80048e4 <HAL_I2C_Master_Transmit>

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000348 	.word	0x20000348

080024f0 <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	82fb      	strh	r3, [r7, #22]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x60>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	8afb      	ldrh	r3, [r7, #22]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01c      	beq.n	8002540 <HAL_GPIO_EXTI_IRQHandler+0x50>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x60>)
 8002508:	8afb      	ldrh	r3, [r7, #22]
 800250a:	60d3      	str	r3, [r2, #12]

    switch(GPIO_Pin)
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002512:	d009      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x38>
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002518:	dc14      	bgt.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0x54>
 800251a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251e:	d00b      	beq.n	8002538 <HAL_GPIO_EXTI_IRQHandler+0x48>
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d008      	beq.n	8002538 <HAL_GPIO_EXTI_IRQHandler+0x48>
      case SMOKE_A_Pin:
      case SMOKE_B_Pin:
    	  TxTriggers = SMOKE_SENSOR;
          break;
      default:
        break;
 8002526:	e00d      	b.n	8002544 <HAL_GPIO_EXTI_IRQHandler+0x54>
    	  MCP23008_ReadCapturedINT();
 8002528:	463b      	mov	r3, r7
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff60 	bl	80023f0 <MCP23008_ReadCapturedINT>
    	  TxTriggers = DRY_CONTACT;
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
          break;
 8002536:	e006      	b.n	8002546 <HAL_GPIO_EXTI_IRQHandler+0x56>
    	  TxTriggers = SMOKE_SENSOR;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 800253a:	2202      	movs	r2, #2
 800253c:	701a      	strb	r2, [r3, #0]
          break;
 800253e:	e002      	b.n	8002546 <HAL_GPIO_EXTI_IRQHandler+0x56>
    }

  }
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <HAL_GPIO_EXTI_IRQHandler+0x56>
        break;
 8002544:	bf00      	nop
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	58000800 	.word	0x58000800
 8002554:	200004d4 	.word	0x200004d4

08002558 <ReadSmokeStatus>:

SmokeStatus ReadSmokeStatus(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    SmokeStatus smokeStatus;
    smokeStatus.pinA = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 8002560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002564:	482e      	ldr	r0, [pc, #184]	; (8002620 <ReadSmokeStatus+0xc8>)
 8002566:	f002 f8fd 	bl	8004764 <HAL_GPIO_ReadPin>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	733b      	strb	r3, [r7, #12]
    smokeStatus.pinB = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 8002578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <ReadSmokeStatus+0xc8>)
 800257e:	f002 f8f1 	bl	8004764 <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	737b      	strb	r3, [r7, #13]

    if (!smokeStatus.pinA && !smokeStatus.pinB) {
 8002590:	7b3b      	ldrb	r3, [r7, #12]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <ReadSmokeStatus+0x5a>
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <ReadSmokeStatus+0x5a>
        smokeStatus.status = "Clean";
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <ReadSmokeStatus+0xcc>)
 80025aa:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	753b      	strb	r3, [r7, #20]
 80025b0:	e02a      	b.n	8002608 <ReadSmokeStatus+0xb0>
    } else if (!smokeStatus.pinA && smokeStatus.pinB) {
 80025b2:	7b3b      	ldrb	r3, [r7, #12]
 80025b4:	f083 0301 	eor.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <ReadSmokeStatus+0x76>
 80025be:	7b7b      	ldrb	r3, [r7, #13]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <ReadSmokeStatus+0x76>
        smokeStatus.status = "Light Pollution";
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <ReadSmokeStatus+0xd0>)
 80025c6:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	753b      	strb	r3, [r7, #20]
 80025cc:	e01c      	b.n	8002608 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && !smokeStatus.pinB) {
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <ReadSmokeStatus+0x92>
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <ReadSmokeStatus+0x92>
        smokeStatus.status = "Moderate Pollution";
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <ReadSmokeStatus+0xd4>)
 80025e2:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 3;
 80025e4:	2303      	movs	r3, #3
 80025e6:	753b      	strb	r3, [r7, #20]
 80025e8:	e00e      	b.n	8002608 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && smokeStatus.pinB) {
 80025ea:	7b3b      	ldrb	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <ReadSmokeStatus+0xa8>
 80025f0:	7b7b      	ldrb	r3, [r7, #13]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <ReadSmokeStatus+0xa8>
        smokeStatus.status = "Severe Pollution";
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <ReadSmokeStatus+0xd8>)
 80025f8:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 4;
 80025fa:	2304      	movs	r3, #4
 80025fc:	753b      	strb	r3, [r7, #20]
 80025fe:	e003      	b.n	8002608 <ReadSmokeStatus+0xb0>
    } else {
        smokeStatus.status = "Unknown"; // Fallback case, should not occur
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <ReadSmokeStatus+0xdc>)
 8002602:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	753b      	strb	r3, [r7, #20]
    }

    return smokeStatus;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	461c      	mov	r4, r3
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	48000400 	.word	0x48000400
 8002624:	0800e4d4 	.word	0x0800e4d4
 8002628:	0800e4dc 	.word	0x0800e4dc
 800262c:	0800e4ec 	.word	0x0800e4ec
 8002630:	0800e500 	.word	0x0800e500
 8002634:	0800e514 	.word	0x0800e514

08002638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <HAL_UART_RxCpltCallback+0x1cc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10c      	bne.n	8002664 <HAL_UART_RxCpltCallback+0x2c>
	  {
		  Modbus_RxCallback(&ModbusResp);
 800264a:	486f      	ldr	r0, [pc, #444]	; (8002808 <HAL_UART_RxCpltCallback+0x1d0>)
 800264c:	f7ff f832 	bl	80016b4 <Modbus_RxCallback>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_UART_RxCpltCallback+0x1d0>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_UART_RxCpltCallback+0x1d4>)
 8002658:	4413      	add	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	4619      	mov	r1, r3
 800265e:	486c      	ldr	r0, [pc, #432]	; (8002810 <HAL_UART_RxCpltCallback+0x1d8>)
 8002660:	f005 f95c 	bl	800791c <HAL_UART_Receive_IT>
	  }

	  if (huart->Instance == LPUART1) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	; (8002814 <HAL_UART_RxCpltCallback+0x1dc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f040 80c5 	bne.w	80027fa <HAL_UART_RxCpltCallback+0x1c2>
		  // Handle received data
		  uint8_t receivedData = huart->pRxBuffPtr[-1]; // Last received byte
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002678:	73fb      	strb	r3, [r7, #15]

		  if(lpuartState != UART_IDLE){
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_UART_RxCpltCallback+0x1e0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80b4 	beq.w	80027ec <HAL_UART_RxCpltCallback+0x1b4>
			  // Store received data in buffer
			  responseBuffer[bufferIndex++] = receivedData;
 8002684:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	b291      	uxth	r1, r2
 800268c:	4a63      	ldr	r2, [pc, #396]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 800268e:	8011      	strh	r1, [r2, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	5453      	strb	r3, [r2, r1]
			  mcuResetMillis = HAL_GetTick();
 8002698:	f001 fcd0 	bl	800403c <HAL_GetTick>
 800269c:	4603      	mov	r3, r0
 800269e:	4a61      	ldr	r2, [pc, #388]	; (8002824 <HAL_UART_RxCpltCallback+0x1ec>)
 80026a0:	6013      	str	r3, [r2, #0]
			  // Check if the buffer is full or if the received character is \r or \n
			  if (receivedData == '\r' || receivedData == '\n' || bufferIndex >= MAX_UART_BUFFER_SIZE) {
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b0d      	cmp	r3, #13
 80026a6:	d008      	beq.n	80026ba <HAL_UART_RxCpltCallback+0x82>
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d005      	beq.n	80026ba <HAL_UART_RxCpltCallback+0x82>
 80026ae:	4b5b      	ldr	r3, [pc, #364]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026b6:	f0c0 8099 	bcc.w	80027ec <HAL_UART_RxCpltCallback+0x1b4>
				  //responseBuffer[bufferIndex] = '\r'; // Null-terminate the string
				  //printf("Received: %s\n", responseBuffer);
				  switch(lpuartState){
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_UART_RxCpltCallback+0x1e0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	f200 8091 	bhi.w	80027e6 <HAL_UART_RxCpltCallback+0x1ae>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <HAL_UART_RxCpltCallback+0x94>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080027e7 	.word	0x080027e7
 80026d0:	080026e5 	.word	0x080026e5
 80026d4:	080026fb 	.word	0x080026fb
 80026d8:	08002727 	.word	0x08002727
 80026dc:	0800273d 	.word	0x0800273d
 80026e0:	0800277b 	.word	0x0800277b
				  case AT_RESPONSE_CAPTURE_OK:
					  if (strstr(responseBuffer, "OK") != NULL) {
 80026e4:	4950      	ldr	r1, [pc, #320]	; (8002828 <HAL_UART_RxCpltCallback+0x1f0>)
 80026e6:	484e      	ldr	r0, [pc, #312]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 80026e8:	f008 f945 	bl	800a976 <strstr>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d070      	beq.n	80027d4 <HAL_UART_RxCpltCallback+0x19c>
						  //printf("OK RECEIVED\r\n");
						  responseReceived = true;
 80026f2:	4b4e      	ldr	r3, [pc, #312]	; (800282c <HAL_UART_RxCpltCallback+0x1f4>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
					  }
					  break;
 80026f8:	e06c      	b.n	80027d4 <HAL_UART_RxCpltCallback+0x19c>
				  case AT_RESPONSE_CAPTURE_NVM_STORED:
					  if (strstr(responseBuffer, "NVM DATA STORED") != NULL) {
 80026fa:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_UART_RxCpltCallback+0x1f8>)
 80026fc:	4848      	ldr	r0, [pc, #288]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 80026fe:	f008 f93a 	bl	800a976 <strstr>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_UART_RxCpltCallback+0xd8>
						  responseReceived = true;
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_UART_RxCpltCallback+0x1f4>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
					  }
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
						  responseReceived = true;
						  //printf("STORE OK RECEIVED\r\n");
					  }
					  break;
 800270e:	e063      	b.n	80027d8 <HAL_UART_RxCpltCallback+0x1a0>
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
 8002710:	4948      	ldr	r1, [pc, #288]	; (8002834 <HAL_UART_RxCpltCallback+0x1fc>)
 8002712:	4843      	ldr	r0, [pc, #268]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 8002714:	f008 f92f 	bl	800a976 <strstr>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d05c      	beq.n	80027d8 <HAL_UART_RxCpltCallback+0x1a0>
						  responseReceived = true;
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_UART_RxCpltCallback+0x1f4>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
					  break;
 8002724:	e058      	b.n	80027d8 <HAL_UART_RxCpltCallback+0x1a0>
				  case AT_RESPONSE_CAPTURE_RESET:
					  if (strstr(responseBuffer, "APPLICATION_VERSION") != NULL) {
 8002726:	4944      	ldr	r1, [pc, #272]	; (8002838 <HAL_UART_RxCpltCallback+0x200>)
 8002728:	483d      	ldr	r0, [pc, #244]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 800272a:	f008 f924 	bl	800a976 <strstr>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d053      	beq.n	80027dc <HAL_UART_RxCpltCallback+0x1a4>
						  responseReceived = true;
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_UART_RxCpltCallback+0x1f4>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
						  //printf("RESET RECEIVED\r\n");
					  }
					  break;
 800273a:	e04f      	b.n	80027dc <HAL_UART_RxCpltCallback+0x1a4>
				  case AT_RESPONSE_CAPTURE_JOIN:
				  {
					  if (strstr(responseBuffer, "EVT:JOINED") != NULL) {
 800273c:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_UART_RxCpltCallback+0x204>)
 800273e:	4838      	ldr	r0, [pc, #224]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 8002740:	f008 f919 	bl	800a976 <strstr>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_UART_RxCpltCallback+0x126>
						  responseReceived = true;
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_UART_RxCpltCallback+0x1f4>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
						  hasJoinedNetwork = true;
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_UART_RxCpltCallback+0x208>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
						  //printf("EVENT JOINED\r\n");
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
						  bufferIndex = 0;
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 8002758:	2200      	movs	r2, #0
 800275a:	801a      	strh	r2, [r3, #0]
						  hasJoinedNetwork = false;
						  //printf("EVENT JOIN FAILED\r\n");
						  bufferIndex = 0;
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
					  }
					  break;
 800275c:	e040      	b.n	80027e0 <HAL_UART_RxCpltCallback+0x1a8>
					  else if (strstr(responseBuffer, "EVT:JOIN FAILED") != NULL) {
 800275e:	4939      	ldr	r1, [pc, #228]	; (8002844 <HAL_UART_RxCpltCallback+0x20c>)
 8002760:	482f      	ldr	r0, [pc, #188]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 8002762:	f008 f908 	bl	800a976 <strstr>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d039      	beq.n	80027e0 <HAL_UART_RxCpltCallback+0x1a8>
						  hasJoinedNetwork = false;
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_UART_RxCpltCallback+0x208>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
						  bufferIndex = 0;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]
					  break;
 8002778:	e032      	b.n	80027e0 <HAL_UART_RxCpltCallback+0x1a8>
				  }
				  case AT_RESPONSE_CAPTURE_SEND_OK:
					  if (strstr(responseBuffer, "NO_NETWORK_JOINED") != NULL) {
 800277a:	4933      	ldr	r1, [pc, #204]	; (8002848 <HAL_UART_RxCpltCallback+0x210>)
 800277c:	4828      	ldr	r0, [pc, #160]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 800277e:	f008 f8fa 	bl	800a976 <strstr>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_UART_RxCpltCallback+0x158>
						 bufferIndex = 0;
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]
						  isDownlinkReceived = true;
						  downlinkBufferLen = bufferIndex;
						  memcpy(downlinkBuffer, responseBuffer, bufferIndex);
					  }

					  break;
 800278e:	e029      	b.n	80027e4 <HAL_UART_RxCpltCallback+0x1ac>
					  else if (strstr(responseBuffer, "OK") != NULL) {
 8002790:	4925      	ldr	r1, [pc, #148]	; (8002828 <HAL_UART_RxCpltCallback+0x1f0>)
 8002792:	4823      	ldr	r0, [pc, #140]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 8002794:	f008 f8ef 	bl	800a976 <strstr>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_UART_RxCpltCallback+0x16e>
						  bufferIndex = 0;
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	801a      	strh	r2, [r3, #0]
					  break;
 80027a4:	e01e      	b.n	80027e4 <HAL_UART_RxCpltCallback+0x1ac>
					  else if (strstr(responseBuffer, "+EVT:5:") != NULL) {
 80027a6:	4929      	ldr	r1, [pc, #164]	; (800284c <HAL_UART_RxCpltCallback+0x214>)
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 80027aa:	f008 f8e4 	bl	800a976 <strstr>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_UART_RxCpltCallback+0x1ac>
						  isDownlinkReceived = true;
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_UART_RxCpltCallback+0x218>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
						  downlinkBufferLen = bufferIndex;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_UART_RxCpltCallback+0x21c>)
 80027c2:	701a      	strb	r2, [r3, #0]
						  memcpy(downlinkBuffer, responseBuffer, bufferIndex);
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4915      	ldr	r1, [pc, #84]	; (8002820 <HAL_UART_RxCpltCallback+0x1e8>)
 80027cc:	4822      	ldr	r0, [pc, #136]	; (8002858 <HAL_UART_RxCpltCallback+0x220>)
 80027ce:	f007 f853 	bl	8009878 <memcpy>
					  break;
 80027d2:	e007      	b.n	80027e4 <HAL_UART_RxCpltCallback+0x1ac>
					  break;
 80027d4:	bf00      	nop
 80027d6:	e006      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80027d8:	bf00      	nop
 80027da:	e004      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80027dc:	bf00      	nop
 80027de:	e002      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80027e4:	bf00      	nop
					  // do nothing for now
					  break;
				  }

				  // Clear the buffer and reset index
				  bufferIndex = 0;
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_UART_RxCpltCallback+0x1e4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]
//				  bufferIndex = 0; // Reset buffer after handling event
//			  }
//		  }

		  // Restart reception
		  HAL_UART_Receive_IT(huart, huart->pRxBuffPtr, 1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	2201      	movs	r2, #1
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f005 f891 	bl	800791c <HAL_UART_Receive_IT>
	  }

}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40013800 	.word	0x40013800
 8002808:	200004d8 	.word	0x200004d8
 800280c:	200004da 	.word	0x200004da
 8002810:	20000440 	.word	0x20000440
 8002814:	40008000 	.word	0x40008000
 8002818:	200005cc 	.word	0x200005cc
 800281c:	200006c0 	.word	0x200006c0
 8002820:	200005f8 	.word	0x200005f8
 8002824:	200005dc 	.word	0x200005dc
 8002828:	0800e51c 	.word	0x0800e51c
 800282c:	200005f5 	.word	0x200005f5
 8002830:	0800e520 	.word	0x0800e520
 8002834:	0800e530 	.word	0x0800e530
 8002838:	0800e544 	.word	0x0800e544
 800283c:	0800e558 	.word	0x0800e558
 8002840:	200005cd 	.word	0x200005cd
 8002844:	0800e564 	.word	0x0800e564
 8002848:	0800e574 	.word	0x0800e574
 800284c:	0800e588 	.word	0x0800e588
 8002850:	200006c2 	.word	0x200006c2
 8002854:	200006c3 	.word	0x200006c3
 8002858:	2000065c 	.word	0x2000065c

0800285c <WDTReset>:

void WDTReset(void){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002866:	4807      	ldr	r0, [pc, #28]	; (8002884 <WDTReset+0x28>)
 8002868:	f001 ff94 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800286c:	2001      	movs	r0, #1
 800286e:	f001 fbfd 	bl	800406c <HAL_Delay>
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <WDTReset+0x28>)
 800287a:	f001 ff8b 	bl	8004794 <HAL_GPIO_WritePin>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	48000400 	.word	0x48000400

08002888 <dataToByteArray>:
    }
    printf("\r\n");
}

// Function to convert data to byte array
uint8_t dataToByteArray(void *input, uint8_t *output, DataType type) {
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	71fb      	strb	r3, [r7, #7]
    uint8_t size = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    switch (type) {
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d849      	bhi.n	8002934 <dataToByteArray+0xac>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <dataToByteArray+0x20>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028c5 	.word	0x080028c5
 80028ac:	080028d3 	.word	0x080028d3
 80028b0:	080028e3 	.word	0x080028e3
 80028b4:	080028f3 	.word	0x080028f3
 80028b8:	08002905 	.word	0x08002905
 80028bc:	08002915 	.word	0x08002915
 80028c0:	08002925 	.word	0x08002925
        case TYPE_UINT8:
            output[0] = *((uint8_t*)input);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	701a      	strb	r2, [r3, #0]
            size = sizeof(uint8_t);
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
            break;
 80028d0:	e031      	b.n	8002936 <dataToByteArray+0xae>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29a      	uxth	r2, r3
        case TYPE_UINT16:
            memcpy(output, input, sizeof(uint16_t));
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	801a      	strh	r2, [r3, #0]
            size = sizeof(uint16_t);
 80028dc:	2302      	movs	r3, #2
 80028de:	75fb      	strb	r3, [r7, #23]
            break;
 80028e0:	e029      	b.n	8002936 <dataToByteArray+0xae>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
        case TYPE_UINT32:
            memcpy(output, input, sizeof(uint32_t));
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	601a      	str	r2, [r3, #0]
            size = sizeof(uint32_t);
 80028ec:	2304      	movs	r3, #4
 80028ee:	75fb      	strb	r3, [r7, #23]
            break;
 80028f0:	e021      	b.n	8002936 <dataToByteArray+0xae>
        case TYPE_INT8:
            output[0] = *((int8_t*)input);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f993 3000 	ldrsb.w	r3, [r3]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	701a      	strb	r2, [r3, #0]
            size = sizeof(int8_t);
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
            break;
 8002902:	e018      	b.n	8002936 <dataToByteArray+0xae>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29a      	uxth	r2, r3
        case TYPE_INT16:
            memcpy(output, input, sizeof(int16_t));
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	801a      	strh	r2, [r3, #0]
            size = sizeof(int16_t);
 800290e:	2302      	movs	r3, #2
 8002910:	75fb      	strb	r3, [r7, #23]
            break;
 8002912:	e010      	b.n	8002936 <dataToByteArray+0xae>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
        case TYPE_INT32:
            memcpy(output, input, sizeof(int32_t));
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
            size = sizeof(int32_t);
 800291e:	2304      	movs	r3, #4
 8002920:	75fb      	strb	r3, [r7, #23]
            break;
 8002922:	e008      	b.n	8002936 <dataToByteArray+0xae>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
        case TYPE_FLOAT:
            memcpy(output, input, sizeof(float));
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	601a      	str	r2, [r3, #0]
            size = sizeof(float);
 800292e:	2304      	movs	r3, #4
 8002930:	75fb      	strb	r3, [r7, #23]
            break;
 8002932:	e000      	b.n	8002936 <dataToByteArray+0xae>
        default:
        	break;
 8002934:	bf00      	nop
    }
    return size;
 8002936:	7dfb      	ldrb	r3, [r7, #23]
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <generatePayload>:


// Function to generate the payload
bool generatePayload(void **inputs, DataType *types, uint8_t itemCount, MessageType msgType, TxPayload *payload) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	460b      	mov	r3, r1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	4613      	mov	r3, r2
 8002958:	71bb      	strb	r3, [r7, #6]
    if (inputs == NULL || types == NULL || itemCount == 0 || itemCount > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <generatePayload+0x2e>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <generatePayload+0x2e>
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <generatePayload+0x2e>
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b32      	cmp	r3, #50	; 0x32
 8002970:	d901      	bls.n	8002976 <generatePayload+0x32>
        return false;
 8002972:	2300      	movs	r3, #0
 8002974:	e033      	b.n	80029de <generatePayload+0x9a>
    }

    payload->msgType = msgType;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	79ba      	ldrb	r2, [r7, #6]
 800297a:	701a      	strb	r2, [r3, #0]
    payload->buffer[0] = msgType;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	79ba      	ldrb	r2, [r7, #6]
 8002980:	705a      	strb	r2, [r3, #1]
    uint8_t index = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < itemCount; ++i) {
 8002986:	2300      	movs	r3, #0
 8002988:	75bb      	strb	r3, [r7, #22]
 800298a:	e01f      	b.n	80029cc <generatePayload+0x88>
        uint8_t size = dataToByteArray(inputs[i], &payload->buffer[index], types[i]);
 800298c:	7dbb      	ldrb	r3, [r7, #22]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	4413      	add	r3, r2
 800299c:	1c59      	adds	r1, r3, #1
 800299e:	7dbb      	ldrb	r3, [r7, #22]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7ff ff6e 	bl	8002888 <dataToByteArray>
 80029ac:	4603      	mov	r3, r0
 80029ae:	757b      	strb	r3, [r7, #21]
        if (index + size > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 80029b0:	7dfa      	ldrb	r2, [r7, #23]
 80029b2:	7d7b      	ldrb	r3, [r7, #21]
 80029b4:	4413      	add	r3, r2
 80029b6:	2b32      	cmp	r3, #50	; 0x32
 80029b8:	dd01      	ble.n	80029be <generatePayload+0x7a>
            return false; // Exceeds maximum buffer size
 80029ba:	2300      	movs	r3, #0
 80029bc:	e00f      	b.n	80029de <generatePayload+0x9a>
        }
        index += size;
 80029be:	7dfa      	ldrb	r2, [r7, #23]
 80029c0:	7d7b      	ldrb	r3, [r7, #21]
 80029c2:	4413      	add	r3, r2
 80029c4:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < itemCount; ++i) {
 80029c6:	7dbb      	ldrb	r3, [r7, #22]
 80029c8:	3301      	adds	r3, #1
 80029ca:	75bb      	strb	r3, [r7, #22]
 80029cc:	7dba      	ldrb	r2, [r7, #22]
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3db      	bcc.n	800298c <generatePayload+0x48>
    }

    payload->length = index;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	7dfa      	ldrb	r2, [r7, #23]
 80029d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return true;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <generateUnscheduledTxPayload>:

bool generateUnscheduledTxPayload(Sensors sensors, TxPayload *payload){
 80029e8:	b084      	sub	sp, #16
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08c      	sub	sp, #48	; 0x30
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 80029f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = UNSCHEDULED_TRANSMISSION;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value, &sensors.smoke.level, &sensors.leak.state, &sensors.accel.status};
 80029fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a20:	623b      	str	r3, [r7, #32]
	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8, TYPE_UINT8, TYPE_UINT8};
 8002a22:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <generateUnscheduledTxPayload+0x78>)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a2a:	6018      	str	r0, [r3, #0]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	8019      	strh	r1, [r3, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 8002a30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a34:	1d39      	adds	r1, r7, #4
 8002a36:	f107 000c 	add.w	r0, r7, #12
 8002a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	2206      	movs	r2, #6
 8002a44:	f7ff ff7e 	bl	8002944 <generatePayload>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 8002a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a5c:	b004      	add	sp, #16
 8002a5e:	4770      	bx	lr
 8002a60:	0800e5c0 	.word	0x0800e5c0

08002a64 <generateHeartbeatTxPayload>:

bool generateHeartbeatTxPayload(Sensors sensors, TxPayload *payload){
 8002a64:	b084      	sub	sp, #16
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b090      	sub	sp, #64	; 0x40
 8002a6a:	af02      	add	r7, sp, #8
 8002a6c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8002a70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = HEARTBEAT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value,
 8002a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aaa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
					  &sensors.smoke.level, &sensors.ltc4015.VIN, &sensors.ltc4015.VBAT, &sensors.ltc4015.VSYS, &sensors.leak.state, &sensors.accel.status};

	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8, TYPE_FLOAT, TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8};
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <generateHeartbeatTxPayload+0x88>)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab6:	c303      	stmia	r3!, {r0, r1}
 8002ab8:	701a      	strb	r2, [r3, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 8002aba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002abe:	1d39      	adds	r1, r7, #4
 8002ac0:	f107 0010 	add.w	r0, r7, #16
 8002ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	2209      	movs	r2, #9
 8002ace:	f7ff ff39 	bl	8002944 <generatePayload>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 8002ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3738      	adds	r7, #56	; 0x38
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ae6:	b004      	add	sp, #16
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	0800e5c8 	.word	0x0800e5c8

08002af0 <setLoraCredentials>:
		break;
	}

}

bool setLoraCredentials(void){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0

	if(!sendATCommand(AT_SET_DEVEUI, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002afa:	4838      	ldr	r0, [pc, #224]	; (8002bdc <setLoraCredentials+0xec>)
 8002afc:	f000 f944 	bl	8002d88 <sendATCommand>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f083 0301 	eor.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <setLoraCredentials+0x20>
		return false;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e062      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPEUI, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b16:	4832      	ldr	r0, [pc, #200]	; (8002be0 <setLoraCredentials+0xf0>)
 8002b18:	f000 f936 	bl	8002d88 <sendATCommand>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <setLoraCredentials+0x3c>
		return false;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e054      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b32:	482c      	ldr	r0, [pc, #176]	; (8002be4 <setLoraCredentials+0xf4>)
 8002b34:	f000 f928 	bl	8002d88 <sendATCommand>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <setLoraCredentials+0x58>
		return false;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e046      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_NWKKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b4e:	4826      	ldr	r0, [pc, #152]	; (8002be8 <setLoraCredentials+0xf8>)
 8002b50:	f000 f91a 	bl	8002d88 <sendATCommand>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <setLoraCredentials+0x74>
		return false;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e038      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPSKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b64:	2201      	movs	r2, #1
 8002b66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b6a:	4820      	ldr	r0, [pc, #128]	; (8002bec <setLoraCredentials+0xfc>)
 8002b6c:	f000 f90c 	bl	8002d88 <sendATCommand>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <setLoraCredentials+0x90>
		return false;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e02a      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_NWKSKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b80:	2201      	movs	r2, #1
 8002b82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b86:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <setLoraCredentials+0x100>)
 8002b88:	f000 f8fe 	bl	8002d88 <sendATCommand>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <setLoraCredentials+0xac>
		return false;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e01c      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_ADR, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002ba2:	4814      	ldr	r0, [pc, #80]	; (8002bf4 <setLoraCredentials+0x104>)
 8002ba4:	f000 f8f0 	bl	8002d88 <sendATCommand>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <setLoraCredentials+0xc8>
		return false;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e00e      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SAVE_TO_FLASH, 2000, AT_RESPONSE_CAPTURE_NVM_STORED)){
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002bbe:	480e      	ldr	r0, [pc, #56]	; (8002bf8 <setLoraCredentials+0x108>)
 8002bc0:	f000 f8e2 	bl	8002d88 <sendATCommand>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <setLoraCredentials+0xe4>
		return false;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <setLoraCredentials+0xe6>
	}
	return true;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800e5d8 	.word	0x0800e5d8
 8002be0:	0800e5fc 	.word	0x0800e5fc
 8002be4:	0800e620 	.word	0x0800e620
 8002be8:	0800e65c 	.word	0x0800e65c
 8002bec:	0800e698 	.word	0x0800e698
 8002bf0:	0800e6d8 	.word	0x0800e6d8
 8002bf4:	0800e718 	.word	0x0800e718
 8002bf8:	0800e724 	.word	0x0800e724

08002bfc <joinNetwork>:

bool joinNetwork(void){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	if(!sendATCommand(AT_JOIN_OTAA, 20000, AT_RESPONSE_CAPTURE_JOIN)){
 8002c00:	2204      	movs	r2, #4
 8002c02:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002c06:	4808      	ldr	r0, [pc, #32]	; (8002c28 <joinNetwork+0x2c>)
 8002c08:	f000 f8be 	bl	8002d88 <sendATCommand>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <joinNetwork+0x24>
		HAL_NVIC_SystemReset();
 8002c18:	f001 fb65 	bl	80042e6 <HAL_NVIC_SystemReset>
		return false;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <joinNetwork+0x26>
	}
	return true;
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	0800e72c 	.word	0x0800e72c

08002c2c <sendToLora>:

    return result;
}


bool sendToLora(uint8_t portNumber, bool isConfirmedUplink, TxPayload payload){
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b08b      	sub	sp, #44	; 0x2c
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002c38:	e884 000c 	stmia.w	r4, {r2, r3}
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	460b      	mov	r3, r1
 8002c42:	71bb      	strb	r3, [r7, #6]
	// Base command string
	const char *AT_SEND_ = "AT+SEND=";
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <sendToLora+0x148>)
 8002c46:	623b      	str	r3, [r7, #32]

	// Convert portNumber and isConfirmedUplink to strings
	char portNumberStr[4]; // Assuming portNumber won't exceed 3 digits
	snprintf(portNumberStr, sizeof(portNumberStr), "%d", portNumber);
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f107 0010 	add.w	r0, r7, #16
 8002c4e:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <sendToLora+0x14c>)
 8002c50:	2104      	movs	r1, #4
 8002c52:	f007 fe25 	bl	800a8a0 <sniprintf>

	char confirmedUplinkStr[2]; // Single digit for true (1) or false (0)
	snprintf(confirmedUplinkStr, sizeof(confirmedUplinkStr), "%d", isConfirmedUplink);
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	f107 000c 	add.w	r0, r7, #12
 8002c5c:	4a46      	ldr	r2, [pc, #280]	; (8002d78 <sendToLora+0x14c>)
 8002c5e:	2102      	movs	r1, #2
 8002c60:	f007 fe1e 	bl	800a8a0 <sniprintf>

	// Calculate the total length needed
	int total_length = strlen(AT_SEND_) + strlen(portNumberStr) + 1 + strlen(confirmedUplinkStr) + 1 + (payload.length * 2) + 2 + 1;
 8002c64:	6a38      	ldr	r0, [r7, #32]
 8002c66:	f7fd fa8b 	bl	8000180 <strlen>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fa85 	bl	8000180 <strlen>
 8002c76:	4603      	mov	r3, r0
 8002c78:	441c      	add	r4, r3
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fa7e 	bl	8000180 <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4423      	add	r3, r4
 8002c88:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8002c8c:	0052      	lsls	r2, r2, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3305      	adds	r3, #5
 8002c92:	61fb      	str	r3, [r7, #28]

	// Allocate memory for the full command string
	char *result = (char *)malloc(total_length * sizeof(char));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f006 fdde 	bl	8009858 <malloc>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	61bb      	str	r3, [r7, #24]

	if (result == NULL) {
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <sendToLora+0x7e>
		// Handle memory allocation failure
		return false;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e05c      	b.n	8002d64 <sendToLora+0x138>
	}

	// Construct the command string
	strcpy(result, AT_SEND_);
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	69b8      	ldr	r0, [r7, #24]
 8002cae:	f007 fe5a 	bl	800a966 <strcpy>
	strcat(result, portNumberStr);
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	69b8      	ldr	r0, [r7, #24]
 8002cba:	f007 fe45 	bl	800a948 <strcat>
	strcat(result, ":");
 8002cbe:	69b8      	ldr	r0, [r7, #24]
 8002cc0:	f7fd fa5e 	bl	8000180 <strlen>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	492b      	ldr	r1, [pc, #172]	; (8002d7c <sendToLora+0x150>)
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	8013      	strh	r3, [r2, #0]
	strcat(result, confirmedUplinkStr);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	4619      	mov	r1, r3
 8002cdc:	69b8      	ldr	r0, [r7, #24]
 8002cde:	f007 fe33 	bl	800a948 <strcat>
	strcat(result, ":");
 8002ce2:	69b8      	ldr	r0, [r7, #24]
 8002ce4:	f7fd fa4c 	bl	8000180 <strlen>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4922      	ldr	r1, [pc, #136]	; (8002d7c <sendToLora+0x150>)
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	8013      	strh	r3, [r2, #0]

	// Concatenate the payload
	for (int x = 0; x < payload.length; x++) {
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	e013      	b.n	8002d28 <sendToLora+0xfc>
		char temp[3];
		snprintf(temp, sizeof(temp), "%02X", payload.buffer[x]);
 8002d00:	f107 0239 	add.w	r2, r7, #57	; 0x39
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f107 0008 	add.w	r0, r7, #8
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <sendToLora+0x154>)
 8002d10:	2103      	movs	r1, #3
 8002d12:	f007 fdc5 	bl	800a8a0 <sniprintf>
		strcat(result, temp);
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	69b8      	ldr	r0, [r7, #24]
 8002d1e:	f007 fe13 	bl	800a948 <strcat>
	for (int x = 0; x < payload.length; x++) {
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	4293      	cmp	r3, r2
 8002d32:	dbe5      	blt.n	8002d00 <sendToLora+0xd4>
	}

	// Append \r\n at the end
	strcat(result, "\r\n");
 8002d34:	69b8      	ldr	r0, [r7, #24]
 8002d36:	f7fd fa23 	bl	8000180 <strlen>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <sendToLora+0x158>)
 8002d44:	8811      	ldrh	r1, [r2, #0]
 8002d46:	7892      	ldrb	r2, [r2, #2]
 8002d48:	8019      	strh	r1, [r3, #0]
 8002d4a:	709a      	strb	r2, [r3, #2]

	// Send the command
	bool commandSent = sendATCommand(result, 4000, AT_RESPONSE_CAPTURE_SEND_OK);
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002d52:	69b8      	ldr	r0, [r7, #24]
 8002d54:	f000 f818 	bl	8002d88 <sendATCommand>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]

	// Free the allocated memory
	free(result);
 8002d5c:	69b8      	ldr	r0, [r7, #24]
 8002d5e:	f006 fd83 	bl	8009868 <free>

	return commandSent;
 8002d62:	7dfb      	ldrb	r3, [r7, #23]

}
 8002d64:	4618      	mov	r0, r3
 8002d66:	372c      	adds	r7, #44	; 0x2c
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002d6e:	b002      	add	sp, #8
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0800e744 	.word	0x0800e744
 8002d78:	0800e750 	.word	0x0800e750
 8002d7c:	0800e754 	.word	0x0800e754
 8002d80:	0800e738 	.word	0x0800e738
 8002d84:	0800e740 	.word	0x0800e740

08002d88 <sendATCommand>:

bool sendATCommand(char *command, uint32_t responseWaitTime, LPUARTState _lpuartState) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	71fb      	strb	r3, [r7, #7]

    lpuartState = _lpuartState;
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <sendATCommand+0x5c>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	7013      	strb	r3, [r2, #0]
    //bufferIndex = 0;
    responseReceived = false;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <sendATCommand+0x60>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    printf(command);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f007 fcd8 	bl	800a758 <iprintf>

    // Wait for response or timeout
    uint32_t startTick = HAL_GetTick();
 8002da8:	f001 f948 	bl	800403c <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 8002dae:	e008      	b.n	8002dc2 <sendATCommand+0x3a>
    	// Internal IWDT Feed
        HAL_IWDG_Refresh(&hiwdg);
 8002db0:	480e      	ldr	r0, [pc, #56]	; (8002dec <sendATCommand+0x64>)
 8002db2:	f002 fed7 	bl	8005b64 <HAL_IWDG_Refresh>
    	if (responseReceived) {
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <sendATCommand+0x60>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <sendATCommand+0x3a>
            return true; // "OK" response received
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00b      	b.n	8002dda <sendATCommand+0x52>
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 8002dc2:	f001 f93b 	bl	800403c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d8ee      	bhi.n	8002db0 <sendATCommand+0x28>
        }
    }

    lpuartState = UART_IDLE;
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <sendATCommand+0x5c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]

    return false; // Timeout occurred without receiving "OK"
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200005cc 	.word	0x200005cc
 8002de8:	200005f5 	.word	0x200005f5
 8002dec:	2000039c 	.word	0x2000039c

08002df0 <readSHT40>:

void readSHT40(SHT40 *_sht40){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = SHT40_Measure(&hi2c1, &sht40, MED_PRECISION);
 8002df8:	22f6      	movs	r2, #246	; 0xf6
 8002dfa:	4971      	ldr	r1, [pc, #452]	; (8002fc0 <readSHT40+0x1d0>)
 8002dfc:	4871      	ldr	r0, [pc, #452]	; (8002fc4 <readSHT40+0x1d4>)
 8002dfe:	f000 fc5c 	bl	80036ba <SHT40_Measure>
 8002e02:	4603      	mov	r3, r0
 8002e04:	73fb      	strb	r3, [r7, #15]

	if(ret == HAL_ERROR){
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <readSHT40+0x2e>
		_sht40->temperature  = 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
		_sht40->humidity     = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
	}




}
 8002e1c:	e0cb      	b.n	8002fb6 <readSHT40+0x1c6>
		_sht40->temperature = sht40.temperature;
 8002e1e:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <readSHT40+0x1d0>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
		_sht40->humidity    = sht40.rel_humidity;
 8002e26:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <readSHT40+0x1d0>)
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
		if(_sht40->temperature > _sht40->thresholds.temp_high + _sht40->thresholds.temp_hys){
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	ed93 7a00 	vldr	s14, [r3]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	dd0a      	ble.n	8002e64 <readSHT40+0x74>
			if(_sht40->alarmState.temperature != ABOVE_THRESHOLD){
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d005      	beq.n	8002e64 <readSHT40+0x74>
				_sht40->alarmState.temperature = ABOVE_THRESHOLD;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002e60:	f000 fb76 	bl	8003550 <queueUnscheduledPayload>
		if(_sht40->temperature < _sht40->thresholds.temp_low - _sht40->thresholds.temp_hys){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d50a      	bpl.n	8002e9a <readSHT40+0xaa>
			if(_sht40->alarmState.temperature != BELOW_THRESHOLD){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d005      	beq.n	8002e9a <readSHT40+0xaa>
				_sht40->alarmState.temperature = BELOW_THRESHOLD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002e96:	f000 fb5b 	bl	8003550 <queueUnscheduledPayload>
		if(_sht40->temperature > (_sht40->thresholds.temp_low + _sht40->thresholds.temp_hys)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd1a      	ble.n	8002ef0 <readSHT40+0x100>
			&& _sht40->temperature < (_sht40->thresholds.temp_high - _sht40->thresholds.temp_hys)){
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ecc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d50a      	bpl.n	8002ef0 <readSHT40+0x100>
			if(_sht40->alarmState.temperature != NORMAL){
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <readSHT40+0x100>
				_sht40->alarmState.temperature = NORMAL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002eec:	f000 fb30 	bl	8003550 <queueUnscheduledPayload>
		if(_sht40->humidity > _sht40->thresholds.rel_high + _sht40->thresholds.rel_hys){
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	dd0a      	ble.n	8002f26 <readSHT40+0x136>
			if(_sht40->alarmState.humidity != ABOVE_THRESHOLD){
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d005      	beq.n	8002f26 <readSHT40+0x136>
				_sht40->alarmState.humidity = ABOVE_THRESHOLD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002f22:	f000 fb15 	bl	8003550 <queueUnscheduledPayload>
		if(_sht40->humidity < _sht40->thresholds.rel_low - _sht40->thresholds.rel_hys){
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	d50a      	bpl.n	8002f5c <readSHT40+0x16c>
			if(_sht40->alarmState.humidity != BELOW_THRESHOLD){
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d005      	beq.n	8002f5c <readSHT40+0x16c>
				_sht40->alarmState.humidity = BELOW_THRESHOLD;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002f58:	f000 fafa 	bl	8003550 <queueUnscheduledPayload>
		if(_sht40->humidity > (_sht40->thresholds.rel_low + _sht40->thresholds.rel_hys)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dc00      	bgt.n	8002f7e <readSHT40+0x18e>
}
 8002f7c:	e01b      	b.n	8002fb6 <readSHT40+0x1c6>
			&& _sht40->humidity < (_sht40->thresholds.rel_high - _sht40->thresholds.rel_hys)){
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	d400      	bmi.n	8002fa0 <readSHT40+0x1b0>
}
 8002f9e:	e00a      	b.n	8002fb6 <readSHT40+0x1c6>
			if(_sht40->alarmState.humidity != NORMAL){
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <readSHT40+0x1c6>
				_sht40->alarmState.humidity = NORMAL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002fb2:	f000 facd 	bl	8003550 <queueUnscheduledPayload>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200005e4 	.word	0x200005e4
 8002fc4:	20000348 	.word	0x20000348

08002fc8 <platform_write>:


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	72fb      	strb	r3, [r7, #11]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	893b      	ldrh	r3, [r7, #8]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	2131      	movs	r1, #49	; 0x31
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fe60 	bl	8004cb8 <HAL_I2C_Mem_Write>
  return 0;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b088      	sub	sp, #32
 8003006:	af04      	add	r7, sp, #16
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	461a      	mov	r2, r3
 800300e:	460b      	mov	r3, r1
 8003010:	72fb      	strb	r3, [r7, #11]
 8003012:	4613      	mov	r3, r2
 8003014:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003016:	7afb      	ldrb	r3, [r7, #11]
 8003018:	b29a      	uxth	r2, r3
 800301a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	2131      	movs	r1, #49	; 0x31
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f001 ff57 	bl	8004ee0 <HAL_I2C_Mem_Read>

  return 0;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 f811 	bl	800406c <HAL_Delay>

}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <initAccelerometer>:

bool initAccelerometer(void){
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	// Initialize Accelerometer
	/* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <initAccelerometer+0xcc>)
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <initAccelerometer+0xd0>)
 8003068:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <initAccelerometer+0xcc>)
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <initAccelerometer+0xd4>)
 800306e:	605a      	str	r2, [r3, #4]
	  dev_ctx.mdelay = platform_delay;
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <initAccelerometer+0xcc>)
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <initAccelerometer+0xd8>)
 8003074:	609a      	str	r2, [r3, #8]
	  dev_ctx.handle = &hi2c1;
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <initAccelerometer+0xcc>)
 8003078:	4a30      	ldr	r2, [pc, #192]	; (800313c <initAccelerometer+0xdc>)
 800307a:	60da      	str	r2, [r3, #12]
	  /* Initialize platform specific hardware */
	  platform_init();
 800307c:	f7ff ffe9 	bl	8003052 <platform_init>
	  /* Wait sensor boot time */
	  platform_delay(BOOT_TIME);
 8003080:	2014      	movs	r0, #20
 8003082:	f7ff ffdb 	bl	800303c <platform_delay>
	  /* Check device ID */
	  lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8003086:	492e      	ldr	r1, [pc, #184]	; (8003140 <initAccelerometer+0xe0>)
 8003088:	4828      	ldr	r0, [pc, #160]	; (800312c <initAccelerometer+0xcc>)
 800308a:	f7fe f893 	bl	80011b4 <lis2dw12_device_id_get>

	  if (whoamI != LIS2DW12_ID){
 800308e:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <initAccelerometer+0xe0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b44      	cmp	r3, #68	; 0x44
 8003094:	d001      	beq.n	800309a <initAccelerometer+0x3a>
		  return false;
 8003096:	2300      	movs	r3, #0
 8003098:	e045      	b.n	8003126 <initAccelerometer+0xc6>
	  }

	  /* Restore default configuration */
	   lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800309a:	2101      	movs	r1, #1
 800309c:	4823      	ldr	r0, [pc, #140]	; (800312c <initAccelerometer+0xcc>)
 800309e:	f7fe f89a 	bl	80011d6 <lis2dw12_reset_set>

	   do {
		 lis2dw12_reset_get(&dev_ctx, &rst);
 80030a2:	4928      	ldr	r1, [pc, #160]	; (8003144 <initAccelerometer+0xe4>)
 80030a4:	4821      	ldr	r0, [pc, #132]	; (800312c <initAccelerometer+0xcc>)
 80030a6:	f7fe f8bc 	bl	8001222 <lis2dw12_reset_get>
	   } while (rst);
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <initAccelerometer+0xe4>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f7      	bne.n	80030a2 <initAccelerometer+0x42>


     /* Set full scale */
	 lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 80030b2:	2100      	movs	r1, #0
 80030b4:	481d      	ldr	r0, [pc, #116]	; (800312c <initAccelerometer+0xcc>)
 80030b6:	f7fe f846 	bl	8001146 <lis2dw12_full_scale_set>
	 /* Configure filtering chain
	  * Accelerometer - filter path / bandwidth
	  */
	 lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 80030ba:	2100      	movs	r1, #0
 80030bc:	481b      	ldr	r0, [pc, #108]	; (800312c <initAccelerometer+0xcc>)
 80030be:	f7fe f8c9 	bl	8001254 <lis2dw12_filter_path_set>
	 lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 80030c2:	2101      	movs	r1, #1
 80030c4:	4819      	ldr	r0, [pc, #100]	; (800312c <initAccelerometer+0xcc>)
 80030c6:	f7fe f90a 	bl	80012de <lis2dw12_filter_bandwidth_set>
	 /* Configure power mode */
	 lis2dw12_power_mode_set(&dev_ctx,
 80030ca:	2110      	movs	r1, #16
 80030cc:	4817      	ldr	r0, [pc, #92]	; (800312c <initAccelerometer+0xcc>)
 80030ce:	f7fd ffa7 	bl	8001020 <lis2dw12_power_mode_set>
//	    lis2dw12_pin_int1_route_set(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);

	 /* Set wake-up duration
	  * Wake up duration event 1LSb = 1 / ODR
	  */
	 lis2dw12_wkup_dur_set(&dev_ctx, 2);
 80030d2:	2102      	movs	r1, #2
 80030d4:	4815      	ldr	r0, [pc, #84]	; (800312c <initAccelerometer+0xcc>)
 80030d6:	f7fe f9c9 	bl	800146c <lis2dw12_wkup_dur_set>
	 /* Set sleep duration
	  * Duration to go in sleep mode (1 LSb = 512 / ODR)
	  */
	 lis2dw12_act_sleep_dur_set(&dev_ctx, 3);
 80030da:	2103      	movs	r1, #3
 80030dc:	4813      	ldr	r0, [pc, #76]	; (800312c <initAccelerometer+0xcc>)
 80030de:	f7fe fa56 	bl	800158e <lis2dw12_act_sleep_dur_set>
	 /* Set Activity wake-up threshold
	  * Threshold for wake-up 1 LSB = FS_XL / 64
	  */
	 lis2dw12_wkup_threshold_set(&dev_ctx, 1);
 80030e2:	2101      	movs	r1, #1
 80030e4:	4811      	ldr	r0, [pc, #68]	; (800312c <initAccelerometer+0xcc>)
 80030e6:	f7fe f99b 	bl	8001420 <lis2dw12_wkup_threshold_set>
	 /* Data sent to wake-up interrupt function */
	 lis2dw12_wkup_feed_data_set(&dev_ctx, LIS2DW12_HP_FEED);
 80030ea:	2100      	movs	r1, #0
 80030ec:	480f      	ldr	r0, [pc, #60]	; (800312c <initAccelerometer+0xcc>)
 80030ee:	f7fe f9e3 	bl	80014b8 <lis2dw12_wkup_feed_data_set>
	 /* Config activity / inactivity or stationary / motion detection */
	 lis2dw12_act_mode_set(&dev_ctx, LIS2DW12_DETECT_ACT_INACT);
 80030f2:	2101      	movs	r1, #1
 80030f4:	480d      	ldr	r0, [pc, #52]	; (800312c <initAccelerometer+0xcc>)
 80030f6:	f7fe fa05 	bl	8001504 <lis2dw12_act_mode_set>
	 /* Enable activity detection interrupt */
	 lis2dw12_pin_int1_route_get(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);
 80030fa:	4913      	ldr	r1, [pc, #76]	; (8003148 <initAccelerometer+0xe8>)
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <initAccelerometer+0xcc>)
 80030fe:	f7fe f97e 	bl	80013fe <lis2dw12_pin_int1_route_get>
	 int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE;
 8003102:	4a11      	ldr	r2, [pc, #68]	; (8003148 <initAccelerometer+0xe8>)
 8003104:	7813      	ldrb	r3, [r2, #0]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	7013      	strb	r3, [r2, #0]
	 lis2dw12_pin_int1_route_set(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <initAccelerometer+0xe8>)
 800310e:	4807      	ldr	r0, [pc, #28]	; (800312c <initAccelerometer+0xcc>)
 8003110:	f7fe f90b 	bl	800132a <lis2dw12_pin_int1_route_set>
	 /* Set Output Data Rate */
	 lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_200Hz);
 8003114:	2106      	movs	r1, #6
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <initAccelerometer+0xcc>)
 8003118:	f7fd ffd0 	bl	80010bc <lis2dw12_data_rate_set>

	 //init sensors struct
	 sensors.accel.status = STATIONARY;
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <initAccelerometer+0xec>)
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	 return true;
 8003124:	2301      	movs	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200006d4 	.word	0x200006d4
 8003130:	08002fc9 	.word	0x08002fc9
 8003134:	08003003 	.word	0x08003003
 8003138:	0800303d 	.word	0x0800303d
 800313c:	20000348 	.word	0x20000348
 8003140:	200006d0 	.word	0x200006d0
 8003144:	200006d1 	.word	0x200006d1
 8003148:	200006e4 	.word	0x200006e4
 800314c:	20000570 	.word	0x20000570

08003150 <readAccelerometer>:

void readAccelerometer(Accel *_accel){
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b0a6      	sub	sp, #152	; 0x98
 8003154:	af14      	add	r7, sp, #80	; 0x50
 8003156:	6078      	str	r0, [r7, #4]
	lis2dw12_all_sources_t all_source;
	  /* Read status register */
	  lis2dw12_all_sources_get(&dev_ctx, &all_source);
 8003158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800315c:	4619      	mov	r1, r3
 800315e:	4849      	ldr	r0, [pc, #292]	; (8003284 <readAccelerometer+0x134>)
 8003160:	f7fe f817 	bl	8001192 <lis2dw12_all_sources_get>


	  /* Check if Activity/Inactivity events */
	  if (all_source.wake_up_src.sleep_state_ia) {
 8003164:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <readAccelerometer+0x34>
		  //Inactivity
		  // Reset after sending Interrupt
//		  if(isTapDetected || isMovementDetected){
		      _accel->status = STATIONARY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			  isTapDetected = false;
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <readAccelerometer+0x138>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
			  isMovementDetected = false;
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <readAccelerometer+0x13c>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
//			  printf("Resetting flags \r\n ");
//		  }
	  }

	  if (all_source.wake_up_src.wu_ia) {
 8003184:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d074      	beq.n	800327c <readAccelerometer+0x12c>

		// Activity
		if(isTapDetected == false){
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <readAccelerometer+0x138>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02b      	beq.n	80031f8 <readAccelerometer+0xa8>
			isTapDetected = true;
 80031a0:	4b39      	ldr	r3, [pc, #228]	; (8003288 <readAccelerometer+0x138>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
			_accel->status = SMASHED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
			//printf("Smash Detected \nX: %d \nY: %d \nZ: %d\r\n ", all_source.wake_up_src.x_wu, all_source.wake_up_src.y_wu, all_source.wake_up_src.z_wu);

			initTapMillis = HAL_GetTick();
 80031ac:	f000 ff46 	bl	800403c <HAL_GetTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a37      	ldr	r2, [pc, #220]	; (8003290 <readAccelerometer+0x140>)
 80031b4:	6013      	str	r3, [r2, #0]

			TxPayload _heartBeatPayload;
			generateUnscheduledTxPayload(sensors, &_heartBeatPayload);
 80031b6:	4c37      	ldr	r4, [pc, #220]	; (8003294 <readAccelerometer+0x144>)
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80031be:	4668      	mov	r0, sp
 80031c0:	f104 0310 	add.w	r3, r4, #16
 80031c4:	224c      	movs	r2, #76	; 0x4c
 80031c6:	4619      	mov	r1, r3
 80031c8:	f006 fb56 	bl	8009878 <memcpy>
 80031cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031d0:	f7ff fc0a 	bl	80029e8 <generateUnscheduledTxPayload>
			sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 80031d4:	466d      	mov	r5, sp
 80031d6:	f107 0414 	add.w	r4, r7, #20
 80031da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	cb0c      	ldmia	r3, {r2, r3}
 80031f0:	2101      	movs	r1, #1
 80031f2:	2003      	movs	r0, #3
 80031f4:	f7ff fd1a 	bl	8002c2c <sendToLora>

     		//isTapDetected = false;
 			//isMovementDetected = false;
		}
		if(isTapDetected == true){
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <readAccelerometer+0x138>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03d      	beq.n	800327c <readAccelerometer+0x12c>
			if(HAL_GetTick() - initTapMillis > 3000){
 8003200:	f000 ff1c 	bl	800403c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <readAccelerometer+0x140>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003210:	4293      	cmp	r3, r2
 8003212:	d933      	bls.n	800327c <readAccelerometer+0x12c>
				if(isMovementDetected == false){
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <readAccelerometer+0x13c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02c      	beq.n	800327c <readAccelerometer+0x12c>
					isMovementDetected = true;
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <readAccelerometer+0x13c>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
					_accel->status = MOVING;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	701a      	strb	r2, [r3, #0]
					//printf("Movement Detected \r\n ");

					TxPayload _heartBeatPayload;
					generateUnscheduledTxPayload(sensors, &_heartBeatPayload);
 800322e:	4c19      	ldr	r4, [pc, #100]	; (8003294 <readAccelerometer+0x144>)
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	9313      	str	r3, [sp, #76]	; 0x4c
 8003236:	4668      	mov	r0, sp
 8003238:	f104 0310 	add.w	r3, r4, #16
 800323c:	224c      	movs	r2, #76	; 0x4c
 800323e:	4619      	mov	r1, r3
 8003240:	f006 fb1a 	bl	8009878 <memcpy>
 8003244:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003248:	f7ff fbce 	bl	80029e8 <generateUnscheduledTxPayload>
					sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 800324c:	466d      	mov	r5, sp
 800324e:	f107 0414 	add.w	r4, r7, #20
 8003252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800325e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	cb0c      	ldmia	r3, {r2, r3}
 8003268:	2101      	movs	r1, #1
 800326a:	2003      	movs	r0, #3
 800326c:	f7ff fcde 	bl	8002c2c <sendToLora>

					isTapDetected = false;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <readAccelerometer+0x138>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
					isMovementDetected = false;
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <readAccelerometer+0x13c>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	  }
}
 800327c:	bf00      	nop
 800327e:	3748      	adds	r7, #72	; 0x48
 8003280:	46bd      	mov	sp, r7
 8003282:	bdb0      	pop	{r4, r5, r7, pc}
 8003284:	200006d4 	.word	0x200006d4
 8003288:	200006e5 	.word	0x200006e5
 800328c:	200006e6 	.word	0x200006e6
 8003290:	200006e8 	.word	0x200006e8
 8003294:	20000570 	.word	0x20000570

08003298 <readLTC4015>:

void readLTC4015(LTCStatus *ltc4015){
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af04      	add	r7, sp, #16
 800329e:	6078      	str	r0, [r7, #4]

	 uint16_t i2c_data = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	81fb      	strh	r3, [r7, #14]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	2302      	movs	r3, #2
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	f107 030e 	add.w	r3, r7, #14
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	223a      	movs	r2, #58	; 0x3a
 80032b8:	21d0      	movs	r1, #208	; 0xd0
 80032ba:	4835      	ldr	r0, [pc, #212]	; (8003390 <readLTC4015+0xf8>)
 80032bc:	f001 fe10 	bl	8004ee0 <HAL_I2C_Mem_Read>
	 ltc4015->VBAT= i2c_data * 0.000192264 * 4;
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f906 	bl	80004d4 <__aeabi_i2d>
 80032c8:	a32d      	add	r3, pc, #180	; (adr r3, 8003380 <readLTC4015+0xe8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd f96b 	bl	80005a8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <readLTC4015+0xfc>)
 80032e0:	f7fd f962 	bl	80005a8 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7fd fc54 	bl	8000b98 <__aeabi_d2f>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	2302      	movs	r3, #2
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	f107 030e 	add.w	r3, r7, #14
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2301      	movs	r3, #1
 8003308:	223b      	movs	r2, #59	; 0x3b
 800330a:	21d0      	movs	r1, #208	; 0xd0
 800330c:	4820      	ldr	r0, [pc, #128]	; (8003390 <readLTC4015+0xf8>)
 800330e:	f001 fde7 	bl	8004ee0 <HAL_I2C_Mem_Read>
	 ltc4015->VIN = i2c_data * 0.001648;
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f8dd 	bl	80004d4 <__aeabi_i2d>
 800331a:	a31b      	add	r3, pc, #108	; (adr r3, 8003388 <readLTC4015+0xf0>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f942 	bl	80005a8 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7fd fc34 	bl	8000b98 <__aeabi_d2f>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	f107 030e 	add.w	r3, r7, #14
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	223c      	movs	r2, #60	; 0x3c
 800334a:	21d0      	movs	r1, #208	; 0xd0
 800334c:	4810      	ldr	r0, [pc, #64]	; (8003390 <readLTC4015+0xf8>)
 800334e:	f001 fdc7 	bl	8004ee0 <HAL_I2C_Mem_Read>
	 ltc4015->VSYS = i2c_data * 0.001648;
 8003352:	89fb      	ldrh	r3, [r7, #14]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f8bd 	bl	80004d4 <__aeabi_i2d>
 800335a:	a30b      	add	r3, pc, #44	; (adr r3, 8003388 <readLTC4015+0xf0>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fd f922 	bl	80005a8 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f7fd fc14 	bl	8000b98 <__aeabi_d2f>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]
	 printf("LTC4015 Readings \r\n");
	 printf("VIN  = %.2f \r\n", ltc4015->VIN);
	 printf("VBAT = %.2f \r\n", ltc4015->VBAT);
	 printf("VSYS = %.2f \r\n", ltc4015->VSYS);
#endif
	}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2f34985a 	.word	0x2f34985a
 8003384:	3f29334f 	.word	0x3f29334f
 8003388:	86a4ca4f 	.word	0x86a4ca4f
 800338c:	3f5b0036 	.word	0x3f5b0036
 8003390:	20000348 	.word	0x20000348
 8003394:	40100000 	.word	0x40100000

08003398 <appendModbusToPayload>:
    memcpy(modbus->buffer, data, length);
    modbus->rxIndex = length;
}

// Function to append Modbus response to payload
void appendModbusToPayload(TxPayload *payload, ModBus_t *modbus) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
    memcpy(&payload->buffer[payload->length], modbus->buffer, modbus->rxIndex);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	1c58      	adds	r0, r3, #1
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1c99      	adds	r1, r3, #2
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f006 fa5d 	bl	8009878 <memcpy>
    payload->length += modbus->rxIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <initQueue>:


void initQueue(TxPayloadQueue *q) {
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    q->front = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    q->rear = 0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    q->size = 0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <enqueue>:

int enqueue(TxPayloadQueue *q, TxPayload element) {
 8003408:	b084      	sub	sp, #16
 800340a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (q->size == QUEUE_MAX_SIZE) {
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003420:	2b05      	cmp	r3, #5
 8003422:	d102      	bne.n	800342a <enqueue+0x22>
        // Queue is full
        return -1;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	e038      	b.n	800349c <enqueue+0x94>
    }

    q->queue[q->rear] = element;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8003430:	4619      	mov	r1, r3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	2334      	movs	r3, #52	; 0x34
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003440:	469c      	mov	ip, r3
 8003442:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003446:	4665      	mov	r5, ip
 8003448:	4626      	mov	r6, r4
 800344a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800344c:	6028      	str	r0, [r5, #0]
 800344e:	6069      	str	r1, [r5, #4]
 8003450:	60aa      	str	r2, [r5, #8]
 8003452:	60eb      	str	r3, [r5, #12]
 8003454:	3410      	adds	r4, #16
 8003456:	f10c 0c10 	add.w	ip, ip, #16
 800345a:	4574      	cmp	r4, lr
 800345c:	d1f3      	bne.n	8003446 <enqueue+0x3e>
 800345e:	4663      	mov	r3, ip
 8003460:	4622      	mov	r2, r4
 8003462:	6810      	ldr	r0, [r2, #0]
 8003464:	6018      	str	r0, [r3, #0]
    q->rear = (q->rear + 1) % QUEUE_MAX_SIZE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <enqueue+0xa4>)
 8003470:	fb83 1302 	smull	r1, r3, r3, r2
 8003474:	1059      	asrs	r1, r3, #1
 8003476:	17d3      	asrs	r3, r2, #31
 8003478:	1ac9      	subs	r1, r1, r3
 800347a:	460b      	mov	r3, r1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	1ad1      	subs	r1, r2, r3
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    q->size++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003490:	3301      	adds	r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    return 0;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80034a6:	b004      	add	sp, #16
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	66666667 	.word	0x66666667

080034b0 <dequeue>:

int dequeue(TxPayloadQueue *q, TxPayload *element) {
 80034b0:	b4f0      	push	{r4, r5, r6, r7}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    if (q->size == 0) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <dequeue+0x1a>
        // Queue is empty
        return -1;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	e03a      	b.n	8003540 <dequeue+0x90>
    }

    *element = q->queue[q->front];
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80034d0:	4618      	mov	r0, r3
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	2334      	movs	r3, #52	; 0x34
 80034d8:	fb00 f303 	mul.w	r3, r0, r3
 80034dc:	4413      	add	r3, r2
 80034de:	4608      	mov	r0, r1
 80034e0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80034e4:	4602      	mov	r2, r0
 80034e6:	4619      	mov	r1, r3
 80034e8:	f8d1 c000 	ldr.w	ip, [r1]
 80034ec:	684e      	ldr	r6, [r1, #4]
 80034ee:	688d      	ldr	r5, [r1, #8]
 80034f0:	68c9      	ldr	r1, [r1, #12]
 80034f2:	f8c2 c000 	str.w	ip, [r2]
 80034f6:	6056      	str	r6, [r2, #4]
 80034f8:	6095      	str	r5, [r2, #8]
 80034fa:	60d1      	str	r1, [r2, #12]
 80034fc:	3310      	adds	r3, #16
 80034fe:	3010      	adds	r0, #16
 8003500:	42a3      	cmp	r3, r4
 8003502:	d1ef      	bne.n	80034e4 <dequeue+0x34>
 8003504:	4602      	mov	r2, r0
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6013      	str	r3, [r2, #0]
    q->front = (q->front + 1) % QUEUE_MAX_SIZE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <dequeue+0x9c>)
 8003514:	fb83 1302 	smull	r1, r3, r3, r2
 8003518:	1059      	asrs	r1, r3, #1
 800351a:	17d3      	asrs	r3, r2, #31
 800351c:	1ac9      	subs	r1, r1, r3
 800351e:	460b      	mov	r3, r1
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	1ad1      	subs	r1, r2, r3
 8003526:	b2ca      	uxtb	r2, r1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    q->size--;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003534:	3b01      	subs	r3, #1
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    return 0;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bcf0      	pop	{r4, r5, r6, r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	66666667 	.word	0x66666667

08003550 <queueUnscheduledPayload>:
int isQueueFull(TxPayloadQueue *q) {
    return (q->size == QUEUE_MAX_SIZE);
}


void queueUnscheduledPayload(void){
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b0a2      	sub	sp, #136	; 0x88
 8003554:	af14      	add	r7, sp, #80	; 0x50

	TxPayload unscheduledPayload;
	generateUnscheduledTxPayload(sensors, &unscheduledPayload);
 8003556:	4c13      	ldr	r4, [pc, #76]	; (80035a4 <queueUnscheduledPayload+0x54>)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	9313      	str	r3, [sp, #76]	; 0x4c
 800355c:	4668      	mov	r0, sp
 800355e:	f104 0310 	add.w	r3, r4, #16
 8003562:	224c      	movs	r2, #76	; 0x4c
 8003564:	4619      	mov	r1, r3
 8003566:	f006 f987 	bl	8009878 <memcpy>
 800356a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800356e:	f7ff fa3b 	bl	80029e8 <generateUnscheduledTxPayload>
	if(isWarmedUp == true){
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <queueUnscheduledPayload+0x58>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00f      	beq.n	800359a <queueUnscheduledPayload+0x4a>
		if (enqueue(&payLoadQueue, unscheduledPayload) == 0) {
 800357a:	466d      	mov	r5, sp
 800357c:	f107 0410 	add.w	r4, r7, #16
 8003580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003594:	4805      	ldr	r0, [pc, #20]	; (80035ac <queueUnscheduledPayload+0x5c>)
 8003596:	f7ff ff37 	bl	8003408 <enqueue>
			//printf("Added to Queue \r\n");
		} else {
			//printf("Queue is full \r\n");
		}
	}
}
 800359a:	bf00      	nop
 800359c:	3738      	adds	r7, #56	; 0x38
 800359e:	46bd      	mov	sp, r7
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000570 	.word	0x20000570
 80035a8:	200006c4 	.word	0x200006c4
 80035ac:	200006f4 	.word	0x200006f4

080035b0 <queueHeartbeatPayload>:
void queueHeartbeatPayload(void){
 80035b0:	b5b0      	push	{r4, r5, r7, lr}
 80035b2:	b0a2      	sub	sp, #136	; 0x88
 80035b4:	af14      	add	r7, sp, #80	; 0x50
	TxPayload heartbeatPayload;
	generateHeartbeatTxPayload(sensors, &heartbeatPayload);
 80035b6:	4c13      	ldr	r4, [pc, #76]	; (8003604 <queueHeartbeatPayload+0x54>)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80035bc:	4668      	mov	r0, sp
 80035be:	f104 0310 	add.w	r3, r4, #16
 80035c2:	224c      	movs	r2, #76	; 0x4c
 80035c4:	4619      	mov	r1, r3
 80035c6:	f006 f957 	bl	8009878 <memcpy>
 80035ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035ce:	f7ff fa49 	bl	8002a64 <generateHeartbeatTxPayload>

	if(isWarmedUp == true){
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <queueHeartbeatPayload+0x58>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00f      	beq.n	80035fa <queueHeartbeatPayload+0x4a>
		if (enqueue(&payLoadQueue, heartbeatPayload) == 0) {
 80035da:	466d      	mov	r5, sp
 80035dc:	f107 0410 	add.w	r4, r7, #16
 80035e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	4805      	ldr	r0, [pc, #20]	; (800360c <queueHeartbeatPayload+0x5c>)
 80035f6:	f7ff ff07 	bl	8003408 <enqueue>
		} else {
			//printf("Queue is full \r\n");
		}
	}

}
 80035fa:	bf00      	nop
 80035fc:	3738      	adds	r7, #56	; 0x38
 80035fe:	46bd      	mov	sp, r7
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	bf00      	nop
 8003604:	20000570 	.word	0x20000570
 8003608:	200006c4 	.word	0x200006c4
 800360c:	200006f4 	.word	0x200006f4

08003610 <queuePayload>:

void queuePayload(TxPayload Payload){
 8003610:	b084      	sub	sp, #16
 8003612:	b5b0      	push	{r4, r5, r7, lr}
 8003614:	b08a      	sub	sp, #40	; 0x28
 8003616:	af0a      	add	r7, sp, #40	; 0x28
 8003618:	f107 0410 	add.w	r4, r7, #16
 800361c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(isWarmedUp == true){
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <queuePayload+0x48>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <queuePayload+0x3a>
		if (enqueue(&payLoadQueue, Payload) == 0) {
 8003628:	466d      	mov	r5, sp
 800362a:	f107 041c 	add.w	r4, r7, #28
 800362e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363a:	e885 0003 	stmia.w	r5, {r0, r1}
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003644:	4805      	ldr	r0, [pc, #20]	; (800365c <queuePayload+0x4c>)
 8003646:	f7ff fedf 	bl	8003408 <enqueue>
		} else {
			//printf("Queue is full \r\n");
		}
	}

}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003652:	b004      	add	sp, #16
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200006c4 	.word	0x200006c4
 800365c:	200006f4 	.word	0x200006f4

08003660 <readWaterLeak>:

void readWaterLeak(WaterLeak *leak){
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	if(ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &adcRead) == HAL_OK){
 8003668:	490f      	ldr	r1, [pc, #60]	; (80036a8 <readWaterLeak+0x48>)
 800366a:	2040      	movs	r0, #64	; 0x40
 800366c:	f7fe f8c2 	bl	80017f4 <ADS1115_readSingleEnded>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d113      	bne.n	800369e <readWaterLeak+0x3e>
		leak->raw = adcRead;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <readWaterLeak+0x48>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
		leak->state = (adcRead > WATER_LEAK_TH) ? WET : DRY;
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <readWaterLeak+0x48>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80036ac <readWaterLeak+0x4c>
 8003688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	bfcc      	ite	gt
 8003692:	2301      	movgt	r3, #1
 8003694:	2300      	movle	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	711a      	strb	r2, [r3, #4]
	 }else{
		 //printf("Error Reading Water Leak");
	 }

}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200007fc 	.word	0x200007fc
 80036ac:	44bb8000 	.word	0x44bb8000

080036b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b8:	e7fe      	b.n	80036b8 <Error_Handler+0x8>

080036ba <SHT40_Measure>:
};

/*
 * Measurement-Taking
 */
HAL_StatusTypeDef SHT40_Measure(I2C_HandleTypeDef* i2cHandle, SHT40_Measurement* result, SHT40_Precision precision) {
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
    uint8_t response[6];
    if (i2c_communicate(i2cHandle, (uint8_t*)&precision, response) == HAL_OK) {
 80036c8:	f107 0210 	add.w	r2, r7, #16
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	4619      	mov	r1, r3
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f879 	bl	80037c8 <i2c_communicate>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <SHT40_Measure+0x32>
        return read_temp_humidity(response, result);
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8a4 	bl	8003830 <read_temp_humidity>
 80036e8:	4603      	mov	r3, r0
 80036ea:	e000      	b.n	80036ee <SHT40_Measure+0x34>
    }
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <SHT40_ReadSerial>:
}

/*
 * Serial
 */
HAL_StatusTypeDef SHT40_ReadSerial(I2C_HandleTypeDef* i2cHandle, uint32_t* result) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
    static uint8_t COMMAND = SHT40_READ_SERIAL;
    uint8_t serial_response[6];

    if( i2c_communicate(i2cHandle, &COMMAND, serial_response) == HAL_OK ) {
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	461a      	mov	r2, r3
 8003708:	491a      	ldr	r1, [pc, #104]	; (8003774 <SHT40_ReadSerial+0x7c>)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f85c 	bl	80037c8 <i2c_communicate>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d129      	bne.n	800376a <SHT40_ReadSerial+0x72>
        uint16_t serial_msb = serial_response[0] << 8 | serial_response[1];
 8003716:	7b3b      	ldrb	r3, [r7, #12]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	b21a      	sxth	r2, r3
 800371c:	7b7b      	ldrb	r3, [r7, #13]
 800371e:	b21b      	sxth	r3, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	b21b      	sxth	r3, r3
 8003724:	82fb      	strh	r3, [r7, #22]
        uint16_t serial_lsb = serial_response[3] << 8 | serial_response[4];
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	7c3b      	ldrb	r3, [r7, #16]
 800372e:	b21b      	sxth	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	b21b      	sxth	r3, r3
 8003734:	82bb      	strh	r3, [r7, #20]

        if( verify_checksum(serial_msb, serial_response[2]) && verify_checksum(serial_lsb, serial_response[5]) ) {
 8003736:	7bba      	ldrb	r2, [r7, #14]
 8003738:	8afb      	ldrh	r3, [r7, #22]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f81b 	bl	8003778 <verify_checksum>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <SHT40_ReadSerial+0x72>
 8003748:	7c7a      	ldrb	r2, [r7, #17]
 800374a:	8abb      	ldrh	r3, [r7, #20]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f812 	bl	8003778 <verify_checksum>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <SHT40_ReadSerial+0x72>
            *result = ((uint32_t)serial_msb << 16) | serial_lsb;
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	8abb      	ldrh	r3, [r7, #20]
 8003760:	431a      	orrs	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <SHT40_ReadSerial+0x74>
        }
    }
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	2000004d 	.word	0x2000004d

08003778 <verify_checksum>:

/*
 * Returns whether the provided CRC8 checksum matches that
 * of the provided 16-bit data
 */
static bool verify_checksum(uint16_t data, uint8_t checksum) {
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	460a      	mov	r2, r1
 8003782:	80fb      	strh	r3, [r7, #6]
 8003784:	4613      	mov	r3, r2
 8003786:	717b      	strb	r3, [r7, #5]
    uint8_t calculated_crc = 0xFF;
 8003788:	23ff      	movs	r3, #255	; 0xff
 800378a:	73fb      	strb	r3, [r7, #15]

    calculated_crc = CRC8_TABLE[calculated_crc ^ (data >> 8)];
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	0a12      	lsrs	r2, r2, #8
 8003792:	b292      	uxth	r2, r2
 8003794:	4053      	eors	r3, r2
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <verify_checksum+0x4c>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	73fb      	strb	r3, [r7, #15]
    calculated_crc = CRC8_TABLE[calculated_crc ^ (data & 0xFF)];
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4053      	eors	r3, r2
 80037a4:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <verify_checksum+0x4c>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	73fb      	strb	r3, [r7, #15]

    return calculated_crc == checksum;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	0800e784 	.word	0x0800e784

080037c8 <i2c_communicate>:

/*
 * Common I2C communication function
 */
static HAL_StatusTypeDef i2c_communicate(I2C_HandleTypeDef* i2cHandle, uint8_t* command, uint8_t* response) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
//        return HAL_ERROR;
//    }

    HAL_StatusTypeDef ret;

    HAL_Delay(100);
 80037d4:	2064      	movs	r0, #100	; 0x64
 80037d6:	f000 fc49 	bl	800406c <HAL_Delay>

    ret = HAL_I2C_Master_Transmit(i2cHandle, SHT40_I2C_ADDR, command, 1, SHT40_I2C_TIMEOUT);
 80037da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2301      	movs	r3, #1
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	2188      	movs	r1, #136	; 0x88
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f001 f87c 	bl	80048e4 <HAL_I2C_Master_Transmit>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <i2c_communicate+0x32>
    	return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e016      	b.n	8003828 <i2c_communicate+0x60>
    }

    HAL_Delay(100);
 80037fa:	2064      	movs	r0, #100	; 0x64
 80037fc:	f000 fc36 	bl	800406c <HAL_Delay>

    ret = HAL_I2C_Master_Receive(i2cHandle, SHT40_I2C_ADDR, response, SHT40_I2C_RESP_LEN, SHT40_I2C_TIMEOUT);
 8003800:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2306      	movs	r3, #6
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	2188      	movs	r1, #136	; 0x88
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f001 f95d 	bl	8004acc <HAL_I2C_Master_Receive>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <i2c_communicate+0x58>
		return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e003      	b.n	8003828 <i2c_communicate+0x60>
	}

    HAL_Delay(100);
 8003820:	2064      	movs	r0, #100	; 0x64
 8003822:	f000 fc23 	bl	800406c <HAL_Delay>

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <read_temp_humidity>:

/*
 * Read temperature and humidity from the I2C response
 */
static HAL_StatusTypeDef read_temp_humidity(uint8_t* response, SHT40_Measurement* result) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
    uint16_t temperature = response[0] << 8 | response[1];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b21a      	sxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3301      	adds	r3, #1
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b21b      	sxth	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b21b      	sxth	r3, r3
 800384e:	81fb      	strh	r3, [r7, #14]
    uint16_t humidity = response[3] << 8 | response[4];
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3303      	adds	r3, #3
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	b21a      	sxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b21b      	sxth	r3, r3
 8003862:	4313      	orrs	r3, r2
 8003864:	b21b      	sxth	r3, r3
 8003866:	81bb      	strh	r3, [r7, #12]

    if( verify_checksum(temperature, response[2]) && verify_checksum(humidity, response[5]) ) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3302      	adds	r3, #2
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff80 	bl	8003778 <verify_checksum>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01e      	beq.n	80038bc <read_temp_humidity+0x8c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3305      	adds	r3, #5
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	89bb      	ldrh	r3, [r7, #12]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff75 	bl	8003778 <verify_checksum>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <read_temp_humidity+0x8c>
        result->temperature = hardware_to_celsius(temperature);
 8003894:	89fb      	ldrh	r3, [r7, #14]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f816 	bl	80038c8 <hardware_to_celsius>
 800389c:	eef0 7a40 	vmov.f32	s15, s0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	edc3 7a00 	vstr	s15, [r3]
        result->rel_humidity = hardware_to_humidity_percentage(humidity);
 80038a6:	89bb      	ldrh	r3, [r7, #12]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f849 	bl	8003940 <hardware_to_humidity_percentage>
 80038ae:	eef0 7a40 	vmov.f32	s15, s0
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	edc3 7a01 	vstr	s15, [r3, #4]
        return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <read_temp_humidity+0x8e>
    }
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <hardware_to_celsius>:

/*
 * Converts hardware representation of temperature to C
 */
static float hardware_to_celsius(uint16_t reading) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
    return -45.0 + 175.0 * (reading / 65535.0);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fdfd 	bl	80004d4 <__aeabi_i2d>
 80038da:	a314      	add	r3, pc, #80	; (adr r3, 800392c <hardware_to_celsius+0x64>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc ff8c 	bl	80007fc <__aeabi_ddiv>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	a311      	add	r3, pc, #68	; (adr r3, 8003934 <hardware_to_celsius+0x6c>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fe59 	bl	80005a8 <__aeabi_dmul>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <hardware_to_celsius+0x60>)
 8003904:	f7fc fc98 	bl	8000238 <__aeabi_dsub>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f942 	bl	8000b98 <__aeabi_d2f>
 8003914:	4603      	mov	r3, r0
 8003916:	ee07 3a90 	vmov	s15, r3
}
 800391a:	eeb0 0a67 	vmov.f32	s0, s15
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	f3af 8000 	nop.w
 8003928:	40468000 	.word	0x40468000
 800392c:	00000000 	.word	0x00000000
 8003930:	40efffe0 	.word	0x40efffe0
 8003934:	00000000 	.word	0x00000000
 8003938:	4065e000 	.word	0x4065e000
 800393c:	00000000 	.word	0x00000000

08003940 <hardware_to_humidity_percentage>:

/*
 * Converts hardware representation of humidity to relative humidity as percentage
 */
static float hardware_to_humidity_percentage(uint16_t reading) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	80fb      	strh	r3, [r7, #6]
    return -6.0 + 125.0 * (reading / 65535.0);
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fdc1 	bl	80004d4 <__aeabi_i2d>
 8003952:	a315      	add	r3, pc, #84	; (adr r3, 80039a8 <hardware_to_humidity_percentage+0x68>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc ff50 	bl	80007fc <__aeabi_ddiv>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <hardware_to_humidity_percentage+0x60>)
 800396a:	f7fc fe1d 	bl	80005a8 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <hardware_to_humidity_percentage+0x64>)
 800397c:	f7fc fc5c 	bl	8000238 <__aeabi_dsub>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f906 	bl	8000b98 <__aeabi_d2f>
 800398c:	4603      	mov	r3, r0
 800398e:	ee07 3a90 	vmov	s15, r3
}
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	f3af 8000 	nop.w
 80039a0:	405f4000 	.word	0x405f4000
 80039a4:	40180000 	.word	0x40180000
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40efffe0 	.word	0x40efffe0

080039b0 <LL_AHB2_GRP1_EnableClock>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4013      	ands	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a38:	68fb      	ldr	r3, [r7, #12]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4013      	ands	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09c      	sub	sp, #112	; 0x70
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	2250      	movs	r2, #80	; 0x50
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 fef3 	bl	8009894 <memset>
  if(hi2c->Instance==I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_I2C_MspInit+0x88>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d126      	bne.n	8003b06 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003ab8:	2304      	movs	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003abc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fba3 	bl	8007212 <HAL_RCCEx_PeriphCLKConfig>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ad2:	f7ff fded 	bl	80036b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	f7ff ff6a 	bl	80039b0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae2:	2312      	movs	r3, #18
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aee:	2304      	movs	r3, #4
 8003af0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003af6:	4619      	mov	r1, r3
 8003af8:	4806      	ldr	r0, [pc, #24]	; (8003b14 <HAL_I2C_MspInit+0x8c>)
 8003afa:	f000 fcc3 	bl	8004484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003afe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b02:	f7ff ff6e 	bl	80039e2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b06:	bf00      	nop
 8003b08:	3770      	adds	r7, #112	; 0x70
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40005400 	.word	0x40005400
 8003b14:	48000400 	.word	0x48000400

08003b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09c      	sub	sp, #112	; 0x70
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	2250      	movs	r2, #80	; 0x50
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f005 feab 	bl	8009894 <memset>
  if(huart->Instance==LPUART1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <HAL_UART_MspInit+0xf8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d12c      	bne.n	8003ba2 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 fb5c 	bl	8007212 <HAL_RCCEx_PeriphCLKConfig>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b60:	f7ff fda6 	bl	80036b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7ff ff55 	bl	8003a14 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	2004      	movs	r0, #4
 8003b6c:	f7ff ff20 	bl	80039b0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b70:	2303      	movs	r3, #3
 8003b72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b80:	2308      	movs	r3, #8
 8003b82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4822      	ldr	r0, [pc, #136]	; (8003c14 <HAL_UART_MspInit+0xfc>)
 8003b8c:	f000 fc7a 	bl	8004484 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003b90:	2200      	movs	r2, #0
 8003b92:	2100      	movs	r1, #0
 8003b94:	2025      	movs	r0, #37	; 0x25
 8003b96:	f000 fb7e 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003b9a:	2025      	movs	r0, #37	; 0x25
 8003b9c:	f000 fb95 	bl	80042ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ba0:	e031      	b.n	8003c06 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_UART_MspInit+0x100>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d12c      	bne.n	8003c06 <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fb2a 	bl	8007212 <HAL_RCCEx_PeriphCLKConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 8003bc4:	f7ff fd74 	bl	80036b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bcc:	f7ff ff3b 	bl	8003a46 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	f7ff feed 	bl	80039b0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bd6:	23c0      	movs	r3, #192	; 0xc0
 8003bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2300      	movs	r3, #0
 8003be4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be6:	2307      	movs	r3, #7
 8003be8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480a      	ldr	r0, [pc, #40]	; (8003c1c <HAL_UART_MspInit+0x104>)
 8003bf2:	f000 fc47 	bl	8004484 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2024      	movs	r0, #36	; 0x24
 8003bfc:	f000 fb4b 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c00:	2024      	movs	r0, #36	; 0x24
 8003c02:	f000 fb62 	bl	80042ca <HAL_NVIC_EnableIRQ>
}
 8003c06:	bf00      	nop
 8003c08:	3770      	adds	r7, #112	; 0x70
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40008000 	.word	0x40008000
 8003c14:	48000800 	.word	0x48000800
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	48000400 	.word	0x48000400

08003c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <NMI_Handler+0x4>

08003c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <HardFault_Handler+0x4>

08003c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <MemManage_Handler+0x4>

08003c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <BusFault_Handler+0x4>

08003c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <UsageFault_Handler+0x4>

08003c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6c:	f000 f9d2 	bl	8004014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <USART1_IRQHandler+0x10>)
 8003c7a:	f003 fe9b 	bl	80079b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000440 	.word	0x20000440

08003c88 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <LPUART1_IRQHandler+0x10>)
 8003c8e:	f003 fe91 	bl	80079b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200003ac 	.word	0x200003ac

08003c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 8003ca0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ca4:	f7fe fc24 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 8003ca8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003cac:	f7fe fc20 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cb4:	f7fe fc1c 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return 1;
 8003cc0:	2301      	movs	r3, #1
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_kill>:

int _kill(int pid, int sig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cd6:	f005 fd95 	bl	8009804 <__errno>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2216      	movs	r2, #22
 8003cde:	601a      	str	r2, [r3, #0]
  return -1;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_exit>:

void _exit (int status)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ffe7 	bl	8003ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cfe:	e7fe      	b.n	8003cfe <_exit+0x12>

08003d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e00a      	b.n	8003d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d12:	f3af 8000 	nop.w
 8003d16:	4601      	mov	r1, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	60ba      	str	r2, [r7, #8]
 8003d1e:	b2ca      	uxtb	r2, r1
 8003d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dbf0      	blt.n	8003d12 <_read+0x12>
  }

  return len;
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e009      	b.n	8003d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	60ba      	str	r2, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fdd3 	bl	8001900 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	dbf1      	blt.n	8003d4c <_write+0x12>
  }
  return len;
 8003d68:	687b      	ldr	r3, [r7, #4]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_close>:

int _close(int file)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_isatty>:

int _isatty(int file)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <_sbrk+0x5c>)
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <_sbrk+0x60>)
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <_sbrk+0x64>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <_sbrk+0x64>)
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <_sbrk+0x68>)
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <_sbrk+0x64>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d207      	bcs.n	8003e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e0c:	f005 fcfa 	bl	8009804 <__errno>
 8003e10:	4603      	mov	r3, r0
 8003e12:	220c      	movs	r2, #12
 8003e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1a:	e009      	b.n	8003e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <_sbrk+0x64>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <_sbrk+0x64>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <_sbrk+0x64>)
 8003e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20030000 	.word	0x20030000
 8003e3c:	00000400 	.word	0x00000400
 8003e40:	20000800 	.word	0x20000800
 8003e44:	20000818 	.word	0x20000818

08003e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <SystemInit+0x98>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <SystemInit+0x98>)
 8003e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e70:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003e74:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <SystemInit+0x9c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e92:	f023 0305 	bic.w	r3, r3, #5
 8003e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <SystemInit+0xa0>)
 8003eb4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <SystemInit+0xa0>)
 8003ebc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	faf6fefb 	.word	0xfaf6fefb
 8003ee8:	22041000 	.word	0x22041000

08003eec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003eec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ef0:	3304      	adds	r3, #4

08003ef2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ef2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ef4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003ef6:	d3f9      	bcc.n	8003eec <CopyDataInit>
  bx lr
 8003ef8:	4770      	bx	lr

08003efa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003efa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003efc:	3004      	adds	r0, #4

08003efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003efe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003f00:	d3fb      	bcc.n	8003efa <FillZerobss>
  bx lr
 8003f02:	4770      	bx	lr

08003f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f04:	480c      	ldr	r0, [pc, #48]	; (8003f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f08:	f7ff ff9e 	bl	8003e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <LoopForever+0x6>)
 8003f0e:	490c      	ldr	r1, [pc, #48]	; (8003f40 <LoopForever+0xa>)
 8003f10:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <LoopForever+0xe>)
 8003f12:	2300      	movs	r3, #0
 8003f14:	f7ff ffed 	bl	8003ef2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003f18:	480b      	ldr	r0, [pc, #44]	; (8003f48 <LoopForever+0x12>)
 8003f1a:	490c      	ldr	r1, [pc, #48]	; (8003f4c <LoopForever+0x16>)
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <LoopForever+0x1a>)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f7ff ffe7 	bl	8003ef2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <LoopForever+0x1e>)
 8003f26:	490c      	ldr	r1, [pc, #48]	; (8003f58 <LoopForever+0x22>)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f7ff ffe8 	bl	8003efe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f2e:	f005 fc6f 	bl	8009810 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003f32:	f7fd fcf7 	bl	8001924 <main>

08003f36 <LoopForever>:

LoopForever:
  b LoopForever
 8003f36:	e7fe      	b.n	8003f36 <LoopForever>
  ldr   r0, =_estack
 8003f38:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003f3c:	20000008 	.word	0x20000008
 8003f40:	20000230 	.word	0x20000230
 8003f44:	0800ee0c 	.word	0x0800ee0c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003f48:	20030000 	.word	0x20030000
 8003f4c:	20030000 	.word	0x20030000
 8003f50:	0800f034 	.word	0x0800f034
  INIT_BSS _sbss, _ebss
 8003f54:	20000230 	.word	0x20000230
 8003f58:	20000818 	.word	0x20000818

08003f5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC1_IRQHandler>
	...

08003f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_Init+0x3c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <HAL_Init+0x3c>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f76:	2003      	movs	r0, #3
 8003f78:	f000 f982 	bl	8004280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f7c:	200f      	movs	r0, #15
 8003f7e:	f000 f80f 	bl	8003fa0 <HAL_InitTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	e001      	b.n	8003f92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f8e:	f7ff fd73 	bl	8003a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f92:	79fb      	ldrb	r3, [r7, #7]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	58004000 	.word	0x58004000

08003fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <HAL_InitTick+0x6c>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d024      	beq.n	8003ffe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fb4:	f002 fe9c 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_InitTick+0x6c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f98e 	bl	80042ee <HAL_SYSTICK_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	d809      	bhi.n	8003ff2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	f000 f956 	bl	8004296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_InitTick+0x70>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e007      	b.n	8004002 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	e004      	b.n	8004002 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e001      	b.n	8004002 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000058 	.word	0x20000058
 8004010:	20000054 	.word	0x20000054

08004014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_IncTick+0x20>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_IncTick+0x24>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4413      	add	r3, r2
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_IncTick+0x24>)
 8004026:	6013      	str	r3, [r2, #0]
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000058 	.word	0x20000058
 8004038:	20000804 	.word	0x20000804

0800403c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return uwTick;
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_GetTick+0x14>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000804 	.word	0x20000804

08004054 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_GetTickPrio+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000054 	.word	0x20000054

0800406c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7ff ffe2 	bl	800403c <HAL_GetTick>
 8004078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d005      	beq.n	8004092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_Delay+0x44>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004092:	bf00      	nop
 8004094:	f7ff ffd2 	bl	800403c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f7      	bhi.n	8004094 <HAL_Delay+0x28>
  {
  }
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000058 	.word	0x20000058

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4907      	ldr	r1, [pc, #28]	; (8004150 <__NVIC_EnableIRQ+0x38>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e100 	.word	0xe000e100

08004154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db0a      	blt.n	800417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	490c      	ldr	r1, [pc, #48]	; (80041a0 <__NVIC_SetPriority+0x4c>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	440b      	add	r3, r1
 8004178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800417c:	e00a      	b.n	8004194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4908      	ldr	r1, [pc, #32]	; (80041a4 <__NVIC_SetPriority+0x50>)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3b04      	subs	r3, #4
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	440b      	add	r3, r1
 8004192:	761a      	strb	r2, [r3, #24]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d902      	bls.n	80041d8 <NVIC_EncodePriority+0x30>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3b03      	subs	r3, #3
 80041d6:	e000      	b.n	80041da <NVIC_EncodePriority+0x32>
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	4313      	orrs	r3, r2
         );
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	; 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004214:	f3bf 8f4f 	dsb	sy
}
 8004218:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <__NVIC_SystemReset+0x24>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004222:	4904      	ldr	r1, [pc, #16]	; (8004234 <__NVIC_SystemReset+0x24>)
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <__NVIC_SystemReset+0x28>)
 8004226:	4313      	orrs	r3, r2
 8004228:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800422a:	f3bf 8f4f 	dsb	sy
}
 800422e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <__NVIC_SystemReset+0x20>
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	05fa0004 	.word	0x05fa0004

0800423c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800424c:	d301      	bcc.n	8004252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800424e:	2301      	movs	r3, #1
 8004250:	e00f      	b.n	8004272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <SysTick_Config+0x40>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3b01      	subs	r3, #1
 8004258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800425a:	210f      	movs	r1, #15
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	f7ff ff78 	bl	8004154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <SysTick_Config+0x40>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <SysTick_Config+0x40>)
 800426c:	2207      	movs	r2, #7
 800426e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	e000e010 	.word	0xe000e010

08004280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff13 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042a4:	f7ff ff2a 	bl	80040fc <__NVIC_GetPriorityGrouping>
 80042a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f7ff ff7a 	bl	80041a8 <NVIC_EncodePriority>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff49 	bl	8004154 <__NVIC_SetPriority>
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff1d 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80042ea:	f7ff ff91 	bl	8004210 <__NVIC_SystemReset>

080042ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff ffa0 	bl	800423c <SysTick_Config>
 80042fc:	4603      	mov	r3, r0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e04f      	b.n	80043b8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d008      	beq.n	8004336 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e040      	b.n	80043b8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 020e 	bic.w	r2, r2, #14
 8004344:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004354:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f003 021c 	and.w	r2, r3, #28
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f202 	lsl.w	r2, r1, r2
 8004378:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004382:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800439a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d005      	beq.n	80043e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e047      	b.n	8004478 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 020e 	bic.w	r2, r2, #14
 80043f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f003 021c 	and.w	r2, r3, #28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004434:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004456:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    }
  }
  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004492:	e14c      	b.n	800472e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 813e 	beq.w	8004728 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d005      	beq.n	80044c4 <HAL_GPIO_Init+0x40>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d130      	bne.n	8004526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fa:	2201      	movs	r2, #1
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0201 	and.w	r2, r3, #1
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b03      	cmp	r3, #3
 8004530:	d017      	beq.n	8004562 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d123      	bne.n	80045b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	6939      	ldr	r1, [r7, #16]
 80045b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8098 	beq.w	8004728 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80045f8:	4a54      	ldr	r2, [pc, #336]	; (800474c <HAL_GPIO_Init+0x2c8>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	220f      	movs	r2, #15
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004622:	d019      	beq.n	8004658 <HAL_GPIO_Init+0x1d4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_GPIO_Init+0x2cc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_GPIO_Init+0x1d0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a49      	ldr	r2, [pc, #292]	; (8004754 <HAL_GPIO_Init+0x2d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00d      	beq.n	8004650 <HAL_GPIO_Init+0x1cc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a48      	ldr	r2, [pc, #288]	; (8004758 <HAL_GPIO_Init+0x2d4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0x1c8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a47      	ldr	r2, [pc, #284]	; (800475c <HAL_GPIO_Init+0x2d8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_GPIO_Init+0x1c4>
 8004644:	2304      	movs	r3, #4
 8004646:	e008      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004648:	2307      	movs	r3, #7
 800464a:	e006      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 800464c:	2303      	movs	r3, #3
 800464e:	e004      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004650:	2302      	movs	r3, #2
 8004652:	e002      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_GPIO_Init+0x1d6>
 8004658:	2300      	movs	r3, #0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	f002 0203 	and.w	r2, r2, #3
 8004660:	0092      	lsls	r2, r2, #2
 8004662:	4093      	lsls	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800466a:	4938      	ldr	r1, [pc, #224]	; (800474c <HAL_GPIO_Init+0x2c8>)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004678:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046f2:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80046fa:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f aeab 	bne.w	8004494 <HAL_GPIO_Init+0x10>
  }
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40010000 	.word	0x40010000
 8004750:	48000400 	.word	0x48000400
 8004754:	48000800 	.word	0x48000800
 8004758:	48000c00 	.word	0x48000c00
 800475c:	48001000 	.word	0x48001000
 8004760:	58000800 	.word	0x58000800

08004764 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e001      	b.n	8004786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b0:	e002      	b.n	80047b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e081      	b.n	80048da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff f94c 	bl	8003a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d107      	bne.n	800483e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	e006      	b.n	800484c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800484a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d104      	bne.n	800485e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800486c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	461a      	mov	r2, r3
 80048f0:	460b      	mov	r3, r1
 80048f2:	817b      	strh	r3, [r7, #10]
 80048f4:	4613      	mov	r3, r2
 80048f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80da 	bne.w	8004aba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2C_Master_Transmit+0x30>
 8004910:	2302      	movs	r3, #2
 8004912:	e0d3      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800491c:	f7ff fb8e 	bl	800403c <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2319      	movs	r3, #25
 8004928:	2201      	movs	r2, #1
 800492a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fdc4 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0be      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2210      	movs	r2, #16
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	893a      	ldrh	r2, [r7, #8]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2bff      	cmp	r3, #255	; 0xff
 800496e:	d90e      	bls.n	800498e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	22ff      	movs	r2, #255	; 0xff
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	4b51      	ldr	r3, [pc, #324]	; (8004ac4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 ffd4 	bl	8005934 <I2C_TransferConfig>
 800498c:	e06c      	b.n	8004a68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	b2da      	uxtb	r2, r3
 800499e:	8979      	ldrh	r1, [r7, #10]
 80049a0:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <HAL_I2C_Master_Transmit+0x1e0>)
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 ffc3 	bl	8005934 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049ae:	e05b      	b.n	8004a68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	6a39      	ldr	r1, [r7, #32]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fdd0 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e07b      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d034      	beq.n	8004a68 <HAL_I2C_Master_Transmit+0x184>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d130      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fd53 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04d      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d90e      	bls.n	8004a48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	8979      	ldrh	r1, [r7, #10]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 ff77 	bl	8005934 <I2C_TransferConfig>
 8004a46:	e00f      	b.n	8004a68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	8979      	ldrh	r1, [r7, #10]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 ff66 	bl	8005934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d19e      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	6a39      	ldr	r1, [r7, #32]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fdb6 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e01a      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a9a:	400b      	ands	r3, r1
 8004a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	80002000 	.word	0x80002000
 8004ac8:	fe00e800 	.word	0xfe00e800

08004acc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	817b      	strh	r3, [r7, #10]
 8004adc:	4613      	mov	r3, r2
 8004ade:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	f040 80db 	bne.w	8004ca4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_I2C_Master_Receive+0x30>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0d4      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b04:	f7ff fa9a 	bl	800403c <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2319      	movs	r3, #25
 8004b10:	2201      	movs	r2, #1
 8004b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fcd0 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0bf      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2222      	movs	r2, #34	; 0x22
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2210      	movs	r2, #16
 8004b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	893a      	ldrh	r2, [r7, #8]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2bff      	cmp	r3, #255	; 0xff
 8004b56:	d90e      	bls.n	8004b76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	22ff      	movs	r2, #255	; 0xff
 8004b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	8979      	ldrh	r1, [r7, #10]
 8004b66:	4b52      	ldr	r3, [pc, #328]	; (8004cb0 <HAL_I2C_Master_Receive+0x1e4>)
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fee0 	bl	8005934 <I2C_TransferConfig>
 8004b74:	e06d      	b.n	8004c52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	8979      	ldrh	r1, [r7, #10]
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <HAL_I2C_Master_Receive+0x1e4>)
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fecf 	bl	8005934 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b96:	e05c      	b.n	8004c52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	6a39      	ldr	r1, [r7, #32]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fd67 	bl	8005670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e07c      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d034      	beq.n	8004c52 <HAL_I2C_Master_Receive+0x186>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d130      	bne.n	8004c52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fc5e 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e04d      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2bff      	cmp	r3, #255	; 0xff
 8004c12:	d90e      	bls.n	8004c32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	8979      	ldrh	r1, [r7, #10]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fe82 	bl	8005934 <I2C_TransferConfig>
 8004c30:	e00f      	b.n	8004c52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	8979      	ldrh	r1, [r7, #10]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fe71 	bl	8005934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d19d      	bne.n	8004b98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6a39      	ldr	r1, [r7, #32]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fcc1 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01a      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <HAL_I2C_Master_Receive+0x1e8>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	80002400 	.word	0x80002400
 8004cb4:	fe00e800 	.word	0xfe00e800

08004cb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	817b      	strh	r3, [r7, #10]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	813b      	strh	r3, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	f040 80f9 	bne.w	8004ed2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_I2C_Mem_Write+0x34>
 8004ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0ed      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_Mem_Write+0x4e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0e6      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d0e:	f7ff f995 	bl	800403c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	2319      	movs	r3, #25
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fbcb 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0d1      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2221      	movs	r2, #33	; 0x21
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d58:	88f8      	ldrh	r0, [r7, #6]
 8004d5a:	893a      	ldrh	r2, [r7, #8]
 8004d5c:	8979      	ldrh	r1, [r7, #10]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	4603      	mov	r3, r0
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fadb 	bl	8005324 <I2C_RequestMemoryWrite>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0a9      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2bff      	cmp	r3, #255	; 0xff
 8004d88:	d90e      	bls.n	8004da8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	8979      	ldrh	r1, [r7, #10]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fdc7 	bl	8005934 <I2C_TransferConfig>
 8004da6:	e00f      	b.n	8004dc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	8979      	ldrh	r1, [r7, #10]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fdb6 	bl	8005934 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fbc4 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e07b      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d034      	beq.n	8004e80 <HAL_I2C_Mem_Write+0x1c8>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d130      	bne.n	8004e80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fb47 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e04d      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2bff      	cmp	r3, #255	; 0xff
 8004e40:	d90e      	bls.n	8004e60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22ff      	movs	r2, #255	; 0xff
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	8979      	ldrh	r1, [r7, #10]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fd6b 	bl	8005934 <I2C_TransferConfig>
 8004e5e:	e00f      	b.n	8004e80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	8979      	ldrh	r1, [r7, #10]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fd5a 	bl	8005934 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19e      	bne.n	8004dc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fbaa 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e01a      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_I2C_Mem_Write+0x224>)
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	fe00e800 	.word	0xfe00e800

08004ee0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	813b      	strh	r3, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 80fd 	bne.w	8005102 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x34>
 8004f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0f1      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Mem_Read+0x4e>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e0ea      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f36:	f7ff f881 	bl	800403c <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2319      	movs	r3, #25
 8004f42:	2201      	movs	r2, #1
 8004f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fab7 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0d5      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2222      	movs	r2, #34	; 0x22
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2240      	movs	r2, #64	; 0x40
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f80:	88f8      	ldrh	r0, [r7, #6]
 8004f82:	893a      	ldrh	r2, [r7, #8]
 8004f84:	8979      	ldrh	r1, [r7, #10]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4603      	mov	r3, r0
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa1b 	bl	80053cc <I2C_RequestMemoryRead>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0ad      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2bff      	cmp	r3, #255	; 0xff
 8004fb0:	d90e      	bls.n	8004fd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <HAL_I2C_Mem_Read+0x22c>)
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fcb3 	bl	8005934 <I2C_TransferConfig>
 8004fce:	e00f      	b.n	8004ff0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	8979      	ldrh	r1, [r7, #10]
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <HAL_I2C_Mem_Read+0x22c>)
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fca2 	bl	8005934 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fa5e 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e07c      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d034      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x1d0>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d130      	bne.n	80050b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	; 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fa2f 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e04d      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2bff      	cmp	r3, #255	; 0xff
 8005070:	d90e      	bls.n	8005090 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	b2da      	uxtb	r2, r3
 800507e:	8979      	ldrh	r1, [r7, #10]
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fc53 	bl	8005934 <I2C_TransferConfig>
 800508e:	e00f      	b.n	80050b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	8979      	ldrh	r1, [r7, #10]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fc42 	bl	8005934 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d19a      	bne.n	8004ff0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fa92 	bl	80055e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e01a      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2220      	movs	r2, #32
 80050d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_I2C_Mem_Read+0x230>)
 80050e2:	400b      	ands	r3, r1
 80050e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	80002400 	.word	0x80002400
 8005110:	fe00e800 	.word	0xfe00e800

08005114 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	460b      	mov	r3, r1
 8005122:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	f040 80f1 	bne.w	8005318 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005144:	d101      	bne.n	800514a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	e0e7      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_I2C_IsDeviceReady+0x44>
 8005154:	2302      	movs	r3, #2
 8005156:	e0e0      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2224      	movs	r2, #36	; 0x24
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_I2C_IsDeviceReady+0x72>
 8005176:	897b      	ldrh	r3, [r7, #10]
 8005178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800517c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005184:	e004      	b.n	8005190 <HAL_I2C_IsDeviceReady+0x7c>
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005196:	f7fe ff51 	bl	800403c <HAL_GetTick>
 800519a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80051c8:	e034      	b.n	8005234 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d01a      	beq.n	8005208 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe ff33 	bl	800403c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <HAL_I2C_IsDeviceReady+0xd4>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e088      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b10      	cmp	r3, #16
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <HAL_I2C_IsDeviceReady+0x12c>
 800523a:	7fbb      	ldrb	r3, [r7, #30]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0c4      	beq.n	80051ca <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b10      	cmp	r3, #16
 800524c:	d01a      	beq.n	8005284 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	2120      	movs	r1, #32
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f92f 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e058      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2220      	movs	r2, #32
 800526e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e04a      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	2120      	movs	r1, #32
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f914 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e03d      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2210      	movs	r2, #16
 80052a4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2220      	movs	r2, #32
 80052ac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d118      	bne.n	80052e8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2120      	movs	r1, #32
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f8f3 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e01c      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2220      	movs	r2, #32
 80052e6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3301      	adds	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f63f af3b 	bhi.w	800516e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	460b      	mov	r3, r1
 8005338:	813b      	strh	r3, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	8979      	ldrh	r1, [r7, #10]
 8005344:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <I2C_RequestMemoryWrite+0xa4>)
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 faf1 	bl	8005934 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8ff 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e02c      	b.n	80053c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	629a      	str	r2, [r3, #40]	; 0x28
 8005376:	e015      	b.n	80053a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29b      	uxth	r3, r3
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f8e5 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e012      	b.n	80053c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f884 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	80002000 	.word	0x80002000

080053cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	817b      	strh	r3, [r7, #10]
 80053de:	460b      	mov	r3, r1
 80053e0:	813b      	strh	r3, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <I2C_RequestMemoryRead+0xa4>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2300      	movs	r3, #0
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa9e 	bl	8005934 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f8ac 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e02c      	b.n	8005466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005412:	893b      	ldrh	r3, [r7, #8]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
 800541c:	e015      	b.n	800544a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800541e:	893b      	ldrh	r3, [r7, #8]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	b29b      	uxth	r3, r3
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f892 	bl	800555a <I2C_WaitOnTXISFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e012      	b.n	8005466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	; 0x40
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f831 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	80002000 	.word	0x80002000

08005474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d103      	bne.n	8005492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d007      	beq.n	80054b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	619a      	str	r2, [r3, #24]
  }
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054cc:	e031      	b.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d02d      	beq.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fe fdb1 	bl	800403c <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d122      	bne.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d113      	bne.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e00f      	b.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d0be      	beq.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005566:	e033      	b.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f901 	bl	8005774 <I2C_IsErrorOccurred>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e031      	b.n	80055e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d025      	beq.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fe fd5a 	bl	800403c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11a      	bne.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d013      	beq.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e007      	b.n	80055e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d1c4      	bne.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055f4:	e02f      	b.n	8005656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f8ba 	bl	8005774 <I2C_IsErrorOccurred>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e02d      	b.n	8005666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fe fd17 	bl	800403c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11a      	bne.n	8005656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d013      	beq.n	8005656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e007      	b.n	8005666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b20      	cmp	r3, #32
 8005662:	d1c8      	bne.n	80055f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800567c:	e06b      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f876 	bl	8005774 <I2C_IsErrorOccurred>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e069      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b20      	cmp	r3, #32
 800569e:	d138      	bne.n	8005712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d105      	bne.n	80056ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e055      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d107      	bne.n	80056d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2210      	movs	r2, #16
 80056ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2204      	movs	r2, #4
 80056d4:	645a      	str	r2, [r3, #68]	; 0x44
 80056d6:	e002      	b.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2220      	movs	r2, #32
 80056e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80056f2:	400b      	ands	r3, r1
 80056f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e029      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fe fc93 	bl	800403c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b04      	cmp	r3, #4
 8005734:	d00f      	beq.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e007      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d18c      	bne.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	fe00e800 	.word	0xfe00e800

08005774 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d068      	beq.n	8005872 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2210      	movs	r2, #16
 80057a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057a8:	e049      	b.n	800583e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d045      	beq.n	800583e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fe fc43 	bl	800403c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_IsErrorOccurred+0x54>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d13a      	bne.n	800583e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ea:	d121      	bne.n	8005830 <I2C_IsErrorOccurred+0xbc>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f2:	d01d      	beq.n	8005830 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d01a      	beq.n	8005830 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005808:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800580a:	f7fe fc17 	bl	800403c <HAL_GetTick>
 800580e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005810:	e00e      	b.n	8005830 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005812:	f7fe fc13 	bl	800403c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b19      	cmp	r3, #25
 800581e:	d907      	bls.n	8005830 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800582e:	e006      	b.n	800583e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d1e9      	bne.n	8005812 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d003      	beq.n	8005854 <I2C_IsErrorOccurred+0xe0>
 800584c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0aa      	beq.n	80057aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2220      	movs	r2, #32
 8005862:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f043 0304 	orr.w	r3, r3, #4
 800586a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f043 0302 	orr.w	r3, r3, #2
 80058ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80058e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01c      	beq.n	8005922 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fdc3 	bl	8005474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <I2C_IsErrorOccurred+0x1bc>)
 80058fa:	400b      	ands	r3, r1
 80058fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	431a      	orrs	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	fe00e800 	.word	0xfe00e800

08005934 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	4613      	mov	r3, r2
 8005944:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800594c:	7a7b      	ldrb	r3, [r7, #9]
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005954:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	4313      	orrs	r3, r2
 800595e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005962:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	0d5b      	lsrs	r3, r3, #21
 800596e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <I2C_TransferConfig+0x60>)
 8005974:	430b      	orrs	r3, r1
 8005976:	43db      	mvns	r3, r3
 8005978:	ea02 0103 	and.w	r1, r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	03ff63ff 	.word	0x03ff63ff

08005998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d138      	bne.n	8005a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e032      	b.n	8005a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d139      	bne.n	8005ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e033      	b.n	8005aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2224      	movs	r2, #36	; 0x24
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e041      	b.n	8005b5c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f245 5255 	movw	r2, #21845	; 0x5555
 8005aea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005b00:	f7fe fa9c 	bl	800403c <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b06:	e00f      	b.n	8005b28 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005b08:	f7fe fa98 	bl	800403c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b31      	cmp	r3, #49	; 0x31
 8005b14:	d908      	bls.n	8005b28 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e019      	b.n	8005b5c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e8      	bne.n	8005b08 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d005      	beq.n	8005b50 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	e004      	b.n	8005b5a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	58000400 	.word	0x58000400

08005ba4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	58000400 	.word	0x58000400

08005bc0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d101      	bne.n	8005bd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_HSE_IsReady+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_HSE_IsReady+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8005c62:	b480      	push	{r7}
 8005c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d101      	bne.n	8005c98 <LL_RCC_HSI_IsReady+0x18>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <LL_RCC_HSI_IsReady+0x1a>
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d101      	bne.n	8005d2a <LL_RCC_HSI48_IsReady+0x18>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <LL_RCC_HSI48_IsReady+0x1a>
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dac:	f023 0304 	bic.w	r3, r3, #4
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d101      	bne.n	8005dd6 <LL_RCC_LSE_IsReady+0x18>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <LL_RCC_LSE_IsReady+0x1a>
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d101      	bne.n	8005e3e <LL_RCC_LSI1_IsReady+0x18>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <LL_RCC_LSI1_IsReady+0x1a>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d101      	bne.n	8005ea6 <LL_RCC_LSI2_IsReady+0x18>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <LL_RCC_LSI2_IsReady+0x1a>
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d101      	bne.n	8005f32 <LL_RCC_MSI_IsReady+0x16>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <LL_RCC_MSI_IsReady+0x18>
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2bb0      	cmp	r3, #176	; 0xb0
 8005f7c:	d901      	bls.n	8005f82 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005f7e:	23b0      	movs	r3, #176	; 0xb0
 8005f80:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8005f82:	687b      	ldr	r3, [r7, #4]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f023 0203 	bic.w	r2, r3, #3
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800600c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800605e:	f023 020f 	bic.w	r2, r3, #15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800608e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4313      	orrs	r3, r2
 8006096:	608b      	str	r3, [r1, #8]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800610e:	4618      	mov	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006126:	4618      	mov	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800613e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800617e:	d101      	bne.n	8006184 <LL_RCC_PLL_IsReady+0x18>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <LL_RCC_PLL_IsReady+0x1a>
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0303 	and.w	r3, r3, #3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006204:	d101      	bne.n	800620a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006216:	b480      	push	{r7}
 8006218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622a:	d101      	bne.n	8006230 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d101      	bne.n	8006256 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006262:	b480      	push	{r7}
 8006264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006274:	d101      	bne.n	800627a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006286:	b480      	push	{r7}
 8006288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800628a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006298:	d101      	bne.n	800629e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b08d      	sub	sp, #52	; 0x34
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e363      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 808d 	beq.w	80063e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062cc:	f7ff fe89 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80062d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d2:	f7ff ff82 	bl	80061da <LL_RCC_PLL_GetMainSource>
 80062d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x3e>
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d147      	bne.n	8006374 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d144      	bne.n	8006374 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e347      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80062fa:	f7ff fe34 	bl	8005f66 <LL_RCC_MSI_GetRange>
 80062fe:	4603      	mov	r3, r0
 8006300:	429c      	cmp	r4, r3
 8006302:	d914      	bls.n	800632e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fd31 	bl	8006d70 <RCC_SetFlashLatencyFromMSIRange>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e336      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fe0e 	bl	8005f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fe32 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>
 800632c:	e013      	b.n	8006356 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fe03 	bl	8005f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fe27 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fd12 	bl	8006d70 <RCC_SetFlashLatencyFromMSIRange>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e317      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006356:	f000 fccb 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 800635a:	4603      	mov	r3, r0
 800635c:	4aa4      	ldr	r2, [pc, #656]	; (80065f0 <HAL_RCC_OscConfig+0x344>)
 800635e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006360:	4ba4      	ldr	r3, [pc, #656]	; (80065f4 <HAL_RCC_OscConfig+0x348>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fd fe1b 	bl	8003fa0 <HAL_InitTick>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d039      	beq.n	80063e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e308      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01e      	beq.n	80063ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800637c:	f7ff fdb0 	bl	8005ee0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006380:	f7fd fe5c 	bl	800403c <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006388:	f7fd fe58 	bl	800403c <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e2f5      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800639a:	f7ff fdbf 	bl	8005f1c <LL_RCC_MSI_IsReady>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f1      	beq.n	8006388 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fdc8 	bl	8005f3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fdec 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063ba:	f7ff fda0 	bl	8005efe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063be:	f7fd fe3d 	bl	800403c <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063c6:	f7fd fe39 	bl	800403c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e2d6      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80063d8:	f7ff fda0 	bl	8005f1c <LL_RCC_MSI_IsReady>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f1      	bne.n	80063c6 <HAL_RCC_OscConfig+0x11a>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80063e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d047      	beq.n	8006482 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f2:	f7ff fdf6 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80063f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f8:	f7ff feef 	bl	80061da <LL_RCC_PLL_GetMainSource>
 80063fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d005      	beq.n	8006410 <HAL_RCC_OscConfig+0x164>
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b0c      	cmp	r3, #12
 8006408:	d108      	bne.n	800641c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d105      	bne.n	800641c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d134      	bne.n	8006482 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e2b4      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006424:	d102      	bne.n	800642c <HAL_RCC_OscConfig+0x180>
 8006426:	f7ff fbdd 	bl	8005be4 <LL_RCC_HSE_Enable>
 800642a:	e001      	b.n	8006430 <HAL_RCC_OscConfig+0x184>
 800642c:	f7ff fbe9 	bl	8005c02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fd fe00 	bl	800403c <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006440:	f7fd fdfc 	bl	800403c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e299      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006452:	f7ff fbe5 	bl	8005c20 <LL_RCC_HSE_IsReady>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f1      	beq.n	8006440 <HAL_RCC_OscConfig+0x194>
 800645c:	e011      	b.n	8006482 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fd fded 	bl	800403c <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006466:	f7fd fde9 	bl	800403c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b64      	cmp	r3, #100	; 0x64
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e286      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006478:	f7ff fbd2 	bl	8005c20 <LL_RCC_HSE_IsReady>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04c      	beq.n	8006528 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648e:	f7ff fda8 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006492:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006494:	f7ff fea1 	bl	80061da <LL_RCC_PLL_GetMainSource>
 8006498:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d005      	beq.n	80064ac <HAL_RCC_OscConfig+0x200>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d10e      	bne.n	80064c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e266      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fbf1 	bl	8005ca4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064c2:	e031      	b.n	8006528 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d019      	beq.n	8006500 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064cc:	f7ff fbba 	bl	8005c44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fd fdb4 	bl	800403c <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fd fdb0 	bl	800403c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e24d      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80064ea:	f7ff fbc9 	bl	8005c80 <LL_RCC_HSI_IsReady>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f1      	beq.n	80064d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fbd3 	bl	8005ca4 <LL_RCC_HSI_SetCalibTrimming>
 80064fe:	e013      	b.n	8006528 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006500:	f7ff fbaf 	bl	8005c62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fd fd9a 	bl	800403c <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fd fd96 	bl	800403c <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e233      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800651e:	f7ff fbaf 	bl	8005c80 <LL_RCC_HSI_IsReady>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f1      	bne.n	800650c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80a3 	beq.w	8006688 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d076      	beq.n	8006638 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d046      	beq.n	80065e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006556:	f7ff fc66 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006560:	f7ff fc3f 	bl	8005de2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006564:	f7fd fd6a 	bl	800403c <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800656c:	f7fd fd66 	bl	800403c <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e203      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800657e:	f7ff fc52 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f1      	beq.n	800656c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006588:	f7ff fc5f 	bl	8005e4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fd fd56 	bl	800403c <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006594:	f7fd fd52 	bl	800403c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e1ef      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065a6:	f7ff fc72 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f1      	beq.n	8006594 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fc7c 	bl	8005eb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80065ba:	f7ff fc23 	bl	8005e04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fd fd3d 	bl	800403c <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065c6:	f7fd fd39 	bl	800403c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e1d6      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065d8:	f7ff fc25 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f1      	bne.n	80065c6 <HAL_RCC_OscConfig+0x31a>
 80065e2:	e051      	b.n	8006688 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80065e4:	f7ff fbfd 	bl	8005de2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd fd28 	bl	800403c <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065ee:	e00c      	b.n	800660a <HAL_RCC_OscConfig+0x35e>
 80065f0:	20000050 	.word	0x20000050
 80065f4:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065f8:	f7fd fd20 	bl	800403c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e1bd      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800660a:	f7ff fc0c 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f1      	beq.n	80065f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006614:	f7ff fc2a 	bl	8005e6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800661a:	f7fd fd0f 	bl	800403c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e1ac      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800662c:	f7ff fc2f 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f1      	bne.n	800661a <HAL_RCC_OscConfig+0x36e>
 8006636:	e027      	b.n	8006688 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006638:	f7ff fc18 	bl	8005e6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fd fcfe 	bl	800403c <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006644:	f7fd fcfa 	bl	800403c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e197      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006656:	f7ff fc1a 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f1      	bne.n	8006644 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006660:	f7ff fbd0 	bl	8005e04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fd fcea 	bl	800403c <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800666c:	f7fd fce6 	bl	800403c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e183      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800667e:	f7ff fbd2 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f1      	bne.n	800666c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05b      	beq.n	800674c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006694:	4ba7      	ldr	r3, [pc, #668]	; (8006934 <HAL_RCC_OscConfig+0x688>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d114      	bne.n	80066ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066a0:	f7ff fa70 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a4:	f7fd fcca 	bl	800403c <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ac:	f7fd fcc6 	bl	800403c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e163      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066be:	4b9d      	ldr	r3, [pc, #628]	; (8006934 <HAL_RCC_OscConfig+0x688>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d102      	bne.n	80066d8 <HAL_RCC_OscConfig+0x42c>
 80066d2:	f7ff fb30 	bl	8005d36 <LL_RCC_LSE_Enable>
 80066d6:	e00c      	b.n	80066f2 <HAL_RCC_OscConfig+0x446>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b05      	cmp	r3, #5
 80066de:	d104      	bne.n	80066ea <HAL_RCC_OscConfig+0x43e>
 80066e0:	f7ff fb4b 	bl	8005d7a <LL_RCC_LSE_EnableBypass>
 80066e4:	f7ff fb27 	bl	8005d36 <LL_RCC_LSE_Enable>
 80066e8:	e003      	b.n	80066f2 <HAL_RCC_OscConfig+0x446>
 80066ea:	f7ff fb35 	bl	8005d58 <LL_RCC_LSE_Disable>
 80066ee:	f7ff fb55 	bl	8005d9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d014      	beq.n	8006724 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fa:	f7fd fc9f 	bl	800403c <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006700:	e00a      	b.n	8006718 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006702:	f7fd fc9b 	bl	800403c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e136      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006718:	f7ff fb51 	bl	8005dbe <LL_RCC_LSE_IsReady>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0ef      	beq.n	8006702 <HAL_RCC_OscConfig+0x456>
 8006722:	e013      	b.n	800674c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fd fc8a 	bl	800403c <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800672a:	e00a      	b.n	8006742 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672c:	f7fd fc86 	bl	800403c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e121      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006742:	f7ff fb3c 	bl	8005dbe <LL_RCC_LSE_IsReady>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d014      	beq.n	800678a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006760:	f7ff fab5 	bl	8005cce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fd fc6a 	bl	800403c <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800676c:	f7fd fc66 	bl	800403c <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e103      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800677e:	f7ff fac8 	bl	8005d12 <LL_RCC_HSI48_IsReady>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f1      	beq.n	800676c <HAL_RCC_OscConfig+0x4c0>
 8006788:	e013      	b.n	80067b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800678a:	f7ff fab1 	bl	8005cf0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678e:	f7fd fc55 	bl	800403c <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006796:	f7fd fc51 	bl	800403c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e0ee      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067a8:	f7ff fab3 	bl	8005d12 <LL_RCC_HSI48_IsReady>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f1      	bne.n	8006796 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80e4 	beq.w	8006984 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067bc:	f7ff fc11 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80067c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f040 80b4 	bne.w	800693c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0203 	and.w	r2, r3, #3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	429a      	cmp	r2, r3
 80067e0:	d123      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d11c      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d114      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d10d      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d05d      	beq.n	80068e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b0c      	cmp	r3, #12
 800682e:	d058      	beq.n	80068e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0a1      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006842:	f7ff fc84 	bl	800614e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006846:	f7fd fbf9 	bl	800403c <HAL_GetTick>
 800684a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684e:	f7fd fbf5 	bl	800403c <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e092      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ef      	bne.n	800684e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	4b30      	ldr	r3, [pc, #192]	; (8006938 <HAL_RCC_OscConfig+0x68c>)
 8006876:	4013      	ands	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006886:	0212      	lsls	r2, r2, #8
 8006888:	4311      	orrs	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800688e:	4311      	orrs	r1, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006894:	4311      	orrs	r1, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800689a:	430a      	orrs	r2, r1
 800689c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068a4:	f7ff fc44 	bl	8006130 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068b8:	f7fd fbc0 	bl	800403c <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fd fbbc 	bl	800403c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e059      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068e0:	e050      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d147      	bne.n	8006984 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068f4:	f7ff fc1c 	bl	8006130 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006908:	f7fd fb98 	bl	800403c <HAL_GetTick>
 800690c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006910:	f7fd fb94 	bl	800403c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e031      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ef      	beq.n	8006910 <HAL_RCC_OscConfig+0x664>
 8006930:	e028      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
 8006932:	bf00      	nop
 8006934:	58000400 	.word	0x58000400
 8006938:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0c      	cmp	r3, #12
 8006940:	d01e      	beq.n	8006980 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	f7ff fc04 	bl	800614e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fd fb79 	bl	800403c <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800694e:	f7fd fb75 	bl	800403c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e012      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ef      	bne.n	800694e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_RCC_OscConfig+0x6e4>)
 800697a:	4013      	ands	r3, r2
 800697c:	60cb      	str	r3, [r1, #12]
 800697e:	e001      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3734      	adds	r7, #52	; 0x34
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	eefefffc 	.word	0xeefefffc

08006994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e12d      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069a8:	4b98      	ldr	r3, [pc, #608]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d91b      	bls.n	80069ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b6:	4b95      	ldr	r3, [pc, #596]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 0207 	bic.w	r2, r3, #7
 80069be:	4993      	ldr	r1, [pc, #588]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c6:	f7fd fb39 	bl	800403c <HAL_GetTick>
 80069ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069ce:	f7fd fb35 	bl	800403c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e111      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e0:	4b8a      	ldr	r3, [pc, #552]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d1ef      	bne.n	80069ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fafb 	bl	8005ffa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a04:	f7fd fb1a 	bl	800403c <HAL_GetTick>
 8006a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a0c:	f7fd fb16 	bl	800403c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e0f2      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a1e:	f7ff fbe8 	bl	80061f2 <LL_RCC_IsActiveFlag_HPRE>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f1      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d016      	beq.n	8006a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff faf2 	bl	8006022 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a3e:	f7fd fafd 	bl	800403c <HAL_GetTick>
 8006a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a46:	f7fd faf9 	bl	800403c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0d5      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a58:	f7ff fbdd 	bl	8006216 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f1      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff faeb 	bl	800604e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a78:	f7fd fae0 	bl	800403c <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a80:	f7fd fadc 	bl	800403c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e0b8      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a92:	f7ff fbd3 	bl	800623c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f1      	beq.n	8006a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d016      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff fae5 	bl	800607c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ab2:	f7fd fac3 	bl	800403c <HAL_GetTick>
 8006ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006aba:	f7fd fabf 	bl	800403c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e09b      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006acc:	f7ff fbc9 	bl	8006262 <LL_RCC_IsActiveFlag_PPRE1>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f1      	beq.n	8006aba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d017      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fadb 	bl	80060a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aee:	f7fd faa5 	bl	800403c <HAL_GetTick>
 8006af2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006af6:	f7fd faa1 	bl	800403c <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e07d      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b08:	f7ff fbbd 	bl	8006286 <LL_RCC_IsActiveFlag_PPRE2>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f1      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d043      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b26:	f7ff f87b 	bl	8005c20 <LL_RCC_HSE_IsReady>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11e      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e067      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b3c:	f7ff fb16 	bl	800616c <LL_RCC_PLL_IsReady>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d113      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e05c      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b52:	f7ff f9e3 	bl	8005f1c <LL_RCC_MSI_IsReady>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e051      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b60:	f7ff f88e 	bl	8005c80 <LL_RCC_HSI_IsReady>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e04a      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fa21 	bl	8005fba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b78:	f7fd fa60 	bl	800403c <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b80:	f7fd fa5c 	bl	800403c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e036      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	f7ff fa24 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d1ec      	bne.n	8006b80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba6:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d21b      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f023 0207 	bic.w	r2, r3, #7
 8006bbc:	4913      	ldr	r1, [pc, #76]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fd fa3a 	bl	800403c <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bcc:	f7fd fa36 	bl	800403c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e012      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d1ef      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006bec:	f000 f880 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_RCC_ClockConfig+0x27c>)
 8006bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006bf6:	f7fd fa2d 	bl	8004054 <HAL_GetTickPrio>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd f9cf 	bl	8003fa0 <HAL_InitTick>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58004000 	.word	0x58004000
 8006c10:	20000050 	.word	0x20000050

08006c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1a:	f7ff f9e2 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006c1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c26:	f7ff f99e 	bl	8005f66 <LL_RCC_MSI_GetRange>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e04b      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d102      	bne.n	8006c48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c42:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e045      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c4e:	f7fe ffb7 	bl	8005bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e03a      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c5e:	4b23      	ldr	r3, [pc, #140]	; (8006cec <HAL_RCC_GetSysClockFreq+0xd8>)
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e037      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c64:	f7ff fab9 	bl	80061da <LL_RCC_PLL_GetMainSource>
 8006c68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x64>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d003      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0x6a>
 8006c76:	e00d      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c78:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c7a:	60bb      	str	r3, [r7, #8]
        break;
 8006c7c:	e015      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c7e:	f7fe ff9f 	bl	8005bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d102      	bne.n	8006c8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c88:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c8c:	e00d      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c8e:	4b17      	ldr	r3, [pc, #92]	; (8006cec <HAL_RCC_GetSysClockFreq+0xd8>)
 8006c90:	60bb      	str	r3, [r7, #8]
        break;
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c94:	f7ff f967 	bl	8005f66 <LL_RCC_MSI_GetRange>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	4a0f      	ldr	r2, [pc, #60]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca6:	60bb      	str	r3, [r7, #8]
        break;
 8006ca8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006caa:	f7ff fa71 	bl	8006190 <LL_RCC_PLL_GetN>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	fb03 f402 	mul.w	r4, r3, r2
 8006cb6:	f7ff fa84 	bl	80061c2 <LL_RCC_PLL_GetDivider>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	fbb4 f4f3 	udiv	r4, r4, r3
 8006cc4:	f7ff fa71 	bl	80061aa <LL_RCC_PLL_GetR>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	0f5b      	lsrs	r3, r3, #29
 8006ccc:	3301      	adds	r3, #1
 8006cce:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cd2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	0800e8e4 	.word	0x0800e8e4
 8006ce4:	00f42400 	.word	0x00f42400
 8006ce8:	003d0900 	.word	0x003d0900
 8006cec:	007a1200 	.word	0x007a1200

08006cf0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf0:	b598      	push	{r3, r4, r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006cf4:	f7ff ff8e 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f7ff f9e7 	bl	80060cc <LL_RCC_GetAHBPrescaler>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	4a03      	ldr	r2, [pc, #12]	; (8006d14 <HAL_RCC_GetHCLKFreq+0x24>)
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	bd98      	pop	{r3, r4, r7, pc}
 8006d14:	0800e884 	.word	0x0800e884

08006d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d18:	b598      	push	{r3, r4, r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d1c:	f7ff ffe8 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006d20:	4604      	mov	r4, r0
 8006d22:	f7ff f9ed 	bl	8006100 <LL_RCC_GetAPB1Prescaler>
 8006d26:	4603      	mov	r3, r0
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	bd98      	pop	{r3, r4, r7, pc}
 8006d40:	0800e8c4 	.word	0x0800e8c4

08006d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d44:	b598      	push	{r3, r4, r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d48:	f7ff ffd2 	bl	8006cf0 <HAL_RCC_GetHCLKFreq>
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f7ff f9e3 	bl	8006118 <LL_RCC_GetAPB2Prescaler>
 8006d52:	4603      	mov	r3, r0
 8006d54:	0adb      	lsrs	r3, r3, #11
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd98      	pop	{r3, r4, r7, pc}
 8006d6c:	0800e8c4 	.word	0x0800e8c4

08006d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2bb0      	cmp	r3, #176	; 0xb0
 8006d7c:	d903      	bls.n	8006d86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d7e:	4b15      	ldr	r3, [pc, #84]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e007      	b.n	8006d96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d96:	f7ff f9a5 	bl	80060e4 <LL_RCC_GetAHB4Prescaler>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	4a0d      	ldr	r2, [pc, #52]	; (8006dd8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	0c9c      	lsrs	r4, r3, #18
 8006dba:	f7fe fef3 	bl	8005ba4 <HAL_PWREx_GetVoltageRange>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f80c 	bl	8006de0 <RCC_SetFlashLatency>
 8006dc8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	0800e8e4 	.word	0x0800e8e4
 8006dd8:	0800e884 	.word	0x0800e884
 8006ddc:	431bde83 	.word	0x431bde83

08006de0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b093      	sub	sp, #76	; 0x4c
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006dea:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <RCC_SetFlashLatency+0xe8>)
 8006dec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006df6:	4a35      	ldr	r2, [pc, #212]	; (8006ecc <RCC_SetFlashLatency+0xec>)
 8006df8:	f107 031c 	add.w	r3, r7, #28
 8006dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006e02:	4b33      	ldr	r3, [pc, #204]	; (8006ed0 <RCC_SetFlashLatency+0xf0>)
 8006e04:	f107 040c 	add.w	r4, r7, #12
 8006e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e0e:	2300      	movs	r3, #0
 8006e10:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e18:	d11a      	bne.n	8006e50 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1e:	e013      	b.n	8006e48 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	3348      	adds	r3, #72	; 0x48
 8006e26:	443b      	add	r3, r7
 8006e28:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d807      	bhi.n	8006e42 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	3348      	adds	r3, #72	; 0x48
 8006e38:	443b      	add	r3, r7
 8006e3a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e40:	e020      	b.n	8006e84 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e44:	3301      	adds	r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d9e8      	bls.n	8006e20 <RCC_SetFlashLatency+0x40>
 8006e4e:	e019      	b.n	8006e84 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e50:	2300      	movs	r3, #0
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e54:	e013      	b.n	8006e7e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	3348      	adds	r3, #72	; 0x48
 8006e5c:	443b      	add	r3, r7
 8006e5e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d807      	bhi.n	8006e78 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	3348      	adds	r3, #72	; 0x48
 8006e6e:	443b      	add	r3, r7
 8006e70:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e76:	e005      	b.n	8006e84 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d9e8      	bls.n	8006e56 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006e84:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <RCC_SetFlashLatency+0xf4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f023 0207 	bic.w	r2, r3, #7
 8006e8c:	4911      	ldr	r1, [pc, #68]	; (8006ed4 <RCC_SetFlashLatency+0xf4>)
 8006e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e94:	f7fd f8d2 	bl	800403c <HAL_GetTick>
 8006e98:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e9a:	e008      	b.n	8006eae <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e9c:	f7fd f8ce 	bl	800403c <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e007      	b.n	8006ebe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <RCC_SetFlashLatency+0xf4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d1ef      	bne.n	8006e9c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	374c      	adds	r7, #76	; 0x4c
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	0800e758 	.word	0x0800e758
 8006ecc:	0800e768 	.word	0x0800e768
 8006ed0:	0800e774 	.word	0x0800e774
 8006ed4:	58004000 	.word	0x58004000

08006ed8 <LL_RCC_LSE_IsEnabled>:
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <LL_RCC_LSE_IsEnabled+0x18>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <LL_RCC_LSE_IsEnabled+0x1a>
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_RCC_LSE_IsReady>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d101      	bne.n	8006f14 <LL_RCC_LSE_IsReady+0x18>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <LL_RCC_LSE_IsReady+0x1a>
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_RCC_SetRFWKPClockSource>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <LL_RCC_SetSMPSClockSource>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_RCC_SetSMPSPrescaler>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <LL_RCC_SetUSARTClockSource>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fac:	f023 0203 	bic.w	r2, r3, #3
 8006fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <LL_RCC_SetLPUARTClockSource>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <LL_RCC_SetI2CClockSource>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800700c:	43db      	mvns	r3, r3
 800700e:	401a      	ands	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <LL_RCC_SetLPTIMClockSource>:
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	43db      	mvns	r3, r3
 8007046:	401a      	ands	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <LL_RCC_SetSAIClockSource>:
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800706a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <LL_RCC_SetRNGClockSource>:
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <LL_RCC_SetCLK48ClockSource>:
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80070c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <LL_RCC_SetUSBClockSource>:
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff ffe3 	bl	80070ba <LL_RCC_SetCLK48ClockSource>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <LL_RCC_SetADCClockSource>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <LL_RCC_SetRTCClockSource>:
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800713c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_RCC_GetRTCClockSource>:
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <LL_RCC_ForceBackupDomainReset>:
{
 800716e:	b480      	push	{r7}
 8007170:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <LL_RCC_PLLSAI1_Enable>:
{
 80071b2:	b480      	push	{r7}
 80071b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c4:	6013      	str	r3, [r2, #0]
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <LL_RCC_PLLSAI1_Disable>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071e2:	6013      	str	r3, [r2, #0]
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <LL_RCC_PLLSAI1_IsReady>:
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007200:	d101      	bne.n	8007206 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800721a:	2300      	movs	r3, #0
 800721c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800721e:	2300      	movs	r3, #0
 8007220:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d034      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007236:	d021      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007238:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800723c:	d81b      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800723e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007242:	d01d      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007248:	d815      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800724e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007252:	d110      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007262:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007264:	e00d      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f947 	bl	80074fe <RCCEx_PLLSAI1_ConfigNP>
 8007270:	4603      	mov	r3, r0
 8007272:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	77fb      	strb	r3, [r7, #31]
        break;
 800727a:	e002      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800727c:	bf00      	nop
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007282:	7ffb      	ldrb	r3, [r7, #31]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff fee8 	bl	8007062 <LL_RCC_SetSAIClockSource>
 8007292:	e001      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7ffb      	ldrb	r3, [r7, #31]
 8007296:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d046      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80072a4:	f7ff ff56 	bl	8007154 <LL_RCC_GetRTCClockSource>
 80072a8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d03c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072b4:	f7fe fc66 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff30 	bl	8007128 <LL_RCC_SetRTCClockSource>
 80072c8:	e02e      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80072ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80072d4:	f7ff ff4b 	bl	800716e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80072d8:	f7ff ff5a 	bl	8007190 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80072ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80072f4:	f7ff fdf0 	bl	8006ed8 <LL_RCC_LSE_IsEnabled>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d114      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072fe:	f7fc fe9d 	bl	800403c <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007304:	e00b      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007306:	f7fc fe99 	bl	800403c <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d902      	bls.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	77fb      	strb	r3, [r7, #31]
              break;
 800731c:	e004      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800731e:	f7ff fded 	bl	8006efc <LL_RCC_LSE_IsReady>
 8007322:	4603      	mov	r3, r0
 8007324:	2b01      	cmp	r3, #1
 8007326:	d1ee      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007328:	7ffb      	ldrb	r3, [r7, #31]
 800732a:	77bb      	strb	r3, [r7, #30]
 800732c:	e001      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	7ffb      	ldrb	r3, [r7, #31]
 8007330:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fe2a 	bl	8006f9c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fe35 	bl	8006fc8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fe5d 	bl	800702e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fe52 	bl	800702e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fe2a 	bl	8006ff4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fe1f 	bl	8006ff4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d022      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fe8d 	bl	80070e6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d4:	d107      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ee:	d10b      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 f8dd 	bl	80075b4 <RCCEx_PLLSAI1_ConfigNQ>
 80073fa:	4603      	mov	r3, r0
 80073fc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80073fe:	7ffb      	ldrb	r3, [r7, #31]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007404:	7ffb      	ldrb	r3, [r7, #31]
 8007406:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007410:	2b00      	cmp	r3, #0
 8007412:	d02b      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741c:	d008      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007426:	d003      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff fe2a 	bl	800708e <LL_RCC_SetRNGClockSource>
 800743a:	e00a      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	2000      	movs	r0, #0
 8007448:	f7ff fe21 	bl	800708e <LL_RCC_SetRNGClockSource>
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fe34 	bl	80070ba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800745a:	d107      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800746a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007474:	2b00      	cmp	r3, #0
 8007476:	d022      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fe3d 	bl	80070fc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d107      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800748c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800749a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a4:	d10b      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f8dd 	bl	800766a <RCCEx_PLLSAI1_ConfigNR>
 80074b0:	4603      	mov	r3, r0
 80074b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80074b4:	7ffb      	ldrb	r3, [r7, #31]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80074ba:	7ffb      	ldrb	r3, [r7, #31]
 80074bc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fd26 	bl	8006f20 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fd45 	bl	8006f74 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fd2c 	bl	8006f4c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80074f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800750a:	f7ff fe61 	bl	80071d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800750e:	f7fc fd95 	bl	800403c <HAL_GetTick>
 8007512:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007514:	e009      	b.n	800752a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007516:	f7fc fd91 	bl	800403c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d902      	bls.n	800752a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	73fb      	strb	r3, [r7, #15]
      break;
 8007528:	e004      	b.n	8007534 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800752a:	f7ff fe60 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f0      	bne.n	8007516 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d137      	bne.n	80075aa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800753a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800754e:	4313      	orrs	r3, r2
 8007550:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007564:	4313      	orrs	r3, r2
 8007566:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007568:	f7ff fe23 	bl	80071b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756c:	f7fc fd66 	bl	800403c <HAL_GetTick>
 8007570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007572:	e009      	b.n	8007588 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007574:	f7fc fd62 	bl	800403c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d902      	bls.n	8007588 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
        break;
 8007586:	e004      	b.n	8007592 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007588:	f7ff fe31 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d1f0      	bne.n	8007574 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a6:	4313      	orrs	r3, r2
 80075a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80075c0:	f7ff fe06 	bl	80071d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075c4:	f7fc fd3a 	bl	800403c <HAL_GetTick>
 80075c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075ca:	e009      	b.n	80075e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075cc:	f7fc fd36 	bl	800403c <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d902      	bls.n	80075e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	73fb      	strb	r3, [r7, #15]
      break;
 80075de:	e004      	b.n	80075ea <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075e0:	f7ff fe05 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d137      	bne.n	8007660 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007604:	4313      	orrs	r3, r2
 8007606:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800761a:	4313      	orrs	r3, r2
 800761c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800761e:	f7ff fdc8 	bl	80071b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007622:	f7fc fd0b 	bl	800403c <HAL_GetTick>
 8007626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007628:	e009      	b.n	800763e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800762a:	f7fc fd07 	bl	800403c <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d902      	bls.n	800763e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	73fb      	strb	r3, [r7, #15]
        break;
 800763c:	e004      	b.n	8007648 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800763e:	f7ff fdd6 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d1f0      	bne.n	800762a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800764e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800765c:	4313      	orrs	r3, r2
 800765e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007676:	f7ff fdab 	bl	80071d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800767a:	f7fc fcdf 	bl	800403c <HAL_GetTick>
 800767e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007680:	e009      	b.n	8007696 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007682:	f7fc fcdb 	bl	800403c <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d902      	bls.n	8007696 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e004      	b.n	80076a0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007696:	f7ff fdaa 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d137      	bne.n	8007716 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ba:	4313      	orrs	r3, r2
 80076bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80076be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076d4:	f7ff fd6d 	bl	80071b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d8:	f7fc fcb0 	bl	800403c <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076de:	e009      	b.n	80076f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076e0:	f7fc fcac 	bl	800403c <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
        break;
 80076f2:	e004      	b.n	80076fe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076f4:	f7ff fd7b 	bl	80071ee <LL_RCC_PLLSAI1_IsReady>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d1f0      	bne.n	80076e0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d108      	bne.n	8007716 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007712:	4313      	orrs	r3, r2
 8007714:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <LL_RCC_GetUSARTClockSource>:
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4013      	ands	r3, r2
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <LL_RCC_GetLPUARTClockSource>:
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4013      	ands	r3, r2
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e042      	b.n	80077f8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fc f9c7 	bl	8003b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	; 0x24
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc4a 	bl	800803c <UART_SetConfig>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e022      	b.n	80077f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fe66 	bl	800848c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 feed 	bl	80085d0 <UART_CheckIdleState>
 80077f6:	4603      	mov	r3, r0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007816:	2b20      	cmp	r3, #32
 8007818:	d17b      	bne.n	8007912 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Transmit+0x26>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e074      	b.n	8007914 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2221      	movs	r2, #33	; 0x21
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800783a:	f7fc fbff 	bl	800403c <HAL_GetTick>
 800783e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007858:	d108      	bne.n	800786c <HAL_UART_Transmit+0x6c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	61bb      	str	r3, [r7, #24]
 800786a:	e003      	b.n	8007874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007874:	e030      	b.n	80078d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2200      	movs	r2, #0
 800787e:	2180      	movs	r1, #128	; 0x80
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 ff4f 	bl	8008724 <UART_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e03d      	b.n	8007914 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	3302      	adds	r3, #2
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	e007      	b.n	80078c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	781a      	ldrb	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1c8      	bne.n	8007876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2200      	movs	r2, #0
 80078ec:	2140      	movs	r1, #64	; 0x40
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 ff18 	bl	8008724 <UART_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e006      	b.n	8007914 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007930:	2b20      	cmp	r3, #32
 8007932:	d137      	bne.n	80079a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <HAL_UART_Receive_IT+0x24>
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e030      	b.n	80079a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <HAL_UART_Receive_IT+0x94>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d01f      	beq.n	8007994 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	613b      	str	r3, [r7, #16]
   return(result);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	623b      	str	r3, [r7, #32]
 8007982:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	61bb      	str	r3, [r7, #24]
   return(result);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	461a      	mov	r2, r3
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 ff2a 	bl	80087f4 <UART_Start_Receive_IT>
 80079a0:	4603      	mov	r3, r0
 80079a2:	e000      	b.n	80079a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40008000 	.word	0x40008000

080079b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b0ba      	sub	sp, #232	; 0xe8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079de:	f640 030f 	movw	r3, #2063	; 0x80f
 80079e2:	4013      	ands	r3, r2
 80079e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11b      	bne.n	8007a28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f4:	f003 0320 	and.w	r3, r3, #32
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d015      	beq.n	8007a28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 82e3 	beq.w	8007fe4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      }
      return;
 8007a26:	e2dd      	b.n	8007fe4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8123 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a36:	4b8d      	ldr	r3, [pc, #564]	; (8007c6c <HAL_UART_IRQHandler+0x2b8>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a42:	4b8b      	ldr	r3, [pc, #556]	; (8007c70 <HAL_UART_IRQHandler+0x2bc>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8116 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <HAL_UART_IRQHandler+0xc8>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a72:	f043 0201 	orr.w	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d011      	beq.n	8007aac <HAL_UART_IRQHandler+0xf8>
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <HAL_UART_IRQHandler+0x128>
 8007ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007af4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007af8:	4b5c      	ldr	r3, [pc, #368]	; (8007c6c <HAL_UART_IRQHandler+0x2b8>)
 8007afa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2208      	movs	r2, #8
 8007b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0e:	f043 0208 	orr.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <HAL_UART_IRQHandler+0x196>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b40:	f043 0220 	orr.w	r2, r3, #32
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8249 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d013      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d005      	beq.n	8007bae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d054      	beq.n	8007c58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 ff42 	bl	8008a38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d146      	bne.n	8007c50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d9      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d017      	beq.n	8007c48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c1e:	4a15      	ldr	r2, [pc, #84]	; (8007c74 <HAL_UART_IRQHandler+0x2c0>)
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fc fbcb 	bl	80043c4 <HAL_DMA_Abort_IT>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d019      	beq.n	8007c68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007c42:	4610      	mov	r0, r2
 8007c44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c46:	e00f      	b.n	8007c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9e1 	bl	8008010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4e:	e00b      	b.n	8007c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f9dd 	bl	8008010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c56:	e007      	b.n	8007c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f9d9 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007c66:	e1bf      	b.n	8007fe8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	bf00      	nop
    return;
 8007c6a:	e1bd      	b.n	8007fe8 <HAL_UART_IRQHandler+0x634>
 8007c6c:	10000001 	.word	0x10000001
 8007c70:	04000120 	.word	0x04000120
 8007c74:	08008b05 	.word	0x08008b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 8153 	bne.w	8007f28 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 814c 	beq.w	8007f28 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8145 	beq.w	8007f28 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	f040 80bb 	bne.w	8007e2c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 818f 	beq.w	8007fec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	f080 8187 	bcs.w	8007fec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 8087 	bne.w	8007e0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1da      	bne.n	8007cfc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d58:	f023 0301 	bic.w	r3, r3, #1
 8007d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3308      	adds	r3, #8
 8007d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e1      	bne.n	8007d46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e3      	bne.n	8007d82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd8:	f023 0310 	bic.w	r3, r3, #16
 8007ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e4      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fc fa7e 	bl	8004306 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8fd 	bl	8008024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e2a:	e0df      	b.n	8007fec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80d1 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007e4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80cc 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e4      	bne.n	8007e58 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e1      	bne.n	8007e8e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69b9      	ldr	r1, [r7, #24]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f87f 	bl	8008024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f26:	e063      	b.n	8007ff0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <HAL_UART_IRQHandler+0x59e>
 8007f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fb38 	bl	80095c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f50:	e051      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d014      	beq.n	8007f88 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d03a      	beq.n	8007ff4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
    }
    return;
 8007f86:	e035      	b.n	8007ff4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x5f4>
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fdc5 	bl	8008b30 <UART_EndTransmit_IT>
    return;
 8007fa6:	e026      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d009      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x614>
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fb11 	bl	80095e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fc6:	e016      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d010      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x642>
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0c      	bge.n	8007ff6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 faf9 	bl	80095d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fe2:	e008      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
      return;
 8007fe4:	bf00      	nop
 8007fe6:	e006      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
    return;
 8007fe8:	bf00      	nop
 8007fea:	e004      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
      return;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <HAL_UART_IRQHandler+0x642>
    return;
 8007ff4:	bf00      	nop
  }
}
 8007ff6:	37e8      	adds	r7, #232	; 0xe8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800803c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008040:	b08c      	sub	sp, #48	; 0x30
 8008042:	af00      	add	r7, sp, #0
 8008044:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	431a      	orrs	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	431a      	orrs	r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	4313      	orrs	r3, r2
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4baf      	ldr	r3, [pc, #700]	; (8008328 <UART_SetConfig+0x2ec>)
 800806c:	4013      	ands	r3, r2
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008074:	430b      	orrs	r3, r1
 8008076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4aa4      	ldr	r2, [pc, #656]	; (800832c <UART_SetConfig+0x2f0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a4:	4313      	orrs	r3, r2
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080bc:	430b      	orrs	r3, r1
 80080be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	f023 010f 	bic.w	r1, r3, #15
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a95      	ldr	r2, [pc, #596]	; (8008330 <UART_SetConfig+0x2f4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d125      	bne.n	800812c <UART_SetConfig+0xf0>
 80080e0:	2003      	movs	r0, #3
 80080e2:	f7ff fb1d 	bl	8007720 <LL_RCC_GetUSARTClockSource>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d81b      	bhi.n	8008124 <UART_SetConfig+0xe8>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0xb8>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	08008115 	.word	0x08008115
 80080fc:	0800810d 	.word	0x0800810d
 8008100:	0800811d 	.word	0x0800811d
 8008104:	2301      	movs	r3, #1
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810a:	e042      	b.n	8008192 <UART_SetConfig+0x156>
 800810c:	2302      	movs	r3, #2
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008112:	e03e      	b.n	8008192 <UART_SetConfig+0x156>
 8008114:	2304      	movs	r3, #4
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811a:	e03a      	b.n	8008192 <UART_SetConfig+0x156>
 800811c:	2308      	movs	r3, #8
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008122:	e036      	b.n	8008192 <UART_SetConfig+0x156>
 8008124:	2310      	movs	r3, #16
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e032      	b.n	8008192 <UART_SetConfig+0x156>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a7e      	ldr	r2, [pc, #504]	; (800832c <UART_SetConfig+0x2f0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d12a      	bne.n	800818c <UART_SetConfig+0x150>
 8008136:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800813a:	f7ff fb01 	bl	8007740 <LL_RCC_GetLPUARTClockSource>
 800813e:	4603      	mov	r3, r0
 8008140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008144:	d01a      	beq.n	800817c <UART_SetConfig+0x140>
 8008146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800814a:	d81b      	bhi.n	8008184 <UART_SetConfig+0x148>
 800814c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008150:	d00c      	beq.n	800816c <UART_SetConfig+0x130>
 8008152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008156:	d815      	bhi.n	8008184 <UART_SetConfig+0x148>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <UART_SetConfig+0x128>
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008160:	d008      	beq.n	8008174 <UART_SetConfig+0x138>
 8008162:	e00f      	b.n	8008184 <UART_SetConfig+0x148>
 8008164:	2300      	movs	r3, #0
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816a:	e012      	b.n	8008192 <UART_SetConfig+0x156>
 800816c:	2302      	movs	r3, #2
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008172:	e00e      	b.n	8008192 <UART_SetConfig+0x156>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817a:	e00a      	b.n	8008192 <UART_SetConfig+0x156>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008182:	e006      	b.n	8008192 <UART_SetConfig+0x156>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818a:	e002      	b.n	8008192 <UART_SetConfig+0x156>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a65      	ldr	r2, [pc, #404]	; (800832c <UART_SetConfig+0x2f0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	f040 8097 	bne.w	80082cc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800819e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d823      	bhi.n	80081ee <UART_SetConfig+0x1b2>
 80081a6:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <UART_SetConfig+0x170>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081ef 	.word	0x080081ef
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081ef 	.word	0x080081ef
 80081bc:	080081df 	.word	0x080081df
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	080081ef 	.word	0x080081ef
 80081c8:	080081ef 	.word	0x080081ef
 80081cc:	080081e7 	.word	0x080081e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7fe fda2 	bl	8006d18 <HAL_RCC_GetPCLK1Freq>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081d6:	e010      	b.n	80081fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d8:	4b56      	ldr	r3, [pc, #344]	; (8008334 <UART_SetConfig+0x2f8>)
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081dc:	e00d      	b.n	80081fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081de:	f7fe fd19 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081e4:	e009      	b.n	80081fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081ec:	e005      	b.n	80081fa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 812b 	beq.w	8008458 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	4a4c      	ldr	r2, [pc, #304]	; (8008338 <UART_SetConfig+0x2fc>)
 8008208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820c:	461a      	mov	r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	fbb3 f3f2 	udiv	r3, r3, r2
 8008214:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	4413      	add	r3, r2
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	429a      	cmp	r2, r3
 8008224:	d305      	bcc.n	8008232 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	429a      	cmp	r2, r3
 8008230:	d903      	bls.n	800823a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008238:	e10e      	b.n	8008458 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2200      	movs	r2, #0
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	60fa      	str	r2, [r7, #12]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	4a3c      	ldr	r2, [pc, #240]	; (8008338 <UART_SetConfig+0x2fc>)
 8008248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800824c:	b29b      	uxth	r3, r3
 800824e:	2200      	movs	r2, #0
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800825c:	f7f8 fcec 	bl	8000c38 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4610      	mov	r0, r2
 8008266:	4619      	mov	r1, r3
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	020b      	lsls	r3, r1, #8
 8008272:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008276:	0202      	lsls	r2, r0, #8
 8008278:	6979      	ldr	r1, [r7, #20]
 800827a:	6849      	ldr	r1, [r1, #4]
 800827c:	0849      	lsrs	r1, r1, #1
 800827e:	2000      	movs	r0, #0
 8008280:	460c      	mov	r4, r1
 8008282:	4605      	mov	r5, r0
 8008284:	eb12 0804 	adds.w	r8, r2, r4
 8008288:	eb43 0905 	adc.w	r9, r3, r5
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	469a      	mov	sl, r3
 8008294:	4693      	mov	fp, r2
 8008296:	4652      	mov	r2, sl
 8008298:	465b      	mov	r3, fp
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f8 fccb 	bl	8000c38 <__aeabi_uldivmod>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4613      	mov	r3, r2
 80082a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b0:	d308      	bcc.n	80082c4 <UART_SetConfig+0x288>
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b8:	d204      	bcs.n	80082c4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	60da      	str	r2, [r3, #12]
 80082c2:	e0c9      	b.n	8008458 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082ca:	e0c5      	b.n	8008458 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d4:	d16d      	bne.n	80083b2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80082d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b07      	cmp	r3, #7
 80082de:	d82d      	bhi.n	800833c <UART_SetConfig+0x300>
 80082e0:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x2ac>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	08008309 	.word	0x08008309
 80082ec:	08008311 	.word	0x08008311
 80082f0:	0800833d 	.word	0x0800833d
 80082f4:	08008317 	.word	0x08008317
 80082f8:	0800833d 	.word	0x0800833d
 80082fc:	0800833d 	.word	0x0800833d
 8008300:	0800833d 	.word	0x0800833d
 8008304:	0800831f 	.word	0x0800831f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008308:	f7fe fd1c 	bl	8006d44 <HAL_RCC_GetPCLK2Freq>
 800830c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800830e:	e01b      	b.n	8008348 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008310:	4b08      	ldr	r3, [pc, #32]	; (8008334 <UART_SetConfig+0x2f8>)
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008314:	e018      	b.n	8008348 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008316:	f7fe fc7d 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800831c:	e014      	b.n	8008348 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800831e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008324:	e010      	b.n	8008348 <UART_SetConfig+0x30c>
 8008326:	bf00      	nop
 8008328:	cfff69f3 	.word	0xcfff69f3
 800832c:	40008000 	.word	0x40008000
 8008330:	40013800 	.word	0x40013800
 8008334:	00f42400 	.word	0x00f42400
 8008338:	0800e924 	.word	0x0800e924
      default:
        pclk = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008346:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8084 	beq.w	8008458 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	4a4b      	ldr	r2, [pc, #300]	; (8008484 <UART_SetConfig+0x448>)
 8008356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800835a:	461a      	mov	r2, r3
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008362:	005a      	lsls	r2, r3, #1
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	085b      	lsrs	r3, r3, #1
 800836a:	441a      	add	r2, r3
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d916      	bls.n	80083aa <UART_SetConfig+0x36e>
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008382:	d212      	bcs.n	80083aa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f023 030f 	bic.w	r3, r3, #15
 800838c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	085b      	lsrs	r3, r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	b29a      	uxth	r2, r3
 800839a:	8bfb      	ldrh	r3, [r7, #30]
 800839c:	4313      	orrs	r3, r2
 800839e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	8bfa      	ldrh	r2, [r7, #30]
 80083a6:	60da      	str	r2, [r3, #12]
 80083a8:	e056      	b.n	8008458 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083b0:	e052      	b.n	8008458 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b07      	cmp	r3, #7
 80083ba:	d822      	bhi.n	8008402 <UART_SetConfig+0x3c6>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0x388>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083e5 	.word	0x080083e5
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	08008403 	.word	0x08008403
 80083d0:	080083f3 	.word	0x080083f3
 80083d4:	08008403 	.word	0x08008403
 80083d8:	08008403 	.word	0x08008403
 80083dc:	08008403 	.word	0x08008403
 80083e0:	080083fb 	.word	0x080083fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083e4:	f7fe fcae 	bl	8006d44 <HAL_RCC_GetPCLK2Freq>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ea:	e010      	b.n	800840e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083ec:	4b26      	ldr	r3, [pc, #152]	; (8008488 <UART_SetConfig+0x44c>)
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f0:	e00d      	b.n	800840e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083f2:	f7fe fc0f 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f8:	e009      	b.n	800840e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008400:	e005      	b.n	800840e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800840c:	bf00      	nop
    }

    if (pclk != 0U)
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	2b00      	cmp	r3, #0
 8008412:	d021      	beq.n	8008458 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <UART_SetConfig+0x448>)
 800841a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841e:	461a      	mov	r2, r3
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	fbb3 f2f2 	udiv	r2, r3, r2
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	441a      	add	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	fbb2 f3f3 	udiv	r3, r2, r3
 8008436:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	2b0f      	cmp	r3, #15
 800843c:	d909      	bls.n	8008452 <UART_SetConfig+0x416>
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008444:	d205      	bcs.n	8008452 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	b29a      	uxth	r2, r3
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	e002      	b.n	8008458 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2201      	movs	r2, #1
 800845c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2201      	movs	r2, #1
 8008464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008474:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	; 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008482:	bf00      	nop
 8008484:	0800e924 	.word	0x0800e924
 8008488:	00f42400 	.word	0x00f42400

0800848c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858a:	d10a      	bne.n	80085a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b098      	sub	sp, #96	; 0x60
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085e0:	f7fb fd2c 	bl	800403c <HAL_GetTick>
 80085e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d12f      	bne.n	8008654 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fc:	2200      	movs	r2, #0
 80085fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f88e 	bl	8008724 <UART_WaitOnFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d022      	beq.n	8008654 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008622:	653b      	str	r3, [r7, #80]	; 0x50
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800862c:	647b      	str	r3, [r7, #68]	; 0x44
 800862e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e063      	b.n	800871c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b04      	cmp	r3, #4
 8008660:	d149      	bne.n	80086f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800866a:	2200      	movs	r2, #0
 800866c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f857 	bl	8008724 <UART_WaitOnFlagUntilTimeout>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d03c      	beq.n	80086f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	623b      	str	r3, [r7, #32]
   return(result);
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869a:	633b      	str	r3, [r7, #48]	; 0x30
 800869c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ce:	61fa      	str	r2, [r7, #28]
 80086d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	69b9      	ldr	r1, [r7, #24]
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	617b      	str	r3, [r7, #20]
   return(result);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e012      	b.n	800871c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3758      	adds	r7, #88	; 0x58
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008734:	e049      	b.n	80087ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d045      	beq.n	80087ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873e:	f7fb fc7d 	bl	800403c <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	429a      	cmp	r2, r3
 800874c:	d302      	bcc.n	8008754 <UART_WaitOnFlagUntilTimeout+0x30>
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e048      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	d031      	beq.n	80087ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b08      	cmp	r3, #8
 8008772:	d110      	bne.n	8008796 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2208      	movs	r2, #8
 800877a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f95b 	bl	8008a38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2208      	movs	r2, #8
 8008786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e029      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a4:	d111      	bne.n	80087ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f941 	bl	8008a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e00f      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4013      	ands	r3, r2
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	bf0c      	ite	eq
 80087da:	2301      	moveq	r3, #1
 80087dc:	2300      	movne	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d0a6      	beq.n	8008736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b0a3      	sub	sp, #140	; 0x8c
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	88fa      	ldrh	r2, [r7, #6]
 800880c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008826:	d10e      	bne.n	8008846 <UART_Start_Receive_IT+0x52>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <UART_Start_Receive_IT+0x48>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800883a:	e02d      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	22ff      	movs	r2, #255	; 0xff
 8008840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008844:	e028      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <UART_Start_Receive_IT+0x76>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d104      	bne.n	8008860 <UART_Start_Receive_IT+0x6c>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800885e:	e01b      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	227f      	movs	r2, #127	; 0x7f
 8008864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008868:	e016      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008872:	d10d      	bne.n	8008890 <UART_Start_Receive_IT+0x9c>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <UART_Start_Receive_IT+0x92>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	227f      	movs	r2, #127	; 0x7f
 8008880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008884:	e008      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	223f      	movs	r2, #63	; 0x3f
 800888a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800888e:	e003      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2222      	movs	r2, #34	; 0x22
 80088a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088cc:	673a      	str	r2, [r7, #112]	; 0x70
 80088ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80088d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80088da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e3      	bne.n	80088a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e8:	d14f      	bne.n	800898a <UART_Start_Receive_IT+0x196>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d349      	bcc.n	800898a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d107      	bne.n	8008910 <UART_Start_Receive_IT+0x11c>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a47      	ldr	r2, [pc, #284]	; (8008a28 <UART_Start_Receive_IT+0x234>)
 800890c:	675a      	str	r2, [r3, #116]	; 0x74
 800890e:	e002      	b.n	8008916 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a46      	ldr	r2, [pc, #280]	; (8008a2c <UART_Start_Receive_IT+0x238>)
 8008914:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01a      	beq.n	8008954 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008942:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800894e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e4      	bne.n	800891e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008974:	64ba      	str	r2, [r7, #72]	; 0x48
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800897a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e5      	bne.n	8008954 <UART_Start_Receive_IT+0x160>
 8008988:	e046      	b.n	8008a18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008992:	d107      	bne.n	80089a4 <UART_Start_Receive_IT+0x1b0>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4a24      	ldr	r2, [pc, #144]	; (8008a30 <UART_Start_Receive_IT+0x23c>)
 80089a0:	675a      	str	r2, [r3, #116]	; 0x74
 80089a2:	e002      	b.n	80089aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a23      	ldr	r2, [pc, #140]	; (8008a34 <UART_Start_Receive_IT+0x240>)
 80089a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d019      	beq.n	80089e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80089c6:	677b      	str	r3, [r7, #116]	; 0x74
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
 80089d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e6      	bne.n	80089b2 <UART_Start_Receive_IT+0x1be>
 80089e4:	e018      	b.n	8008a18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	613b      	str	r3, [r7, #16]
   return(result);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f043 0320 	orr.w	r3, r3, #32
 80089fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a04:	623b      	str	r3, [r7, #32]
 8008a06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	69f9      	ldr	r1, [r7, #28]
 8008a0a:	6a3a      	ldr	r2, [r7, #32]
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e6      	bne.n	80089e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	378c      	adds	r7, #140	; 0x8c
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	08009259 	.word	0x08009259
 8008a2c:	08008ef9 	.word	0x08008ef9
 8008a30:	08008d41 	.word	0x08008d41
 8008a34:	08008b89 	.word	0x08008b89

08008a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b095      	sub	sp, #84	; 0x54
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e3      	bne.n	8008a72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d118      	bne.n	8008ae4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f023 0310 	bic.w	r3, r3, #16
 8008ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6979      	ldr	r1, [r7, #20]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008af8:	bf00      	nop
 8008afa:	3754      	adds	r7, #84	; 0x54
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff fa74 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4c:	61fb      	str	r3, [r7, #28]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6979      	ldr	r1, [r7, #20]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	613b      	str	r3, [r7, #16]
   return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e6      	bne.n	8008b38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fa3f 	bl	8007ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b7e:	bf00      	nop
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b09c      	sub	sp, #112	; 0x70
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba0:	2b22      	cmp	r3, #34	; 0x22
 8008ba2:	f040 80be 	bne.w	8008d22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bb4:	b2d9      	uxtb	r1, r3
 8008bb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc0:	400a      	ands	r2, r1
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f040 80a1 	bne.w	8008d32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e6      	bne.n	8008bf0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3308      	adds	r3, #8
 8008c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	667b      	str	r3, [r7, #100]	; 0x64
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c42:	647a      	str	r2, [r7, #68]	; 0x44
 8008c44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e5      	bne.n	8008c22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a33      	ldr	r2, [pc, #204]	; (8008d3c <UART_RxISR_8BIT+0x1b4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d01f      	beq.n	8008cb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d018      	beq.n	8008cb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c96:	663b      	str	r3, [r7, #96]	; 0x60
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e6      	bne.n	8008c82 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d12e      	bne.n	8008d1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0310 	bic.w	r3, r3, #16
 8008cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	69b9      	ldr	r1, [r7, #24]
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	617b      	str	r3, [r7, #20]
   return(result);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e6      	bne.n	8008cc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d103      	bne.n	8008d0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2210      	movs	r2, #16
 8008d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff f986 	bl	8008024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d18:	e00b      	b.n	8008d32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7f9 fc8c 	bl	8002638 <HAL_UART_RxCpltCallback>
}
 8008d20:	e007      	b.n	8008d32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699a      	ldr	r2, [r3, #24]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0208 	orr.w	r2, r2, #8
 8008d30:	619a      	str	r2, [r3, #24]
}
 8008d32:	bf00      	nop
 8008d34:	3770      	adds	r7, #112	; 0x70
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40008000 	.word	0x40008000

08008d40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b09c      	sub	sp, #112	; 0x70
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d58:	2b22      	cmp	r3, #34	; 0x22
 8008d5a:	f040 80be 	bne.w	8008eda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008d72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008d76:	4013      	ands	r3, r2
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d82:	1c9a      	adds	r2, r3, #2
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 80a1 	bne.w	8008eea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8008dc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e6      	bne.n	8008da8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	663b      	str	r3, [r7, #96]	; 0x60
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dfa:	643a      	str	r2, [r7, #64]	; 0x40
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a33      	ldr	r2, [pc, #204]	; (8008ef4 <UART_RxISR_16BIT+0x1b4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d01f      	beq.n	8008e6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d018      	beq.n	8008e6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d12e      	bne.n	8008ed2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f023 0310 	bic.w	r3, r3, #16
 8008e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e98:	61bb      	str	r3, [r7, #24]
 8008e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	6979      	ldr	r1, [r7, #20]
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	e841 2300 	strex	r3, r2, [r1]
 8008ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e6      	bne.n	8008e7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b10      	cmp	r3, #16
 8008eb8:	d103      	bne.n	8008ec2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff f8aa 	bl	8008024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ed0:	e00b      	b.n	8008eea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f9 fbb0 	bl	8002638 <HAL_UART_RxCpltCallback>
}
 8008ed8:	e007      	b.n	8008eea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0208 	orr.w	r2, r2, #8
 8008ee8:	619a      	str	r2, [r3, #24]
}
 8008eea:	bf00      	nop
 8008eec:	3770      	adds	r7, #112	; 0x70
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40008000 	.word	0x40008000

08008ef8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b0ac      	sub	sp, #176	; 0xb0
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f2e:	2b22      	cmp	r3, #34	; 0x22
 8008f30:	f040 8182 	bne.w	8009238 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f3a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f3e:	e125      	b.n	800918c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008f4e:	b2d9      	uxtb	r1, r3
 8008f50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	400a      	ands	r2, r1
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d053      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d011      	beq.n	8008fc2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb8:	f043 0201 	orr.w	r2, r3, #1
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d011      	beq.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe8:	f043 0204 	orr.w	r2, r3, #4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d011      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2204      	movs	r2, #4
 8009010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009018:	f043 0202 	orr.w	r2, r3, #2
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7fe ffef 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009040:	b29b      	uxth	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	f040 80a2 	bne.w	800918c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800905c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800906a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800906c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009070:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e4      	bne.n	8009048 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800908e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80090a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e1      	bne.n	800907e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a5f      	ldr	r2, [pc, #380]	; (8009250 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d021      	beq.n	800911c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01a      	beq.n	800911c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009108:	657b      	str	r3, [r7, #84]	; 0x54
 800910a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800910e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e4      	bne.n	80090e6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d130      	bne.n	8009186 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	f023 0310 	bic.w	r3, r3, #16
 800913e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800914c:	643b      	str	r3, [r7, #64]	; 0x40
 800914e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e4      	bne.n	800912a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b10      	cmp	r3, #16
 800916c:	d103      	bne.n	8009176 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2210      	movs	r2, #16
 8009174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fe ff50 	bl	8008024 <HAL_UARTEx_RxEventCallback>
 8009184:	e002      	b.n	800918c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7f9 fa56 	bl	8002638 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800918c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	f47f aecf 	bne.w	8008f40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d049      	beq.n	8009248 <UART_RxISR_8BIT_FIFOEN+0x350>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80091be:	429a      	cmp	r2, r3
 80091c0:	d242      	bcs.n	8009248 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e3      	bne.n	80091c2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a15      	ldr	r2, [pc, #84]	; (8009254 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80091fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	60bb      	str	r3, [r7, #8]
   return(result);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f043 0320 	orr.w	r3, r3, #32
 8009214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6979      	ldr	r1, [r7, #20]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	613b      	str	r3, [r7, #16]
   return(result);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e4      	bne.n	8009200 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009236:	e007      	b.n	8009248 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0208 	orr.w	r2, r2, #8
 8009246:	619a      	str	r2, [r3, #24]
}
 8009248:	bf00      	nop
 800924a:	37b0      	adds	r7, #176	; 0xb0
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40008000 	.word	0x40008000
 8009254:	08008b89 	.word	0x08008b89

08009258 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b0ae      	sub	sp, #184	; 0xb8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009266:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800928e:	2b22      	cmp	r3, #34	; 0x22
 8009290:	f040 8186 	bne.w	80095a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800929a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800929e:	e129      	b.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80092b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80092b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80092ba:	4013      	ands	r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c8:	1c9a      	adds	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d053      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d011      	beq.n	8009326 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2201      	movs	r2, #1
 8009314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931c:	f043 0201 	orr.w	r2, r3, #1
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d011      	beq.n	8009356 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2202      	movs	r2, #2
 8009344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934c:	f043 0204 	orr.w	r2, r3, #4
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	d011      	beq.n	8009386 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2204      	movs	r2, #4
 8009374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800937c:	f043 0202 	orr.w	r2, r3, #2
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe fe3d 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f040 80a4 	bne.w	80094f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e2      	bne.n	80093ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093fc:	f023 0301 	bic.w	r3, r3, #1
 8009400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3308      	adds	r3, #8
 800940a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800940e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800941c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e1      	bne.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a5f      	ldr	r2, [pc, #380]	; (80095b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d021      	beq.n	8009484 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01a      	beq.n	8009484 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800945c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800945e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009470:	65bb      	str	r3, [r7, #88]	; 0x58
 8009472:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800947e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e4      	bne.n	800944e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d130      	bne.n	80094ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	f023 0310 	bic.w	r3, r3, #16
 80094a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094b4:	647b      	str	r3, [r7, #68]	; 0x44
 80094b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e4      	bne.n	8009492 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f003 0310 	and.w	r3, r3, #16
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d103      	bne.n	80094de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2210      	movs	r2, #16
 80094dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fe fd9c 	bl	8008024 <HAL_UARTEx_RxEventCallback>
 80094ec:	e002      	b.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 f8a2 	bl	8002638 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d006      	beq.n	800950a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80094fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	f47f aecb 	bne.w	80092a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009510:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009514:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009518:	2b00      	cmp	r3, #0
 800951a:	d049      	beq.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009522:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009526:	429a      	cmp	r2, r3
 8009528:	d242      	bcs.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3308      	adds	r3, #8
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	623b      	str	r3, [r7, #32]
   return(result);
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800954e:	633a      	str	r2, [r7, #48]	; 0x30
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e3      	bne.n	800952a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a15      	ldr	r2, [pc, #84]	; (80095bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009566:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	e853 3f00 	ldrex	r3, [r3]
 8009574:	60fb      	str	r3, [r7, #12]
   return(result);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f043 0320 	orr.w	r3, r3, #32
 800957c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	69b9      	ldr	r1, [r7, #24]
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	617b      	str	r3, [r7, #20]
   return(result);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e4      	bne.n	8009568 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800959e:	e007      	b.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f042 0208 	orr.w	r2, r2, #8
 80095ae:	619a      	str	r2, [r3, #24]
}
 80095b0:	bf00      	nop
 80095b2:	37b8      	adds	r7, #184	; 0xb8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	40008000 	.word	0x40008000
 80095bc:	08008d41 	.word	0x08008d41

080095c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_UARTEx_DisableFifoMode+0x16>
 800960e:	2302      	movs	r3, #2
 8009610:	e027      	b.n	8009662 <HAL_UARTEx_DisableFifoMode+0x66>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2224      	movs	r2, #36	; 0x24
 800961e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009682:	2302      	movs	r3, #2
 8009684:	e02d      	b.n	80096e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2224      	movs	r2, #36	; 0x24
 8009692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0201 	bic.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f850 	bl	8009768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096fe:	2302      	movs	r3, #2
 8009700:	e02d      	b.n	800975e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2224      	movs	r2, #36	; 0x24
 800970e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f812 	bl	8009768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009774:	2b00      	cmp	r3, #0
 8009776:	d108      	bne.n	800978a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009788:	e031      	b.n	80097ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800978a:	2308      	movs	r3, #8
 800978c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800978e:	2308      	movs	r3, #8
 8009790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	0e5b      	lsrs	r3, r3, #25
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	0f5b      	lsrs	r3, r3, #29
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	7b3a      	ldrb	r2, [r7, #12]
 80097b6:	4911      	ldr	r1, [pc, #68]	; (80097fc <UARTEx_SetNbDataToProcess+0x94>)
 80097b8:	5c8a      	ldrb	r2, [r1, r2]
 80097ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097be:	7b3a      	ldrb	r2, [r7, #12]
 80097c0:	490f      	ldr	r1, [pc, #60]	; (8009800 <UARTEx_SetNbDataToProcess+0x98>)
 80097c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	7b7a      	ldrb	r2, [r7, #13]
 80097d4:	4909      	ldr	r1, [pc, #36]	; (80097fc <UARTEx_SetNbDataToProcess+0x94>)
 80097d6:	5c8a      	ldrb	r2, [r1, r2]
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	4908      	ldr	r1, [pc, #32]	; (8009800 <UARTEx_SetNbDataToProcess+0x98>)
 80097e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	0800e93c 	.word	0x0800e93c
 8009800:	0800e944 	.word	0x0800e944

08009804 <__errno>:
 8009804:	4b01      	ldr	r3, [pc, #4]	; (800980c <__errno+0x8>)
 8009806:	6818      	ldr	r0, [r3, #0]
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	2000005c 	.word	0x2000005c

08009810 <__libc_init_array>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4d0d      	ldr	r5, [pc, #52]	; (8009848 <__libc_init_array+0x38>)
 8009814:	4c0d      	ldr	r4, [pc, #52]	; (800984c <__libc_init_array+0x3c>)
 8009816:	1b64      	subs	r4, r4, r5
 8009818:	10a4      	asrs	r4, r4, #2
 800981a:	2600      	movs	r6, #0
 800981c:	42a6      	cmp	r6, r4
 800981e:	d109      	bne.n	8009834 <__libc_init_array+0x24>
 8009820:	4d0b      	ldr	r5, [pc, #44]	; (8009850 <__libc_init_array+0x40>)
 8009822:	4c0c      	ldr	r4, [pc, #48]	; (8009854 <__libc_init_array+0x44>)
 8009824:	f004 fd86 	bl	800e334 <_init>
 8009828:	1b64      	subs	r4, r4, r5
 800982a:	10a4      	asrs	r4, r4, #2
 800982c:	2600      	movs	r6, #0
 800982e:	42a6      	cmp	r6, r4
 8009830:	d105      	bne.n	800983e <__libc_init_array+0x2e>
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	f855 3b04 	ldr.w	r3, [r5], #4
 8009838:	4798      	blx	r3
 800983a:	3601      	adds	r6, #1
 800983c:	e7ee      	b.n	800981c <__libc_init_array+0xc>
 800983e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009842:	4798      	blx	r3
 8009844:	3601      	adds	r6, #1
 8009846:	e7f2      	b.n	800982e <__libc_init_array+0x1e>
 8009848:	0800ee04 	.word	0x0800ee04
 800984c:	0800ee04 	.word	0x0800ee04
 8009850:	0800ee04 	.word	0x0800ee04
 8009854:	0800ee08 	.word	0x0800ee08

08009858 <malloc>:
 8009858:	4b02      	ldr	r3, [pc, #8]	; (8009864 <malloc+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f000 b88d 	b.w	800997c <_malloc_r>
 8009862:	bf00      	nop
 8009864:	2000005c 	.word	0x2000005c

08009868 <free>:
 8009868:	4b02      	ldr	r3, [pc, #8]	; (8009874 <free+0xc>)
 800986a:	4601      	mov	r1, r0
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f000 b819 	b.w	80098a4 <_free_r>
 8009872:	bf00      	nop
 8009874:	2000005c 	.word	0x2000005c

08009878 <memcpy>:
 8009878:	440a      	add	r2, r1
 800987a:	4291      	cmp	r1, r2
 800987c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009880:	d100      	bne.n	8009884 <memcpy+0xc>
 8009882:	4770      	bx	lr
 8009884:	b510      	push	{r4, lr}
 8009886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988e:	4291      	cmp	r1, r2
 8009890:	d1f9      	bne.n	8009886 <memcpy+0xe>
 8009892:	bd10      	pop	{r4, pc}

08009894 <memset>:
 8009894:	4402      	add	r2, r0
 8009896:	4603      	mov	r3, r0
 8009898:	4293      	cmp	r3, r2
 800989a:	d100      	bne.n	800989e <memset+0xa>
 800989c:	4770      	bx	lr
 800989e:	f803 1b01 	strb.w	r1, [r3], #1
 80098a2:	e7f9      	b.n	8009898 <memset+0x4>

080098a4 <_free_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d044      	beq.n	8009934 <_free_r+0x90>
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f1a1 0404 	sub.w	r4, r1, #4
 80098b6:	bfb8      	it	lt
 80098b8:	18e4      	addlt	r4, r4, r3
 80098ba:	f003 fbff 	bl	800d0bc <__malloc_lock>
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <_free_r+0x94>)
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	b933      	cbnz	r3, 80098d4 <_free_r+0x30>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d0:	f003 bbfa 	b.w	800d0c8 <__malloc_unlock>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d908      	bls.n	80098ea <_free_r+0x46>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf01      	itttt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	e7ed      	b.n	80098c6 <_free_r+0x22>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x50>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x46>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x70>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1e0      	bne.n	80098ca <_free_r+0x26>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	4421      	add	r1, r4
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	e7da      	b.n	80098ca <_free_r+0x26>
 8009914:	d902      	bls.n	800991c <_free_r+0x78>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d6      	b.n	80098ca <_free_r+0x26>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7ca      	b.n	80098ca <_free_r+0x26>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20000808 	.word	0x20000808

0800993c <sbrk_aligned>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	4e0e      	ldr	r6, [pc, #56]	; (8009978 <sbrk_aligned+0x3c>)
 8009940:	460c      	mov	r4, r1
 8009942:	6831      	ldr	r1, [r6, #0]
 8009944:	4605      	mov	r5, r0
 8009946:	b911      	cbnz	r1, 800994e <sbrk_aligned+0x12>
 8009948:	f000 ff94 	bl	800a874 <_sbrk_r>
 800994c:	6030      	str	r0, [r6, #0]
 800994e:	4621      	mov	r1, r4
 8009950:	4628      	mov	r0, r5
 8009952:	f000 ff8f 	bl	800a874 <_sbrk_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d00a      	beq.n	8009970 <sbrk_aligned+0x34>
 800995a:	1cc4      	adds	r4, r0, #3
 800995c:	f024 0403 	bic.w	r4, r4, #3
 8009960:	42a0      	cmp	r0, r4
 8009962:	d007      	beq.n	8009974 <sbrk_aligned+0x38>
 8009964:	1a21      	subs	r1, r4, r0
 8009966:	4628      	mov	r0, r5
 8009968:	f000 ff84 	bl	800a874 <_sbrk_r>
 800996c:	3001      	adds	r0, #1
 800996e:	d101      	bne.n	8009974 <sbrk_aligned+0x38>
 8009970:	f04f 34ff 	mov.w	r4, #4294967295
 8009974:	4620      	mov	r0, r4
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	2000080c 	.word	0x2000080c

0800997c <_malloc_r>:
 800997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009980:	1ccd      	adds	r5, r1, #3
 8009982:	f025 0503 	bic.w	r5, r5, #3
 8009986:	3508      	adds	r5, #8
 8009988:	2d0c      	cmp	r5, #12
 800998a:	bf38      	it	cc
 800998c:	250c      	movcc	r5, #12
 800998e:	2d00      	cmp	r5, #0
 8009990:	4607      	mov	r7, r0
 8009992:	db01      	blt.n	8009998 <_malloc_r+0x1c>
 8009994:	42a9      	cmp	r1, r5
 8009996:	d905      	bls.n	80099a4 <_malloc_r+0x28>
 8009998:	230c      	movs	r3, #12
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	2600      	movs	r6, #0
 800999e:	4630      	mov	r0, r6
 80099a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a4:	4e2e      	ldr	r6, [pc, #184]	; (8009a60 <_malloc_r+0xe4>)
 80099a6:	f003 fb89 	bl	800d0bc <__malloc_lock>
 80099aa:	6833      	ldr	r3, [r6, #0]
 80099ac:	461c      	mov	r4, r3
 80099ae:	bb34      	cbnz	r4, 80099fe <_malloc_r+0x82>
 80099b0:	4629      	mov	r1, r5
 80099b2:	4638      	mov	r0, r7
 80099b4:	f7ff ffc2 	bl	800993c <sbrk_aligned>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	4604      	mov	r4, r0
 80099bc:	d14d      	bne.n	8009a5a <_malloc_r+0xde>
 80099be:	6834      	ldr	r4, [r6, #0]
 80099c0:	4626      	mov	r6, r4
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	d140      	bne.n	8009a48 <_malloc_r+0xcc>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	4631      	mov	r1, r6
 80099ca:	4638      	mov	r0, r7
 80099cc:	eb04 0803 	add.w	r8, r4, r3
 80099d0:	f000 ff50 	bl	800a874 <_sbrk_r>
 80099d4:	4580      	cmp	r8, r0
 80099d6:	d13a      	bne.n	8009a4e <_malloc_r+0xd2>
 80099d8:	6821      	ldr	r1, [r4, #0]
 80099da:	3503      	adds	r5, #3
 80099dc:	1a6d      	subs	r5, r5, r1
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	4629      	mov	r1, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff ffa5 	bl	800993c <sbrk_aligned>
 80099f2:	3001      	adds	r0, #1
 80099f4:	d02b      	beq.n	8009a4e <_malloc_r+0xd2>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	442b      	add	r3, r5
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	e00e      	b.n	8009a1c <_malloc_r+0xa0>
 80099fe:	6822      	ldr	r2, [r4, #0]
 8009a00:	1b52      	subs	r2, r2, r5
 8009a02:	d41e      	bmi.n	8009a42 <_malloc_r+0xc6>
 8009a04:	2a0b      	cmp	r2, #11
 8009a06:	d916      	bls.n	8009a36 <_malloc_r+0xba>
 8009a08:	1961      	adds	r1, r4, r5
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	6025      	str	r5, [r4, #0]
 8009a0e:	bf18      	it	ne
 8009a10:	6059      	strne	r1, [r3, #4]
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	bf08      	it	eq
 8009a16:	6031      	streq	r1, [r6, #0]
 8009a18:	5162      	str	r2, [r4, r5]
 8009a1a:	604b      	str	r3, [r1, #4]
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f104 060b 	add.w	r6, r4, #11
 8009a22:	f003 fb51 	bl	800d0c8 <__malloc_unlock>
 8009a26:	f026 0607 	bic.w	r6, r6, #7
 8009a2a:	1d23      	adds	r3, r4, #4
 8009a2c:	1af2      	subs	r2, r6, r3
 8009a2e:	d0b6      	beq.n	800999e <_malloc_r+0x22>
 8009a30:	1b9b      	subs	r3, r3, r6
 8009a32:	50a3      	str	r3, [r4, r2]
 8009a34:	e7b3      	b.n	800999e <_malloc_r+0x22>
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	bf0c      	ite	eq
 8009a3c:	6032      	streq	r2, [r6, #0]
 8009a3e:	605a      	strne	r2, [r3, #4]
 8009a40:	e7ec      	b.n	8009a1c <_malloc_r+0xa0>
 8009a42:	4623      	mov	r3, r4
 8009a44:	6864      	ldr	r4, [r4, #4]
 8009a46:	e7b2      	b.n	80099ae <_malloc_r+0x32>
 8009a48:	4634      	mov	r4, r6
 8009a4a:	6876      	ldr	r6, [r6, #4]
 8009a4c:	e7b9      	b.n	80099c2 <_malloc_r+0x46>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	4638      	mov	r0, r7
 8009a54:	f003 fb38 	bl	800d0c8 <__malloc_unlock>
 8009a58:	e7a1      	b.n	800999e <_malloc_r+0x22>
 8009a5a:	6025      	str	r5, [r4, #0]
 8009a5c:	e7de      	b.n	8009a1c <_malloc_r+0xa0>
 8009a5e:	bf00      	nop
 8009a60:	20000808 	.word	0x20000808

08009a64 <__cvt>:
 8009a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	ec55 4b10 	vmov	r4, r5, d0
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	460e      	mov	r6, r1
 8009a70:	4619      	mov	r1, r3
 8009a72:	462b      	mov	r3, r5
 8009a74:	bfbb      	ittet	lt
 8009a76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a7a:	461d      	movlt	r5, r3
 8009a7c:	2300      	movge	r3, #0
 8009a7e:	232d      	movlt	r3, #45	; 0x2d
 8009a80:	700b      	strb	r3, [r1, #0]
 8009a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a88:	4691      	mov	r9, r2
 8009a8a:	f023 0820 	bic.w	r8, r3, #32
 8009a8e:	bfbc      	itt	lt
 8009a90:	4622      	movlt	r2, r4
 8009a92:	4614      	movlt	r4, r2
 8009a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a98:	d005      	beq.n	8009aa6 <__cvt+0x42>
 8009a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a9e:	d100      	bne.n	8009aa2 <__cvt+0x3e>
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	e000      	b.n	8009aa8 <__cvt+0x44>
 8009aa6:	2103      	movs	r1, #3
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	ab02      	add	r3, sp, #8
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	ec45 4b10 	vmov	d0, r4, r5
 8009ab4:	4653      	mov	r3, sl
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	f001 ff6e 	bl	800b998 <_dtoa_r>
 8009abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	d102      	bne.n	8009aca <__cvt+0x66>
 8009ac4:	f019 0f01 	tst.w	r9, #1
 8009ac8:	d022      	beq.n	8009b10 <__cvt+0xac>
 8009aca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ace:	eb07 0906 	add.w	r9, r7, r6
 8009ad2:	d110      	bne.n	8009af6 <__cvt+0x92>
 8009ad4:	783b      	ldrb	r3, [r7, #0]
 8009ad6:	2b30      	cmp	r3, #48	; 0x30
 8009ad8:	d10a      	bne.n	8009af0 <__cvt+0x8c>
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 ffc9 	bl	8000a78 <__aeabi_dcmpeq>
 8009ae6:	b918      	cbnz	r0, 8009af0 <__cvt+0x8c>
 8009ae8:	f1c6 0601 	rsb	r6, r6, #1
 8009aec:	f8ca 6000 	str.w	r6, [sl]
 8009af0:	f8da 3000 	ldr.w	r3, [sl]
 8009af4:	4499      	add	r9, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	2300      	movs	r3, #0
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7f6 ffbb 	bl	8000a78 <__aeabi_dcmpeq>
 8009b02:	b108      	cbz	r0, 8009b08 <__cvt+0xa4>
 8009b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b08:	2230      	movs	r2, #48	; 0x30
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	454b      	cmp	r3, r9
 8009b0e:	d307      	bcc.n	8009b20 <__cvt+0xbc>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b14:	1bdb      	subs	r3, r3, r7
 8009b16:	4638      	mov	r0, r7
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	b004      	add	sp, #16
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	1c59      	adds	r1, r3, #1
 8009b22:	9103      	str	r1, [sp, #12]
 8009b24:	701a      	strb	r2, [r3, #0]
 8009b26:	e7f0      	b.n	8009b0a <__cvt+0xa6>

08009b28 <__exponent>:
 8009b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	bfb8      	it	lt
 8009b30:	4249      	neglt	r1, r1
 8009b32:	f803 2b02 	strb.w	r2, [r3], #2
 8009b36:	bfb4      	ite	lt
 8009b38:	222d      	movlt	r2, #45	; 0x2d
 8009b3a:	222b      	movge	r2, #43	; 0x2b
 8009b3c:	2909      	cmp	r1, #9
 8009b3e:	7042      	strb	r2, [r0, #1]
 8009b40:	dd2a      	ble.n	8009b98 <__exponent+0x70>
 8009b42:	f10d 0407 	add.w	r4, sp, #7
 8009b46:	46a4      	mov	ip, r4
 8009b48:	270a      	movs	r7, #10
 8009b4a:	46a6      	mov	lr, r4
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b52:	fb07 1516 	mls	r5, r7, r6, r1
 8009b56:	3530      	adds	r5, #48	; 0x30
 8009b58:	2a63      	cmp	r2, #99	; 0x63
 8009b5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b62:	4631      	mov	r1, r6
 8009b64:	dcf1      	bgt.n	8009b4a <__exponent+0x22>
 8009b66:	3130      	adds	r1, #48	; 0x30
 8009b68:	f1ae 0502 	sub.w	r5, lr, #2
 8009b6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b70:	1c44      	adds	r4, r0, #1
 8009b72:	4629      	mov	r1, r5
 8009b74:	4561      	cmp	r1, ip
 8009b76:	d30a      	bcc.n	8009b8e <__exponent+0x66>
 8009b78:	f10d 0209 	add.w	r2, sp, #9
 8009b7c:	eba2 020e 	sub.w	r2, r2, lr
 8009b80:	4565      	cmp	r5, ip
 8009b82:	bf88      	it	hi
 8009b84:	2200      	movhi	r2, #0
 8009b86:	4413      	add	r3, r2
 8009b88:	1a18      	subs	r0, r3, r0
 8009b8a:	b003      	add	sp, #12
 8009b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b96:	e7ed      	b.n	8009b74 <__exponent+0x4c>
 8009b98:	2330      	movs	r3, #48	; 0x30
 8009b9a:	3130      	adds	r1, #48	; 0x30
 8009b9c:	7083      	strb	r3, [r0, #2]
 8009b9e:	70c1      	strb	r1, [r0, #3]
 8009ba0:	1d03      	adds	r3, r0, #4
 8009ba2:	e7f1      	b.n	8009b88 <__exponent+0x60>

08009ba4 <_printf_float>:
 8009ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	ed2d 8b02 	vpush	{d8}
 8009bac:	b08d      	sub	sp, #52	; 0x34
 8009bae:	460c      	mov	r4, r1
 8009bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bb4:	4616      	mov	r6, r2
 8009bb6:	461f      	mov	r7, r3
 8009bb8:	4605      	mov	r5, r0
 8009bba:	f003 fa01 	bl	800cfc0 <_localeconv_r>
 8009bbe:	f8d0 a000 	ldr.w	sl, [r0]
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	f7f6 fadc 	bl	8000180 <strlen>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	930a      	str	r3, [sp, #40]	; 0x28
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	f103 0208 	add.w	r2, r3, #8
 8009be2:	f8c8 2000 	str.w	r2, [r8]
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bfc:	ee08 0a10 	vmov	s16, r0
 8009c00:	4b9f      	ldr	r3, [pc, #636]	; (8009e80 <_printf_float+0x2dc>)
 8009c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	f7f6 ff67 	bl	8000adc <__aeabi_dcmpun>
 8009c0e:	bb88      	cbnz	r0, 8009c74 <_printf_float+0xd0>
 8009c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c14:	4b9a      	ldr	r3, [pc, #616]	; (8009e80 <_printf_float+0x2dc>)
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	f7f6 ff41 	bl	8000aa0 <__aeabi_dcmple>
 8009c1e:	bb48      	cbnz	r0, 8009c74 <_printf_float+0xd0>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7f6 ff30 	bl	8000a8c <__aeabi_dcmplt>
 8009c2c:	b110      	cbz	r0, 8009c34 <_printf_float+0x90>
 8009c2e:	232d      	movs	r3, #45	; 0x2d
 8009c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c34:	4b93      	ldr	r3, [pc, #588]	; (8009e84 <_printf_float+0x2e0>)
 8009c36:	4894      	ldr	r0, [pc, #592]	; (8009e88 <_printf_float+0x2e4>)
 8009c38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c3c:	bf94      	ite	ls
 8009c3e:	4698      	movls	r8, r3
 8009c40:	4680      	movhi	r8, r0
 8009c42:	2303      	movs	r3, #3
 8009c44:	6123      	str	r3, [r4, #16]
 8009c46:	9b05      	ldr	r3, [sp, #20]
 8009c48:	f023 0204 	bic.w	r2, r3, #4
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	f04f 0900 	mov.w	r9, #0
 8009c52:	9700      	str	r7, [sp, #0]
 8009c54:	4633      	mov	r3, r6
 8009c56:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f9d8 	bl	800a010 <_printf_common>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f040 8090 	bne.w	8009d86 <_printf_float+0x1e2>
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	b00d      	add	sp, #52	; 0x34
 8009c6c:	ecbd 8b02 	vpop	{d8}
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 ff2e 	bl	8000adc <__aeabi_dcmpun>
 8009c80:	b140      	cbz	r0, 8009c94 <_printf_float+0xf0>
 8009c82:	464b      	mov	r3, r9
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfbc      	itt	lt
 8009c88:	232d      	movlt	r3, #45	; 0x2d
 8009c8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c8e:	487f      	ldr	r0, [pc, #508]	; (8009e8c <_printf_float+0x2e8>)
 8009c90:	4b7f      	ldr	r3, [pc, #508]	; (8009e90 <_printf_float+0x2ec>)
 8009c92:	e7d1      	b.n	8009c38 <_printf_float+0x94>
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c9a:	9206      	str	r2, [sp, #24]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	d13f      	bne.n	8009d20 <_printf_float+0x17c>
 8009ca0:	2306      	movs	r3, #6
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	9b05      	ldr	r3, [sp, #20]
 8009ca6:	6861      	ldr	r1, [r4, #4]
 8009ca8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009cac:	2300      	movs	r3, #0
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	ab0a      	add	r3, sp, #40	; 0x28
 8009cb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cb6:	ab09      	add	r3, sp, #36	; 0x24
 8009cb8:	ec49 8b10 	vmov	d0, r8, r9
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	6022      	str	r2, [r4, #0]
 8009cc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f7ff fecd 	bl	8009a64 <__cvt>
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cce:	2b47      	cmp	r3, #71	; 0x47
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	d108      	bne.n	8009ce6 <_printf_float+0x142>
 8009cd4:	1cc8      	adds	r0, r1, #3
 8009cd6:	db02      	blt.n	8009cde <_printf_float+0x13a>
 8009cd8:	6863      	ldr	r3, [r4, #4]
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	dd41      	ble.n	8009d62 <_printf_float+0x1be>
 8009cde:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ce2:	fa5f fb8b 	uxtb.w	fp, fp
 8009ce6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cea:	d820      	bhi.n	8009d2e <_printf_float+0x18a>
 8009cec:	3901      	subs	r1, #1
 8009cee:	465a      	mov	r2, fp
 8009cf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cf4:	9109      	str	r1, [sp, #36]	; 0x24
 8009cf6:	f7ff ff17 	bl	8009b28 <__exponent>
 8009cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfc:	1813      	adds	r3, r2, r0
 8009cfe:	2a01      	cmp	r2, #1
 8009d00:	4681      	mov	r9, r0
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	dc02      	bgt.n	8009d0c <_printf_float+0x168>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	07d2      	lsls	r2, r2, #31
 8009d0a:	d501      	bpl.n	8009d10 <_printf_float+0x16c>
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d09c      	beq.n	8009c52 <_printf_float+0xae>
 8009d18:	232d      	movs	r3, #45	; 0x2d
 8009d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d1e:	e798      	b.n	8009c52 <_printf_float+0xae>
 8009d20:	9a06      	ldr	r2, [sp, #24]
 8009d22:	2a47      	cmp	r2, #71	; 0x47
 8009d24:	d1be      	bne.n	8009ca4 <_printf_float+0x100>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1bc      	bne.n	8009ca4 <_printf_float+0x100>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e7b9      	b.n	8009ca2 <_printf_float+0xfe>
 8009d2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d32:	d118      	bne.n	8009d66 <_printf_float+0x1c2>
 8009d34:	2900      	cmp	r1, #0
 8009d36:	6863      	ldr	r3, [r4, #4]
 8009d38:	dd0b      	ble.n	8009d52 <_printf_float+0x1ae>
 8009d3a:	6121      	str	r1, [r4, #16]
 8009d3c:	b913      	cbnz	r3, 8009d44 <_printf_float+0x1a0>
 8009d3e:	6822      	ldr	r2, [r4, #0]
 8009d40:	07d0      	lsls	r0, r2, #31
 8009d42:	d502      	bpl.n	8009d4a <_printf_float+0x1a6>
 8009d44:	3301      	adds	r3, #1
 8009d46:	440b      	add	r3, r1
 8009d48:	6123      	str	r3, [r4, #16]
 8009d4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d4c:	f04f 0900 	mov.w	r9, #0
 8009d50:	e7de      	b.n	8009d10 <_printf_float+0x16c>
 8009d52:	b913      	cbnz	r3, 8009d5a <_printf_float+0x1b6>
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	07d2      	lsls	r2, r2, #31
 8009d58:	d501      	bpl.n	8009d5e <_printf_float+0x1ba>
 8009d5a:	3302      	adds	r3, #2
 8009d5c:	e7f4      	b.n	8009d48 <_printf_float+0x1a4>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e7f2      	b.n	8009d48 <_printf_float+0x1a4>
 8009d62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	db05      	blt.n	8009d78 <_printf_float+0x1d4>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	6121      	str	r1, [r4, #16]
 8009d70:	07d8      	lsls	r0, r3, #31
 8009d72:	d5ea      	bpl.n	8009d4a <_printf_float+0x1a6>
 8009d74:	1c4b      	adds	r3, r1, #1
 8009d76:	e7e7      	b.n	8009d48 <_printf_float+0x1a4>
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	bfd4      	ite	le
 8009d7c:	f1c1 0202 	rsble	r2, r1, #2
 8009d80:	2201      	movgt	r2, #1
 8009d82:	4413      	add	r3, r2
 8009d84:	e7e0      	b.n	8009d48 <_printf_float+0x1a4>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	055a      	lsls	r2, r3, #21
 8009d8a:	d407      	bmi.n	8009d9c <_printf_float+0x1f8>
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	4642      	mov	r2, r8
 8009d90:	4631      	mov	r1, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b8      	blx	r7
 8009d96:	3001      	adds	r0, #1
 8009d98:	d12c      	bne.n	8009df4 <_printf_float+0x250>
 8009d9a:	e764      	b.n	8009c66 <_printf_float+0xc2>
 8009d9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009da0:	f240 80e0 	bls.w	8009f64 <_printf_float+0x3c0>
 8009da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	f7f6 fe64 	bl	8000a78 <__aeabi_dcmpeq>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d034      	beq.n	8009e1e <_printf_float+0x27a>
 8009db4:	4a37      	ldr	r2, [pc, #220]	; (8009e94 <_printf_float+0x2f0>)
 8009db6:	2301      	movs	r3, #1
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af51 	beq.w	8009c66 <_printf_float+0xc2>
 8009dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	db02      	blt.n	8009dd2 <_printf_float+0x22e>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	07d8      	lsls	r0, r3, #31
 8009dd0:	d510      	bpl.n	8009df4 <_printf_float+0x250>
 8009dd2:	ee18 3a10 	vmov	r3, s16
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f af41 	beq.w	8009c66 <_printf_float+0xc2>
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	f104 091a 	add.w	r9, r4, #26
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	3b01      	subs	r3, #1
 8009df0:	4543      	cmp	r3, r8
 8009df2:	dc09      	bgt.n	8009e08 <_printf_float+0x264>
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	079b      	lsls	r3, r3, #30
 8009df8:	f100 8105 	bmi.w	800a006 <_printf_float+0x462>
 8009dfc:	68e0      	ldr	r0, [r4, #12]
 8009dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e00:	4298      	cmp	r0, r3
 8009e02:	bfb8      	it	lt
 8009e04:	4618      	movlt	r0, r3
 8009e06:	e730      	b.n	8009c6a <_printf_float+0xc6>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	464a      	mov	r2, r9
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b8      	blx	r7
 8009e12:	3001      	adds	r0, #1
 8009e14:	f43f af27 	beq.w	8009c66 <_printf_float+0xc2>
 8009e18:	f108 0801 	add.w	r8, r8, #1
 8009e1c:	e7e6      	b.n	8009dec <_printf_float+0x248>
 8009e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dc39      	bgt.n	8009e98 <_printf_float+0x2f4>
 8009e24:	4a1b      	ldr	r2, [pc, #108]	; (8009e94 <_printf_float+0x2f0>)
 8009e26:	2301      	movs	r3, #1
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f43f af19 	beq.w	8009c66 <_printf_float+0xc2>
 8009e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	d102      	bne.n	8009e42 <_printf_float+0x29e>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	07d9      	lsls	r1, r3, #31
 8009e40:	d5d8      	bpl.n	8009df4 <_printf_float+0x250>
 8009e42:	ee18 3a10 	vmov	r3, s16
 8009e46:	4652      	mov	r2, sl
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f af09 	beq.w	8009c66 <_printf_float+0xc2>
 8009e54:	f04f 0900 	mov.w	r9, #0
 8009e58:	f104 0a1a 	add.w	sl, r4, #26
 8009e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5e:	425b      	negs	r3, r3
 8009e60:	454b      	cmp	r3, r9
 8009e62:	dc01      	bgt.n	8009e68 <_printf_float+0x2c4>
 8009e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e66:	e792      	b.n	8009d8e <_printf_float+0x1ea>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f aef7 	beq.w	8009c66 <_printf_float+0xc2>
 8009e78:	f109 0901 	add.w	r9, r9, #1
 8009e7c:	e7ee      	b.n	8009e5c <_printf_float+0x2b8>
 8009e7e:	bf00      	nop
 8009e80:	7fefffff 	.word	0x7fefffff
 8009e84:	0800e950 	.word	0x0800e950
 8009e88:	0800e954 	.word	0x0800e954
 8009e8c:	0800e95c 	.word	0x0800e95c
 8009e90:	0800e958 	.word	0x0800e958
 8009e94:	0800e960 	.word	0x0800e960
 8009e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	bfa8      	it	ge
 8009ea0:	461a      	movge	r2, r3
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	4691      	mov	r9, r2
 8009ea6:	dc37      	bgt.n	8009f18 <_printf_float+0x374>
 8009ea8:	f04f 0b00 	mov.w	fp, #0
 8009eac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eb0:	f104 021a 	add.w	r2, r4, #26
 8009eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eb6:	9305      	str	r3, [sp, #20]
 8009eb8:	eba3 0309 	sub.w	r3, r3, r9
 8009ebc:	455b      	cmp	r3, fp
 8009ebe:	dc33      	bgt.n	8009f28 <_printf_float+0x384>
 8009ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	db3b      	blt.n	8009f40 <_printf_float+0x39c>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	07da      	lsls	r2, r3, #31
 8009ecc:	d438      	bmi.n	8009f40 <_printf_float+0x39c>
 8009ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed0:	9a05      	ldr	r2, [sp, #20]
 8009ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ed4:	1a9a      	subs	r2, r3, r2
 8009ed6:	eba3 0901 	sub.w	r9, r3, r1
 8009eda:	4591      	cmp	r9, r2
 8009edc:	bfa8      	it	ge
 8009ede:	4691      	movge	r9, r2
 8009ee0:	f1b9 0f00 	cmp.w	r9, #0
 8009ee4:	dc35      	bgt.n	8009f52 <_printf_float+0x3ae>
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eee:	f104 0a1a 	add.w	sl, r4, #26
 8009ef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	eba3 0309 	sub.w	r3, r3, r9
 8009efc:	4543      	cmp	r3, r8
 8009efe:	f77f af79 	ble.w	8009df4 <_printf_float+0x250>
 8009f02:	2301      	movs	r3, #1
 8009f04:	4652      	mov	r2, sl
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f aeaa 	beq.w	8009c66 <_printf_float+0xc2>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	e7ec      	b.n	8009ef2 <_printf_float+0x34e>
 8009f18:	4613      	mov	r3, r2
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	4628      	mov	r0, r5
 8009f20:	47b8      	blx	r7
 8009f22:	3001      	adds	r0, #1
 8009f24:	d1c0      	bne.n	8009ea8 <_printf_float+0x304>
 8009f26:	e69e      	b.n	8009c66 <_printf_float+0xc2>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	9205      	str	r2, [sp, #20]
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f ae97 	beq.w	8009c66 <_printf_float+0xc2>
 8009f38:	9a05      	ldr	r2, [sp, #20]
 8009f3a:	f10b 0b01 	add.w	fp, fp, #1
 8009f3e:	e7b9      	b.n	8009eb4 <_printf_float+0x310>
 8009f40:	ee18 3a10 	vmov	r3, s16
 8009f44:	4652      	mov	r2, sl
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d1be      	bne.n	8009ece <_printf_float+0x32a>
 8009f50:	e689      	b.n	8009c66 <_printf_float+0xc2>
 8009f52:	9a05      	ldr	r2, [sp, #20]
 8009f54:	464b      	mov	r3, r9
 8009f56:	4442      	add	r2, r8
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d1c1      	bne.n	8009ee6 <_printf_float+0x342>
 8009f62:	e680      	b.n	8009c66 <_printf_float+0xc2>
 8009f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f66:	2a01      	cmp	r2, #1
 8009f68:	dc01      	bgt.n	8009f6e <_printf_float+0x3ca>
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d538      	bpl.n	8009fe0 <_printf_float+0x43c>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4642      	mov	r2, r8
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f ae74 	beq.w	8009c66 <_printf_float+0xc2>
 8009f7e:	ee18 3a10 	vmov	r3, s16
 8009f82:	4652      	mov	r2, sl
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f ae6b 	beq.w	8009c66 <_printf_float+0xc2>
 8009f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f94:	2200      	movs	r2, #0
 8009f96:	2300      	movs	r3, #0
 8009f98:	f7f6 fd6e 	bl	8000a78 <__aeabi_dcmpeq>
 8009f9c:	b9d8      	cbnz	r0, 8009fd6 <_printf_float+0x432>
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa0:	f108 0201 	add.w	r2, r8, #1
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	d10e      	bne.n	8009fce <_printf_float+0x42a>
 8009fb0:	e659      	b.n	8009c66 <_printf_float+0xc2>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4652      	mov	r2, sl
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f43f ae52 	beq.w	8009c66 <_printf_float+0xc2>
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	4543      	cmp	r3, r8
 8009fcc:	dcf1      	bgt.n	8009fb2 <_printf_float+0x40e>
 8009fce:	464b      	mov	r3, r9
 8009fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fd4:	e6dc      	b.n	8009d90 <_printf_float+0x1ec>
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	f104 0a1a 	add.w	sl, r4, #26
 8009fde:	e7f2      	b.n	8009fc6 <_printf_float+0x422>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	e7df      	b.n	8009fa6 <_printf_float+0x402>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	464a      	mov	r2, r9
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f ae38 	beq.w	8009c66 <_printf_float+0xc2>
 8009ff6:	f108 0801 	add.w	r8, r8, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	4543      	cmp	r3, r8
 800a002:	dcf0      	bgt.n	8009fe6 <_printf_float+0x442>
 800a004:	e6fa      	b.n	8009dfc <_printf_float+0x258>
 800a006:	f04f 0800 	mov.w	r8, #0
 800a00a:	f104 0919 	add.w	r9, r4, #25
 800a00e:	e7f4      	b.n	8009ffa <_printf_float+0x456>

0800a010 <_printf_common>:
 800a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	4616      	mov	r6, r2
 800a016:	4699      	mov	r9, r3
 800a018:	688a      	ldr	r2, [r1, #8]
 800a01a:	690b      	ldr	r3, [r1, #16]
 800a01c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a020:	4293      	cmp	r3, r2
 800a022:	bfb8      	it	lt
 800a024:	4613      	movlt	r3, r2
 800a026:	6033      	str	r3, [r6, #0]
 800a028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a02c:	4607      	mov	r7, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	b10a      	cbz	r2, 800a036 <_printf_common+0x26>
 800a032:	3301      	adds	r3, #1
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	0699      	lsls	r1, r3, #26
 800a03a:	bf42      	ittt	mi
 800a03c:	6833      	ldrmi	r3, [r6, #0]
 800a03e:	3302      	addmi	r3, #2
 800a040:	6033      	strmi	r3, [r6, #0]
 800a042:	6825      	ldr	r5, [r4, #0]
 800a044:	f015 0506 	ands.w	r5, r5, #6
 800a048:	d106      	bne.n	800a058 <_printf_common+0x48>
 800a04a:	f104 0a19 	add.w	sl, r4, #25
 800a04e:	68e3      	ldr	r3, [r4, #12]
 800a050:	6832      	ldr	r2, [r6, #0]
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	42ab      	cmp	r3, r5
 800a056:	dc26      	bgt.n	800a0a6 <_printf_common+0x96>
 800a058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a05c:	1e13      	subs	r3, r2, #0
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	bf18      	it	ne
 800a062:	2301      	movne	r3, #1
 800a064:	0692      	lsls	r2, r2, #26
 800a066:	d42b      	bmi.n	800a0c0 <_printf_common+0xb0>
 800a068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a06c:	4649      	mov	r1, r9
 800a06e:	4638      	mov	r0, r7
 800a070:	47c0      	blx	r8
 800a072:	3001      	adds	r0, #1
 800a074:	d01e      	beq.n	800a0b4 <_printf_common+0xa4>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	68e5      	ldr	r5, [r4, #12]
 800a07a:	6832      	ldr	r2, [r6, #0]
 800a07c:	f003 0306 	and.w	r3, r3, #6
 800a080:	2b04      	cmp	r3, #4
 800a082:	bf08      	it	eq
 800a084:	1aad      	subeq	r5, r5, r2
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	6922      	ldr	r2, [r4, #16]
 800a08a:	bf0c      	ite	eq
 800a08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a090:	2500      	movne	r5, #0
 800a092:	4293      	cmp	r3, r2
 800a094:	bfc4      	itt	gt
 800a096:	1a9b      	subgt	r3, r3, r2
 800a098:	18ed      	addgt	r5, r5, r3
 800a09a:	2600      	movs	r6, #0
 800a09c:	341a      	adds	r4, #26
 800a09e:	42b5      	cmp	r5, r6
 800a0a0:	d11a      	bne.n	800a0d8 <_printf_common+0xc8>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	e008      	b.n	800a0b8 <_printf_common+0xa8>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	47c0      	blx	r8
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d103      	bne.n	800a0bc <_printf_common+0xac>
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	3501      	adds	r5, #1
 800a0be:	e7c6      	b.n	800a04e <_printf_common+0x3e>
 800a0c0:	18e1      	adds	r1, r4, r3
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	2030      	movs	r0, #48	; 0x30
 800a0c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ca:	4422      	add	r2, r4
 800a0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	e7c7      	b.n	800a068 <_printf_common+0x58>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4649      	mov	r1, r9
 800a0de:	4638      	mov	r0, r7
 800a0e0:	47c0      	blx	r8
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	d0e6      	beq.n	800a0b4 <_printf_common+0xa4>
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7d9      	b.n	800a09e <_printf_common+0x8e>
	...

0800a0ec <_printf_i>:
 800a0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	7e0f      	ldrb	r7, [r1, #24]
 800a0f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0f4:	2f78      	cmp	r7, #120	; 0x78
 800a0f6:	4691      	mov	r9, r2
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	469a      	mov	sl, r3
 800a0fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a102:	d807      	bhi.n	800a114 <_printf_i+0x28>
 800a104:	2f62      	cmp	r7, #98	; 0x62
 800a106:	d80a      	bhi.n	800a11e <_printf_i+0x32>
 800a108:	2f00      	cmp	r7, #0
 800a10a:	f000 80d8 	beq.w	800a2be <_printf_i+0x1d2>
 800a10e:	2f58      	cmp	r7, #88	; 0x58
 800a110:	f000 80a3 	beq.w	800a25a <_printf_i+0x16e>
 800a114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a11c:	e03a      	b.n	800a194 <_printf_i+0xa8>
 800a11e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a122:	2b15      	cmp	r3, #21
 800a124:	d8f6      	bhi.n	800a114 <_printf_i+0x28>
 800a126:	a101      	add	r1, pc, #4	; (adr r1, 800a12c <_printf_i+0x40>)
 800a128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a12c:	0800a185 	.word	0x0800a185
 800a130:	0800a199 	.word	0x0800a199
 800a134:	0800a115 	.word	0x0800a115
 800a138:	0800a115 	.word	0x0800a115
 800a13c:	0800a115 	.word	0x0800a115
 800a140:	0800a115 	.word	0x0800a115
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a115 	.word	0x0800a115
 800a14c:	0800a115 	.word	0x0800a115
 800a150:	0800a115 	.word	0x0800a115
 800a154:	0800a115 	.word	0x0800a115
 800a158:	0800a2a5 	.word	0x0800a2a5
 800a15c:	0800a1c9 	.word	0x0800a1c9
 800a160:	0800a287 	.word	0x0800a287
 800a164:	0800a115 	.word	0x0800a115
 800a168:	0800a115 	.word	0x0800a115
 800a16c:	0800a2c7 	.word	0x0800a2c7
 800a170:	0800a115 	.word	0x0800a115
 800a174:	0800a1c9 	.word	0x0800a1c9
 800a178:	0800a115 	.word	0x0800a115
 800a17c:	0800a115 	.word	0x0800a115
 800a180:	0800a28f 	.word	0x0800a28f
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	1d1a      	adds	r2, r3, #4
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	602a      	str	r2, [r5, #0]
 800a18c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a194:	2301      	movs	r3, #1
 800a196:	e0a3      	b.n	800a2e0 <_printf_i+0x1f4>
 800a198:	6820      	ldr	r0, [r4, #0]
 800a19a:	6829      	ldr	r1, [r5, #0]
 800a19c:	0606      	lsls	r6, r0, #24
 800a19e:	f101 0304 	add.w	r3, r1, #4
 800a1a2:	d50a      	bpl.n	800a1ba <_printf_i+0xce>
 800a1a4:	680e      	ldr	r6, [r1, #0]
 800a1a6:	602b      	str	r3, [r5, #0]
 800a1a8:	2e00      	cmp	r6, #0
 800a1aa:	da03      	bge.n	800a1b4 <_printf_i+0xc8>
 800a1ac:	232d      	movs	r3, #45	; 0x2d
 800a1ae:	4276      	negs	r6, r6
 800a1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b4:	485e      	ldr	r0, [pc, #376]	; (800a330 <_printf_i+0x244>)
 800a1b6:	230a      	movs	r3, #10
 800a1b8:	e019      	b.n	800a1ee <_printf_i+0x102>
 800a1ba:	680e      	ldr	r6, [r1, #0]
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1c2:	bf18      	it	ne
 800a1c4:	b236      	sxthne	r6, r6
 800a1c6:	e7ef      	b.n	800a1a8 <_printf_i+0xbc>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	6820      	ldr	r0, [r4, #0]
 800a1cc:	1d19      	adds	r1, r3, #4
 800a1ce:	6029      	str	r1, [r5, #0]
 800a1d0:	0601      	lsls	r1, r0, #24
 800a1d2:	d501      	bpl.n	800a1d8 <_printf_i+0xec>
 800a1d4:	681e      	ldr	r6, [r3, #0]
 800a1d6:	e002      	b.n	800a1de <_printf_i+0xf2>
 800a1d8:	0646      	lsls	r6, r0, #25
 800a1da:	d5fb      	bpl.n	800a1d4 <_printf_i+0xe8>
 800a1dc:	881e      	ldrh	r6, [r3, #0]
 800a1de:	4854      	ldr	r0, [pc, #336]	; (800a330 <_printf_i+0x244>)
 800a1e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1e2:	bf0c      	ite	eq
 800a1e4:	2308      	moveq	r3, #8
 800a1e6:	230a      	movne	r3, #10
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1ee:	6865      	ldr	r5, [r4, #4]
 800a1f0:	60a5      	str	r5, [r4, #8]
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	bfa2      	ittt	ge
 800a1f6:	6821      	ldrge	r1, [r4, #0]
 800a1f8:	f021 0104 	bicge.w	r1, r1, #4
 800a1fc:	6021      	strge	r1, [r4, #0]
 800a1fe:	b90e      	cbnz	r6, 800a204 <_printf_i+0x118>
 800a200:	2d00      	cmp	r5, #0
 800a202:	d04d      	beq.n	800a2a0 <_printf_i+0x1b4>
 800a204:	4615      	mov	r5, r2
 800a206:	fbb6 f1f3 	udiv	r1, r6, r3
 800a20a:	fb03 6711 	mls	r7, r3, r1, r6
 800a20e:	5dc7      	ldrb	r7, [r0, r7]
 800a210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a214:	4637      	mov	r7, r6
 800a216:	42bb      	cmp	r3, r7
 800a218:	460e      	mov	r6, r1
 800a21a:	d9f4      	bls.n	800a206 <_printf_i+0x11a>
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d10b      	bne.n	800a238 <_printf_i+0x14c>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	07de      	lsls	r6, r3, #31
 800a224:	d508      	bpl.n	800a238 <_printf_i+0x14c>
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	6861      	ldr	r1, [r4, #4]
 800a22a:	4299      	cmp	r1, r3
 800a22c:	bfde      	ittt	le
 800a22e:	2330      	movle	r3, #48	; 0x30
 800a230:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a234:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a238:	1b52      	subs	r2, r2, r5
 800a23a:	6122      	str	r2, [r4, #16]
 800a23c:	f8cd a000 	str.w	sl, [sp]
 800a240:	464b      	mov	r3, r9
 800a242:	aa03      	add	r2, sp, #12
 800a244:	4621      	mov	r1, r4
 800a246:	4640      	mov	r0, r8
 800a248:	f7ff fee2 	bl	800a010 <_printf_common>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d14c      	bne.n	800a2ea <_printf_i+0x1fe>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b004      	add	sp, #16
 800a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25a:	4835      	ldr	r0, [pc, #212]	; (800a330 <_printf_i+0x244>)
 800a25c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a260:	6829      	ldr	r1, [r5, #0]
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	f851 6b04 	ldr.w	r6, [r1], #4
 800a268:	6029      	str	r1, [r5, #0]
 800a26a:	061d      	lsls	r5, r3, #24
 800a26c:	d514      	bpl.n	800a298 <_printf_i+0x1ac>
 800a26e:	07df      	lsls	r7, r3, #31
 800a270:	bf44      	itt	mi
 800a272:	f043 0320 	orrmi.w	r3, r3, #32
 800a276:	6023      	strmi	r3, [r4, #0]
 800a278:	b91e      	cbnz	r6, 800a282 <_printf_i+0x196>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	f023 0320 	bic.w	r3, r3, #32
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	2310      	movs	r3, #16
 800a284:	e7b0      	b.n	800a1e8 <_printf_i+0xfc>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f043 0320 	orr.w	r3, r3, #32
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	2378      	movs	r3, #120	; 0x78
 800a290:	4828      	ldr	r0, [pc, #160]	; (800a334 <_printf_i+0x248>)
 800a292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a296:	e7e3      	b.n	800a260 <_printf_i+0x174>
 800a298:	0659      	lsls	r1, r3, #25
 800a29a:	bf48      	it	mi
 800a29c:	b2b6      	uxthmi	r6, r6
 800a29e:	e7e6      	b.n	800a26e <_printf_i+0x182>
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	e7bb      	b.n	800a21c <_printf_i+0x130>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	6826      	ldr	r6, [r4, #0]
 800a2a8:	6961      	ldr	r1, [r4, #20]
 800a2aa:	1d18      	adds	r0, r3, #4
 800a2ac:	6028      	str	r0, [r5, #0]
 800a2ae:	0635      	lsls	r5, r6, #24
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	d501      	bpl.n	800a2b8 <_printf_i+0x1cc>
 800a2b4:	6019      	str	r1, [r3, #0]
 800a2b6:	e002      	b.n	800a2be <_printf_i+0x1d2>
 800a2b8:	0670      	lsls	r0, r6, #25
 800a2ba:	d5fb      	bpl.n	800a2b4 <_printf_i+0x1c8>
 800a2bc:	8019      	strh	r1, [r3, #0]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	4615      	mov	r5, r2
 800a2c4:	e7ba      	b.n	800a23c <_printf_i+0x150>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	1d1a      	adds	r2, r3, #4
 800a2ca:	602a      	str	r2, [r5, #0]
 800a2cc:	681d      	ldr	r5, [r3, #0]
 800a2ce:	6862      	ldr	r2, [r4, #4]
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f7f5 ff5c 	bl	8000190 <memchr>
 800a2d8:	b108      	cbz	r0, 800a2de <_printf_i+0x1f2>
 800a2da:	1b40      	subs	r0, r0, r5
 800a2dc:	6060      	str	r0, [r4, #4]
 800a2de:	6863      	ldr	r3, [r4, #4]
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e8:	e7a8      	b.n	800a23c <_printf_i+0x150>
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	47d0      	blx	sl
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d0ab      	beq.n	800a250 <_printf_i+0x164>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	079b      	lsls	r3, r3, #30
 800a2fc:	d413      	bmi.n	800a326 <_printf_i+0x23a>
 800a2fe:	68e0      	ldr	r0, [r4, #12]
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	4298      	cmp	r0, r3
 800a304:	bfb8      	it	lt
 800a306:	4618      	movlt	r0, r3
 800a308:	e7a4      	b.n	800a254 <_printf_i+0x168>
 800a30a:	2301      	movs	r3, #1
 800a30c:	4632      	mov	r2, r6
 800a30e:	4649      	mov	r1, r9
 800a310:	4640      	mov	r0, r8
 800a312:	47d0      	blx	sl
 800a314:	3001      	adds	r0, #1
 800a316:	d09b      	beq.n	800a250 <_printf_i+0x164>
 800a318:	3501      	adds	r5, #1
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	9903      	ldr	r1, [sp, #12]
 800a31e:	1a5b      	subs	r3, r3, r1
 800a320:	42ab      	cmp	r3, r5
 800a322:	dcf2      	bgt.n	800a30a <_printf_i+0x21e>
 800a324:	e7eb      	b.n	800a2fe <_printf_i+0x212>
 800a326:	2500      	movs	r5, #0
 800a328:	f104 0619 	add.w	r6, r4, #25
 800a32c:	e7f5      	b.n	800a31a <_printf_i+0x22e>
 800a32e:	bf00      	nop
 800a330:	0800e962 	.word	0x0800e962
 800a334:	0800e973 	.word	0x0800e973

0800a338 <_scanf_float>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	b087      	sub	sp, #28
 800a33e:	4617      	mov	r7, r2
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	688b      	ldr	r3, [r1, #8]
 800a344:	1e5a      	subs	r2, r3, #1
 800a346:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a34a:	bf83      	ittte	hi
 800a34c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a350:	195b      	addhi	r3, r3, r5
 800a352:	9302      	strhi	r3, [sp, #8]
 800a354:	2300      	movls	r3, #0
 800a356:	bf86      	itte	hi
 800a358:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a35c:	608b      	strhi	r3, [r1, #8]
 800a35e:	9302      	strls	r3, [sp, #8]
 800a360:	680b      	ldr	r3, [r1, #0]
 800a362:	468b      	mov	fp, r1
 800a364:	2500      	movs	r5, #0
 800a366:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a36a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a36e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a372:	4680      	mov	r8, r0
 800a374:	460c      	mov	r4, r1
 800a376:	465e      	mov	r6, fp
 800a378:	46aa      	mov	sl, r5
 800a37a:	46a9      	mov	r9, r5
 800a37c:	9501      	str	r5, [sp, #4]
 800a37e:	68a2      	ldr	r2, [r4, #8]
 800a380:	b152      	cbz	r2, 800a398 <_scanf_float+0x60>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b4e      	cmp	r3, #78	; 0x4e
 800a388:	d864      	bhi.n	800a454 <_scanf_float+0x11c>
 800a38a:	2b40      	cmp	r3, #64	; 0x40
 800a38c:	d83c      	bhi.n	800a408 <_scanf_float+0xd0>
 800a38e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a392:	b2c8      	uxtb	r0, r1
 800a394:	280e      	cmp	r0, #14
 800a396:	d93a      	bls.n	800a40e <_scanf_float+0xd6>
 800a398:	f1b9 0f00 	cmp.w	r9, #0
 800a39c:	d003      	beq.n	800a3a6 <_scanf_float+0x6e>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3aa:	f1ba 0f01 	cmp.w	sl, #1
 800a3ae:	f200 8113 	bhi.w	800a5d8 <_scanf_float+0x2a0>
 800a3b2:	455e      	cmp	r6, fp
 800a3b4:	f200 8105 	bhi.w	800a5c2 <_scanf_float+0x28a>
 800a3b8:	2501      	movs	r5, #1
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	b007      	add	sp, #28
 800a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a3c6:	2a0d      	cmp	r2, #13
 800a3c8:	d8e6      	bhi.n	800a398 <_scanf_float+0x60>
 800a3ca:	a101      	add	r1, pc, #4	; (adr r1, 800a3d0 <_scanf_float+0x98>)
 800a3cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3d0:	0800a50f 	.word	0x0800a50f
 800a3d4:	0800a399 	.word	0x0800a399
 800a3d8:	0800a399 	.word	0x0800a399
 800a3dc:	0800a399 	.word	0x0800a399
 800a3e0:	0800a56f 	.word	0x0800a56f
 800a3e4:	0800a547 	.word	0x0800a547
 800a3e8:	0800a399 	.word	0x0800a399
 800a3ec:	0800a399 	.word	0x0800a399
 800a3f0:	0800a51d 	.word	0x0800a51d
 800a3f4:	0800a399 	.word	0x0800a399
 800a3f8:	0800a399 	.word	0x0800a399
 800a3fc:	0800a399 	.word	0x0800a399
 800a400:	0800a399 	.word	0x0800a399
 800a404:	0800a4d5 	.word	0x0800a4d5
 800a408:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a40c:	e7db      	b.n	800a3c6 <_scanf_float+0x8e>
 800a40e:	290e      	cmp	r1, #14
 800a410:	d8c2      	bhi.n	800a398 <_scanf_float+0x60>
 800a412:	a001      	add	r0, pc, #4	; (adr r0, 800a418 <_scanf_float+0xe0>)
 800a414:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a418:	0800a4c7 	.word	0x0800a4c7
 800a41c:	0800a399 	.word	0x0800a399
 800a420:	0800a4c7 	.word	0x0800a4c7
 800a424:	0800a55b 	.word	0x0800a55b
 800a428:	0800a399 	.word	0x0800a399
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a4b1 	.word	0x0800a4b1
 800a434:	0800a4b1 	.word	0x0800a4b1
 800a438:	0800a4b1 	.word	0x0800a4b1
 800a43c:	0800a4b1 	.word	0x0800a4b1
 800a440:	0800a4b1 	.word	0x0800a4b1
 800a444:	0800a4b1 	.word	0x0800a4b1
 800a448:	0800a4b1 	.word	0x0800a4b1
 800a44c:	0800a4b1 	.word	0x0800a4b1
 800a450:	0800a4b1 	.word	0x0800a4b1
 800a454:	2b6e      	cmp	r3, #110	; 0x6e
 800a456:	d809      	bhi.n	800a46c <_scanf_float+0x134>
 800a458:	2b60      	cmp	r3, #96	; 0x60
 800a45a:	d8b2      	bhi.n	800a3c2 <_scanf_float+0x8a>
 800a45c:	2b54      	cmp	r3, #84	; 0x54
 800a45e:	d077      	beq.n	800a550 <_scanf_float+0x218>
 800a460:	2b59      	cmp	r3, #89	; 0x59
 800a462:	d199      	bne.n	800a398 <_scanf_float+0x60>
 800a464:	2d07      	cmp	r5, #7
 800a466:	d197      	bne.n	800a398 <_scanf_float+0x60>
 800a468:	2508      	movs	r5, #8
 800a46a:	e029      	b.n	800a4c0 <_scanf_float+0x188>
 800a46c:	2b74      	cmp	r3, #116	; 0x74
 800a46e:	d06f      	beq.n	800a550 <_scanf_float+0x218>
 800a470:	2b79      	cmp	r3, #121	; 0x79
 800a472:	e7f6      	b.n	800a462 <_scanf_float+0x12a>
 800a474:	6821      	ldr	r1, [r4, #0]
 800a476:	05c8      	lsls	r0, r1, #23
 800a478:	d51a      	bpl.n	800a4b0 <_scanf_float+0x178>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a480:	6021      	str	r1, [r4, #0]
 800a482:	f109 0901 	add.w	r9, r9, #1
 800a486:	b11b      	cbz	r3, 800a490 <_scanf_float+0x158>
 800a488:	3b01      	subs	r3, #1
 800a48a:	3201      	adds	r2, #1
 800a48c:	9302      	str	r3, [sp, #8]
 800a48e:	60a2      	str	r2, [r4, #8]
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	3b01      	subs	r3, #1
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	3301      	adds	r3, #1
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	f340 8084 	ble.w	800a5b0 <_scanf_float+0x278>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	e766      	b.n	800a37e <_scanf_float+0x46>
 800a4b0:	eb1a 0f05 	cmn.w	sl, r5
 800a4b4:	f47f af70 	bne.w	800a398 <_scanf_float+0x60>
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a4be:	6022      	str	r2, [r4, #0]
 800a4c0:	f806 3b01 	strb.w	r3, [r6], #1
 800a4c4:	e7e4      	b.n	800a490 <_scanf_float+0x158>
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	0610      	lsls	r0, r2, #24
 800a4ca:	f57f af65 	bpl.w	800a398 <_scanf_float+0x60>
 800a4ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4d2:	e7f4      	b.n	800a4be <_scanf_float+0x186>
 800a4d4:	f1ba 0f00 	cmp.w	sl, #0
 800a4d8:	d10e      	bne.n	800a4f8 <_scanf_float+0x1c0>
 800a4da:	f1b9 0f00 	cmp.w	r9, #0
 800a4de:	d10e      	bne.n	800a4fe <_scanf_float+0x1c6>
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4ea:	d108      	bne.n	800a4fe <_scanf_float+0x1c6>
 800a4ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4f0:	6022      	str	r2, [r4, #0]
 800a4f2:	f04f 0a01 	mov.w	sl, #1
 800a4f6:	e7e3      	b.n	800a4c0 <_scanf_float+0x188>
 800a4f8:	f1ba 0f02 	cmp.w	sl, #2
 800a4fc:	d055      	beq.n	800a5aa <_scanf_float+0x272>
 800a4fe:	2d01      	cmp	r5, #1
 800a500:	d002      	beq.n	800a508 <_scanf_float+0x1d0>
 800a502:	2d04      	cmp	r5, #4
 800a504:	f47f af48 	bne.w	800a398 <_scanf_float+0x60>
 800a508:	3501      	adds	r5, #1
 800a50a:	b2ed      	uxtb	r5, r5
 800a50c:	e7d8      	b.n	800a4c0 <_scanf_float+0x188>
 800a50e:	f1ba 0f01 	cmp.w	sl, #1
 800a512:	f47f af41 	bne.w	800a398 <_scanf_float+0x60>
 800a516:	f04f 0a02 	mov.w	sl, #2
 800a51a:	e7d1      	b.n	800a4c0 <_scanf_float+0x188>
 800a51c:	b97d      	cbnz	r5, 800a53e <_scanf_float+0x206>
 800a51e:	f1b9 0f00 	cmp.w	r9, #0
 800a522:	f47f af3c 	bne.w	800a39e <_scanf_float+0x66>
 800a526:	6822      	ldr	r2, [r4, #0]
 800a528:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a52c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a530:	f47f af39 	bne.w	800a3a6 <_scanf_float+0x6e>
 800a534:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a538:	6022      	str	r2, [r4, #0]
 800a53a:	2501      	movs	r5, #1
 800a53c:	e7c0      	b.n	800a4c0 <_scanf_float+0x188>
 800a53e:	2d03      	cmp	r5, #3
 800a540:	d0e2      	beq.n	800a508 <_scanf_float+0x1d0>
 800a542:	2d05      	cmp	r5, #5
 800a544:	e7de      	b.n	800a504 <_scanf_float+0x1cc>
 800a546:	2d02      	cmp	r5, #2
 800a548:	f47f af26 	bne.w	800a398 <_scanf_float+0x60>
 800a54c:	2503      	movs	r5, #3
 800a54e:	e7b7      	b.n	800a4c0 <_scanf_float+0x188>
 800a550:	2d06      	cmp	r5, #6
 800a552:	f47f af21 	bne.w	800a398 <_scanf_float+0x60>
 800a556:	2507      	movs	r5, #7
 800a558:	e7b2      	b.n	800a4c0 <_scanf_float+0x188>
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	0591      	lsls	r1, r2, #22
 800a55e:	f57f af1b 	bpl.w	800a398 <_scanf_float+0x60>
 800a562:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a566:	6022      	str	r2, [r4, #0]
 800a568:	f8cd 9004 	str.w	r9, [sp, #4]
 800a56c:	e7a8      	b.n	800a4c0 <_scanf_float+0x188>
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a574:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a578:	d006      	beq.n	800a588 <_scanf_float+0x250>
 800a57a:	0550      	lsls	r0, r2, #21
 800a57c:	f57f af0c 	bpl.w	800a398 <_scanf_float+0x60>
 800a580:	f1b9 0f00 	cmp.w	r9, #0
 800a584:	f43f af0f 	beq.w	800a3a6 <_scanf_float+0x6e>
 800a588:	0591      	lsls	r1, r2, #22
 800a58a:	bf58      	it	pl
 800a58c:	9901      	ldrpl	r1, [sp, #4]
 800a58e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a592:	bf58      	it	pl
 800a594:	eba9 0101 	subpl.w	r1, r9, r1
 800a598:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a59c:	bf58      	it	pl
 800a59e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	f04f 0900 	mov.w	r9, #0
 800a5a8:	e78a      	b.n	800a4c0 <_scanf_float+0x188>
 800a5aa:	f04f 0a03 	mov.w	sl, #3
 800a5ae:	e787      	b.n	800a4c0 <_scanf_float+0x188>
 800a5b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4798      	blx	r3
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aedf 	beq.w	800a37e <_scanf_float+0x46>
 800a5c0:	e6ea      	b.n	800a398 <_scanf_float+0x60>
 800a5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5ca:	463a      	mov	r2, r7
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4798      	blx	r3
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	e6ec      	b.n	800a3b2 <_scanf_float+0x7a>
 800a5d8:	1e6b      	subs	r3, r5, #1
 800a5da:	2b06      	cmp	r3, #6
 800a5dc:	d825      	bhi.n	800a62a <_scanf_float+0x2f2>
 800a5de:	2d02      	cmp	r5, #2
 800a5e0:	d836      	bhi.n	800a650 <_scanf_float+0x318>
 800a5e2:	455e      	cmp	r6, fp
 800a5e4:	f67f aee8 	bls.w	800a3b8 <_scanf_float+0x80>
 800a5e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5f0:	463a      	mov	r2, r7
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4798      	blx	r3
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	e7f1      	b.n	800a5e2 <_scanf_float+0x2aa>
 800a5fe:	9802      	ldr	r0, [sp, #8]
 800a600:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a604:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a608:	9002      	str	r0, [sp, #8]
 800a60a:	463a      	mov	r2, r7
 800a60c:	4640      	mov	r0, r8
 800a60e:	4798      	blx	r3
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	3b01      	subs	r3, #1
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a61a:	fa5f fa8a 	uxtb.w	sl, sl
 800a61e:	f1ba 0f02 	cmp.w	sl, #2
 800a622:	d1ec      	bne.n	800a5fe <_scanf_float+0x2c6>
 800a624:	3d03      	subs	r5, #3
 800a626:	b2ed      	uxtb	r5, r5
 800a628:	1b76      	subs	r6, r6, r5
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	05da      	lsls	r2, r3, #23
 800a62e:	d52f      	bpl.n	800a690 <_scanf_float+0x358>
 800a630:	055b      	lsls	r3, r3, #21
 800a632:	d510      	bpl.n	800a656 <_scanf_float+0x31e>
 800a634:	455e      	cmp	r6, fp
 800a636:	f67f aebf 	bls.w	800a3b8 <_scanf_float+0x80>
 800a63a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a63e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a642:	463a      	mov	r2, r7
 800a644:	4640      	mov	r0, r8
 800a646:	4798      	blx	r3
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	e7f1      	b.n	800a634 <_scanf_float+0x2fc>
 800a650:	46aa      	mov	sl, r5
 800a652:	9602      	str	r6, [sp, #8]
 800a654:	e7df      	b.n	800a616 <_scanf_float+0x2de>
 800a656:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	2965      	cmp	r1, #101	; 0x65
 800a65e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a662:	f106 35ff 	add.w	r5, r6, #4294967295
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	d00c      	beq.n	800a684 <_scanf_float+0x34c>
 800a66a:	2945      	cmp	r1, #69	; 0x45
 800a66c:	d00a      	beq.n	800a684 <_scanf_float+0x34c>
 800a66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a672:	463a      	mov	r2, r7
 800a674:	4640      	mov	r0, r8
 800a676:	4798      	blx	r3
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a67e:	3b01      	subs	r3, #1
 800a680:	1eb5      	subs	r5, r6, #2
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a688:	463a      	mov	r2, r7
 800a68a:	4640      	mov	r0, r8
 800a68c:	4798      	blx	r3
 800a68e:	462e      	mov	r6, r5
 800a690:	6825      	ldr	r5, [r4, #0]
 800a692:	f015 0510 	ands.w	r5, r5, #16
 800a696:	d159      	bne.n	800a74c <_scanf_float+0x414>
 800a698:	7035      	strb	r5, [r6, #0]
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a4:	d11b      	bne.n	800a6de <_scanf_float+0x3a6>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	454b      	cmp	r3, r9
 800a6aa:	eba3 0209 	sub.w	r2, r3, r9
 800a6ae:	d123      	bne.n	800a6f8 <_scanf_float+0x3c0>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	f000 ff99 	bl	800b5ec <_strtod_r>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	f012 0f02 	tst.w	r2, #2
 800a6c2:	ec57 6b10 	vmov	r6, r7, d0
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	d021      	beq.n	800a70e <_scanf_float+0x3d6>
 800a6ca:	9903      	ldr	r1, [sp, #12]
 800a6cc:	1d1a      	adds	r2, r3, #4
 800a6ce:	600a      	str	r2, [r1, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	e9c3 6700 	strd	r6, r7, [r3]
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	60e3      	str	r3, [r4, #12]
 800a6dc:	e66d      	b.n	800a3ba <_scanf_float+0x82>
 800a6de:	9b04      	ldr	r3, [sp, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0e5      	beq.n	800a6b0 <_scanf_float+0x378>
 800a6e4:	9905      	ldr	r1, [sp, #20]
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	3101      	adds	r1, #1
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	f001 f805 	bl	800b6fc <_strtol_r>
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	9e05      	ldr	r6, [sp, #20]
 800a6f6:	1ac2      	subs	r2, r0, r3
 800a6f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a6fc:	429e      	cmp	r6, r3
 800a6fe:	bf28      	it	cs
 800a700:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a704:	4912      	ldr	r1, [pc, #72]	; (800a750 <_scanf_float+0x418>)
 800a706:	4630      	mov	r0, r6
 800a708:	f000 f8fe 	bl	800a908 <siprintf>
 800a70c:	e7d0      	b.n	800a6b0 <_scanf_float+0x378>
 800a70e:	9903      	ldr	r1, [sp, #12]
 800a710:	f012 0f04 	tst.w	r2, #4
 800a714:	f103 0204 	add.w	r2, r3, #4
 800a718:	600a      	str	r2, [r1, #0]
 800a71a:	d1d9      	bne.n	800a6d0 <_scanf_float+0x398>
 800a71c:	f8d3 8000 	ldr.w	r8, [r3]
 800a720:	ee10 2a10 	vmov	r2, s0
 800a724:	ee10 0a10 	vmov	r0, s0
 800a728:	463b      	mov	r3, r7
 800a72a:	4639      	mov	r1, r7
 800a72c:	f7f6 f9d6 	bl	8000adc <__aeabi_dcmpun>
 800a730:	b128      	cbz	r0, 800a73e <_scanf_float+0x406>
 800a732:	4808      	ldr	r0, [pc, #32]	; (800a754 <_scanf_float+0x41c>)
 800a734:	f000 f8ae 	bl	800a894 <nanf>
 800a738:	ed88 0a00 	vstr	s0, [r8]
 800a73c:	e7cb      	b.n	800a6d6 <_scanf_float+0x39e>
 800a73e:	4630      	mov	r0, r6
 800a740:	4639      	mov	r1, r7
 800a742:	f7f6 fa29 	bl	8000b98 <__aeabi_d2f>
 800a746:	f8c8 0000 	str.w	r0, [r8]
 800a74a:	e7c4      	b.n	800a6d6 <_scanf_float+0x39e>
 800a74c:	2500      	movs	r5, #0
 800a74e:	e634      	b.n	800a3ba <_scanf_float+0x82>
 800a750:	0800e984 	.word	0x0800e984
 800a754:	0800edf8 	.word	0x0800edf8

0800a758 <iprintf>:
 800a758:	b40f      	push	{r0, r1, r2, r3}
 800a75a:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <iprintf+0x2c>)
 800a75c:	b513      	push	{r0, r1, r4, lr}
 800a75e:	681c      	ldr	r4, [r3, #0]
 800a760:	b124      	cbz	r4, 800a76c <iprintf+0x14>
 800a762:	69a3      	ldr	r3, [r4, #24]
 800a764:	b913      	cbnz	r3, 800a76c <iprintf+0x14>
 800a766:	4620      	mov	r0, r4
 800a768:	f002 f81e 	bl	800c7a8 <__sinit>
 800a76c:	ab05      	add	r3, sp, #20
 800a76e:	9a04      	ldr	r2, [sp, #16]
 800a770:	68a1      	ldr	r1, [r4, #8]
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	4620      	mov	r0, r4
 800a776:	f003 fb09 	bl	800dd8c <_vfiprintf_r>
 800a77a:	b002      	add	sp, #8
 800a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a780:	b004      	add	sp, #16
 800a782:	4770      	bx	lr
 800a784:	2000005c 	.word	0x2000005c

0800a788 <_puts_r>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	460e      	mov	r6, r1
 800a78c:	4605      	mov	r5, r0
 800a78e:	b118      	cbz	r0, 800a798 <_puts_r+0x10>
 800a790:	6983      	ldr	r3, [r0, #24]
 800a792:	b90b      	cbnz	r3, 800a798 <_puts_r+0x10>
 800a794:	f002 f808 	bl	800c7a8 <__sinit>
 800a798:	69ab      	ldr	r3, [r5, #24]
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	b913      	cbnz	r3, 800a7a4 <_puts_r+0x1c>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f002 f802 	bl	800c7a8 <__sinit>
 800a7a4:	4b2c      	ldr	r3, [pc, #176]	; (800a858 <_puts_r+0xd0>)
 800a7a6:	429c      	cmp	r4, r3
 800a7a8:	d120      	bne.n	800a7ec <_puts_r+0x64>
 800a7aa:	686c      	ldr	r4, [r5, #4]
 800a7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7ae:	07db      	lsls	r3, r3, #31
 800a7b0:	d405      	bmi.n	800a7be <_puts_r+0x36>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	0598      	lsls	r0, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_puts_r+0x36>
 800a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ba:	f002 fc06 	bl	800cfca <__retarget_lock_acquire_recursive>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	0719      	lsls	r1, r3, #28
 800a7c2:	d51d      	bpl.n	800a800 <_puts_r+0x78>
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	b1db      	cbz	r3, 800a800 <_puts_r+0x78>
 800a7c8:	3e01      	subs	r6, #1
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	60a3      	str	r3, [r4, #8]
 800a7d4:	bb39      	cbnz	r1, 800a826 <_puts_r+0x9e>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	da38      	bge.n	800a84c <_puts_r+0xc4>
 800a7da:	4622      	mov	r2, r4
 800a7dc:	210a      	movs	r1, #10
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 ff8e 	bl	800b700 <__swbuf_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d011      	beq.n	800a80c <_puts_r+0x84>
 800a7e8:	250a      	movs	r5, #10
 800a7ea:	e011      	b.n	800a810 <_puts_r+0x88>
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <_puts_r+0xd4>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d101      	bne.n	800a7f6 <_puts_r+0x6e>
 800a7f2:	68ac      	ldr	r4, [r5, #8]
 800a7f4:	e7da      	b.n	800a7ac <_puts_r+0x24>
 800a7f6:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <_puts_r+0xd8>)
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	bf08      	it	eq
 800a7fc:	68ec      	ldreq	r4, [r5, #12]
 800a7fe:	e7d5      	b.n	800a7ac <_puts_r+0x24>
 800a800:	4621      	mov	r1, r4
 800a802:	4628      	mov	r0, r5
 800a804:	f000 ffce 	bl	800b7a4 <__swsetup_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0dd      	beq.n	800a7c8 <_puts_r+0x40>
 800a80c:	f04f 35ff 	mov.w	r5, #4294967295
 800a810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a812:	07da      	lsls	r2, r3, #31
 800a814:	d405      	bmi.n	800a822 <_puts_r+0x9a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	059b      	lsls	r3, r3, #22
 800a81a:	d402      	bmi.n	800a822 <_puts_r+0x9a>
 800a81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81e:	f002 fbd5 	bl	800cfcc <__retarget_lock_release_recursive>
 800a822:	4628      	mov	r0, r5
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	2b00      	cmp	r3, #0
 800a828:	da04      	bge.n	800a834 <_puts_r+0xac>
 800a82a:	69a2      	ldr	r2, [r4, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	dc06      	bgt.n	800a83e <_puts_r+0xb6>
 800a830:	290a      	cmp	r1, #10
 800a832:	d004      	beq.n	800a83e <_puts_r+0xb6>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	6022      	str	r2, [r4, #0]
 800a83a:	7019      	strb	r1, [r3, #0]
 800a83c:	e7c5      	b.n	800a7ca <_puts_r+0x42>
 800a83e:	4622      	mov	r2, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f000 ff5d 	bl	800b700 <__swbuf_r>
 800a846:	3001      	adds	r0, #1
 800a848:	d1bf      	bne.n	800a7ca <_puts_r+0x42>
 800a84a:	e7df      	b.n	800a80c <_puts_r+0x84>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	250a      	movs	r5, #10
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	701d      	strb	r5, [r3, #0]
 800a856:	e7db      	b.n	800a810 <_puts_r+0x88>
 800a858:	0800eb94 	.word	0x0800eb94
 800a85c:	0800ebb4 	.word	0x0800ebb4
 800a860:	0800eb74 	.word	0x0800eb74

0800a864 <puts>:
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <puts+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f7ff bf8d 	b.w	800a788 <_puts_r>
 800a86e:	bf00      	nop
 800a870:	2000005c 	.word	0x2000005c

0800a874 <_sbrk_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d06      	ldr	r5, [pc, #24]	; (800a890 <_sbrk_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	f7f9 faac 	bl	8003ddc <_sbrk>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_sbrk_r+0x1a>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_sbrk_r+0x1a>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000814 	.word	0x20000814

0800a894 <nanf>:
 800a894:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a89c <nanf+0x8>
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	7fc00000 	.word	0x7fc00000

0800a8a0 <sniprintf>:
 800a8a0:	b40c      	push	{r2, r3}
 800a8a2:	b530      	push	{r4, r5, lr}
 800a8a4:	4b17      	ldr	r3, [pc, #92]	; (800a904 <sniprintf+0x64>)
 800a8a6:	1e0c      	subs	r4, r1, #0
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	b09d      	sub	sp, #116	; 0x74
 800a8ac:	da08      	bge.n	800a8c0 <sniprintf+0x20>
 800a8ae:	238b      	movs	r3, #139	; 0x8b
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	b01d      	add	sp, #116	; 0x74
 800a8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8bc:	b002      	add	sp, #8
 800a8be:	4770      	bx	lr
 800a8c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8c8:	bf14      	ite	ne
 800a8ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8ce:	4623      	moveq	r3, r4
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	9307      	str	r3, [sp, #28]
 800a8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8d8:	9002      	str	r0, [sp, #8]
 800a8da:	9006      	str	r0, [sp, #24]
 800a8dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8e2:	ab21      	add	r3, sp, #132	; 0x84
 800a8e4:	a902      	add	r1, sp, #8
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	f003 f925 	bl	800db38 <_svfiprintf_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	bfbc      	itt	lt
 800a8f2:	238b      	movlt	r3, #139	; 0x8b
 800a8f4:	602b      	strlt	r3, [r5, #0]
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	d0dd      	beq.n	800a8b6 <sniprintf+0x16>
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e7d9      	b.n	800a8b6 <sniprintf+0x16>
 800a902:	bf00      	nop
 800a904:	2000005c 	.word	0x2000005c

0800a908 <siprintf>:
 800a908:	b40e      	push	{r1, r2, r3}
 800a90a:	b500      	push	{lr}
 800a90c:	b09c      	sub	sp, #112	; 0x70
 800a90e:	ab1d      	add	r3, sp, #116	; 0x74
 800a910:	9002      	str	r0, [sp, #8]
 800a912:	9006      	str	r0, [sp, #24]
 800a914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a918:	4809      	ldr	r0, [pc, #36]	; (800a940 <siprintf+0x38>)
 800a91a:	9107      	str	r1, [sp, #28]
 800a91c:	9104      	str	r1, [sp, #16]
 800a91e:	4909      	ldr	r1, [pc, #36]	; (800a944 <siprintf+0x3c>)
 800a920:	f853 2b04 	ldr.w	r2, [r3], #4
 800a924:	9105      	str	r1, [sp, #20]
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	a902      	add	r1, sp, #8
 800a92c:	f003 f904 	bl	800db38 <_svfiprintf_r>
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	b01c      	add	sp, #112	; 0x70
 800a938:	f85d eb04 	ldr.w	lr, [sp], #4
 800a93c:	b003      	add	sp, #12
 800a93e:	4770      	bx	lr
 800a940:	2000005c 	.word	0x2000005c
 800a944:	ffff0208 	.word	0xffff0208

0800a948 <strcat>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	4602      	mov	r2, r0
 800a94c:	7814      	ldrb	r4, [r2, #0]
 800a94e:	4613      	mov	r3, r2
 800a950:	3201      	adds	r2, #1
 800a952:	2c00      	cmp	r4, #0
 800a954:	d1fa      	bne.n	800a94c <strcat+0x4>
 800a956:	3b01      	subs	r3, #1
 800a958:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a95c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a960:	2a00      	cmp	r2, #0
 800a962:	d1f9      	bne.n	800a958 <strcat+0x10>
 800a964:	bd10      	pop	{r4, pc}

0800a966 <strcpy>:
 800a966:	4603      	mov	r3, r0
 800a968:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a96c:	f803 2b01 	strb.w	r2, [r3], #1
 800a970:	2a00      	cmp	r2, #0
 800a972:	d1f9      	bne.n	800a968 <strcpy+0x2>
 800a974:	4770      	bx	lr

0800a976 <strstr>:
 800a976:	780a      	ldrb	r2, [r1, #0]
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	b96a      	cbnz	r2, 800a998 <strstr+0x22>
 800a97c:	bd70      	pop	{r4, r5, r6, pc}
 800a97e:	429a      	cmp	r2, r3
 800a980:	d109      	bne.n	800a996 <strstr+0x20>
 800a982:	460c      	mov	r4, r1
 800a984:	4605      	mov	r5, r0
 800a986:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0f6      	beq.n	800a97c <strstr+0x6>
 800a98e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a992:	429e      	cmp	r6, r3
 800a994:	d0f7      	beq.n	800a986 <strstr+0x10>
 800a996:	3001      	adds	r0, #1
 800a998:	7803      	ldrb	r3, [r0, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1ef      	bne.n	800a97e <strstr+0x8>
 800a99e:	4618      	mov	r0, r3
 800a9a0:	e7ec      	b.n	800a97c <strstr+0x6>

0800a9a2 <sulp>:
 800a9a2:	b570      	push	{r4, r5, r6, lr}
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	ec45 4b10 	vmov	d0, r4, r5
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	f002 ff03 	bl	800d7b8 <__ulp>
 800a9b2:	ec51 0b10 	vmov	r0, r1, d0
 800a9b6:	b17e      	cbz	r6, 800a9d8 <sulp+0x36>
 800a9b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd09      	ble.n	800a9d8 <sulp+0x36>
 800a9c4:	051b      	lsls	r3, r3, #20
 800a9c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9ca:	2400      	movs	r4, #0
 800a9cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	462b      	mov	r3, r5
 800a9d4:	f7f5 fde8 	bl	80005a8 <__aeabi_dmul>
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	0000      	movs	r0, r0
 800a9dc:	0000      	movs	r0, r0
	...

0800a9e0 <_strtod_l>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	b09d      	sub	sp, #116	; 0x74
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9318      	str	r3, [sp, #96]	; 0x60
 800a9f0:	4ba2      	ldr	r3, [pc, #648]	; (800ac7c <_strtod_l+0x29c>)
 800a9f2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	4688      	mov	r8, r1
 800a9fe:	f7f5 fbbf 	bl	8000180 <strlen>
 800aa02:	f04f 0a00 	mov.w	sl, #0
 800aa06:	4605      	mov	r5, r0
 800aa08:	f04f 0b00 	mov.w	fp, #0
 800aa0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa12:	781a      	ldrb	r2, [r3, #0]
 800aa14:	2a2b      	cmp	r2, #43	; 0x2b
 800aa16:	d04e      	beq.n	800aab6 <_strtod_l+0xd6>
 800aa18:	d83b      	bhi.n	800aa92 <_strtod_l+0xb2>
 800aa1a:	2a0d      	cmp	r2, #13
 800aa1c:	d834      	bhi.n	800aa88 <_strtod_l+0xa8>
 800aa1e:	2a08      	cmp	r2, #8
 800aa20:	d834      	bhi.n	800aa8c <_strtod_l+0xac>
 800aa22:	2a00      	cmp	r2, #0
 800aa24:	d03e      	beq.n	800aaa4 <_strtod_l+0xc4>
 800aa26:	2300      	movs	r3, #0
 800aa28:	930a      	str	r3, [sp, #40]	; 0x28
 800aa2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aa2c:	7833      	ldrb	r3, [r6, #0]
 800aa2e:	2b30      	cmp	r3, #48	; 0x30
 800aa30:	f040 80b0 	bne.w	800ab94 <_strtod_l+0x1b4>
 800aa34:	7873      	ldrb	r3, [r6, #1]
 800aa36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa3a:	2b58      	cmp	r3, #88	; 0x58
 800aa3c:	d168      	bne.n	800ab10 <_strtod_l+0x130>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	ab18      	add	r3, sp, #96	; 0x60
 800aa44:	9702      	str	r7, [sp, #8]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4a8d      	ldr	r2, [pc, #564]	; (800ac80 <_strtod_l+0x2a0>)
 800aa4a:	ab19      	add	r3, sp, #100	; 0x64
 800aa4c:	a917      	add	r1, sp, #92	; 0x5c
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 ffae 	bl	800c9b0 <__gethex>
 800aa54:	f010 0707 	ands.w	r7, r0, #7
 800aa58:	4605      	mov	r5, r0
 800aa5a:	d005      	beq.n	800aa68 <_strtod_l+0x88>
 800aa5c:	2f06      	cmp	r7, #6
 800aa5e:	d12c      	bne.n	800aaba <_strtod_l+0xda>
 800aa60:	3601      	adds	r6, #1
 800aa62:	2300      	movs	r3, #0
 800aa64:	9617      	str	r6, [sp, #92]	; 0x5c
 800aa66:	930a      	str	r3, [sp, #40]	; 0x28
 800aa68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 8590 	bne.w	800b590 <_strtod_l+0xbb0>
 800aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa72:	b1eb      	cbz	r3, 800aab0 <_strtod_l+0xd0>
 800aa74:	4652      	mov	r2, sl
 800aa76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa7a:	ec43 2b10 	vmov	d0, r2, r3
 800aa7e:	b01d      	add	sp, #116	; 0x74
 800aa80:	ecbd 8b02 	vpop	{d8}
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa88:	2a20      	cmp	r2, #32
 800aa8a:	d1cc      	bne.n	800aa26 <_strtod_l+0x46>
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa90:	e7be      	b.n	800aa10 <_strtod_l+0x30>
 800aa92:	2a2d      	cmp	r2, #45	; 0x2d
 800aa94:	d1c7      	bne.n	800aa26 <_strtod_l+0x46>
 800aa96:	2201      	movs	r2, #1
 800aa98:	920a      	str	r2, [sp, #40]	; 0x28
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1c2      	bne.n	800aa2a <_strtod_l+0x4a>
 800aaa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aaa6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f040 856e 	bne.w	800b58c <_strtod_l+0xbac>
 800aab0:	4652      	mov	r2, sl
 800aab2:	465b      	mov	r3, fp
 800aab4:	e7e1      	b.n	800aa7a <_strtod_l+0x9a>
 800aab6:	2200      	movs	r2, #0
 800aab8:	e7ee      	b.n	800aa98 <_strtod_l+0xb8>
 800aaba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aabc:	b13a      	cbz	r2, 800aace <_strtod_l+0xee>
 800aabe:	2135      	movs	r1, #53	; 0x35
 800aac0:	a81a      	add	r0, sp, #104	; 0x68
 800aac2:	f002 ff84 	bl	800d9ce <__copybits>
 800aac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aac8:	4620      	mov	r0, r4
 800aaca:	f002 fb43 	bl	800d154 <_Bfree>
 800aace:	3f01      	subs	r7, #1
 800aad0:	2f04      	cmp	r7, #4
 800aad2:	d806      	bhi.n	800aae2 <_strtod_l+0x102>
 800aad4:	e8df f007 	tbb	[pc, r7]
 800aad8:	1714030a 	.word	0x1714030a
 800aadc:	0a          	.byte	0x0a
 800aadd:	00          	.byte	0x00
 800aade:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aae2:	0728      	lsls	r0, r5, #28
 800aae4:	d5c0      	bpl.n	800aa68 <_strtod_l+0x88>
 800aae6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aaea:	e7bd      	b.n	800aa68 <_strtod_l+0x88>
 800aaec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800aaf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aaf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aaf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aafa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aafe:	e7f0      	b.n	800aae2 <_strtod_l+0x102>
 800ab00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ac84 <_strtod_l+0x2a4>
 800ab04:	e7ed      	b.n	800aae2 <_strtod_l+0x102>
 800ab06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ab0a:	f04f 3aff 	mov.w	sl, #4294967295
 800ab0e:	e7e8      	b.n	800aae2 <_strtod_l+0x102>
 800ab10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	2b30      	cmp	r3, #48	; 0x30
 800ab1a:	d0f9      	beq.n	800ab10 <_strtod_l+0x130>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0a3      	beq.n	800aa68 <_strtod_l+0x88>
 800ab20:	2301      	movs	r3, #1
 800ab22:	f04f 0900 	mov.w	r9, #0
 800ab26:	9304      	str	r3, [sp, #16]
 800ab28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ab30:	464f      	mov	r7, r9
 800ab32:	220a      	movs	r2, #10
 800ab34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ab36:	7806      	ldrb	r6, [r0, #0]
 800ab38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ab3c:	b2d9      	uxtb	r1, r3
 800ab3e:	2909      	cmp	r1, #9
 800ab40:	d92a      	bls.n	800ab98 <_strtod_l+0x1b8>
 800ab42:	9905      	ldr	r1, [sp, #20]
 800ab44:	462a      	mov	r2, r5
 800ab46:	f003 fa9e 	bl	800e086 <strncmp>
 800ab4a:	b398      	cbz	r0, 800abb4 <_strtod_l+0x1d4>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	4632      	mov	r2, r6
 800ab50:	463d      	mov	r5, r7
 800ab52:	9005      	str	r0, [sp, #20]
 800ab54:	4603      	mov	r3, r0
 800ab56:	2a65      	cmp	r2, #101	; 0x65
 800ab58:	d001      	beq.n	800ab5e <_strtod_l+0x17e>
 800ab5a:	2a45      	cmp	r2, #69	; 0x45
 800ab5c:	d118      	bne.n	800ab90 <_strtod_l+0x1b0>
 800ab5e:	b91d      	cbnz	r5, 800ab68 <_strtod_l+0x188>
 800ab60:	9a04      	ldr	r2, [sp, #16]
 800ab62:	4302      	orrs	r2, r0
 800ab64:	d09e      	beq.n	800aaa4 <_strtod_l+0xc4>
 800ab66:	2500      	movs	r5, #0
 800ab68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ab6c:	f108 0201 	add.w	r2, r8, #1
 800ab70:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ab76:	2a2b      	cmp	r2, #43	; 0x2b
 800ab78:	d075      	beq.n	800ac66 <_strtod_l+0x286>
 800ab7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7c:	d07b      	beq.n	800ac76 <_strtod_l+0x296>
 800ab7e:	f04f 0c00 	mov.w	ip, #0
 800ab82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab86:	2909      	cmp	r1, #9
 800ab88:	f240 8082 	bls.w	800ac90 <_strtod_l+0x2b0>
 800ab8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab90:	2600      	movs	r6, #0
 800ab92:	e09d      	b.n	800acd0 <_strtod_l+0x2f0>
 800ab94:	2300      	movs	r3, #0
 800ab96:	e7c4      	b.n	800ab22 <_strtod_l+0x142>
 800ab98:	2f08      	cmp	r7, #8
 800ab9a:	bfd8      	it	le
 800ab9c:	9907      	ldrle	r1, [sp, #28]
 800ab9e:	f100 0001 	add.w	r0, r0, #1
 800aba2:	bfda      	itte	le
 800aba4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aba8:	9307      	strle	r3, [sp, #28]
 800abaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800abae:	3701      	adds	r7, #1
 800abb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800abb2:	e7bf      	b.n	800ab34 <_strtod_l+0x154>
 800abb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abb6:	195a      	adds	r2, r3, r5
 800abb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800abba:	5d5a      	ldrb	r2, [r3, r5]
 800abbc:	2f00      	cmp	r7, #0
 800abbe:	d037      	beq.n	800ac30 <_strtod_l+0x250>
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	463d      	mov	r5, r7
 800abc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800abc8:	2b09      	cmp	r3, #9
 800abca:	d912      	bls.n	800abf2 <_strtod_l+0x212>
 800abcc:	2301      	movs	r3, #1
 800abce:	e7c2      	b.n	800ab56 <_strtod_l+0x176>
 800abd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800abd6:	785a      	ldrb	r2, [r3, #1]
 800abd8:	3001      	adds	r0, #1
 800abda:	2a30      	cmp	r2, #48	; 0x30
 800abdc:	d0f8      	beq.n	800abd0 <_strtod_l+0x1f0>
 800abde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	f200 84d9 	bhi.w	800b59a <_strtod_l+0xbba>
 800abe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abea:	9005      	str	r0, [sp, #20]
 800abec:	2000      	movs	r0, #0
 800abee:	9308      	str	r3, [sp, #32]
 800abf0:	4605      	mov	r5, r0
 800abf2:	3a30      	subs	r2, #48	; 0x30
 800abf4:	f100 0301 	add.w	r3, r0, #1
 800abf8:	d014      	beq.n	800ac24 <_strtod_l+0x244>
 800abfa:	9905      	ldr	r1, [sp, #20]
 800abfc:	4419      	add	r1, r3
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	462b      	mov	r3, r5
 800ac02:	eb00 0e05 	add.w	lr, r0, r5
 800ac06:	210a      	movs	r1, #10
 800ac08:	4573      	cmp	r3, lr
 800ac0a:	d113      	bne.n	800ac34 <_strtod_l+0x254>
 800ac0c:	182b      	adds	r3, r5, r0
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	f105 0501 	add.w	r5, r5, #1
 800ac14:	4405      	add	r5, r0
 800ac16:	dc1c      	bgt.n	800ac52 <_strtod_l+0x272>
 800ac18:	9907      	ldr	r1, [sp, #28]
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	fb03 2301 	mla	r3, r3, r1, r2
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	2300      	movs	r3, #0
 800ac24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac26:	1c51      	adds	r1, r2, #1
 800ac28:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac2a:	7852      	ldrb	r2, [r2, #1]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	e7c9      	b.n	800abc4 <_strtod_l+0x1e4>
 800ac30:	4638      	mov	r0, r7
 800ac32:	e7d2      	b.n	800abda <_strtod_l+0x1fa>
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	dc04      	bgt.n	800ac42 <_strtod_l+0x262>
 800ac38:	9e07      	ldr	r6, [sp, #28]
 800ac3a:	434e      	muls	r6, r1
 800ac3c:	9607      	str	r6, [sp, #28]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	e7e2      	b.n	800ac08 <_strtod_l+0x228>
 800ac42:	f103 0c01 	add.w	ip, r3, #1
 800ac46:	f1bc 0f10 	cmp.w	ip, #16
 800ac4a:	bfd8      	it	le
 800ac4c:	fb01 f909 	mulle.w	r9, r1, r9
 800ac50:	e7f5      	b.n	800ac3e <_strtod_l+0x25e>
 800ac52:	2d10      	cmp	r5, #16
 800ac54:	bfdc      	itt	le
 800ac56:	230a      	movle	r3, #10
 800ac58:	fb03 2909 	mlale	r9, r3, r9, r2
 800ac5c:	e7e1      	b.n	800ac22 <_strtod_l+0x242>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	2301      	movs	r3, #1
 800ac64:	e77c      	b.n	800ab60 <_strtod_l+0x180>
 800ac66:	f04f 0c00 	mov.w	ip, #0
 800ac6a:	f108 0202 	add.w	r2, r8, #2
 800ac6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ac74:	e785      	b.n	800ab82 <_strtod_l+0x1a2>
 800ac76:	f04f 0c01 	mov.w	ip, #1
 800ac7a:	e7f6      	b.n	800ac6a <_strtod_l+0x28a>
 800ac7c:	0800ec3c 	.word	0x0800ec3c
 800ac80:	0800e98c 	.word	0x0800e98c
 800ac84:	7ff00000 	.word	0x7ff00000
 800ac88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac8a:	1c51      	adds	r1, r2, #1
 800ac8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac8e:	7852      	ldrb	r2, [r2, #1]
 800ac90:	2a30      	cmp	r2, #48	; 0x30
 800ac92:	d0f9      	beq.n	800ac88 <_strtod_l+0x2a8>
 800ac94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac98:	2908      	cmp	r1, #8
 800ac9a:	f63f af79 	bhi.w	800ab90 <_strtod_l+0x1b0>
 800ac9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aca4:	9206      	str	r2, [sp, #24]
 800aca6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aca8:	1c51      	adds	r1, r2, #1
 800acaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800acac:	7852      	ldrb	r2, [r2, #1]
 800acae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800acb2:	2e09      	cmp	r6, #9
 800acb4:	d937      	bls.n	800ad26 <_strtod_l+0x346>
 800acb6:	9e06      	ldr	r6, [sp, #24]
 800acb8:	1b89      	subs	r1, r1, r6
 800acba:	2908      	cmp	r1, #8
 800acbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800acc0:	dc02      	bgt.n	800acc8 <_strtod_l+0x2e8>
 800acc2:	4576      	cmp	r6, lr
 800acc4:	bfa8      	it	ge
 800acc6:	4676      	movge	r6, lr
 800acc8:	f1bc 0f00 	cmp.w	ip, #0
 800accc:	d000      	beq.n	800acd0 <_strtod_l+0x2f0>
 800acce:	4276      	negs	r6, r6
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	d14d      	bne.n	800ad70 <_strtod_l+0x390>
 800acd4:	9904      	ldr	r1, [sp, #16]
 800acd6:	4301      	orrs	r1, r0
 800acd8:	f47f aec6 	bne.w	800aa68 <_strtod_l+0x88>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f47f aee1 	bne.w	800aaa4 <_strtod_l+0xc4>
 800ace2:	2a69      	cmp	r2, #105	; 0x69
 800ace4:	d027      	beq.n	800ad36 <_strtod_l+0x356>
 800ace6:	dc24      	bgt.n	800ad32 <_strtod_l+0x352>
 800ace8:	2a49      	cmp	r2, #73	; 0x49
 800acea:	d024      	beq.n	800ad36 <_strtod_l+0x356>
 800acec:	2a4e      	cmp	r2, #78	; 0x4e
 800acee:	f47f aed9 	bne.w	800aaa4 <_strtod_l+0xc4>
 800acf2:	499f      	ldr	r1, [pc, #636]	; (800af70 <_strtod_l+0x590>)
 800acf4:	a817      	add	r0, sp, #92	; 0x5c
 800acf6:	f002 f8b3 	bl	800ce60 <__match>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f aed2 	beq.w	800aaa4 <_strtod_l+0xc4>
 800ad00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b28      	cmp	r3, #40	; 0x28
 800ad06:	d12d      	bne.n	800ad64 <_strtod_l+0x384>
 800ad08:	499a      	ldr	r1, [pc, #616]	; (800af74 <_strtod_l+0x594>)
 800ad0a:	aa1a      	add	r2, sp, #104	; 0x68
 800ad0c:	a817      	add	r0, sp, #92	; 0x5c
 800ad0e:	f002 f8bb 	bl	800ce88 <__hexnan>
 800ad12:	2805      	cmp	r0, #5
 800ad14:	d126      	bne.n	800ad64 <_strtod_l+0x384>
 800ad16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ad1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ad20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ad24:	e6a0      	b.n	800aa68 <_strtod_l+0x88>
 800ad26:	210a      	movs	r1, #10
 800ad28:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ad2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ad30:	e7b9      	b.n	800aca6 <_strtod_l+0x2c6>
 800ad32:	2a6e      	cmp	r2, #110	; 0x6e
 800ad34:	e7db      	b.n	800acee <_strtod_l+0x30e>
 800ad36:	4990      	ldr	r1, [pc, #576]	; (800af78 <_strtod_l+0x598>)
 800ad38:	a817      	add	r0, sp, #92	; 0x5c
 800ad3a:	f002 f891 	bl	800ce60 <__match>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f43f aeb0 	beq.w	800aaa4 <_strtod_l+0xc4>
 800ad44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad46:	498d      	ldr	r1, [pc, #564]	; (800af7c <_strtod_l+0x59c>)
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	a817      	add	r0, sp, #92	; 0x5c
 800ad4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad4e:	f002 f887 	bl	800ce60 <__match>
 800ad52:	b910      	cbnz	r0, 800ad5a <_strtod_l+0x37a>
 800ad54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad56:	3301      	adds	r3, #1
 800ad58:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800af8c <_strtod_l+0x5ac>
 800ad5e:	f04f 0a00 	mov.w	sl, #0
 800ad62:	e681      	b.n	800aa68 <_strtod_l+0x88>
 800ad64:	4886      	ldr	r0, [pc, #536]	; (800af80 <_strtod_l+0x5a0>)
 800ad66:	f003 f943 	bl	800dff0 <nan>
 800ad6a:	ec5b ab10 	vmov	sl, fp, d0
 800ad6e:	e67b      	b.n	800aa68 <_strtod_l+0x88>
 800ad70:	9b05      	ldr	r3, [sp, #20]
 800ad72:	9807      	ldr	r0, [sp, #28]
 800ad74:	1af3      	subs	r3, r6, r3
 800ad76:	2f00      	cmp	r7, #0
 800ad78:	bf08      	it	eq
 800ad7a:	462f      	moveq	r7, r5
 800ad7c:	2d10      	cmp	r5, #16
 800ad7e:	9306      	str	r3, [sp, #24]
 800ad80:	46a8      	mov	r8, r5
 800ad82:	bfa8      	it	ge
 800ad84:	f04f 0810 	movge.w	r8, #16
 800ad88:	f7f5 fb94 	bl	80004b4 <__aeabi_ui2d>
 800ad8c:	2d09      	cmp	r5, #9
 800ad8e:	4682      	mov	sl, r0
 800ad90:	468b      	mov	fp, r1
 800ad92:	dd13      	ble.n	800adbc <_strtod_l+0x3dc>
 800ad94:	4b7b      	ldr	r3, [pc, #492]	; (800af84 <_strtod_l+0x5a4>)
 800ad96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad9e:	f7f5 fc03 	bl	80005a8 <__aeabi_dmul>
 800ada2:	4682      	mov	sl, r0
 800ada4:	4648      	mov	r0, r9
 800ada6:	468b      	mov	fp, r1
 800ada8:	f7f5 fb84 	bl	80004b4 <__aeabi_ui2d>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4650      	mov	r0, sl
 800adb2:	4659      	mov	r1, fp
 800adb4:	f7f5 fa42 	bl	800023c <__adddf3>
 800adb8:	4682      	mov	sl, r0
 800adba:	468b      	mov	fp, r1
 800adbc:	2d0f      	cmp	r5, #15
 800adbe:	dc38      	bgt.n	800ae32 <_strtod_l+0x452>
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f43f ae50 	beq.w	800aa68 <_strtod_l+0x88>
 800adc8:	dd24      	ble.n	800ae14 <_strtod_l+0x434>
 800adca:	2b16      	cmp	r3, #22
 800adcc:	dc0b      	bgt.n	800ade6 <_strtod_l+0x406>
 800adce:	496d      	ldr	r1, [pc, #436]	; (800af84 <_strtod_l+0x5a4>)
 800add0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800add4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add8:	4652      	mov	r2, sl
 800adda:	465b      	mov	r3, fp
 800addc:	f7f5 fbe4 	bl	80005a8 <__aeabi_dmul>
 800ade0:	4682      	mov	sl, r0
 800ade2:	468b      	mov	fp, r1
 800ade4:	e640      	b.n	800aa68 <_strtod_l+0x88>
 800ade6:	9a06      	ldr	r2, [sp, #24]
 800ade8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800adec:	4293      	cmp	r3, r2
 800adee:	db20      	blt.n	800ae32 <_strtod_l+0x452>
 800adf0:	4c64      	ldr	r4, [pc, #400]	; (800af84 <_strtod_l+0x5a4>)
 800adf2:	f1c5 050f 	rsb	r5, r5, #15
 800adf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adfa:	4652      	mov	r2, sl
 800adfc:	465b      	mov	r3, fp
 800adfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae02:	f7f5 fbd1 	bl	80005a8 <__aeabi_dmul>
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	1b5d      	subs	r5, r3, r5
 800ae0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae12:	e7e3      	b.n	800addc <_strtod_l+0x3fc>
 800ae14:	9b06      	ldr	r3, [sp, #24]
 800ae16:	3316      	adds	r3, #22
 800ae18:	db0b      	blt.n	800ae32 <_strtod_l+0x452>
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	1b9e      	subs	r6, r3, r6
 800ae1e:	4b59      	ldr	r3, [pc, #356]	; (800af84 <_strtod_l+0x5a4>)
 800ae20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ae24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae28:	4650      	mov	r0, sl
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	f7f5 fce6 	bl	80007fc <__aeabi_ddiv>
 800ae30:	e7d6      	b.n	800ade0 <_strtod_l+0x400>
 800ae32:	9b06      	ldr	r3, [sp, #24]
 800ae34:	eba5 0808 	sub.w	r8, r5, r8
 800ae38:	4498      	add	r8, r3
 800ae3a:	f1b8 0f00 	cmp.w	r8, #0
 800ae3e:	dd74      	ble.n	800af2a <_strtod_l+0x54a>
 800ae40:	f018 030f 	ands.w	r3, r8, #15
 800ae44:	d00a      	beq.n	800ae5c <_strtod_l+0x47c>
 800ae46:	494f      	ldr	r1, [pc, #316]	; (800af84 <_strtod_l+0x5a4>)
 800ae48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae4c:	4652      	mov	r2, sl
 800ae4e:	465b      	mov	r3, fp
 800ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae54:	f7f5 fba8 	bl	80005a8 <__aeabi_dmul>
 800ae58:	4682      	mov	sl, r0
 800ae5a:	468b      	mov	fp, r1
 800ae5c:	f038 080f 	bics.w	r8, r8, #15
 800ae60:	d04f      	beq.n	800af02 <_strtod_l+0x522>
 800ae62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ae66:	dd22      	ble.n	800aeae <_strtod_l+0x4ce>
 800ae68:	2500      	movs	r5, #0
 800ae6a:	462e      	mov	r6, r5
 800ae6c:	9507      	str	r5, [sp, #28]
 800ae6e:	9505      	str	r5, [sp, #20]
 800ae70:	2322      	movs	r3, #34	; 0x22
 800ae72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800af8c <_strtod_l+0x5ac>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	f04f 0a00 	mov.w	sl, #0
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f adf2 	beq.w	800aa68 <_strtod_l+0x88>
 800ae84:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae86:	4620      	mov	r0, r4
 800ae88:	f002 f964 	bl	800d154 <_Bfree>
 800ae8c:	9905      	ldr	r1, [sp, #20]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f002 f960 	bl	800d154 <_Bfree>
 800ae94:	4631      	mov	r1, r6
 800ae96:	4620      	mov	r0, r4
 800ae98:	f002 f95c 	bl	800d154 <_Bfree>
 800ae9c:	9907      	ldr	r1, [sp, #28]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f002 f958 	bl	800d154 <_Bfree>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4620      	mov	r0, r4
 800aea8:	f002 f954 	bl	800d154 <_Bfree>
 800aeac:	e5dc      	b.n	800aa68 <_strtod_l+0x88>
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <_strtod_l+0x5a8>)
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aeb8:	4650      	mov	r0, sl
 800aeba:	4659      	mov	r1, fp
 800aebc:	4699      	mov	r9, r3
 800aebe:	f1b8 0f01 	cmp.w	r8, #1
 800aec2:	dc21      	bgt.n	800af08 <_strtod_l+0x528>
 800aec4:	b10b      	cbz	r3, 800aeca <_strtod_l+0x4ea>
 800aec6:	4682      	mov	sl, r0
 800aec8:	468b      	mov	fp, r1
 800aeca:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <_strtod_l+0x5a8>)
 800aecc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aed0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aed4:	4652      	mov	r2, sl
 800aed6:	465b      	mov	r3, fp
 800aed8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aedc:	f7f5 fb64 	bl	80005a8 <__aeabi_dmul>
 800aee0:	4b2a      	ldr	r3, [pc, #168]	; (800af8c <_strtod_l+0x5ac>)
 800aee2:	460a      	mov	r2, r1
 800aee4:	400b      	ands	r3, r1
 800aee6:	492a      	ldr	r1, [pc, #168]	; (800af90 <_strtod_l+0x5b0>)
 800aee8:	428b      	cmp	r3, r1
 800aeea:	4682      	mov	sl, r0
 800aeec:	d8bc      	bhi.n	800ae68 <_strtod_l+0x488>
 800aeee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aef2:	428b      	cmp	r3, r1
 800aef4:	bf86      	itte	hi
 800aef6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800af94 <_strtod_l+0x5b4>
 800aefa:	f04f 3aff 	movhi.w	sl, #4294967295
 800aefe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800af02:	2300      	movs	r3, #0
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	e084      	b.n	800b012 <_strtod_l+0x632>
 800af08:	f018 0f01 	tst.w	r8, #1
 800af0c:	d005      	beq.n	800af1a <_strtod_l+0x53a>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 fb48 	bl	80005a8 <__aeabi_dmul>
 800af18:	2301      	movs	r3, #1
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	3208      	adds	r2, #8
 800af1e:	f109 0901 	add.w	r9, r9, #1
 800af22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af26:	9204      	str	r2, [sp, #16]
 800af28:	e7c9      	b.n	800aebe <_strtod_l+0x4de>
 800af2a:	d0ea      	beq.n	800af02 <_strtod_l+0x522>
 800af2c:	f1c8 0800 	rsb	r8, r8, #0
 800af30:	f018 020f 	ands.w	r2, r8, #15
 800af34:	d00a      	beq.n	800af4c <_strtod_l+0x56c>
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <_strtod_l+0x5a4>)
 800af38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af3c:	4650      	mov	r0, sl
 800af3e:	4659      	mov	r1, fp
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 fc5a 	bl	80007fc <__aeabi_ddiv>
 800af48:	4682      	mov	sl, r0
 800af4a:	468b      	mov	fp, r1
 800af4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800af50:	d0d7      	beq.n	800af02 <_strtod_l+0x522>
 800af52:	f1b8 0f1f 	cmp.w	r8, #31
 800af56:	dd1f      	ble.n	800af98 <_strtod_l+0x5b8>
 800af58:	2500      	movs	r5, #0
 800af5a:	462e      	mov	r6, r5
 800af5c:	9507      	str	r5, [sp, #28]
 800af5e:	9505      	str	r5, [sp, #20]
 800af60:	2322      	movs	r3, #34	; 0x22
 800af62:	f04f 0a00 	mov.w	sl, #0
 800af66:	f04f 0b00 	mov.w	fp, #0
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	e786      	b.n	800ae7c <_strtod_l+0x49c>
 800af6e:	bf00      	nop
 800af70:	0800e95d 	.word	0x0800e95d
 800af74:	0800e9a0 	.word	0x0800e9a0
 800af78:	0800e955 	.word	0x0800e955
 800af7c:	0800eae4 	.word	0x0800eae4
 800af80:	0800edf8 	.word	0x0800edf8
 800af84:	0800ecd8 	.word	0x0800ecd8
 800af88:	0800ecb0 	.word	0x0800ecb0
 800af8c:	7ff00000 	.word	0x7ff00000
 800af90:	7ca00000 	.word	0x7ca00000
 800af94:	7fefffff 	.word	0x7fefffff
 800af98:	f018 0310 	ands.w	r3, r8, #16
 800af9c:	bf18      	it	ne
 800af9e:	236a      	movne	r3, #106	; 0x6a
 800afa0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b350 <_strtod_l+0x970>
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	4650      	mov	r0, sl
 800afa8:	4659      	mov	r1, fp
 800afaa:	2300      	movs	r3, #0
 800afac:	f018 0f01 	tst.w	r8, #1
 800afb0:	d004      	beq.n	800afbc <_strtod_l+0x5dc>
 800afb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800afb6:	f7f5 faf7 	bl	80005a8 <__aeabi_dmul>
 800afba:	2301      	movs	r3, #1
 800afbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800afc0:	f109 0908 	add.w	r9, r9, #8
 800afc4:	d1f2      	bne.n	800afac <_strtod_l+0x5cc>
 800afc6:	b10b      	cbz	r3, 800afcc <_strtod_l+0x5ec>
 800afc8:	4682      	mov	sl, r0
 800afca:	468b      	mov	fp, r1
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	b1c3      	cbz	r3, 800b002 <_strtod_l+0x622>
 800afd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800afd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afd8:	2b00      	cmp	r3, #0
 800afda:	4659      	mov	r1, fp
 800afdc:	dd11      	ble.n	800b002 <_strtod_l+0x622>
 800afde:	2b1f      	cmp	r3, #31
 800afe0:	f340 8124 	ble.w	800b22c <_strtod_l+0x84c>
 800afe4:	2b34      	cmp	r3, #52	; 0x34
 800afe6:	bfde      	ittt	le
 800afe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800afec:	f04f 33ff 	movle.w	r3, #4294967295
 800aff0:	fa03 f202 	lslle.w	r2, r3, r2
 800aff4:	f04f 0a00 	mov.w	sl, #0
 800aff8:	bfcc      	ite	gt
 800affa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800affe:	ea02 0b01 	andle.w	fp, r2, r1
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4650      	mov	r0, sl
 800b008:	4659      	mov	r1, fp
 800b00a:	f7f5 fd35 	bl	8000a78 <__aeabi_dcmpeq>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d1a2      	bne.n	800af58 <_strtod_l+0x578>
 800b012:	9b07      	ldr	r3, [sp, #28]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	9908      	ldr	r1, [sp, #32]
 800b018:	462b      	mov	r3, r5
 800b01a:	463a      	mov	r2, r7
 800b01c:	4620      	mov	r0, r4
 800b01e:	f002 f901 	bl	800d224 <__s2b>
 800b022:	9007      	str	r0, [sp, #28]
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f af1f 	beq.w	800ae68 <_strtod_l+0x488>
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	1b9e      	subs	r6, r3, r6
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	bfb4      	ite	lt
 800b034:	4633      	movlt	r3, r6
 800b036:	2300      	movge	r3, #0
 800b038:	930c      	str	r3, [sp, #48]	; 0x30
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	2500      	movs	r5, #0
 800b03e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b042:	9312      	str	r3, [sp, #72]	; 0x48
 800b044:	462e      	mov	r6, r5
 800b046:	9b07      	ldr	r3, [sp, #28]
 800b048:	4620      	mov	r0, r4
 800b04a:	6859      	ldr	r1, [r3, #4]
 800b04c:	f002 f842 	bl	800d0d4 <_Balloc>
 800b050:	9005      	str	r0, [sp, #20]
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f af0c 	beq.w	800ae70 <_strtod_l+0x490>
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f103 010c 	add.w	r1, r3, #12
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	300c      	adds	r0, #12
 800b066:	f7fe fc07 	bl	8009878 <memcpy>
 800b06a:	ec4b ab10 	vmov	d0, sl, fp
 800b06e:	aa1a      	add	r2, sp, #104	; 0x68
 800b070:	a919      	add	r1, sp, #100	; 0x64
 800b072:	4620      	mov	r0, r4
 800b074:	f002 fc1c 	bl	800d8b0 <__d2b>
 800b078:	ec4b ab18 	vmov	d8, sl, fp
 800b07c:	9018      	str	r0, [sp, #96]	; 0x60
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f aef6 	beq.w	800ae70 <_strtod_l+0x490>
 800b084:	2101      	movs	r1, #1
 800b086:	4620      	mov	r0, r4
 800b088:	f002 f966 	bl	800d358 <__i2b>
 800b08c:	4606      	mov	r6, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f aeee 	beq.w	800ae70 <_strtod_l+0x490>
 800b094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b096:	9904      	ldr	r1, [sp, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bfab      	itete	ge
 800b09c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b09e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b0a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b0a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b0a6:	bfac      	ite	ge
 800b0a8:	eb03 0902 	addge.w	r9, r3, r2
 800b0ac:	1ad7      	sublt	r7, r2, r3
 800b0ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0b0:	eba3 0801 	sub.w	r8, r3, r1
 800b0b4:	4490      	add	r8, r2
 800b0b6:	4ba1      	ldr	r3, [pc, #644]	; (800b33c <_strtod_l+0x95c>)
 800b0b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0bc:	4598      	cmp	r8, r3
 800b0be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0c2:	f280 80c7 	bge.w	800b254 <_strtod_l+0x874>
 800b0c6:	eba3 0308 	sub.w	r3, r3, r8
 800b0ca:	2b1f      	cmp	r3, #31
 800b0cc:	eba2 0203 	sub.w	r2, r2, r3
 800b0d0:	f04f 0101 	mov.w	r1, #1
 800b0d4:	f300 80b1 	bgt.w	800b23a <_strtod_l+0x85a>
 800b0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0dc:	930d      	str	r3, [sp, #52]	; 0x34
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	eb09 0802 	add.w	r8, r9, r2
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	45c1      	cmp	r9, r8
 800b0ea:	4417      	add	r7, r2
 800b0ec:	441f      	add	r7, r3
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	bfa8      	it	ge
 800b0f2:	4643      	movge	r3, r8
 800b0f4:	42bb      	cmp	r3, r7
 800b0f6:	bfa8      	it	ge
 800b0f8:	463b      	movge	r3, r7
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bfc2      	ittt	gt
 800b0fe:	eba8 0803 	subgt.w	r8, r8, r3
 800b102:	1aff      	subgt	r7, r7, r3
 800b104:	eba9 0903 	subgt.w	r9, r9, r3
 800b108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd17      	ble.n	800b13e <_strtod_l+0x75e>
 800b10e:	4631      	mov	r1, r6
 800b110:	461a      	mov	r2, r3
 800b112:	4620      	mov	r0, r4
 800b114:	f002 f9e0 	bl	800d4d8 <__pow5mult>
 800b118:	4606      	mov	r6, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f43f aea8 	beq.w	800ae70 <_strtod_l+0x490>
 800b120:	4601      	mov	r1, r0
 800b122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b124:	4620      	mov	r0, r4
 800b126:	f002 f92d 	bl	800d384 <__multiply>
 800b12a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f43f ae9f 	beq.w	800ae70 <_strtod_l+0x490>
 800b132:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b134:	4620      	mov	r0, r4
 800b136:	f002 f80d 	bl	800d154 <_Bfree>
 800b13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13c:	9318      	str	r3, [sp, #96]	; 0x60
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	f300 808c 	bgt.w	800b25e <_strtod_l+0x87e>
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dd08      	ble.n	800b15e <_strtod_l+0x77e>
 800b14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b14e:	9905      	ldr	r1, [sp, #20]
 800b150:	4620      	mov	r0, r4
 800b152:	f002 f9c1 	bl	800d4d8 <__pow5mult>
 800b156:	9005      	str	r0, [sp, #20]
 800b158:	2800      	cmp	r0, #0
 800b15a:	f43f ae89 	beq.w	800ae70 <_strtod_l+0x490>
 800b15e:	2f00      	cmp	r7, #0
 800b160:	dd08      	ble.n	800b174 <_strtod_l+0x794>
 800b162:	9905      	ldr	r1, [sp, #20]
 800b164:	463a      	mov	r2, r7
 800b166:	4620      	mov	r0, r4
 800b168:	f002 fa10 	bl	800d58c <__lshift>
 800b16c:	9005      	str	r0, [sp, #20]
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f ae7e 	beq.w	800ae70 <_strtod_l+0x490>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	dd08      	ble.n	800b18c <_strtod_l+0x7ac>
 800b17a:	4631      	mov	r1, r6
 800b17c:	464a      	mov	r2, r9
 800b17e:	4620      	mov	r0, r4
 800b180:	f002 fa04 	bl	800d58c <__lshift>
 800b184:	4606      	mov	r6, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	f43f ae72 	beq.w	800ae70 <_strtod_l+0x490>
 800b18c:	9a05      	ldr	r2, [sp, #20]
 800b18e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b190:	4620      	mov	r0, r4
 800b192:	f002 fa87 	bl	800d6a4 <__mdiff>
 800b196:	4605      	mov	r5, r0
 800b198:	2800      	cmp	r0, #0
 800b19a:	f43f ae69 	beq.w	800ae70 <_strtod_l+0x490>
 800b19e:	68c3      	ldr	r3, [r0, #12]
 800b1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60c3      	str	r3, [r0, #12]
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	f002 fa60 	bl	800d66c <__mcmp>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	da60      	bge.n	800b272 <_strtod_l+0x892>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b1b6:	f040 8082 	bne.w	800b2be <_strtod_l+0x8de>
 800b1ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d17d      	bne.n	800b2be <_strtod_l+0x8de>
 800b1c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	051b      	lsls	r3, r3, #20
 800b1ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1ce:	d976      	bls.n	800b2be <_strtod_l+0x8de>
 800b1d0:	696b      	ldr	r3, [r5, #20]
 800b1d2:	b913      	cbnz	r3, 800b1da <_strtod_l+0x7fa>
 800b1d4:	692b      	ldr	r3, [r5, #16]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	dd71      	ble.n	800b2be <_strtod_l+0x8de>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	2201      	movs	r2, #1
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f002 f9d4 	bl	800d58c <__lshift>
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	f002 fa40 	bl	800d66c <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	dd66      	ble.n	800b2be <_strtod_l+0x8de>
 800b1f0:	9904      	ldr	r1, [sp, #16]
 800b1f2:	4a53      	ldr	r2, [pc, #332]	; (800b340 <_strtod_l+0x960>)
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	f000 8081 	beq.w	800b2fe <_strtod_l+0x91e>
 800b1fc:	ea02 010b 	and.w	r1, r2, fp
 800b200:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b204:	dc7b      	bgt.n	800b2fe <_strtod_l+0x91e>
 800b206:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b20a:	f77f aea9 	ble.w	800af60 <_strtod_l+0x580>
 800b20e:	4b4d      	ldr	r3, [pc, #308]	; (800b344 <_strtod_l+0x964>)
 800b210:	4650      	mov	r0, sl
 800b212:	4659      	mov	r1, fp
 800b214:	2200      	movs	r2, #0
 800b216:	f7f5 f9c7 	bl	80005a8 <__aeabi_dmul>
 800b21a:	460b      	mov	r3, r1
 800b21c:	4303      	orrs	r3, r0
 800b21e:	bf08      	it	eq
 800b220:	2322      	moveq	r3, #34	; 0x22
 800b222:	4682      	mov	sl, r0
 800b224:	468b      	mov	fp, r1
 800b226:	bf08      	it	eq
 800b228:	6023      	streq	r3, [r4, #0]
 800b22a:	e62b      	b.n	800ae84 <_strtod_l+0x4a4>
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	fa02 f303 	lsl.w	r3, r2, r3
 800b234:	ea03 0a0a 	and.w	sl, r3, sl
 800b238:	e6e3      	b.n	800b002 <_strtod_l+0x622>
 800b23a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b23e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b242:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b246:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b24a:	fa01 f308 	lsl.w	r3, r1, r8
 800b24e:	9308      	str	r3, [sp, #32]
 800b250:	910d      	str	r1, [sp, #52]	; 0x34
 800b252:	e746      	b.n	800b0e2 <_strtod_l+0x702>
 800b254:	2300      	movs	r3, #0
 800b256:	9308      	str	r3, [sp, #32]
 800b258:	2301      	movs	r3, #1
 800b25a:	930d      	str	r3, [sp, #52]	; 0x34
 800b25c:	e741      	b.n	800b0e2 <_strtod_l+0x702>
 800b25e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b260:	4642      	mov	r2, r8
 800b262:	4620      	mov	r0, r4
 800b264:	f002 f992 	bl	800d58c <__lshift>
 800b268:	9018      	str	r0, [sp, #96]	; 0x60
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f47f af6b 	bne.w	800b146 <_strtod_l+0x766>
 800b270:	e5fe      	b.n	800ae70 <_strtod_l+0x490>
 800b272:	465f      	mov	r7, fp
 800b274:	d16e      	bne.n	800b354 <_strtod_l+0x974>
 800b276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b27c:	b342      	cbz	r2, 800b2d0 <_strtod_l+0x8f0>
 800b27e:	4a32      	ldr	r2, [pc, #200]	; (800b348 <_strtod_l+0x968>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d128      	bne.n	800b2d6 <_strtod_l+0x8f6>
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	4651      	mov	r1, sl
 800b288:	b1eb      	cbz	r3, 800b2c6 <_strtod_l+0x8e6>
 800b28a:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <_strtod_l+0x960>)
 800b28c:	403b      	ands	r3, r7
 800b28e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b292:	f04f 32ff 	mov.w	r2, #4294967295
 800b296:	d819      	bhi.n	800b2cc <_strtod_l+0x8ec>
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	d117      	bne.n	800b2d6 <_strtod_l+0x8f6>
 800b2a6:	4b29      	ldr	r3, [pc, #164]	; (800b34c <_strtod_l+0x96c>)
 800b2a8:	429f      	cmp	r7, r3
 800b2aa:	d102      	bne.n	800b2b2 <_strtod_l+0x8d2>
 800b2ac:	3101      	adds	r1, #1
 800b2ae:	f43f addf 	beq.w	800ae70 <_strtod_l+0x490>
 800b2b2:	4b23      	ldr	r3, [pc, #140]	; (800b340 <_strtod_l+0x960>)
 800b2b4:	403b      	ands	r3, r7
 800b2b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b2ba:	f04f 0a00 	mov.w	sl, #0
 800b2be:	9b04      	ldr	r3, [sp, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1a4      	bne.n	800b20e <_strtod_l+0x82e>
 800b2c4:	e5de      	b.n	800ae84 <_strtod_l+0x4a4>
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	e7ea      	b.n	800b2a2 <_strtod_l+0x8c2>
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	e7e8      	b.n	800b2a2 <_strtod_l+0x8c2>
 800b2d0:	ea53 030a 	orrs.w	r3, r3, sl
 800b2d4:	d08c      	beq.n	800b1f0 <_strtod_l+0x810>
 800b2d6:	9b08      	ldr	r3, [sp, #32]
 800b2d8:	b1db      	cbz	r3, 800b312 <_strtod_l+0x932>
 800b2da:	423b      	tst	r3, r7
 800b2dc:	d0ef      	beq.n	800b2be <_strtod_l+0x8de>
 800b2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e0:	9a04      	ldr	r2, [sp, #16]
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	b1c3      	cbz	r3, 800b31a <_strtod_l+0x93a>
 800b2e8:	f7ff fb5b 	bl	800a9a2 <sulp>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	ec51 0b18 	vmov	r0, r1, d8
 800b2f4:	f7f4 ffa2 	bl	800023c <__adddf3>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	468b      	mov	fp, r1
 800b2fc:	e7df      	b.n	800b2be <_strtod_l+0x8de>
 800b2fe:	4013      	ands	r3, r2
 800b300:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b304:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b308:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b30c:	f04f 3aff 	mov.w	sl, #4294967295
 800b310:	e7d5      	b.n	800b2be <_strtod_l+0x8de>
 800b312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b314:	ea13 0f0a 	tst.w	r3, sl
 800b318:	e7e0      	b.n	800b2dc <_strtod_l+0x8fc>
 800b31a:	f7ff fb42 	bl	800a9a2 <sulp>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	ec51 0b18 	vmov	r0, r1, d8
 800b326:	f7f4 ff87 	bl	8000238 <__aeabi_dsub>
 800b32a:	2200      	movs	r2, #0
 800b32c:	2300      	movs	r3, #0
 800b32e:	4682      	mov	sl, r0
 800b330:	468b      	mov	fp, r1
 800b332:	f7f5 fba1 	bl	8000a78 <__aeabi_dcmpeq>
 800b336:	2800      	cmp	r0, #0
 800b338:	d0c1      	beq.n	800b2be <_strtod_l+0x8de>
 800b33a:	e611      	b.n	800af60 <_strtod_l+0x580>
 800b33c:	fffffc02 	.word	0xfffffc02
 800b340:	7ff00000 	.word	0x7ff00000
 800b344:	39500000 	.word	0x39500000
 800b348:	000fffff 	.word	0x000fffff
 800b34c:	7fefffff 	.word	0x7fefffff
 800b350:	0800e9b8 	.word	0x0800e9b8
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	f002 fb06 	bl	800d968 <__ratio>
 800b35c:	ec59 8b10 	vmov	r8, r9, d0
 800b360:	ee10 0a10 	vmov	r0, s0
 800b364:	2200      	movs	r2, #0
 800b366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b36a:	4649      	mov	r1, r9
 800b36c:	f7f5 fb98 	bl	8000aa0 <__aeabi_dcmple>
 800b370:	2800      	cmp	r0, #0
 800b372:	d07a      	beq.n	800b46a <_strtod_l+0xa8a>
 800b374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04a      	beq.n	800b410 <_strtod_l+0xa30>
 800b37a:	4b95      	ldr	r3, [pc, #596]	; (800b5d0 <_strtod_l+0xbf0>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b382:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b5d0 <_strtod_l+0xbf0>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	4b92      	ldr	r3, [pc, #584]	; (800b5d4 <_strtod_l+0xbf4>)
 800b38c:	403b      	ands	r3, r7
 800b38e:	930d      	str	r3, [sp, #52]	; 0x34
 800b390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b392:	4b91      	ldr	r3, [pc, #580]	; (800b5d8 <_strtod_l+0xbf8>)
 800b394:	429a      	cmp	r2, r3
 800b396:	f040 80b0 	bne.w	800b4fa <_strtod_l+0xb1a>
 800b39a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b39e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b3a2:	ec4b ab10 	vmov	d0, sl, fp
 800b3a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3aa:	f002 fa05 	bl	800d7b8 <__ulp>
 800b3ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3b2:	ec53 2b10 	vmov	r2, r3, d0
 800b3b6:	f7f5 f8f7 	bl	80005a8 <__aeabi_dmul>
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	465b      	mov	r3, fp
 800b3be:	f7f4 ff3d 	bl	800023c <__adddf3>
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4983      	ldr	r1, [pc, #524]	; (800b5d4 <_strtod_l+0xbf4>)
 800b3c6:	4a85      	ldr	r2, [pc, #532]	; (800b5dc <_strtod_l+0xbfc>)
 800b3c8:	4019      	ands	r1, r3
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	d960      	bls.n	800b492 <_strtod_l+0xab2>
 800b3d0:	ee18 3a90 	vmov	r3, s17
 800b3d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d104      	bne.n	800b3e6 <_strtod_l+0xa06>
 800b3dc:	ee18 3a10 	vmov	r3, s16
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f43f ad45 	beq.w	800ae70 <_strtod_l+0x490>
 800b3e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b5e8 <_strtod_l+0xc08>
 800b3ea:	f04f 3aff 	mov.w	sl, #4294967295
 800b3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f001 feaf 	bl	800d154 <_Bfree>
 800b3f6:	9905      	ldr	r1, [sp, #20]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f001 feab 	bl	800d154 <_Bfree>
 800b3fe:	4631      	mov	r1, r6
 800b400:	4620      	mov	r0, r4
 800b402:	f001 fea7 	bl	800d154 <_Bfree>
 800b406:	4629      	mov	r1, r5
 800b408:	4620      	mov	r0, r4
 800b40a:	f001 fea3 	bl	800d154 <_Bfree>
 800b40e:	e61a      	b.n	800b046 <_strtod_l+0x666>
 800b410:	f1ba 0f00 	cmp.w	sl, #0
 800b414:	d11b      	bne.n	800b44e <_strtod_l+0xa6e>
 800b416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b41a:	b9f3      	cbnz	r3, 800b45a <_strtod_l+0xa7a>
 800b41c:	4b6c      	ldr	r3, [pc, #432]	; (800b5d0 <_strtod_l+0xbf0>)
 800b41e:	2200      	movs	r2, #0
 800b420:	4640      	mov	r0, r8
 800b422:	4649      	mov	r1, r9
 800b424:	f7f5 fb32 	bl	8000a8c <__aeabi_dcmplt>
 800b428:	b9d0      	cbnz	r0, 800b460 <_strtod_l+0xa80>
 800b42a:	4640      	mov	r0, r8
 800b42c:	4649      	mov	r1, r9
 800b42e:	4b6c      	ldr	r3, [pc, #432]	; (800b5e0 <_strtod_l+0xc00>)
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f8b9 	bl	80005a8 <__aeabi_dmul>
 800b436:	4680      	mov	r8, r0
 800b438:	4689      	mov	r9, r1
 800b43a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b43e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b442:	9315      	str	r3, [sp, #84]	; 0x54
 800b444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b44c:	e79d      	b.n	800b38a <_strtod_l+0x9aa>
 800b44e:	f1ba 0f01 	cmp.w	sl, #1
 800b452:	d102      	bne.n	800b45a <_strtod_l+0xa7a>
 800b454:	2f00      	cmp	r7, #0
 800b456:	f43f ad83 	beq.w	800af60 <_strtod_l+0x580>
 800b45a:	4b62      	ldr	r3, [pc, #392]	; (800b5e4 <_strtod_l+0xc04>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	e78e      	b.n	800b37e <_strtod_l+0x99e>
 800b460:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b5e0 <_strtod_l+0xc00>
 800b464:	f04f 0800 	mov.w	r8, #0
 800b468:	e7e7      	b.n	800b43a <_strtod_l+0xa5a>
 800b46a:	4b5d      	ldr	r3, [pc, #372]	; (800b5e0 <_strtod_l+0xc00>)
 800b46c:	4640      	mov	r0, r8
 800b46e:	4649      	mov	r1, r9
 800b470:	2200      	movs	r2, #0
 800b472:	f7f5 f899 	bl	80005a8 <__aeabi_dmul>
 800b476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	b933      	cbnz	r3, 800b48c <_strtod_l+0xaac>
 800b47e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b482:	900e      	str	r0, [sp, #56]	; 0x38
 800b484:	930f      	str	r3, [sp, #60]	; 0x3c
 800b486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b48a:	e7dd      	b.n	800b448 <_strtod_l+0xa68>
 800b48c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b490:	e7f9      	b.n	800b486 <_strtod_l+0xaa6>
 800b492:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1a8      	bne.n	800b3ee <_strtod_l+0xa0e>
 800b49c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4a2:	0d1b      	lsrs	r3, r3, #20
 800b4a4:	051b      	lsls	r3, r3, #20
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d1a1      	bne.n	800b3ee <_strtod_l+0xa0e>
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f5 fbdb 	bl	8000c68 <__aeabi_d2lz>
 800b4b2:	f7f5 f84b 	bl	800054c <__aeabi_l2d>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	4649      	mov	r1, r9
 800b4be:	f7f4 febb 	bl	8000238 <__aeabi_dsub>
 800b4c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4c8:	ea43 030a 	orr.w	r3, r3, sl
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	4689      	mov	r9, r1
 800b4d2:	d055      	beq.n	800b580 <_strtod_l+0xba0>
 800b4d4:	a336      	add	r3, pc, #216	; (adr r3, 800b5b0 <_strtod_l+0xbd0>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f5 fad7 	bl	8000a8c <__aeabi_dcmplt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f47f acd0 	bne.w	800ae84 <_strtod_l+0x4a4>
 800b4e4:	a334      	add	r3, pc, #208	; (adr r3, 800b5b8 <_strtod_l+0xbd8>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f5 faeb 	bl	8000ac8 <__aeabi_dcmpgt>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f43f af7b 	beq.w	800b3ee <_strtod_l+0xa0e>
 800b4f8:	e4c4      	b.n	800ae84 <_strtod_l+0x4a4>
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	b333      	cbz	r3, 800b54c <_strtod_l+0xb6c>
 800b4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b500:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b504:	d822      	bhi.n	800b54c <_strtod_l+0xb6c>
 800b506:	a32e      	add	r3, pc, #184	; (adr r3, 800b5c0 <_strtod_l+0xbe0>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 fac6 	bl	8000aa0 <__aeabi_dcmple>
 800b514:	b1a0      	cbz	r0, 800b540 <_strtod_l+0xb60>
 800b516:	4649      	mov	r1, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	f7f5 fb1d 	bl	8000b58 <__aeabi_d2uiz>
 800b51e:	2801      	cmp	r0, #1
 800b520:	bf38      	it	cc
 800b522:	2001      	movcc	r0, #1
 800b524:	f7f4 ffc6 	bl	80004b4 <__aeabi_ui2d>
 800b528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b52a:	4680      	mov	r8, r0
 800b52c:	4689      	mov	r9, r1
 800b52e:	bb23      	cbnz	r3, 800b57a <_strtod_l+0xb9a>
 800b530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b534:	9010      	str	r0, [sp, #64]	; 0x40
 800b536:	9311      	str	r3, [sp, #68]	; 0x44
 800b538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b53c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b544:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b548:	1a9b      	subs	r3, r3, r2
 800b54a:	9309      	str	r3, [sp, #36]	; 0x24
 800b54c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b550:	eeb0 0a48 	vmov.f32	s0, s16
 800b554:	eef0 0a68 	vmov.f32	s1, s17
 800b558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b55c:	f002 f92c 	bl	800d7b8 <__ulp>
 800b560:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b564:	ec53 2b10 	vmov	r2, r3, d0
 800b568:	f7f5 f81e 	bl	80005a8 <__aeabi_dmul>
 800b56c:	ec53 2b18 	vmov	r2, r3, d8
 800b570:	f7f4 fe64 	bl	800023c <__adddf3>
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	e78d      	b.n	800b496 <_strtod_l+0xab6>
 800b57a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b57e:	e7db      	b.n	800b538 <_strtod_l+0xb58>
 800b580:	a311      	add	r3, pc, #68	; (adr r3, 800b5c8 <_strtod_l+0xbe8>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f5 fa81 	bl	8000a8c <__aeabi_dcmplt>
 800b58a:	e7b2      	b.n	800b4f2 <_strtod_l+0xb12>
 800b58c:	2300      	movs	r3, #0
 800b58e:	930a      	str	r3, [sp, #40]	; 0x28
 800b590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	f7ff ba6b 	b.w	800aa70 <_strtod_l+0x90>
 800b59a:	2a65      	cmp	r2, #101	; 0x65
 800b59c:	f43f ab5f 	beq.w	800ac5e <_strtod_l+0x27e>
 800b5a0:	2a45      	cmp	r2, #69	; 0x45
 800b5a2:	f43f ab5c 	beq.w	800ac5e <_strtod_l+0x27e>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f7ff bb94 	b.w	800acd4 <_strtod_l+0x2f4>
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	94a03595 	.word	0x94a03595
 800b5b4:	3fdfffff 	.word	0x3fdfffff
 800b5b8:	35afe535 	.word	0x35afe535
 800b5bc:	3fe00000 	.word	0x3fe00000
 800b5c0:	ffc00000 	.word	0xffc00000
 800b5c4:	41dfffff 	.word	0x41dfffff
 800b5c8:	94a03595 	.word	0x94a03595
 800b5cc:	3fcfffff 	.word	0x3fcfffff
 800b5d0:	3ff00000 	.word	0x3ff00000
 800b5d4:	7ff00000 	.word	0x7ff00000
 800b5d8:	7fe00000 	.word	0x7fe00000
 800b5dc:	7c9fffff 	.word	0x7c9fffff
 800b5e0:	3fe00000 	.word	0x3fe00000
 800b5e4:	bff00000 	.word	0xbff00000
 800b5e8:	7fefffff 	.word	0x7fefffff

0800b5ec <_strtod_r>:
 800b5ec:	4b01      	ldr	r3, [pc, #4]	; (800b5f4 <_strtod_r+0x8>)
 800b5ee:	f7ff b9f7 	b.w	800a9e0 <_strtod_l>
 800b5f2:	bf00      	nop
 800b5f4:	200000c4 	.word	0x200000c4

0800b5f8 <_strtol_l.constprop.0>:
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fe:	d001      	beq.n	800b604 <_strtol_l.constprop.0+0xc>
 800b600:	2b24      	cmp	r3, #36	; 0x24
 800b602:	d906      	bls.n	800b612 <_strtol_l.constprop.0+0x1a>
 800b604:	f7fe f8fe 	bl	8009804 <__errno>
 800b608:	2316      	movs	r3, #22
 800b60a:	6003      	str	r3, [r0, #0]
 800b60c:	2000      	movs	r0, #0
 800b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b612:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6f8 <_strtol_l.constprop.0+0x100>
 800b616:	460d      	mov	r5, r1
 800b618:	462e      	mov	r6, r5
 800b61a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b61e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b622:	f017 0708 	ands.w	r7, r7, #8
 800b626:	d1f7      	bne.n	800b618 <_strtol_l.constprop.0+0x20>
 800b628:	2c2d      	cmp	r4, #45	; 0x2d
 800b62a:	d132      	bne.n	800b692 <_strtol_l.constprop.0+0x9a>
 800b62c:	782c      	ldrb	r4, [r5, #0]
 800b62e:	2701      	movs	r7, #1
 800b630:	1cb5      	adds	r5, r6, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d05b      	beq.n	800b6ee <_strtol_l.constprop.0+0xf6>
 800b636:	2b10      	cmp	r3, #16
 800b638:	d109      	bne.n	800b64e <_strtol_l.constprop.0+0x56>
 800b63a:	2c30      	cmp	r4, #48	; 0x30
 800b63c:	d107      	bne.n	800b64e <_strtol_l.constprop.0+0x56>
 800b63e:	782c      	ldrb	r4, [r5, #0]
 800b640:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b644:	2c58      	cmp	r4, #88	; 0x58
 800b646:	d14d      	bne.n	800b6e4 <_strtol_l.constprop.0+0xec>
 800b648:	786c      	ldrb	r4, [r5, #1]
 800b64a:	2310      	movs	r3, #16
 800b64c:	3502      	adds	r5, #2
 800b64e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b652:	f108 38ff 	add.w	r8, r8, #4294967295
 800b656:	f04f 0c00 	mov.w	ip, #0
 800b65a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b65e:	4666      	mov	r6, ip
 800b660:	fb03 8a19 	mls	sl, r3, r9, r8
 800b664:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b668:	f1be 0f09 	cmp.w	lr, #9
 800b66c:	d816      	bhi.n	800b69c <_strtol_l.constprop.0+0xa4>
 800b66e:	4674      	mov	r4, lr
 800b670:	42a3      	cmp	r3, r4
 800b672:	dd24      	ble.n	800b6be <_strtol_l.constprop.0+0xc6>
 800b674:	f1bc 0f00 	cmp.w	ip, #0
 800b678:	db1e      	blt.n	800b6b8 <_strtol_l.constprop.0+0xc0>
 800b67a:	45b1      	cmp	r9, r6
 800b67c:	d31c      	bcc.n	800b6b8 <_strtol_l.constprop.0+0xc0>
 800b67e:	d101      	bne.n	800b684 <_strtol_l.constprop.0+0x8c>
 800b680:	45a2      	cmp	sl, r4
 800b682:	db19      	blt.n	800b6b8 <_strtol_l.constprop.0+0xc0>
 800b684:	fb06 4603 	mla	r6, r6, r3, r4
 800b688:	f04f 0c01 	mov.w	ip, #1
 800b68c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b690:	e7e8      	b.n	800b664 <_strtol_l.constprop.0+0x6c>
 800b692:	2c2b      	cmp	r4, #43	; 0x2b
 800b694:	bf04      	itt	eq
 800b696:	782c      	ldrbeq	r4, [r5, #0]
 800b698:	1cb5      	addeq	r5, r6, #2
 800b69a:	e7ca      	b.n	800b632 <_strtol_l.constprop.0+0x3a>
 800b69c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b6a0:	f1be 0f19 	cmp.w	lr, #25
 800b6a4:	d801      	bhi.n	800b6aa <_strtol_l.constprop.0+0xb2>
 800b6a6:	3c37      	subs	r4, #55	; 0x37
 800b6a8:	e7e2      	b.n	800b670 <_strtol_l.constprop.0+0x78>
 800b6aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b6ae:	f1be 0f19 	cmp.w	lr, #25
 800b6b2:	d804      	bhi.n	800b6be <_strtol_l.constprop.0+0xc6>
 800b6b4:	3c57      	subs	r4, #87	; 0x57
 800b6b6:	e7db      	b.n	800b670 <_strtol_l.constprop.0+0x78>
 800b6b8:	f04f 3cff 	mov.w	ip, #4294967295
 800b6bc:	e7e6      	b.n	800b68c <_strtol_l.constprop.0+0x94>
 800b6be:	f1bc 0f00 	cmp.w	ip, #0
 800b6c2:	da05      	bge.n	800b6d0 <_strtol_l.constprop.0+0xd8>
 800b6c4:	2322      	movs	r3, #34	; 0x22
 800b6c6:	6003      	str	r3, [r0, #0]
 800b6c8:	4646      	mov	r6, r8
 800b6ca:	b942      	cbnz	r2, 800b6de <_strtol_l.constprop.0+0xe6>
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	e79e      	b.n	800b60e <_strtol_l.constprop.0+0x16>
 800b6d0:	b107      	cbz	r7, 800b6d4 <_strtol_l.constprop.0+0xdc>
 800b6d2:	4276      	negs	r6, r6
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	d0f9      	beq.n	800b6cc <_strtol_l.constprop.0+0xd4>
 800b6d8:	f1bc 0f00 	cmp.w	ip, #0
 800b6dc:	d000      	beq.n	800b6e0 <_strtol_l.constprop.0+0xe8>
 800b6de:	1e69      	subs	r1, r5, #1
 800b6e0:	6011      	str	r1, [r2, #0]
 800b6e2:	e7f3      	b.n	800b6cc <_strtol_l.constprop.0+0xd4>
 800b6e4:	2430      	movs	r4, #48	; 0x30
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1b1      	bne.n	800b64e <_strtol_l.constprop.0+0x56>
 800b6ea:	2308      	movs	r3, #8
 800b6ec:	e7af      	b.n	800b64e <_strtol_l.constprop.0+0x56>
 800b6ee:	2c30      	cmp	r4, #48	; 0x30
 800b6f0:	d0a5      	beq.n	800b63e <_strtol_l.constprop.0+0x46>
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	e7ab      	b.n	800b64e <_strtol_l.constprop.0+0x56>
 800b6f6:	bf00      	nop
 800b6f8:	0800e9e1 	.word	0x0800e9e1

0800b6fc <_strtol_r>:
 800b6fc:	f7ff bf7c 	b.w	800b5f8 <_strtol_l.constprop.0>

0800b700 <__swbuf_r>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	460e      	mov	r6, r1
 800b704:	4614      	mov	r4, r2
 800b706:	4605      	mov	r5, r0
 800b708:	b118      	cbz	r0, 800b712 <__swbuf_r+0x12>
 800b70a:	6983      	ldr	r3, [r0, #24]
 800b70c:	b90b      	cbnz	r3, 800b712 <__swbuf_r+0x12>
 800b70e:	f001 f84b 	bl	800c7a8 <__sinit>
 800b712:	4b21      	ldr	r3, [pc, #132]	; (800b798 <__swbuf_r+0x98>)
 800b714:	429c      	cmp	r4, r3
 800b716:	d12b      	bne.n	800b770 <__swbuf_r+0x70>
 800b718:	686c      	ldr	r4, [r5, #4]
 800b71a:	69a3      	ldr	r3, [r4, #24]
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	071a      	lsls	r2, r3, #28
 800b722:	d52f      	bpl.n	800b784 <__swbuf_r+0x84>
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	b36b      	cbz	r3, 800b784 <__swbuf_r+0x84>
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	6820      	ldr	r0, [r4, #0]
 800b72c:	1ac0      	subs	r0, r0, r3
 800b72e:	6963      	ldr	r3, [r4, #20]
 800b730:	b2f6      	uxtb	r6, r6
 800b732:	4283      	cmp	r3, r0
 800b734:	4637      	mov	r7, r6
 800b736:	dc04      	bgt.n	800b742 <__swbuf_r+0x42>
 800b738:	4621      	mov	r1, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 ffa0 	bl	800c680 <_fflush_r>
 800b740:	bb30      	cbnz	r0, 800b790 <__swbuf_r+0x90>
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	3b01      	subs	r3, #1
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	701e      	strb	r6, [r3, #0]
 800b750:	6963      	ldr	r3, [r4, #20]
 800b752:	3001      	adds	r0, #1
 800b754:	4283      	cmp	r3, r0
 800b756:	d004      	beq.n	800b762 <__swbuf_r+0x62>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	07db      	lsls	r3, r3, #31
 800b75c:	d506      	bpl.n	800b76c <__swbuf_r+0x6c>
 800b75e:	2e0a      	cmp	r6, #10
 800b760:	d104      	bne.n	800b76c <__swbuf_r+0x6c>
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 ff8b 	bl	800c680 <_fflush_r>
 800b76a:	b988      	cbnz	r0, 800b790 <__swbuf_r+0x90>
 800b76c:	4638      	mov	r0, r7
 800b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <__swbuf_r+0x9c>)
 800b772:	429c      	cmp	r4, r3
 800b774:	d101      	bne.n	800b77a <__swbuf_r+0x7a>
 800b776:	68ac      	ldr	r4, [r5, #8]
 800b778:	e7cf      	b.n	800b71a <__swbuf_r+0x1a>
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <__swbuf_r+0xa0>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	bf08      	it	eq
 800b780:	68ec      	ldreq	r4, [r5, #12]
 800b782:	e7ca      	b.n	800b71a <__swbuf_r+0x1a>
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f80c 	bl	800b7a4 <__swsetup_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0cb      	beq.n	800b728 <__swbuf_r+0x28>
 800b790:	f04f 37ff 	mov.w	r7, #4294967295
 800b794:	e7ea      	b.n	800b76c <__swbuf_r+0x6c>
 800b796:	bf00      	nop
 800b798:	0800eb94 	.word	0x0800eb94
 800b79c:	0800ebb4 	.word	0x0800ebb4
 800b7a0:	0800eb74 	.word	0x0800eb74

0800b7a4 <__swsetup_r>:
 800b7a4:	4b32      	ldr	r3, [pc, #200]	; (800b870 <__swsetup_r+0xcc>)
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	b125      	cbz	r5, 800b7ba <__swsetup_r+0x16>
 800b7b0:	69ab      	ldr	r3, [r5, #24]
 800b7b2:	b913      	cbnz	r3, 800b7ba <__swsetup_r+0x16>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 fff7 	bl	800c7a8 <__sinit>
 800b7ba:	4b2e      	ldr	r3, [pc, #184]	; (800b874 <__swsetup_r+0xd0>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d10f      	bne.n	800b7e0 <__swsetup_r+0x3c>
 800b7c0:	686c      	ldr	r4, [r5, #4]
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c8:	0719      	lsls	r1, r3, #28
 800b7ca:	d42c      	bmi.n	800b826 <__swsetup_r+0x82>
 800b7cc:	06dd      	lsls	r5, r3, #27
 800b7ce:	d411      	bmi.n	800b7f4 <__swsetup_r+0x50>
 800b7d0:	2309      	movs	r3, #9
 800b7d2:	6033      	str	r3, [r6, #0]
 800b7d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	e03e      	b.n	800b85e <__swsetup_r+0xba>
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <__swsetup_r+0xd4>)
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d101      	bne.n	800b7ea <__swsetup_r+0x46>
 800b7e6:	68ac      	ldr	r4, [r5, #8]
 800b7e8:	e7eb      	b.n	800b7c2 <__swsetup_r+0x1e>
 800b7ea:	4b24      	ldr	r3, [pc, #144]	; (800b87c <__swsetup_r+0xd8>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	bf08      	it	eq
 800b7f0:	68ec      	ldreq	r4, [r5, #12]
 800b7f2:	e7e6      	b.n	800b7c2 <__swsetup_r+0x1e>
 800b7f4:	0758      	lsls	r0, r3, #29
 800b7f6:	d512      	bpl.n	800b81e <__swsetup_r+0x7a>
 800b7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7fa:	b141      	cbz	r1, 800b80e <__swsetup_r+0x6a>
 800b7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b800:	4299      	cmp	r1, r3
 800b802:	d002      	beq.n	800b80a <__swsetup_r+0x66>
 800b804:	4630      	mov	r0, r6
 800b806:	f7fe f84d 	bl	80098a4 <_free_r>
 800b80a:	2300      	movs	r3, #0
 800b80c:	6363      	str	r3, [r4, #52]	; 0x34
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	2300      	movs	r3, #0
 800b818:	6063      	str	r3, [r4, #4]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f043 0308 	orr.w	r3, r3, #8
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	b94b      	cbnz	r3, 800b83e <__swsetup_r+0x9a>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b834:	d003      	beq.n	800b83e <__swsetup_r+0x9a>
 800b836:	4621      	mov	r1, r4
 800b838:	4630      	mov	r0, r6
 800b83a:	f001 fbed 	bl	800d018 <__smakebuf_r>
 800b83e:	89a0      	ldrh	r0, [r4, #12]
 800b840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b844:	f010 0301 	ands.w	r3, r0, #1
 800b848:	d00a      	beq.n	800b860 <__swsetup_r+0xbc>
 800b84a:	2300      	movs	r3, #0
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	6963      	ldr	r3, [r4, #20]
 800b850:	425b      	negs	r3, r3
 800b852:	61a3      	str	r3, [r4, #24]
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	b943      	cbnz	r3, 800b86a <__swsetup_r+0xc6>
 800b858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b85c:	d1ba      	bne.n	800b7d4 <__swsetup_r+0x30>
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	0781      	lsls	r1, r0, #30
 800b862:	bf58      	it	pl
 800b864:	6963      	ldrpl	r3, [r4, #20]
 800b866:	60a3      	str	r3, [r4, #8]
 800b868:	e7f4      	b.n	800b854 <__swsetup_r+0xb0>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e7f7      	b.n	800b85e <__swsetup_r+0xba>
 800b86e:	bf00      	nop
 800b870:	2000005c 	.word	0x2000005c
 800b874:	0800eb94 	.word	0x0800eb94
 800b878:	0800ebb4 	.word	0x0800ebb4
 800b87c:	0800eb74 	.word	0x0800eb74

0800b880 <quorem>:
 800b880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	6903      	ldr	r3, [r0, #16]
 800b886:	690c      	ldr	r4, [r1, #16]
 800b888:	42a3      	cmp	r3, r4
 800b88a:	4607      	mov	r7, r0
 800b88c:	f2c0 8081 	blt.w	800b992 <quorem+0x112>
 800b890:	3c01      	subs	r4, #1
 800b892:	f101 0814 	add.w	r8, r1, #20
 800b896:	f100 0514 	add.w	r5, r0, #20
 800b89a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b8b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8b8:	d331      	bcc.n	800b91e <quorem+0x9e>
 800b8ba:	f04f 0e00 	mov.w	lr, #0
 800b8be:	4640      	mov	r0, r8
 800b8c0:	46ac      	mov	ip, r5
 800b8c2:	46f2      	mov	sl, lr
 800b8c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8c8:	b293      	uxth	r3, r2
 800b8ca:	fb06 e303 	mla	r3, r6, r3, lr
 800b8ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b8d8:	f8dc a000 	ldr.w	sl, [ip]
 800b8dc:	0c12      	lsrs	r2, r2, #16
 800b8de:	fa13 f38a 	uxtah	r3, r3, sl
 800b8e2:	fb06 e202 	mla	r2, r6, r2, lr
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	9b00      	ldr	r3, [sp, #0]
 800b8ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b8f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8fc:	4581      	cmp	r9, r0
 800b8fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b902:	f84c 3b04 	str.w	r3, [ip], #4
 800b906:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b90a:	d2db      	bcs.n	800b8c4 <quorem+0x44>
 800b90c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b910:	b92b      	cbnz	r3, 800b91e <quorem+0x9e>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	3b04      	subs	r3, #4
 800b916:	429d      	cmp	r5, r3
 800b918:	461a      	mov	r2, r3
 800b91a:	d32e      	bcc.n	800b97a <quorem+0xfa>
 800b91c:	613c      	str	r4, [r7, #16]
 800b91e:	4638      	mov	r0, r7
 800b920:	f001 fea4 	bl	800d66c <__mcmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	db24      	blt.n	800b972 <quorem+0xf2>
 800b928:	3601      	adds	r6, #1
 800b92a:	4628      	mov	r0, r5
 800b92c:	f04f 0c00 	mov.w	ip, #0
 800b930:	f858 2b04 	ldr.w	r2, [r8], #4
 800b934:	f8d0 e000 	ldr.w	lr, [r0]
 800b938:	b293      	uxth	r3, r2
 800b93a:	ebac 0303 	sub.w	r3, ip, r3
 800b93e:	0c12      	lsrs	r2, r2, #16
 800b940:	fa13 f38e 	uxtah	r3, r3, lr
 800b944:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b952:	45c1      	cmp	r9, r8
 800b954:	f840 3b04 	str.w	r3, [r0], #4
 800b958:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b95c:	d2e8      	bcs.n	800b930 <quorem+0xb0>
 800b95e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b966:	b922      	cbnz	r2, 800b972 <quorem+0xf2>
 800b968:	3b04      	subs	r3, #4
 800b96a:	429d      	cmp	r5, r3
 800b96c:	461a      	mov	r2, r3
 800b96e:	d30a      	bcc.n	800b986 <quorem+0x106>
 800b970:	613c      	str	r4, [r7, #16]
 800b972:	4630      	mov	r0, r6
 800b974:	b003      	add	sp, #12
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	3b04      	subs	r3, #4
 800b97e:	2a00      	cmp	r2, #0
 800b980:	d1cc      	bne.n	800b91c <quorem+0x9c>
 800b982:	3c01      	subs	r4, #1
 800b984:	e7c7      	b.n	800b916 <quorem+0x96>
 800b986:	6812      	ldr	r2, [r2, #0]
 800b988:	3b04      	subs	r3, #4
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	d1f0      	bne.n	800b970 <quorem+0xf0>
 800b98e:	3c01      	subs	r4, #1
 800b990:	e7eb      	b.n	800b96a <quorem+0xea>
 800b992:	2000      	movs	r0, #0
 800b994:	e7ee      	b.n	800b974 <quorem+0xf4>
	...

0800b998 <_dtoa_r>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	ed2d 8b04 	vpush	{d8-d9}
 800b9a0:	ec57 6b10 	vmov	r6, r7, d0
 800b9a4:	b093      	sub	sp, #76	; 0x4c
 800b9a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b9ac:	9106      	str	r1, [sp, #24]
 800b9ae:	ee10 aa10 	vmov	sl, s0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9b8:	46bb      	mov	fp, r7
 800b9ba:	b975      	cbnz	r5, 800b9da <_dtoa_r+0x42>
 800b9bc:	2010      	movs	r0, #16
 800b9be:	f7fd ff4b 	bl	8009858 <malloc>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	6260      	str	r0, [r4, #36]	; 0x24
 800b9c6:	b920      	cbnz	r0, 800b9d2 <_dtoa_r+0x3a>
 800b9c8:	4ba7      	ldr	r3, [pc, #668]	; (800bc68 <_dtoa_r+0x2d0>)
 800b9ca:	21ea      	movs	r1, #234	; 0xea
 800b9cc:	48a7      	ldr	r0, [pc, #668]	; (800bc6c <_dtoa_r+0x2d4>)
 800b9ce:	f002 fb8d 	bl	800e0ec <__assert_func>
 800b9d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9d6:	6005      	str	r5, [r0, #0]
 800b9d8:	60c5      	str	r5, [r0, #12]
 800b9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9dc:	6819      	ldr	r1, [r3, #0]
 800b9de:	b151      	cbz	r1, 800b9f6 <_dtoa_r+0x5e>
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	604a      	str	r2, [r1, #4]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	4093      	lsls	r3, r2
 800b9e8:	608b      	str	r3, [r1, #8]
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f001 fbb2 	bl	800d154 <_Bfree>
 800b9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	1e3b      	subs	r3, r7, #0
 800b9f8:	bfaa      	itet	ge
 800b9fa:	2300      	movge	r3, #0
 800b9fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ba00:	f8c8 3000 	strge.w	r3, [r8]
 800ba04:	4b9a      	ldr	r3, [pc, #616]	; (800bc70 <_dtoa_r+0x2d8>)
 800ba06:	bfbc      	itt	lt
 800ba08:	2201      	movlt	r2, #1
 800ba0a:	f8c8 2000 	strlt.w	r2, [r8]
 800ba0e:	ea33 030b 	bics.w	r3, r3, fp
 800ba12:	d11b      	bne.n	800ba4c <_dtoa_r+0xb4>
 800ba14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba16:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba20:	4333      	orrs	r3, r6
 800ba22:	f000 8592 	beq.w	800c54a <_dtoa_r+0xbb2>
 800ba26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba28:	b963      	cbnz	r3, 800ba44 <_dtoa_r+0xac>
 800ba2a:	4b92      	ldr	r3, [pc, #584]	; (800bc74 <_dtoa_r+0x2dc>)
 800ba2c:	e022      	b.n	800ba74 <_dtoa_r+0xdc>
 800ba2e:	4b92      	ldr	r3, [pc, #584]	; (800bc78 <_dtoa_r+0x2e0>)
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	3308      	adds	r3, #8
 800ba34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	9801      	ldr	r0, [sp, #4]
 800ba3a:	b013      	add	sp, #76	; 0x4c
 800ba3c:	ecbd 8b04 	vpop	{d8-d9}
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	4b8b      	ldr	r3, [pc, #556]	; (800bc74 <_dtoa_r+0x2dc>)
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	3303      	adds	r3, #3
 800ba4a:	e7f3      	b.n	800ba34 <_dtoa_r+0x9c>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	f7f5 f810 	bl	8000a78 <__aeabi_dcmpeq>
 800ba58:	ec4b ab19 	vmov	d9, sl, fp
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	b158      	cbz	r0, 800ba78 <_dtoa_r+0xe0>
 800ba60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba62:	2301      	movs	r3, #1
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 856b 	beq.w	800c544 <_dtoa_r+0xbac>
 800ba6e:	4883      	ldr	r0, [pc, #524]	; (800bc7c <_dtoa_r+0x2e4>)
 800ba70:	6018      	str	r0, [r3, #0]
 800ba72:	1e43      	subs	r3, r0, #1
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	e7df      	b.n	800ba38 <_dtoa_r+0xa0>
 800ba78:	ec4b ab10 	vmov	d0, sl, fp
 800ba7c:	aa10      	add	r2, sp, #64	; 0x40
 800ba7e:	a911      	add	r1, sp, #68	; 0x44
 800ba80:	4620      	mov	r0, r4
 800ba82:	f001 ff15 	bl	800d8b0 <__d2b>
 800ba86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba8a:	ee08 0a10 	vmov	s16, r0
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	f000 8084 	beq.w	800bb9c <_dtoa_r+0x204>
 800ba94:	ee19 3a90 	vmov	r3, s19
 800ba98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800baa0:	4656      	mov	r6, sl
 800baa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800baa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800baaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800baae:	4b74      	ldr	r3, [pc, #464]	; (800bc80 <_dtoa_r+0x2e8>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fbbf 	bl	8000238 <__aeabi_dsub>
 800baba:	a365      	add	r3, pc, #404	; (adr r3, 800bc50 <_dtoa_r+0x2b8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fd72 	bl	80005a8 <__aeabi_dmul>
 800bac4:	a364      	add	r3, pc, #400	; (adr r3, 800bc58 <_dtoa_r+0x2c0>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fbb7 	bl	800023c <__adddf3>
 800bace:	4606      	mov	r6, r0
 800bad0:	4628      	mov	r0, r5
 800bad2:	460f      	mov	r7, r1
 800bad4:	f7f4 fcfe 	bl	80004d4 <__aeabi_i2d>
 800bad8:	a361      	add	r3, pc, #388	; (adr r3, 800bc60 <_dtoa_r+0x2c8>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fd63 	bl	80005a8 <__aeabi_dmul>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	f7f4 fba7 	bl	800023c <__adddf3>
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	f7f5 f809 	bl	8000b08 <__aeabi_d2iz>
 800baf6:	2200      	movs	r2, #0
 800baf8:	9000      	str	r0, [sp, #0]
 800bafa:	2300      	movs	r3, #0
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f4 ffc4 	bl	8000a8c <__aeabi_dcmplt>
 800bb04:	b150      	cbz	r0, 800bb1c <_dtoa_r+0x184>
 800bb06:	9800      	ldr	r0, [sp, #0]
 800bb08:	f7f4 fce4 	bl	80004d4 <__aeabi_i2d>
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	463b      	mov	r3, r7
 800bb10:	f7f4 ffb2 	bl	8000a78 <__aeabi_dcmpeq>
 800bb14:	b910      	cbnz	r0, 800bb1c <_dtoa_r+0x184>
 800bb16:	9b00      	ldr	r3, [sp, #0]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	2b16      	cmp	r3, #22
 800bb20:	d85a      	bhi.n	800bbd8 <_dtoa_r+0x240>
 800bb22:	9a00      	ldr	r2, [sp, #0]
 800bb24:	4b57      	ldr	r3, [pc, #348]	; (800bc84 <_dtoa_r+0x2ec>)
 800bb26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	ec51 0b19 	vmov	r0, r1, d9
 800bb32:	f7f4 ffab 	bl	8000a8c <__aeabi_dcmplt>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d050      	beq.n	800bbdc <_dtoa_r+0x244>
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	2300      	movs	r3, #0
 800bb42:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb46:	1b5d      	subs	r5, r3, r5
 800bb48:	1e6b      	subs	r3, r5, #1
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	bf45      	ittet	mi
 800bb4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb52:	9304      	strmi	r3, [sp, #16]
 800bb54:	2300      	movpl	r3, #0
 800bb56:	2300      	movmi	r3, #0
 800bb58:	bf4c      	ite	mi
 800bb5a:	9305      	strmi	r3, [sp, #20]
 800bb5c:	9304      	strpl	r3, [sp, #16]
 800bb5e:	9b00      	ldr	r3, [sp, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	db3d      	blt.n	800bbe0 <_dtoa_r+0x248>
 800bb64:	9b05      	ldr	r3, [sp, #20]
 800bb66:	9a00      	ldr	r2, [sp, #0]
 800bb68:	920a      	str	r2, [sp, #40]	; 0x28
 800bb6a:	4413      	add	r3, r2
 800bb6c:	9305      	str	r3, [sp, #20]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9307      	str	r3, [sp, #28]
 800bb72:	9b06      	ldr	r3, [sp, #24]
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	f200 8089 	bhi.w	800bc8c <_dtoa_r+0x2f4>
 800bb7a:	2b05      	cmp	r3, #5
 800bb7c:	bfc4      	itt	gt
 800bb7e:	3b04      	subgt	r3, #4
 800bb80:	9306      	strgt	r3, [sp, #24]
 800bb82:	9b06      	ldr	r3, [sp, #24]
 800bb84:	f1a3 0302 	sub.w	r3, r3, #2
 800bb88:	bfcc      	ite	gt
 800bb8a:	2500      	movgt	r5, #0
 800bb8c:	2501      	movle	r5, #1
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	f200 8087 	bhi.w	800bca2 <_dtoa_r+0x30a>
 800bb94:	e8df f003 	tbb	[pc, r3]
 800bb98:	59383a2d 	.word	0x59383a2d
 800bb9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bba0:	441d      	add	r5, r3
 800bba2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bba6:	2b20      	cmp	r3, #32
 800bba8:	bfc1      	itttt	gt
 800bbaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bbae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bbb2:	fa0b f303 	lslgt.w	r3, fp, r3
 800bbb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bbba:	bfda      	itte	le
 800bbbc:	f1c3 0320 	rsble	r3, r3, #32
 800bbc0:	fa06 f003 	lslle.w	r0, r6, r3
 800bbc4:	4318      	orrgt	r0, r3
 800bbc6:	f7f4 fc75 	bl	80004b4 <__aeabi_ui2d>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4606      	mov	r6, r0
 800bbce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bbd2:	3d01      	subs	r5, #1
 800bbd4:	930e      	str	r3, [sp, #56]	; 0x38
 800bbd6:	e76a      	b.n	800baae <_dtoa_r+0x116>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e7b2      	b.n	800bb42 <_dtoa_r+0x1aa>
 800bbdc:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbde:	e7b1      	b.n	800bb44 <_dtoa_r+0x1ac>
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	9a00      	ldr	r2, [sp, #0]
 800bbe4:	1a9b      	subs	r3, r3, r2
 800bbe6:	9304      	str	r3, [sp, #16]
 800bbe8:	4253      	negs	r3, r2
 800bbea:	9307      	str	r3, [sp, #28]
 800bbec:	2300      	movs	r3, #0
 800bbee:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf0:	e7bf      	b.n	800bb72 <_dtoa_r+0x1da>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9308      	str	r3, [sp, #32]
 800bbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	dc55      	bgt.n	800bca8 <_dtoa_r+0x310>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc02:	461a      	mov	r2, r3
 800bc04:	9209      	str	r2, [sp, #36]	; 0x24
 800bc06:	e00c      	b.n	800bc22 <_dtoa_r+0x28a>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e7f3      	b.n	800bbf4 <_dtoa_r+0x25c>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc10:	9308      	str	r3, [sp, #32]
 800bc12:	9b00      	ldr	r3, [sp, #0]
 800bc14:	4413      	add	r3, r2
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	9303      	str	r3, [sp, #12]
 800bc1e:	bfb8      	it	lt
 800bc20:	2301      	movlt	r3, #1
 800bc22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc24:	2200      	movs	r2, #0
 800bc26:	6042      	str	r2, [r0, #4]
 800bc28:	2204      	movs	r2, #4
 800bc2a:	f102 0614 	add.w	r6, r2, #20
 800bc2e:	429e      	cmp	r6, r3
 800bc30:	6841      	ldr	r1, [r0, #4]
 800bc32:	d93d      	bls.n	800bcb0 <_dtoa_r+0x318>
 800bc34:	4620      	mov	r0, r4
 800bc36:	f001 fa4d 	bl	800d0d4 <_Balloc>
 800bc3a:	9001      	str	r0, [sp, #4]
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d13b      	bne.n	800bcb8 <_dtoa_r+0x320>
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <_dtoa_r+0x2f0>)
 800bc42:	4602      	mov	r2, r0
 800bc44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc48:	e6c0      	b.n	800b9cc <_dtoa_r+0x34>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e7df      	b.n	800bc0e <_dtoa_r+0x276>
 800bc4e:	bf00      	nop
 800bc50:	636f4361 	.word	0x636f4361
 800bc54:	3fd287a7 	.word	0x3fd287a7
 800bc58:	8b60c8b3 	.word	0x8b60c8b3
 800bc5c:	3fc68a28 	.word	0x3fc68a28
 800bc60:	509f79fb 	.word	0x509f79fb
 800bc64:	3fd34413 	.word	0x3fd34413
 800bc68:	0800eaee 	.word	0x0800eaee
 800bc6c:	0800eb05 	.word	0x0800eb05
 800bc70:	7ff00000 	.word	0x7ff00000
 800bc74:	0800eaea 	.word	0x0800eaea
 800bc78:	0800eae1 	.word	0x0800eae1
 800bc7c:	0800e961 	.word	0x0800e961
 800bc80:	3ff80000 	.word	0x3ff80000
 800bc84:	0800ecd8 	.word	0x0800ecd8
 800bc88:	0800eb60 	.word	0x0800eb60
 800bc8c:	2501      	movs	r5, #1
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9306      	str	r3, [sp, #24]
 800bc92:	9508      	str	r5, [sp, #32]
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2312      	movs	r3, #18
 800bca0:	e7b0      	b.n	800bc04 <_dtoa_r+0x26c>
 800bca2:	2301      	movs	r3, #1
 800bca4:	9308      	str	r3, [sp, #32]
 800bca6:	e7f5      	b.n	800bc94 <_dtoa_r+0x2fc>
 800bca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcae:	e7b8      	b.n	800bc22 <_dtoa_r+0x28a>
 800bcb0:	3101      	adds	r1, #1
 800bcb2:	6041      	str	r1, [r0, #4]
 800bcb4:	0052      	lsls	r2, r2, #1
 800bcb6:	e7b8      	b.n	800bc2a <_dtoa_r+0x292>
 800bcb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcba:	9a01      	ldr	r2, [sp, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	2b0e      	cmp	r3, #14
 800bcc2:	f200 809d 	bhi.w	800be00 <_dtoa_r+0x468>
 800bcc6:	2d00      	cmp	r5, #0
 800bcc8:	f000 809a 	beq.w	800be00 <_dtoa_r+0x468>
 800bccc:	9b00      	ldr	r3, [sp, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	dd32      	ble.n	800bd38 <_dtoa_r+0x3a0>
 800bcd2:	4ab7      	ldr	r2, [pc, #732]	; (800bfb0 <_dtoa_r+0x618>)
 800bcd4:	f003 030f 	and.w	r3, r3, #15
 800bcd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bce0:	9b00      	ldr	r3, [sp, #0]
 800bce2:	05d8      	lsls	r0, r3, #23
 800bce4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bce8:	d516      	bpl.n	800bd18 <_dtoa_r+0x380>
 800bcea:	4bb2      	ldr	r3, [pc, #712]	; (800bfb4 <_dtoa_r+0x61c>)
 800bcec:	ec51 0b19 	vmov	r0, r1, d9
 800bcf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcf4:	f7f4 fd82 	bl	80007fc <__aeabi_ddiv>
 800bcf8:	f007 070f 	and.w	r7, r7, #15
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	468b      	mov	fp, r1
 800bd00:	2503      	movs	r5, #3
 800bd02:	4eac      	ldr	r6, [pc, #688]	; (800bfb4 <_dtoa_r+0x61c>)
 800bd04:	b957      	cbnz	r7, 800bd1c <_dtoa_r+0x384>
 800bd06:	4642      	mov	r2, r8
 800bd08:	464b      	mov	r3, r9
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	4659      	mov	r1, fp
 800bd0e:	f7f4 fd75 	bl	80007fc <__aeabi_ddiv>
 800bd12:	4682      	mov	sl, r0
 800bd14:	468b      	mov	fp, r1
 800bd16:	e028      	b.n	800bd6a <_dtoa_r+0x3d2>
 800bd18:	2502      	movs	r5, #2
 800bd1a:	e7f2      	b.n	800bd02 <_dtoa_r+0x36a>
 800bd1c:	07f9      	lsls	r1, r7, #31
 800bd1e:	d508      	bpl.n	800bd32 <_dtoa_r+0x39a>
 800bd20:	4640      	mov	r0, r8
 800bd22:	4649      	mov	r1, r9
 800bd24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd28:	f7f4 fc3e 	bl	80005a8 <__aeabi_dmul>
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	4680      	mov	r8, r0
 800bd30:	4689      	mov	r9, r1
 800bd32:	107f      	asrs	r7, r7, #1
 800bd34:	3608      	adds	r6, #8
 800bd36:	e7e5      	b.n	800bd04 <_dtoa_r+0x36c>
 800bd38:	f000 809b 	beq.w	800be72 <_dtoa_r+0x4da>
 800bd3c:	9b00      	ldr	r3, [sp, #0]
 800bd3e:	4f9d      	ldr	r7, [pc, #628]	; (800bfb4 <_dtoa_r+0x61c>)
 800bd40:	425e      	negs	r6, r3
 800bd42:	4b9b      	ldr	r3, [pc, #620]	; (800bfb0 <_dtoa_r+0x618>)
 800bd44:	f006 020f 	and.w	r2, r6, #15
 800bd48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	ec51 0b19 	vmov	r0, r1, d9
 800bd54:	f7f4 fc28 	bl	80005a8 <__aeabi_dmul>
 800bd58:	1136      	asrs	r6, r6, #4
 800bd5a:	4682      	mov	sl, r0
 800bd5c:	468b      	mov	fp, r1
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2502      	movs	r5, #2
 800bd62:	2e00      	cmp	r6, #0
 800bd64:	d17a      	bne.n	800be5c <_dtoa_r+0x4c4>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1d3      	bne.n	800bd12 <_dtoa_r+0x37a>
 800bd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 8082 	beq.w	800be76 <_dtoa_r+0x4de>
 800bd72:	4b91      	ldr	r3, [pc, #580]	; (800bfb8 <_dtoa_r+0x620>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	4650      	mov	r0, sl
 800bd78:	4659      	mov	r1, fp
 800bd7a:	f7f4 fe87 	bl	8000a8c <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d079      	beq.n	800be76 <_dtoa_r+0x4de>
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d076      	beq.n	800be76 <_dtoa_r+0x4de>
 800bd88:	9b02      	ldr	r3, [sp, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dd36      	ble.n	800bdfc <_dtoa_r+0x464>
 800bd8e:	9b00      	ldr	r3, [sp, #0]
 800bd90:	4650      	mov	r0, sl
 800bd92:	4659      	mov	r1, fp
 800bd94:	1e5f      	subs	r7, r3, #1
 800bd96:	2200      	movs	r2, #0
 800bd98:	4b88      	ldr	r3, [pc, #544]	; (800bfbc <_dtoa_r+0x624>)
 800bd9a:	f7f4 fc05 	bl	80005a8 <__aeabi_dmul>
 800bd9e:	9e02      	ldr	r6, [sp, #8]
 800bda0:	4682      	mov	sl, r0
 800bda2:	468b      	mov	fp, r1
 800bda4:	3501      	adds	r5, #1
 800bda6:	4628      	mov	r0, r5
 800bda8:	f7f4 fb94 	bl	80004d4 <__aeabi_i2d>
 800bdac:	4652      	mov	r2, sl
 800bdae:	465b      	mov	r3, fp
 800bdb0:	f7f4 fbfa 	bl	80005a8 <__aeabi_dmul>
 800bdb4:	4b82      	ldr	r3, [pc, #520]	; (800bfc0 <_dtoa_r+0x628>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f7f4 fa40 	bl	800023c <__adddf3>
 800bdbc:	46d0      	mov	r8, sl
 800bdbe:	46d9      	mov	r9, fp
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d158      	bne.n	800be7c <_dtoa_r+0x4e4>
 800bdca:	4b7e      	ldr	r3, [pc, #504]	; (800bfc4 <_dtoa_r+0x62c>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f7f4 fa31 	bl	8000238 <__aeabi_dsub>
 800bdd6:	4652      	mov	r2, sl
 800bdd8:	465b      	mov	r3, fp
 800bdda:	4680      	mov	r8, r0
 800bddc:	4689      	mov	r9, r1
 800bdde:	f7f4 fe73 	bl	8000ac8 <__aeabi_dcmpgt>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	f040 8295 	bne.w	800c312 <_dtoa_r+0x97a>
 800bde8:	4652      	mov	r2, sl
 800bdea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	f7f4 fe4b 	bl	8000a8c <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f040 8289 	bne.w	800c30e <_dtoa_r+0x976>
 800bdfc:	ec5b ab19 	vmov	sl, fp, d9
 800be00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be02:	2b00      	cmp	r3, #0
 800be04:	f2c0 8148 	blt.w	800c098 <_dtoa_r+0x700>
 800be08:	9a00      	ldr	r2, [sp, #0]
 800be0a:	2a0e      	cmp	r2, #14
 800be0c:	f300 8144 	bgt.w	800c098 <_dtoa_r+0x700>
 800be10:	4b67      	ldr	r3, [pc, #412]	; (800bfb0 <_dtoa_r+0x618>)
 800be12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f280 80d5 	bge.w	800bfcc <_dtoa_r+0x634>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f300 80d1 	bgt.w	800bfcc <_dtoa_r+0x634>
 800be2a:	f040 826f 	bne.w	800c30c <_dtoa_r+0x974>
 800be2e:	4b65      	ldr	r3, [pc, #404]	; (800bfc4 <_dtoa_r+0x62c>)
 800be30:	2200      	movs	r2, #0
 800be32:	4640      	mov	r0, r8
 800be34:	4649      	mov	r1, r9
 800be36:	f7f4 fbb7 	bl	80005a8 <__aeabi_dmul>
 800be3a:	4652      	mov	r2, sl
 800be3c:	465b      	mov	r3, fp
 800be3e:	f7f4 fe39 	bl	8000ab4 <__aeabi_dcmpge>
 800be42:	9e03      	ldr	r6, [sp, #12]
 800be44:	4637      	mov	r7, r6
 800be46:	2800      	cmp	r0, #0
 800be48:	f040 8245 	bne.w	800c2d6 <_dtoa_r+0x93e>
 800be4c:	9d01      	ldr	r5, [sp, #4]
 800be4e:	2331      	movs	r3, #49	; 0x31
 800be50:	f805 3b01 	strb.w	r3, [r5], #1
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	e240      	b.n	800c2de <_dtoa_r+0x946>
 800be5c:	07f2      	lsls	r2, r6, #31
 800be5e:	d505      	bpl.n	800be6c <_dtoa_r+0x4d4>
 800be60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be64:	f7f4 fba0 	bl	80005a8 <__aeabi_dmul>
 800be68:	3501      	adds	r5, #1
 800be6a:	2301      	movs	r3, #1
 800be6c:	1076      	asrs	r6, r6, #1
 800be6e:	3708      	adds	r7, #8
 800be70:	e777      	b.n	800bd62 <_dtoa_r+0x3ca>
 800be72:	2502      	movs	r5, #2
 800be74:	e779      	b.n	800bd6a <_dtoa_r+0x3d2>
 800be76:	9f00      	ldr	r7, [sp, #0]
 800be78:	9e03      	ldr	r6, [sp, #12]
 800be7a:	e794      	b.n	800bda6 <_dtoa_r+0x40e>
 800be7c:	9901      	ldr	r1, [sp, #4]
 800be7e:	4b4c      	ldr	r3, [pc, #304]	; (800bfb0 <_dtoa_r+0x618>)
 800be80:	4431      	add	r1, r6
 800be82:	910d      	str	r1, [sp, #52]	; 0x34
 800be84:	9908      	ldr	r1, [sp, #32]
 800be86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be8e:	2900      	cmp	r1, #0
 800be90:	d043      	beq.n	800bf1a <_dtoa_r+0x582>
 800be92:	494d      	ldr	r1, [pc, #308]	; (800bfc8 <_dtoa_r+0x630>)
 800be94:	2000      	movs	r0, #0
 800be96:	f7f4 fcb1 	bl	80007fc <__aeabi_ddiv>
 800be9a:	4652      	mov	r2, sl
 800be9c:	465b      	mov	r3, fp
 800be9e:	f7f4 f9cb 	bl	8000238 <__aeabi_dsub>
 800bea2:	9d01      	ldr	r5, [sp, #4]
 800bea4:	4682      	mov	sl, r0
 800bea6:	468b      	mov	fp, r1
 800bea8:	4649      	mov	r1, r9
 800beaa:	4640      	mov	r0, r8
 800beac:	f7f4 fe2c 	bl	8000b08 <__aeabi_d2iz>
 800beb0:	4606      	mov	r6, r0
 800beb2:	f7f4 fb0f 	bl	80004d4 <__aeabi_i2d>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	f7f4 f9bb 	bl	8000238 <__aeabi_dsub>
 800bec2:	3630      	adds	r6, #48	; 0x30
 800bec4:	f805 6b01 	strb.w	r6, [r5], #1
 800bec8:	4652      	mov	r2, sl
 800beca:	465b      	mov	r3, fp
 800becc:	4680      	mov	r8, r0
 800bece:	4689      	mov	r9, r1
 800bed0:	f7f4 fddc 	bl	8000a8c <__aeabi_dcmplt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d163      	bne.n	800bfa0 <_dtoa_r+0x608>
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	4936      	ldr	r1, [pc, #216]	; (800bfb8 <_dtoa_r+0x620>)
 800bede:	2000      	movs	r0, #0
 800bee0:	f7f4 f9aa 	bl	8000238 <__aeabi_dsub>
 800bee4:	4652      	mov	r2, sl
 800bee6:	465b      	mov	r3, fp
 800bee8:	f7f4 fdd0 	bl	8000a8c <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 80b5 	bne.w	800c05c <_dtoa_r+0x6c4>
 800bef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bef4:	429d      	cmp	r5, r3
 800bef6:	d081      	beq.n	800bdfc <_dtoa_r+0x464>
 800bef8:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <_dtoa_r+0x624>)
 800befa:	2200      	movs	r2, #0
 800befc:	4650      	mov	r0, sl
 800befe:	4659      	mov	r1, fp
 800bf00:	f7f4 fb52 	bl	80005a8 <__aeabi_dmul>
 800bf04:	4b2d      	ldr	r3, [pc, #180]	; (800bfbc <_dtoa_r+0x624>)
 800bf06:	4682      	mov	sl, r0
 800bf08:	468b      	mov	fp, r1
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f7f4 fb4a 	bl	80005a8 <__aeabi_dmul>
 800bf14:	4680      	mov	r8, r0
 800bf16:	4689      	mov	r9, r1
 800bf18:	e7c6      	b.n	800bea8 <_dtoa_r+0x510>
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	4659      	mov	r1, fp
 800bf1e:	f7f4 fb43 	bl	80005a8 <__aeabi_dmul>
 800bf22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf24:	9d01      	ldr	r5, [sp, #4]
 800bf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf28:	4682      	mov	sl, r0
 800bf2a:	468b      	mov	fp, r1
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4640      	mov	r0, r8
 800bf30:	f7f4 fdea 	bl	8000b08 <__aeabi_d2iz>
 800bf34:	4606      	mov	r6, r0
 800bf36:	f7f4 facd 	bl	80004d4 <__aeabi_i2d>
 800bf3a:	3630      	adds	r6, #48	; 0x30
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 f978 	bl	8000238 <__aeabi_dsub>
 800bf48:	f805 6b01 	strb.w	r6, [r5], #1
 800bf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf4e:	429d      	cmp	r5, r3
 800bf50:	4680      	mov	r8, r0
 800bf52:	4689      	mov	r9, r1
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	d124      	bne.n	800bfa4 <_dtoa_r+0x60c>
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <_dtoa_r+0x630>)
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	4659      	mov	r1, fp
 800bf60:	f7f4 f96c 	bl	800023c <__adddf3>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fdac 	bl	8000ac8 <__aeabi_dcmpgt>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d173      	bne.n	800c05c <_dtoa_r+0x6c4>
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	4913      	ldr	r1, [pc, #76]	; (800bfc8 <_dtoa_r+0x630>)
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	f7f4 f95c 	bl	8000238 <__aeabi_dsub>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 fd80 	bl	8000a8c <__aeabi_dcmplt>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f43f af35 	beq.w	800bdfc <_dtoa_r+0x464>
 800bf92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf94:	1e6b      	subs	r3, r5, #1
 800bf96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf9c:	2b30      	cmp	r3, #48	; 0x30
 800bf9e:	d0f8      	beq.n	800bf92 <_dtoa_r+0x5fa>
 800bfa0:	9700      	str	r7, [sp, #0]
 800bfa2:	e049      	b.n	800c038 <_dtoa_r+0x6a0>
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <_dtoa_r+0x624>)
 800bfa6:	f7f4 faff 	bl	80005a8 <__aeabi_dmul>
 800bfaa:	4680      	mov	r8, r0
 800bfac:	4689      	mov	r9, r1
 800bfae:	e7bd      	b.n	800bf2c <_dtoa_r+0x594>
 800bfb0:	0800ecd8 	.word	0x0800ecd8
 800bfb4:	0800ecb0 	.word	0x0800ecb0
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	40240000 	.word	0x40240000
 800bfc0:	401c0000 	.word	0x401c0000
 800bfc4:	40140000 	.word	0x40140000
 800bfc8:	3fe00000 	.word	0x3fe00000
 800bfcc:	9d01      	ldr	r5, [sp, #4]
 800bfce:	4656      	mov	r6, sl
 800bfd0:	465f      	mov	r7, fp
 800bfd2:	4642      	mov	r2, r8
 800bfd4:	464b      	mov	r3, r9
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	4639      	mov	r1, r7
 800bfda:	f7f4 fc0f 	bl	80007fc <__aeabi_ddiv>
 800bfde:	f7f4 fd93 	bl	8000b08 <__aeabi_d2iz>
 800bfe2:	4682      	mov	sl, r0
 800bfe4:	f7f4 fa76 	bl	80004d4 <__aeabi_i2d>
 800bfe8:	4642      	mov	r2, r8
 800bfea:	464b      	mov	r3, r9
 800bfec:	f7f4 fadc 	bl	80005a8 <__aeabi_dmul>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4630      	mov	r0, r6
 800bff6:	4639      	mov	r1, r7
 800bff8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bffc:	f7f4 f91c 	bl	8000238 <__aeabi_dsub>
 800c000:	f805 6b01 	strb.w	r6, [r5], #1
 800c004:	9e01      	ldr	r6, [sp, #4]
 800c006:	9f03      	ldr	r7, [sp, #12]
 800c008:	1bae      	subs	r6, r5, r6
 800c00a:	42b7      	cmp	r7, r6
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	d135      	bne.n	800c07e <_dtoa_r+0x6e6>
 800c012:	f7f4 f913 	bl	800023c <__adddf3>
 800c016:	4642      	mov	r2, r8
 800c018:	464b      	mov	r3, r9
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f7f4 fd53 	bl	8000ac8 <__aeabi_dcmpgt>
 800c022:	b9d0      	cbnz	r0, 800c05a <_dtoa_r+0x6c2>
 800c024:	4642      	mov	r2, r8
 800c026:	464b      	mov	r3, r9
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fd24 	bl	8000a78 <__aeabi_dcmpeq>
 800c030:	b110      	cbz	r0, 800c038 <_dtoa_r+0x6a0>
 800c032:	f01a 0f01 	tst.w	sl, #1
 800c036:	d110      	bne.n	800c05a <_dtoa_r+0x6c2>
 800c038:	4620      	mov	r0, r4
 800c03a:	ee18 1a10 	vmov	r1, s16
 800c03e:	f001 f889 	bl	800d154 <_Bfree>
 800c042:	2300      	movs	r3, #0
 800c044:	9800      	ldr	r0, [sp, #0]
 800c046:	702b      	strb	r3, [r5, #0]
 800c048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c04a:	3001      	adds	r0, #1
 800c04c:	6018      	str	r0, [r3, #0]
 800c04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c050:	2b00      	cmp	r3, #0
 800c052:	f43f acf1 	beq.w	800ba38 <_dtoa_r+0xa0>
 800c056:	601d      	str	r5, [r3, #0]
 800c058:	e4ee      	b.n	800ba38 <_dtoa_r+0xa0>
 800c05a:	9f00      	ldr	r7, [sp, #0]
 800c05c:	462b      	mov	r3, r5
 800c05e:	461d      	mov	r5, r3
 800c060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c064:	2a39      	cmp	r2, #57	; 0x39
 800c066:	d106      	bne.n	800c076 <_dtoa_r+0x6de>
 800c068:	9a01      	ldr	r2, [sp, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d1f7      	bne.n	800c05e <_dtoa_r+0x6c6>
 800c06e:	9901      	ldr	r1, [sp, #4]
 800c070:	2230      	movs	r2, #48	; 0x30
 800c072:	3701      	adds	r7, #1
 800c074:	700a      	strb	r2, [r1, #0]
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	3201      	adds	r2, #1
 800c07a:	701a      	strb	r2, [r3, #0]
 800c07c:	e790      	b.n	800bfa0 <_dtoa_r+0x608>
 800c07e:	4ba6      	ldr	r3, [pc, #664]	; (800c318 <_dtoa_r+0x980>)
 800c080:	2200      	movs	r2, #0
 800c082:	f7f4 fa91 	bl	80005a8 <__aeabi_dmul>
 800c086:	2200      	movs	r2, #0
 800c088:	2300      	movs	r3, #0
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	f7f4 fcf3 	bl	8000a78 <__aeabi_dcmpeq>
 800c092:	2800      	cmp	r0, #0
 800c094:	d09d      	beq.n	800bfd2 <_dtoa_r+0x63a>
 800c096:	e7cf      	b.n	800c038 <_dtoa_r+0x6a0>
 800c098:	9a08      	ldr	r2, [sp, #32]
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	f000 80d7 	beq.w	800c24e <_dtoa_r+0x8b6>
 800c0a0:	9a06      	ldr	r2, [sp, #24]
 800c0a2:	2a01      	cmp	r2, #1
 800c0a4:	f300 80ba 	bgt.w	800c21c <_dtoa_r+0x884>
 800c0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	f000 80b2 	beq.w	800c214 <_dtoa_r+0x87c>
 800c0b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0b4:	9e07      	ldr	r6, [sp, #28]
 800c0b6:	9d04      	ldr	r5, [sp, #16]
 800c0b8:	9a04      	ldr	r2, [sp, #16]
 800c0ba:	441a      	add	r2, r3
 800c0bc:	9204      	str	r2, [sp, #16]
 800c0be:	9a05      	ldr	r2, [sp, #20]
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	441a      	add	r2, r3
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	9205      	str	r2, [sp, #20]
 800c0c8:	f001 f946 	bl	800d358 <__i2b>
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	dd0c      	ble.n	800c0ec <_dtoa_r+0x754>
 800c0d2:	9b05      	ldr	r3, [sp, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dd09      	ble.n	800c0ec <_dtoa_r+0x754>
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	9a04      	ldr	r2, [sp, #16]
 800c0dc:	bfa8      	it	ge
 800c0de:	462b      	movge	r3, r5
 800c0e0:	1ad2      	subs	r2, r2, r3
 800c0e2:	9204      	str	r2, [sp, #16]
 800c0e4:	9a05      	ldr	r2, [sp, #20]
 800c0e6:	1aed      	subs	r5, r5, r3
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	9b07      	ldr	r3, [sp, #28]
 800c0ee:	b31b      	cbz	r3, 800c138 <_dtoa_r+0x7a0>
 800c0f0:	9b08      	ldr	r3, [sp, #32]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 80af 	beq.w	800c256 <_dtoa_r+0x8be>
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	dd13      	ble.n	800c124 <_dtoa_r+0x78c>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4632      	mov	r2, r6
 800c100:	4620      	mov	r0, r4
 800c102:	f001 f9e9 	bl	800d4d8 <__pow5mult>
 800c106:	ee18 2a10 	vmov	r2, s16
 800c10a:	4601      	mov	r1, r0
 800c10c:	4607      	mov	r7, r0
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 f938 	bl	800d384 <__multiply>
 800c114:	ee18 1a10 	vmov	r1, s16
 800c118:	4680      	mov	r8, r0
 800c11a:	4620      	mov	r0, r4
 800c11c:	f001 f81a 	bl	800d154 <_Bfree>
 800c120:	ee08 8a10 	vmov	s16, r8
 800c124:	9b07      	ldr	r3, [sp, #28]
 800c126:	1b9a      	subs	r2, r3, r6
 800c128:	d006      	beq.n	800c138 <_dtoa_r+0x7a0>
 800c12a:	ee18 1a10 	vmov	r1, s16
 800c12e:	4620      	mov	r0, r4
 800c130:	f001 f9d2 	bl	800d4d8 <__pow5mult>
 800c134:	ee08 0a10 	vmov	s16, r0
 800c138:	2101      	movs	r1, #1
 800c13a:	4620      	mov	r0, r4
 800c13c:	f001 f90c 	bl	800d358 <__i2b>
 800c140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	4606      	mov	r6, r0
 800c146:	f340 8088 	ble.w	800c25a <_dtoa_r+0x8c2>
 800c14a:	461a      	mov	r2, r3
 800c14c:	4601      	mov	r1, r0
 800c14e:	4620      	mov	r0, r4
 800c150:	f001 f9c2 	bl	800d4d8 <__pow5mult>
 800c154:	9b06      	ldr	r3, [sp, #24]
 800c156:	2b01      	cmp	r3, #1
 800c158:	4606      	mov	r6, r0
 800c15a:	f340 8081 	ble.w	800c260 <_dtoa_r+0x8c8>
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	6933      	ldr	r3, [r6, #16]
 800c164:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c168:	6918      	ldr	r0, [r3, #16]
 800c16a:	f001 f8a5 	bl	800d2b8 <__hi0bits>
 800c16e:	f1c0 0020 	rsb	r0, r0, #32
 800c172:	9b05      	ldr	r3, [sp, #20]
 800c174:	4418      	add	r0, r3
 800c176:	f010 001f 	ands.w	r0, r0, #31
 800c17a:	f000 8092 	beq.w	800c2a2 <_dtoa_r+0x90a>
 800c17e:	f1c0 0320 	rsb	r3, r0, #32
 800c182:	2b04      	cmp	r3, #4
 800c184:	f340 808a 	ble.w	800c29c <_dtoa_r+0x904>
 800c188:	f1c0 001c 	rsb	r0, r0, #28
 800c18c:	9b04      	ldr	r3, [sp, #16]
 800c18e:	4403      	add	r3, r0
 800c190:	9304      	str	r3, [sp, #16]
 800c192:	9b05      	ldr	r3, [sp, #20]
 800c194:	4403      	add	r3, r0
 800c196:	4405      	add	r5, r0
 800c198:	9305      	str	r3, [sp, #20]
 800c19a:	9b04      	ldr	r3, [sp, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd07      	ble.n	800c1b0 <_dtoa_r+0x818>
 800c1a0:	ee18 1a10 	vmov	r1, s16
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f001 f9f0 	bl	800d58c <__lshift>
 800c1ac:	ee08 0a10 	vmov	s16, r0
 800c1b0:	9b05      	ldr	r3, [sp, #20]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dd05      	ble.n	800c1c2 <_dtoa_r+0x82a>
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f001 f9e6 	bl	800d58c <__lshift>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d06e      	beq.n	800c2a6 <_dtoa_r+0x90e>
 800c1c8:	ee18 0a10 	vmov	r0, s16
 800c1cc:	4631      	mov	r1, r6
 800c1ce:	f001 fa4d 	bl	800d66c <__mcmp>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	da67      	bge.n	800c2a6 <_dtoa_r+0x90e>
 800c1d6:	9b00      	ldr	r3, [sp, #0]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	220a      	movs	r2, #10
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 ffd7 	bl	800d198 <__multadd>
 800c1ea:	9b08      	ldr	r3, [sp, #32]
 800c1ec:	ee08 0a10 	vmov	s16, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 81b1 	beq.w	800c558 <_dtoa_r+0xbc0>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	220a      	movs	r2, #10
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 ffcb 	bl	800d198 <__multadd>
 800c202:	9b02      	ldr	r3, [sp, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	4607      	mov	r7, r0
 800c208:	f300 808e 	bgt.w	800c328 <_dtoa_r+0x990>
 800c20c:	9b06      	ldr	r3, [sp, #24]
 800c20e:	2b02      	cmp	r3, #2
 800c210:	dc51      	bgt.n	800c2b6 <_dtoa_r+0x91e>
 800c212:	e089      	b.n	800c328 <_dtoa_r+0x990>
 800c214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c21a:	e74b      	b.n	800c0b4 <_dtoa_r+0x71c>
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	1e5e      	subs	r6, r3, #1
 800c220:	9b07      	ldr	r3, [sp, #28]
 800c222:	42b3      	cmp	r3, r6
 800c224:	bfbf      	itttt	lt
 800c226:	9b07      	ldrlt	r3, [sp, #28]
 800c228:	9607      	strlt	r6, [sp, #28]
 800c22a:	1af2      	sublt	r2, r6, r3
 800c22c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c22e:	bfb6      	itet	lt
 800c230:	189b      	addlt	r3, r3, r2
 800c232:	1b9e      	subge	r6, r3, r6
 800c234:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	bfb8      	it	lt
 800c23a:	2600      	movlt	r6, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bfb7      	itett	lt
 800c240:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c244:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c248:	1a9d      	sublt	r5, r3, r2
 800c24a:	2300      	movlt	r3, #0
 800c24c:	e734      	b.n	800c0b8 <_dtoa_r+0x720>
 800c24e:	9e07      	ldr	r6, [sp, #28]
 800c250:	9d04      	ldr	r5, [sp, #16]
 800c252:	9f08      	ldr	r7, [sp, #32]
 800c254:	e73b      	b.n	800c0ce <_dtoa_r+0x736>
 800c256:	9a07      	ldr	r2, [sp, #28]
 800c258:	e767      	b.n	800c12a <_dtoa_r+0x792>
 800c25a:	9b06      	ldr	r3, [sp, #24]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	dc18      	bgt.n	800c292 <_dtoa_r+0x8fa>
 800c260:	f1ba 0f00 	cmp.w	sl, #0
 800c264:	d115      	bne.n	800c292 <_dtoa_r+0x8fa>
 800c266:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c26a:	b993      	cbnz	r3, 800c292 <_dtoa_r+0x8fa>
 800c26c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c270:	0d1b      	lsrs	r3, r3, #20
 800c272:	051b      	lsls	r3, r3, #20
 800c274:	b183      	cbz	r3, 800c298 <_dtoa_r+0x900>
 800c276:	9b04      	ldr	r3, [sp, #16]
 800c278:	3301      	adds	r3, #1
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	9b05      	ldr	r3, [sp, #20]
 800c27e:	3301      	adds	r3, #1
 800c280:	9305      	str	r3, [sp, #20]
 800c282:	f04f 0801 	mov.w	r8, #1
 800c286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f47f af6a 	bne.w	800c162 <_dtoa_r+0x7ca>
 800c28e:	2001      	movs	r0, #1
 800c290:	e76f      	b.n	800c172 <_dtoa_r+0x7da>
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	e7f6      	b.n	800c286 <_dtoa_r+0x8ee>
 800c298:	4698      	mov	r8, r3
 800c29a:	e7f4      	b.n	800c286 <_dtoa_r+0x8ee>
 800c29c:	f43f af7d 	beq.w	800c19a <_dtoa_r+0x802>
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	301c      	adds	r0, #28
 800c2a4:	e772      	b.n	800c18c <_dtoa_r+0x7f4>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dc37      	bgt.n	800c31c <_dtoa_r+0x984>
 800c2ac:	9b06      	ldr	r3, [sp, #24]
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	dd34      	ble.n	800c31c <_dtoa_r+0x984>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	9302      	str	r3, [sp, #8]
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	b96b      	cbnz	r3, 800c2d6 <_dtoa_r+0x93e>
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	2205      	movs	r2, #5
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 ff6a 	bl	800d198 <__multadd>
 800c2c4:	4601      	mov	r1, r0
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	ee18 0a10 	vmov	r0, s16
 800c2cc:	f001 f9ce 	bl	800d66c <__mcmp>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	f73f adbb 	bgt.w	800be4c <_dtoa_r+0x4b4>
 800c2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d8:	9d01      	ldr	r5, [sp, #4]
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	f04f 0800 	mov.w	r8, #0
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 ff35 	bl	800d154 <_Bfree>
 800c2ea:	2f00      	cmp	r7, #0
 800c2ec:	f43f aea4 	beq.w	800c038 <_dtoa_r+0x6a0>
 800c2f0:	f1b8 0f00 	cmp.w	r8, #0
 800c2f4:	d005      	beq.n	800c302 <_dtoa_r+0x96a>
 800c2f6:	45b8      	cmp	r8, r7
 800c2f8:	d003      	beq.n	800c302 <_dtoa_r+0x96a>
 800c2fa:	4641      	mov	r1, r8
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 ff29 	bl	800d154 <_Bfree>
 800c302:	4639      	mov	r1, r7
 800c304:	4620      	mov	r0, r4
 800c306:	f000 ff25 	bl	800d154 <_Bfree>
 800c30a:	e695      	b.n	800c038 <_dtoa_r+0x6a0>
 800c30c:	2600      	movs	r6, #0
 800c30e:	4637      	mov	r7, r6
 800c310:	e7e1      	b.n	800c2d6 <_dtoa_r+0x93e>
 800c312:	9700      	str	r7, [sp, #0]
 800c314:	4637      	mov	r7, r6
 800c316:	e599      	b.n	800be4c <_dtoa_r+0x4b4>
 800c318:	40240000 	.word	0x40240000
 800c31c:	9b08      	ldr	r3, [sp, #32]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80ca 	beq.w	800c4b8 <_dtoa_r+0xb20>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	2d00      	cmp	r5, #0
 800c32a:	dd05      	ble.n	800c338 <_dtoa_r+0x9a0>
 800c32c:	4639      	mov	r1, r7
 800c32e:	462a      	mov	r2, r5
 800c330:	4620      	mov	r0, r4
 800c332:	f001 f92b 	bl	800d58c <__lshift>
 800c336:	4607      	mov	r7, r0
 800c338:	f1b8 0f00 	cmp.w	r8, #0
 800c33c:	d05b      	beq.n	800c3f6 <_dtoa_r+0xa5e>
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4620      	mov	r0, r4
 800c342:	f000 fec7 	bl	800d0d4 <_Balloc>
 800c346:	4605      	mov	r5, r0
 800c348:	b928      	cbnz	r0, 800c356 <_dtoa_r+0x9be>
 800c34a:	4b87      	ldr	r3, [pc, #540]	; (800c568 <_dtoa_r+0xbd0>)
 800c34c:	4602      	mov	r2, r0
 800c34e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c352:	f7ff bb3b 	b.w	800b9cc <_dtoa_r+0x34>
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	3202      	adds	r2, #2
 800c35a:	0092      	lsls	r2, r2, #2
 800c35c:	f107 010c 	add.w	r1, r7, #12
 800c360:	300c      	adds	r0, #12
 800c362:	f7fd fa89 	bl	8009878 <memcpy>
 800c366:	2201      	movs	r2, #1
 800c368:	4629      	mov	r1, r5
 800c36a:	4620      	mov	r0, r4
 800c36c:	f001 f90e 	bl	800d58c <__lshift>
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	f103 0901 	add.w	r9, r3, #1
 800c376:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c37a:	4413      	add	r3, r2
 800c37c:	9305      	str	r3, [sp, #20]
 800c37e:	f00a 0301 	and.w	r3, sl, #1
 800c382:	46b8      	mov	r8, r7
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	4607      	mov	r7, r0
 800c388:	4631      	mov	r1, r6
 800c38a:	ee18 0a10 	vmov	r0, s16
 800c38e:	f7ff fa77 	bl	800b880 <quorem>
 800c392:	4641      	mov	r1, r8
 800c394:	9002      	str	r0, [sp, #8]
 800c396:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c39a:	ee18 0a10 	vmov	r0, s16
 800c39e:	f001 f965 	bl	800d66c <__mcmp>
 800c3a2:	463a      	mov	r2, r7
 800c3a4:	9003      	str	r0, [sp, #12]
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f001 f97b 	bl	800d6a4 <__mdiff>
 800c3ae:	68c2      	ldr	r2, [r0, #12]
 800c3b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	bb02      	cbnz	r2, 800c3fa <_dtoa_r+0xa62>
 800c3b8:	4601      	mov	r1, r0
 800c3ba:	ee18 0a10 	vmov	r0, s16
 800c3be:	f001 f955 	bl	800d66c <__mcmp>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	9207      	str	r2, [sp, #28]
 800c3ca:	f000 fec3 	bl	800d154 <_Bfree>
 800c3ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c3d2:	ea43 0102 	orr.w	r1, r3, r2
 800c3d6:	9b04      	ldr	r3, [sp, #16]
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	464d      	mov	r5, r9
 800c3dc:	d10f      	bne.n	800c3fe <_dtoa_r+0xa66>
 800c3de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3e2:	d02a      	beq.n	800c43a <_dtoa_r+0xaa2>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	dd02      	ble.n	800c3f0 <_dtoa_r+0xa58>
 800c3ea:	9b02      	ldr	r3, [sp, #8]
 800c3ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c3f0:	f88b a000 	strb.w	sl, [fp]
 800c3f4:	e775      	b.n	800c2e2 <_dtoa_r+0x94a>
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	e7ba      	b.n	800c370 <_dtoa_r+0x9d8>
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	e7e2      	b.n	800c3c4 <_dtoa_r+0xa2c>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	db04      	blt.n	800c40e <_dtoa_r+0xa76>
 800c404:	9906      	ldr	r1, [sp, #24]
 800c406:	430b      	orrs	r3, r1
 800c408:	9904      	ldr	r1, [sp, #16]
 800c40a:	430b      	orrs	r3, r1
 800c40c:	d122      	bne.n	800c454 <_dtoa_r+0xabc>
 800c40e:	2a00      	cmp	r2, #0
 800c410:	ddee      	ble.n	800c3f0 <_dtoa_r+0xa58>
 800c412:	ee18 1a10 	vmov	r1, s16
 800c416:	2201      	movs	r2, #1
 800c418:	4620      	mov	r0, r4
 800c41a:	f001 f8b7 	bl	800d58c <__lshift>
 800c41e:	4631      	mov	r1, r6
 800c420:	ee08 0a10 	vmov	s16, r0
 800c424:	f001 f922 	bl	800d66c <__mcmp>
 800c428:	2800      	cmp	r0, #0
 800c42a:	dc03      	bgt.n	800c434 <_dtoa_r+0xa9c>
 800c42c:	d1e0      	bne.n	800c3f0 <_dtoa_r+0xa58>
 800c42e:	f01a 0f01 	tst.w	sl, #1
 800c432:	d0dd      	beq.n	800c3f0 <_dtoa_r+0xa58>
 800c434:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c438:	d1d7      	bne.n	800c3ea <_dtoa_r+0xa52>
 800c43a:	2339      	movs	r3, #57	; 0x39
 800c43c:	f88b 3000 	strb.w	r3, [fp]
 800c440:	462b      	mov	r3, r5
 800c442:	461d      	mov	r5, r3
 800c444:	3b01      	subs	r3, #1
 800c446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c44a:	2a39      	cmp	r2, #57	; 0x39
 800c44c:	d071      	beq.n	800c532 <_dtoa_r+0xb9a>
 800c44e:	3201      	adds	r2, #1
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	e746      	b.n	800c2e2 <_dtoa_r+0x94a>
 800c454:	2a00      	cmp	r2, #0
 800c456:	dd07      	ble.n	800c468 <_dtoa_r+0xad0>
 800c458:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c45c:	d0ed      	beq.n	800c43a <_dtoa_r+0xaa2>
 800c45e:	f10a 0301 	add.w	r3, sl, #1
 800c462:	f88b 3000 	strb.w	r3, [fp]
 800c466:	e73c      	b.n	800c2e2 <_dtoa_r+0x94a>
 800c468:	9b05      	ldr	r3, [sp, #20]
 800c46a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c46e:	4599      	cmp	r9, r3
 800c470:	d047      	beq.n	800c502 <_dtoa_r+0xb6a>
 800c472:	ee18 1a10 	vmov	r1, s16
 800c476:	2300      	movs	r3, #0
 800c478:	220a      	movs	r2, #10
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 fe8c 	bl	800d198 <__multadd>
 800c480:	45b8      	cmp	r8, r7
 800c482:	ee08 0a10 	vmov	s16, r0
 800c486:	f04f 0300 	mov.w	r3, #0
 800c48a:	f04f 020a 	mov.w	r2, #10
 800c48e:	4641      	mov	r1, r8
 800c490:	4620      	mov	r0, r4
 800c492:	d106      	bne.n	800c4a2 <_dtoa_r+0xb0a>
 800c494:	f000 fe80 	bl	800d198 <__multadd>
 800c498:	4680      	mov	r8, r0
 800c49a:	4607      	mov	r7, r0
 800c49c:	f109 0901 	add.w	r9, r9, #1
 800c4a0:	e772      	b.n	800c388 <_dtoa_r+0x9f0>
 800c4a2:	f000 fe79 	bl	800d198 <__multadd>
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	220a      	movs	r2, #10
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 fe72 	bl	800d198 <__multadd>
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	e7f1      	b.n	800c49c <_dtoa_r+0xb04>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	9302      	str	r3, [sp, #8]
 800c4bc:	9d01      	ldr	r5, [sp, #4]
 800c4be:	ee18 0a10 	vmov	r0, s16
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	f7ff f9dc 	bl	800b880 <quorem>
 800c4c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	f805 ab01 	strb.w	sl, [r5], #1
 800c4d2:	1aea      	subs	r2, r5, r3
 800c4d4:	9b02      	ldr	r3, [sp, #8]
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	dd09      	ble.n	800c4ee <_dtoa_r+0xb56>
 800c4da:	ee18 1a10 	vmov	r1, s16
 800c4de:	2300      	movs	r3, #0
 800c4e0:	220a      	movs	r2, #10
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fe58 	bl	800d198 <__multadd>
 800c4e8:	ee08 0a10 	vmov	s16, r0
 800c4ec:	e7e7      	b.n	800c4be <_dtoa_r+0xb26>
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bfc8      	it	gt
 800c4f4:	461d      	movgt	r5, r3
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	bfd8      	it	le
 800c4fa:	2501      	movle	r5, #1
 800c4fc:	441d      	add	r5, r3
 800c4fe:	f04f 0800 	mov.w	r8, #0
 800c502:	ee18 1a10 	vmov	r1, s16
 800c506:	2201      	movs	r2, #1
 800c508:	4620      	mov	r0, r4
 800c50a:	f001 f83f 	bl	800d58c <__lshift>
 800c50e:	4631      	mov	r1, r6
 800c510:	ee08 0a10 	vmov	s16, r0
 800c514:	f001 f8aa 	bl	800d66c <__mcmp>
 800c518:	2800      	cmp	r0, #0
 800c51a:	dc91      	bgt.n	800c440 <_dtoa_r+0xaa8>
 800c51c:	d102      	bne.n	800c524 <_dtoa_r+0xb8c>
 800c51e:	f01a 0f01 	tst.w	sl, #1
 800c522:	d18d      	bne.n	800c440 <_dtoa_r+0xaa8>
 800c524:	462b      	mov	r3, r5
 800c526:	461d      	mov	r5, r3
 800c528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c52c:	2a30      	cmp	r2, #48	; 0x30
 800c52e:	d0fa      	beq.n	800c526 <_dtoa_r+0xb8e>
 800c530:	e6d7      	b.n	800c2e2 <_dtoa_r+0x94a>
 800c532:	9a01      	ldr	r2, [sp, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d184      	bne.n	800c442 <_dtoa_r+0xaaa>
 800c538:	9b00      	ldr	r3, [sp, #0]
 800c53a:	3301      	adds	r3, #1
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	2331      	movs	r3, #49	; 0x31
 800c540:	7013      	strb	r3, [r2, #0]
 800c542:	e6ce      	b.n	800c2e2 <_dtoa_r+0x94a>
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <_dtoa_r+0xbd4>)
 800c546:	f7ff ba95 	b.w	800ba74 <_dtoa_r+0xdc>
 800c54a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f47f aa6e 	bne.w	800ba2e <_dtoa_r+0x96>
 800c552:	4b07      	ldr	r3, [pc, #28]	; (800c570 <_dtoa_r+0xbd8>)
 800c554:	f7ff ba8e 	b.w	800ba74 <_dtoa_r+0xdc>
 800c558:	9b02      	ldr	r3, [sp, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dcae      	bgt.n	800c4bc <_dtoa_r+0xb24>
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	2b02      	cmp	r3, #2
 800c562:	f73f aea8 	bgt.w	800c2b6 <_dtoa_r+0x91e>
 800c566:	e7a9      	b.n	800c4bc <_dtoa_r+0xb24>
 800c568:	0800eb60 	.word	0x0800eb60
 800c56c:	0800e960 	.word	0x0800e960
 800c570:	0800eae1 	.word	0x0800eae1

0800c574 <__sflush_r>:
 800c574:	898a      	ldrh	r2, [r1, #12]
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	4605      	mov	r5, r0
 800c57c:	0710      	lsls	r0, r2, #28
 800c57e:	460c      	mov	r4, r1
 800c580:	d458      	bmi.n	800c634 <__sflush_r+0xc0>
 800c582:	684b      	ldr	r3, [r1, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	dc05      	bgt.n	800c594 <__sflush_r+0x20>
 800c588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dc02      	bgt.n	800c594 <__sflush_r+0x20>
 800c58e:	2000      	movs	r0, #0
 800c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c596:	2e00      	cmp	r6, #0
 800c598:	d0f9      	beq.n	800c58e <__sflush_r+0x1a>
 800c59a:	2300      	movs	r3, #0
 800c59c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5a0:	682f      	ldr	r7, [r5, #0]
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	d032      	beq.n	800c60c <__sflush_r+0x98>
 800c5a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	075a      	lsls	r2, r3, #29
 800c5ac:	d505      	bpl.n	800c5ba <__sflush_r+0x46>
 800c5ae:	6863      	ldr	r3, [r4, #4]
 800c5b0:	1ac0      	subs	r0, r0, r3
 800c5b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5b4:	b10b      	cbz	r3, 800c5ba <__sflush_r+0x46>
 800c5b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5b8:	1ac0      	subs	r0, r0, r3
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4602      	mov	r2, r0
 800c5be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5c0:	6a21      	ldr	r1, [r4, #32]
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	47b0      	blx	r6
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	d106      	bne.n	800c5da <__sflush_r+0x66>
 800c5cc:	6829      	ldr	r1, [r5, #0]
 800c5ce:	291d      	cmp	r1, #29
 800c5d0:	d82c      	bhi.n	800c62c <__sflush_r+0xb8>
 800c5d2:	4a2a      	ldr	r2, [pc, #168]	; (800c67c <__sflush_r+0x108>)
 800c5d4:	40ca      	lsrs	r2, r1
 800c5d6:	07d6      	lsls	r6, r2, #31
 800c5d8:	d528      	bpl.n	800c62c <__sflush_r+0xb8>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	6062      	str	r2, [r4, #4]
 800c5de:	04d9      	lsls	r1, r3, #19
 800c5e0:	6922      	ldr	r2, [r4, #16]
 800c5e2:	6022      	str	r2, [r4, #0]
 800c5e4:	d504      	bpl.n	800c5f0 <__sflush_r+0x7c>
 800c5e6:	1c42      	adds	r2, r0, #1
 800c5e8:	d101      	bne.n	800c5ee <__sflush_r+0x7a>
 800c5ea:	682b      	ldr	r3, [r5, #0]
 800c5ec:	b903      	cbnz	r3, 800c5f0 <__sflush_r+0x7c>
 800c5ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5f2:	602f      	str	r7, [r5, #0]
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	d0ca      	beq.n	800c58e <__sflush_r+0x1a>
 800c5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	d002      	beq.n	800c606 <__sflush_r+0x92>
 800c600:	4628      	mov	r0, r5
 800c602:	f7fd f94f 	bl	80098a4 <_free_r>
 800c606:	2000      	movs	r0, #0
 800c608:	6360      	str	r0, [r4, #52]	; 0x34
 800c60a:	e7c1      	b.n	800c590 <__sflush_r+0x1c>
 800c60c:	6a21      	ldr	r1, [r4, #32]
 800c60e:	2301      	movs	r3, #1
 800c610:	4628      	mov	r0, r5
 800c612:	47b0      	blx	r6
 800c614:	1c41      	adds	r1, r0, #1
 800c616:	d1c7      	bne.n	800c5a8 <__sflush_r+0x34>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0c4      	beq.n	800c5a8 <__sflush_r+0x34>
 800c61e:	2b1d      	cmp	r3, #29
 800c620:	d001      	beq.n	800c626 <__sflush_r+0xb2>
 800c622:	2b16      	cmp	r3, #22
 800c624:	d101      	bne.n	800c62a <__sflush_r+0xb6>
 800c626:	602f      	str	r7, [r5, #0]
 800c628:	e7b1      	b.n	800c58e <__sflush_r+0x1a>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c630:	81a3      	strh	r3, [r4, #12]
 800c632:	e7ad      	b.n	800c590 <__sflush_r+0x1c>
 800c634:	690f      	ldr	r7, [r1, #16]
 800c636:	2f00      	cmp	r7, #0
 800c638:	d0a9      	beq.n	800c58e <__sflush_r+0x1a>
 800c63a:	0793      	lsls	r3, r2, #30
 800c63c:	680e      	ldr	r6, [r1, #0]
 800c63e:	bf08      	it	eq
 800c640:	694b      	ldreq	r3, [r1, #20]
 800c642:	600f      	str	r7, [r1, #0]
 800c644:	bf18      	it	ne
 800c646:	2300      	movne	r3, #0
 800c648:	eba6 0807 	sub.w	r8, r6, r7
 800c64c:	608b      	str	r3, [r1, #8]
 800c64e:	f1b8 0f00 	cmp.w	r8, #0
 800c652:	dd9c      	ble.n	800c58e <__sflush_r+0x1a>
 800c654:	6a21      	ldr	r1, [r4, #32]
 800c656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c658:	4643      	mov	r3, r8
 800c65a:	463a      	mov	r2, r7
 800c65c:	4628      	mov	r0, r5
 800c65e:	47b0      	blx	r6
 800c660:	2800      	cmp	r0, #0
 800c662:	dc06      	bgt.n	800c672 <__sflush_r+0xfe>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	e78e      	b.n	800c590 <__sflush_r+0x1c>
 800c672:	4407      	add	r7, r0
 800c674:	eba8 0800 	sub.w	r8, r8, r0
 800c678:	e7e9      	b.n	800c64e <__sflush_r+0xda>
 800c67a:	bf00      	nop
 800c67c:	20400001 	.word	0x20400001

0800c680 <_fflush_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	690b      	ldr	r3, [r1, #16]
 800c684:	4605      	mov	r5, r0
 800c686:	460c      	mov	r4, r1
 800c688:	b913      	cbnz	r3, 800c690 <_fflush_r+0x10>
 800c68a:	2500      	movs	r5, #0
 800c68c:	4628      	mov	r0, r5
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	b118      	cbz	r0, 800c69a <_fflush_r+0x1a>
 800c692:	6983      	ldr	r3, [r0, #24]
 800c694:	b90b      	cbnz	r3, 800c69a <_fflush_r+0x1a>
 800c696:	f000 f887 	bl	800c7a8 <__sinit>
 800c69a:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <_fflush_r+0x6c>)
 800c69c:	429c      	cmp	r4, r3
 800c69e:	d11b      	bne.n	800c6d8 <_fflush_r+0x58>
 800c6a0:	686c      	ldr	r4, [r5, #4]
 800c6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0ef      	beq.n	800c68a <_fflush_r+0xa>
 800c6aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6ac:	07d0      	lsls	r0, r2, #31
 800c6ae:	d404      	bmi.n	800c6ba <_fflush_r+0x3a>
 800c6b0:	0599      	lsls	r1, r3, #22
 800c6b2:	d402      	bmi.n	800c6ba <_fflush_r+0x3a>
 800c6b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6b6:	f000 fc88 	bl	800cfca <__retarget_lock_acquire_recursive>
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	4621      	mov	r1, r4
 800c6be:	f7ff ff59 	bl	800c574 <__sflush_r>
 800c6c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6c4:	07da      	lsls	r2, r3, #31
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	d4e0      	bmi.n	800c68c <_fflush_r+0xc>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	059b      	lsls	r3, r3, #22
 800c6ce:	d4dd      	bmi.n	800c68c <_fflush_r+0xc>
 800c6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6d2:	f000 fc7b 	bl	800cfcc <__retarget_lock_release_recursive>
 800c6d6:	e7d9      	b.n	800c68c <_fflush_r+0xc>
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <_fflush_r+0x70>)
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	d101      	bne.n	800c6e2 <_fflush_r+0x62>
 800c6de:	68ac      	ldr	r4, [r5, #8]
 800c6e0:	e7df      	b.n	800c6a2 <_fflush_r+0x22>
 800c6e2:	4b04      	ldr	r3, [pc, #16]	; (800c6f4 <_fflush_r+0x74>)
 800c6e4:	429c      	cmp	r4, r3
 800c6e6:	bf08      	it	eq
 800c6e8:	68ec      	ldreq	r4, [r5, #12]
 800c6ea:	e7da      	b.n	800c6a2 <_fflush_r+0x22>
 800c6ec:	0800eb94 	.word	0x0800eb94
 800c6f0:	0800ebb4 	.word	0x0800ebb4
 800c6f4:	0800eb74 	.word	0x0800eb74

0800c6f8 <std>:
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	b510      	push	{r4, lr}
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c706:	6083      	str	r3, [r0, #8]
 800c708:	8181      	strh	r1, [r0, #12]
 800c70a:	6643      	str	r3, [r0, #100]	; 0x64
 800c70c:	81c2      	strh	r2, [r0, #14]
 800c70e:	6183      	str	r3, [r0, #24]
 800c710:	4619      	mov	r1, r3
 800c712:	2208      	movs	r2, #8
 800c714:	305c      	adds	r0, #92	; 0x5c
 800c716:	f7fd f8bd 	bl	8009894 <memset>
 800c71a:	4b05      	ldr	r3, [pc, #20]	; (800c730 <std+0x38>)
 800c71c:	6263      	str	r3, [r4, #36]	; 0x24
 800c71e:	4b05      	ldr	r3, [pc, #20]	; (800c734 <std+0x3c>)
 800c720:	62a3      	str	r3, [r4, #40]	; 0x28
 800c722:	4b05      	ldr	r3, [pc, #20]	; (800c738 <std+0x40>)
 800c724:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c726:	4b05      	ldr	r3, [pc, #20]	; (800c73c <std+0x44>)
 800c728:	6224      	str	r4, [r4, #32]
 800c72a:	6323      	str	r3, [r4, #48]	; 0x30
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	bf00      	nop
 800c730:	0800e001 	.word	0x0800e001
 800c734:	0800e023 	.word	0x0800e023
 800c738:	0800e05b 	.word	0x0800e05b
 800c73c:	0800e07f 	.word	0x0800e07f

0800c740 <_cleanup_r>:
 800c740:	4901      	ldr	r1, [pc, #4]	; (800c748 <_cleanup_r+0x8>)
 800c742:	f000 b8af 	b.w	800c8a4 <_fwalk_reent>
 800c746:	bf00      	nop
 800c748:	0800c681 	.word	0x0800c681

0800c74c <__sfmoreglue>:
 800c74c:	b570      	push	{r4, r5, r6, lr}
 800c74e:	2268      	movs	r2, #104	; 0x68
 800c750:	1e4d      	subs	r5, r1, #1
 800c752:	4355      	muls	r5, r2
 800c754:	460e      	mov	r6, r1
 800c756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c75a:	f7fd f90f 	bl	800997c <_malloc_r>
 800c75e:	4604      	mov	r4, r0
 800c760:	b140      	cbz	r0, 800c774 <__sfmoreglue+0x28>
 800c762:	2100      	movs	r1, #0
 800c764:	e9c0 1600 	strd	r1, r6, [r0]
 800c768:	300c      	adds	r0, #12
 800c76a:	60a0      	str	r0, [r4, #8]
 800c76c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c770:	f7fd f890 	bl	8009894 <memset>
 800c774:	4620      	mov	r0, r4
 800c776:	bd70      	pop	{r4, r5, r6, pc}

0800c778 <__sfp_lock_acquire>:
 800c778:	4801      	ldr	r0, [pc, #4]	; (800c780 <__sfp_lock_acquire+0x8>)
 800c77a:	f000 bc26 	b.w	800cfca <__retarget_lock_acquire_recursive>
 800c77e:	bf00      	nop
 800c780:	20000811 	.word	0x20000811

0800c784 <__sfp_lock_release>:
 800c784:	4801      	ldr	r0, [pc, #4]	; (800c78c <__sfp_lock_release+0x8>)
 800c786:	f000 bc21 	b.w	800cfcc <__retarget_lock_release_recursive>
 800c78a:	bf00      	nop
 800c78c:	20000811 	.word	0x20000811

0800c790 <__sinit_lock_acquire>:
 800c790:	4801      	ldr	r0, [pc, #4]	; (800c798 <__sinit_lock_acquire+0x8>)
 800c792:	f000 bc1a 	b.w	800cfca <__retarget_lock_acquire_recursive>
 800c796:	bf00      	nop
 800c798:	20000812 	.word	0x20000812

0800c79c <__sinit_lock_release>:
 800c79c:	4801      	ldr	r0, [pc, #4]	; (800c7a4 <__sinit_lock_release+0x8>)
 800c79e:	f000 bc15 	b.w	800cfcc <__retarget_lock_release_recursive>
 800c7a2:	bf00      	nop
 800c7a4:	20000812 	.word	0x20000812

0800c7a8 <__sinit>:
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	f7ff fff0 	bl	800c790 <__sinit_lock_acquire>
 800c7b0:	69a3      	ldr	r3, [r4, #24]
 800c7b2:	b11b      	cbz	r3, 800c7bc <__sinit+0x14>
 800c7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b8:	f7ff bff0 	b.w	800c79c <__sinit_lock_release>
 800c7bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c7c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c7c2:	4b13      	ldr	r3, [pc, #76]	; (800c810 <__sinit+0x68>)
 800c7c4:	4a13      	ldr	r2, [pc, #76]	; (800c814 <__sinit+0x6c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7ca:	42a3      	cmp	r3, r4
 800c7cc:	bf04      	itt	eq
 800c7ce:	2301      	moveq	r3, #1
 800c7d0:	61a3      	streq	r3, [r4, #24]
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 f820 	bl	800c818 <__sfp>
 800c7d8:	6060      	str	r0, [r4, #4]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 f81c 	bl	800c818 <__sfp>
 800c7e0:	60a0      	str	r0, [r4, #8]
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 f818 	bl	800c818 <__sfp>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	60e0      	str	r0, [r4, #12]
 800c7ec:	2104      	movs	r1, #4
 800c7ee:	6860      	ldr	r0, [r4, #4]
 800c7f0:	f7ff ff82 	bl	800c6f8 <std>
 800c7f4:	68a0      	ldr	r0, [r4, #8]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	2109      	movs	r1, #9
 800c7fa:	f7ff ff7d 	bl	800c6f8 <std>
 800c7fe:	68e0      	ldr	r0, [r4, #12]
 800c800:	2202      	movs	r2, #2
 800c802:	2112      	movs	r1, #18
 800c804:	f7ff ff78 	bl	800c6f8 <std>
 800c808:	2301      	movs	r3, #1
 800c80a:	61a3      	str	r3, [r4, #24]
 800c80c:	e7d2      	b.n	800c7b4 <__sinit+0xc>
 800c80e:	bf00      	nop
 800c810:	0800e94c 	.word	0x0800e94c
 800c814:	0800c741 	.word	0x0800c741

0800c818 <__sfp>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	4607      	mov	r7, r0
 800c81c:	f7ff ffac 	bl	800c778 <__sfp_lock_acquire>
 800c820:	4b1e      	ldr	r3, [pc, #120]	; (800c89c <__sfp+0x84>)
 800c822:	681e      	ldr	r6, [r3, #0]
 800c824:	69b3      	ldr	r3, [r6, #24]
 800c826:	b913      	cbnz	r3, 800c82e <__sfp+0x16>
 800c828:	4630      	mov	r0, r6
 800c82a:	f7ff ffbd 	bl	800c7a8 <__sinit>
 800c82e:	3648      	adds	r6, #72	; 0x48
 800c830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c834:	3b01      	subs	r3, #1
 800c836:	d503      	bpl.n	800c840 <__sfp+0x28>
 800c838:	6833      	ldr	r3, [r6, #0]
 800c83a:	b30b      	cbz	r3, 800c880 <__sfp+0x68>
 800c83c:	6836      	ldr	r6, [r6, #0]
 800c83e:	e7f7      	b.n	800c830 <__sfp+0x18>
 800c840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c844:	b9d5      	cbnz	r5, 800c87c <__sfp+0x64>
 800c846:	4b16      	ldr	r3, [pc, #88]	; (800c8a0 <__sfp+0x88>)
 800c848:	60e3      	str	r3, [r4, #12]
 800c84a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c84e:	6665      	str	r5, [r4, #100]	; 0x64
 800c850:	f000 fbba 	bl	800cfc8 <__retarget_lock_init_recursive>
 800c854:	f7ff ff96 	bl	800c784 <__sfp_lock_release>
 800c858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c85c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c860:	6025      	str	r5, [r4, #0]
 800c862:	61a5      	str	r5, [r4, #24]
 800c864:	2208      	movs	r2, #8
 800c866:	4629      	mov	r1, r5
 800c868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c86c:	f7fd f812 	bl	8009894 <memset>
 800c870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c878:	4620      	mov	r0, r4
 800c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c87c:	3468      	adds	r4, #104	; 0x68
 800c87e:	e7d9      	b.n	800c834 <__sfp+0x1c>
 800c880:	2104      	movs	r1, #4
 800c882:	4638      	mov	r0, r7
 800c884:	f7ff ff62 	bl	800c74c <__sfmoreglue>
 800c888:	4604      	mov	r4, r0
 800c88a:	6030      	str	r0, [r6, #0]
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1d5      	bne.n	800c83c <__sfp+0x24>
 800c890:	f7ff ff78 	bl	800c784 <__sfp_lock_release>
 800c894:	230c      	movs	r3, #12
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	e7ee      	b.n	800c878 <__sfp+0x60>
 800c89a:	bf00      	nop
 800c89c:	0800e94c 	.word	0x0800e94c
 800c8a0:	ffff0001 	.word	0xffff0001

0800c8a4 <_fwalk_reent>:
 800c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	4688      	mov	r8, r1
 800c8ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c8b0:	2700      	movs	r7, #0
 800c8b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c8ba:	d505      	bpl.n	800c8c8 <_fwalk_reent+0x24>
 800c8bc:	6824      	ldr	r4, [r4, #0]
 800c8be:	2c00      	cmp	r4, #0
 800c8c0:	d1f7      	bne.n	800c8b2 <_fwalk_reent+0xe>
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c8:	89ab      	ldrh	r3, [r5, #12]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d907      	bls.n	800c8de <_fwalk_reent+0x3a>
 800c8ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	d003      	beq.n	800c8de <_fwalk_reent+0x3a>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4630      	mov	r0, r6
 800c8da:	47c0      	blx	r8
 800c8dc:	4307      	orrs	r7, r0
 800c8de:	3568      	adds	r5, #104	; 0x68
 800c8e0:	e7e9      	b.n	800c8b6 <_fwalk_reent+0x12>

0800c8e2 <rshift>:
 800c8e2:	6903      	ldr	r3, [r0, #16]
 800c8e4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8ec:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8f0:	f100 0414 	add.w	r4, r0, #20
 800c8f4:	dd45      	ble.n	800c982 <rshift+0xa0>
 800c8f6:	f011 011f 	ands.w	r1, r1, #31
 800c8fa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8fe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c902:	d10c      	bne.n	800c91e <rshift+0x3c>
 800c904:	f100 0710 	add.w	r7, r0, #16
 800c908:	4629      	mov	r1, r5
 800c90a:	42b1      	cmp	r1, r6
 800c90c:	d334      	bcc.n	800c978 <rshift+0x96>
 800c90e:	1a9b      	subs	r3, r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	1eea      	subs	r2, r5, #3
 800c914:	4296      	cmp	r6, r2
 800c916:	bf38      	it	cc
 800c918:	2300      	movcc	r3, #0
 800c91a:	4423      	add	r3, r4
 800c91c:	e015      	b.n	800c94a <rshift+0x68>
 800c91e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c922:	f1c1 0820 	rsb	r8, r1, #32
 800c926:	40cf      	lsrs	r7, r1
 800c928:	f105 0e04 	add.w	lr, r5, #4
 800c92c:	46a1      	mov	r9, r4
 800c92e:	4576      	cmp	r6, lr
 800c930:	46f4      	mov	ip, lr
 800c932:	d815      	bhi.n	800c960 <rshift+0x7e>
 800c934:	1a9a      	subs	r2, r3, r2
 800c936:	0092      	lsls	r2, r2, #2
 800c938:	3a04      	subs	r2, #4
 800c93a:	3501      	adds	r5, #1
 800c93c:	42ae      	cmp	r6, r5
 800c93e:	bf38      	it	cc
 800c940:	2200      	movcc	r2, #0
 800c942:	18a3      	adds	r3, r4, r2
 800c944:	50a7      	str	r7, [r4, r2]
 800c946:	b107      	cbz	r7, 800c94a <rshift+0x68>
 800c948:	3304      	adds	r3, #4
 800c94a:	1b1a      	subs	r2, r3, r4
 800c94c:	42a3      	cmp	r3, r4
 800c94e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c952:	bf08      	it	eq
 800c954:	2300      	moveq	r3, #0
 800c956:	6102      	str	r2, [r0, #16]
 800c958:	bf08      	it	eq
 800c95a:	6143      	streq	r3, [r0, #20]
 800c95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c960:	f8dc c000 	ldr.w	ip, [ip]
 800c964:	fa0c fc08 	lsl.w	ip, ip, r8
 800c968:	ea4c 0707 	orr.w	r7, ip, r7
 800c96c:	f849 7b04 	str.w	r7, [r9], #4
 800c970:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c974:	40cf      	lsrs	r7, r1
 800c976:	e7da      	b.n	800c92e <rshift+0x4c>
 800c978:	f851 cb04 	ldr.w	ip, [r1], #4
 800c97c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c980:	e7c3      	b.n	800c90a <rshift+0x28>
 800c982:	4623      	mov	r3, r4
 800c984:	e7e1      	b.n	800c94a <rshift+0x68>

0800c986 <__hexdig_fun>:
 800c986:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d802      	bhi.n	800c994 <__hexdig_fun+0xe>
 800c98e:	3820      	subs	r0, #32
 800c990:	b2c0      	uxtb	r0, r0
 800c992:	4770      	bx	lr
 800c994:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c998:	2b05      	cmp	r3, #5
 800c99a:	d801      	bhi.n	800c9a0 <__hexdig_fun+0x1a>
 800c99c:	3847      	subs	r0, #71	; 0x47
 800c99e:	e7f7      	b.n	800c990 <__hexdig_fun+0xa>
 800c9a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9a4:	2b05      	cmp	r3, #5
 800c9a6:	d801      	bhi.n	800c9ac <__hexdig_fun+0x26>
 800c9a8:	3827      	subs	r0, #39	; 0x27
 800c9aa:	e7f1      	b.n	800c990 <__hexdig_fun+0xa>
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	4770      	bx	lr

0800c9b0 <__gethex>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	ed2d 8b02 	vpush	{d8}
 800c9b8:	b089      	sub	sp, #36	; 0x24
 800c9ba:	ee08 0a10 	vmov	s16, r0
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	4bb4      	ldr	r3, [pc, #720]	; (800cc94 <__gethex+0x2e4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	468b      	mov	fp, r1
 800c9ca:	4690      	mov	r8, r2
 800c9cc:	f7f3 fbd8 	bl	8000180 <strlen>
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	f8db 2000 	ldr.w	r2, [fp]
 800c9d6:	4403      	add	r3, r0
 800c9d8:	4682      	mov	sl, r0
 800c9da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c9de:	9305      	str	r3, [sp, #20]
 800c9e0:	1c93      	adds	r3, r2, #2
 800c9e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9ea:	32fe      	adds	r2, #254	; 0xfe
 800c9ec:	18d1      	adds	r1, r2, r3
 800c9ee:	461f      	mov	r7, r3
 800c9f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9f4:	9100      	str	r1, [sp, #0]
 800c9f6:	2830      	cmp	r0, #48	; 0x30
 800c9f8:	d0f8      	beq.n	800c9ec <__gethex+0x3c>
 800c9fa:	f7ff ffc4 	bl	800c986 <__hexdig_fun>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d13a      	bne.n	800ca7a <__gethex+0xca>
 800ca04:	9901      	ldr	r1, [sp, #4]
 800ca06:	4652      	mov	r2, sl
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f001 fb3c 	bl	800e086 <strncmp>
 800ca0e:	4605      	mov	r5, r0
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d168      	bne.n	800cae6 <__gethex+0x136>
 800ca14:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca18:	eb07 060a 	add.w	r6, r7, sl
 800ca1c:	f7ff ffb3 	bl	800c986 <__hexdig_fun>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d062      	beq.n	800caea <__gethex+0x13a>
 800ca24:	4633      	mov	r3, r6
 800ca26:	7818      	ldrb	r0, [r3, #0]
 800ca28:	2830      	cmp	r0, #48	; 0x30
 800ca2a:	461f      	mov	r7, r3
 800ca2c:	f103 0301 	add.w	r3, r3, #1
 800ca30:	d0f9      	beq.n	800ca26 <__gethex+0x76>
 800ca32:	f7ff ffa8 	bl	800c986 <__hexdig_fun>
 800ca36:	2301      	movs	r3, #1
 800ca38:	fab0 f480 	clz	r4, r0
 800ca3c:	0964      	lsrs	r4, r4, #5
 800ca3e:	4635      	mov	r5, r6
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	463a      	mov	r2, r7
 800ca44:	4616      	mov	r6, r2
 800ca46:	3201      	adds	r2, #1
 800ca48:	7830      	ldrb	r0, [r6, #0]
 800ca4a:	f7ff ff9c 	bl	800c986 <__hexdig_fun>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d1f8      	bne.n	800ca44 <__gethex+0x94>
 800ca52:	9901      	ldr	r1, [sp, #4]
 800ca54:	4652      	mov	r2, sl
 800ca56:	4630      	mov	r0, r6
 800ca58:	f001 fb15 	bl	800e086 <strncmp>
 800ca5c:	b980      	cbnz	r0, 800ca80 <__gethex+0xd0>
 800ca5e:	b94d      	cbnz	r5, 800ca74 <__gethex+0xc4>
 800ca60:	eb06 050a 	add.w	r5, r6, sl
 800ca64:	462a      	mov	r2, r5
 800ca66:	4616      	mov	r6, r2
 800ca68:	3201      	adds	r2, #1
 800ca6a:	7830      	ldrb	r0, [r6, #0]
 800ca6c:	f7ff ff8b 	bl	800c986 <__hexdig_fun>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1f8      	bne.n	800ca66 <__gethex+0xb6>
 800ca74:	1bad      	subs	r5, r5, r6
 800ca76:	00ad      	lsls	r5, r5, #2
 800ca78:	e004      	b.n	800ca84 <__gethex+0xd4>
 800ca7a:	2400      	movs	r4, #0
 800ca7c:	4625      	mov	r5, r4
 800ca7e:	e7e0      	b.n	800ca42 <__gethex+0x92>
 800ca80:	2d00      	cmp	r5, #0
 800ca82:	d1f7      	bne.n	800ca74 <__gethex+0xc4>
 800ca84:	7833      	ldrb	r3, [r6, #0]
 800ca86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca8a:	2b50      	cmp	r3, #80	; 0x50
 800ca8c:	d13b      	bne.n	800cb06 <__gethex+0x156>
 800ca8e:	7873      	ldrb	r3, [r6, #1]
 800ca90:	2b2b      	cmp	r3, #43	; 0x2b
 800ca92:	d02c      	beq.n	800caee <__gethex+0x13e>
 800ca94:	2b2d      	cmp	r3, #45	; 0x2d
 800ca96:	d02e      	beq.n	800caf6 <__gethex+0x146>
 800ca98:	1c71      	adds	r1, r6, #1
 800ca9a:	f04f 0900 	mov.w	r9, #0
 800ca9e:	7808      	ldrb	r0, [r1, #0]
 800caa0:	f7ff ff71 	bl	800c986 <__hexdig_fun>
 800caa4:	1e43      	subs	r3, r0, #1
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b18      	cmp	r3, #24
 800caaa:	d82c      	bhi.n	800cb06 <__gethex+0x156>
 800caac:	f1a0 0210 	sub.w	r2, r0, #16
 800cab0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cab4:	f7ff ff67 	bl	800c986 <__hexdig_fun>
 800cab8:	1e43      	subs	r3, r0, #1
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b18      	cmp	r3, #24
 800cabe:	d91d      	bls.n	800cafc <__gethex+0x14c>
 800cac0:	f1b9 0f00 	cmp.w	r9, #0
 800cac4:	d000      	beq.n	800cac8 <__gethex+0x118>
 800cac6:	4252      	negs	r2, r2
 800cac8:	4415      	add	r5, r2
 800caca:	f8cb 1000 	str.w	r1, [fp]
 800cace:	b1e4      	cbz	r4, 800cb0a <__gethex+0x15a>
 800cad0:	9b00      	ldr	r3, [sp, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	bf14      	ite	ne
 800cad6:	2700      	movne	r7, #0
 800cad8:	2706      	moveq	r7, #6
 800cada:	4638      	mov	r0, r7
 800cadc:	b009      	add	sp, #36	; 0x24
 800cade:	ecbd 8b02 	vpop	{d8}
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	463e      	mov	r6, r7
 800cae8:	4625      	mov	r5, r4
 800caea:	2401      	movs	r4, #1
 800caec:	e7ca      	b.n	800ca84 <__gethex+0xd4>
 800caee:	f04f 0900 	mov.w	r9, #0
 800caf2:	1cb1      	adds	r1, r6, #2
 800caf4:	e7d3      	b.n	800ca9e <__gethex+0xee>
 800caf6:	f04f 0901 	mov.w	r9, #1
 800cafa:	e7fa      	b.n	800caf2 <__gethex+0x142>
 800cafc:	230a      	movs	r3, #10
 800cafe:	fb03 0202 	mla	r2, r3, r2, r0
 800cb02:	3a10      	subs	r2, #16
 800cb04:	e7d4      	b.n	800cab0 <__gethex+0x100>
 800cb06:	4631      	mov	r1, r6
 800cb08:	e7df      	b.n	800caca <__gethex+0x11a>
 800cb0a:	1bf3      	subs	r3, r6, r7
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	4621      	mov	r1, r4
 800cb10:	2b07      	cmp	r3, #7
 800cb12:	dc0b      	bgt.n	800cb2c <__gethex+0x17c>
 800cb14:	ee18 0a10 	vmov	r0, s16
 800cb18:	f000 fadc 	bl	800d0d4 <_Balloc>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	b940      	cbnz	r0, 800cb32 <__gethex+0x182>
 800cb20:	4b5d      	ldr	r3, [pc, #372]	; (800cc98 <__gethex+0x2e8>)
 800cb22:	4602      	mov	r2, r0
 800cb24:	21de      	movs	r1, #222	; 0xde
 800cb26:	485d      	ldr	r0, [pc, #372]	; (800cc9c <__gethex+0x2ec>)
 800cb28:	f001 fae0 	bl	800e0ec <__assert_func>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	105b      	asrs	r3, r3, #1
 800cb30:	e7ee      	b.n	800cb10 <__gethex+0x160>
 800cb32:	f100 0914 	add.w	r9, r0, #20
 800cb36:	f04f 0b00 	mov.w	fp, #0
 800cb3a:	f1ca 0301 	rsb	r3, sl, #1
 800cb3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb42:	f8cd b000 	str.w	fp, [sp]
 800cb46:	9306      	str	r3, [sp, #24]
 800cb48:	42b7      	cmp	r7, r6
 800cb4a:	d340      	bcc.n	800cbce <__gethex+0x21e>
 800cb4c:	9802      	ldr	r0, [sp, #8]
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	f840 3b04 	str.w	r3, [r0], #4
 800cb54:	eba0 0009 	sub.w	r0, r0, r9
 800cb58:	1080      	asrs	r0, r0, #2
 800cb5a:	0146      	lsls	r6, r0, #5
 800cb5c:	6120      	str	r0, [r4, #16]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fbaa 	bl	800d2b8 <__hi0bits>
 800cb64:	1a30      	subs	r0, r6, r0
 800cb66:	f8d8 6000 	ldr.w	r6, [r8]
 800cb6a:	42b0      	cmp	r0, r6
 800cb6c:	dd63      	ble.n	800cc36 <__gethex+0x286>
 800cb6e:	1b87      	subs	r7, r0, r6
 800cb70:	4639      	mov	r1, r7
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 ff4e 	bl	800da14 <__any_on>
 800cb78:	4682      	mov	sl, r0
 800cb7a:	b1a8      	cbz	r0, 800cba8 <__gethex+0x1f8>
 800cb7c:	1e7b      	subs	r3, r7, #1
 800cb7e:	1159      	asrs	r1, r3, #5
 800cb80:	f003 021f 	and.w	r2, r3, #31
 800cb84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb88:	f04f 0a01 	mov.w	sl, #1
 800cb8c:	fa0a f202 	lsl.w	r2, sl, r2
 800cb90:	420a      	tst	r2, r1
 800cb92:	d009      	beq.n	800cba8 <__gethex+0x1f8>
 800cb94:	4553      	cmp	r3, sl
 800cb96:	dd05      	ble.n	800cba4 <__gethex+0x1f4>
 800cb98:	1eb9      	subs	r1, r7, #2
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 ff3a 	bl	800da14 <__any_on>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d145      	bne.n	800cc30 <__gethex+0x280>
 800cba4:	f04f 0a02 	mov.w	sl, #2
 800cba8:	4639      	mov	r1, r7
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f7ff fe99 	bl	800c8e2 <rshift>
 800cbb0:	443d      	add	r5, r7
 800cbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbb6:	42ab      	cmp	r3, r5
 800cbb8:	da4c      	bge.n	800cc54 <__gethex+0x2a4>
 800cbba:	ee18 0a10 	vmov	r0, s16
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	f000 fac8 	bl	800d154 <_Bfree>
 800cbc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	27a3      	movs	r7, #163	; 0xa3
 800cbcc:	e785      	b.n	800cada <__gethex+0x12a>
 800cbce:	1e73      	subs	r3, r6, #1
 800cbd0:	9a05      	ldr	r2, [sp, #20]
 800cbd2:	9303      	str	r3, [sp, #12]
 800cbd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d019      	beq.n	800cc10 <__gethex+0x260>
 800cbdc:	f1bb 0f20 	cmp.w	fp, #32
 800cbe0:	d107      	bne.n	800cbf2 <__gethex+0x242>
 800cbe2:	9b02      	ldr	r3, [sp, #8]
 800cbe4:	9a00      	ldr	r2, [sp, #0]
 800cbe6:	f843 2b04 	str.w	r2, [r3], #4
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	2300      	movs	r3, #0
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	469b      	mov	fp, r3
 800cbf2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cbf6:	f7ff fec6 	bl	800c986 <__hexdig_fun>
 800cbfa:	9b00      	ldr	r3, [sp, #0]
 800cbfc:	f000 000f 	and.w	r0, r0, #15
 800cc00:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc04:	4303      	orrs	r3, r0
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	f10b 0b04 	add.w	fp, fp, #4
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	e00d      	b.n	800cc2c <__gethex+0x27c>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	9a06      	ldr	r2, [sp, #24]
 800cc14:	4413      	add	r3, r2
 800cc16:	42bb      	cmp	r3, r7
 800cc18:	d3e0      	bcc.n	800cbdc <__gethex+0x22c>
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	9307      	str	r3, [sp, #28]
 800cc20:	4652      	mov	r2, sl
 800cc22:	f001 fa30 	bl	800e086 <strncmp>
 800cc26:	9b07      	ldr	r3, [sp, #28]
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d1d7      	bne.n	800cbdc <__gethex+0x22c>
 800cc2c:	461e      	mov	r6, r3
 800cc2e:	e78b      	b.n	800cb48 <__gethex+0x198>
 800cc30:	f04f 0a03 	mov.w	sl, #3
 800cc34:	e7b8      	b.n	800cba8 <__gethex+0x1f8>
 800cc36:	da0a      	bge.n	800cc4e <__gethex+0x29e>
 800cc38:	1a37      	subs	r7, r6, r0
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	ee18 0a10 	vmov	r0, s16
 800cc40:	463a      	mov	r2, r7
 800cc42:	f000 fca3 	bl	800d58c <__lshift>
 800cc46:	1bed      	subs	r5, r5, r7
 800cc48:	4604      	mov	r4, r0
 800cc4a:	f100 0914 	add.w	r9, r0, #20
 800cc4e:	f04f 0a00 	mov.w	sl, #0
 800cc52:	e7ae      	b.n	800cbb2 <__gethex+0x202>
 800cc54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc58:	42a8      	cmp	r0, r5
 800cc5a:	dd72      	ble.n	800cd42 <__gethex+0x392>
 800cc5c:	1b45      	subs	r5, r0, r5
 800cc5e:	42ae      	cmp	r6, r5
 800cc60:	dc36      	bgt.n	800ccd0 <__gethex+0x320>
 800cc62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d02a      	beq.n	800ccc0 <__gethex+0x310>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d02c      	beq.n	800ccc8 <__gethex+0x318>
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d11c      	bne.n	800ccac <__gethex+0x2fc>
 800cc72:	42ae      	cmp	r6, r5
 800cc74:	d11a      	bne.n	800ccac <__gethex+0x2fc>
 800cc76:	2e01      	cmp	r6, #1
 800cc78:	d112      	bne.n	800cca0 <__gethex+0x2f0>
 800cc7a:	9a04      	ldr	r2, [sp, #16]
 800cc7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc80:	6013      	str	r3, [r2, #0]
 800cc82:	2301      	movs	r3, #1
 800cc84:	6123      	str	r3, [r4, #16]
 800cc86:	f8c9 3000 	str.w	r3, [r9]
 800cc8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc8c:	2762      	movs	r7, #98	; 0x62
 800cc8e:	601c      	str	r4, [r3, #0]
 800cc90:	e723      	b.n	800cada <__gethex+0x12a>
 800cc92:	bf00      	nop
 800cc94:	0800ec3c 	.word	0x0800ec3c
 800cc98:	0800eb60 	.word	0x0800eb60
 800cc9c:	0800ebd4 	.word	0x0800ebd4
 800cca0:	1e71      	subs	r1, r6, #1
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 feb6 	bl	800da14 <__any_on>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d1e6      	bne.n	800cc7a <__gethex+0x2ca>
 800ccac:	ee18 0a10 	vmov	r0, s16
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	f000 fa4f 	bl	800d154 <_Bfree>
 800ccb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccb8:	2300      	movs	r3, #0
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	2750      	movs	r7, #80	; 0x50
 800ccbe:	e70c      	b.n	800cada <__gethex+0x12a>
 800ccc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1f2      	bne.n	800ccac <__gethex+0x2fc>
 800ccc6:	e7d8      	b.n	800cc7a <__gethex+0x2ca>
 800ccc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1d5      	bne.n	800cc7a <__gethex+0x2ca>
 800ccce:	e7ed      	b.n	800ccac <__gethex+0x2fc>
 800ccd0:	1e6f      	subs	r7, r5, #1
 800ccd2:	f1ba 0f00 	cmp.w	sl, #0
 800ccd6:	d131      	bne.n	800cd3c <__gethex+0x38c>
 800ccd8:	b127      	cbz	r7, 800cce4 <__gethex+0x334>
 800ccda:	4639      	mov	r1, r7
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 fe99 	bl	800da14 <__any_on>
 800cce2:	4682      	mov	sl, r0
 800cce4:	117b      	asrs	r3, r7, #5
 800cce6:	2101      	movs	r1, #1
 800cce8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ccec:	f007 071f 	and.w	r7, r7, #31
 800ccf0:	fa01 f707 	lsl.w	r7, r1, r7
 800ccf4:	421f      	tst	r7, r3
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	bf18      	it	ne
 800ccfc:	f04a 0a02 	orrne.w	sl, sl, #2
 800cd00:	1b76      	subs	r6, r6, r5
 800cd02:	f7ff fdee 	bl	800c8e2 <rshift>
 800cd06:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd0a:	2702      	movs	r7, #2
 800cd0c:	f1ba 0f00 	cmp.w	sl, #0
 800cd10:	d048      	beq.n	800cda4 <__gethex+0x3f4>
 800cd12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d015      	beq.n	800cd46 <__gethex+0x396>
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d017      	beq.n	800cd4e <__gethex+0x39e>
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d109      	bne.n	800cd36 <__gethex+0x386>
 800cd22:	f01a 0f02 	tst.w	sl, #2
 800cd26:	d006      	beq.n	800cd36 <__gethex+0x386>
 800cd28:	f8d9 0000 	ldr.w	r0, [r9]
 800cd2c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd30:	f01a 0f01 	tst.w	sl, #1
 800cd34:	d10e      	bne.n	800cd54 <__gethex+0x3a4>
 800cd36:	f047 0710 	orr.w	r7, r7, #16
 800cd3a:	e033      	b.n	800cda4 <__gethex+0x3f4>
 800cd3c:	f04f 0a01 	mov.w	sl, #1
 800cd40:	e7d0      	b.n	800cce4 <__gethex+0x334>
 800cd42:	2701      	movs	r7, #1
 800cd44:	e7e2      	b.n	800cd0c <__gethex+0x35c>
 800cd46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd48:	f1c3 0301 	rsb	r3, r3, #1
 800cd4c:	9315      	str	r3, [sp, #84]	; 0x54
 800cd4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0f0      	beq.n	800cd36 <__gethex+0x386>
 800cd54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd58:	f104 0314 	add.w	r3, r4, #20
 800cd5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd60:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd64:	f04f 0c00 	mov.w	ip, #0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd72:	d01c      	beq.n	800cdae <__gethex+0x3fe>
 800cd74:	3201      	adds	r2, #1
 800cd76:	6002      	str	r2, [r0, #0]
 800cd78:	2f02      	cmp	r7, #2
 800cd7a:	f104 0314 	add.w	r3, r4, #20
 800cd7e:	d13f      	bne.n	800ce00 <__gethex+0x450>
 800cd80:	f8d8 2000 	ldr.w	r2, [r8]
 800cd84:	3a01      	subs	r2, #1
 800cd86:	42b2      	cmp	r2, r6
 800cd88:	d10a      	bne.n	800cda0 <__gethex+0x3f0>
 800cd8a:	1171      	asrs	r1, r6, #5
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd92:	f006 061f 	and.w	r6, r6, #31
 800cd96:	fa02 f606 	lsl.w	r6, r2, r6
 800cd9a:	421e      	tst	r6, r3
 800cd9c:	bf18      	it	ne
 800cd9e:	4617      	movne	r7, r2
 800cda0:	f047 0720 	orr.w	r7, r7, #32
 800cda4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cda6:	601c      	str	r4, [r3, #0]
 800cda8:	9b04      	ldr	r3, [sp, #16]
 800cdaa:	601d      	str	r5, [r3, #0]
 800cdac:	e695      	b.n	800cada <__gethex+0x12a>
 800cdae:	4299      	cmp	r1, r3
 800cdb0:	f843 cc04 	str.w	ip, [r3, #-4]
 800cdb4:	d8d8      	bhi.n	800cd68 <__gethex+0x3b8>
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	459b      	cmp	fp, r3
 800cdba:	db19      	blt.n	800cdf0 <__gethex+0x440>
 800cdbc:	6861      	ldr	r1, [r4, #4]
 800cdbe:	ee18 0a10 	vmov	r0, s16
 800cdc2:	3101      	adds	r1, #1
 800cdc4:	f000 f986 	bl	800d0d4 <_Balloc>
 800cdc8:	4681      	mov	r9, r0
 800cdca:	b918      	cbnz	r0, 800cdd4 <__gethex+0x424>
 800cdcc:	4b1a      	ldr	r3, [pc, #104]	; (800ce38 <__gethex+0x488>)
 800cdce:	4602      	mov	r2, r0
 800cdd0:	2184      	movs	r1, #132	; 0x84
 800cdd2:	e6a8      	b.n	800cb26 <__gethex+0x176>
 800cdd4:	6922      	ldr	r2, [r4, #16]
 800cdd6:	3202      	adds	r2, #2
 800cdd8:	f104 010c 	add.w	r1, r4, #12
 800cddc:	0092      	lsls	r2, r2, #2
 800cdde:	300c      	adds	r0, #12
 800cde0:	f7fc fd4a 	bl	8009878 <memcpy>
 800cde4:	4621      	mov	r1, r4
 800cde6:	ee18 0a10 	vmov	r0, s16
 800cdea:	f000 f9b3 	bl	800d154 <_Bfree>
 800cdee:	464c      	mov	r4, r9
 800cdf0:	6923      	ldr	r3, [r4, #16]
 800cdf2:	1c5a      	adds	r2, r3, #1
 800cdf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdf8:	6122      	str	r2, [r4, #16]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	615a      	str	r2, [r3, #20]
 800cdfe:	e7bb      	b.n	800cd78 <__gethex+0x3c8>
 800ce00:	6922      	ldr	r2, [r4, #16]
 800ce02:	455a      	cmp	r2, fp
 800ce04:	dd0b      	ble.n	800ce1e <__gethex+0x46e>
 800ce06:	2101      	movs	r1, #1
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7ff fd6a 	bl	800c8e2 <rshift>
 800ce0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce12:	3501      	adds	r5, #1
 800ce14:	42ab      	cmp	r3, r5
 800ce16:	f6ff aed0 	blt.w	800cbba <__gethex+0x20a>
 800ce1a:	2701      	movs	r7, #1
 800ce1c:	e7c0      	b.n	800cda0 <__gethex+0x3f0>
 800ce1e:	f016 061f 	ands.w	r6, r6, #31
 800ce22:	d0fa      	beq.n	800ce1a <__gethex+0x46a>
 800ce24:	4453      	add	r3, sl
 800ce26:	f1c6 0620 	rsb	r6, r6, #32
 800ce2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce2e:	f000 fa43 	bl	800d2b8 <__hi0bits>
 800ce32:	42b0      	cmp	r0, r6
 800ce34:	dbe7      	blt.n	800ce06 <__gethex+0x456>
 800ce36:	e7f0      	b.n	800ce1a <__gethex+0x46a>
 800ce38:	0800eb60 	.word	0x0800eb60

0800ce3c <L_shift>:
 800ce3c:	f1c2 0208 	rsb	r2, r2, #8
 800ce40:	0092      	lsls	r2, r2, #2
 800ce42:	b570      	push	{r4, r5, r6, lr}
 800ce44:	f1c2 0620 	rsb	r6, r2, #32
 800ce48:	6843      	ldr	r3, [r0, #4]
 800ce4a:	6804      	ldr	r4, [r0, #0]
 800ce4c:	fa03 f506 	lsl.w	r5, r3, r6
 800ce50:	432c      	orrs	r4, r5
 800ce52:	40d3      	lsrs	r3, r2
 800ce54:	6004      	str	r4, [r0, #0]
 800ce56:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce5a:	4288      	cmp	r0, r1
 800ce5c:	d3f4      	bcc.n	800ce48 <L_shift+0xc>
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}

0800ce60 <__match>:
 800ce60:	b530      	push	{r4, r5, lr}
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	3301      	adds	r3, #1
 800ce66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6a:	b914      	cbnz	r4, 800ce72 <__match+0x12>
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	2001      	movs	r0, #1
 800ce70:	bd30      	pop	{r4, r5, pc}
 800ce72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce7a:	2d19      	cmp	r5, #25
 800ce7c:	bf98      	it	ls
 800ce7e:	3220      	addls	r2, #32
 800ce80:	42a2      	cmp	r2, r4
 800ce82:	d0f0      	beq.n	800ce66 <__match+0x6>
 800ce84:	2000      	movs	r0, #0
 800ce86:	e7f3      	b.n	800ce70 <__match+0x10>

0800ce88 <__hexnan>:
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	680b      	ldr	r3, [r1, #0]
 800ce8e:	115e      	asrs	r6, r3, #5
 800ce90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce94:	f013 031f 	ands.w	r3, r3, #31
 800ce98:	b087      	sub	sp, #28
 800ce9a:	bf18      	it	ne
 800ce9c:	3604      	addne	r6, #4
 800ce9e:	2500      	movs	r5, #0
 800cea0:	1f37      	subs	r7, r6, #4
 800cea2:	4690      	mov	r8, r2
 800cea4:	6802      	ldr	r2, [r0, #0]
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	4682      	mov	sl, r0
 800ceaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800ceae:	46b9      	mov	r9, r7
 800ceb0:	463c      	mov	r4, r7
 800ceb2:	9502      	str	r5, [sp, #8]
 800ceb4:	46ab      	mov	fp, r5
 800ceb6:	7851      	ldrb	r1, [r2, #1]
 800ceb8:	1c53      	adds	r3, r2, #1
 800ceba:	9303      	str	r3, [sp, #12]
 800cebc:	b341      	cbz	r1, 800cf10 <__hexnan+0x88>
 800cebe:	4608      	mov	r0, r1
 800cec0:	9205      	str	r2, [sp, #20]
 800cec2:	9104      	str	r1, [sp, #16]
 800cec4:	f7ff fd5f 	bl	800c986 <__hexdig_fun>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d14f      	bne.n	800cf6c <__hexnan+0xe4>
 800cecc:	9904      	ldr	r1, [sp, #16]
 800cece:	9a05      	ldr	r2, [sp, #20]
 800ced0:	2920      	cmp	r1, #32
 800ced2:	d818      	bhi.n	800cf06 <__hexnan+0x7e>
 800ced4:	9b02      	ldr	r3, [sp, #8]
 800ced6:	459b      	cmp	fp, r3
 800ced8:	dd13      	ble.n	800cf02 <__hexnan+0x7a>
 800ceda:	454c      	cmp	r4, r9
 800cedc:	d206      	bcs.n	800ceec <__hexnan+0x64>
 800cede:	2d07      	cmp	r5, #7
 800cee0:	dc04      	bgt.n	800ceec <__hexnan+0x64>
 800cee2:	462a      	mov	r2, r5
 800cee4:	4649      	mov	r1, r9
 800cee6:	4620      	mov	r0, r4
 800cee8:	f7ff ffa8 	bl	800ce3c <L_shift>
 800ceec:	4544      	cmp	r4, r8
 800ceee:	d950      	bls.n	800cf92 <__hexnan+0x10a>
 800cef0:	2300      	movs	r3, #0
 800cef2:	f1a4 0904 	sub.w	r9, r4, #4
 800cef6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cefa:	f8cd b008 	str.w	fp, [sp, #8]
 800cefe:	464c      	mov	r4, r9
 800cf00:	461d      	mov	r5, r3
 800cf02:	9a03      	ldr	r2, [sp, #12]
 800cf04:	e7d7      	b.n	800ceb6 <__hexnan+0x2e>
 800cf06:	2929      	cmp	r1, #41	; 0x29
 800cf08:	d156      	bne.n	800cfb8 <__hexnan+0x130>
 800cf0a:	3202      	adds	r2, #2
 800cf0c:	f8ca 2000 	str.w	r2, [sl]
 800cf10:	f1bb 0f00 	cmp.w	fp, #0
 800cf14:	d050      	beq.n	800cfb8 <__hexnan+0x130>
 800cf16:	454c      	cmp	r4, r9
 800cf18:	d206      	bcs.n	800cf28 <__hexnan+0xa0>
 800cf1a:	2d07      	cmp	r5, #7
 800cf1c:	dc04      	bgt.n	800cf28 <__hexnan+0xa0>
 800cf1e:	462a      	mov	r2, r5
 800cf20:	4649      	mov	r1, r9
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff ff8a 	bl	800ce3c <L_shift>
 800cf28:	4544      	cmp	r4, r8
 800cf2a:	d934      	bls.n	800cf96 <__hexnan+0x10e>
 800cf2c:	f1a8 0204 	sub.w	r2, r8, #4
 800cf30:	4623      	mov	r3, r4
 800cf32:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf36:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf3a:	429f      	cmp	r7, r3
 800cf3c:	d2f9      	bcs.n	800cf32 <__hexnan+0xaa>
 800cf3e:	1b3b      	subs	r3, r7, r4
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	3304      	adds	r3, #4
 800cf46:	3401      	adds	r4, #1
 800cf48:	3e03      	subs	r6, #3
 800cf4a:	42b4      	cmp	r4, r6
 800cf4c:	bf88      	it	hi
 800cf4e:	2304      	movhi	r3, #4
 800cf50:	4443      	add	r3, r8
 800cf52:	2200      	movs	r2, #0
 800cf54:	f843 2b04 	str.w	r2, [r3], #4
 800cf58:	429f      	cmp	r7, r3
 800cf5a:	d2fb      	bcs.n	800cf54 <__hexnan+0xcc>
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	b91b      	cbnz	r3, 800cf68 <__hexnan+0xe0>
 800cf60:	4547      	cmp	r7, r8
 800cf62:	d127      	bne.n	800cfb4 <__hexnan+0x12c>
 800cf64:	2301      	movs	r3, #1
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	2005      	movs	r0, #5
 800cf6a:	e026      	b.n	800cfba <__hexnan+0x132>
 800cf6c:	3501      	adds	r5, #1
 800cf6e:	2d08      	cmp	r5, #8
 800cf70:	f10b 0b01 	add.w	fp, fp, #1
 800cf74:	dd06      	ble.n	800cf84 <__hexnan+0xfc>
 800cf76:	4544      	cmp	r4, r8
 800cf78:	d9c3      	bls.n	800cf02 <__hexnan+0x7a>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf80:	2501      	movs	r5, #1
 800cf82:	3c04      	subs	r4, #4
 800cf84:	6822      	ldr	r2, [r4, #0]
 800cf86:	f000 000f 	and.w	r0, r0, #15
 800cf8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cf8e:	6022      	str	r2, [r4, #0]
 800cf90:	e7b7      	b.n	800cf02 <__hexnan+0x7a>
 800cf92:	2508      	movs	r5, #8
 800cf94:	e7b5      	b.n	800cf02 <__hexnan+0x7a>
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0df      	beq.n	800cf5c <__hexnan+0xd4>
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa0:	f1c3 0320 	rsb	r3, r3, #32
 800cfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cfac:	401a      	ands	r2, r3
 800cfae:	f846 2c04 	str.w	r2, [r6, #-4]
 800cfb2:	e7d3      	b.n	800cf5c <__hexnan+0xd4>
 800cfb4:	3f04      	subs	r7, #4
 800cfb6:	e7d1      	b.n	800cf5c <__hexnan+0xd4>
 800cfb8:	2004      	movs	r0, #4
 800cfba:	b007      	add	sp, #28
 800cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfc0 <_localeconv_r>:
 800cfc0:	4800      	ldr	r0, [pc, #0]	; (800cfc4 <_localeconv_r+0x4>)
 800cfc2:	4770      	bx	lr
 800cfc4:	200001b4 	.word	0x200001b4

0800cfc8 <__retarget_lock_init_recursive>:
 800cfc8:	4770      	bx	lr

0800cfca <__retarget_lock_acquire_recursive>:
 800cfca:	4770      	bx	lr

0800cfcc <__retarget_lock_release_recursive>:
 800cfcc:	4770      	bx	lr

0800cfce <__swhatbuf_r>:
 800cfce:	b570      	push	{r4, r5, r6, lr}
 800cfd0:	460e      	mov	r6, r1
 800cfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd6:	2900      	cmp	r1, #0
 800cfd8:	b096      	sub	sp, #88	; 0x58
 800cfda:	4614      	mov	r4, r2
 800cfdc:	461d      	mov	r5, r3
 800cfde:	da08      	bge.n	800cff2 <__swhatbuf_r+0x24>
 800cfe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	602a      	str	r2, [r5, #0]
 800cfe8:	061a      	lsls	r2, r3, #24
 800cfea:	d410      	bmi.n	800d00e <__swhatbuf_r+0x40>
 800cfec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cff0:	e00e      	b.n	800d010 <__swhatbuf_r+0x42>
 800cff2:	466a      	mov	r2, sp
 800cff4:	f001 f8ba 	bl	800e16c <_fstat_r>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	dbf1      	blt.n	800cfe0 <__swhatbuf_r+0x12>
 800cffc:	9a01      	ldr	r2, [sp, #4]
 800cffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d006:	425a      	negs	r2, r3
 800d008:	415a      	adcs	r2, r3
 800d00a:	602a      	str	r2, [r5, #0]
 800d00c:	e7ee      	b.n	800cfec <__swhatbuf_r+0x1e>
 800d00e:	2340      	movs	r3, #64	; 0x40
 800d010:	2000      	movs	r0, #0
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	b016      	add	sp, #88	; 0x58
 800d016:	bd70      	pop	{r4, r5, r6, pc}

0800d018 <__smakebuf_r>:
 800d018:	898b      	ldrh	r3, [r1, #12]
 800d01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d01c:	079d      	lsls	r5, r3, #30
 800d01e:	4606      	mov	r6, r0
 800d020:	460c      	mov	r4, r1
 800d022:	d507      	bpl.n	800d034 <__smakebuf_r+0x1c>
 800d024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	6123      	str	r3, [r4, #16]
 800d02c:	2301      	movs	r3, #1
 800d02e:	6163      	str	r3, [r4, #20]
 800d030:	b002      	add	sp, #8
 800d032:	bd70      	pop	{r4, r5, r6, pc}
 800d034:	ab01      	add	r3, sp, #4
 800d036:	466a      	mov	r2, sp
 800d038:	f7ff ffc9 	bl	800cfce <__swhatbuf_r>
 800d03c:	9900      	ldr	r1, [sp, #0]
 800d03e:	4605      	mov	r5, r0
 800d040:	4630      	mov	r0, r6
 800d042:	f7fc fc9b 	bl	800997c <_malloc_r>
 800d046:	b948      	cbnz	r0, 800d05c <__smakebuf_r+0x44>
 800d048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04c:	059a      	lsls	r2, r3, #22
 800d04e:	d4ef      	bmi.n	800d030 <__smakebuf_r+0x18>
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	f043 0302 	orr.w	r3, r3, #2
 800d058:	81a3      	strh	r3, [r4, #12]
 800d05a:	e7e3      	b.n	800d024 <__smakebuf_r+0xc>
 800d05c:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <__smakebuf_r+0x7c>)
 800d05e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	6020      	str	r0, [r4, #0]
 800d064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d068:	81a3      	strh	r3, [r4, #12]
 800d06a:	9b00      	ldr	r3, [sp, #0]
 800d06c:	6163      	str	r3, [r4, #20]
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	6120      	str	r0, [r4, #16]
 800d072:	b15b      	cbz	r3, 800d08c <__smakebuf_r+0x74>
 800d074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d078:	4630      	mov	r0, r6
 800d07a:	f001 f889 	bl	800e190 <_isatty_r>
 800d07e:	b128      	cbz	r0, 800d08c <__smakebuf_r+0x74>
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f023 0303 	bic.w	r3, r3, #3
 800d086:	f043 0301 	orr.w	r3, r3, #1
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	89a0      	ldrh	r0, [r4, #12]
 800d08e:	4305      	orrs	r5, r0
 800d090:	81a5      	strh	r5, [r4, #12]
 800d092:	e7cd      	b.n	800d030 <__smakebuf_r+0x18>
 800d094:	0800c741 	.word	0x0800c741

0800d098 <__ascii_mbtowc>:
 800d098:	b082      	sub	sp, #8
 800d09a:	b901      	cbnz	r1, 800d09e <__ascii_mbtowc+0x6>
 800d09c:	a901      	add	r1, sp, #4
 800d09e:	b142      	cbz	r2, 800d0b2 <__ascii_mbtowc+0x1a>
 800d0a0:	b14b      	cbz	r3, 800d0b6 <__ascii_mbtowc+0x1e>
 800d0a2:	7813      	ldrb	r3, [r2, #0]
 800d0a4:	600b      	str	r3, [r1, #0]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	1e10      	subs	r0, r2, #0
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	b002      	add	sp, #8
 800d0b0:	4770      	bx	lr
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	e7fb      	b.n	800d0ae <__ascii_mbtowc+0x16>
 800d0b6:	f06f 0001 	mvn.w	r0, #1
 800d0ba:	e7f8      	b.n	800d0ae <__ascii_mbtowc+0x16>

0800d0bc <__malloc_lock>:
 800d0bc:	4801      	ldr	r0, [pc, #4]	; (800d0c4 <__malloc_lock+0x8>)
 800d0be:	f7ff bf84 	b.w	800cfca <__retarget_lock_acquire_recursive>
 800d0c2:	bf00      	nop
 800d0c4:	20000810 	.word	0x20000810

0800d0c8 <__malloc_unlock>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	; (800d0d0 <__malloc_unlock+0x8>)
 800d0ca:	f7ff bf7f 	b.w	800cfcc <__retarget_lock_release_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20000810 	.word	0x20000810

0800d0d4 <_Balloc>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	b976      	cbnz	r6, 800d0fc <_Balloc+0x28>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f7fc fbba 	bl	8009858 <malloc>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	6260      	str	r0, [r4, #36]	; 0x24
 800d0e8:	b920      	cbnz	r0, 800d0f4 <_Balloc+0x20>
 800d0ea:	4b18      	ldr	r3, [pc, #96]	; (800d14c <_Balloc+0x78>)
 800d0ec:	4818      	ldr	r0, [pc, #96]	; (800d150 <_Balloc+0x7c>)
 800d0ee:	2166      	movs	r1, #102	; 0x66
 800d0f0:	f000 fffc 	bl	800e0ec <__assert_func>
 800d0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f8:	6006      	str	r6, [r0, #0]
 800d0fa:	60c6      	str	r6, [r0, #12]
 800d0fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d0fe:	68f3      	ldr	r3, [r6, #12]
 800d100:	b183      	cbz	r3, 800d124 <_Balloc+0x50>
 800d102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d10a:	b9b8      	cbnz	r0, 800d13c <_Balloc+0x68>
 800d10c:	2101      	movs	r1, #1
 800d10e:	fa01 f605 	lsl.w	r6, r1, r5
 800d112:	1d72      	adds	r2, r6, #5
 800d114:	0092      	lsls	r2, r2, #2
 800d116:	4620      	mov	r0, r4
 800d118:	f000 fc9d 	bl	800da56 <_calloc_r>
 800d11c:	b160      	cbz	r0, 800d138 <_Balloc+0x64>
 800d11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d122:	e00e      	b.n	800d142 <_Balloc+0x6e>
 800d124:	2221      	movs	r2, #33	; 0x21
 800d126:	2104      	movs	r1, #4
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 fc94 	bl	800da56 <_calloc_r>
 800d12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d130:	60f0      	str	r0, [r6, #12]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1e4      	bne.n	800d102 <_Balloc+0x2e>
 800d138:	2000      	movs	r0, #0
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	6802      	ldr	r2, [r0, #0]
 800d13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d142:	2300      	movs	r3, #0
 800d144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d148:	e7f7      	b.n	800d13a <_Balloc+0x66>
 800d14a:	bf00      	nop
 800d14c:	0800eaee 	.word	0x0800eaee
 800d150:	0800ec50 	.word	0x0800ec50

0800d154 <_Bfree>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	b976      	cbnz	r6, 800d17c <_Bfree+0x28>
 800d15e:	2010      	movs	r0, #16
 800d160:	f7fc fb7a 	bl	8009858 <malloc>
 800d164:	4602      	mov	r2, r0
 800d166:	6268      	str	r0, [r5, #36]	; 0x24
 800d168:	b920      	cbnz	r0, 800d174 <_Bfree+0x20>
 800d16a:	4b09      	ldr	r3, [pc, #36]	; (800d190 <_Bfree+0x3c>)
 800d16c:	4809      	ldr	r0, [pc, #36]	; (800d194 <_Bfree+0x40>)
 800d16e:	218a      	movs	r1, #138	; 0x8a
 800d170:	f000 ffbc 	bl	800e0ec <__assert_func>
 800d174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d178:	6006      	str	r6, [r0, #0]
 800d17a:	60c6      	str	r6, [r0, #12]
 800d17c:	b13c      	cbz	r4, 800d18e <_Bfree+0x3a>
 800d17e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d180:	6862      	ldr	r2, [r4, #4]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d188:	6021      	str	r1, [r4, #0]
 800d18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d18e:	bd70      	pop	{r4, r5, r6, pc}
 800d190:	0800eaee 	.word	0x0800eaee
 800d194:	0800ec50 	.word	0x0800ec50

0800d198 <__multadd>:
 800d198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19c:	690d      	ldr	r5, [r1, #16]
 800d19e:	4607      	mov	r7, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	461e      	mov	r6, r3
 800d1a4:	f101 0c14 	add.w	ip, r1, #20
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800d1ae:	b299      	uxth	r1, r3
 800d1b0:	fb02 6101 	mla	r1, r2, r1, r6
 800d1b4:	0c1e      	lsrs	r6, r3, #16
 800d1b6:	0c0b      	lsrs	r3, r1, #16
 800d1b8:	fb02 3306 	mla	r3, r2, r6, r3
 800d1bc:	b289      	uxth	r1, r1
 800d1be:	3001      	adds	r0, #1
 800d1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1c4:	4285      	cmp	r5, r0
 800d1c6:	f84c 1b04 	str.w	r1, [ip], #4
 800d1ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1ce:	dcec      	bgt.n	800d1aa <__multadd+0x12>
 800d1d0:	b30e      	cbz	r6, 800d216 <__multadd+0x7e>
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	42ab      	cmp	r3, r5
 800d1d6:	dc19      	bgt.n	800d20c <__multadd+0x74>
 800d1d8:	6861      	ldr	r1, [r4, #4]
 800d1da:	4638      	mov	r0, r7
 800d1dc:	3101      	adds	r1, #1
 800d1de:	f7ff ff79 	bl	800d0d4 <_Balloc>
 800d1e2:	4680      	mov	r8, r0
 800d1e4:	b928      	cbnz	r0, 800d1f2 <__multadd+0x5a>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	4b0c      	ldr	r3, [pc, #48]	; (800d21c <__multadd+0x84>)
 800d1ea:	480d      	ldr	r0, [pc, #52]	; (800d220 <__multadd+0x88>)
 800d1ec:	21b5      	movs	r1, #181	; 0xb5
 800d1ee:	f000 ff7d 	bl	800e0ec <__assert_func>
 800d1f2:	6922      	ldr	r2, [r4, #16]
 800d1f4:	3202      	adds	r2, #2
 800d1f6:	f104 010c 	add.w	r1, r4, #12
 800d1fa:	0092      	lsls	r2, r2, #2
 800d1fc:	300c      	adds	r0, #12
 800d1fe:	f7fc fb3b 	bl	8009878 <memcpy>
 800d202:	4621      	mov	r1, r4
 800d204:	4638      	mov	r0, r7
 800d206:	f7ff ffa5 	bl	800d154 <_Bfree>
 800d20a:	4644      	mov	r4, r8
 800d20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d210:	3501      	adds	r5, #1
 800d212:	615e      	str	r6, [r3, #20]
 800d214:	6125      	str	r5, [r4, #16]
 800d216:	4620      	mov	r0, r4
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	0800eb60 	.word	0x0800eb60
 800d220:	0800ec50 	.word	0x0800ec50

0800d224 <__s2b>:
 800d224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	4615      	mov	r5, r2
 800d22c:	461f      	mov	r7, r3
 800d22e:	2209      	movs	r2, #9
 800d230:	3308      	adds	r3, #8
 800d232:	4606      	mov	r6, r0
 800d234:	fb93 f3f2 	sdiv	r3, r3, r2
 800d238:	2100      	movs	r1, #0
 800d23a:	2201      	movs	r2, #1
 800d23c:	429a      	cmp	r2, r3
 800d23e:	db09      	blt.n	800d254 <__s2b+0x30>
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff ff47 	bl	800d0d4 <_Balloc>
 800d246:	b940      	cbnz	r0, 800d25a <__s2b+0x36>
 800d248:	4602      	mov	r2, r0
 800d24a:	4b19      	ldr	r3, [pc, #100]	; (800d2b0 <__s2b+0x8c>)
 800d24c:	4819      	ldr	r0, [pc, #100]	; (800d2b4 <__s2b+0x90>)
 800d24e:	21ce      	movs	r1, #206	; 0xce
 800d250:	f000 ff4c 	bl	800e0ec <__assert_func>
 800d254:	0052      	lsls	r2, r2, #1
 800d256:	3101      	adds	r1, #1
 800d258:	e7f0      	b.n	800d23c <__s2b+0x18>
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	6143      	str	r3, [r0, #20]
 800d25e:	2d09      	cmp	r5, #9
 800d260:	f04f 0301 	mov.w	r3, #1
 800d264:	6103      	str	r3, [r0, #16]
 800d266:	dd16      	ble.n	800d296 <__s2b+0x72>
 800d268:	f104 0909 	add.w	r9, r4, #9
 800d26c:	46c8      	mov	r8, r9
 800d26e:	442c      	add	r4, r5
 800d270:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d274:	4601      	mov	r1, r0
 800d276:	3b30      	subs	r3, #48	; 0x30
 800d278:	220a      	movs	r2, #10
 800d27a:	4630      	mov	r0, r6
 800d27c:	f7ff ff8c 	bl	800d198 <__multadd>
 800d280:	45a0      	cmp	r8, r4
 800d282:	d1f5      	bne.n	800d270 <__s2b+0x4c>
 800d284:	f1a5 0408 	sub.w	r4, r5, #8
 800d288:	444c      	add	r4, r9
 800d28a:	1b2d      	subs	r5, r5, r4
 800d28c:	1963      	adds	r3, r4, r5
 800d28e:	42bb      	cmp	r3, r7
 800d290:	db04      	blt.n	800d29c <__s2b+0x78>
 800d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d296:	340a      	adds	r4, #10
 800d298:	2509      	movs	r5, #9
 800d29a:	e7f6      	b.n	800d28a <__s2b+0x66>
 800d29c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	3b30      	subs	r3, #48	; 0x30
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f7ff ff76 	bl	800d198 <__multadd>
 800d2ac:	e7ee      	b.n	800d28c <__s2b+0x68>
 800d2ae:	bf00      	nop
 800d2b0:	0800eb60 	.word	0x0800eb60
 800d2b4:	0800ec50 	.word	0x0800ec50

0800d2b8 <__hi0bits>:
 800d2b8:	0c03      	lsrs	r3, r0, #16
 800d2ba:	041b      	lsls	r3, r3, #16
 800d2bc:	b9d3      	cbnz	r3, 800d2f4 <__hi0bits+0x3c>
 800d2be:	0400      	lsls	r0, r0, #16
 800d2c0:	2310      	movs	r3, #16
 800d2c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2c6:	bf04      	itt	eq
 800d2c8:	0200      	lsleq	r0, r0, #8
 800d2ca:	3308      	addeq	r3, #8
 800d2cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2d0:	bf04      	itt	eq
 800d2d2:	0100      	lsleq	r0, r0, #4
 800d2d4:	3304      	addeq	r3, #4
 800d2d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2da:	bf04      	itt	eq
 800d2dc:	0080      	lsleq	r0, r0, #2
 800d2de:	3302      	addeq	r3, #2
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	db05      	blt.n	800d2f0 <__hi0bits+0x38>
 800d2e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d2e8:	f103 0301 	add.w	r3, r3, #1
 800d2ec:	bf08      	it	eq
 800d2ee:	2320      	moveq	r3, #32
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	4770      	bx	lr
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	e7e4      	b.n	800d2c2 <__hi0bits+0xa>

0800d2f8 <__lo0bits>:
 800d2f8:	6803      	ldr	r3, [r0, #0]
 800d2fa:	f013 0207 	ands.w	r2, r3, #7
 800d2fe:	4601      	mov	r1, r0
 800d300:	d00b      	beq.n	800d31a <__lo0bits+0x22>
 800d302:	07da      	lsls	r2, r3, #31
 800d304:	d423      	bmi.n	800d34e <__lo0bits+0x56>
 800d306:	0798      	lsls	r0, r3, #30
 800d308:	bf49      	itett	mi
 800d30a:	085b      	lsrmi	r3, r3, #1
 800d30c:	089b      	lsrpl	r3, r3, #2
 800d30e:	2001      	movmi	r0, #1
 800d310:	600b      	strmi	r3, [r1, #0]
 800d312:	bf5c      	itt	pl
 800d314:	600b      	strpl	r3, [r1, #0]
 800d316:	2002      	movpl	r0, #2
 800d318:	4770      	bx	lr
 800d31a:	b298      	uxth	r0, r3
 800d31c:	b9a8      	cbnz	r0, 800d34a <__lo0bits+0x52>
 800d31e:	0c1b      	lsrs	r3, r3, #16
 800d320:	2010      	movs	r0, #16
 800d322:	b2da      	uxtb	r2, r3
 800d324:	b90a      	cbnz	r2, 800d32a <__lo0bits+0x32>
 800d326:	3008      	adds	r0, #8
 800d328:	0a1b      	lsrs	r3, r3, #8
 800d32a:	071a      	lsls	r2, r3, #28
 800d32c:	bf04      	itt	eq
 800d32e:	091b      	lsreq	r3, r3, #4
 800d330:	3004      	addeq	r0, #4
 800d332:	079a      	lsls	r2, r3, #30
 800d334:	bf04      	itt	eq
 800d336:	089b      	lsreq	r3, r3, #2
 800d338:	3002      	addeq	r0, #2
 800d33a:	07da      	lsls	r2, r3, #31
 800d33c:	d403      	bmi.n	800d346 <__lo0bits+0x4e>
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	f100 0001 	add.w	r0, r0, #1
 800d344:	d005      	beq.n	800d352 <__lo0bits+0x5a>
 800d346:	600b      	str	r3, [r1, #0]
 800d348:	4770      	bx	lr
 800d34a:	4610      	mov	r0, r2
 800d34c:	e7e9      	b.n	800d322 <__lo0bits+0x2a>
 800d34e:	2000      	movs	r0, #0
 800d350:	4770      	bx	lr
 800d352:	2020      	movs	r0, #32
 800d354:	4770      	bx	lr
	...

0800d358 <__i2b>:
 800d358:	b510      	push	{r4, lr}
 800d35a:	460c      	mov	r4, r1
 800d35c:	2101      	movs	r1, #1
 800d35e:	f7ff feb9 	bl	800d0d4 <_Balloc>
 800d362:	4602      	mov	r2, r0
 800d364:	b928      	cbnz	r0, 800d372 <__i2b+0x1a>
 800d366:	4b05      	ldr	r3, [pc, #20]	; (800d37c <__i2b+0x24>)
 800d368:	4805      	ldr	r0, [pc, #20]	; (800d380 <__i2b+0x28>)
 800d36a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d36e:	f000 febd 	bl	800e0ec <__assert_func>
 800d372:	2301      	movs	r3, #1
 800d374:	6144      	str	r4, [r0, #20]
 800d376:	6103      	str	r3, [r0, #16]
 800d378:	bd10      	pop	{r4, pc}
 800d37a:	bf00      	nop
 800d37c:	0800eb60 	.word	0x0800eb60
 800d380:	0800ec50 	.word	0x0800ec50

0800d384 <__multiply>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	4691      	mov	r9, r2
 800d38a:	690a      	ldr	r2, [r1, #16]
 800d38c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d390:	429a      	cmp	r2, r3
 800d392:	bfb8      	it	lt
 800d394:	460b      	movlt	r3, r1
 800d396:	460c      	mov	r4, r1
 800d398:	bfbc      	itt	lt
 800d39a:	464c      	movlt	r4, r9
 800d39c:	4699      	movlt	r9, r3
 800d39e:	6927      	ldr	r7, [r4, #16]
 800d3a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3a4:	68a3      	ldr	r3, [r4, #8]
 800d3a6:	6861      	ldr	r1, [r4, #4]
 800d3a8:	eb07 060a 	add.w	r6, r7, sl
 800d3ac:	42b3      	cmp	r3, r6
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	bfb8      	it	lt
 800d3b2:	3101      	addlt	r1, #1
 800d3b4:	f7ff fe8e 	bl	800d0d4 <_Balloc>
 800d3b8:	b930      	cbnz	r0, 800d3c8 <__multiply+0x44>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	4b44      	ldr	r3, [pc, #272]	; (800d4d0 <__multiply+0x14c>)
 800d3be:	4845      	ldr	r0, [pc, #276]	; (800d4d4 <__multiply+0x150>)
 800d3c0:	f240 115d 	movw	r1, #349	; 0x15d
 800d3c4:	f000 fe92 	bl	800e0ec <__assert_func>
 800d3c8:	f100 0514 	add.w	r5, r0, #20
 800d3cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4543      	cmp	r3, r8
 800d3d6:	d321      	bcc.n	800d41c <__multiply+0x98>
 800d3d8:	f104 0314 	add.w	r3, r4, #20
 800d3dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3e0:	f109 0314 	add.w	r3, r9, #20
 800d3e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d3e8:	9202      	str	r2, [sp, #8]
 800d3ea:	1b3a      	subs	r2, r7, r4
 800d3ec:	3a15      	subs	r2, #21
 800d3ee:	f022 0203 	bic.w	r2, r2, #3
 800d3f2:	3204      	adds	r2, #4
 800d3f4:	f104 0115 	add.w	r1, r4, #21
 800d3f8:	428f      	cmp	r7, r1
 800d3fa:	bf38      	it	cc
 800d3fc:	2204      	movcc	r2, #4
 800d3fe:	9201      	str	r2, [sp, #4]
 800d400:	9a02      	ldr	r2, [sp, #8]
 800d402:	9303      	str	r3, [sp, #12]
 800d404:	429a      	cmp	r2, r3
 800d406:	d80c      	bhi.n	800d422 <__multiply+0x9e>
 800d408:	2e00      	cmp	r6, #0
 800d40a:	dd03      	ble.n	800d414 <__multiply+0x90>
 800d40c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d410:	2b00      	cmp	r3, #0
 800d412:	d05a      	beq.n	800d4ca <__multiply+0x146>
 800d414:	6106      	str	r6, [r0, #16]
 800d416:	b005      	add	sp, #20
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	f843 2b04 	str.w	r2, [r3], #4
 800d420:	e7d8      	b.n	800d3d4 <__multiply+0x50>
 800d422:	f8b3 a000 	ldrh.w	sl, [r3]
 800d426:	f1ba 0f00 	cmp.w	sl, #0
 800d42a:	d024      	beq.n	800d476 <__multiply+0xf2>
 800d42c:	f104 0e14 	add.w	lr, r4, #20
 800d430:	46a9      	mov	r9, r5
 800d432:	f04f 0c00 	mov.w	ip, #0
 800d436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d43a:	f8d9 1000 	ldr.w	r1, [r9]
 800d43e:	fa1f fb82 	uxth.w	fp, r2
 800d442:	b289      	uxth	r1, r1
 800d444:	fb0a 110b 	mla	r1, sl, fp, r1
 800d448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d44c:	f8d9 2000 	ldr.w	r2, [r9]
 800d450:	4461      	add	r1, ip
 800d452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d456:	fb0a c20b 	mla	r2, sl, fp, ip
 800d45a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d45e:	b289      	uxth	r1, r1
 800d460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d464:	4577      	cmp	r7, lr
 800d466:	f849 1b04 	str.w	r1, [r9], #4
 800d46a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d46e:	d8e2      	bhi.n	800d436 <__multiply+0xb2>
 800d470:	9a01      	ldr	r2, [sp, #4]
 800d472:	f845 c002 	str.w	ip, [r5, r2]
 800d476:	9a03      	ldr	r2, [sp, #12]
 800d478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d47c:	3304      	adds	r3, #4
 800d47e:	f1b9 0f00 	cmp.w	r9, #0
 800d482:	d020      	beq.n	800d4c6 <__multiply+0x142>
 800d484:	6829      	ldr	r1, [r5, #0]
 800d486:	f104 0c14 	add.w	ip, r4, #20
 800d48a:	46ae      	mov	lr, r5
 800d48c:	f04f 0a00 	mov.w	sl, #0
 800d490:	f8bc b000 	ldrh.w	fp, [ip]
 800d494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d498:	fb09 220b 	mla	r2, r9, fp, r2
 800d49c:	4492      	add	sl, r2
 800d49e:	b289      	uxth	r1, r1
 800d4a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d4a4:	f84e 1b04 	str.w	r1, [lr], #4
 800d4a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d4ac:	f8be 1000 	ldrh.w	r1, [lr]
 800d4b0:	0c12      	lsrs	r2, r2, #16
 800d4b2:	fb09 1102 	mla	r1, r9, r2, r1
 800d4b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d4ba:	4567      	cmp	r7, ip
 800d4bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4c0:	d8e6      	bhi.n	800d490 <__multiply+0x10c>
 800d4c2:	9a01      	ldr	r2, [sp, #4]
 800d4c4:	50a9      	str	r1, [r5, r2]
 800d4c6:	3504      	adds	r5, #4
 800d4c8:	e79a      	b.n	800d400 <__multiply+0x7c>
 800d4ca:	3e01      	subs	r6, #1
 800d4cc:	e79c      	b.n	800d408 <__multiply+0x84>
 800d4ce:	bf00      	nop
 800d4d0:	0800eb60 	.word	0x0800eb60
 800d4d4:	0800ec50 	.word	0x0800ec50

0800d4d8 <__pow5mult>:
 800d4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	4615      	mov	r5, r2
 800d4de:	f012 0203 	ands.w	r2, r2, #3
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	d007      	beq.n	800d4f8 <__pow5mult+0x20>
 800d4e8:	4c25      	ldr	r4, [pc, #148]	; (800d580 <__pow5mult+0xa8>)
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4f2:	f7ff fe51 	bl	800d198 <__multadd>
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	10ad      	asrs	r5, r5, #2
 800d4fa:	d03d      	beq.n	800d578 <__pow5mult+0xa0>
 800d4fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4fe:	b97c      	cbnz	r4, 800d520 <__pow5mult+0x48>
 800d500:	2010      	movs	r0, #16
 800d502:	f7fc f9a9 	bl	8009858 <malloc>
 800d506:	4602      	mov	r2, r0
 800d508:	6270      	str	r0, [r6, #36]	; 0x24
 800d50a:	b928      	cbnz	r0, 800d518 <__pow5mult+0x40>
 800d50c:	4b1d      	ldr	r3, [pc, #116]	; (800d584 <__pow5mult+0xac>)
 800d50e:	481e      	ldr	r0, [pc, #120]	; (800d588 <__pow5mult+0xb0>)
 800d510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d514:	f000 fdea 	bl	800e0ec <__assert_func>
 800d518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d51c:	6004      	str	r4, [r0, #0]
 800d51e:	60c4      	str	r4, [r0, #12]
 800d520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d528:	b94c      	cbnz	r4, 800d53e <__pow5mult+0x66>
 800d52a:	f240 2171 	movw	r1, #625	; 0x271
 800d52e:	4630      	mov	r0, r6
 800d530:	f7ff ff12 	bl	800d358 <__i2b>
 800d534:	2300      	movs	r3, #0
 800d536:	f8c8 0008 	str.w	r0, [r8, #8]
 800d53a:	4604      	mov	r4, r0
 800d53c:	6003      	str	r3, [r0, #0]
 800d53e:	f04f 0900 	mov.w	r9, #0
 800d542:	07eb      	lsls	r3, r5, #31
 800d544:	d50a      	bpl.n	800d55c <__pow5mult+0x84>
 800d546:	4639      	mov	r1, r7
 800d548:	4622      	mov	r2, r4
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ff1a 	bl	800d384 <__multiply>
 800d550:	4639      	mov	r1, r7
 800d552:	4680      	mov	r8, r0
 800d554:	4630      	mov	r0, r6
 800d556:	f7ff fdfd 	bl	800d154 <_Bfree>
 800d55a:	4647      	mov	r7, r8
 800d55c:	106d      	asrs	r5, r5, #1
 800d55e:	d00b      	beq.n	800d578 <__pow5mult+0xa0>
 800d560:	6820      	ldr	r0, [r4, #0]
 800d562:	b938      	cbnz	r0, 800d574 <__pow5mult+0x9c>
 800d564:	4622      	mov	r2, r4
 800d566:	4621      	mov	r1, r4
 800d568:	4630      	mov	r0, r6
 800d56a:	f7ff ff0b 	bl	800d384 <__multiply>
 800d56e:	6020      	str	r0, [r4, #0]
 800d570:	f8c0 9000 	str.w	r9, [r0]
 800d574:	4604      	mov	r4, r0
 800d576:	e7e4      	b.n	800d542 <__pow5mult+0x6a>
 800d578:	4638      	mov	r0, r7
 800d57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d57e:	bf00      	nop
 800d580:	0800eda0 	.word	0x0800eda0
 800d584:	0800eaee 	.word	0x0800eaee
 800d588:	0800ec50 	.word	0x0800ec50

0800d58c <__lshift>:
 800d58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	6849      	ldr	r1, [r1, #4]
 800d594:	6923      	ldr	r3, [r4, #16]
 800d596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	4607      	mov	r7, r0
 800d59e:	4691      	mov	r9, r2
 800d5a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5a4:	f108 0601 	add.w	r6, r8, #1
 800d5a8:	42b3      	cmp	r3, r6
 800d5aa:	db0b      	blt.n	800d5c4 <__lshift+0x38>
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	f7ff fd91 	bl	800d0d4 <_Balloc>
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	b948      	cbnz	r0, 800d5ca <__lshift+0x3e>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	4b2a      	ldr	r3, [pc, #168]	; (800d664 <__lshift+0xd8>)
 800d5ba:	482b      	ldr	r0, [pc, #172]	; (800d668 <__lshift+0xdc>)
 800d5bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5c0:	f000 fd94 	bl	800e0ec <__assert_func>
 800d5c4:	3101      	adds	r1, #1
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	e7ee      	b.n	800d5a8 <__lshift+0x1c>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f100 0114 	add.w	r1, r0, #20
 800d5d0:	f100 0210 	add.w	r2, r0, #16
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	4553      	cmp	r3, sl
 800d5d8:	db37      	blt.n	800d64a <__lshift+0xbe>
 800d5da:	6920      	ldr	r0, [r4, #16]
 800d5dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5e0:	f104 0314 	add.w	r3, r4, #20
 800d5e4:	f019 091f 	ands.w	r9, r9, #31
 800d5e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d5f0:	d02f      	beq.n	800d652 <__lshift+0xc6>
 800d5f2:	f1c9 0e20 	rsb	lr, r9, #32
 800d5f6:	468a      	mov	sl, r1
 800d5f8:	f04f 0c00 	mov.w	ip, #0
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	fa02 f209 	lsl.w	r2, r2, r9
 800d602:	ea42 020c 	orr.w	r2, r2, ip
 800d606:	f84a 2b04 	str.w	r2, [sl], #4
 800d60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d60e:	4298      	cmp	r0, r3
 800d610:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d614:	d8f2      	bhi.n	800d5fc <__lshift+0x70>
 800d616:	1b03      	subs	r3, r0, r4
 800d618:	3b15      	subs	r3, #21
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	3304      	adds	r3, #4
 800d620:	f104 0215 	add.w	r2, r4, #21
 800d624:	4290      	cmp	r0, r2
 800d626:	bf38      	it	cc
 800d628:	2304      	movcc	r3, #4
 800d62a:	f841 c003 	str.w	ip, [r1, r3]
 800d62e:	f1bc 0f00 	cmp.w	ip, #0
 800d632:	d001      	beq.n	800d638 <__lshift+0xac>
 800d634:	f108 0602 	add.w	r6, r8, #2
 800d638:	3e01      	subs	r6, #1
 800d63a:	4638      	mov	r0, r7
 800d63c:	612e      	str	r6, [r5, #16]
 800d63e:	4621      	mov	r1, r4
 800d640:	f7ff fd88 	bl	800d154 <_Bfree>
 800d644:	4628      	mov	r0, r5
 800d646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d64e:	3301      	adds	r3, #1
 800d650:	e7c1      	b.n	800d5d6 <__lshift+0x4a>
 800d652:	3904      	subs	r1, #4
 800d654:	f853 2b04 	ldr.w	r2, [r3], #4
 800d658:	f841 2f04 	str.w	r2, [r1, #4]!
 800d65c:	4298      	cmp	r0, r3
 800d65e:	d8f9      	bhi.n	800d654 <__lshift+0xc8>
 800d660:	e7ea      	b.n	800d638 <__lshift+0xac>
 800d662:	bf00      	nop
 800d664:	0800eb60 	.word	0x0800eb60
 800d668:	0800ec50 	.word	0x0800ec50

0800d66c <__mcmp>:
 800d66c:	b530      	push	{r4, r5, lr}
 800d66e:	6902      	ldr	r2, [r0, #16]
 800d670:	690c      	ldr	r4, [r1, #16]
 800d672:	1b12      	subs	r2, r2, r4
 800d674:	d10e      	bne.n	800d694 <__mcmp+0x28>
 800d676:	f100 0314 	add.w	r3, r0, #20
 800d67a:	3114      	adds	r1, #20
 800d67c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d68c:	42a5      	cmp	r5, r4
 800d68e:	d003      	beq.n	800d698 <__mcmp+0x2c>
 800d690:	d305      	bcc.n	800d69e <__mcmp+0x32>
 800d692:	2201      	movs	r2, #1
 800d694:	4610      	mov	r0, r2
 800d696:	bd30      	pop	{r4, r5, pc}
 800d698:	4283      	cmp	r3, r0
 800d69a:	d3f3      	bcc.n	800d684 <__mcmp+0x18>
 800d69c:	e7fa      	b.n	800d694 <__mcmp+0x28>
 800d69e:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a2:	e7f7      	b.n	800d694 <__mcmp+0x28>

0800d6a4 <__mdiff>:
 800d6a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	4690      	mov	r8, r2
 800d6b2:	f7ff ffdb 	bl	800d66c <__mcmp>
 800d6b6:	1e05      	subs	r5, r0, #0
 800d6b8:	d110      	bne.n	800d6dc <__mdiff+0x38>
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7ff fd09 	bl	800d0d4 <_Balloc>
 800d6c2:	b930      	cbnz	r0, 800d6d2 <__mdiff+0x2e>
 800d6c4:	4b3a      	ldr	r3, [pc, #232]	; (800d7b0 <__mdiff+0x10c>)
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	f240 2132 	movw	r1, #562	; 0x232
 800d6cc:	4839      	ldr	r0, [pc, #228]	; (800d7b4 <__mdiff+0x110>)
 800d6ce:	f000 fd0d 	bl	800e0ec <__assert_func>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6dc:	bfa4      	itt	ge
 800d6de:	4643      	movge	r3, r8
 800d6e0:	46a0      	movge	r8, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6e8:	bfa6      	itte	ge
 800d6ea:	461c      	movge	r4, r3
 800d6ec:	2500      	movge	r5, #0
 800d6ee:	2501      	movlt	r5, #1
 800d6f0:	f7ff fcf0 	bl	800d0d4 <_Balloc>
 800d6f4:	b920      	cbnz	r0, 800d700 <__mdiff+0x5c>
 800d6f6:	4b2e      	ldr	r3, [pc, #184]	; (800d7b0 <__mdiff+0x10c>)
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6fe:	e7e5      	b.n	800d6cc <__mdiff+0x28>
 800d700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d704:	6926      	ldr	r6, [r4, #16]
 800d706:	60c5      	str	r5, [r0, #12]
 800d708:	f104 0914 	add.w	r9, r4, #20
 800d70c:	f108 0514 	add.w	r5, r8, #20
 800d710:	f100 0e14 	add.w	lr, r0, #20
 800d714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d71c:	f108 0210 	add.w	r2, r8, #16
 800d720:	46f2      	mov	sl, lr
 800d722:	2100      	movs	r1, #0
 800d724:	f859 3b04 	ldr.w	r3, [r9], #4
 800d728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d72c:	fa1f f883 	uxth.w	r8, r3
 800d730:	fa11 f18b 	uxtah	r1, r1, fp
 800d734:	0c1b      	lsrs	r3, r3, #16
 800d736:	eba1 0808 	sub.w	r8, r1, r8
 800d73a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d73e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d742:	fa1f f888 	uxth.w	r8, r8
 800d746:	1419      	asrs	r1, r3, #16
 800d748:	454e      	cmp	r6, r9
 800d74a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d74e:	f84a 3b04 	str.w	r3, [sl], #4
 800d752:	d8e7      	bhi.n	800d724 <__mdiff+0x80>
 800d754:	1b33      	subs	r3, r6, r4
 800d756:	3b15      	subs	r3, #21
 800d758:	f023 0303 	bic.w	r3, r3, #3
 800d75c:	3304      	adds	r3, #4
 800d75e:	3415      	adds	r4, #21
 800d760:	42a6      	cmp	r6, r4
 800d762:	bf38      	it	cc
 800d764:	2304      	movcc	r3, #4
 800d766:	441d      	add	r5, r3
 800d768:	4473      	add	r3, lr
 800d76a:	469e      	mov	lr, r3
 800d76c:	462e      	mov	r6, r5
 800d76e:	4566      	cmp	r6, ip
 800d770:	d30e      	bcc.n	800d790 <__mdiff+0xec>
 800d772:	f10c 0203 	add.w	r2, ip, #3
 800d776:	1b52      	subs	r2, r2, r5
 800d778:	f022 0203 	bic.w	r2, r2, #3
 800d77c:	3d03      	subs	r5, #3
 800d77e:	45ac      	cmp	ip, r5
 800d780:	bf38      	it	cc
 800d782:	2200      	movcc	r2, #0
 800d784:	441a      	add	r2, r3
 800d786:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d78a:	b17b      	cbz	r3, 800d7ac <__mdiff+0x108>
 800d78c:	6107      	str	r7, [r0, #16]
 800d78e:	e7a3      	b.n	800d6d8 <__mdiff+0x34>
 800d790:	f856 8b04 	ldr.w	r8, [r6], #4
 800d794:	fa11 f288 	uxtah	r2, r1, r8
 800d798:	1414      	asrs	r4, r2, #16
 800d79a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d79e:	b292      	uxth	r2, r2
 800d7a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7a4:	f84e 2b04 	str.w	r2, [lr], #4
 800d7a8:	1421      	asrs	r1, r4, #16
 800d7aa:	e7e0      	b.n	800d76e <__mdiff+0xca>
 800d7ac:	3f01      	subs	r7, #1
 800d7ae:	e7ea      	b.n	800d786 <__mdiff+0xe2>
 800d7b0:	0800eb60 	.word	0x0800eb60
 800d7b4:	0800ec50 	.word	0x0800ec50

0800d7b8 <__ulp>:
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	ed8d 0b00 	vstr	d0, [sp]
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	4912      	ldr	r1, [pc, #72]	; (800d80c <__ulp+0x54>)
 800d7c2:	4019      	ands	r1, r3
 800d7c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	dd05      	ble.n	800d7d8 <__ulp+0x20>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	ec43 2b10 	vmov	d0, r2, r3
 800d7d4:	b002      	add	sp, #8
 800d7d6:	4770      	bx	lr
 800d7d8:	4249      	negs	r1, r1
 800d7da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d7de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d7e2:	f04f 0200 	mov.w	r2, #0
 800d7e6:	f04f 0300 	mov.w	r3, #0
 800d7ea:	da04      	bge.n	800d7f6 <__ulp+0x3e>
 800d7ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d7f0:	fa41 f300 	asr.w	r3, r1, r0
 800d7f4:	e7ec      	b.n	800d7d0 <__ulp+0x18>
 800d7f6:	f1a0 0114 	sub.w	r1, r0, #20
 800d7fa:	291e      	cmp	r1, #30
 800d7fc:	bfda      	itte	le
 800d7fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d802:	fa20 f101 	lsrle.w	r1, r0, r1
 800d806:	2101      	movgt	r1, #1
 800d808:	460a      	mov	r2, r1
 800d80a:	e7e1      	b.n	800d7d0 <__ulp+0x18>
 800d80c:	7ff00000 	.word	0x7ff00000

0800d810 <__b2d>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	6905      	ldr	r5, [r0, #16]
 800d814:	f100 0714 	add.w	r7, r0, #20
 800d818:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d81c:	1f2e      	subs	r6, r5, #4
 800d81e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d822:	4620      	mov	r0, r4
 800d824:	f7ff fd48 	bl	800d2b8 <__hi0bits>
 800d828:	f1c0 0320 	rsb	r3, r0, #32
 800d82c:	280a      	cmp	r0, #10
 800d82e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8ac <__b2d+0x9c>
 800d832:	600b      	str	r3, [r1, #0]
 800d834:	dc14      	bgt.n	800d860 <__b2d+0x50>
 800d836:	f1c0 0e0b 	rsb	lr, r0, #11
 800d83a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d83e:	42b7      	cmp	r7, r6
 800d840:	ea41 030c 	orr.w	r3, r1, ip
 800d844:	bf34      	ite	cc
 800d846:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d84a:	2100      	movcs	r1, #0
 800d84c:	3015      	adds	r0, #21
 800d84e:	fa04 f000 	lsl.w	r0, r4, r0
 800d852:	fa21 f10e 	lsr.w	r1, r1, lr
 800d856:	ea40 0201 	orr.w	r2, r0, r1
 800d85a:	ec43 2b10 	vmov	d0, r2, r3
 800d85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d860:	42b7      	cmp	r7, r6
 800d862:	bf3a      	itte	cc
 800d864:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d868:	f1a5 0608 	subcc.w	r6, r5, #8
 800d86c:	2100      	movcs	r1, #0
 800d86e:	380b      	subs	r0, #11
 800d870:	d017      	beq.n	800d8a2 <__b2d+0x92>
 800d872:	f1c0 0c20 	rsb	ip, r0, #32
 800d876:	fa04 f500 	lsl.w	r5, r4, r0
 800d87a:	42be      	cmp	r6, r7
 800d87c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d880:	ea45 0504 	orr.w	r5, r5, r4
 800d884:	bf8c      	ite	hi
 800d886:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d88a:	2400      	movls	r4, #0
 800d88c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d890:	fa01 f000 	lsl.w	r0, r1, r0
 800d894:	fa24 f40c 	lsr.w	r4, r4, ip
 800d898:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d89c:	ea40 0204 	orr.w	r2, r0, r4
 800d8a0:	e7db      	b.n	800d85a <__b2d+0x4a>
 800d8a2:	ea44 030c 	orr.w	r3, r4, ip
 800d8a6:	460a      	mov	r2, r1
 800d8a8:	e7d7      	b.n	800d85a <__b2d+0x4a>
 800d8aa:	bf00      	nop
 800d8ac:	3ff00000 	.word	0x3ff00000

0800d8b0 <__d2b>:
 800d8b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	4689      	mov	r9, r1
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	ec57 6b10 	vmov	r6, r7, d0
 800d8bc:	4690      	mov	r8, r2
 800d8be:	f7ff fc09 	bl	800d0d4 <_Balloc>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	b930      	cbnz	r0, 800d8d4 <__d2b+0x24>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	4b25      	ldr	r3, [pc, #148]	; (800d960 <__d2b+0xb0>)
 800d8ca:	4826      	ldr	r0, [pc, #152]	; (800d964 <__d2b+0xb4>)
 800d8cc:	f240 310a 	movw	r1, #778	; 0x30a
 800d8d0:	f000 fc0c 	bl	800e0ec <__assert_func>
 800d8d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8dc:	bb35      	cbnz	r5, 800d92c <__d2b+0x7c>
 800d8de:	2e00      	cmp	r6, #0
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	d028      	beq.n	800d936 <__d2b+0x86>
 800d8e4:	4668      	mov	r0, sp
 800d8e6:	9600      	str	r6, [sp, #0]
 800d8e8:	f7ff fd06 	bl	800d2f8 <__lo0bits>
 800d8ec:	9900      	ldr	r1, [sp, #0]
 800d8ee:	b300      	cbz	r0, 800d932 <__d2b+0x82>
 800d8f0:	9a01      	ldr	r2, [sp, #4]
 800d8f2:	f1c0 0320 	rsb	r3, r0, #32
 800d8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fa:	430b      	orrs	r3, r1
 800d8fc:	40c2      	lsrs	r2, r0
 800d8fe:	6163      	str	r3, [r4, #20]
 800d900:	9201      	str	r2, [sp, #4]
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	61a3      	str	r3, [r4, #24]
 800d906:	2b00      	cmp	r3, #0
 800d908:	bf14      	ite	ne
 800d90a:	2202      	movne	r2, #2
 800d90c:	2201      	moveq	r2, #1
 800d90e:	6122      	str	r2, [r4, #16]
 800d910:	b1d5      	cbz	r5, 800d948 <__d2b+0x98>
 800d912:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d916:	4405      	add	r5, r0
 800d918:	f8c9 5000 	str.w	r5, [r9]
 800d91c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d920:	f8c8 0000 	str.w	r0, [r8]
 800d924:	4620      	mov	r0, r4
 800d926:	b003      	add	sp, #12
 800d928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d92c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d930:	e7d5      	b.n	800d8de <__d2b+0x2e>
 800d932:	6161      	str	r1, [r4, #20]
 800d934:	e7e5      	b.n	800d902 <__d2b+0x52>
 800d936:	a801      	add	r0, sp, #4
 800d938:	f7ff fcde 	bl	800d2f8 <__lo0bits>
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	6163      	str	r3, [r4, #20]
 800d940:	2201      	movs	r2, #1
 800d942:	6122      	str	r2, [r4, #16]
 800d944:	3020      	adds	r0, #32
 800d946:	e7e3      	b.n	800d910 <__d2b+0x60>
 800d948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d94c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d950:	f8c9 0000 	str.w	r0, [r9]
 800d954:	6918      	ldr	r0, [r3, #16]
 800d956:	f7ff fcaf 	bl	800d2b8 <__hi0bits>
 800d95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d95e:	e7df      	b.n	800d920 <__d2b+0x70>
 800d960:	0800eb60 	.word	0x0800eb60
 800d964:	0800ec50 	.word	0x0800ec50

0800d968 <__ratio>:
 800d968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	4688      	mov	r8, r1
 800d96e:	4669      	mov	r1, sp
 800d970:	4681      	mov	r9, r0
 800d972:	f7ff ff4d 	bl	800d810 <__b2d>
 800d976:	a901      	add	r1, sp, #4
 800d978:	4640      	mov	r0, r8
 800d97a:	ec55 4b10 	vmov	r4, r5, d0
 800d97e:	f7ff ff47 	bl	800d810 <__b2d>
 800d982:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d986:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d98a:	eba3 0c02 	sub.w	ip, r3, r2
 800d98e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d992:	1a9b      	subs	r3, r3, r2
 800d994:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d998:	ec51 0b10 	vmov	r0, r1, d0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	bfd6      	itet	le
 800d9a0:	460a      	movle	r2, r1
 800d9a2:	462a      	movgt	r2, r5
 800d9a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9a8:	468b      	mov	fp, r1
 800d9aa:	462f      	mov	r7, r5
 800d9ac:	bfd4      	ite	le
 800d9ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	ee10 2a10 	vmov	r2, s0
 800d9bc:	465b      	mov	r3, fp
 800d9be:	4639      	mov	r1, r7
 800d9c0:	f7f2 ff1c 	bl	80007fc <__aeabi_ddiv>
 800d9c4:	ec41 0b10 	vmov	d0, r0, r1
 800d9c8:	b003      	add	sp, #12
 800d9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9ce <__copybits>:
 800d9ce:	3901      	subs	r1, #1
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	1149      	asrs	r1, r1, #5
 800d9d4:	6914      	ldr	r4, [r2, #16]
 800d9d6:	3101      	adds	r1, #1
 800d9d8:	f102 0314 	add.w	r3, r2, #20
 800d9dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9e4:	1f05      	subs	r5, r0, #4
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	d30c      	bcc.n	800da04 <__copybits+0x36>
 800d9ea:	1aa3      	subs	r3, r4, r2
 800d9ec:	3b11      	subs	r3, #17
 800d9ee:	f023 0303 	bic.w	r3, r3, #3
 800d9f2:	3211      	adds	r2, #17
 800d9f4:	42a2      	cmp	r2, r4
 800d9f6:	bf88      	it	hi
 800d9f8:	2300      	movhi	r3, #0
 800d9fa:	4418      	add	r0, r3
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4288      	cmp	r0, r1
 800da00:	d305      	bcc.n	800da0e <__copybits+0x40>
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	f853 6b04 	ldr.w	r6, [r3], #4
 800da08:	f845 6f04 	str.w	r6, [r5, #4]!
 800da0c:	e7eb      	b.n	800d9e6 <__copybits+0x18>
 800da0e:	f840 3b04 	str.w	r3, [r0], #4
 800da12:	e7f4      	b.n	800d9fe <__copybits+0x30>

0800da14 <__any_on>:
 800da14:	f100 0214 	add.w	r2, r0, #20
 800da18:	6900      	ldr	r0, [r0, #16]
 800da1a:	114b      	asrs	r3, r1, #5
 800da1c:	4298      	cmp	r0, r3
 800da1e:	b510      	push	{r4, lr}
 800da20:	db11      	blt.n	800da46 <__any_on+0x32>
 800da22:	dd0a      	ble.n	800da3a <__any_on+0x26>
 800da24:	f011 011f 	ands.w	r1, r1, #31
 800da28:	d007      	beq.n	800da3a <__any_on+0x26>
 800da2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da2e:	fa24 f001 	lsr.w	r0, r4, r1
 800da32:	fa00 f101 	lsl.w	r1, r0, r1
 800da36:	428c      	cmp	r4, r1
 800da38:	d10b      	bne.n	800da52 <__any_on+0x3e>
 800da3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da3e:	4293      	cmp	r3, r2
 800da40:	d803      	bhi.n	800da4a <__any_on+0x36>
 800da42:	2000      	movs	r0, #0
 800da44:	bd10      	pop	{r4, pc}
 800da46:	4603      	mov	r3, r0
 800da48:	e7f7      	b.n	800da3a <__any_on+0x26>
 800da4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da4e:	2900      	cmp	r1, #0
 800da50:	d0f5      	beq.n	800da3e <__any_on+0x2a>
 800da52:	2001      	movs	r0, #1
 800da54:	e7f6      	b.n	800da44 <__any_on+0x30>

0800da56 <_calloc_r>:
 800da56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da58:	fba1 2402 	umull	r2, r4, r1, r2
 800da5c:	b94c      	cbnz	r4, 800da72 <_calloc_r+0x1c>
 800da5e:	4611      	mov	r1, r2
 800da60:	9201      	str	r2, [sp, #4]
 800da62:	f7fb ff8b 	bl	800997c <_malloc_r>
 800da66:	9a01      	ldr	r2, [sp, #4]
 800da68:	4605      	mov	r5, r0
 800da6a:	b930      	cbnz	r0, 800da7a <_calloc_r+0x24>
 800da6c:	4628      	mov	r0, r5
 800da6e:	b003      	add	sp, #12
 800da70:	bd30      	pop	{r4, r5, pc}
 800da72:	220c      	movs	r2, #12
 800da74:	6002      	str	r2, [r0, #0]
 800da76:	2500      	movs	r5, #0
 800da78:	e7f8      	b.n	800da6c <_calloc_r+0x16>
 800da7a:	4621      	mov	r1, r4
 800da7c:	f7fb ff0a 	bl	8009894 <memset>
 800da80:	e7f4      	b.n	800da6c <_calloc_r+0x16>

0800da82 <__ssputs_r>:
 800da82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da86:	688e      	ldr	r6, [r1, #8]
 800da88:	429e      	cmp	r6, r3
 800da8a:	4682      	mov	sl, r0
 800da8c:	460c      	mov	r4, r1
 800da8e:	4690      	mov	r8, r2
 800da90:	461f      	mov	r7, r3
 800da92:	d838      	bhi.n	800db06 <__ssputs_r+0x84>
 800da94:	898a      	ldrh	r2, [r1, #12]
 800da96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da9a:	d032      	beq.n	800db02 <__ssputs_r+0x80>
 800da9c:	6825      	ldr	r5, [r4, #0]
 800da9e:	6909      	ldr	r1, [r1, #16]
 800daa0:	eba5 0901 	sub.w	r9, r5, r1
 800daa4:	6965      	ldr	r5, [r4, #20]
 800daa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daae:	3301      	adds	r3, #1
 800dab0:	444b      	add	r3, r9
 800dab2:	106d      	asrs	r5, r5, #1
 800dab4:	429d      	cmp	r5, r3
 800dab6:	bf38      	it	cc
 800dab8:	461d      	movcc	r5, r3
 800daba:	0553      	lsls	r3, r2, #21
 800dabc:	d531      	bpl.n	800db22 <__ssputs_r+0xa0>
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7fb ff5c 	bl	800997c <_malloc_r>
 800dac4:	4606      	mov	r6, r0
 800dac6:	b950      	cbnz	r0, 800dade <__ssputs_r+0x5c>
 800dac8:	230c      	movs	r3, #12
 800daca:	f8ca 3000 	str.w	r3, [sl]
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dad4:	81a3      	strh	r3, [r4, #12]
 800dad6:	f04f 30ff 	mov.w	r0, #4294967295
 800dada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dade:	6921      	ldr	r1, [r4, #16]
 800dae0:	464a      	mov	r2, r9
 800dae2:	f7fb fec9 	bl	8009878 <memcpy>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800daec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daf0:	81a3      	strh	r3, [r4, #12]
 800daf2:	6126      	str	r6, [r4, #16]
 800daf4:	6165      	str	r5, [r4, #20]
 800daf6:	444e      	add	r6, r9
 800daf8:	eba5 0509 	sub.w	r5, r5, r9
 800dafc:	6026      	str	r6, [r4, #0]
 800dafe:	60a5      	str	r5, [r4, #8]
 800db00:	463e      	mov	r6, r7
 800db02:	42be      	cmp	r6, r7
 800db04:	d900      	bls.n	800db08 <__ssputs_r+0x86>
 800db06:	463e      	mov	r6, r7
 800db08:	6820      	ldr	r0, [r4, #0]
 800db0a:	4632      	mov	r2, r6
 800db0c:	4641      	mov	r1, r8
 800db0e:	f000 fb61 	bl	800e1d4 <memmove>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	1b9b      	subs	r3, r3, r6
 800db16:	60a3      	str	r3, [r4, #8]
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	4433      	add	r3, r6
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	2000      	movs	r0, #0
 800db20:	e7db      	b.n	800dada <__ssputs_r+0x58>
 800db22:	462a      	mov	r2, r5
 800db24:	f000 fb70 	bl	800e208 <_realloc_r>
 800db28:	4606      	mov	r6, r0
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d1e1      	bne.n	800daf2 <__ssputs_r+0x70>
 800db2e:	6921      	ldr	r1, [r4, #16]
 800db30:	4650      	mov	r0, sl
 800db32:	f7fb feb7 	bl	80098a4 <_free_r>
 800db36:	e7c7      	b.n	800dac8 <__ssputs_r+0x46>

0800db38 <_svfiprintf_r>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	4698      	mov	r8, r3
 800db3e:	898b      	ldrh	r3, [r1, #12]
 800db40:	061b      	lsls	r3, r3, #24
 800db42:	b09d      	sub	sp, #116	; 0x74
 800db44:	4607      	mov	r7, r0
 800db46:	460d      	mov	r5, r1
 800db48:	4614      	mov	r4, r2
 800db4a:	d50e      	bpl.n	800db6a <_svfiprintf_r+0x32>
 800db4c:	690b      	ldr	r3, [r1, #16]
 800db4e:	b963      	cbnz	r3, 800db6a <_svfiprintf_r+0x32>
 800db50:	2140      	movs	r1, #64	; 0x40
 800db52:	f7fb ff13 	bl	800997c <_malloc_r>
 800db56:	6028      	str	r0, [r5, #0]
 800db58:	6128      	str	r0, [r5, #16]
 800db5a:	b920      	cbnz	r0, 800db66 <_svfiprintf_r+0x2e>
 800db5c:	230c      	movs	r3, #12
 800db5e:	603b      	str	r3, [r7, #0]
 800db60:	f04f 30ff 	mov.w	r0, #4294967295
 800db64:	e0d1      	b.n	800dd0a <_svfiprintf_r+0x1d2>
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	616b      	str	r3, [r5, #20]
 800db6a:	2300      	movs	r3, #0
 800db6c:	9309      	str	r3, [sp, #36]	; 0x24
 800db6e:	2320      	movs	r3, #32
 800db70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db74:	f8cd 800c 	str.w	r8, [sp, #12]
 800db78:	2330      	movs	r3, #48	; 0x30
 800db7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd24 <_svfiprintf_r+0x1ec>
 800db7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db82:	f04f 0901 	mov.w	r9, #1
 800db86:	4623      	mov	r3, r4
 800db88:	469a      	mov	sl, r3
 800db8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8e:	b10a      	cbz	r2, 800db94 <_svfiprintf_r+0x5c>
 800db90:	2a25      	cmp	r2, #37	; 0x25
 800db92:	d1f9      	bne.n	800db88 <_svfiprintf_r+0x50>
 800db94:	ebba 0b04 	subs.w	fp, sl, r4
 800db98:	d00b      	beq.n	800dbb2 <_svfiprintf_r+0x7a>
 800db9a:	465b      	mov	r3, fp
 800db9c:	4622      	mov	r2, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	4638      	mov	r0, r7
 800dba2:	f7ff ff6e 	bl	800da82 <__ssputs_r>
 800dba6:	3001      	adds	r0, #1
 800dba8:	f000 80aa 	beq.w	800dd00 <_svfiprintf_r+0x1c8>
 800dbac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbae:	445a      	add	r2, fp
 800dbb0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80a2 	beq.w	800dd00 <_svfiprintf_r+0x1c8>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc6:	f10a 0a01 	add.w	sl, sl, #1
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	9307      	str	r3, [sp, #28]
 800dbce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd4:	4654      	mov	r4, sl
 800dbd6:	2205      	movs	r2, #5
 800dbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbdc:	4851      	ldr	r0, [pc, #324]	; (800dd24 <_svfiprintf_r+0x1ec>)
 800dbde:	f7f2 fad7 	bl	8000190 <memchr>
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	b9d8      	cbnz	r0, 800dc1e <_svfiprintf_r+0xe6>
 800dbe6:	06d0      	lsls	r0, r2, #27
 800dbe8:	bf44      	itt	mi
 800dbea:	2320      	movmi	r3, #32
 800dbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf0:	0711      	lsls	r1, r2, #28
 800dbf2:	bf44      	itt	mi
 800dbf4:	232b      	movmi	r3, #43	; 0x2b
 800dbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800dc00:	d015      	beq.n	800dc2e <_svfiprintf_r+0xf6>
 800dc02:	9a07      	ldr	r2, [sp, #28]
 800dc04:	4654      	mov	r4, sl
 800dc06:	2000      	movs	r0, #0
 800dc08:	f04f 0c0a 	mov.w	ip, #10
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc12:	3b30      	subs	r3, #48	; 0x30
 800dc14:	2b09      	cmp	r3, #9
 800dc16:	d94e      	bls.n	800dcb6 <_svfiprintf_r+0x17e>
 800dc18:	b1b0      	cbz	r0, 800dc48 <_svfiprintf_r+0x110>
 800dc1a:	9207      	str	r2, [sp, #28]
 800dc1c:	e014      	b.n	800dc48 <_svfiprintf_r+0x110>
 800dc1e:	eba0 0308 	sub.w	r3, r0, r8
 800dc22:	fa09 f303 	lsl.w	r3, r9, r3
 800dc26:	4313      	orrs	r3, r2
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	46a2      	mov	sl, r4
 800dc2c:	e7d2      	b.n	800dbd4 <_svfiprintf_r+0x9c>
 800dc2e:	9b03      	ldr	r3, [sp, #12]
 800dc30:	1d19      	adds	r1, r3, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	9103      	str	r1, [sp, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfbb      	ittet	lt
 800dc3a:	425b      	neglt	r3, r3
 800dc3c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc40:	9307      	strge	r3, [sp, #28]
 800dc42:	9307      	strlt	r3, [sp, #28]
 800dc44:	bfb8      	it	lt
 800dc46:	9204      	strlt	r2, [sp, #16]
 800dc48:	7823      	ldrb	r3, [r4, #0]
 800dc4a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc4c:	d10c      	bne.n	800dc68 <_svfiprintf_r+0x130>
 800dc4e:	7863      	ldrb	r3, [r4, #1]
 800dc50:	2b2a      	cmp	r3, #42	; 0x2a
 800dc52:	d135      	bne.n	800dcc0 <_svfiprintf_r+0x188>
 800dc54:	9b03      	ldr	r3, [sp, #12]
 800dc56:	1d1a      	adds	r2, r3, #4
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	9203      	str	r2, [sp, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bfb8      	it	lt
 800dc60:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc64:	3402      	adds	r4, #2
 800dc66:	9305      	str	r3, [sp, #20]
 800dc68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd34 <_svfiprintf_r+0x1fc>
 800dc6c:	7821      	ldrb	r1, [r4, #0]
 800dc6e:	2203      	movs	r2, #3
 800dc70:	4650      	mov	r0, sl
 800dc72:	f7f2 fa8d 	bl	8000190 <memchr>
 800dc76:	b140      	cbz	r0, 800dc8a <_svfiprintf_r+0x152>
 800dc78:	2340      	movs	r3, #64	; 0x40
 800dc7a:	eba0 000a 	sub.w	r0, r0, sl
 800dc7e:	fa03 f000 	lsl.w	r0, r3, r0
 800dc82:	9b04      	ldr	r3, [sp, #16]
 800dc84:	4303      	orrs	r3, r0
 800dc86:	3401      	adds	r4, #1
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8e:	4826      	ldr	r0, [pc, #152]	; (800dd28 <_svfiprintf_r+0x1f0>)
 800dc90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc94:	2206      	movs	r2, #6
 800dc96:	f7f2 fa7b 	bl	8000190 <memchr>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d038      	beq.n	800dd10 <_svfiprintf_r+0x1d8>
 800dc9e:	4b23      	ldr	r3, [pc, #140]	; (800dd2c <_svfiprintf_r+0x1f4>)
 800dca0:	bb1b      	cbnz	r3, 800dcea <_svfiprintf_r+0x1b2>
 800dca2:	9b03      	ldr	r3, [sp, #12]
 800dca4:	3307      	adds	r3, #7
 800dca6:	f023 0307 	bic.w	r3, r3, #7
 800dcaa:	3308      	adds	r3, #8
 800dcac:	9303      	str	r3, [sp, #12]
 800dcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb0:	4433      	add	r3, r6
 800dcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb4:	e767      	b.n	800db86 <_svfiprintf_r+0x4e>
 800dcb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcba:	460c      	mov	r4, r1
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	e7a5      	b.n	800dc0c <_svfiprintf_r+0xd4>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	3401      	adds	r4, #1
 800dcc4:	9305      	str	r3, [sp, #20]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	f04f 0c0a 	mov.w	ip, #10
 800dccc:	4620      	mov	r0, r4
 800dcce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd2:	3a30      	subs	r2, #48	; 0x30
 800dcd4:	2a09      	cmp	r2, #9
 800dcd6:	d903      	bls.n	800dce0 <_svfiprintf_r+0x1a8>
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0c5      	beq.n	800dc68 <_svfiprintf_r+0x130>
 800dcdc:	9105      	str	r1, [sp, #20]
 800dcde:	e7c3      	b.n	800dc68 <_svfiprintf_r+0x130>
 800dce0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dce4:	4604      	mov	r4, r0
 800dce6:	2301      	movs	r3, #1
 800dce8:	e7f0      	b.n	800dccc <_svfiprintf_r+0x194>
 800dcea:	ab03      	add	r3, sp, #12
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	462a      	mov	r2, r5
 800dcf0:	4b0f      	ldr	r3, [pc, #60]	; (800dd30 <_svfiprintf_r+0x1f8>)
 800dcf2:	a904      	add	r1, sp, #16
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	f7fb ff55 	bl	8009ba4 <_printf_float>
 800dcfa:	1c42      	adds	r2, r0, #1
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	d1d6      	bne.n	800dcae <_svfiprintf_r+0x176>
 800dd00:	89ab      	ldrh	r3, [r5, #12]
 800dd02:	065b      	lsls	r3, r3, #25
 800dd04:	f53f af2c 	bmi.w	800db60 <_svfiprintf_r+0x28>
 800dd08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd0a:	b01d      	add	sp, #116	; 0x74
 800dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd10:	ab03      	add	r3, sp, #12
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	462a      	mov	r2, r5
 800dd16:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <_svfiprintf_r+0x1f8>)
 800dd18:	a904      	add	r1, sp, #16
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	f7fc f9e6 	bl	800a0ec <_printf_i>
 800dd20:	e7eb      	b.n	800dcfa <_svfiprintf_r+0x1c2>
 800dd22:	bf00      	nop
 800dd24:	0800edac 	.word	0x0800edac
 800dd28:	0800edb6 	.word	0x0800edb6
 800dd2c:	08009ba5 	.word	0x08009ba5
 800dd30:	0800da83 	.word	0x0800da83
 800dd34:	0800edb2 	.word	0x0800edb2

0800dd38 <__sfputc_r>:
 800dd38:	6893      	ldr	r3, [r2, #8]
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	b410      	push	{r4}
 800dd40:	6093      	str	r3, [r2, #8]
 800dd42:	da08      	bge.n	800dd56 <__sfputc_r+0x1e>
 800dd44:	6994      	ldr	r4, [r2, #24]
 800dd46:	42a3      	cmp	r3, r4
 800dd48:	db01      	blt.n	800dd4e <__sfputc_r+0x16>
 800dd4a:	290a      	cmp	r1, #10
 800dd4c:	d103      	bne.n	800dd56 <__sfputc_r+0x1e>
 800dd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd52:	f7fd bcd5 	b.w	800b700 <__swbuf_r>
 800dd56:	6813      	ldr	r3, [r2, #0]
 800dd58:	1c58      	adds	r0, r3, #1
 800dd5a:	6010      	str	r0, [r2, #0]
 800dd5c:	7019      	strb	r1, [r3, #0]
 800dd5e:	4608      	mov	r0, r1
 800dd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <__sfputs_r>:
 800dd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd68:	4606      	mov	r6, r0
 800dd6a:	460f      	mov	r7, r1
 800dd6c:	4614      	mov	r4, r2
 800dd6e:	18d5      	adds	r5, r2, r3
 800dd70:	42ac      	cmp	r4, r5
 800dd72:	d101      	bne.n	800dd78 <__sfputs_r+0x12>
 800dd74:	2000      	movs	r0, #0
 800dd76:	e007      	b.n	800dd88 <__sfputs_r+0x22>
 800dd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7c:	463a      	mov	r2, r7
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7ff ffda 	bl	800dd38 <__sfputc_r>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d1f3      	bne.n	800dd70 <__sfputs_r+0xa>
 800dd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd8c <_vfiprintf_r>:
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	460d      	mov	r5, r1
 800dd92:	b09d      	sub	sp, #116	; 0x74
 800dd94:	4614      	mov	r4, r2
 800dd96:	4698      	mov	r8, r3
 800dd98:	4606      	mov	r6, r0
 800dd9a:	b118      	cbz	r0, 800dda4 <_vfiprintf_r+0x18>
 800dd9c:	6983      	ldr	r3, [r0, #24]
 800dd9e:	b90b      	cbnz	r3, 800dda4 <_vfiprintf_r+0x18>
 800dda0:	f7fe fd02 	bl	800c7a8 <__sinit>
 800dda4:	4b89      	ldr	r3, [pc, #548]	; (800dfcc <_vfiprintf_r+0x240>)
 800dda6:	429d      	cmp	r5, r3
 800dda8:	d11b      	bne.n	800dde2 <_vfiprintf_r+0x56>
 800ddaa:	6875      	ldr	r5, [r6, #4]
 800ddac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddae:	07d9      	lsls	r1, r3, #31
 800ddb0:	d405      	bmi.n	800ddbe <_vfiprintf_r+0x32>
 800ddb2:	89ab      	ldrh	r3, [r5, #12]
 800ddb4:	059a      	lsls	r2, r3, #22
 800ddb6:	d402      	bmi.n	800ddbe <_vfiprintf_r+0x32>
 800ddb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddba:	f7ff f906 	bl	800cfca <__retarget_lock_acquire_recursive>
 800ddbe:	89ab      	ldrh	r3, [r5, #12]
 800ddc0:	071b      	lsls	r3, r3, #28
 800ddc2:	d501      	bpl.n	800ddc8 <_vfiprintf_r+0x3c>
 800ddc4:	692b      	ldr	r3, [r5, #16]
 800ddc6:	b9eb      	cbnz	r3, 800de04 <_vfiprintf_r+0x78>
 800ddc8:	4629      	mov	r1, r5
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7fd fcea 	bl	800b7a4 <__swsetup_r>
 800ddd0:	b1c0      	cbz	r0, 800de04 <_vfiprintf_r+0x78>
 800ddd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddd4:	07dc      	lsls	r4, r3, #31
 800ddd6:	d50e      	bpl.n	800ddf6 <_vfiprintf_r+0x6a>
 800ddd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dddc:	b01d      	add	sp, #116	; 0x74
 800ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde2:	4b7b      	ldr	r3, [pc, #492]	; (800dfd0 <_vfiprintf_r+0x244>)
 800dde4:	429d      	cmp	r5, r3
 800dde6:	d101      	bne.n	800ddec <_vfiprintf_r+0x60>
 800dde8:	68b5      	ldr	r5, [r6, #8]
 800ddea:	e7df      	b.n	800ddac <_vfiprintf_r+0x20>
 800ddec:	4b79      	ldr	r3, [pc, #484]	; (800dfd4 <_vfiprintf_r+0x248>)
 800ddee:	429d      	cmp	r5, r3
 800ddf0:	bf08      	it	eq
 800ddf2:	68f5      	ldreq	r5, [r6, #12]
 800ddf4:	e7da      	b.n	800ddac <_vfiprintf_r+0x20>
 800ddf6:	89ab      	ldrh	r3, [r5, #12]
 800ddf8:	0598      	lsls	r0, r3, #22
 800ddfa:	d4ed      	bmi.n	800ddd8 <_vfiprintf_r+0x4c>
 800ddfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddfe:	f7ff f8e5 	bl	800cfcc <__retarget_lock_release_recursive>
 800de02:	e7e9      	b.n	800ddd8 <_vfiprintf_r+0x4c>
 800de04:	2300      	movs	r3, #0
 800de06:	9309      	str	r3, [sp, #36]	; 0x24
 800de08:	2320      	movs	r3, #32
 800de0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de12:	2330      	movs	r3, #48	; 0x30
 800de14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfd8 <_vfiprintf_r+0x24c>
 800de18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de1c:	f04f 0901 	mov.w	r9, #1
 800de20:	4623      	mov	r3, r4
 800de22:	469a      	mov	sl, r3
 800de24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de28:	b10a      	cbz	r2, 800de2e <_vfiprintf_r+0xa2>
 800de2a:	2a25      	cmp	r2, #37	; 0x25
 800de2c:	d1f9      	bne.n	800de22 <_vfiprintf_r+0x96>
 800de2e:	ebba 0b04 	subs.w	fp, sl, r4
 800de32:	d00b      	beq.n	800de4c <_vfiprintf_r+0xc0>
 800de34:	465b      	mov	r3, fp
 800de36:	4622      	mov	r2, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f7ff ff93 	bl	800dd66 <__sfputs_r>
 800de40:	3001      	adds	r0, #1
 800de42:	f000 80aa 	beq.w	800df9a <_vfiprintf_r+0x20e>
 800de46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de48:	445a      	add	r2, fp
 800de4a:	9209      	str	r2, [sp, #36]	; 0x24
 800de4c:	f89a 3000 	ldrb.w	r3, [sl]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 80a2 	beq.w	800df9a <_vfiprintf_r+0x20e>
 800de56:	2300      	movs	r3, #0
 800de58:	f04f 32ff 	mov.w	r2, #4294967295
 800de5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de60:	f10a 0a01 	add.w	sl, sl, #1
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	9307      	str	r3, [sp, #28]
 800de68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de6c:	931a      	str	r3, [sp, #104]	; 0x68
 800de6e:	4654      	mov	r4, sl
 800de70:	2205      	movs	r2, #5
 800de72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de76:	4858      	ldr	r0, [pc, #352]	; (800dfd8 <_vfiprintf_r+0x24c>)
 800de78:	f7f2 f98a 	bl	8000190 <memchr>
 800de7c:	9a04      	ldr	r2, [sp, #16]
 800de7e:	b9d8      	cbnz	r0, 800deb8 <_vfiprintf_r+0x12c>
 800de80:	06d1      	lsls	r1, r2, #27
 800de82:	bf44      	itt	mi
 800de84:	2320      	movmi	r3, #32
 800de86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de8a:	0713      	lsls	r3, r2, #28
 800de8c:	bf44      	itt	mi
 800de8e:	232b      	movmi	r3, #43	; 0x2b
 800de90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de94:	f89a 3000 	ldrb.w	r3, [sl]
 800de98:	2b2a      	cmp	r3, #42	; 0x2a
 800de9a:	d015      	beq.n	800dec8 <_vfiprintf_r+0x13c>
 800de9c:	9a07      	ldr	r2, [sp, #28]
 800de9e:	4654      	mov	r4, sl
 800dea0:	2000      	movs	r0, #0
 800dea2:	f04f 0c0a 	mov.w	ip, #10
 800dea6:	4621      	mov	r1, r4
 800dea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deac:	3b30      	subs	r3, #48	; 0x30
 800deae:	2b09      	cmp	r3, #9
 800deb0:	d94e      	bls.n	800df50 <_vfiprintf_r+0x1c4>
 800deb2:	b1b0      	cbz	r0, 800dee2 <_vfiprintf_r+0x156>
 800deb4:	9207      	str	r2, [sp, #28]
 800deb6:	e014      	b.n	800dee2 <_vfiprintf_r+0x156>
 800deb8:	eba0 0308 	sub.w	r3, r0, r8
 800debc:	fa09 f303 	lsl.w	r3, r9, r3
 800dec0:	4313      	orrs	r3, r2
 800dec2:	9304      	str	r3, [sp, #16]
 800dec4:	46a2      	mov	sl, r4
 800dec6:	e7d2      	b.n	800de6e <_vfiprintf_r+0xe2>
 800dec8:	9b03      	ldr	r3, [sp, #12]
 800deca:	1d19      	adds	r1, r3, #4
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	9103      	str	r1, [sp, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	bfbb      	ittet	lt
 800ded4:	425b      	neglt	r3, r3
 800ded6:	f042 0202 	orrlt.w	r2, r2, #2
 800deda:	9307      	strge	r3, [sp, #28]
 800dedc:	9307      	strlt	r3, [sp, #28]
 800dede:	bfb8      	it	lt
 800dee0:	9204      	strlt	r2, [sp, #16]
 800dee2:	7823      	ldrb	r3, [r4, #0]
 800dee4:	2b2e      	cmp	r3, #46	; 0x2e
 800dee6:	d10c      	bne.n	800df02 <_vfiprintf_r+0x176>
 800dee8:	7863      	ldrb	r3, [r4, #1]
 800deea:	2b2a      	cmp	r3, #42	; 0x2a
 800deec:	d135      	bne.n	800df5a <_vfiprintf_r+0x1ce>
 800deee:	9b03      	ldr	r3, [sp, #12]
 800def0:	1d1a      	adds	r2, r3, #4
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	9203      	str	r2, [sp, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	bfb8      	it	lt
 800defa:	f04f 33ff 	movlt.w	r3, #4294967295
 800defe:	3402      	adds	r4, #2
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfe8 <_vfiprintf_r+0x25c>
 800df06:	7821      	ldrb	r1, [r4, #0]
 800df08:	2203      	movs	r2, #3
 800df0a:	4650      	mov	r0, sl
 800df0c:	f7f2 f940 	bl	8000190 <memchr>
 800df10:	b140      	cbz	r0, 800df24 <_vfiprintf_r+0x198>
 800df12:	2340      	movs	r3, #64	; 0x40
 800df14:	eba0 000a 	sub.w	r0, r0, sl
 800df18:	fa03 f000 	lsl.w	r0, r3, r0
 800df1c:	9b04      	ldr	r3, [sp, #16]
 800df1e:	4303      	orrs	r3, r0
 800df20:	3401      	adds	r4, #1
 800df22:	9304      	str	r3, [sp, #16]
 800df24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df28:	482c      	ldr	r0, [pc, #176]	; (800dfdc <_vfiprintf_r+0x250>)
 800df2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df2e:	2206      	movs	r2, #6
 800df30:	f7f2 f92e 	bl	8000190 <memchr>
 800df34:	2800      	cmp	r0, #0
 800df36:	d03f      	beq.n	800dfb8 <_vfiprintf_r+0x22c>
 800df38:	4b29      	ldr	r3, [pc, #164]	; (800dfe0 <_vfiprintf_r+0x254>)
 800df3a:	bb1b      	cbnz	r3, 800df84 <_vfiprintf_r+0x1f8>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	3307      	adds	r3, #7
 800df40:	f023 0307 	bic.w	r3, r3, #7
 800df44:	3308      	adds	r3, #8
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4a:	443b      	add	r3, r7
 800df4c:	9309      	str	r3, [sp, #36]	; 0x24
 800df4e:	e767      	b.n	800de20 <_vfiprintf_r+0x94>
 800df50:	fb0c 3202 	mla	r2, ip, r2, r3
 800df54:	460c      	mov	r4, r1
 800df56:	2001      	movs	r0, #1
 800df58:	e7a5      	b.n	800dea6 <_vfiprintf_r+0x11a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	3401      	adds	r4, #1
 800df5e:	9305      	str	r3, [sp, #20]
 800df60:	4619      	mov	r1, r3
 800df62:	f04f 0c0a 	mov.w	ip, #10
 800df66:	4620      	mov	r0, r4
 800df68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df6c:	3a30      	subs	r2, #48	; 0x30
 800df6e:	2a09      	cmp	r2, #9
 800df70:	d903      	bls.n	800df7a <_vfiprintf_r+0x1ee>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0c5      	beq.n	800df02 <_vfiprintf_r+0x176>
 800df76:	9105      	str	r1, [sp, #20]
 800df78:	e7c3      	b.n	800df02 <_vfiprintf_r+0x176>
 800df7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df7e:	4604      	mov	r4, r0
 800df80:	2301      	movs	r3, #1
 800df82:	e7f0      	b.n	800df66 <_vfiprintf_r+0x1da>
 800df84:	ab03      	add	r3, sp, #12
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	462a      	mov	r2, r5
 800df8a:	4b16      	ldr	r3, [pc, #88]	; (800dfe4 <_vfiprintf_r+0x258>)
 800df8c:	a904      	add	r1, sp, #16
 800df8e:	4630      	mov	r0, r6
 800df90:	f7fb fe08 	bl	8009ba4 <_printf_float>
 800df94:	4607      	mov	r7, r0
 800df96:	1c78      	adds	r0, r7, #1
 800df98:	d1d6      	bne.n	800df48 <_vfiprintf_r+0x1bc>
 800df9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df9c:	07d9      	lsls	r1, r3, #31
 800df9e:	d405      	bmi.n	800dfac <_vfiprintf_r+0x220>
 800dfa0:	89ab      	ldrh	r3, [r5, #12]
 800dfa2:	059a      	lsls	r2, r3, #22
 800dfa4:	d402      	bmi.n	800dfac <_vfiprintf_r+0x220>
 800dfa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfa8:	f7ff f810 	bl	800cfcc <__retarget_lock_release_recursive>
 800dfac:	89ab      	ldrh	r3, [r5, #12]
 800dfae:	065b      	lsls	r3, r3, #25
 800dfb0:	f53f af12 	bmi.w	800ddd8 <_vfiprintf_r+0x4c>
 800dfb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfb6:	e711      	b.n	800dddc <_vfiprintf_r+0x50>
 800dfb8:	ab03      	add	r3, sp, #12
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	462a      	mov	r2, r5
 800dfbe:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <_vfiprintf_r+0x258>)
 800dfc0:	a904      	add	r1, sp, #16
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7fc f892 	bl	800a0ec <_printf_i>
 800dfc8:	e7e4      	b.n	800df94 <_vfiprintf_r+0x208>
 800dfca:	bf00      	nop
 800dfcc:	0800eb94 	.word	0x0800eb94
 800dfd0:	0800ebb4 	.word	0x0800ebb4
 800dfd4:	0800eb74 	.word	0x0800eb74
 800dfd8:	0800edac 	.word	0x0800edac
 800dfdc:	0800edb6 	.word	0x0800edb6
 800dfe0:	08009ba5 	.word	0x08009ba5
 800dfe4:	0800dd67 	.word	0x0800dd67
 800dfe8:	0800edb2 	.word	0x0800edb2
 800dfec:	00000000 	.word	0x00000000

0800dff0 <nan>:
 800dff0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dff8 <nan+0x8>
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	00000000 	.word	0x00000000
 800dffc:	7ff80000 	.word	0x7ff80000

0800e000 <__sread>:
 800e000:	b510      	push	{r4, lr}
 800e002:	460c      	mov	r4, r1
 800e004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e008:	f000 f92e 	bl	800e268 <_read_r>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	bfab      	itete	ge
 800e010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e012:	89a3      	ldrhlt	r3, [r4, #12]
 800e014:	181b      	addge	r3, r3, r0
 800e016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e01a:	bfac      	ite	ge
 800e01c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e01e:	81a3      	strhlt	r3, [r4, #12]
 800e020:	bd10      	pop	{r4, pc}

0800e022 <__swrite>:
 800e022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e026:	461f      	mov	r7, r3
 800e028:	898b      	ldrh	r3, [r1, #12]
 800e02a:	05db      	lsls	r3, r3, #23
 800e02c:	4605      	mov	r5, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	4616      	mov	r6, r2
 800e032:	d505      	bpl.n	800e040 <__swrite+0x1e>
 800e034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e038:	2302      	movs	r3, #2
 800e03a:	2200      	movs	r2, #0
 800e03c:	f000 f8b8 	bl	800e1b0 <_lseek_r>
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e04a:	81a3      	strh	r3, [r4, #12]
 800e04c:	4632      	mov	r2, r6
 800e04e:	463b      	mov	r3, r7
 800e050:	4628      	mov	r0, r5
 800e052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e056:	f000 b837 	b.w	800e0c8 <_write_r>

0800e05a <__sseek>:
 800e05a:	b510      	push	{r4, lr}
 800e05c:	460c      	mov	r4, r1
 800e05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e062:	f000 f8a5 	bl	800e1b0 <_lseek_r>
 800e066:	1c43      	adds	r3, r0, #1
 800e068:	89a3      	ldrh	r3, [r4, #12]
 800e06a:	bf15      	itete	ne
 800e06c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e076:	81a3      	strheq	r3, [r4, #12]
 800e078:	bf18      	it	ne
 800e07a:	81a3      	strhne	r3, [r4, #12]
 800e07c:	bd10      	pop	{r4, pc}

0800e07e <__sclose>:
 800e07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e082:	f000 b851 	b.w	800e128 <_close_r>

0800e086 <strncmp>:
 800e086:	b510      	push	{r4, lr}
 800e088:	b17a      	cbz	r2, 800e0aa <strncmp+0x24>
 800e08a:	4603      	mov	r3, r0
 800e08c:	3901      	subs	r1, #1
 800e08e:	1884      	adds	r4, r0, r2
 800e090:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e094:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e098:	4290      	cmp	r0, r2
 800e09a:	d101      	bne.n	800e0a0 <strncmp+0x1a>
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	d101      	bne.n	800e0a4 <strncmp+0x1e>
 800e0a0:	1a80      	subs	r0, r0, r2
 800e0a2:	bd10      	pop	{r4, pc}
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d1f3      	bne.n	800e090 <strncmp+0xa>
 800e0a8:	e7fa      	b.n	800e0a0 <strncmp+0x1a>
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	e7f9      	b.n	800e0a2 <strncmp+0x1c>

0800e0ae <__ascii_wctomb>:
 800e0ae:	b149      	cbz	r1, 800e0c4 <__ascii_wctomb+0x16>
 800e0b0:	2aff      	cmp	r2, #255	; 0xff
 800e0b2:	bf85      	ittet	hi
 800e0b4:	238a      	movhi	r3, #138	; 0x8a
 800e0b6:	6003      	strhi	r3, [r0, #0]
 800e0b8:	700a      	strbls	r2, [r1, #0]
 800e0ba:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0be:	bf98      	it	ls
 800e0c0:	2001      	movls	r0, #1
 800e0c2:	4770      	bx	lr
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	4770      	bx	lr

0800e0c8 <_write_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d07      	ldr	r5, [pc, #28]	; (800e0e8 <_write_r+0x20>)
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	602a      	str	r2, [r5, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f7f5 fe2f 	bl	8003d3a <_write>
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	d102      	bne.n	800e0e6 <_write_r+0x1e>
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	b103      	cbz	r3, 800e0e6 <_write_r+0x1e>
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
 800e0e8:	20000814 	.word	0x20000814

0800e0ec <__assert_func>:
 800e0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0ee:	4614      	mov	r4, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4b09      	ldr	r3, [pc, #36]	; (800e118 <__assert_func+0x2c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	68d8      	ldr	r0, [r3, #12]
 800e0fa:	b14c      	cbz	r4, 800e110 <__assert_func+0x24>
 800e0fc:	4b07      	ldr	r3, [pc, #28]	; (800e11c <__assert_func+0x30>)
 800e0fe:	9100      	str	r1, [sp, #0]
 800e100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e104:	4906      	ldr	r1, [pc, #24]	; (800e120 <__assert_func+0x34>)
 800e106:	462b      	mov	r3, r5
 800e108:	f000 f81e 	bl	800e148 <fiprintf>
 800e10c:	f000 f8be 	bl	800e28c <abort>
 800e110:	4b04      	ldr	r3, [pc, #16]	; (800e124 <__assert_func+0x38>)
 800e112:	461c      	mov	r4, r3
 800e114:	e7f3      	b.n	800e0fe <__assert_func+0x12>
 800e116:	bf00      	nop
 800e118:	2000005c 	.word	0x2000005c
 800e11c:	0800edbd 	.word	0x0800edbd
 800e120:	0800edca 	.word	0x0800edca
 800e124:	0800edf8 	.word	0x0800edf8

0800e128 <_close_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4d06      	ldr	r5, [pc, #24]	; (800e144 <_close_r+0x1c>)
 800e12c:	2300      	movs	r3, #0
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	602b      	str	r3, [r5, #0]
 800e134:	f7f5 fe1d 	bl	8003d72 <_close>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_close_r+0x1a>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_close_r+0x1a>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	20000814 	.word	0x20000814

0800e148 <fiprintf>:
 800e148:	b40e      	push	{r1, r2, r3}
 800e14a:	b503      	push	{r0, r1, lr}
 800e14c:	4601      	mov	r1, r0
 800e14e:	ab03      	add	r3, sp, #12
 800e150:	4805      	ldr	r0, [pc, #20]	; (800e168 <fiprintf+0x20>)
 800e152:	f853 2b04 	ldr.w	r2, [r3], #4
 800e156:	6800      	ldr	r0, [r0, #0]
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	f7ff fe17 	bl	800dd8c <_vfiprintf_r>
 800e15e:	b002      	add	sp, #8
 800e160:	f85d eb04 	ldr.w	lr, [sp], #4
 800e164:	b003      	add	sp, #12
 800e166:	4770      	bx	lr
 800e168:	2000005c 	.word	0x2000005c

0800e16c <_fstat_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d07      	ldr	r5, [pc, #28]	; (800e18c <_fstat_r+0x20>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	4611      	mov	r1, r2
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	f7f5 fe06 	bl	8003d8a <_fstat>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d102      	bne.n	800e188 <_fstat_r+0x1c>
 800e182:	682b      	ldr	r3, [r5, #0]
 800e184:	b103      	cbz	r3, 800e188 <_fstat_r+0x1c>
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	20000814 	.word	0x20000814

0800e190 <_isatty_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d06      	ldr	r5, [pc, #24]	; (800e1ac <_isatty_r+0x1c>)
 800e194:	2300      	movs	r3, #0
 800e196:	4604      	mov	r4, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	602b      	str	r3, [r5, #0]
 800e19c:	f7f5 fe05 	bl	8003daa <_isatty>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_isatty_r+0x1a>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_isatty_r+0x1a>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20000814 	.word	0x20000814

0800e1b0 <_lseek_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d07      	ldr	r5, [pc, #28]	; (800e1d0 <_lseek_r+0x20>)
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	4608      	mov	r0, r1
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	602a      	str	r2, [r5, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f7f5 fdfe 	bl	8003dc0 <_lseek>
 800e1c4:	1c43      	adds	r3, r0, #1
 800e1c6:	d102      	bne.n	800e1ce <_lseek_r+0x1e>
 800e1c8:	682b      	ldr	r3, [r5, #0]
 800e1ca:	b103      	cbz	r3, 800e1ce <_lseek_r+0x1e>
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	bd38      	pop	{r3, r4, r5, pc}
 800e1d0:	20000814 	.word	0x20000814

0800e1d4 <memmove>:
 800e1d4:	4288      	cmp	r0, r1
 800e1d6:	b510      	push	{r4, lr}
 800e1d8:	eb01 0402 	add.w	r4, r1, r2
 800e1dc:	d902      	bls.n	800e1e4 <memmove+0x10>
 800e1de:	4284      	cmp	r4, r0
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	d807      	bhi.n	800e1f4 <memmove+0x20>
 800e1e4:	1e43      	subs	r3, r0, #1
 800e1e6:	42a1      	cmp	r1, r4
 800e1e8:	d008      	beq.n	800e1fc <memmove+0x28>
 800e1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1f2:	e7f8      	b.n	800e1e6 <memmove+0x12>
 800e1f4:	4402      	add	r2, r0
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	428a      	cmp	r2, r1
 800e1fa:	d100      	bne.n	800e1fe <memmove+0x2a>
 800e1fc:	bd10      	pop	{r4, pc}
 800e1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e206:	e7f7      	b.n	800e1f8 <memmove+0x24>

0800e208 <_realloc_r>:
 800e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e20c:	4680      	mov	r8, r0
 800e20e:	4614      	mov	r4, r2
 800e210:	460e      	mov	r6, r1
 800e212:	b921      	cbnz	r1, 800e21e <_realloc_r+0x16>
 800e214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e218:	4611      	mov	r1, r2
 800e21a:	f7fb bbaf 	b.w	800997c <_malloc_r>
 800e21e:	b92a      	cbnz	r2, 800e22c <_realloc_r+0x24>
 800e220:	f7fb fb40 	bl	80098a4 <_free_r>
 800e224:	4625      	mov	r5, r4
 800e226:	4628      	mov	r0, r5
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22c:	f000 f835 	bl	800e29a <_malloc_usable_size_r>
 800e230:	4284      	cmp	r4, r0
 800e232:	4607      	mov	r7, r0
 800e234:	d802      	bhi.n	800e23c <_realloc_r+0x34>
 800e236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e23a:	d812      	bhi.n	800e262 <_realloc_r+0x5a>
 800e23c:	4621      	mov	r1, r4
 800e23e:	4640      	mov	r0, r8
 800e240:	f7fb fb9c 	bl	800997c <_malloc_r>
 800e244:	4605      	mov	r5, r0
 800e246:	2800      	cmp	r0, #0
 800e248:	d0ed      	beq.n	800e226 <_realloc_r+0x1e>
 800e24a:	42bc      	cmp	r4, r7
 800e24c:	4622      	mov	r2, r4
 800e24e:	4631      	mov	r1, r6
 800e250:	bf28      	it	cs
 800e252:	463a      	movcs	r2, r7
 800e254:	f7fb fb10 	bl	8009878 <memcpy>
 800e258:	4631      	mov	r1, r6
 800e25a:	4640      	mov	r0, r8
 800e25c:	f7fb fb22 	bl	80098a4 <_free_r>
 800e260:	e7e1      	b.n	800e226 <_realloc_r+0x1e>
 800e262:	4635      	mov	r5, r6
 800e264:	e7df      	b.n	800e226 <_realloc_r+0x1e>
	...

0800e268 <_read_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	; (800e288 <_read_r+0x20>)
 800e26c:	4604      	mov	r4, r0
 800e26e:	4608      	mov	r0, r1
 800e270:	4611      	mov	r1, r2
 800e272:	2200      	movs	r2, #0
 800e274:	602a      	str	r2, [r5, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	f7f5 fd42 	bl	8003d00 <_read>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_read_r+0x1e>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	b103      	cbz	r3, 800e286 <_read_r+0x1e>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	20000814 	.word	0x20000814

0800e28c <abort>:
 800e28c:	b508      	push	{r3, lr}
 800e28e:	2006      	movs	r0, #6
 800e290:	f000 f834 	bl	800e2fc <raise>
 800e294:	2001      	movs	r0, #1
 800e296:	f7f5 fd29 	bl	8003cec <_exit>

0800e29a <_malloc_usable_size_r>:
 800e29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29e:	1f18      	subs	r0, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bfbc      	itt	lt
 800e2a4:	580b      	ldrlt	r3, [r1, r0]
 800e2a6:	18c0      	addlt	r0, r0, r3
 800e2a8:	4770      	bx	lr

0800e2aa <_raise_r>:
 800e2aa:	291f      	cmp	r1, #31
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	d904      	bls.n	800e2be <_raise_r+0x14>
 800e2b4:	2316      	movs	r3, #22
 800e2b6:	6003      	str	r3, [r0, #0]
 800e2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2bc:	bd38      	pop	{r3, r4, r5, pc}
 800e2be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2c0:	b112      	cbz	r2, 800e2c8 <_raise_r+0x1e>
 800e2c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c6:	b94b      	cbnz	r3, 800e2dc <_raise_r+0x32>
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f000 f831 	bl	800e330 <_getpid_r>
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4601      	mov	r1, r0
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d8:	f000 b818 	b.w	800e30c <_kill_r>
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d00a      	beq.n	800e2f6 <_raise_r+0x4c>
 800e2e0:	1c59      	adds	r1, r3, #1
 800e2e2:	d103      	bne.n	800e2ec <_raise_r+0x42>
 800e2e4:	2316      	movs	r3, #22
 800e2e6:	6003      	str	r3, [r0, #0]
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	e7e7      	b.n	800e2bc <_raise_r+0x12>
 800e2ec:	2400      	movs	r4, #0
 800e2ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	4798      	blx	r3
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	e7e0      	b.n	800e2bc <_raise_r+0x12>
	...

0800e2fc <raise>:
 800e2fc:	4b02      	ldr	r3, [pc, #8]	; (800e308 <raise+0xc>)
 800e2fe:	4601      	mov	r1, r0
 800e300:	6818      	ldr	r0, [r3, #0]
 800e302:	f7ff bfd2 	b.w	800e2aa <_raise_r>
 800e306:	bf00      	nop
 800e308:	2000005c 	.word	0x2000005c

0800e30c <_kill_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d07      	ldr	r5, [pc, #28]	; (800e32c <_kill_r+0x20>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	4611      	mov	r1, r2
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	f7f5 fcd7 	bl	8003ccc <_kill>
 800e31e:	1c43      	adds	r3, r0, #1
 800e320:	d102      	bne.n	800e328 <_kill_r+0x1c>
 800e322:	682b      	ldr	r3, [r5, #0]
 800e324:	b103      	cbz	r3, 800e328 <_kill_r+0x1c>
 800e326:	6023      	str	r3, [r4, #0]
 800e328:	bd38      	pop	{r3, r4, r5, pc}
 800e32a:	bf00      	nop
 800e32c:	20000814 	.word	0x20000814

0800e330 <_getpid_r>:
 800e330:	f7f5 bcc4 	b.w	8003cbc <_getpid>

0800e334 <_init>:
 800e334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e336:	bf00      	nop
 800e338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e33a:	bc08      	pop	{r3}
 800e33c:	469e      	mov	lr, r3
 800e33e:	4770      	bx	lr

0800e340 <_fini>:
 800e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e342:	bf00      	nop
 800e344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e346:	bc08      	pop	{r3}
 800e348:	469e      	mov	lr, r3
 800e34a:	4770      	bx	lr
