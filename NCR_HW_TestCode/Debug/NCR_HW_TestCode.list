
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800a718  0800a718  0001a718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adbc  0800adbc  0001adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000008  0800adc4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000011c  200001e8  0800afa4  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000304  0800afa4  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001521a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029f1  00000000  00000000  00035432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001630  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001538  00000000  00000000  00039458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000229dc  00000000  00000000  0003a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014573  00000000  00000000  0005d36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d9dfb  00000000  00000000  000718df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014b6da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000739c  00000000  00000000  0014b72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a6fc 	.word	0x0800a6fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800a6fc 	.word	0x0800a6fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fe4:	1d39      	adds	r1, r7, #4
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	2201      	movs	r2, #1
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <__io_putchar+0x20>)
 8000fee:	f003 fcdf 	bl	80049b0 <HAL_UART_Transmit>
  return ch;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000258 	.word	0x20000258

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fcf1 	bl	80019ec <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
      MCP23008_Init();
 800100a:	f000 f99d 	bl	8001348 <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f863 	bl	80010d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001012:	f000 f8b9 	bl	8001188 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f95f 	bl	80012d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800101a:	f000 f911 	bl	8001240 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800101e:	f000 f8d1 	bl	80011c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 8001022:	f000 f991 	bl	8001348 <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 8001026:	f000 f9c3 	bl	80013b0 <MCP23008_ConfigureInterrupts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Characters: %c %c\n", 'a', 65);
 800102a:	2241      	movs	r2, #65	; 0x41
 800102c:	2161      	movs	r1, #97	; 0x61
 800102e:	4820      	ldr	r0, [pc, #128]	; (80010b0 <main+0xb0>)
 8001030:	f005 fce0 	bl	80069f4 <iprintf>
  printf("Decimals: %d %ld\n", 1977, 650000L);
 8001034:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <main+0xb4>)
 8001036:	f240 71b9 	movw	r1, #1977	; 0x7b9
 800103a:	481f      	ldr	r0, [pc, #124]	; (80010b8 <main+0xb8>)
 800103c:	f005 fcda 	bl	80069f4 <iprintf>
  printf("Preceding with blanks: %10d\n", 1977);
 8001040:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <main+0xbc>)
 8001046:	f005 fcd5 	bl	80069f4 <iprintf>
  printf("Preceding with zeros: %010d\n", 1977);
 800104a:	f240 71b9 	movw	r1, #1977	; 0x7b9
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <main+0xc0>)
 8001050:	f005 fcd0 	bl	80069f4 <iprintf>
  printf("Some different radices: %d %x %o %#x %#o\n", 100, 100, 100, 100, 100);
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	2164      	movs	r1, #100	; 0x64
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <main+0xc4>)
 8001064:	f005 fcc6 	bl	80069f4 <iprintf>
  printf("floats: %4.2f %+.0e %E\n", 3.1416, 3.1416, 3.1416);
 8001068:	a30f      	add	r3, pc, #60	; (adr r3, 80010a8 <main+0xa8>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001072:	a30d      	add	r3, pc, #52	; (adr r3, 80010a8 <main+0xa8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9cd 2300 	strd	r2, r3, [sp]
 800107c:	a30a      	add	r3, pc, #40	; (adr r3, 80010a8 <main+0xa8>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <main+0xc8>)
 8001084:	f005 fcb6 	bl	80069f4 <iprintf>
  printf("Width trick: %*d\n", 5, 10);
 8001088:	220a      	movs	r2, #10
 800108a:	2105      	movs	r1, #5
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <main+0xcc>)
 800108e:	f005 fcb1 	bl	80069f4 <iprintf>
  printf("%s\n", "A string");
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <main+0xd0>)
 8001094:	f005 fd34 	bl	8006b00 <puts>

    /* USER CODE BEGIN 3 */

	  // Read GPIO

	printf(". . .  \r\n");
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <main+0xd4>)
 800109a:	f005 fd31 	bl	8006b00 <puts>
	HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f000 fd29 	bl	8001af8 <HAL_Delay>
	printf(". . .  \r\n");
 80010a6:	e7f7      	b.n	8001098 <main+0x98>
 80010a8:	2e48e8a7 	.word	0x2e48e8a7
 80010ac:	400921ff 	.word	0x400921ff
 80010b0:	0800a718 	.word	0x0800a718
 80010b4:	0009eb10 	.word	0x0009eb10
 80010b8:	0800a72c 	.word	0x0800a72c
 80010bc:	0800a740 	.word	0x0800a740
 80010c0:	0800a760 	.word	0x0800a760
 80010c4:	0800a780 	.word	0x0800a780
 80010c8:	0800a7ac 	.word	0x0800a7ac
 80010cc:	0800a7c4 	.word	0x0800a7c4
 80010d0:	0800a7d8 	.word	0x0800a7d8
 80010d4:	0800a7e4 	.word	0x0800a7e4

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09a      	sub	sp, #104	; 0x68
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2248      	movs	r2, #72	; 0x48
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 fe02 	bl	8005cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <SystemClock_Config+0xac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <SystemClock_Config+0xac>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <SystemClock_Config+0xac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800111a:	2322      	movs	r3, #34	; 0x22
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800112c:	2300      	movs	r3, #0
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f98d 	bl	800345c <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001148:	f000 f9ce 	bl	80014e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800114c:	236f      	movs	r3, #111	; 0x6f
 800114e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fce9 	bl	8003b44 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001178:	f000 f9b6 	bl	80014e8 <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3768      	adds	r7, #104	; 0x68
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58000400 	.word	0x58000400

08001188 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2250      	movs	r2, #80	; 0x50
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fdab 	bl	8005cf0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80011a0:	2300      	movs	r3, #0
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80011a4:	2310      	movs	r3, #16
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f909 	bl	80043c2 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80011b6:	f000 f997 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80011d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_I2C1_Init+0x74>)
 80011de:	2201      	movs	r2, #1
 80011e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_I2C1_Init+0x74>)
 8001202:	f000 fff3 	bl	80021ec <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 f96c 	bl	80014e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C1_Init+0x74>)
 8001214:	f001 fcf6 	bl	8002c04 <HAL_I2CEx_ConfigAnalogFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800121e:	f000 f963 	bl	80014e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_I2C1_Init+0x74>)
 8001226:	f001 fd38 	bl	8002c9a <HAL_I2CEx_ConfigDigitalFilter>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001230:	f000 f95a 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000204 	.word	0x20000204
 800123c:	40005400 	.word	0x40005400

08001240 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_LPUART1_UART_Init+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800124c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001250:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800128a:	f003 fb41 	bl	8004910 <HAL_UART_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 f928 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 800129c:	f004 fc33 	bl	8005b06 <HAL_UARTEx_SetTxFifoThreshold>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f000 f91f 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 80012ae:	f004 fc68 	bl	8005b82 <HAL_UARTEx_SetRxFifoThreshold>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b8:	f000 f916 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_LPUART1_UART_Init+0x90>)
 80012be:	f004 fbe9 	bl	8005a94 <HAL_UARTEx_DisableFifoMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f90e 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000258 	.word	0x20000258
 80012d4:	40008000 	.word	0x40008000

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fe5b 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2004      	movs	r0, #4
 80012f4:	f7ff fe58 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 80012f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_GPIO_Init+0x6c>)
 800130e:	f000 fde5 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001316:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001318:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800131c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_GPIO_Init+0x6c>)
 8001328:	f000 fdd8 	bl	8001edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2028      	movs	r0, #40	; 0x28
 8001332:	f000 fce0 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001336:	2028      	movs	r0, #40	; 0x28
 8001338:	f000 fcf7 	bl	8001d2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	48000400 	.word	0x48000400

08001348 <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 800134e:	2300      	movs	r3, #0
 8001350:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001356:	1d3a      	adds	r2, r7, #4
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	2140      	movs	r1, #64	; 0x40
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <MCP23008_Init+0x28>)
 8001364:	f000 ffd2 	bl	800230c <HAL_I2C_Master_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000204 	.word	0x20000204

08001374 <MCP23008_ReadGPIO>:

uint8_t MCP23008_ReadGPIO(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af02      	add	r7, sp, #8
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 800137a:	2309      	movs	r3, #9
 800137c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 800137e:	1d3a      	adds	r2, r7, #4
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <MCP23008_ReadGPIO+0x38>)
 800138c:	f000 ffbe 	bl	800230c <HAL_I2C_Master_Transmit>

    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8001390:	1cfa      	adds	r2, r7, #3
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	2140      	movs	r1, #64	; 0x40
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MCP23008_ReadGPIO+0x38>)
 800139e:	f001 f8a9 	bl	80024f4 <HAL_I2C_Master_Receive>

    return gpioState;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000204 	.word	0x20000204

080013b0 <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 80013b6:	2302      	movs	r3, #2
 80013b8:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 80013ba:	23ff      	movs	r3, #255	; 0xff
 80013bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80013be:	1d3a      	adds	r2, r7, #4
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2302      	movs	r3, #2
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <MCP23008_ConfigureInterrupts+0xa0>)
 80013cc:	f000 ff9e 	bl	800230c <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 80013d0:	2304      	movs	r3, #4
 80013d2:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 80013d4:	2300      	movs	r3, #0
 80013d6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80013d8:	1d3a      	adds	r2, r7, #4
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2302      	movs	r3, #2
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MCP23008_ConfigureInterrupts+0xa0>)
 80013e6:	f000 ff91 	bl	800230c <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 80013ea:	2303      	movs	r3, #3
 80013ec:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 80013ee:	2300      	movs	r3, #0
 80013f0:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2302      	movs	r3, #2
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	4814      	ldr	r0, [pc, #80]	; (8001450 <MCP23008_ConfigureInterrupts+0xa0>)
 8001400:	f000 ff84 	bl	800230c <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 8001404:	2305      	movs	r3, #5
 8001406:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <MCP23008_ConfigureInterrupts+0xa0>)
 8001418:	f001 f86c 	bl	80024f4 <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f023 0306 	bic.w	r3, r3, #6
 8001424:	b25b      	sxtb	r3, r3
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 8001430:	2305      	movs	r3, #5
 8001432:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001434:	1d3a      	adds	r2, r7, #4
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MCP23008_ConfigureInterrupts+0xa0>)
 8001442:	f000 ff63 	bl	800230c <HAL_I2C_Master_Transmit>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000204 	.word	0x20000204

08001454 <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x84>)
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02f      	beq.n	80014ca <HAL_GPIO_EXTI_IRQHandler+0x76>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x84>)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	60d3      	str	r3, [r2, #12]

    GPIO_PinState gpioState, smokeAState, smokeBState;

    switch(GPIO_Pin)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001476:	d009      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x38>
 8001478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800147c:	dc27      	bgt.n	80014ce <HAL_GPIO_EXTI_IRQHandler+0x7a>
 800147e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x4c>
 8001484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001488:	d00a      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x4c>
          smokeBState = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
          printf("SMOKE: %d %d \r\n", smokeAState, smokeBState);
          break;

      default:
        break;
 800148a:	e020      	b.n	80014ce <HAL_GPIO_EXTI_IRQHandler+0x7a>
          gpioState = MCP23008_ReadGPIO();
 800148c:	f7ff ff72 	bl	8001374 <MCP23008_ReadGPIO>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
          printf("DRY CONTACT: %d \r\n", gpioState);
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	4619      	mov	r1, r3
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x88>)
 800149a:	f005 faab 	bl	80069f4 <iprintf>
          break;
 800149e:	e017      	b.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x7c>
          smokeAState = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 80014a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a4:	480e      	ldr	r0, [pc, #56]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x8c>)
 80014a6:	f000 fe89 	bl	80021bc <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73bb      	strb	r3, [r7, #14]
          smokeBState = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 80014ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b2:	480b      	ldr	r0, [pc, #44]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x8c>)
 80014b4:	f000 fe82 	bl	80021bc <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	737b      	strb	r3, [r7, #13]
          printf("SMOKE: %d %d \r\n", smokeAState, smokeBState);
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	7b7a      	ldrb	r2, [r7, #13]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x90>)
 80014c4:	f005 fa96 	bl	80069f4 <iprintf>
          break;
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x7c>
    }
  }
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x7c>
        break;
 80014ce:	bf00      	nop
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58000800 	.word	0x58000800
 80014dc:	0800a7f0 	.word	0x0800a7f0
 80014e0:	48000400 	.word	0x48000400
 80014e4:	0800a804 	.word	0x0800a804

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>

080014f2 <LL_AHB2_GRP1_EnableClock>:
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4313      	orrs	r3, r2
 8001508:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09c      	sub	sp, #112	; 0x70
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2250      	movs	r2, #80	; 0x50
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fb99 	bl	8005cf0 <memset>
  if(hi2c->Instance==I2C1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d126      	bne.n	8001616 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fef3 	bl	80043c2 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015e2:	f7ff ff81 	bl	80014e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff ff83 	bl	80014f2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fe:	2304      	movs	r3, #4
 8001600:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_I2C_MspInit+0x8c>)
 800160a:	f000 fc67 	bl	8001edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001612:	f7ff ff87 	bl	8001524 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3770      	adds	r7, #112	; 0x70
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40005400 	.word	0x40005400
 8001624:	48000400 	.word	0x48000400

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09c      	sub	sp, #112	; 0x70
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2250      	movs	r2, #80	; 0x50
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fb51 	bl	8005cf0 <memset>
  if(huart->Instance==LPUART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d12b      	bne.n	80016b0 <HAL_UART_MspInit+0x88>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001658:	2302      	movs	r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f002 feac 	bl	80043c2 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001670:	f7ff ff3a 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff ff6e 	bl	8001556 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2004      	movs	r0, #4
 800167c:	f7ff ff39 	bl	80014f2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001680:	2303      	movs	r3, #3
 8001682:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001690:	2308      	movs	r3, #8
 8001692:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <HAL_UART_MspInit+0x94>)
 800169c:	f000 fc1e 	bl	8001edc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f000 fb26 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f000 fb3d 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3770      	adds	r7, #112	; 0x70
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40008000 	.word	0x40008000
 80016bc:	48000800 	.word	0x48000800

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170c:	f000 f9c8 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <LPUART1_IRQHandler+0x10>)
 800171a:	f003 f9d7 	bl	8004acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000258 	.word	0x20000258

08001728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 800172c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001730:	f7ff fe90 	bl	8001454 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 8001734:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001738:	f7ff fe8c 	bl	8001454 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800173c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001740:	f7ff fe88 	bl	8001454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_kill>:

int _kill(int pid, int sig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001762:	f004 fa9b 	bl	8005c9c <__errno>
 8001766:	4603      	mov	r3, r0
 8001768:	2216      	movs	r2, #22
 800176a:	601a      	str	r2, [r3, #0]
  return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_exit>:

void _exit (int status)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe7 	bl	8001758 <_kill>
  while (1) {}    /* Make sure we hang here */
 800178a:	e7fe      	b.n	800178a <_exit+0x12>

0800178c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
  }

  return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e009      	b.n	80017ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fbfb 	bl	8000fdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf1      	blt.n	80017d8 <_write+0x12>
  }
  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_close>:

int _close(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f004 fa00 	bl	8005c9c <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20030000 	.word	0x20030000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	200002ec 	.word	0x200002ec
 80018d0:	20000308 	.word	0x20000308

080018d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <SystemInit+0x98>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <SystemInit+0x98>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001900:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <SystemInit+0x9c>)
 800190e:	4013      	ands	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800191e:	f023 0305 	bic.w	r3, r3, #5
 8001922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <SystemInit+0xa0>)
 8001940:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <SystemInit+0xa0>)
 8001948:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	faf6fefb 	.word	0xfaf6fefb
 8001974:	22041000 	.word	0x22041000

08001978 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001978:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197c:	3304      	adds	r3, #4

0800197e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001980:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001982:	d3f9      	bcc.n	8001978 <CopyDataInit>
  bx lr
 8001984:	4770      	bx	lr

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001986:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001988:	3004      	adds	r0, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800198a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>
  bx lr
 800198e:	4770      	bx	lr

08001990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001994:	f7ff ff9e 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <LoopForever+0x6>)
 800199a:	490c      	ldr	r1, [pc, #48]	; (80019cc <LoopForever+0xa>)
 800199c:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <LoopForever+0xe>)
 800199e:	2300      	movs	r3, #0
 80019a0:	f7ff ffed 	bl	800197e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopForever+0x12>)
 80019a6:	490c      	ldr	r1, [pc, #48]	; (80019d8 <LoopForever+0x16>)
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <LoopForever+0x1a>)
 80019aa:	2300      	movs	r3, #0
 80019ac:	f7ff ffe7 	bl	800197e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <LoopForever+0x1e>)
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <LoopForever+0x22>)
 80019b4:	2300      	movs	r3, #0
 80019b6:	f7ff ffe8 	bl	800198a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ba:	f004 f975 	bl	8005ca8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019be:	f7ff fb1f 	bl	8001000 <main>

080019c2 <LoopForever>:

LoopForever:
  b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
  ldr   r0, =_estack
 80019c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019c8:	20000008 	.word	0x20000008
 80019cc:	200001e8 	.word	0x200001e8
 80019d0:	0800adc4 	.word	0x0800adc4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019d4:	20030000 	.word	0x20030000
 80019d8:	20030000 	.word	0x20030000
 80019dc:	0800afa4 	.word	0x0800afa4
  INIT_BSS _sbss, _ebss
 80019e0:	200001e8 	.word	0x200001e8
 80019e4:	20000304 	.word	0x20000304

080019e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_Init+0x3c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_Init+0x3c>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f000 f96c 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a08:	200f      	movs	r0, #15
 8001a0a:	f000 f80f 	bl	8001a2c <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	e001      	b.n	8001a1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1a:	f7ff fdb5 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58004000 	.word	0x58004000

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_InitTick+0x6c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d024      	beq.n	8001a8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a40:	f002 fa2e 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_InitTick+0x6c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f974 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	d809      	bhi.n	8001a7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a72:	f000 f940 	bl	8001cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_InitTick+0x70>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e004      	b.n	8001a8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	200002f0 	.word	0x200002f0

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200002f0 	.word	0x200002f0

08001ae0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetTickPrio+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffe2 	bl	8001ac8 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffd2 	bl	8001ac8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000010 	.word	0x20000010

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff40 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff33 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa4 	bl	8001c9c <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e04f      	b.n	8001e10 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d008      	beq.n	8001d8e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e040      	b.n	8001e10 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 020e 	bic.w	r2, r2, #14
 8001d9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 021c 	and.w	r2, r3, #28
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00c      	beq.n	8001dfe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dfc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d005      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2204      	movs	r2, #4
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e047      	b.n	8001ed0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020e 	bic.w	r2, r2, #14
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f003 021c 	and.w	r2, r3, #28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
    }
  }
  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eea:	e14c      	b.n	8002186 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 813e 	beq.w	8002180 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <HAL_GPIO_Init+0x40>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d130      	bne.n	8001f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f52:	2201      	movs	r2, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0201 	and.w	r2, r3, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d123      	bne.n	800200e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8098 	beq.w	8002180 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002050:	4a54      	ldr	r2, [pc, #336]	; (80021a4 <HAL_GPIO_Init+0x2c8>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x1d4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_GPIO_Init+0x2cc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1d0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1cc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2d4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1c8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_GPIO_Init+0x2d8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1c4>
 800209c:	2304      	movs	r3, #4
 800209e:	e008      	b.n	80020b2 <HAL_GPIO_Init+0x1d6>
 80020a0:	2307      	movs	r3, #7
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1d6>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x1d6>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x1d6>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x1d6>
 80020b0:	2300      	movs	r3, #0
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c2:	4938      	ldr	r1, [pc, #224]	; (80021a4 <HAL_GPIO_Init+0x2c8>)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f4:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 8002126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 8002154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002178:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_GPIO_Init+0x2dc>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f aeab 	bne.w	8001eec <HAL_GPIO_Init+0x10>
  }
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	58000800 	.word	0x58000800

080021bc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e081      	b.n	8002302 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff f9c0 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2224      	movs	r2, #36	; 0x24
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800224c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e006      	b.n	8002274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d104      	bne.n	8002286 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69d9      	ldr	r1, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	460b      	mov	r3, r1
 800231a:	817b      	strh	r3, [r7, #10]
 800231c:	4613      	mov	r3, r2
 800231e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b20      	cmp	r3, #32
 800232a:	f040 80da 	bne.w	80024e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_I2C_Master_Transmit+0x30>
 8002338:	2302      	movs	r3, #2
 800233a:	e0d3      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002344:	f7ff fbc0 	bl	8001ac8 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2319      	movs	r3, #25
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f9e6 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0be      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	; 0x21
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2210      	movs	r2, #16
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2bff      	cmp	r3, #255	; 0xff
 8002396:	d90e      	bls.n	80023b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_I2C_Master_Transmit+0x1e0>)
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fbf6 	bl	8002ba0 <I2C_TransferConfig>
 80023b4:	e06c      	b.n	8002490 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_I2C_Master_Transmit+0x1e0>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fbe5 	bl	8002ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023d6:	e05b      	b.n	8002490 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	6a39      	ldr	r1, [r7, #32]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f9f2 	bl	80027c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e07b      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d034      	beq.n	8002490 <HAL_I2C_Master_Transmit+0x184>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	d130      	bne.n	8002490 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f975 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e04d      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	d90e      	bls.n	8002470 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	b2da      	uxtb	r2, r3
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fb99 	bl	8002ba0 <I2C_TransferConfig>
 800246e:	e00f      	b.n	8002490 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	b2da      	uxtb	r2, r3
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	2300      	movs	r3, #0
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fb88 	bl	8002ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d19e      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f9d8 	bl	8002854 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e01a      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2220      	movs	r2, #32
 80024b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80024c2:	400b      	ands	r3, r1
 80024c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	80002000 	.word	0x80002000
 80024f0:	fe00e800 	.word	0xfe00e800

080024f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	461a      	mov	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	817b      	strh	r3, [r7, #10]
 8002504:	4613      	mov	r3, r2
 8002506:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	f040 80db 	bne.w	80026cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_I2C_Master_Receive+0x30>
 8002520:	2302      	movs	r3, #2
 8002522:	e0d4      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800252c:	f7ff facc 	bl	8001ac8 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2319      	movs	r3, #25
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8f2 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0bf      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2222      	movs	r2, #34	; 0x22
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2210      	movs	r2, #16
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2bff      	cmp	r3, #255	; 0xff
 800257e:	d90e      	bls.n	800259e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	b2da      	uxtb	r2, r3
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb02 	bl	8002ba0 <I2C_TransferConfig>
 800259c:	e06d      	b.n	800267a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	8979      	ldrh	r1, [r7, #10]
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <HAL_I2C_Master_Receive+0x1e4>)
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 faf1 	bl	8002ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025be:	e05c      	b.n	800267a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6a39      	ldr	r1, [r7, #32]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f989 	bl	80028dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e07c      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d034      	beq.n	800267a <HAL_I2C_Master_Receive+0x186>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d130      	bne.n	800267a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f880 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e04d      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2bff      	cmp	r3, #255	; 0xff
 800263a:	d90e      	bls.n	800265a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	22ff      	movs	r2, #255	; 0xff
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 faa4 	bl	8002ba0 <I2C_TransferConfig>
 8002658:	e00f      	b.n	800267a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fa93 	bl	8002ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d19d      	bne.n	80025c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f8e3 	bl	8002854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_I2C_Master_Receive+0x1e8>)
 80026ac:	400b      	ands	r3, r1
 80026ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	80002400 	.word	0x80002400
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d103      	bne.n	80026fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d007      	beq.n	800271c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	619a      	str	r2, [r3, #24]
  }
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e031      	b.n	800279e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d02d      	beq.n	800279e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f9c1 	bl	8001ac8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d122      	bne.n	800279e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4013      	ands	r3, r2
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	429a      	cmp	r2, r3
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	429a      	cmp	r2, r3
 8002774:	d113      	bne.n	800279e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d0be      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d2:	e033      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f901 	bl	80029e0 <I2C_IsErrorOccurred>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e031      	b.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d025      	beq.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f0:	f7ff f96a 	bl	8001ac8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d302      	bcc.n	8002806 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11a      	bne.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d013      	beq.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e007      	b.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d1c4      	bne.n	80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002860:	e02f      	b.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f8ba 	bl	80029e0 <I2C_IsErrorOccurred>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e02d      	b.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff f927 	bl	8001ac8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11a      	bne.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d013      	beq.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e007      	b.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d1c8      	bne.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e8:	e06b      	b.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f876 	bl	80029e0 <I2C_IsErrorOccurred>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e069      	b.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b20      	cmp	r3, #32
 800290a:	d138      	bne.n	800297e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d105      	bne.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e055      	b.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b10      	cmp	r3, #16
 8002932:	d107      	bne.n	8002944 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2204      	movs	r2, #4
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
 8002942:	e002      	b.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800295e:	400b      	ands	r3, r1
 8002960:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e029      	b.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7ff f8a3 	bl	8001ac8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d116      	bne.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00f      	beq.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e007      	b.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d18c      	bne.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d068      	beq.n	8002ade <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2210      	movs	r2, #16
 8002a12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a14:	e049      	b.n	8002aaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d045      	beq.n	8002aaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f853 	bl	8001ac8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_IsErrorOccurred+0x54>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d13a      	bne.n	8002aaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d121      	bne.n	8002a9c <I2C_IsErrorOccurred+0xbc>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a5e:	d01d      	beq.n	8002a9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d01a      	beq.n	8002a9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a76:	f7ff f827 	bl	8001ac8 <HAL_GetTick>
 8002a7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7c:	e00e      	b.n	8002a9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a7e:	f7ff f823 	bl	8001ac8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b19      	cmp	r3, #25
 8002a8a:	d907      	bls.n	8002a9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a9a:	e006      	b.n	8002aaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d1e9      	bne.n	8002a7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d003      	beq.n	8002ac0 <I2C_IsErrorOccurred+0xe0>
 8002ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0aa      	beq.n	8002a16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2220      	movs	r2, #32
 8002ace:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fdc3 	bl	80026e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <I2C_IsErrorOccurred+0x1bc>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb8:	7a7b      	ldrb	r3, [r7, #9]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	0d5b      	lsrs	r3, r3, #21
 8002bda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <I2C_TransferConfig+0x60>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	43db      	mvns	r3, r3
 8002be4:	ea02 0103 	and.w	r1, r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	03ff63ff 	.word	0x03ff63ff

08002c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d138      	bne.n	8002c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e032      	b.n	8002c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d139      	bne.n	8002d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e033      	b.n	8002d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	58000400 	.word	0x58000400

08002d54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	58000400 	.word	0x58000400

08002d70 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d82:	d101      	bne.n	8002d88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de2:	d101      	bne.n	8002de8 <LL_RCC_HSE_IsReady+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_RCC_HSE_IsReady+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d101      	bne.n	8002e48 <LL_RCC_HSI_IsReady+0x18>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <LL_RCC_HSI_IsReady+0x1a>
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d101      	bne.n	8002eda <LL_RCC_HSI48_IsReady+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_RCC_HSI48_IsReady+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d101      	bne.n	8002f86 <LL_RCC_LSE_IsReady+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_RCC_LSE_IsReady+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d101      	bne.n	8002fee <LL_RCC_LSI1_IsReady+0x18>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_RCC_LSI1_IsReady+0x1a>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d101      	bne.n	8003056 <LL_RCC_LSI2_IsReady+0x18>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_RCC_LSI2_IsReady+0x1a>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6013      	str	r3, [r2, #0]
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d101      	bne.n	80030e2 <LL_RCC_MSI_IsReady+0x16>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_RCC_MSI_IsReady+0x18>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003126:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2bb0      	cmp	r3, #176	; 0xb0
 800312c:	d901      	bls.n	8003132 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800312e:	23b0      	movs	r3, #176	; 0xb0
 8003130:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003132:	687b      	ldr	r3, [r7, #4]
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 0203 	bic.w	r2, r3, #3
 800317c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800320e:	f023 020f 	bic.w	r2, r3, #15
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800332e:	d101      	bne.n	8003334 <LL_RCC_PLL_IsReady+0x18>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <LL_RCC_PLL_IsReady+0x1a>
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d101      	bne.n	80033ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033da:	d101      	bne.n	80033e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d101      	bne.n	8003406 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003424:	d101      	bne.n	800342a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003448:	d101      	bne.n	800344e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b08d      	sub	sp, #52	; 0x34
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e363      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 808d 	beq.w	8003596 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347c:	f7ff fe89 	bl	8003192 <LL_RCC_GetSysClkSource>
 8003480:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003482:	f7ff ff82 	bl	800338a <LL_RCC_PLL_GetMainSource>
 8003486:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x3e>
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d147      	bne.n	8003524 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	2b01      	cmp	r3, #1
 8003498:	d144      	bne.n	8003524 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e347      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80034aa:	f7ff fe34 	bl	8003116 <LL_RCC_MSI_GetRange>
 80034ae:	4603      	mov	r3, r0
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d914      	bls.n	80034de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fd31 	bl	8003f20 <RCC_SetFlashLatencyFromMSIRange>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e336      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fe0e 	bl	80030ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe32 	bl	8003140 <LL_RCC_MSI_SetCalibTrimming>
 80034dc:	e013      	b.n	8003506 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fe03 	bl	80030ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fe27 	bl	8003140 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fd12 	bl	8003f20 <RCC_SetFlashLatencyFromMSIRange>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e317      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003506:	f000 fccb 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 800350a:	4603      	mov	r3, r0
 800350c:	4aa4      	ldr	r2, [pc, #656]	; (80037a0 <HAL_RCC_OscConfig+0x344>)
 800350e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003510:	4ba4      	ldr	r3, [pc, #656]	; (80037a4 <HAL_RCC_OscConfig+0x348>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fa89 	bl	8001a2c <HAL_InitTick>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d039      	beq.n	8003594 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e308      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01e      	beq.n	800356a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352c:	f7ff fdb0 	bl	8003090 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003530:	f7fe faca 	bl	8001ac8 <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003538:	f7fe fac6 	bl	8001ac8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e2f5      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800354a:	f7ff fdbf 	bl	80030cc <LL_RCC_MSI_IsReady>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f1      	beq.n	8003538 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fdc8 	bl	80030ee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fdec 	bl	8003140 <LL_RCC_MSI_SetCalibTrimming>
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800356a:	f7ff fda0 	bl	80030ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800356e:	f7fe faab 	bl	8001ac8 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003576:	f7fe faa7 	bl	8001ac8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e2d6      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003588:	f7ff fda0 	bl	80030cc <LL_RCC_MSI_IsReady>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <HAL_RCC_OscConfig+0x11a>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003594:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d047      	beq.n	8003632 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	f7ff fdf6 	bl	8003192 <LL_RCC_GetSysClkSource>
 80035a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a8:	f7ff feef 	bl	800338a <LL_RCC_PLL_GetMainSource>
 80035ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x164>
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d108      	bne.n	80035cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d134      	bne.n	8003632 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e2b4      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_OscConfig+0x180>
 80035d6:	f7ff fbdd 	bl	8002d94 <LL_RCC_HSE_Enable>
 80035da:	e001      	b.n	80035e0 <HAL_RCC_OscConfig+0x184>
 80035dc:	f7ff fbe9 	bl	8002db2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fa6e 	bl	8001ac8 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fa6a 	bl	8001ac8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e299      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003602:	f7ff fbe5 	bl	8002dd0 <LL_RCC_HSE_IsReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f1      	beq.n	80035f0 <HAL_RCC_OscConfig+0x194>
 800360c:	e011      	b.n	8003632 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe fa5b 	bl	8001ac8 <HAL_GetTick>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003616:	f7fe fa57 	bl	8001ac8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	; 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e286      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003628:	f7ff fbd2 	bl	8002dd0 <LL_RCC_HSE_IsReady>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f1      	bne.n	8003616 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	f7ff fda8 	bl	8003192 <LL_RCC_GetSysClkSource>
 8003642:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003644:	f7ff fea1 	bl	800338a <LL_RCC_PLL_GetMainSource>
 8003648:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d005      	beq.n	800365c <HAL_RCC_OscConfig+0x200>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d10e      	bne.n	8003674 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d10b      	bne.n	8003674 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e266      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fbf1 	bl	8002e54 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003672:	e031      	b.n	80036d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d019      	beq.n	80036b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	f7ff fbba 	bl	8002df4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fa22 	bl	8001ac8 <HAL_GetTick>
 8003684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe fa1e 	bl	8001ac8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e24d      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800369a:	f7ff fbc9 	bl	8002e30 <LL_RCC_HSI_IsReady>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f1      	beq.n	8003688 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fbd3 	bl	8002e54 <LL_RCC_HSI_SetCalibTrimming>
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b0:	f7ff fbaf 	bl	8002e12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fa08 	bl	8001ac8 <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036bc:	f7fe fa04 	bl	8001ac8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e233      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80036ce:	f7ff fbaf 	bl	8002e30 <LL_RCC_HSI_IsReady>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f1      	bne.n	80036bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a3 	beq.w	8003838 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d076      	beq.n	80037e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d046      	beq.n	8003794 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003706:	f7ff fc66 	bl	8002fd6 <LL_RCC_LSI1_IsReady>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d113      	bne.n	8003738 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003710:	f7ff fc3f 	bl	8002f92 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003714:	f7fe f9d8 	bl	8001ac8 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800371c:	f7fe f9d4 	bl	8001ac8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e203      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800372e:	f7ff fc52 	bl	8002fd6 <LL_RCC_LSI1_IsReady>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f1      	beq.n	800371c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003738:	f7ff fc5f 	bl	8002ffa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe f9c4 	bl	8001ac8 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003744:	f7fe f9c0 	bl	8001ac8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e1ef      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003756:	f7ff fc72 	bl	800303e <LL_RCC_LSI2_IsReady>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f1      	beq.n	8003744 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fc7c 	bl	8003062 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800376a:	f7ff fc23 	bl	8002fb4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe f9ab 	bl	8001ac8 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003776:	f7fe f9a7 	bl	8001ac8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1d6      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003788:	f7ff fc25 	bl	8002fd6 <LL_RCC_LSI1_IsReady>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f1      	bne.n	8003776 <HAL_RCC_OscConfig+0x31a>
 8003792:	e051      	b.n	8003838 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003794:	f7ff fbfd 	bl	8002f92 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe f996 	bl	8001ac8 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800379e:	e00c      	b.n	80037ba <HAL_RCC_OscConfig+0x35e>
 80037a0:	20000008 	.word	0x20000008
 80037a4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037a8:	f7fe f98e 	bl	8001ac8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1bd      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80037ba:	f7ff fc0c 	bl	8002fd6 <LL_RCC_LSI1_IsReady>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f1      	beq.n	80037a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80037c4:	f7ff fc2a 	bl	800301c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80037ca:	f7fe f97d 	bl	8001ac8 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1ac      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80037dc:	f7ff fc2f 	bl	800303e <LL_RCC_LSI2_IsReady>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f1      	bne.n	80037ca <HAL_RCC_OscConfig+0x36e>
 80037e6:	e027      	b.n	8003838 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80037e8:	f7ff fc18 	bl	800301c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe f96c 	bl	8001ac8 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80037f4:	f7fe f968 	bl	8001ac8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e197      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003806:	f7ff fc1a 	bl	800303e <LL_RCC_LSI2_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f1      	bne.n	80037f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003810:	f7ff fbd0 	bl	8002fb4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe f958 	bl	8001ac8 <HAL_GetTick>
 8003818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800381c:	f7fe f954 	bl	8001ac8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e183      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800382e:	f7ff fbd2 	bl	8002fd6 <LL_RCC_LSI1_IsReady>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f1      	bne.n	800381c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05b      	beq.n	80038fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003844:	4ba7      	ldr	r3, [pc, #668]	; (8003ae4 <HAL_RCC_OscConfig+0x688>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d114      	bne.n	800387a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003850:	f7ff fa70 	bl	8002d34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003854:	f7fe f938 	bl	8001ac8 <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385c:	f7fe f934 	bl	8001ac8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e163      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386e:	4b9d      	ldr	r3, [pc, #628]	; (8003ae4 <HAL_RCC_OscConfig+0x688>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_OscConfig+0x42c>
 8003882:	f7ff fb30 	bl	8002ee6 <LL_RCC_LSE_Enable>
 8003886:	e00c      	b.n	80038a2 <HAL_RCC_OscConfig+0x446>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d104      	bne.n	800389a <HAL_RCC_OscConfig+0x43e>
 8003890:	f7ff fb4b 	bl	8002f2a <LL_RCC_LSE_EnableBypass>
 8003894:	f7ff fb27 	bl	8002ee6 <LL_RCC_LSE_Enable>
 8003898:	e003      	b.n	80038a2 <HAL_RCC_OscConfig+0x446>
 800389a:	f7ff fb35 	bl	8002f08 <LL_RCC_LSE_Disable>
 800389e:	f7ff fb55 	bl	8002f4c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe f90d 	bl	8001ac8 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe f909 	bl	8001ac8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e136      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80038c8:	f7ff fb51 	bl	8002f6e <LL_RCC_LSE_IsReady>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ef      	beq.n	80038b2 <HAL_RCC_OscConfig+0x456>
 80038d2:	e013      	b.n	80038fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe f8f8 	bl	8001ac8 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe f8f4 	bl	8001ac8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e121      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80038f2:	f7ff fb3c 	bl	8002f6e <LL_RCC_LSE_IsReady>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ef      	bne.n	80038dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02c      	beq.n	8003962 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003910:	f7ff fab5 	bl	8002e7e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fe f8d8 	bl	8001ac8 <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391c:	f7fe f8d4 	bl	8001ac8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e103      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800392e:	f7ff fac8 	bl	8002ec2 <LL_RCC_HSI48_IsReady>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f1      	beq.n	800391c <HAL_RCC_OscConfig+0x4c0>
 8003938:	e013      	b.n	8003962 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800393a:	f7ff fab1 	bl	8002ea0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe f8c3 	bl	8001ac8 <HAL_GetTick>
 8003942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003946:	f7fe f8bf 	bl	8001ac8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0ee      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003958:	f7ff fab3 	bl	8002ec2 <LL_RCC_HSI48_IsReady>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f1      	bne.n	8003946 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80e4 	beq.w	8003b34 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396c:	f7ff fc11 	bl	8003192 <LL_RCC_GetSysClkSource>
 8003970:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 80b4 	bne.w	8003aec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0203 	and.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	429a      	cmp	r2, r3
 8003990:	d123      	bne.n	80039da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d11c      	bne.n	80039da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d114      	bne.n	80039da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10d      	bne.n	80039da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d05d      	beq.n	8003a96 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d058      	beq.n	8003a92 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0a1      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039f2:	f7ff fc84 	bl	80032fe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f6:	f7fe f867 	bl	8001ac8 <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe f863 	bl	8001ac8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e092      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1ef      	bne.n	80039fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCC_OscConfig+0x68c>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a36:	0212      	lsls	r2, r2, #8
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a54:	f7ff fc44 	bl	80032e0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a68:	f7fe f82e 	bl	8001ac8 <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe f82a 	bl	8001ac8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e059      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	e050      	b.n	8003b34 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d147      	bne.n	8003b34 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aa4:	f7ff fc1c 	bl	80032e0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ab8:	f7fe f806 	bl	8001ac8 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe f802 	bl	8001ac8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e031      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ef      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x664>
 8003ae0:	e028      	b.n	8003b34 <HAL_RCC_OscConfig+0x6d8>
 8003ae2:	bf00      	nop
 8003ae4:	58000400 	.word	0x58000400
 8003ae8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d01e      	beq.n	8003b30 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	f7ff fc04 	bl	80032fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd ffe7 	bl	8001ac8 <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd ffe3 	bl	8001ac8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e012      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ef      	bne.n	8003afe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x6e4>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60cb      	str	r3, [r1, #12]
 8003b2e:	e001      	b.n	8003b34 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3734      	adds	r7, #52	; 0x34
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	eefefffc 	.word	0xeefefffc

08003b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e12d      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b98      	ldr	r3, [pc, #608]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d91b      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b95      	ldr	r3, [pc, #596]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4993      	ldr	r1, [pc, #588]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fd ffa7 	bl	8001ac8 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b7e:	f7fd ffa3 	bl	8001ac8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e111      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b90:	4b8a      	ldr	r3, [pc, #552]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d1ef      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fafb 	bl	80031aa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd ff88 	bl	8001ac8 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bbc:	f7fd ff84 	bl	8001ac8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0f2      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003bce:	f7ff fbe8 	bl	80033a2 <LL_RCC_IsActiveFlag_HPRE>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f1      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d016      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff faf2 	bl	80031d2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bee:	f7fd ff6b 	bl	8001ac8 <HAL_GetTick>
 8003bf2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bf6:	f7fd ff67 	bl	8001ac8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0d5      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003c08:	f7ff fbdd 	bl	80033c6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f1      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff faeb 	bl	80031fe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c28:	f7fd ff4e 	bl	8001ac8 <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c30:	f7fd ff4a 	bl	8001ac8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b8      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c42:	f7ff fbd3 	bl	80033ec <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f1      	beq.n	8003c30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d016      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fae5 	bl	800322c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c62:	f7fd ff31 	bl	8001ac8 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c6a:	f7fd ff2d 	bl	8001ac8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e09b      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c7c:	f7ff fbc9 	bl	8003412 <LL_RCC_IsActiveFlag_PPRE1>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f1      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fadb 	bl	8003254 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd ff13 	bl	8001ac8 <HAL_GetTick>
 8003ca2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ca6:	f7fd ff0f 	bl	8001ac8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e07d      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003cb8:	f7ff fbbd 	bl	8003436 <LL_RCC_IsActiveFlag_PPRE2>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f1      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d043      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003cd6:	f7ff f87b 	bl	8002dd0 <LL_RCC_HSE_IsReady>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11e      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e067      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003cec:	f7ff fb16 	bl	800331c <LL_RCC_PLL_IsReady>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d113      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e05c      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003d02:	f7ff f9e3 	bl	80030cc <LL_RCC_MSI_IsReady>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e051      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003d10:	f7ff f88e 	bl	8002e30 <LL_RCC_HSI_IsReady>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e04a      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fa21 	bl	800316a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d28:	f7fd fece 	bl	8001ac8 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fd feca 	bl	8001ac8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e036      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	f7ff fa24 	bl	8003192 <LL_RCC_GetSysClkSource>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d1ec      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d21b      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 0207 	bic.w	r2, r3, #7
 8003d6c:	4913      	ldr	r1, [pc, #76]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fea8 	bl	8001ac8 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d7c:	f7fd fea4 	bl	8001ac8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e012      	b.n	8003db4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x278>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1ef      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d9c:	f000 f880 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <HAL_RCC_ClockConfig+0x27c>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003da6:	f7fd fe9b 	bl	8001ae0 <HAL_GetTickPrio>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd fe3d 	bl	8001a2c <HAL_InitTick>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	58004000 	.word	0x58004000
 8003dc0:	20000008 	.word	0x20000008

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dca:	f7ff f9e2 	bl	8003192 <LL_RCC_GetSysClkSource>
 8003dce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003dd6:	f7ff f99e 	bl	8003116 <LL_RCC_MSI_GetRange>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e04b      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e045      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10a      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dfe:	f7fe ffb7 	bl	8002d70 <LL_RCC_HSE_IsEnabledDiv2>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e03a      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e037      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e14:	f7ff fab9 	bl	800338a <LL_RCC_PLL_GetMainSource>
 8003e18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x64>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x6a>
 8003e26:	e00d      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e2a:	60bb      	str	r3, [r7, #8]
        break;
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e2e:	f7fe ff9f 	bl	8002d70 <LL_RCC_HSE_IsEnabledDiv2>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e3c:	e00d      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003e40:	60bb      	str	r3, [r7, #8]
        break;
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e44:	f7ff f967 	bl	8003116 <LL_RCC_MSI_GetRange>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e56:	60bb      	str	r3, [r7, #8]
        break;
 8003e58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003e5a:	f7ff fa71 	bl	8003340 <LL_RCC_PLL_GetN>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	fb03 f402 	mul.w	r4, r3, r2
 8003e66:	f7ff fa84 	bl	8003372 <LL_RCC_PLL_GetDivider>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	3301      	adds	r3, #1
 8003e70:	fbb4 f4f3 	udiv	r4, r4, r3
 8003e74:	f7ff fa71 	bl	800335a <LL_RCC_PLL_GetR>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	0f5b      	lsrs	r3, r3, #29
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e82:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	0800a8a0 	.word	0x0800a8a0
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	003d0900 	.word	0x003d0900
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b598      	push	{r3, r4, r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ea4:	f7ff ff8e 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	f7ff f9e7 	bl	800327c <LL_RCC_GetAHBPrescaler>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd98      	pop	{r3, r4, r7, pc}
 8003ec4:	0800a840 	.word	0x0800a840

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b598      	push	{r3, r4, r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ecc:	f7ff ffe8 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	f7ff f9ed 	bl	80032b0 <LL_RCC_GetAPB1Prescaler>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd98      	pop	{r3, r4, r7, pc}
 8003ef0:	0800a880 	.word	0x0800a880

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef4:	b598      	push	{r3, r4, r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ef8:	f7ff ffd2 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003efc:	4604      	mov	r4, r0
 8003efe:	f7ff f9e3 	bl	80032c8 <LL_RCC_GetAPB2Prescaler>
 8003f02:	4603      	mov	r3, r0
 8003f04:	0adb      	lsrs	r3, r3, #11
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd98      	pop	{r3, r4, r7, pc}
 8003f1c:	0800a880 	.word	0x0800a880

08003f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2bb0      	cmp	r3, #176	; 0xb0
 8003f2c:	d903      	bls.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e007      	b.n	8003f46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003f46:	f7ff f9a5 	bl	8003294 <LL_RCC_GetAHB4Prescaler>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	4a0d      	ldr	r2, [pc, #52]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	0c9c      	lsrs	r4, r3, #18
 8003f6a:	f7fe fef3 	bl	8002d54 <HAL_PWREx_GetVoltageRange>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4619      	mov	r1, r3
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f80c 	bl	8003f90 <RCC_SetFlashLatency>
 8003f78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	0800a8a0 	.word	0x0800a8a0
 8003f88:	0800a840 	.word	0x0800a840
 8003f8c:	431bde83 	.word	0x431bde83

08003f90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b093      	sub	sp, #76	; 0x4c
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <RCC_SetFlashLatency+0xe8>)
 8003f9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003fa6:	4a35      	ldr	r2, [pc, #212]	; (800407c <RCC_SetFlashLatency+0xec>)
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003fb2:	4b33      	ldr	r3, [pc, #204]	; (8004080 <RCC_SetFlashLatency+0xf0>)
 8003fb4:	f107 040c 	add.w	r4, r7, #12
 8003fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d11a      	bne.n	8004000 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fce:	e013      	b.n	8003ff8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	3348      	adds	r3, #72	; 0x48
 8003fd6:	443b      	add	r3, r7
 8003fd8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d807      	bhi.n	8003ff2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3348      	adds	r3, #72	; 0x48
 8003fe8:	443b      	add	r3, r7
 8003fea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ff0:	e020      	b.n	8004034 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d9e8      	bls.n	8003fd0 <RCC_SetFlashLatency+0x40>
 8003ffe:	e019      	b.n	8004034 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004000:	2300      	movs	r3, #0
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004004:	e013      	b.n	800402e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3348      	adds	r3, #72	; 0x48
 800400c:	443b      	add	r3, r7
 800400e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d807      	bhi.n	8004028 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3348      	adds	r3, #72	; 0x48
 800401e:	443b      	add	r3, r7
 8004020:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004026:	e005      	b.n	8004034 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	3301      	adds	r3, #1
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	2b02      	cmp	r3, #2
 8004032:	d9e8      	bls.n	8004006 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <RCC_SetFlashLatency+0xf4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 0207 	bic.w	r2, r3, #7
 800403c:	4911      	ldr	r1, [pc, #68]	; (8004084 <RCC_SetFlashLatency+0xf4>)
 800403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004044:	f7fd fd40 	bl	8001ac8 <HAL_GetTick>
 8004048:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800404a:	e008      	b.n	800405e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800404c:	f7fd fd3c 	bl	8001ac8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e007      	b.n	800406e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <RCC_SetFlashLatency+0xf4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004068:	429a      	cmp	r2, r3
 800406a:	d1ef      	bne.n	800404c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	374c      	adds	r7, #76	; 0x4c
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop
 8004078:	0800a814 	.word	0x0800a814
 800407c:	0800a824 	.word	0x0800a824
 8004080:	0800a830 	.word	0x0800a830
 8004084:	58004000 	.word	0x58004000

08004088 <LL_RCC_LSE_IsEnabled>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <LL_RCC_LSE_IsEnabled+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_RCC_LSE_IsReady>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d101      	bne.n	80040c4 <LL_RCC_LSE_IsReady+0x18>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <LL_RCC_LSE_IsReady+0x1a>
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_SetRFWKPClockSource>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_RCC_SetSMPSClockSource>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_RCC_SetSMPSPrescaler>:
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4313      	orrs	r3, r2
 800413e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_SetUSARTClockSource>:
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_SetLPUARTClockSource>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800418c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_SetI2CClockSource>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_RCC_SetLPTIMClockSource>:
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	43db      	mvns	r3, r3
 80041f6:	401a      	ands	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_RCC_SetSAIClockSource>:
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_SetRNGClockSource>:
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_SetCLK48ClockSource>:
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800427e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_RCC_SetUSBClockSource>:
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffe3 	bl	800426a <LL_RCC_SetCLK48ClockSource>
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <LL_RCC_SetADCClockSource>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_RCC_SetRTCClockSource>:
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_RCC_GetRTCClockSource>:
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_ForceBackupDomainReset>:
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004336:	bf00      	nop
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_RCC_PLLSAI1_Enable>:
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004374:	6013      	str	r3, [r2, #0]
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_RCC_PLLSAI1_Disable>:
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_RCC_PLLSAI1_IsReady>:
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b0:	d101      	bne.n	80043b6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b088      	sub	sp, #32
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80043ca:	2300      	movs	r3, #0
 80043cc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043ce:	2300      	movs	r3, #0
 80043d0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d034      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043e6:	d021      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80043e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ec:	d81b      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f2:	d01d      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80043f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f8:	d815      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d110      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004414:	e00d      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f947 	bl	80046ae <RCCEx_PLLSAI1_ConfigNP>
 8004420:	4603      	mov	r3, r0
 8004422:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004424:	e005      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	77fb      	strb	r3, [r7, #31]
        break;
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fee8 	bl	8004212 <LL_RCC_SetSAIClockSource>
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7ffb      	ldrb	r3, [r7, #31]
 8004446:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004450:	2b00      	cmp	r3, #0
 8004452:	d046      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004454:	f7ff ff56 	bl	8004304 <LL_RCC_GetRTCClockSource>
 8004458:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	d03c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004464:	f7fe fc66 	bl	8002d34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff30 	bl	80042d8 <LL_RCC_SetRTCClockSource>
 8004478:	e02e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004484:	f7ff ff4b 	bl	800431e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004488:	f7ff ff5a 	bl	8004340 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800449a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80044a4:	f7ff fdf0 	bl	8004088 <LL_RCC_LSE_IsEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d114      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ae:	f7fd fb0b 	bl	8001ac8 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80044b4:	e00b      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd fb07 	bl	8001ac8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d902      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	77fb      	strb	r3, [r7, #31]
              break;
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80044ce:	f7ff fded 	bl	80040ac <LL_RCC_LSE_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d1ee      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80044d8:	7ffb      	ldrb	r3, [r7, #31]
 80044da:	77bb      	strb	r3, [r7, #30]
 80044dc:	e001      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	7ffb      	ldrb	r3, [r7, #31]
 80044e0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fe2a 	bl	800414c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fe35 	bl	8004178 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fe5d 	bl	80041de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe52 	bl	80041de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fe2a 	bl	80041a4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fe1f 	bl	80041a4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fe8d 	bl	8004296 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004584:	d107      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004594:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f8dd 	bl	8004764 <RCCEx_PLLSAI1_ConfigNQ>
 80045aa:	4603      	mov	r3, r0
 80045ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045ae:	7ffb      	ldrb	r3, [r7, #31]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7ffb      	ldrb	r3, [r7, #31]
 80045b6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fe2a 	bl	800423e <LL_RCC_SetRNGClockSource>
 80045ea:	e00a      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7ff fe21 	bl	800423e <LL_RCC_SetRNGClockSource>
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fe34 	bl	800426a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800460a:	d107      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800460c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d022      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe3d 	bl	80042ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463a:	d107      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004654:	d10b      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f8dd 	bl	800481a <RCCEx_PLLSAI1_ConfigNR>
 8004660:	4603      	mov	r3, r0
 8004662:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004664:	7ffb      	ldrb	r3, [r7, #31]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fd26 	bl	80040d0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fd45 	bl	8004124 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fd2c 	bl	80040fc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80046a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046ba:	f7ff fe61 	bl	8004380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046be:	f7fd fa03 	bl	8001ac8 <HAL_GetTick>
 80046c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046c4:	e009      	b.n	80046da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c6:	f7fd f9ff 	bl	8001ac8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d902      	bls.n	80046da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e004      	b.n	80046e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046da:	f7ff fe60 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d137      	bne.n	800475a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004714:	4313      	orrs	r3, r2
 8004716:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004718:	f7ff fe23 	bl	8004362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fd f9d4 	bl	8001ac8 <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004724:	f7fd f9d0 	bl	8001ac8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
        break;
 8004736:	e004      	b.n	8004742 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004738:	f7ff fe31 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d1f0      	bne.n	8004724 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004756:	4313      	orrs	r3, r2
 8004758:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004770:	f7ff fe06 	bl	8004380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004774:	f7fd f9a8 	bl	8001ac8 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800477a:	e009      	b.n	8004790 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800477c:	f7fd f9a4 	bl	8001ac8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d902      	bls.n	8004790 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	73fb      	strb	r3, [r7, #15]
      break;
 800478e:	e004      	b.n	800479a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004790:	f7ff fe05 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d137      	bne.n	8004810 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047b4:	4313      	orrs	r3, r2
 80047b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ca:	4313      	orrs	r3, r2
 80047cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80047ce:	f7ff fdc8 	bl	8004362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d2:	f7fd f979 	bl	8001ac8 <HAL_GetTick>
 80047d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047d8:	e009      	b.n	80047ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047da:	f7fd f975 	bl	8001ac8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d902      	bls.n	80047ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	73fb      	strb	r3, [r7, #15]
        break;
 80047ec:	e004      	b.n	80047f8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047ee:	f7ff fdd6 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d1f0      	bne.n	80047da <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004826:	f7ff fdab 	bl	8004380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800482a:	f7fd f94d 	bl	8001ac8 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004830:	e009      	b.n	8004846 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004832:	f7fd f949 	bl	8001ac8 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d902      	bls.n	8004846 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e004      	b.n	8004850 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004846:	f7ff fdaa 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d137      	bne.n	80048c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004884:	f7ff fd6d 	bl	8004362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004888:	f7fd f91e 	bl	8001ac8 <HAL_GetTick>
 800488c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800488e:	e009      	b.n	80048a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004890:	f7fd f91a 	bl	8001ac8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d902      	bls.n	80048a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	73fb      	strb	r3, [r7, #15]
        break;
 80048a2:	e004      	b.n	80048ae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048a4:	f7ff fd7b 	bl	800439e <LL_RCC_PLLSAI1_IsReady>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1f0      	bne.n	8004890 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c2:	4313      	orrs	r3, r2
 80048c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <LL_RCC_GetUSARTClockSource>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4013      	ands	r3, r2
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_RCC_GetLPUARTClockSource>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4013      	ands	r3, r2
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e042      	b.n	80049a8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fc fe77 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2224      	movs	r2, #36	; 0x24
 800493e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fbfe 	bl	8005154 <UART_SetConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fe1a 	bl	80055a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fea1 	bl	80056e8 <UART_CheckIdleState>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d17b      	bne.n	8004ac2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_UART_Transmit+0x26>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e074      	b.n	8004ac4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2221      	movs	r2, #33	; 0x21
 80049e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ea:	f7fd f86d 	bl	8001ac8 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d108      	bne.n	8004a1c <HAL_UART_Transmit+0x6c>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e003      	b.n	8004a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a24:	e030      	b.n	8004a88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 ff03 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e03d      	b.n	8004ac4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3302      	adds	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e007      	b.n	8004a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1c8      	bne.n	8004a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2140      	movs	r1, #64	; 0x40
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fecc 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e006      	b.n	8004ac4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b0ba      	sub	sp, #232	; 0xe8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004afa:	4013      	ands	r3, r2
 8004afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11b      	bne.n	8004b40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 82e3 	beq.w	80050fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
      }
      return;
 8004b3e:	e2dd      	b.n	80050fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8123 	beq.w	8004d90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	; (8004d84 <HAL_UART_IRQHandler+0x2b8>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b5a:	4b8b      	ldr	r3, [pc, #556]	; (8004d88 <HAL_UART_IRQHandler+0x2bc>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8116 	beq.w	8004d90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d011      	beq.n	8004b94 <HAL_UART_IRQHandler+0xc8>
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d011      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xf8>
 8004ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f043 0204 	orr.w	r2, r3, #4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d011      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x128>
 8004bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2204      	movs	r2, #4
 8004be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	f043 0202 	orr.w	r2, r3, #2
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d017      	beq.n	8004c30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c10:	4b5c      	ldr	r3, [pc, #368]	; (8004d84 <HAL_UART_IRQHandler+0x2b8>)
 8004c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f043 0208 	orr.w	r2, r3, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <HAL_UART_IRQHandler+0x196>
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00c      	beq.n	8004c62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8249 	beq.w	8005100 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d054      	beq.n	8004d70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fe1f 	bl	800590a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d146      	bne.n	8004d68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1d9      	bne.n	8004cda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d017      	beq.n	8004d60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <HAL_UART_IRQHandler+0x2c0>)
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd f86b 	bl	8001e1c <HAL_DMA_Abort_IT>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d019      	beq.n	8004d80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5e:	e00f      	b.n	8004d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9e1 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d66:	e00b      	b.n	8004d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9dd 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	e007      	b.n	8004d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9d9 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004d7e:	e1bf      	b.n	8005100 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	bf00      	nop
    return;
 8004d82:	e1bd      	b.n	8005100 <HAL_UART_IRQHandler+0x634>
 8004d84:	10000001 	.word	0x10000001
 8004d88:	04000120 	.word	0x04000120
 8004d8c:	080059d7 	.word	0x080059d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	f040 8153 	bne.w	8005040 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 814c 	beq.w	8005040 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8145 	beq.w	8005040 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	f040 80bb 	bne.w	8004f44 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 818f 	beq.w	8005104 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004df0:	429a      	cmp	r2, r3
 8004df2:	f080 8187 	bcs.w	8005104 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 8087 	bne.w	8004f22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1da      	bne.n	8004e14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e1      	bne.n	8004e5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef0:	f023 0310 	bic.w	r3, r3, #16
 8004ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e4      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc ff1e 	bl	8001d5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8fd 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f42:	e0df      	b.n	8005104 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d1 	beq.w	8005108 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80cc 	beq.w	8005108 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f92:	647b      	str	r3, [r7, #68]	; 0x44
 8004f94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e4      	bne.n	8004f70 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fce:	633a      	str	r2, [r7, #48]	; 0x30
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e1      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	60fb      	str	r3, [r7, #12]
   return(result);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	617b      	str	r3, [r7, #20]
   return(result);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e4      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f87f 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800503e:	e063      	b.n	8005108 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <HAL_UART_IRQHandler+0x59e>
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fcf8 	bl	8005a58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005068:	e051      	b.n	800510e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03a      	beq.n	800510c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
    }
    return;
 800509e:	e035      	b.n	800510c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <HAL_UART_IRQHandler+0x5f4>
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fca2 	bl	8005a02 <UART_EndTransmit_IT>
    return;
 80050be:	e026      	b.n	800510e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_UART_IRQHandler+0x614>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fcd1 	bl	8005a80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050de:	e016      	b.n	800510e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_UART_IRQHandler+0x642>
 80050ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	da0c      	bge.n	800510e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fcb9 	bl	8005a6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fa:	e008      	b.n	800510e <HAL_UART_IRQHandler+0x642>
      return;
 80050fc:	bf00      	nop
 80050fe:	e006      	b.n	800510e <HAL_UART_IRQHandler+0x642>
    return;
 8005100:	bf00      	nop
 8005102:	e004      	b.n	800510e <HAL_UART_IRQHandler+0x642>
      return;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <HAL_UART_IRQHandler+0x642>
      return;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_UART_IRQHandler+0x642>
    return;
 800510c:	bf00      	nop
  }
}
 800510e:	37e8      	adds	r7, #232	; 0xe8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005158:	b08c      	sub	sp, #48	; 0x30
 800515a:	af00      	add	r7, sp, #0
 800515c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	431a      	orrs	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	431a      	orrs	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	4313      	orrs	r3, r2
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4baf      	ldr	r3, [pc, #700]	; (8005440 <UART_SetConfig+0x2ec>)
 8005184:	4013      	ands	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800518c:	430b      	orrs	r3, r1
 800518e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4aa4      	ldr	r2, [pc, #656]	; (8005444 <UART_SetConfig+0x2f0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051bc:	4313      	orrs	r3, r2
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	f023 010f 	bic.w	r1, r3, #15
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a95      	ldr	r2, [pc, #596]	; (8005448 <UART_SetConfig+0x2f4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d125      	bne.n	8005244 <UART_SetConfig+0xf0>
 80051f8:	2003      	movs	r0, #3
 80051fa:	f7ff fb69 	bl	80048d0 <LL_RCC_GetUSARTClockSource>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b03      	cmp	r3, #3
 8005202:	d81b      	bhi.n	800523c <UART_SetConfig+0xe8>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0xb8>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005225 	.word	0x08005225
 8005218:	08005235 	.word	0x08005235
 800521c:	2301      	movs	r3, #1
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e042      	b.n	80052aa <UART_SetConfig+0x156>
 8005224:	2302      	movs	r3, #2
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e03e      	b.n	80052aa <UART_SetConfig+0x156>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005232:	e03a      	b.n	80052aa <UART_SetConfig+0x156>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	e036      	b.n	80052aa <UART_SetConfig+0x156>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e032      	b.n	80052aa <UART_SetConfig+0x156>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a7e      	ldr	r2, [pc, #504]	; (8005444 <UART_SetConfig+0x2f0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d12a      	bne.n	80052a4 <UART_SetConfig+0x150>
 800524e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005252:	f7ff fb4d 	bl	80048f0 <LL_RCC_GetLPUARTClockSource>
 8005256:	4603      	mov	r3, r0
 8005258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800525c:	d01a      	beq.n	8005294 <UART_SetConfig+0x140>
 800525e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005262:	d81b      	bhi.n	800529c <UART_SetConfig+0x148>
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d00c      	beq.n	8005284 <UART_SetConfig+0x130>
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526e:	d815      	bhi.n	800529c <UART_SetConfig+0x148>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <UART_SetConfig+0x128>
 8005274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005278:	d008      	beq.n	800528c <UART_SetConfig+0x138>
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x148>
 800527c:	2300      	movs	r3, #0
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e012      	b.n	80052aa <UART_SetConfig+0x156>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e00e      	b.n	80052aa <UART_SetConfig+0x156>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e00a      	b.n	80052aa <UART_SetConfig+0x156>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e006      	b.n	80052aa <UART_SetConfig+0x156>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a2:	e002      	b.n	80052aa <UART_SetConfig+0x156>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a65      	ldr	r2, [pc, #404]	; (8005444 <UART_SetConfig+0x2f0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	f040 8097 	bne.w	80053e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d823      	bhi.n	8005306 <UART_SetConfig+0x1b2>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x170>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	08005307 	.word	0x08005307
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	08005307 	.word	0x08005307
 80052d4:	080052f7 	.word	0x080052f7
 80052d8:	08005307 	.word	0x08005307
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005307 	.word	0x08005307
 80052e4:	080052ff 	.word	0x080052ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe fdee 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ee:	e010      	b.n	8005312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b56      	ldr	r3, [pc, #344]	; (800544c <UART_SetConfig+0x2f8>)
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f4:	e00d      	b.n	8005312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fe fd65 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052fc:	e009      	b.n	8005312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005304:	e005      	b.n	8005312 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 812b 	beq.w	8005570 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	4a4c      	ldr	r2, [pc, #304]	; (8005450 <UART_SetConfig+0x2fc>)
 8005320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005324:	461a      	mov	r2, r3
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	fbb3 f3f2 	udiv	r3, r3, r2
 800532c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	429a      	cmp	r2, r3
 800533c:	d305      	bcc.n	800534a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	429a      	cmp	r2, r3
 8005348:	d903      	bls.n	8005352 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005350:	e10e      	b.n	8005570 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	2200      	movs	r2, #0
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	60fa      	str	r2, [r7, #12]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <UART_SetConfig+0x2fc>)
 8005360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005364:	b29b      	uxth	r3, r3
 8005366:	2200      	movs	r2, #0
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005370:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005374:	f7fb fc60 	bl	8000c38 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	020b      	lsls	r3, r1, #8
 800538a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800538e:	0202      	lsls	r2, r0, #8
 8005390:	6979      	ldr	r1, [r7, #20]
 8005392:	6849      	ldr	r1, [r1, #4]
 8005394:	0849      	lsrs	r1, r1, #1
 8005396:	2000      	movs	r0, #0
 8005398:	460c      	mov	r4, r1
 800539a:	4605      	mov	r5, r0
 800539c:	eb12 0804 	adds.w	r8, r2, r4
 80053a0:	eb43 0905 	adc.w	r9, r3, r5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	469a      	mov	sl, r3
 80053ac:	4693      	mov	fp, r2
 80053ae:	4652      	mov	r2, sl
 80053b0:	465b      	mov	r3, fp
 80053b2:	4640      	mov	r0, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	f7fb fc3f 	bl	8000c38 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4613      	mov	r3, r2
 80053c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c8:	d308      	bcc.n	80053dc <UART_SetConfig+0x288>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d0:	d204      	bcs.n	80053dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	e0c9      	b.n	8005570 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053e2:	e0c5      	b.n	8005570 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	d16d      	bne.n	80054ca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80053ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2b07      	cmp	r3, #7
 80053f6:	d82d      	bhi.n	8005454 <UART_SetConfig+0x300>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x2ac>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005421 	.word	0x08005421
 8005404:	08005429 	.word	0x08005429
 8005408:	08005455 	.word	0x08005455
 800540c:	0800542f 	.word	0x0800542f
 8005410:	08005455 	.word	0x08005455
 8005414:	08005455 	.word	0x08005455
 8005418:	08005455 	.word	0x08005455
 800541c:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7fe fd68 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005426:	e01b      	b.n	8005460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <UART_SetConfig+0x2f8>)
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800542c:	e018      	b.n	8005460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fe fcc9 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005434:	e014      	b.n	8005460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800543c:	e010      	b.n	8005460 <UART_SetConfig+0x30c>
 800543e:	bf00      	nop
 8005440:	cfff69f3 	.word	0xcfff69f3
 8005444:	40008000 	.word	0x40008000
 8005448:	40013800 	.word	0x40013800
 800544c:	00f42400 	.word	0x00f42400
 8005450:	0800a8e0 	.word	0x0800a8e0
      default:
        pclk = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800545e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8084 	beq.w	8005570 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4a4b      	ldr	r2, [pc, #300]	; (800559c <UART_SetConfig+0x448>)
 800546e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005472:	461a      	mov	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	fbb3 f3f2 	udiv	r3, r3, r2
 800547a:	005a      	lsls	r2, r3, #1
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	441a      	add	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d916      	bls.n	80054c2 <UART_SetConfig+0x36e>
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549a:	d212      	bcs.n	80054c2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f023 030f 	bic.w	r3, r3, #15
 80054a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	8bfb      	ldrh	r3, [r7, #30]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	8bfa      	ldrh	r2, [r7, #30]
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	e056      	b.n	8005570 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054c8:	e052      	b.n	8005570 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054ce:	3b01      	subs	r3, #1
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	d822      	bhi.n	800551a <UART_SetConfig+0x3c6>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x388>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800551b 	.word	0x0800551b
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800551b 	.word	0x0800551b
 80054f8:	08005513 	.word	0x08005513
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054fc:	f7fe fcfa 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8005500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <UART_SetConfig+0x44c>)
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550a:	f7fe fc5b 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 800550e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005524:	bf00      	nop
    }

    if (pclk != 0U)
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d021      	beq.n	8005570 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <UART_SetConfig+0x448>)
 8005532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005536:	461a      	mov	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	fbb3 f2f2 	udiv	r2, r3, r2
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d909      	bls.n	800556a <UART_SetConfig+0x416>
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d205      	bcs.n	800556a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	b29a      	uxth	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e002      	b.n	8005570 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2201      	movs	r2, #1
 8005574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2201      	movs	r2, #1
 800557c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800558c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005590:	4618      	mov	r0, r3
 8005592:	3730      	adds	r7, #48	; 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559a:	bf00      	nop
 800559c:	0800a8e0 	.word	0x0800a8e0
 80055a0:	00f42400 	.word	0x00f42400

080055a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01a      	beq.n	80056ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a2:	d10a      	bne.n	80056ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b098      	sub	sp, #96	; 0x60
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f8:	f7fc f9e6 	bl	8001ac8 <HAL_GetTick>
 80056fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d12f      	bne.n	800576c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f88e 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d022      	beq.n	800576c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573a:	653b      	str	r3, [r7, #80]	; 0x50
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005744:	647b      	str	r3, [r7, #68]	; 0x44
 8005746:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800574a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e063      	b.n	8005834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d149      	bne.n	800580e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	2200      	movs	r2, #0
 8005784:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f857 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d03c      	beq.n	800580e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
 80057b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3308      	adds	r3, #8
 80057e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e6:	61fa      	str	r2, [r7, #28]
 80057e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	69b9      	ldr	r1, [r7, #24]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	617b      	str	r3, [r7, #20]
   return(result);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e012      	b.n	8005834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3758      	adds	r7, #88	; 0x58
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584c:	e049      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d045      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fc f937 	bl	8001ac8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <UART_WaitOnFlagUntilTimeout+0x30>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e048      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d031      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d110      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f838 	bl	800590a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2208      	movs	r2, #8
 800589e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e029      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058bc:	d111      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f81e 	bl	800590a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00f      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d0a6      	beq.n	800584e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b095      	sub	sp, #84	; 0x54
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
 8005932:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	61fb      	str	r3, [r7, #28]
   return(result);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e3      	bne.n	8005944 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d118      	bne.n	80059b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	60bb      	str	r3, [r7, #8]
   return(result);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e6      	bne.n	8005984 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059ca:	bf00      	nop
 80059cc:	3754      	adds	r7, #84	; 0x54
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff fb97 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b088      	sub	sp, #32
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6979      	ldr	r1, [r7, #20]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fb62 	bl	8005114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a50:	bf00      	nop
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_UARTEx_DisableFifoMode+0x16>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e027      	b.n	8005afa <HAL_UARTEx_DisableFifoMode+0x66>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2224      	movs	r2, #36	; 0x24
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e02d      	b.n	8005b7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	; 0x24
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f850 	bl	8005c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e02d      	b.n	8005bf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2224      	movs	r2, #36	; 0x24
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f812 	bl	8005c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c20:	e031      	b.n	8005c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c22:	2308      	movs	r3, #8
 8005c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c26:	2308      	movs	r3, #8
 8005c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	0e5b      	lsrs	r3, r3, #25
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	0f5b      	lsrs	r3, r3, #29
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	7b3a      	ldrb	r2, [r7, #12]
 8005c4e:	4911      	ldr	r1, [pc, #68]	; (8005c94 <UARTEx_SetNbDataToProcess+0x94>)
 8005c50:	5c8a      	ldrb	r2, [r1, r2]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c56:	7b3a      	ldrb	r2, [r7, #12]
 8005c58:	490f      	ldr	r1, [pc, #60]	; (8005c98 <UARTEx_SetNbDataToProcess+0x98>)
 8005c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	7b7a      	ldrb	r2, [r7, #13]
 8005c6c:	4909      	ldr	r1, [pc, #36]	; (8005c94 <UARTEx_SetNbDataToProcess+0x94>)
 8005c6e:	5c8a      	ldrb	r2, [r1, r2]
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c74:	7b7a      	ldrb	r2, [r7, #13]
 8005c76:	4908      	ldr	r1, [pc, #32]	; (8005c98 <UARTEx_SetNbDataToProcess+0x98>)
 8005c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	0800a8f8 	.word	0x0800a8f8
 8005c98:	0800a900 	.word	0x0800a900

08005c9c <__errno>:
 8005c9c:	4b01      	ldr	r3, [pc, #4]	; (8005ca4 <__errno+0x8>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000014 	.word	0x20000014

08005ca8 <__libc_init_array>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	4d0d      	ldr	r5, [pc, #52]	; (8005ce0 <__libc_init_array+0x38>)
 8005cac:	4c0d      	ldr	r4, [pc, #52]	; (8005ce4 <__libc_init_array+0x3c>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	42a6      	cmp	r6, r4
 8005cb6:	d109      	bne.n	8005ccc <__libc_init_array+0x24>
 8005cb8:	4d0b      	ldr	r5, [pc, #44]	; (8005ce8 <__libc_init_array+0x40>)
 8005cba:	4c0c      	ldr	r4, [pc, #48]	; (8005cec <__libc_init_array+0x44>)
 8005cbc:	f004 fd1e 	bl	800a6fc <_init>
 8005cc0:	1b64      	subs	r4, r4, r5
 8005cc2:	10a4      	asrs	r4, r4, #2
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	42a6      	cmp	r6, r4
 8005cc8:	d105      	bne.n	8005cd6 <__libc_init_array+0x2e>
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd0:	4798      	blx	r3
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7ee      	b.n	8005cb4 <__libc_init_array+0xc>
 8005cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cda:	4798      	blx	r3
 8005cdc:	3601      	adds	r6, #1
 8005cde:	e7f2      	b.n	8005cc6 <__libc_init_array+0x1e>
 8005ce0:	0800adbc 	.word	0x0800adbc
 8005ce4:	0800adbc 	.word	0x0800adbc
 8005ce8:	0800adbc 	.word	0x0800adbc
 8005cec:	0800adc0 	.word	0x0800adc0

08005cf0 <memset>:
 8005cf0:	4402      	add	r2, r0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d100      	bne.n	8005cfa <memset+0xa>
 8005cf8:	4770      	bx	lr
 8005cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfe:	e7f9      	b.n	8005cf4 <memset+0x4>

08005d00 <__cvt>:
 8005d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	ec55 4b10 	vmov	r4, r5, d0
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	462b      	mov	r3, r5
 8005d10:	bfbb      	ittet	lt
 8005d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d16:	461d      	movlt	r5, r3
 8005d18:	2300      	movge	r3, #0
 8005d1a:	232d      	movlt	r3, #45	; 0x2d
 8005d1c:	700b      	strb	r3, [r1, #0]
 8005d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d24:	4691      	mov	r9, r2
 8005d26:	f023 0820 	bic.w	r8, r3, #32
 8005d2a:	bfbc      	itt	lt
 8005d2c:	4622      	movlt	r2, r4
 8005d2e:	4614      	movlt	r4, r2
 8005d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d34:	d005      	beq.n	8005d42 <__cvt+0x42>
 8005d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d3a:	d100      	bne.n	8005d3e <__cvt+0x3e>
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	2102      	movs	r1, #2
 8005d40:	e000      	b.n	8005d44 <__cvt+0x44>
 8005d42:	2103      	movs	r1, #3
 8005d44:	ab03      	add	r3, sp, #12
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	ab02      	add	r3, sp, #8
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	ec45 4b10 	vmov	d0, r4, r5
 8005d50:	4653      	mov	r3, sl
 8005d52:	4632      	mov	r2, r6
 8005d54:	f001 fefc 	bl	8007b50 <_dtoa_r>
 8005d58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	d102      	bne.n	8005d66 <__cvt+0x66>
 8005d60:	f019 0f01 	tst.w	r9, #1
 8005d64:	d022      	beq.n	8005dac <__cvt+0xac>
 8005d66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d6a:	eb07 0906 	add.w	r9, r7, r6
 8005d6e:	d110      	bne.n	8005d92 <__cvt+0x92>
 8005d70:	783b      	ldrb	r3, [r7, #0]
 8005d72:	2b30      	cmp	r3, #48	; 0x30
 8005d74:	d10a      	bne.n	8005d8c <__cvt+0x8c>
 8005d76:	2200      	movs	r2, #0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 8005d82:	b918      	cbnz	r0, 8005d8c <__cvt+0x8c>
 8005d84:	f1c6 0601 	rsb	r6, r6, #1
 8005d88:	f8ca 6000 	str.w	r6, [sl]
 8005d8c:	f8da 3000 	ldr.w	r3, [sl]
 8005d90:	4499      	add	r9, r3
 8005d92:	2200      	movs	r2, #0
 8005d94:	2300      	movs	r3, #0
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fe6d 	bl	8000a78 <__aeabi_dcmpeq>
 8005d9e:	b108      	cbz	r0, 8005da4 <__cvt+0xa4>
 8005da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005da4:	2230      	movs	r2, #48	; 0x30
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	454b      	cmp	r3, r9
 8005daa:	d307      	bcc.n	8005dbc <__cvt+0xbc>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005db0:	1bdb      	subs	r3, r3, r7
 8005db2:	4638      	mov	r0, r7
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	b004      	add	sp, #16
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	9103      	str	r1, [sp, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e7f0      	b.n	8005da6 <__cvt+0xa6>

08005dc4 <__exponent>:
 8005dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	bfb8      	it	lt
 8005dcc:	4249      	neglt	r1, r1
 8005dce:	f803 2b02 	strb.w	r2, [r3], #2
 8005dd2:	bfb4      	ite	lt
 8005dd4:	222d      	movlt	r2, #45	; 0x2d
 8005dd6:	222b      	movge	r2, #43	; 0x2b
 8005dd8:	2909      	cmp	r1, #9
 8005dda:	7042      	strb	r2, [r0, #1]
 8005ddc:	dd2a      	ble.n	8005e34 <__exponent+0x70>
 8005dde:	f10d 0407 	add.w	r4, sp, #7
 8005de2:	46a4      	mov	ip, r4
 8005de4:	270a      	movs	r7, #10
 8005de6:	46a6      	mov	lr, r4
 8005de8:	460a      	mov	r2, r1
 8005dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dee:	fb07 1516 	mls	r5, r7, r6, r1
 8005df2:	3530      	adds	r5, #48	; 0x30
 8005df4:	2a63      	cmp	r2, #99	; 0x63
 8005df6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dfe:	4631      	mov	r1, r6
 8005e00:	dcf1      	bgt.n	8005de6 <__exponent+0x22>
 8005e02:	3130      	adds	r1, #48	; 0x30
 8005e04:	f1ae 0502 	sub.w	r5, lr, #2
 8005e08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e0c:	1c44      	adds	r4, r0, #1
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4561      	cmp	r1, ip
 8005e12:	d30a      	bcc.n	8005e2a <__exponent+0x66>
 8005e14:	f10d 0209 	add.w	r2, sp, #9
 8005e18:	eba2 020e 	sub.w	r2, r2, lr
 8005e1c:	4565      	cmp	r5, ip
 8005e1e:	bf88      	it	hi
 8005e20:	2200      	movhi	r2, #0
 8005e22:	4413      	add	r3, r2
 8005e24:	1a18      	subs	r0, r3, r0
 8005e26:	b003      	add	sp, #12
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e32:	e7ed      	b.n	8005e10 <__exponent+0x4c>
 8005e34:	2330      	movs	r3, #48	; 0x30
 8005e36:	3130      	adds	r1, #48	; 0x30
 8005e38:	7083      	strb	r3, [r0, #2]
 8005e3a:	70c1      	strb	r1, [r0, #3]
 8005e3c:	1d03      	adds	r3, r0, #4
 8005e3e:	e7f1      	b.n	8005e24 <__exponent+0x60>

08005e40 <_printf_float>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	ed2d 8b02 	vpush	{d8}
 8005e48:	b08d      	sub	sp, #52	; 0x34
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e50:	4616      	mov	r6, r2
 8005e52:	461f      	mov	r7, r3
 8005e54:	4605      	mov	r5, r0
 8005e56:	f003 f98f 	bl	8009178 <_localeconv_r>
 8005e5a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e5e:	4650      	mov	r0, sl
 8005e60:	f7fa f98e 	bl	8000180 <strlen>
 8005e64:	2300      	movs	r3, #0
 8005e66:	930a      	str	r3, [sp, #40]	; 0x28
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e74:	3307      	adds	r3, #7
 8005e76:	f023 0307 	bic.w	r3, r3, #7
 8005e7a:	f103 0208 	add.w	r2, r3, #8
 8005e7e:	f8c8 2000 	str.w	r2, [r8]
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e98:	ee08 0a10 	vmov	s16, r0
 8005e9c:	4b9f      	ldr	r3, [pc, #636]	; (800611c <_printf_float+0x2dc>)
 8005e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	f7fa fe19 	bl	8000adc <__aeabi_dcmpun>
 8005eaa:	bb88      	cbnz	r0, 8005f10 <_printf_float+0xd0>
 8005eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb0:	4b9a      	ldr	r3, [pc, #616]	; (800611c <_printf_float+0x2dc>)
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	f7fa fdf3 	bl	8000aa0 <__aeabi_dcmple>
 8005eba:	bb48      	cbnz	r0, 8005f10 <_printf_float+0xd0>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	f7fa fde2 	bl	8000a8c <__aeabi_dcmplt>
 8005ec8:	b110      	cbz	r0, 8005ed0 <_printf_float+0x90>
 8005eca:	232d      	movs	r3, #45	; 0x2d
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	4b93      	ldr	r3, [pc, #588]	; (8006120 <_printf_float+0x2e0>)
 8005ed2:	4894      	ldr	r0, [pc, #592]	; (8006124 <_printf_float+0x2e4>)
 8005ed4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ed8:	bf94      	ite	ls
 8005eda:	4698      	movls	r8, r3
 8005edc:	4680      	movhi	r8, r0
 8005ede:	2303      	movs	r3, #3
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	f023 0204 	bic.w	r2, r3, #4
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	9700      	str	r7, [sp, #0]
 8005ef0:	4633      	mov	r3, r6
 8005ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f9d8 	bl	80062ac <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f040 8090 	bne.w	8006022 <_printf_float+0x1e2>
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	b00d      	add	sp, #52	; 0x34
 8005f08:	ecbd 8b02 	vpop	{d8}
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa fde0 	bl	8000adc <__aeabi_dcmpun>
 8005f1c:	b140      	cbz	r0, 8005f30 <_printf_float+0xf0>
 8005f1e:	464b      	mov	r3, r9
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfbc      	itt	lt
 8005f24:	232d      	movlt	r3, #45	; 0x2d
 8005f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f2a:	487f      	ldr	r0, [pc, #508]	; (8006128 <_printf_float+0x2e8>)
 8005f2c:	4b7f      	ldr	r3, [pc, #508]	; (800612c <_printf_float+0x2ec>)
 8005f2e:	e7d1      	b.n	8005ed4 <_printf_float+0x94>
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f36:	9206      	str	r2, [sp, #24]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	d13f      	bne.n	8005fbc <_printf_float+0x17c>
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	6063      	str	r3, [r4, #4]
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	6861      	ldr	r1, [r4, #4]
 8005f44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9303      	str	r3, [sp, #12]
 8005f4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005f4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f52:	ab09      	add	r3, sp, #36	; 0x24
 8005f54:	ec49 8b10 	vmov	d0, r8, r9
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7ff fecd 	bl	8005d00 <__cvt>
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6a:	2b47      	cmp	r3, #71	; 0x47
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	d108      	bne.n	8005f82 <_printf_float+0x142>
 8005f70:	1cc8      	adds	r0, r1, #3
 8005f72:	db02      	blt.n	8005f7a <_printf_float+0x13a>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	dd41      	ble.n	8005ffe <_printf_float+0x1be>
 8005f7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f7e:	fa5f fb8b 	uxtb.w	fp, fp
 8005f82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f86:	d820      	bhi.n	8005fca <_printf_float+0x18a>
 8005f88:	3901      	subs	r1, #1
 8005f8a:	465a      	mov	r2, fp
 8005f8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f90:	9109      	str	r1, [sp, #36]	; 0x24
 8005f92:	f7ff ff17 	bl	8005dc4 <__exponent>
 8005f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f98:	1813      	adds	r3, r2, r0
 8005f9a:	2a01      	cmp	r2, #1
 8005f9c:	4681      	mov	r9, r0
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	dc02      	bgt.n	8005fa8 <_printf_float+0x168>
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	07d2      	lsls	r2, r2, #31
 8005fa6:	d501      	bpl.n	8005fac <_printf_float+0x16c>
 8005fa8:	3301      	adds	r3, #1
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d09c      	beq.n	8005eee <_printf_float+0xae>
 8005fb4:	232d      	movs	r3, #45	; 0x2d
 8005fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fba:	e798      	b.n	8005eee <_printf_float+0xae>
 8005fbc:	9a06      	ldr	r2, [sp, #24]
 8005fbe:	2a47      	cmp	r2, #71	; 0x47
 8005fc0:	d1be      	bne.n	8005f40 <_printf_float+0x100>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1bc      	bne.n	8005f40 <_printf_float+0x100>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e7b9      	b.n	8005f3e <_printf_float+0xfe>
 8005fca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fce:	d118      	bne.n	8006002 <_printf_float+0x1c2>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	dd0b      	ble.n	8005fee <_printf_float+0x1ae>
 8005fd6:	6121      	str	r1, [r4, #16]
 8005fd8:	b913      	cbnz	r3, 8005fe0 <_printf_float+0x1a0>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	07d0      	lsls	r0, r2, #31
 8005fde:	d502      	bpl.n	8005fe6 <_printf_float+0x1a6>
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	440b      	add	r3, r1
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fe8:	f04f 0900 	mov.w	r9, #0
 8005fec:	e7de      	b.n	8005fac <_printf_float+0x16c>
 8005fee:	b913      	cbnz	r3, 8005ff6 <_printf_float+0x1b6>
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	07d2      	lsls	r2, r2, #31
 8005ff4:	d501      	bpl.n	8005ffa <_printf_float+0x1ba>
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	e7f4      	b.n	8005fe4 <_printf_float+0x1a4>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7f2      	b.n	8005fe4 <_printf_float+0x1a4>
 8005ffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006004:	4299      	cmp	r1, r3
 8006006:	db05      	blt.n	8006014 <_printf_float+0x1d4>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	6121      	str	r1, [r4, #16]
 800600c:	07d8      	lsls	r0, r3, #31
 800600e:	d5ea      	bpl.n	8005fe6 <_printf_float+0x1a6>
 8006010:	1c4b      	adds	r3, r1, #1
 8006012:	e7e7      	b.n	8005fe4 <_printf_float+0x1a4>
 8006014:	2900      	cmp	r1, #0
 8006016:	bfd4      	ite	le
 8006018:	f1c1 0202 	rsble	r2, r1, #2
 800601c:	2201      	movgt	r2, #1
 800601e:	4413      	add	r3, r2
 8006020:	e7e0      	b.n	8005fe4 <_printf_float+0x1a4>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	055a      	lsls	r2, r3, #21
 8006026:	d407      	bmi.n	8006038 <_printf_float+0x1f8>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	4642      	mov	r2, r8
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	d12c      	bne.n	8006090 <_printf_float+0x250>
 8006036:	e764      	b.n	8005f02 <_printf_float+0xc2>
 8006038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800603c:	f240 80e0 	bls.w	8006200 <_printf_float+0x3c0>
 8006040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	f7fa fd16 	bl	8000a78 <__aeabi_dcmpeq>
 800604c:	2800      	cmp	r0, #0
 800604e:	d034      	beq.n	80060ba <_printf_float+0x27a>
 8006050:	4a37      	ldr	r2, [pc, #220]	; (8006130 <_printf_float+0x2f0>)
 8006052:	2301      	movs	r3, #1
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af51 	beq.w	8005f02 <_printf_float+0xc2>
 8006060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006064:	429a      	cmp	r2, r3
 8006066:	db02      	blt.n	800606e <_printf_float+0x22e>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07d8      	lsls	r0, r3, #31
 800606c:	d510      	bpl.n	8006090 <_printf_float+0x250>
 800606e:	ee18 3a10 	vmov	r3, s16
 8006072:	4652      	mov	r2, sl
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f af41 	beq.w	8005f02 <_printf_float+0xc2>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f104 091a 	add.w	r9, r4, #26
 8006088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	4543      	cmp	r3, r8
 800608e:	dc09      	bgt.n	80060a4 <_printf_float+0x264>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	079b      	lsls	r3, r3, #30
 8006094:	f100 8105 	bmi.w	80062a2 <_printf_float+0x462>
 8006098:	68e0      	ldr	r0, [r4, #12]
 800609a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609c:	4298      	cmp	r0, r3
 800609e:	bfb8      	it	lt
 80060a0:	4618      	movlt	r0, r3
 80060a2:	e730      	b.n	8005f06 <_printf_float+0xc6>
 80060a4:	2301      	movs	r3, #1
 80060a6:	464a      	mov	r2, r9
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af27 	beq.w	8005f02 <_printf_float+0xc2>
 80060b4:	f108 0801 	add.w	r8, r8, #1
 80060b8:	e7e6      	b.n	8006088 <_printf_float+0x248>
 80060ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc39      	bgt.n	8006134 <_printf_float+0x2f4>
 80060c0:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <_printf_float+0x2f0>)
 80060c2:	2301      	movs	r3, #1
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f af19 	beq.w	8005f02 <_printf_float+0xc2>
 80060d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d102      	bne.n	80060de <_printf_float+0x29e>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	d5d8      	bpl.n	8006090 <_printf_float+0x250>
 80060de:	ee18 3a10 	vmov	r3, s16
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f af09 	beq.w	8005f02 <_printf_float+0xc2>
 80060f0:	f04f 0900 	mov.w	r9, #0
 80060f4:	f104 0a1a 	add.w	sl, r4, #26
 80060f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fa:	425b      	negs	r3, r3
 80060fc:	454b      	cmp	r3, r9
 80060fe:	dc01      	bgt.n	8006104 <_printf_float+0x2c4>
 8006100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006102:	e792      	b.n	800602a <_printf_float+0x1ea>
 8006104:	2301      	movs	r3, #1
 8006106:	4652      	mov	r2, sl
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f aef7 	beq.w	8005f02 <_printf_float+0xc2>
 8006114:	f109 0901 	add.w	r9, r9, #1
 8006118:	e7ee      	b.n	80060f8 <_printf_float+0x2b8>
 800611a:	bf00      	nop
 800611c:	7fefffff 	.word	0x7fefffff
 8006120:	0800a90c 	.word	0x0800a90c
 8006124:	0800a910 	.word	0x0800a910
 8006128:	0800a918 	.word	0x0800a918
 800612c:	0800a914 	.word	0x0800a914
 8006130:	0800a91c 	.word	0x0800a91c
 8006134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006138:	429a      	cmp	r2, r3
 800613a:	bfa8      	it	ge
 800613c:	461a      	movge	r2, r3
 800613e:	2a00      	cmp	r2, #0
 8006140:	4691      	mov	r9, r2
 8006142:	dc37      	bgt.n	80061b4 <_printf_float+0x374>
 8006144:	f04f 0b00 	mov.w	fp, #0
 8006148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800614c:	f104 021a 	add.w	r2, r4, #26
 8006150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	eba3 0309 	sub.w	r3, r3, r9
 8006158:	455b      	cmp	r3, fp
 800615a:	dc33      	bgt.n	80061c4 <_printf_float+0x384>
 800615c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006160:	429a      	cmp	r2, r3
 8006162:	db3b      	blt.n	80061dc <_printf_float+0x39c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	07da      	lsls	r2, r3, #31
 8006168:	d438      	bmi.n	80061dc <_printf_float+0x39c>
 800616a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616c:	9a05      	ldr	r2, [sp, #20]
 800616e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006170:	1a9a      	subs	r2, r3, r2
 8006172:	eba3 0901 	sub.w	r9, r3, r1
 8006176:	4591      	cmp	r9, r2
 8006178:	bfa8      	it	ge
 800617a:	4691      	movge	r9, r2
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	dc35      	bgt.n	80061ee <_printf_float+0x3ae>
 8006182:	f04f 0800 	mov.w	r8, #0
 8006186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800618a:	f104 0a1a 	add.w	sl, r4, #26
 800618e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	eba3 0309 	sub.w	r3, r3, r9
 8006198:	4543      	cmp	r3, r8
 800619a:	f77f af79 	ble.w	8006090 <_printf_float+0x250>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f aeaa 	beq.w	8005f02 <_printf_float+0xc2>
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	e7ec      	b.n	800618e <_printf_float+0x34e>
 80061b4:	4613      	mov	r3, r2
 80061b6:	4631      	mov	r1, r6
 80061b8:	4642      	mov	r2, r8
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	d1c0      	bne.n	8006144 <_printf_float+0x304>
 80061c2:	e69e      	b.n	8005f02 <_printf_float+0xc2>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	9205      	str	r2, [sp, #20]
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f ae97 	beq.w	8005f02 <_printf_float+0xc2>
 80061d4:	9a05      	ldr	r2, [sp, #20]
 80061d6:	f10b 0b01 	add.w	fp, fp, #1
 80061da:	e7b9      	b.n	8006150 <_printf_float+0x310>
 80061dc:	ee18 3a10 	vmov	r3, s16
 80061e0:	4652      	mov	r2, sl
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1be      	bne.n	800616a <_printf_float+0x32a>
 80061ec:	e689      	b.n	8005f02 <_printf_float+0xc2>
 80061ee:	9a05      	ldr	r2, [sp, #20]
 80061f0:	464b      	mov	r3, r9
 80061f2:	4442      	add	r2, r8
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	d1c1      	bne.n	8006182 <_printf_float+0x342>
 80061fe:	e680      	b.n	8005f02 <_printf_float+0xc2>
 8006200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006202:	2a01      	cmp	r2, #1
 8006204:	dc01      	bgt.n	800620a <_printf_float+0x3ca>
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d538      	bpl.n	800627c <_printf_float+0x43c>
 800620a:	2301      	movs	r3, #1
 800620c:	4642      	mov	r2, r8
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae74 	beq.w	8005f02 <_printf_float+0xc2>
 800621a:	ee18 3a10 	vmov	r3, s16
 800621e:	4652      	mov	r2, sl
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f ae6b 	beq.w	8005f02 <_printf_float+0xc2>
 800622c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	f7fa fc20 	bl	8000a78 <__aeabi_dcmpeq>
 8006238:	b9d8      	cbnz	r0, 8006272 <_printf_float+0x432>
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	f108 0201 	add.w	r2, r8, #1
 8006240:	3b01      	subs	r3, #1
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	d10e      	bne.n	800626a <_printf_float+0x42a>
 800624c:	e659      	b.n	8005f02 <_printf_float+0xc2>
 800624e:	2301      	movs	r3, #1
 8006250:	4652      	mov	r2, sl
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	f43f ae52 	beq.w	8005f02 <_printf_float+0xc2>
 800625e:	f108 0801 	add.w	r8, r8, #1
 8006262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	4543      	cmp	r3, r8
 8006268:	dcf1      	bgt.n	800624e <_printf_float+0x40e>
 800626a:	464b      	mov	r3, r9
 800626c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006270:	e6dc      	b.n	800602c <_printf_float+0x1ec>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 0a1a 	add.w	sl, r4, #26
 800627a:	e7f2      	b.n	8006262 <_printf_float+0x422>
 800627c:	2301      	movs	r3, #1
 800627e:	4642      	mov	r2, r8
 8006280:	e7df      	b.n	8006242 <_printf_float+0x402>
 8006282:	2301      	movs	r3, #1
 8006284:	464a      	mov	r2, r9
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f ae38 	beq.w	8005f02 <_printf_float+0xc2>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	4543      	cmp	r3, r8
 800629e:	dcf0      	bgt.n	8006282 <_printf_float+0x442>
 80062a0:	e6fa      	b.n	8006098 <_printf_float+0x258>
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	f104 0919 	add.w	r9, r4, #25
 80062aa:	e7f4      	b.n	8006296 <_printf_float+0x456>

080062ac <_printf_common>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	4616      	mov	r6, r2
 80062b2:	4699      	mov	r9, r3
 80062b4:	688a      	ldr	r2, [r1, #8]
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062bc:	4293      	cmp	r3, r2
 80062be:	bfb8      	it	lt
 80062c0:	4613      	movlt	r3, r2
 80062c2:	6033      	str	r3, [r6, #0]
 80062c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c8:	4607      	mov	r7, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b10a      	cbz	r2, 80062d2 <_printf_common+0x26>
 80062ce:	3301      	adds	r3, #1
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0699      	lsls	r1, r3, #26
 80062d6:	bf42      	ittt	mi
 80062d8:	6833      	ldrmi	r3, [r6, #0]
 80062da:	3302      	addmi	r3, #2
 80062dc:	6033      	strmi	r3, [r6, #0]
 80062de:	6825      	ldr	r5, [r4, #0]
 80062e0:	f015 0506 	ands.w	r5, r5, #6
 80062e4:	d106      	bne.n	80062f4 <_printf_common+0x48>
 80062e6:	f104 0a19 	add.w	sl, r4, #25
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	6832      	ldr	r2, [r6, #0]
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc26      	bgt.n	8006342 <_printf_common+0x96>
 80062f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f8:	1e13      	subs	r3, r2, #0
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	bf18      	it	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	0692      	lsls	r2, r2, #26
 8006302:	d42b      	bmi.n	800635c <_printf_common+0xb0>
 8006304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006308:	4649      	mov	r1, r9
 800630a:	4638      	mov	r0, r7
 800630c:	47c0      	blx	r8
 800630e:	3001      	adds	r0, #1
 8006310:	d01e      	beq.n	8006350 <_printf_common+0xa4>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	68e5      	ldr	r5, [r4, #12]
 8006316:	6832      	ldr	r2, [r6, #0]
 8006318:	f003 0306 	and.w	r3, r3, #6
 800631c:	2b04      	cmp	r3, #4
 800631e:	bf08      	it	eq
 8006320:	1aad      	subeq	r5, r5, r2
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	bf0c      	ite	eq
 8006328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800632c:	2500      	movne	r5, #0
 800632e:	4293      	cmp	r3, r2
 8006330:	bfc4      	itt	gt
 8006332:	1a9b      	subgt	r3, r3, r2
 8006334:	18ed      	addgt	r5, r5, r3
 8006336:	2600      	movs	r6, #0
 8006338:	341a      	adds	r4, #26
 800633a:	42b5      	cmp	r5, r6
 800633c:	d11a      	bne.n	8006374 <_printf_common+0xc8>
 800633e:	2000      	movs	r0, #0
 8006340:	e008      	b.n	8006354 <_printf_common+0xa8>
 8006342:	2301      	movs	r3, #1
 8006344:	4652      	mov	r2, sl
 8006346:	4649      	mov	r1, r9
 8006348:	4638      	mov	r0, r7
 800634a:	47c0      	blx	r8
 800634c:	3001      	adds	r0, #1
 800634e:	d103      	bne.n	8006358 <_printf_common+0xac>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	3501      	adds	r5, #1
 800635a:	e7c6      	b.n	80062ea <_printf_common+0x3e>
 800635c:	18e1      	adds	r1, r4, r3
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	2030      	movs	r0, #48	; 0x30
 8006362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006366:	4422      	add	r2, r4
 8006368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800636c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006370:	3302      	adds	r3, #2
 8006372:	e7c7      	b.n	8006304 <_printf_common+0x58>
 8006374:	2301      	movs	r3, #1
 8006376:	4622      	mov	r2, r4
 8006378:	4649      	mov	r1, r9
 800637a:	4638      	mov	r0, r7
 800637c:	47c0      	blx	r8
 800637e:	3001      	adds	r0, #1
 8006380:	d0e6      	beq.n	8006350 <_printf_common+0xa4>
 8006382:	3601      	adds	r6, #1
 8006384:	e7d9      	b.n	800633a <_printf_common+0x8e>
	...

08006388 <_printf_i>:
 8006388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	7e0f      	ldrb	r7, [r1, #24]
 800638e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006390:	2f78      	cmp	r7, #120	; 0x78
 8006392:	4691      	mov	r9, r2
 8006394:	4680      	mov	r8, r0
 8006396:	460c      	mov	r4, r1
 8006398:	469a      	mov	sl, r3
 800639a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800639e:	d807      	bhi.n	80063b0 <_printf_i+0x28>
 80063a0:	2f62      	cmp	r7, #98	; 0x62
 80063a2:	d80a      	bhi.n	80063ba <_printf_i+0x32>
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	f000 80d8 	beq.w	800655a <_printf_i+0x1d2>
 80063aa:	2f58      	cmp	r7, #88	; 0x58
 80063ac:	f000 80a3 	beq.w	80064f6 <_printf_i+0x16e>
 80063b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b8:	e03a      	b.n	8006430 <_printf_i+0xa8>
 80063ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063be:	2b15      	cmp	r3, #21
 80063c0:	d8f6      	bhi.n	80063b0 <_printf_i+0x28>
 80063c2:	a101      	add	r1, pc, #4	; (adr r1, 80063c8 <_printf_i+0x40>)
 80063c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006435 	.word	0x08006435
 80063d0:	080063b1 	.word	0x080063b1
 80063d4:	080063b1 	.word	0x080063b1
 80063d8:	080063b1 	.word	0x080063b1
 80063dc:	080063b1 	.word	0x080063b1
 80063e0:	08006435 	.word	0x08006435
 80063e4:	080063b1 	.word	0x080063b1
 80063e8:	080063b1 	.word	0x080063b1
 80063ec:	080063b1 	.word	0x080063b1
 80063f0:	080063b1 	.word	0x080063b1
 80063f4:	08006541 	.word	0x08006541
 80063f8:	08006465 	.word	0x08006465
 80063fc:	08006523 	.word	0x08006523
 8006400:	080063b1 	.word	0x080063b1
 8006404:	080063b1 	.word	0x080063b1
 8006408:	08006563 	.word	0x08006563
 800640c:	080063b1 	.word	0x080063b1
 8006410:	08006465 	.word	0x08006465
 8006414:	080063b1 	.word	0x080063b1
 8006418:	080063b1 	.word	0x080063b1
 800641c:	0800652b 	.word	0x0800652b
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	602a      	str	r2, [r5, #0]
 8006428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800642c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006430:	2301      	movs	r3, #1
 8006432:	e0a3      	b.n	800657c <_printf_i+0x1f4>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	6829      	ldr	r1, [r5, #0]
 8006438:	0606      	lsls	r6, r0, #24
 800643a:	f101 0304 	add.w	r3, r1, #4
 800643e:	d50a      	bpl.n	8006456 <_printf_i+0xce>
 8006440:	680e      	ldr	r6, [r1, #0]
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	2e00      	cmp	r6, #0
 8006446:	da03      	bge.n	8006450 <_printf_i+0xc8>
 8006448:	232d      	movs	r3, #45	; 0x2d
 800644a:	4276      	negs	r6, r6
 800644c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006450:	485e      	ldr	r0, [pc, #376]	; (80065cc <_printf_i+0x244>)
 8006452:	230a      	movs	r3, #10
 8006454:	e019      	b.n	800648a <_printf_i+0x102>
 8006456:	680e      	ldr	r6, [r1, #0]
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800645e:	bf18      	it	ne
 8006460:	b236      	sxthne	r6, r6
 8006462:	e7ef      	b.n	8006444 <_printf_i+0xbc>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	1d19      	adds	r1, r3, #4
 800646a:	6029      	str	r1, [r5, #0]
 800646c:	0601      	lsls	r1, r0, #24
 800646e:	d501      	bpl.n	8006474 <_printf_i+0xec>
 8006470:	681e      	ldr	r6, [r3, #0]
 8006472:	e002      	b.n	800647a <_printf_i+0xf2>
 8006474:	0646      	lsls	r6, r0, #25
 8006476:	d5fb      	bpl.n	8006470 <_printf_i+0xe8>
 8006478:	881e      	ldrh	r6, [r3, #0]
 800647a:	4854      	ldr	r0, [pc, #336]	; (80065cc <_printf_i+0x244>)
 800647c:	2f6f      	cmp	r7, #111	; 0x6f
 800647e:	bf0c      	ite	eq
 8006480:	2308      	moveq	r3, #8
 8006482:	230a      	movne	r3, #10
 8006484:	2100      	movs	r1, #0
 8006486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800648a:	6865      	ldr	r5, [r4, #4]
 800648c:	60a5      	str	r5, [r4, #8]
 800648e:	2d00      	cmp	r5, #0
 8006490:	bfa2      	ittt	ge
 8006492:	6821      	ldrge	r1, [r4, #0]
 8006494:	f021 0104 	bicge.w	r1, r1, #4
 8006498:	6021      	strge	r1, [r4, #0]
 800649a:	b90e      	cbnz	r6, 80064a0 <_printf_i+0x118>
 800649c:	2d00      	cmp	r5, #0
 800649e:	d04d      	beq.n	800653c <_printf_i+0x1b4>
 80064a0:	4615      	mov	r5, r2
 80064a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064a6:	fb03 6711 	mls	r7, r3, r1, r6
 80064aa:	5dc7      	ldrb	r7, [r0, r7]
 80064ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064b0:	4637      	mov	r7, r6
 80064b2:	42bb      	cmp	r3, r7
 80064b4:	460e      	mov	r6, r1
 80064b6:	d9f4      	bls.n	80064a2 <_printf_i+0x11a>
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d10b      	bne.n	80064d4 <_printf_i+0x14c>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	07de      	lsls	r6, r3, #31
 80064c0:	d508      	bpl.n	80064d4 <_printf_i+0x14c>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	6861      	ldr	r1, [r4, #4]
 80064c6:	4299      	cmp	r1, r3
 80064c8:	bfde      	ittt	le
 80064ca:	2330      	movle	r3, #48	; 0x30
 80064cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064d4:	1b52      	subs	r2, r2, r5
 80064d6:	6122      	str	r2, [r4, #16]
 80064d8:	f8cd a000 	str.w	sl, [sp]
 80064dc:	464b      	mov	r3, r9
 80064de:	aa03      	add	r2, sp, #12
 80064e0:	4621      	mov	r1, r4
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fee2 	bl	80062ac <_printf_common>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d14c      	bne.n	8006586 <_printf_i+0x1fe>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	b004      	add	sp, #16
 80064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f6:	4835      	ldr	r0, [pc, #212]	; (80065cc <_printf_i+0x244>)
 80064f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064fc:	6829      	ldr	r1, [r5, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	f851 6b04 	ldr.w	r6, [r1], #4
 8006504:	6029      	str	r1, [r5, #0]
 8006506:	061d      	lsls	r5, r3, #24
 8006508:	d514      	bpl.n	8006534 <_printf_i+0x1ac>
 800650a:	07df      	lsls	r7, r3, #31
 800650c:	bf44      	itt	mi
 800650e:	f043 0320 	orrmi.w	r3, r3, #32
 8006512:	6023      	strmi	r3, [r4, #0]
 8006514:	b91e      	cbnz	r6, 800651e <_printf_i+0x196>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f023 0320 	bic.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	2310      	movs	r3, #16
 8006520:	e7b0      	b.n	8006484 <_printf_i+0xfc>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	2378      	movs	r3, #120	; 0x78
 800652c:	4828      	ldr	r0, [pc, #160]	; (80065d0 <_printf_i+0x248>)
 800652e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006532:	e7e3      	b.n	80064fc <_printf_i+0x174>
 8006534:	0659      	lsls	r1, r3, #25
 8006536:	bf48      	it	mi
 8006538:	b2b6      	uxthmi	r6, r6
 800653a:	e7e6      	b.n	800650a <_printf_i+0x182>
 800653c:	4615      	mov	r5, r2
 800653e:	e7bb      	b.n	80064b8 <_printf_i+0x130>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6826      	ldr	r6, [r4, #0]
 8006544:	6961      	ldr	r1, [r4, #20]
 8006546:	1d18      	adds	r0, r3, #4
 8006548:	6028      	str	r0, [r5, #0]
 800654a:	0635      	lsls	r5, r6, #24
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	d501      	bpl.n	8006554 <_printf_i+0x1cc>
 8006550:	6019      	str	r1, [r3, #0]
 8006552:	e002      	b.n	800655a <_printf_i+0x1d2>
 8006554:	0670      	lsls	r0, r6, #25
 8006556:	d5fb      	bpl.n	8006550 <_printf_i+0x1c8>
 8006558:	8019      	strh	r1, [r3, #0]
 800655a:	2300      	movs	r3, #0
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	4615      	mov	r5, r2
 8006560:	e7ba      	b.n	80064d8 <_printf_i+0x150>
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	1d1a      	adds	r2, r3, #4
 8006566:	602a      	str	r2, [r5, #0]
 8006568:	681d      	ldr	r5, [r3, #0]
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	2100      	movs	r1, #0
 800656e:	4628      	mov	r0, r5
 8006570:	f7f9 fe0e 	bl	8000190 <memchr>
 8006574:	b108      	cbz	r0, 800657a <_printf_i+0x1f2>
 8006576:	1b40      	subs	r0, r0, r5
 8006578:	6060      	str	r0, [r4, #4]
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	2300      	movs	r3, #0
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006584:	e7a8      	b.n	80064d8 <_printf_i+0x150>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	462a      	mov	r2, r5
 800658a:	4649      	mov	r1, r9
 800658c:	4640      	mov	r0, r8
 800658e:	47d0      	blx	sl
 8006590:	3001      	adds	r0, #1
 8006592:	d0ab      	beq.n	80064ec <_printf_i+0x164>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	079b      	lsls	r3, r3, #30
 8006598:	d413      	bmi.n	80065c2 <_printf_i+0x23a>
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	4298      	cmp	r0, r3
 80065a0:	bfb8      	it	lt
 80065a2:	4618      	movlt	r0, r3
 80065a4:	e7a4      	b.n	80064f0 <_printf_i+0x168>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4632      	mov	r2, r6
 80065aa:	4649      	mov	r1, r9
 80065ac:	4640      	mov	r0, r8
 80065ae:	47d0      	blx	sl
 80065b0:	3001      	adds	r0, #1
 80065b2:	d09b      	beq.n	80064ec <_printf_i+0x164>
 80065b4:	3501      	adds	r5, #1
 80065b6:	68e3      	ldr	r3, [r4, #12]
 80065b8:	9903      	ldr	r1, [sp, #12]
 80065ba:	1a5b      	subs	r3, r3, r1
 80065bc:	42ab      	cmp	r3, r5
 80065be:	dcf2      	bgt.n	80065a6 <_printf_i+0x21e>
 80065c0:	e7eb      	b.n	800659a <_printf_i+0x212>
 80065c2:	2500      	movs	r5, #0
 80065c4:	f104 0619 	add.w	r6, r4, #25
 80065c8:	e7f5      	b.n	80065b6 <_printf_i+0x22e>
 80065ca:	bf00      	nop
 80065cc:	0800a91e 	.word	0x0800a91e
 80065d0:	0800a92f 	.word	0x0800a92f

080065d4 <_scanf_float>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	b087      	sub	sp, #28
 80065da:	4617      	mov	r7, r2
 80065dc:	9303      	str	r3, [sp, #12]
 80065de:	688b      	ldr	r3, [r1, #8]
 80065e0:	1e5a      	subs	r2, r3, #1
 80065e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80065e6:	bf83      	ittte	hi
 80065e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065ec:	195b      	addhi	r3, r3, r5
 80065ee:	9302      	strhi	r3, [sp, #8]
 80065f0:	2300      	movls	r3, #0
 80065f2:	bf86      	itte	hi
 80065f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065f8:	608b      	strhi	r3, [r1, #8]
 80065fa:	9302      	strls	r3, [sp, #8]
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	468b      	mov	fp, r1
 8006600:	2500      	movs	r5, #0
 8006602:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006606:	f84b 3b1c 	str.w	r3, [fp], #28
 800660a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800660e:	4680      	mov	r8, r0
 8006610:	460c      	mov	r4, r1
 8006612:	465e      	mov	r6, fp
 8006614:	46aa      	mov	sl, r5
 8006616:	46a9      	mov	r9, r5
 8006618:	9501      	str	r5, [sp, #4]
 800661a:	68a2      	ldr	r2, [r4, #8]
 800661c:	b152      	cbz	r2, 8006634 <_scanf_float+0x60>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b4e      	cmp	r3, #78	; 0x4e
 8006624:	d864      	bhi.n	80066f0 <_scanf_float+0x11c>
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d83c      	bhi.n	80066a4 <_scanf_float+0xd0>
 800662a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800662e:	b2c8      	uxtb	r0, r1
 8006630:	280e      	cmp	r0, #14
 8006632:	d93a      	bls.n	80066aa <_scanf_float+0xd6>
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	d003      	beq.n	8006642 <_scanf_float+0x6e>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	f1ba 0f01 	cmp.w	sl, #1
 800664a:	f200 8113 	bhi.w	8006874 <_scanf_float+0x2a0>
 800664e:	455e      	cmp	r6, fp
 8006650:	f200 8105 	bhi.w	800685e <_scanf_float+0x28a>
 8006654:	2501      	movs	r5, #1
 8006656:	4628      	mov	r0, r5
 8006658:	b007      	add	sp, #28
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006662:	2a0d      	cmp	r2, #13
 8006664:	d8e6      	bhi.n	8006634 <_scanf_float+0x60>
 8006666:	a101      	add	r1, pc, #4	; (adr r1, 800666c <_scanf_float+0x98>)
 8006668:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800666c:	080067ab 	.word	0x080067ab
 8006670:	08006635 	.word	0x08006635
 8006674:	08006635 	.word	0x08006635
 8006678:	08006635 	.word	0x08006635
 800667c:	0800680b 	.word	0x0800680b
 8006680:	080067e3 	.word	0x080067e3
 8006684:	08006635 	.word	0x08006635
 8006688:	08006635 	.word	0x08006635
 800668c:	080067b9 	.word	0x080067b9
 8006690:	08006635 	.word	0x08006635
 8006694:	08006635 	.word	0x08006635
 8006698:	08006635 	.word	0x08006635
 800669c:	08006635 	.word	0x08006635
 80066a0:	08006771 	.word	0x08006771
 80066a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80066a8:	e7db      	b.n	8006662 <_scanf_float+0x8e>
 80066aa:	290e      	cmp	r1, #14
 80066ac:	d8c2      	bhi.n	8006634 <_scanf_float+0x60>
 80066ae:	a001      	add	r0, pc, #4	; (adr r0, 80066b4 <_scanf_float+0xe0>)
 80066b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066b4:	08006763 	.word	0x08006763
 80066b8:	08006635 	.word	0x08006635
 80066bc:	08006763 	.word	0x08006763
 80066c0:	080067f7 	.word	0x080067f7
 80066c4:	08006635 	.word	0x08006635
 80066c8:	08006711 	.word	0x08006711
 80066cc:	0800674d 	.word	0x0800674d
 80066d0:	0800674d 	.word	0x0800674d
 80066d4:	0800674d 	.word	0x0800674d
 80066d8:	0800674d 	.word	0x0800674d
 80066dc:	0800674d 	.word	0x0800674d
 80066e0:	0800674d 	.word	0x0800674d
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	0800674d 	.word	0x0800674d
 80066ec:	0800674d 	.word	0x0800674d
 80066f0:	2b6e      	cmp	r3, #110	; 0x6e
 80066f2:	d809      	bhi.n	8006708 <_scanf_float+0x134>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d8b2      	bhi.n	800665e <_scanf_float+0x8a>
 80066f8:	2b54      	cmp	r3, #84	; 0x54
 80066fa:	d077      	beq.n	80067ec <_scanf_float+0x218>
 80066fc:	2b59      	cmp	r3, #89	; 0x59
 80066fe:	d199      	bne.n	8006634 <_scanf_float+0x60>
 8006700:	2d07      	cmp	r5, #7
 8006702:	d197      	bne.n	8006634 <_scanf_float+0x60>
 8006704:	2508      	movs	r5, #8
 8006706:	e029      	b.n	800675c <_scanf_float+0x188>
 8006708:	2b74      	cmp	r3, #116	; 0x74
 800670a:	d06f      	beq.n	80067ec <_scanf_float+0x218>
 800670c:	2b79      	cmp	r3, #121	; 0x79
 800670e:	e7f6      	b.n	80066fe <_scanf_float+0x12a>
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	05c8      	lsls	r0, r1, #23
 8006714:	d51a      	bpl.n	800674c <_scanf_float+0x178>
 8006716:	9b02      	ldr	r3, [sp, #8]
 8006718:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800671c:	6021      	str	r1, [r4, #0]
 800671e:	f109 0901 	add.w	r9, r9, #1
 8006722:	b11b      	cbz	r3, 800672c <_scanf_float+0x158>
 8006724:	3b01      	subs	r3, #1
 8006726:	3201      	adds	r2, #1
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	60a2      	str	r2, [r4, #8]
 800672c:	68a3      	ldr	r3, [r4, #8]
 800672e:	3b01      	subs	r3, #1
 8006730:	60a3      	str	r3, [r4, #8]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	3301      	adds	r3, #1
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3b01      	subs	r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	f340 8084 	ble.w	800684c <_scanf_float+0x278>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	e766      	b.n	800661a <_scanf_float+0x46>
 800674c:	eb1a 0f05 	cmn.w	sl, r5
 8006750:	f47f af70 	bne.w	8006634 <_scanf_float+0x60>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	f806 3b01 	strb.w	r3, [r6], #1
 8006760:	e7e4      	b.n	800672c <_scanf_float+0x158>
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	0610      	lsls	r0, r2, #24
 8006766:	f57f af65 	bpl.w	8006634 <_scanf_float+0x60>
 800676a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800676e:	e7f4      	b.n	800675a <_scanf_float+0x186>
 8006770:	f1ba 0f00 	cmp.w	sl, #0
 8006774:	d10e      	bne.n	8006794 <_scanf_float+0x1c0>
 8006776:	f1b9 0f00 	cmp.w	r9, #0
 800677a:	d10e      	bne.n	800679a <_scanf_float+0x1c6>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006782:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006786:	d108      	bne.n	800679a <_scanf_float+0x1c6>
 8006788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	f04f 0a01 	mov.w	sl, #1
 8006792:	e7e3      	b.n	800675c <_scanf_float+0x188>
 8006794:	f1ba 0f02 	cmp.w	sl, #2
 8006798:	d055      	beq.n	8006846 <_scanf_float+0x272>
 800679a:	2d01      	cmp	r5, #1
 800679c:	d002      	beq.n	80067a4 <_scanf_float+0x1d0>
 800679e:	2d04      	cmp	r5, #4
 80067a0:	f47f af48 	bne.w	8006634 <_scanf_float+0x60>
 80067a4:	3501      	adds	r5, #1
 80067a6:	b2ed      	uxtb	r5, r5
 80067a8:	e7d8      	b.n	800675c <_scanf_float+0x188>
 80067aa:	f1ba 0f01 	cmp.w	sl, #1
 80067ae:	f47f af41 	bne.w	8006634 <_scanf_float+0x60>
 80067b2:	f04f 0a02 	mov.w	sl, #2
 80067b6:	e7d1      	b.n	800675c <_scanf_float+0x188>
 80067b8:	b97d      	cbnz	r5, 80067da <_scanf_float+0x206>
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	f47f af3c 	bne.w	800663a <_scanf_float+0x66>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067cc:	f47f af39 	bne.w	8006642 <_scanf_float+0x6e>
 80067d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	2501      	movs	r5, #1
 80067d8:	e7c0      	b.n	800675c <_scanf_float+0x188>
 80067da:	2d03      	cmp	r5, #3
 80067dc:	d0e2      	beq.n	80067a4 <_scanf_float+0x1d0>
 80067de:	2d05      	cmp	r5, #5
 80067e0:	e7de      	b.n	80067a0 <_scanf_float+0x1cc>
 80067e2:	2d02      	cmp	r5, #2
 80067e4:	f47f af26 	bne.w	8006634 <_scanf_float+0x60>
 80067e8:	2503      	movs	r5, #3
 80067ea:	e7b7      	b.n	800675c <_scanf_float+0x188>
 80067ec:	2d06      	cmp	r5, #6
 80067ee:	f47f af21 	bne.w	8006634 <_scanf_float+0x60>
 80067f2:	2507      	movs	r5, #7
 80067f4:	e7b2      	b.n	800675c <_scanf_float+0x188>
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	0591      	lsls	r1, r2, #22
 80067fa:	f57f af1b 	bpl.w	8006634 <_scanf_float+0x60>
 80067fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	f8cd 9004 	str.w	r9, [sp, #4]
 8006808:	e7a8      	b.n	800675c <_scanf_float+0x188>
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006810:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006814:	d006      	beq.n	8006824 <_scanf_float+0x250>
 8006816:	0550      	lsls	r0, r2, #21
 8006818:	f57f af0c 	bpl.w	8006634 <_scanf_float+0x60>
 800681c:	f1b9 0f00 	cmp.w	r9, #0
 8006820:	f43f af0f 	beq.w	8006642 <_scanf_float+0x6e>
 8006824:	0591      	lsls	r1, r2, #22
 8006826:	bf58      	it	pl
 8006828:	9901      	ldrpl	r1, [sp, #4]
 800682a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800682e:	bf58      	it	pl
 8006830:	eba9 0101 	subpl.w	r1, r9, r1
 8006834:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006838:	bf58      	it	pl
 800683a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800683e:	6022      	str	r2, [r4, #0]
 8006840:	f04f 0900 	mov.w	r9, #0
 8006844:	e78a      	b.n	800675c <_scanf_float+0x188>
 8006846:	f04f 0a03 	mov.w	sl, #3
 800684a:	e787      	b.n	800675c <_scanf_float+0x188>
 800684c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006850:	4639      	mov	r1, r7
 8006852:	4640      	mov	r0, r8
 8006854:	4798      	blx	r3
 8006856:	2800      	cmp	r0, #0
 8006858:	f43f aedf 	beq.w	800661a <_scanf_float+0x46>
 800685c:	e6ea      	b.n	8006634 <_scanf_float+0x60>
 800685e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006866:	463a      	mov	r2, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	3b01      	subs	r3, #1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	e6ec      	b.n	800664e <_scanf_float+0x7a>
 8006874:	1e6b      	subs	r3, r5, #1
 8006876:	2b06      	cmp	r3, #6
 8006878:	d825      	bhi.n	80068c6 <_scanf_float+0x2f2>
 800687a:	2d02      	cmp	r5, #2
 800687c:	d836      	bhi.n	80068ec <_scanf_float+0x318>
 800687e:	455e      	cmp	r6, fp
 8006880:	f67f aee8 	bls.w	8006654 <_scanf_float+0x80>
 8006884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006888:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800688c:	463a      	mov	r2, r7
 800688e:	4640      	mov	r0, r8
 8006890:	4798      	blx	r3
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	3b01      	subs	r3, #1
 8006896:	6123      	str	r3, [r4, #16]
 8006898:	e7f1      	b.n	800687e <_scanf_float+0x2aa>
 800689a:	9802      	ldr	r0, [sp, #8]
 800689c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	463a      	mov	r2, r7
 80068a8:	4640      	mov	r0, r8
 80068aa:	4798      	blx	r3
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068b6:	fa5f fa8a 	uxtb.w	sl, sl
 80068ba:	f1ba 0f02 	cmp.w	sl, #2
 80068be:	d1ec      	bne.n	800689a <_scanf_float+0x2c6>
 80068c0:	3d03      	subs	r5, #3
 80068c2:	b2ed      	uxtb	r5, r5
 80068c4:	1b76      	subs	r6, r6, r5
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	05da      	lsls	r2, r3, #23
 80068ca:	d52f      	bpl.n	800692c <_scanf_float+0x358>
 80068cc:	055b      	lsls	r3, r3, #21
 80068ce:	d510      	bpl.n	80068f2 <_scanf_float+0x31e>
 80068d0:	455e      	cmp	r6, fp
 80068d2:	f67f aebf 	bls.w	8006654 <_scanf_float+0x80>
 80068d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068de:	463a      	mov	r2, r7
 80068e0:	4640      	mov	r0, r8
 80068e2:	4798      	blx	r3
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	e7f1      	b.n	80068d0 <_scanf_float+0x2fc>
 80068ec:	46aa      	mov	sl, r5
 80068ee:	9602      	str	r6, [sp, #8]
 80068f0:	e7df      	b.n	80068b2 <_scanf_float+0x2de>
 80068f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	2965      	cmp	r1, #101	; 0x65
 80068fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80068fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	d00c      	beq.n	8006920 <_scanf_float+0x34c>
 8006906:	2945      	cmp	r1, #69	; 0x45
 8006908:	d00a      	beq.n	8006920 <_scanf_float+0x34c>
 800690a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800690e:	463a      	mov	r2, r7
 8006910:	4640      	mov	r0, r8
 8006912:	4798      	blx	r3
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800691a:	3b01      	subs	r3, #1
 800691c:	1eb5      	subs	r5, r6, #2
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006924:	463a      	mov	r2, r7
 8006926:	4640      	mov	r0, r8
 8006928:	4798      	blx	r3
 800692a:	462e      	mov	r6, r5
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	f015 0510 	ands.w	r5, r5, #16
 8006932:	d159      	bne.n	80069e8 <_scanf_float+0x414>
 8006934:	7035      	strb	r5, [r6, #0]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d11b      	bne.n	800697a <_scanf_float+0x3a6>
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	454b      	cmp	r3, r9
 8006946:	eba3 0209 	sub.w	r2, r3, r9
 800694a:	d123      	bne.n	8006994 <_scanf_float+0x3c0>
 800694c:	2200      	movs	r2, #0
 800694e:	4659      	mov	r1, fp
 8006950:	4640      	mov	r0, r8
 8006952:	f000 ff27 	bl	80077a4 <_strtod_r>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	f012 0f02 	tst.w	r2, #2
 800695e:	ec57 6b10 	vmov	r6, r7, d0
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	d021      	beq.n	80069aa <_scanf_float+0x3d6>
 8006966:	9903      	ldr	r1, [sp, #12]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	600a      	str	r2, [r1, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	e9c3 6700 	strd	r6, r7, [r3]
 8006972:	68e3      	ldr	r3, [r4, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	60e3      	str	r3, [r4, #12]
 8006978:	e66d      	b.n	8006656 <_scanf_float+0x82>
 800697a:	9b04      	ldr	r3, [sp, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0e5      	beq.n	800694c <_scanf_float+0x378>
 8006980:	9905      	ldr	r1, [sp, #20]
 8006982:	230a      	movs	r3, #10
 8006984:	462a      	mov	r2, r5
 8006986:	3101      	adds	r1, #1
 8006988:	4640      	mov	r0, r8
 800698a:	f000 ff93 	bl	80078b4 <_strtol_r>
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	9e05      	ldr	r6, [sp, #20]
 8006992:	1ac2      	subs	r2, r0, r3
 8006994:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006998:	429e      	cmp	r6, r3
 800699a:	bf28      	it	cs
 800699c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069a0:	4912      	ldr	r1, [pc, #72]	; (80069ec <_scanf_float+0x418>)
 80069a2:	4630      	mov	r0, r6
 80069a4:	f000 f8ba 	bl	8006b1c <siprintf>
 80069a8:	e7d0      	b.n	800694c <_scanf_float+0x378>
 80069aa:	9903      	ldr	r1, [sp, #12]
 80069ac:	f012 0f04 	tst.w	r2, #4
 80069b0:	f103 0204 	add.w	r2, r3, #4
 80069b4:	600a      	str	r2, [r1, #0]
 80069b6:	d1d9      	bne.n	800696c <_scanf_float+0x398>
 80069b8:	f8d3 8000 	ldr.w	r8, [r3]
 80069bc:	ee10 2a10 	vmov	r2, s0
 80069c0:	ee10 0a10 	vmov	r0, s0
 80069c4:	463b      	mov	r3, r7
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7fa f888 	bl	8000adc <__aeabi_dcmpun>
 80069cc:	b128      	cbz	r0, 80069da <_scanf_float+0x406>
 80069ce:	4808      	ldr	r0, [pc, #32]	; (80069f0 <_scanf_float+0x41c>)
 80069d0:	f000 f89e 	bl	8006b10 <nanf>
 80069d4:	ed88 0a00 	vstr	s0, [r8]
 80069d8:	e7cb      	b.n	8006972 <_scanf_float+0x39e>
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7fa f8db 	bl	8000b98 <__aeabi_d2f>
 80069e2:	f8c8 0000 	str.w	r0, [r8]
 80069e6:	e7c4      	b.n	8006972 <_scanf_float+0x39e>
 80069e8:	2500      	movs	r5, #0
 80069ea:	e634      	b.n	8006656 <_scanf_float+0x82>
 80069ec:	0800a940 	.word	0x0800a940
 80069f0:	0800adb0 	.word	0x0800adb0

080069f4 <iprintf>:
 80069f4:	b40f      	push	{r0, r1, r2, r3}
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <iprintf+0x2c>)
 80069f8:	b513      	push	{r0, r1, r4, lr}
 80069fa:	681c      	ldr	r4, [r3, #0]
 80069fc:	b124      	cbz	r4, 8006a08 <iprintf+0x14>
 80069fe:	69a3      	ldr	r3, [r4, #24]
 8006a00:	b913      	cbnz	r3, 8006a08 <iprintf+0x14>
 8006a02:	4620      	mov	r0, r4
 8006a04:	f001 ffac 	bl	8008960 <__sinit>
 8006a08:	ab05      	add	r3, sp, #20
 8006a0a:	9a04      	ldr	r2, [sp, #16]
 8006a0c:	68a1      	ldr	r1, [r4, #8]
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f003 fb83 	bl	800a11c <_vfiprintf_r>
 8006a16:	b002      	add	sp, #8
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	b004      	add	sp, #16
 8006a1e:	4770      	bx	lr
 8006a20:	20000014 	.word	0x20000014

08006a24 <_puts_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	4605      	mov	r5, r0
 8006a2a:	b118      	cbz	r0, 8006a34 <_puts_r+0x10>
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_puts_r+0x10>
 8006a30:	f001 ff96 	bl	8008960 <__sinit>
 8006a34:	69ab      	ldr	r3, [r5, #24]
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	b913      	cbnz	r3, 8006a40 <_puts_r+0x1c>
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f001 ff90 	bl	8008960 <__sinit>
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <_puts_r+0xd0>)
 8006a42:	429c      	cmp	r4, r3
 8006a44:	d120      	bne.n	8006a88 <_puts_r+0x64>
 8006a46:	686c      	ldr	r4, [r5, #4]
 8006a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_puts_r+0x36>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_puts_r+0x36>
 8006a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a56:	f002 fb94 	bl	8009182 <__retarget_lock_acquire_recursive>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d51d      	bpl.n	8006a9c <_puts_r+0x78>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	b1db      	cbz	r3, 8006a9c <_puts_r+0x78>
 8006a64:	3e01      	subs	r6, #1
 8006a66:	68a3      	ldr	r3, [r4, #8]
 8006a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60a3      	str	r3, [r4, #8]
 8006a70:	bb39      	cbnz	r1, 8006ac2 <_puts_r+0x9e>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da38      	bge.n	8006ae8 <_puts_r+0xc4>
 8006a76:	4622      	mov	r2, r4
 8006a78:	210a      	movs	r1, #10
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 ff1c 	bl	80078b8 <__swbuf_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d011      	beq.n	8006aa8 <_puts_r+0x84>
 8006a84:	250a      	movs	r5, #10
 8006a86:	e011      	b.n	8006aac <_puts_r+0x88>
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <_puts_r+0xd4>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <_puts_r+0x6e>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7da      	b.n	8006a48 <_puts_r+0x24>
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <_puts_r+0xd8>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7d5      	b.n	8006a48 <_puts_r+0x24>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 ff5c 	bl	800795c <__swsetup_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d0dd      	beq.n	8006a64 <_puts_r+0x40>
 8006aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8006aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aae:	07da      	lsls	r2, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	059b      	lsls	r3, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aba:	f002 fb63 	bl	8009184 <__retarget_lock_release_recursive>
 8006abe:	4628      	mov	r0, r5
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da04      	bge.n	8006ad0 <_puts_r+0xac>
 8006ac6:	69a2      	ldr	r2, [r4, #24]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dc06      	bgt.n	8006ada <_puts_r+0xb6>
 8006acc:	290a      	cmp	r1, #10
 8006ace:	d004      	beq.n	8006ada <_puts_r+0xb6>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	7019      	strb	r1, [r3, #0]
 8006ad8:	e7c5      	b.n	8006a66 <_puts_r+0x42>
 8006ada:	4622      	mov	r2, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 feeb 	bl	80078b8 <__swbuf_r>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d1bf      	bne.n	8006a66 <_puts_r+0x42>
 8006ae6:	e7df      	b.n	8006aa8 <_puts_r+0x84>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	250a      	movs	r5, #10
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	701d      	strb	r5, [r3, #0]
 8006af2:	e7db      	b.n	8006aac <_puts_r+0x88>
 8006af4:	0800ab4c 	.word	0x0800ab4c
 8006af8:	0800ab6c 	.word	0x0800ab6c
 8006afc:	0800ab2c 	.word	0x0800ab2c

08006b00 <puts>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <puts+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bf8d 	b.w	8006a24 <_puts_r>
 8006b0a:	bf00      	nop
 8006b0c:	20000014 	.word	0x20000014

08006b10 <nanf>:
 8006b10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b18 <nanf+0x8>
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	7fc00000 	.word	0x7fc00000

08006b1c <siprintf>:
 8006b1c:	b40e      	push	{r1, r2, r3}
 8006b1e:	b500      	push	{lr}
 8006b20:	b09c      	sub	sp, #112	; 0x70
 8006b22:	ab1d      	add	r3, sp, #116	; 0x74
 8006b24:	9002      	str	r0, [sp, #8]
 8006b26:	9006      	str	r0, [sp, #24]
 8006b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <siprintf+0x38>)
 8006b2e:	9107      	str	r1, [sp, #28]
 8006b30:	9104      	str	r1, [sp, #16]
 8006b32:	4909      	ldr	r1, [pc, #36]	; (8006b58 <siprintf+0x3c>)
 8006b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b38:	9105      	str	r1, [sp, #20]
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	a902      	add	r1, sp, #8
 8006b40:	f003 f9c2 	bl	8009ec8 <_svfiprintf_r>
 8006b44:	9b02      	ldr	r3, [sp, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	b01c      	add	sp, #112	; 0x70
 8006b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b50:	b003      	add	sp, #12
 8006b52:	4770      	bx	lr
 8006b54:	20000014 	.word	0x20000014
 8006b58:	ffff0208 	.word	0xffff0208

08006b5c <sulp>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	ec45 4b10 	vmov	d0, r4, r5
 8006b66:	4616      	mov	r6, r2
 8006b68:	f002 ff0c 	bl	8009984 <__ulp>
 8006b6c:	ec51 0b10 	vmov	r0, r1, d0
 8006b70:	b17e      	cbz	r6, 8006b92 <sulp+0x36>
 8006b72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd09      	ble.n	8006b92 <sulp+0x36>
 8006b7e:	051b      	lsls	r3, r3, #20
 8006b80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b84:	2400      	movs	r4, #0
 8006b86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f7f9 fd0b 	bl	80005a8 <__aeabi_dmul>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	0000      	movs	r0, r0
	...

08006b98 <_strtod_l>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	ed2d 8b02 	vpush	{d8}
 8006ba0:	b09d      	sub	sp, #116	; 0x74
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9318      	str	r3, [sp, #96]	; 0x60
 8006ba8:	4ba2      	ldr	r3, [pc, #648]	; (8006e34 <_strtod_l+0x29c>)
 8006baa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	4688      	mov	r8, r1
 8006bb6:	f7f9 fae3 	bl	8000180 <strlen>
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	f04f 0b00 	mov.w	fp, #0
 8006bc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	2a2b      	cmp	r2, #43	; 0x2b
 8006bce:	d04e      	beq.n	8006c6e <_strtod_l+0xd6>
 8006bd0:	d83b      	bhi.n	8006c4a <_strtod_l+0xb2>
 8006bd2:	2a0d      	cmp	r2, #13
 8006bd4:	d834      	bhi.n	8006c40 <_strtod_l+0xa8>
 8006bd6:	2a08      	cmp	r2, #8
 8006bd8:	d834      	bhi.n	8006c44 <_strtod_l+0xac>
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	d03e      	beq.n	8006c5c <_strtod_l+0xc4>
 8006bde:	2300      	movs	r3, #0
 8006be0:	930a      	str	r3, [sp, #40]	; 0x28
 8006be2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006be4:	7833      	ldrb	r3, [r6, #0]
 8006be6:	2b30      	cmp	r3, #48	; 0x30
 8006be8:	f040 80b0 	bne.w	8006d4c <_strtod_l+0x1b4>
 8006bec:	7873      	ldrb	r3, [r6, #1]
 8006bee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bf2:	2b58      	cmp	r3, #88	; 0x58
 8006bf4:	d168      	bne.n	8006cc8 <_strtod_l+0x130>
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	ab18      	add	r3, sp, #96	; 0x60
 8006bfc:	9702      	str	r7, [sp, #8]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4a8d      	ldr	r2, [pc, #564]	; (8006e38 <_strtod_l+0x2a0>)
 8006c02:	ab19      	add	r3, sp, #100	; 0x64
 8006c04:	a917      	add	r1, sp, #92	; 0x5c
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 ffae 	bl	8008b68 <__gethex>
 8006c0c:	f010 0707 	ands.w	r7, r0, #7
 8006c10:	4605      	mov	r5, r0
 8006c12:	d005      	beq.n	8006c20 <_strtod_l+0x88>
 8006c14:	2f06      	cmp	r7, #6
 8006c16:	d12c      	bne.n	8006c72 <_strtod_l+0xda>
 8006c18:	3601      	adds	r6, #1
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 8590 	bne.w	8007748 <_strtod_l+0xbb0>
 8006c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2a:	b1eb      	cbz	r3, 8006c68 <_strtod_l+0xd0>
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c32:	ec43 2b10 	vmov	d0, r2, r3
 8006c36:	b01d      	add	sp, #116	; 0x74
 8006c38:	ecbd 8b02 	vpop	{d8}
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	2a20      	cmp	r2, #32
 8006c42:	d1cc      	bne.n	8006bde <_strtod_l+0x46>
 8006c44:	3301      	adds	r3, #1
 8006c46:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c48:	e7be      	b.n	8006bc8 <_strtod_l+0x30>
 8006c4a:	2a2d      	cmp	r2, #45	; 0x2d
 8006c4c:	d1c7      	bne.n	8006bde <_strtod_l+0x46>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	920a      	str	r2, [sp, #40]	; 0x28
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1c2      	bne.n	8006be2 <_strtod_l+0x4a>
 8006c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 856e 	bne.w	8007744 <_strtod_l+0xbac>
 8006c68:	4652      	mov	r2, sl
 8006c6a:	465b      	mov	r3, fp
 8006c6c:	e7e1      	b.n	8006c32 <_strtod_l+0x9a>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	e7ee      	b.n	8006c50 <_strtod_l+0xb8>
 8006c72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c74:	b13a      	cbz	r2, 8006c86 <_strtod_l+0xee>
 8006c76:	2135      	movs	r1, #53	; 0x35
 8006c78:	a81a      	add	r0, sp, #104	; 0x68
 8006c7a:	f002 ff8e 	bl	8009b9a <__copybits>
 8006c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c80:	4620      	mov	r0, r4
 8006c82:	f002 fb4d 	bl	8009320 <_Bfree>
 8006c86:	3f01      	subs	r7, #1
 8006c88:	2f04      	cmp	r7, #4
 8006c8a:	d806      	bhi.n	8006c9a <_strtod_l+0x102>
 8006c8c:	e8df f007 	tbb	[pc, r7]
 8006c90:	1714030a 	.word	0x1714030a
 8006c94:	0a          	.byte	0x0a
 8006c95:	00          	.byte	0x00
 8006c96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006c9a:	0728      	lsls	r0, r5, #28
 8006c9c:	d5c0      	bpl.n	8006c20 <_strtod_l+0x88>
 8006c9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006ca2:	e7bd      	b.n	8006c20 <_strtod_l+0x88>
 8006ca4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006ca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006caa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006cb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006cb6:	e7f0      	b.n	8006c9a <_strtod_l+0x102>
 8006cb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006e3c <_strtod_l+0x2a4>
 8006cbc:	e7ed      	b.n	8006c9a <_strtod_l+0x102>
 8006cbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006cc2:	f04f 3aff 	mov.w	sl, #4294967295
 8006cc6:	e7e8      	b.n	8006c9a <_strtod_l+0x102>
 8006cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d0f9      	beq.n	8006cc8 <_strtod_l+0x130>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0a3      	beq.n	8006c20 <_strtod_l+0x88>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f04f 0900 	mov.w	r9, #0
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ce2:	9308      	str	r3, [sp, #32]
 8006ce4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ce8:	464f      	mov	r7, r9
 8006cea:	220a      	movs	r2, #10
 8006cec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006cee:	7806      	ldrb	r6, [r0, #0]
 8006cf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006cf4:	b2d9      	uxtb	r1, r3
 8006cf6:	2909      	cmp	r1, #9
 8006cf8:	d92a      	bls.n	8006d50 <_strtod_l+0x1b8>
 8006cfa:	9905      	ldr	r1, [sp, #20]
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	f003 fb9a 	bl	800a436 <strncmp>
 8006d02:	b398      	cbz	r0, 8006d6c <_strtod_l+0x1d4>
 8006d04:	2000      	movs	r0, #0
 8006d06:	4632      	mov	r2, r6
 8006d08:	463d      	mov	r5, r7
 8006d0a:	9005      	str	r0, [sp, #20]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2a65      	cmp	r2, #101	; 0x65
 8006d10:	d001      	beq.n	8006d16 <_strtod_l+0x17e>
 8006d12:	2a45      	cmp	r2, #69	; 0x45
 8006d14:	d118      	bne.n	8006d48 <_strtod_l+0x1b0>
 8006d16:	b91d      	cbnz	r5, 8006d20 <_strtod_l+0x188>
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	4302      	orrs	r2, r0
 8006d1c:	d09e      	beq.n	8006c5c <_strtod_l+0xc4>
 8006d1e:	2500      	movs	r5, #0
 8006d20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006d24:	f108 0201 	add.w	r2, r8, #1
 8006d28:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006d2e:	2a2b      	cmp	r2, #43	; 0x2b
 8006d30:	d075      	beq.n	8006e1e <_strtod_l+0x286>
 8006d32:	2a2d      	cmp	r2, #45	; 0x2d
 8006d34:	d07b      	beq.n	8006e2e <_strtod_l+0x296>
 8006d36:	f04f 0c00 	mov.w	ip, #0
 8006d3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d3e:	2909      	cmp	r1, #9
 8006d40:	f240 8082 	bls.w	8006e48 <_strtod_l+0x2b0>
 8006d44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d48:	2600      	movs	r6, #0
 8006d4a:	e09d      	b.n	8006e88 <_strtod_l+0x2f0>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e7c4      	b.n	8006cda <_strtod_l+0x142>
 8006d50:	2f08      	cmp	r7, #8
 8006d52:	bfd8      	it	le
 8006d54:	9907      	ldrle	r1, [sp, #28]
 8006d56:	f100 0001 	add.w	r0, r0, #1
 8006d5a:	bfda      	itte	le
 8006d5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d60:	9307      	strle	r3, [sp, #28]
 8006d62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d66:	3701      	adds	r7, #1
 8006d68:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d6a:	e7bf      	b.n	8006cec <_strtod_l+0x154>
 8006d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d6e:	195a      	adds	r2, r3, r5
 8006d70:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d72:	5d5a      	ldrb	r2, [r3, r5]
 8006d74:	2f00      	cmp	r7, #0
 8006d76:	d037      	beq.n	8006de8 <_strtod_l+0x250>
 8006d78:	9005      	str	r0, [sp, #20]
 8006d7a:	463d      	mov	r5, r7
 8006d7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d80:	2b09      	cmp	r3, #9
 8006d82:	d912      	bls.n	8006daa <_strtod_l+0x212>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e7c2      	b.n	8006d0e <_strtod_l+0x176>
 8006d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d8e:	785a      	ldrb	r2, [r3, #1]
 8006d90:	3001      	adds	r0, #1
 8006d92:	2a30      	cmp	r2, #48	; 0x30
 8006d94:	d0f8      	beq.n	8006d88 <_strtod_l+0x1f0>
 8006d96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	f200 84d9 	bhi.w	8007752 <_strtod_l+0xbba>
 8006da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006da2:	9005      	str	r0, [sp, #20]
 8006da4:	2000      	movs	r0, #0
 8006da6:	9308      	str	r3, [sp, #32]
 8006da8:	4605      	mov	r5, r0
 8006daa:	3a30      	subs	r2, #48	; 0x30
 8006dac:	f100 0301 	add.w	r3, r0, #1
 8006db0:	d014      	beq.n	8006ddc <_strtod_l+0x244>
 8006db2:	9905      	ldr	r1, [sp, #20]
 8006db4:	4419      	add	r1, r3
 8006db6:	9105      	str	r1, [sp, #20]
 8006db8:	462b      	mov	r3, r5
 8006dba:	eb00 0e05 	add.w	lr, r0, r5
 8006dbe:	210a      	movs	r1, #10
 8006dc0:	4573      	cmp	r3, lr
 8006dc2:	d113      	bne.n	8006dec <_strtod_l+0x254>
 8006dc4:	182b      	adds	r3, r5, r0
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	f105 0501 	add.w	r5, r5, #1
 8006dcc:	4405      	add	r5, r0
 8006dce:	dc1c      	bgt.n	8006e0a <_strtod_l+0x272>
 8006dd0:	9907      	ldr	r1, [sp, #28]
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	fb03 2301 	mla	r3, r3, r1, r2
 8006dd8:	9307      	str	r3, [sp, #28]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006dde:	1c51      	adds	r1, r2, #1
 8006de0:	9117      	str	r1, [sp, #92]	; 0x5c
 8006de2:	7852      	ldrb	r2, [r2, #1]
 8006de4:	4618      	mov	r0, r3
 8006de6:	e7c9      	b.n	8006d7c <_strtod_l+0x1e4>
 8006de8:	4638      	mov	r0, r7
 8006dea:	e7d2      	b.n	8006d92 <_strtod_l+0x1fa>
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	dc04      	bgt.n	8006dfa <_strtod_l+0x262>
 8006df0:	9e07      	ldr	r6, [sp, #28]
 8006df2:	434e      	muls	r6, r1
 8006df4:	9607      	str	r6, [sp, #28]
 8006df6:	3301      	adds	r3, #1
 8006df8:	e7e2      	b.n	8006dc0 <_strtod_l+0x228>
 8006dfa:	f103 0c01 	add.w	ip, r3, #1
 8006dfe:	f1bc 0f10 	cmp.w	ip, #16
 8006e02:	bfd8      	it	le
 8006e04:	fb01 f909 	mulle.w	r9, r1, r9
 8006e08:	e7f5      	b.n	8006df6 <_strtod_l+0x25e>
 8006e0a:	2d10      	cmp	r5, #16
 8006e0c:	bfdc      	itt	le
 8006e0e:	230a      	movle	r3, #10
 8006e10:	fb03 2909 	mlale	r9, r3, r9, r2
 8006e14:	e7e1      	b.n	8006dda <_strtod_l+0x242>
 8006e16:	2300      	movs	r3, #0
 8006e18:	9305      	str	r3, [sp, #20]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e77c      	b.n	8006d18 <_strtod_l+0x180>
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	f108 0202 	add.w	r2, r8, #2
 8006e26:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e28:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006e2c:	e785      	b.n	8006d3a <_strtod_l+0x1a2>
 8006e2e:	f04f 0c01 	mov.w	ip, #1
 8006e32:	e7f6      	b.n	8006e22 <_strtod_l+0x28a>
 8006e34:	0800abf4 	.word	0x0800abf4
 8006e38:	0800a948 	.word	0x0800a948
 8006e3c:	7ff00000 	.word	0x7ff00000
 8006e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e42:	1c51      	adds	r1, r2, #1
 8006e44:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e46:	7852      	ldrb	r2, [r2, #1]
 8006e48:	2a30      	cmp	r2, #48	; 0x30
 8006e4a:	d0f9      	beq.n	8006e40 <_strtod_l+0x2a8>
 8006e4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e50:	2908      	cmp	r1, #8
 8006e52:	f63f af79 	bhi.w	8006d48 <_strtod_l+0x1b0>
 8006e56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e5c:	9206      	str	r2, [sp, #24]
 8006e5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e60:	1c51      	adds	r1, r2, #1
 8006e62:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e64:	7852      	ldrb	r2, [r2, #1]
 8006e66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006e6a:	2e09      	cmp	r6, #9
 8006e6c:	d937      	bls.n	8006ede <_strtod_l+0x346>
 8006e6e:	9e06      	ldr	r6, [sp, #24]
 8006e70:	1b89      	subs	r1, r1, r6
 8006e72:	2908      	cmp	r1, #8
 8006e74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006e78:	dc02      	bgt.n	8006e80 <_strtod_l+0x2e8>
 8006e7a:	4576      	cmp	r6, lr
 8006e7c:	bfa8      	it	ge
 8006e7e:	4676      	movge	r6, lr
 8006e80:	f1bc 0f00 	cmp.w	ip, #0
 8006e84:	d000      	beq.n	8006e88 <_strtod_l+0x2f0>
 8006e86:	4276      	negs	r6, r6
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	d14d      	bne.n	8006f28 <_strtod_l+0x390>
 8006e8c:	9904      	ldr	r1, [sp, #16]
 8006e8e:	4301      	orrs	r1, r0
 8006e90:	f47f aec6 	bne.w	8006c20 <_strtod_l+0x88>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f47f aee1 	bne.w	8006c5c <_strtod_l+0xc4>
 8006e9a:	2a69      	cmp	r2, #105	; 0x69
 8006e9c:	d027      	beq.n	8006eee <_strtod_l+0x356>
 8006e9e:	dc24      	bgt.n	8006eea <_strtod_l+0x352>
 8006ea0:	2a49      	cmp	r2, #73	; 0x49
 8006ea2:	d024      	beq.n	8006eee <_strtod_l+0x356>
 8006ea4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ea6:	f47f aed9 	bne.w	8006c5c <_strtod_l+0xc4>
 8006eaa:	499f      	ldr	r1, [pc, #636]	; (8007128 <_strtod_l+0x590>)
 8006eac:	a817      	add	r0, sp, #92	; 0x5c
 8006eae:	f002 f8b3 	bl	8009018 <__match>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f aed2 	beq.w	8006c5c <_strtod_l+0xc4>
 8006eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b28      	cmp	r3, #40	; 0x28
 8006ebe:	d12d      	bne.n	8006f1c <_strtod_l+0x384>
 8006ec0:	499a      	ldr	r1, [pc, #616]	; (800712c <_strtod_l+0x594>)
 8006ec2:	aa1a      	add	r2, sp, #104	; 0x68
 8006ec4:	a817      	add	r0, sp, #92	; 0x5c
 8006ec6:	f002 f8bb 	bl	8009040 <__hexnan>
 8006eca:	2805      	cmp	r0, #5
 8006ecc:	d126      	bne.n	8006f1c <_strtod_l+0x384>
 8006ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ed0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006ed4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006ed8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006edc:	e6a0      	b.n	8006c20 <_strtod_l+0x88>
 8006ede:	210a      	movs	r1, #10
 8006ee0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006ee4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ee8:	e7b9      	b.n	8006e5e <_strtod_l+0x2c6>
 8006eea:	2a6e      	cmp	r2, #110	; 0x6e
 8006eec:	e7db      	b.n	8006ea6 <_strtod_l+0x30e>
 8006eee:	4990      	ldr	r1, [pc, #576]	; (8007130 <_strtod_l+0x598>)
 8006ef0:	a817      	add	r0, sp, #92	; 0x5c
 8006ef2:	f002 f891 	bl	8009018 <__match>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f aeb0 	beq.w	8006c5c <_strtod_l+0xc4>
 8006efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006efe:	498d      	ldr	r1, [pc, #564]	; (8007134 <_strtod_l+0x59c>)
 8006f00:	3b01      	subs	r3, #1
 8006f02:	a817      	add	r0, sp, #92	; 0x5c
 8006f04:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f06:	f002 f887 	bl	8009018 <__match>
 8006f0a:	b910      	cbnz	r0, 8006f12 <_strtod_l+0x37a>
 8006f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f12:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007144 <_strtod_l+0x5ac>
 8006f16:	f04f 0a00 	mov.w	sl, #0
 8006f1a:	e681      	b.n	8006c20 <_strtod_l+0x88>
 8006f1c:	4886      	ldr	r0, [pc, #536]	; (8007138 <_strtod_l+0x5a0>)
 8006f1e:	f003 fa2f 	bl	800a380 <nan>
 8006f22:	ec5b ab10 	vmov	sl, fp, d0
 8006f26:	e67b      	b.n	8006c20 <_strtod_l+0x88>
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	9807      	ldr	r0, [sp, #28]
 8006f2c:	1af3      	subs	r3, r6, r3
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	bf08      	it	eq
 8006f32:	462f      	moveq	r7, r5
 8006f34:	2d10      	cmp	r5, #16
 8006f36:	9306      	str	r3, [sp, #24]
 8006f38:	46a8      	mov	r8, r5
 8006f3a:	bfa8      	it	ge
 8006f3c:	f04f 0810 	movge.w	r8, #16
 8006f40:	f7f9 fab8 	bl	80004b4 <__aeabi_ui2d>
 8006f44:	2d09      	cmp	r5, #9
 8006f46:	4682      	mov	sl, r0
 8006f48:	468b      	mov	fp, r1
 8006f4a:	dd13      	ble.n	8006f74 <_strtod_l+0x3dc>
 8006f4c:	4b7b      	ldr	r3, [pc, #492]	; (800713c <_strtod_l+0x5a4>)
 8006f4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f56:	f7f9 fb27 	bl	80005a8 <__aeabi_dmul>
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	4648      	mov	r0, r9
 8006f5e:	468b      	mov	fp, r1
 8006f60:	f7f9 faa8 	bl	80004b4 <__aeabi_ui2d>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4650      	mov	r0, sl
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	f7f9 f966 	bl	800023c <__adddf3>
 8006f70:	4682      	mov	sl, r0
 8006f72:	468b      	mov	fp, r1
 8006f74:	2d0f      	cmp	r5, #15
 8006f76:	dc38      	bgt.n	8006fea <_strtod_l+0x452>
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f43f ae50 	beq.w	8006c20 <_strtod_l+0x88>
 8006f80:	dd24      	ble.n	8006fcc <_strtod_l+0x434>
 8006f82:	2b16      	cmp	r3, #22
 8006f84:	dc0b      	bgt.n	8006f9e <_strtod_l+0x406>
 8006f86:	496d      	ldr	r1, [pc, #436]	; (800713c <_strtod_l+0x5a4>)
 8006f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f90:	4652      	mov	r2, sl
 8006f92:	465b      	mov	r3, fp
 8006f94:	f7f9 fb08 	bl	80005a8 <__aeabi_dmul>
 8006f98:	4682      	mov	sl, r0
 8006f9a:	468b      	mov	fp, r1
 8006f9c:	e640      	b.n	8006c20 <_strtod_l+0x88>
 8006f9e:	9a06      	ldr	r2, [sp, #24]
 8006fa0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	db20      	blt.n	8006fea <_strtod_l+0x452>
 8006fa8:	4c64      	ldr	r4, [pc, #400]	; (800713c <_strtod_l+0x5a4>)
 8006faa:	f1c5 050f 	rsb	r5, r5, #15
 8006fae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fb2:	4652      	mov	r2, sl
 8006fb4:	465b      	mov	r3, fp
 8006fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fba:	f7f9 faf5 	bl	80005a8 <__aeabi_dmul>
 8006fbe:	9b06      	ldr	r3, [sp, #24]
 8006fc0:	1b5d      	subs	r5, r3, r5
 8006fc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fca:	e7e3      	b.n	8006f94 <_strtod_l+0x3fc>
 8006fcc:	9b06      	ldr	r3, [sp, #24]
 8006fce:	3316      	adds	r3, #22
 8006fd0:	db0b      	blt.n	8006fea <_strtod_l+0x452>
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	1b9e      	subs	r6, r3, r6
 8006fd6:	4b59      	ldr	r3, [pc, #356]	; (800713c <_strtod_l+0x5a4>)
 8006fd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006fdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	f7f9 fc0a 	bl	80007fc <__aeabi_ddiv>
 8006fe8:	e7d6      	b.n	8006f98 <_strtod_l+0x400>
 8006fea:	9b06      	ldr	r3, [sp, #24]
 8006fec:	eba5 0808 	sub.w	r8, r5, r8
 8006ff0:	4498      	add	r8, r3
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	dd74      	ble.n	80070e2 <_strtod_l+0x54a>
 8006ff8:	f018 030f 	ands.w	r3, r8, #15
 8006ffc:	d00a      	beq.n	8007014 <_strtod_l+0x47c>
 8006ffe:	494f      	ldr	r1, [pc, #316]	; (800713c <_strtod_l+0x5a4>)
 8007000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800700c:	f7f9 facc 	bl	80005a8 <__aeabi_dmul>
 8007010:	4682      	mov	sl, r0
 8007012:	468b      	mov	fp, r1
 8007014:	f038 080f 	bics.w	r8, r8, #15
 8007018:	d04f      	beq.n	80070ba <_strtod_l+0x522>
 800701a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800701e:	dd22      	ble.n	8007066 <_strtod_l+0x4ce>
 8007020:	2500      	movs	r5, #0
 8007022:	462e      	mov	r6, r5
 8007024:	9507      	str	r5, [sp, #28]
 8007026:	9505      	str	r5, [sp, #20]
 8007028:	2322      	movs	r3, #34	; 0x22
 800702a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007144 <_strtod_l+0x5ac>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	f04f 0a00 	mov.w	sl, #0
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f43f adf2 	beq.w	8006c20 <_strtod_l+0x88>
 800703c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800703e:	4620      	mov	r0, r4
 8007040:	f002 f96e 	bl	8009320 <_Bfree>
 8007044:	9905      	ldr	r1, [sp, #20]
 8007046:	4620      	mov	r0, r4
 8007048:	f002 f96a 	bl	8009320 <_Bfree>
 800704c:	4631      	mov	r1, r6
 800704e:	4620      	mov	r0, r4
 8007050:	f002 f966 	bl	8009320 <_Bfree>
 8007054:	9907      	ldr	r1, [sp, #28]
 8007056:	4620      	mov	r0, r4
 8007058:	f002 f962 	bl	8009320 <_Bfree>
 800705c:	4629      	mov	r1, r5
 800705e:	4620      	mov	r0, r4
 8007060:	f002 f95e 	bl	8009320 <_Bfree>
 8007064:	e5dc      	b.n	8006c20 <_strtod_l+0x88>
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <_strtod_l+0x5a8>)
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	2300      	movs	r3, #0
 800706c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007070:	4650      	mov	r0, sl
 8007072:	4659      	mov	r1, fp
 8007074:	4699      	mov	r9, r3
 8007076:	f1b8 0f01 	cmp.w	r8, #1
 800707a:	dc21      	bgt.n	80070c0 <_strtod_l+0x528>
 800707c:	b10b      	cbz	r3, 8007082 <_strtod_l+0x4ea>
 800707e:	4682      	mov	sl, r0
 8007080:	468b      	mov	fp, r1
 8007082:	4b2f      	ldr	r3, [pc, #188]	; (8007140 <_strtod_l+0x5a8>)
 8007084:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007088:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800708c:	4652      	mov	r2, sl
 800708e:	465b      	mov	r3, fp
 8007090:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007094:	f7f9 fa88 	bl	80005a8 <__aeabi_dmul>
 8007098:	4b2a      	ldr	r3, [pc, #168]	; (8007144 <_strtod_l+0x5ac>)
 800709a:	460a      	mov	r2, r1
 800709c:	400b      	ands	r3, r1
 800709e:	492a      	ldr	r1, [pc, #168]	; (8007148 <_strtod_l+0x5b0>)
 80070a0:	428b      	cmp	r3, r1
 80070a2:	4682      	mov	sl, r0
 80070a4:	d8bc      	bhi.n	8007020 <_strtod_l+0x488>
 80070a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80070aa:	428b      	cmp	r3, r1
 80070ac:	bf86      	itte	hi
 80070ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800714c <_strtod_l+0x5b4>
 80070b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80070b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80070ba:	2300      	movs	r3, #0
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	e084      	b.n	80071ca <_strtod_l+0x632>
 80070c0:	f018 0f01 	tst.w	r8, #1
 80070c4:	d005      	beq.n	80070d2 <_strtod_l+0x53a>
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 fa6c 	bl	80005a8 <__aeabi_dmul>
 80070d0:	2301      	movs	r3, #1
 80070d2:	9a04      	ldr	r2, [sp, #16]
 80070d4:	3208      	adds	r2, #8
 80070d6:	f109 0901 	add.w	r9, r9, #1
 80070da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070de:	9204      	str	r2, [sp, #16]
 80070e0:	e7c9      	b.n	8007076 <_strtod_l+0x4de>
 80070e2:	d0ea      	beq.n	80070ba <_strtod_l+0x522>
 80070e4:	f1c8 0800 	rsb	r8, r8, #0
 80070e8:	f018 020f 	ands.w	r2, r8, #15
 80070ec:	d00a      	beq.n	8007104 <_strtod_l+0x56c>
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <_strtod_l+0x5a4>)
 80070f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 fb7e 	bl	80007fc <__aeabi_ddiv>
 8007100:	4682      	mov	sl, r0
 8007102:	468b      	mov	fp, r1
 8007104:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007108:	d0d7      	beq.n	80070ba <_strtod_l+0x522>
 800710a:	f1b8 0f1f 	cmp.w	r8, #31
 800710e:	dd1f      	ble.n	8007150 <_strtod_l+0x5b8>
 8007110:	2500      	movs	r5, #0
 8007112:	462e      	mov	r6, r5
 8007114:	9507      	str	r5, [sp, #28]
 8007116:	9505      	str	r5, [sp, #20]
 8007118:	2322      	movs	r3, #34	; 0x22
 800711a:	f04f 0a00 	mov.w	sl, #0
 800711e:	f04f 0b00 	mov.w	fp, #0
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	e786      	b.n	8007034 <_strtod_l+0x49c>
 8007126:	bf00      	nop
 8007128:	0800a919 	.word	0x0800a919
 800712c:	0800a95c 	.word	0x0800a95c
 8007130:	0800a911 	.word	0x0800a911
 8007134:	0800aa9c 	.word	0x0800aa9c
 8007138:	0800adb0 	.word	0x0800adb0
 800713c:	0800ac90 	.word	0x0800ac90
 8007140:	0800ac68 	.word	0x0800ac68
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	7ca00000 	.word	0x7ca00000
 800714c:	7fefffff 	.word	0x7fefffff
 8007150:	f018 0310 	ands.w	r3, r8, #16
 8007154:	bf18      	it	ne
 8007156:	236a      	movne	r3, #106	; 0x6a
 8007158:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007508 <_strtod_l+0x970>
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	4650      	mov	r0, sl
 8007160:	4659      	mov	r1, fp
 8007162:	2300      	movs	r3, #0
 8007164:	f018 0f01 	tst.w	r8, #1
 8007168:	d004      	beq.n	8007174 <_strtod_l+0x5dc>
 800716a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800716e:	f7f9 fa1b 	bl	80005a8 <__aeabi_dmul>
 8007172:	2301      	movs	r3, #1
 8007174:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007178:	f109 0908 	add.w	r9, r9, #8
 800717c:	d1f2      	bne.n	8007164 <_strtod_l+0x5cc>
 800717e:	b10b      	cbz	r3, 8007184 <_strtod_l+0x5ec>
 8007180:	4682      	mov	sl, r0
 8007182:	468b      	mov	fp, r1
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	b1c3      	cbz	r3, 80071ba <_strtod_l+0x622>
 8007188:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800718c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007190:	2b00      	cmp	r3, #0
 8007192:	4659      	mov	r1, fp
 8007194:	dd11      	ble.n	80071ba <_strtod_l+0x622>
 8007196:	2b1f      	cmp	r3, #31
 8007198:	f340 8124 	ble.w	80073e4 <_strtod_l+0x84c>
 800719c:	2b34      	cmp	r3, #52	; 0x34
 800719e:	bfde      	ittt	le
 80071a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80071a4:	f04f 33ff 	movle.w	r3, #4294967295
 80071a8:	fa03 f202 	lslle.w	r2, r3, r2
 80071ac:	f04f 0a00 	mov.w	sl, #0
 80071b0:	bfcc      	ite	gt
 80071b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80071b6:	ea02 0b01 	andle.w	fp, r2, r1
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 fc59 	bl	8000a78 <__aeabi_dcmpeq>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d1a2      	bne.n	8007110 <_strtod_l+0x578>
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	9908      	ldr	r1, [sp, #32]
 80071d0:	462b      	mov	r3, r5
 80071d2:	463a      	mov	r2, r7
 80071d4:	4620      	mov	r0, r4
 80071d6:	f002 f90b 	bl	80093f0 <__s2b>
 80071da:	9007      	str	r0, [sp, #28]
 80071dc:	2800      	cmp	r0, #0
 80071de:	f43f af1f 	beq.w	8007020 <_strtod_l+0x488>
 80071e2:	9b05      	ldr	r3, [sp, #20]
 80071e4:	1b9e      	subs	r6, r3, r6
 80071e6:	9b06      	ldr	r3, [sp, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfb4      	ite	lt
 80071ec:	4633      	movlt	r3, r6
 80071ee:	2300      	movge	r3, #0
 80071f0:	930c      	str	r3, [sp, #48]	; 0x30
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	2500      	movs	r5, #0
 80071f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071fa:	9312      	str	r3, [sp, #72]	; 0x48
 80071fc:	462e      	mov	r6, r5
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	4620      	mov	r0, r4
 8007202:	6859      	ldr	r1, [r3, #4]
 8007204:	f002 f84c 	bl	80092a0 <_Balloc>
 8007208:	9005      	str	r0, [sp, #20]
 800720a:	2800      	cmp	r0, #0
 800720c:	f43f af0c 	beq.w	8007028 <_strtod_l+0x490>
 8007210:	9b07      	ldr	r3, [sp, #28]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	3202      	adds	r2, #2
 8007216:	f103 010c 	add.w	r1, r3, #12
 800721a:	0092      	lsls	r2, r2, #2
 800721c:	300c      	adds	r0, #12
 800721e:	f002 f831 	bl	8009284 <memcpy>
 8007222:	ec4b ab10 	vmov	d0, sl, fp
 8007226:	aa1a      	add	r2, sp, #104	; 0x68
 8007228:	a919      	add	r1, sp, #100	; 0x64
 800722a:	4620      	mov	r0, r4
 800722c:	f002 fc26 	bl	8009a7c <__d2b>
 8007230:	ec4b ab18 	vmov	d8, sl, fp
 8007234:	9018      	str	r0, [sp, #96]	; 0x60
 8007236:	2800      	cmp	r0, #0
 8007238:	f43f aef6 	beq.w	8007028 <_strtod_l+0x490>
 800723c:	2101      	movs	r1, #1
 800723e:	4620      	mov	r0, r4
 8007240:	f002 f970 	bl	8009524 <__i2b>
 8007244:	4606      	mov	r6, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	f43f aeee 	beq.w	8007028 <_strtod_l+0x490>
 800724c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800724e:	9904      	ldr	r1, [sp, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfab      	itete	ge
 8007254:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007256:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007258:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800725a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800725e:	bfac      	ite	ge
 8007260:	eb03 0902 	addge.w	r9, r3, r2
 8007264:	1ad7      	sublt	r7, r2, r3
 8007266:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007268:	eba3 0801 	sub.w	r8, r3, r1
 800726c:	4490      	add	r8, r2
 800726e:	4ba1      	ldr	r3, [pc, #644]	; (80074f4 <_strtod_l+0x95c>)
 8007270:	f108 38ff 	add.w	r8, r8, #4294967295
 8007274:	4598      	cmp	r8, r3
 8007276:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800727a:	f280 80c7 	bge.w	800740c <_strtod_l+0x874>
 800727e:	eba3 0308 	sub.w	r3, r3, r8
 8007282:	2b1f      	cmp	r3, #31
 8007284:	eba2 0203 	sub.w	r2, r2, r3
 8007288:	f04f 0101 	mov.w	r1, #1
 800728c:	f300 80b1 	bgt.w	80073f2 <_strtod_l+0x85a>
 8007290:	fa01 f303 	lsl.w	r3, r1, r3
 8007294:	930d      	str	r3, [sp, #52]	; 0x34
 8007296:	2300      	movs	r3, #0
 8007298:	9308      	str	r3, [sp, #32]
 800729a:	eb09 0802 	add.w	r8, r9, r2
 800729e:	9b04      	ldr	r3, [sp, #16]
 80072a0:	45c1      	cmp	r9, r8
 80072a2:	4417      	add	r7, r2
 80072a4:	441f      	add	r7, r3
 80072a6:	464b      	mov	r3, r9
 80072a8:	bfa8      	it	ge
 80072aa:	4643      	movge	r3, r8
 80072ac:	42bb      	cmp	r3, r7
 80072ae:	bfa8      	it	ge
 80072b0:	463b      	movge	r3, r7
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfc2      	ittt	gt
 80072b6:	eba8 0803 	subgt.w	r8, r8, r3
 80072ba:	1aff      	subgt	r7, r7, r3
 80072bc:	eba9 0903 	subgt.w	r9, r9, r3
 80072c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd17      	ble.n	80072f6 <_strtod_l+0x75e>
 80072c6:	4631      	mov	r1, r6
 80072c8:	461a      	mov	r2, r3
 80072ca:	4620      	mov	r0, r4
 80072cc:	f002 f9ea 	bl	80096a4 <__pow5mult>
 80072d0:	4606      	mov	r6, r0
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f43f aea8 	beq.w	8007028 <_strtod_l+0x490>
 80072d8:	4601      	mov	r1, r0
 80072da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072dc:	4620      	mov	r0, r4
 80072de:	f002 f937 	bl	8009550 <__multiply>
 80072e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f ae9f 	beq.w	8007028 <_strtod_l+0x490>
 80072ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072ec:	4620      	mov	r0, r4
 80072ee:	f002 f817 	bl	8009320 <_Bfree>
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	9318      	str	r3, [sp, #96]	; 0x60
 80072f6:	f1b8 0f00 	cmp.w	r8, #0
 80072fa:	f300 808c 	bgt.w	8007416 <_strtod_l+0x87e>
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dd08      	ble.n	8007316 <_strtod_l+0x77e>
 8007304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007306:	9905      	ldr	r1, [sp, #20]
 8007308:	4620      	mov	r0, r4
 800730a:	f002 f9cb 	bl	80096a4 <__pow5mult>
 800730e:	9005      	str	r0, [sp, #20]
 8007310:	2800      	cmp	r0, #0
 8007312:	f43f ae89 	beq.w	8007028 <_strtod_l+0x490>
 8007316:	2f00      	cmp	r7, #0
 8007318:	dd08      	ble.n	800732c <_strtod_l+0x794>
 800731a:	9905      	ldr	r1, [sp, #20]
 800731c:	463a      	mov	r2, r7
 800731e:	4620      	mov	r0, r4
 8007320:	f002 fa1a 	bl	8009758 <__lshift>
 8007324:	9005      	str	r0, [sp, #20]
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f ae7e 	beq.w	8007028 <_strtod_l+0x490>
 800732c:	f1b9 0f00 	cmp.w	r9, #0
 8007330:	dd08      	ble.n	8007344 <_strtod_l+0x7ac>
 8007332:	4631      	mov	r1, r6
 8007334:	464a      	mov	r2, r9
 8007336:	4620      	mov	r0, r4
 8007338:	f002 fa0e 	bl	8009758 <__lshift>
 800733c:	4606      	mov	r6, r0
 800733e:	2800      	cmp	r0, #0
 8007340:	f43f ae72 	beq.w	8007028 <_strtod_l+0x490>
 8007344:	9a05      	ldr	r2, [sp, #20]
 8007346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007348:	4620      	mov	r0, r4
 800734a:	f002 fa91 	bl	8009870 <__mdiff>
 800734e:	4605      	mov	r5, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	f43f ae69 	beq.w	8007028 <_strtod_l+0x490>
 8007356:	68c3      	ldr	r3, [r0, #12]
 8007358:	930b      	str	r3, [sp, #44]	; 0x2c
 800735a:	2300      	movs	r3, #0
 800735c:	60c3      	str	r3, [r0, #12]
 800735e:	4631      	mov	r1, r6
 8007360:	f002 fa6a 	bl	8009838 <__mcmp>
 8007364:	2800      	cmp	r0, #0
 8007366:	da60      	bge.n	800742a <_strtod_l+0x892>
 8007368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800736a:	ea53 030a 	orrs.w	r3, r3, sl
 800736e:	f040 8082 	bne.w	8007476 <_strtod_l+0x8de>
 8007372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007376:	2b00      	cmp	r3, #0
 8007378:	d17d      	bne.n	8007476 <_strtod_l+0x8de>
 800737a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800737e:	0d1b      	lsrs	r3, r3, #20
 8007380:	051b      	lsls	r3, r3, #20
 8007382:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007386:	d976      	bls.n	8007476 <_strtod_l+0x8de>
 8007388:	696b      	ldr	r3, [r5, #20]
 800738a:	b913      	cbnz	r3, 8007392 <_strtod_l+0x7fa>
 800738c:	692b      	ldr	r3, [r5, #16]
 800738e:	2b01      	cmp	r3, #1
 8007390:	dd71      	ble.n	8007476 <_strtod_l+0x8de>
 8007392:	4629      	mov	r1, r5
 8007394:	2201      	movs	r2, #1
 8007396:	4620      	mov	r0, r4
 8007398:	f002 f9de 	bl	8009758 <__lshift>
 800739c:	4631      	mov	r1, r6
 800739e:	4605      	mov	r5, r0
 80073a0:	f002 fa4a 	bl	8009838 <__mcmp>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	dd66      	ble.n	8007476 <_strtod_l+0x8de>
 80073a8:	9904      	ldr	r1, [sp, #16]
 80073aa:	4a53      	ldr	r2, [pc, #332]	; (80074f8 <_strtod_l+0x960>)
 80073ac:	465b      	mov	r3, fp
 80073ae:	2900      	cmp	r1, #0
 80073b0:	f000 8081 	beq.w	80074b6 <_strtod_l+0x91e>
 80073b4:	ea02 010b 	and.w	r1, r2, fp
 80073b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80073bc:	dc7b      	bgt.n	80074b6 <_strtod_l+0x91e>
 80073be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80073c2:	f77f aea9 	ble.w	8007118 <_strtod_l+0x580>
 80073c6:	4b4d      	ldr	r3, [pc, #308]	; (80074fc <_strtod_l+0x964>)
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	2200      	movs	r2, #0
 80073ce:	f7f9 f8eb 	bl	80005a8 <__aeabi_dmul>
 80073d2:	460b      	mov	r3, r1
 80073d4:	4303      	orrs	r3, r0
 80073d6:	bf08      	it	eq
 80073d8:	2322      	moveq	r3, #34	; 0x22
 80073da:	4682      	mov	sl, r0
 80073dc:	468b      	mov	fp, r1
 80073de:	bf08      	it	eq
 80073e0:	6023      	streq	r3, [r4, #0]
 80073e2:	e62b      	b.n	800703c <_strtod_l+0x4a4>
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	ea03 0a0a 	and.w	sl, r3, sl
 80073f0:	e6e3      	b.n	80071ba <_strtod_l+0x622>
 80073f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80073f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80073fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80073fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007402:	fa01 f308 	lsl.w	r3, r1, r8
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	910d      	str	r1, [sp, #52]	; 0x34
 800740a:	e746      	b.n	800729a <_strtod_l+0x702>
 800740c:	2300      	movs	r3, #0
 800740e:	9308      	str	r3, [sp, #32]
 8007410:	2301      	movs	r3, #1
 8007412:	930d      	str	r3, [sp, #52]	; 0x34
 8007414:	e741      	b.n	800729a <_strtod_l+0x702>
 8007416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007418:	4642      	mov	r2, r8
 800741a:	4620      	mov	r0, r4
 800741c:	f002 f99c 	bl	8009758 <__lshift>
 8007420:	9018      	str	r0, [sp, #96]	; 0x60
 8007422:	2800      	cmp	r0, #0
 8007424:	f47f af6b 	bne.w	80072fe <_strtod_l+0x766>
 8007428:	e5fe      	b.n	8007028 <_strtod_l+0x490>
 800742a:	465f      	mov	r7, fp
 800742c:	d16e      	bne.n	800750c <_strtod_l+0x974>
 800742e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007434:	b342      	cbz	r2, 8007488 <_strtod_l+0x8f0>
 8007436:	4a32      	ldr	r2, [pc, #200]	; (8007500 <_strtod_l+0x968>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d128      	bne.n	800748e <_strtod_l+0x8f6>
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	4651      	mov	r1, sl
 8007440:	b1eb      	cbz	r3, 800747e <_strtod_l+0x8e6>
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <_strtod_l+0x960>)
 8007444:	403b      	ands	r3, r7
 8007446:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800744a:	f04f 32ff 	mov.w	r2, #4294967295
 800744e:	d819      	bhi.n	8007484 <_strtod_l+0x8ec>
 8007450:	0d1b      	lsrs	r3, r3, #20
 8007452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	4299      	cmp	r1, r3
 800745c:	d117      	bne.n	800748e <_strtod_l+0x8f6>
 800745e:	4b29      	ldr	r3, [pc, #164]	; (8007504 <_strtod_l+0x96c>)
 8007460:	429f      	cmp	r7, r3
 8007462:	d102      	bne.n	800746a <_strtod_l+0x8d2>
 8007464:	3101      	adds	r1, #1
 8007466:	f43f addf 	beq.w	8007028 <_strtod_l+0x490>
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <_strtod_l+0x960>)
 800746c:	403b      	ands	r3, r7
 800746e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007472:	f04f 0a00 	mov.w	sl, #0
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1a4      	bne.n	80073c6 <_strtod_l+0x82e>
 800747c:	e5de      	b.n	800703c <_strtod_l+0x4a4>
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	e7ea      	b.n	800745a <_strtod_l+0x8c2>
 8007484:	4613      	mov	r3, r2
 8007486:	e7e8      	b.n	800745a <_strtod_l+0x8c2>
 8007488:	ea53 030a 	orrs.w	r3, r3, sl
 800748c:	d08c      	beq.n	80073a8 <_strtod_l+0x810>
 800748e:	9b08      	ldr	r3, [sp, #32]
 8007490:	b1db      	cbz	r3, 80074ca <_strtod_l+0x932>
 8007492:	423b      	tst	r3, r7
 8007494:	d0ef      	beq.n	8007476 <_strtod_l+0x8de>
 8007496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	4650      	mov	r0, sl
 800749c:	4659      	mov	r1, fp
 800749e:	b1c3      	cbz	r3, 80074d2 <_strtod_l+0x93a>
 80074a0:	f7ff fb5c 	bl	8006b5c <sulp>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	ec51 0b18 	vmov	r0, r1, d8
 80074ac:	f7f8 fec6 	bl	800023c <__adddf3>
 80074b0:	4682      	mov	sl, r0
 80074b2:	468b      	mov	fp, r1
 80074b4:	e7df      	b.n	8007476 <_strtod_l+0x8de>
 80074b6:	4013      	ands	r3, r2
 80074b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80074bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074c4:	f04f 3aff 	mov.w	sl, #4294967295
 80074c8:	e7d5      	b.n	8007476 <_strtod_l+0x8de>
 80074ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074cc:	ea13 0f0a 	tst.w	r3, sl
 80074d0:	e7e0      	b.n	8007494 <_strtod_l+0x8fc>
 80074d2:	f7ff fb43 	bl	8006b5c <sulp>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	ec51 0b18 	vmov	r0, r1, d8
 80074de:	f7f8 feab 	bl	8000238 <__aeabi_dsub>
 80074e2:	2200      	movs	r2, #0
 80074e4:	2300      	movs	r3, #0
 80074e6:	4682      	mov	sl, r0
 80074e8:	468b      	mov	fp, r1
 80074ea:	f7f9 fac5 	bl	8000a78 <__aeabi_dcmpeq>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d0c1      	beq.n	8007476 <_strtod_l+0x8de>
 80074f2:	e611      	b.n	8007118 <_strtod_l+0x580>
 80074f4:	fffffc02 	.word	0xfffffc02
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	39500000 	.word	0x39500000
 8007500:	000fffff 	.word	0x000fffff
 8007504:	7fefffff 	.word	0x7fefffff
 8007508:	0800a970 	.word	0x0800a970
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	f002 fb10 	bl	8009b34 <__ratio>
 8007514:	ec59 8b10 	vmov	r8, r9, d0
 8007518:	ee10 0a10 	vmov	r0, s0
 800751c:	2200      	movs	r2, #0
 800751e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007522:	4649      	mov	r1, r9
 8007524:	f7f9 fabc 	bl	8000aa0 <__aeabi_dcmple>
 8007528:	2800      	cmp	r0, #0
 800752a:	d07a      	beq.n	8007622 <_strtod_l+0xa8a>
 800752c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04a      	beq.n	80075c8 <_strtod_l+0xa30>
 8007532:	4b95      	ldr	r3, [pc, #596]	; (8007788 <_strtod_l+0xbf0>)
 8007534:	2200      	movs	r2, #0
 8007536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800753a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007788 <_strtod_l+0xbf0>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	4b92      	ldr	r3, [pc, #584]	; (800778c <_strtod_l+0xbf4>)
 8007544:	403b      	ands	r3, r7
 8007546:	930d      	str	r3, [sp, #52]	; 0x34
 8007548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_strtod_l+0xbf8>)
 800754c:	429a      	cmp	r2, r3
 800754e:	f040 80b0 	bne.w	80076b2 <_strtod_l+0xb1a>
 8007552:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007556:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800755a:	ec4b ab10 	vmov	d0, sl, fp
 800755e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007562:	f002 fa0f 	bl	8009984 <__ulp>
 8007566:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800756a:	ec53 2b10 	vmov	r2, r3, d0
 800756e:	f7f9 f81b 	bl	80005a8 <__aeabi_dmul>
 8007572:	4652      	mov	r2, sl
 8007574:	465b      	mov	r3, fp
 8007576:	f7f8 fe61 	bl	800023c <__adddf3>
 800757a:	460b      	mov	r3, r1
 800757c:	4983      	ldr	r1, [pc, #524]	; (800778c <_strtod_l+0xbf4>)
 800757e:	4a85      	ldr	r2, [pc, #532]	; (8007794 <_strtod_l+0xbfc>)
 8007580:	4019      	ands	r1, r3
 8007582:	4291      	cmp	r1, r2
 8007584:	4682      	mov	sl, r0
 8007586:	d960      	bls.n	800764a <_strtod_l+0xab2>
 8007588:	ee18 3a90 	vmov	r3, s17
 800758c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007590:	4293      	cmp	r3, r2
 8007592:	d104      	bne.n	800759e <_strtod_l+0xa06>
 8007594:	ee18 3a10 	vmov	r3, s16
 8007598:	3301      	adds	r3, #1
 800759a:	f43f ad45 	beq.w	8007028 <_strtod_l+0x490>
 800759e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80077a0 <_strtod_l+0xc08>
 80075a2:	f04f 3aff 	mov.w	sl, #4294967295
 80075a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075a8:	4620      	mov	r0, r4
 80075aa:	f001 feb9 	bl	8009320 <_Bfree>
 80075ae:	9905      	ldr	r1, [sp, #20]
 80075b0:	4620      	mov	r0, r4
 80075b2:	f001 feb5 	bl	8009320 <_Bfree>
 80075b6:	4631      	mov	r1, r6
 80075b8:	4620      	mov	r0, r4
 80075ba:	f001 feb1 	bl	8009320 <_Bfree>
 80075be:	4629      	mov	r1, r5
 80075c0:	4620      	mov	r0, r4
 80075c2:	f001 fead 	bl	8009320 <_Bfree>
 80075c6:	e61a      	b.n	80071fe <_strtod_l+0x666>
 80075c8:	f1ba 0f00 	cmp.w	sl, #0
 80075cc:	d11b      	bne.n	8007606 <_strtod_l+0xa6e>
 80075ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075d2:	b9f3      	cbnz	r3, 8007612 <_strtod_l+0xa7a>
 80075d4:	4b6c      	ldr	r3, [pc, #432]	; (8007788 <_strtod_l+0xbf0>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 fa56 	bl	8000a8c <__aeabi_dcmplt>
 80075e0:	b9d0      	cbnz	r0, 8007618 <_strtod_l+0xa80>
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	4b6c      	ldr	r3, [pc, #432]	; (8007798 <_strtod_l+0xc00>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	f7f8 ffdd 	bl	80005a8 <__aeabi_dmul>
 80075ee:	4680      	mov	r8, r0
 80075f0:	4689      	mov	r9, r1
 80075f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80075fa:	9315      	str	r3, [sp, #84]	; 0x54
 80075fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007600:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007604:	e79d      	b.n	8007542 <_strtod_l+0x9aa>
 8007606:	f1ba 0f01 	cmp.w	sl, #1
 800760a:	d102      	bne.n	8007612 <_strtod_l+0xa7a>
 800760c:	2f00      	cmp	r7, #0
 800760e:	f43f ad83 	beq.w	8007118 <_strtod_l+0x580>
 8007612:	4b62      	ldr	r3, [pc, #392]	; (800779c <_strtod_l+0xc04>)
 8007614:	2200      	movs	r2, #0
 8007616:	e78e      	b.n	8007536 <_strtod_l+0x99e>
 8007618:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007798 <_strtod_l+0xc00>
 800761c:	f04f 0800 	mov.w	r8, #0
 8007620:	e7e7      	b.n	80075f2 <_strtod_l+0xa5a>
 8007622:	4b5d      	ldr	r3, [pc, #372]	; (8007798 <_strtod_l+0xc00>)
 8007624:	4640      	mov	r0, r8
 8007626:	4649      	mov	r1, r9
 8007628:	2200      	movs	r2, #0
 800762a:	f7f8 ffbd 	bl	80005a8 <__aeabi_dmul>
 800762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007630:	4680      	mov	r8, r0
 8007632:	4689      	mov	r9, r1
 8007634:	b933      	cbnz	r3, 8007644 <_strtod_l+0xaac>
 8007636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800763a:	900e      	str	r0, [sp, #56]	; 0x38
 800763c:	930f      	str	r3, [sp, #60]	; 0x3c
 800763e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007642:	e7dd      	b.n	8007600 <_strtod_l+0xa68>
 8007644:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007648:	e7f9      	b.n	800763e <_strtod_l+0xaa6>
 800764a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1a8      	bne.n	80075a6 <_strtod_l+0xa0e>
 8007654:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800765a:	0d1b      	lsrs	r3, r3, #20
 800765c:	051b      	lsls	r3, r3, #20
 800765e:	429a      	cmp	r2, r3
 8007660:	d1a1      	bne.n	80075a6 <_strtod_l+0xa0e>
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	f7f9 faff 	bl	8000c68 <__aeabi_d2lz>
 800766a:	f7f8 ff6f 	bl	800054c <__aeabi_l2d>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 fddf 	bl	8000238 <__aeabi_dsub>
 800767a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800767c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007680:	ea43 030a 	orr.w	r3, r3, sl
 8007684:	4313      	orrs	r3, r2
 8007686:	4680      	mov	r8, r0
 8007688:	4689      	mov	r9, r1
 800768a:	d055      	beq.n	8007738 <_strtod_l+0xba0>
 800768c:	a336      	add	r3, pc, #216	; (adr r3, 8007768 <_strtod_l+0xbd0>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f9 f9fb 	bl	8000a8c <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	f47f acd0 	bne.w	800703c <_strtod_l+0x4a4>
 800769c:	a334      	add	r3, pc, #208	; (adr r3, 8007770 <_strtod_l+0xbd8>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f9 fa0f 	bl	8000ac8 <__aeabi_dcmpgt>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f af7b 	beq.w	80075a6 <_strtod_l+0xa0e>
 80076b0:	e4c4      	b.n	800703c <_strtod_l+0x4a4>
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	b333      	cbz	r3, 8007704 <_strtod_l+0xb6c>
 80076b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076bc:	d822      	bhi.n	8007704 <_strtod_l+0xb6c>
 80076be:	a32e      	add	r3, pc, #184	; (adr r3, 8007778 <_strtod_l+0xbe0>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 f9ea 	bl	8000aa0 <__aeabi_dcmple>
 80076cc:	b1a0      	cbz	r0, 80076f8 <_strtod_l+0xb60>
 80076ce:	4649      	mov	r1, r9
 80076d0:	4640      	mov	r0, r8
 80076d2:	f7f9 fa41 	bl	8000b58 <__aeabi_d2uiz>
 80076d6:	2801      	cmp	r0, #1
 80076d8:	bf38      	it	cc
 80076da:	2001      	movcc	r0, #1
 80076dc:	f7f8 feea 	bl	80004b4 <__aeabi_ui2d>
 80076e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e2:	4680      	mov	r8, r0
 80076e4:	4689      	mov	r9, r1
 80076e6:	bb23      	cbnz	r3, 8007732 <_strtod_l+0xb9a>
 80076e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076ec:	9010      	str	r0, [sp, #64]	; 0x40
 80076ee:	9311      	str	r3, [sp, #68]	; 0x44
 80076f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	9309      	str	r3, [sp, #36]	; 0x24
 8007704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007708:	eeb0 0a48 	vmov.f32	s0, s16
 800770c:	eef0 0a68 	vmov.f32	s1, s17
 8007710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007714:	f002 f936 	bl	8009984 <__ulp>
 8007718:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800771c:	ec53 2b10 	vmov	r2, r3, d0
 8007720:	f7f8 ff42 	bl	80005a8 <__aeabi_dmul>
 8007724:	ec53 2b18 	vmov	r2, r3, d8
 8007728:	f7f8 fd88 	bl	800023c <__adddf3>
 800772c:	4682      	mov	sl, r0
 800772e:	468b      	mov	fp, r1
 8007730:	e78d      	b.n	800764e <_strtod_l+0xab6>
 8007732:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007736:	e7db      	b.n	80076f0 <_strtod_l+0xb58>
 8007738:	a311      	add	r3, pc, #68	; (adr r3, 8007780 <_strtod_l+0xbe8>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f9 f9a5 	bl	8000a8c <__aeabi_dcmplt>
 8007742:	e7b2      	b.n	80076aa <_strtod_l+0xb12>
 8007744:	2300      	movs	r3, #0
 8007746:	930a      	str	r3, [sp, #40]	; 0x28
 8007748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800774a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	f7ff ba6b 	b.w	8006c28 <_strtod_l+0x90>
 8007752:	2a65      	cmp	r2, #101	; 0x65
 8007754:	f43f ab5f 	beq.w	8006e16 <_strtod_l+0x27e>
 8007758:	2a45      	cmp	r2, #69	; 0x45
 800775a:	f43f ab5c 	beq.w	8006e16 <_strtod_l+0x27e>
 800775e:	2301      	movs	r3, #1
 8007760:	f7ff bb94 	b.w	8006e8c <_strtod_l+0x2f4>
 8007764:	f3af 8000 	nop.w
 8007768:	94a03595 	.word	0x94a03595
 800776c:	3fdfffff 	.word	0x3fdfffff
 8007770:	35afe535 	.word	0x35afe535
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	ffc00000 	.word	0xffc00000
 800777c:	41dfffff 	.word	0x41dfffff
 8007780:	94a03595 	.word	0x94a03595
 8007784:	3fcfffff 	.word	0x3fcfffff
 8007788:	3ff00000 	.word	0x3ff00000
 800778c:	7ff00000 	.word	0x7ff00000
 8007790:	7fe00000 	.word	0x7fe00000
 8007794:	7c9fffff 	.word	0x7c9fffff
 8007798:	3fe00000 	.word	0x3fe00000
 800779c:	bff00000 	.word	0xbff00000
 80077a0:	7fefffff 	.word	0x7fefffff

080077a4 <_strtod_r>:
 80077a4:	4b01      	ldr	r3, [pc, #4]	; (80077ac <_strtod_r+0x8>)
 80077a6:	f7ff b9f7 	b.w	8006b98 <_strtod_l>
 80077aa:	bf00      	nop
 80077ac:	2000007c 	.word	0x2000007c

080077b0 <_strtol_l.constprop.0>:
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b6:	d001      	beq.n	80077bc <_strtol_l.constprop.0+0xc>
 80077b8:	2b24      	cmp	r3, #36	; 0x24
 80077ba:	d906      	bls.n	80077ca <_strtol_l.constprop.0+0x1a>
 80077bc:	f7fe fa6e 	bl	8005c9c <__errno>
 80077c0:	2316      	movs	r3, #22
 80077c2:	6003      	str	r3, [r0, #0]
 80077c4:	2000      	movs	r0, #0
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80078b0 <_strtol_l.constprop.0+0x100>
 80077ce:	460d      	mov	r5, r1
 80077d0:	462e      	mov	r6, r5
 80077d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80077da:	f017 0708 	ands.w	r7, r7, #8
 80077de:	d1f7      	bne.n	80077d0 <_strtol_l.constprop.0+0x20>
 80077e0:	2c2d      	cmp	r4, #45	; 0x2d
 80077e2:	d132      	bne.n	800784a <_strtol_l.constprop.0+0x9a>
 80077e4:	782c      	ldrb	r4, [r5, #0]
 80077e6:	2701      	movs	r7, #1
 80077e8:	1cb5      	adds	r5, r6, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d05b      	beq.n	80078a6 <_strtol_l.constprop.0+0xf6>
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d109      	bne.n	8007806 <_strtol_l.constprop.0+0x56>
 80077f2:	2c30      	cmp	r4, #48	; 0x30
 80077f4:	d107      	bne.n	8007806 <_strtol_l.constprop.0+0x56>
 80077f6:	782c      	ldrb	r4, [r5, #0]
 80077f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077fc:	2c58      	cmp	r4, #88	; 0x58
 80077fe:	d14d      	bne.n	800789c <_strtol_l.constprop.0+0xec>
 8007800:	786c      	ldrb	r4, [r5, #1]
 8007802:	2310      	movs	r3, #16
 8007804:	3502      	adds	r5, #2
 8007806:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800780a:	f108 38ff 	add.w	r8, r8, #4294967295
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	fbb8 f9f3 	udiv	r9, r8, r3
 8007816:	4666      	mov	r6, ip
 8007818:	fb03 8a19 	mls	sl, r3, r9, r8
 800781c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007820:	f1be 0f09 	cmp.w	lr, #9
 8007824:	d816      	bhi.n	8007854 <_strtol_l.constprop.0+0xa4>
 8007826:	4674      	mov	r4, lr
 8007828:	42a3      	cmp	r3, r4
 800782a:	dd24      	ble.n	8007876 <_strtol_l.constprop.0+0xc6>
 800782c:	f1bc 0f00 	cmp.w	ip, #0
 8007830:	db1e      	blt.n	8007870 <_strtol_l.constprop.0+0xc0>
 8007832:	45b1      	cmp	r9, r6
 8007834:	d31c      	bcc.n	8007870 <_strtol_l.constprop.0+0xc0>
 8007836:	d101      	bne.n	800783c <_strtol_l.constprop.0+0x8c>
 8007838:	45a2      	cmp	sl, r4
 800783a:	db19      	blt.n	8007870 <_strtol_l.constprop.0+0xc0>
 800783c:	fb06 4603 	mla	r6, r6, r3, r4
 8007840:	f04f 0c01 	mov.w	ip, #1
 8007844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007848:	e7e8      	b.n	800781c <_strtol_l.constprop.0+0x6c>
 800784a:	2c2b      	cmp	r4, #43	; 0x2b
 800784c:	bf04      	itt	eq
 800784e:	782c      	ldrbeq	r4, [r5, #0]
 8007850:	1cb5      	addeq	r5, r6, #2
 8007852:	e7ca      	b.n	80077ea <_strtol_l.constprop.0+0x3a>
 8007854:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007858:	f1be 0f19 	cmp.w	lr, #25
 800785c:	d801      	bhi.n	8007862 <_strtol_l.constprop.0+0xb2>
 800785e:	3c37      	subs	r4, #55	; 0x37
 8007860:	e7e2      	b.n	8007828 <_strtol_l.constprop.0+0x78>
 8007862:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007866:	f1be 0f19 	cmp.w	lr, #25
 800786a:	d804      	bhi.n	8007876 <_strtol_l.constprop.0+0xc6>
 800786c:	3c57      	subs	r4, #87	; 0x57
 800786e:	e7db      	b.n	8007828 <_strtol_l.constprop.0+0x78>
 8007870:	f04f 3cff 	mov.w	ip, #4294967295
 8007874:	e7e6      	b.n	8007844 <_strtol_l.constprop.0+0x94>
 8007876:	f1bc 0f00 	cmp.w	ip, #0
 800787a:	da05      	bge.n	8007888 <_strtol_l.constprop.0+0xd8>
 800787c:	2322      	movs	r3, #34	; 0x22
 800787e:	6003      	str	r3, [r0, #0]
 8007880:	4646      	mov	r6, r8
 8007882:	b942      	cbnz	r2, 8007896 <_strtol_l.constprop.0+0xe6>
 8007884:	4630      	mov	r0, r6
 8007886:	e79e      	b.n	80077c6 <_strtol_l.constprop.0+0x16>
 8007888:	b107      	cbz	r7, 800788c <_strtol_l.constprop.0+0xdc>
 800788a:	4276      	negs	r6, r6
 800788c:	2a00      	cmp	r2, #0
 800788e:	d0f9      	beq.n	8007884 <_strtol_l.constprop.0+0xd4>
 8007890:	f1bc 0f00 	cmp.w	ip, #0
 8007894:	d000      	beq.n	8007898 <_strtol_l.constprop.0+0xe8>
 8007896:	1e69      	subs	r1, r5, #1
 8007898:	6011      	str	r1, [r2, #0]
 800789a:	e7f3      	b.n	8007884 <_strtol_l.constprop.0+0xd4>
 800789c:	2430      	movs	r4, #48	; 0x30
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1b1      	bne.n	8007806 <_strtol_l.constprop.0+0x56>
 80078a2:	2308      	movs	r3, #8
 80078a4:	e7af      	b.n	8007806 <_strtol_l.constprop.0+0x56>
 80078a6:	2c30      	cmp	r4, #48	; 0x30
 80078a8:	d0a5      	beq.n	80077f6 <_strtol_l.constprop.0+0x46>
 80078aa:	230a      	movs	r3, #10
 80078ac:	e7ab      	b.n	8007806 <_strtol_l.constprop.0+0x56>
 80078ae:	bf00      	nop
 80078b0:	0800a999 	.word	0x0800a999

080078b4 <_strtol_r>:
 80078b4:	f7ff bf7c 	b.w	80077b0 <_strtol_l.constprop.0>

080078b8 <__swbuf_r>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	460e      	mov	r6, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	4605      	mov	r5, r0
 80078c0:	b118      	cbz	r0, 80078ca <__swbuf_r+0x12>
 80078c2:	6983      	ldr	r3, [r0, #24]
 80078c4:	b90b      	cbnz	r3, 80078ca <__swbuf_r+0x12>
 80078c6:	f001 f84b 	bl	8008960 <__sinit>
 80078ca:	4b21      	ldr	r3, [pc, #132]	; (8007950 <__swbuf_r+0x98>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	d12b      	bne.n	8007928 <__swbuf_r+0x70>
 80078d0:	686c      	ldr	r4, [r5, #4]
 80078d2:	69a3      	ldr	r3, [r4, #24]
 80078d4:	60a3      	str	r3, [r4, #8]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	071a      	lsls	r2, r3, #28
 80078da:	d52f      	bpl.n	800793c <__swbuf_r+0x84>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	b36b      	cbz	r3, 800793c <__swbuf_r+0x84>
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1ac0      	subs	r0, r0, r3
 80078e6:	6963      	ldr	r3, [r4, #20]
 80078e8:	b2f6      	uxtb	r6, r6
 80078ea:	4283      	cmp	r3, r0
 80078ec:	4637      	mov	r7, r6
 80078ee:	dc04      	bgt.n	80078fa <__swbuf_r+0x42>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 ffa0 	bl	8008838 <_fflush_r>
 80078f8:	bb30      	cbnz	r0, 8007948 <__swbuf_r+0x90>
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	701e      	strb	r6, [r3, #0]
 8007908:	6963      	ldr	r3, [r4, #20]
 800790a:	3001      	adds	r0, #1
 800790c:	4283      	cmp	r3, r0
 800790e:	d004      	beq.n	800791a <__swbuf_r+0x62>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d506      	bpl.n	8007924 <__swbuf_r+0x6c>
 8007916:	2e0a      	cmp	r6, #10
 8007918:	d104      	bne.n	8007924 <__swbuf_r+0x6c>
 800791a:	4621      	mov	r1, r4
 800791c:	4628      	mov	r0, r5
 800791e:	f000 ff8b 	bl	8008838 <_fflush_r>
 8007922:	b988      	cbnz	r0, 8007948 <__swbuf_r+0x90>
 8007924:	4638      	mov	r0, r7
 8007926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <__swbuf_r+0x9c>)
 800792a:	429c      	cmp	r4, r3
 800792c:	d101      	bne.n	8007932 <__swbuf_r+0x7a>
 800792e:	68ac      	ldr	r4, [r5, #8]
 8007930:	e7cf      	b.n	80078d2 <__swbuf_r+0x1a>
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <__swbuf_r+0xa0>)
 8007934:	429c      	cmp	r4, r3
 8007936:	bf08      	it	eq
 8007938:	68ec      	ldreq	r4, [r5, #12]
 800793a:	e7ca      	b.n	80078d2 <__swbuf_r+0x1a>
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f80c 	bl	800795c <__swsetup_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	d0cb      	beq.n	80078e0 <__swbuf_r+0x28>
 8007948:	f04f 37ff 	mov.w	r7, #4294967295
 800794c:	e7ea      	b.n	8007924 <__swbuf_r+0x6c>
 800794e:	bf00      	nop
 8007950:	0800ab4c 	.word	0x0800ab4c
 8007954:	0800ab6c 	.word	0x0800ab6c
 8007958:	0800ab2c 	.word	0x0800ab2c

0800795c <__swsetup_r>:
 800795c:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <__swsetup_r+0xcc>)
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	681d      	ldr	r5, [r3, #0]
 8007962:	4606      	mov	r6, r0
 8007964:	460c      	mov	r4, r1
 8007966:	b125      	cbz	r5, 8007972 <__swsetup_r+0x16>
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	b913      	cbnz	r3, 8007972 <__swsetup_r+0x16>
 800796c:	4628      	mov	r0, r5
 800796e:	f000 fff7 	bl	8008960 <__sinit>
 8007972:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <__swsetup_r+0xd0>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d10f      	bne.n	8007998 <__swsetup_r+0x3c>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007980:	0719      	lsls	r1, r3, #28
 8007982:	d42c      	bmi.n	80079de <__swsetup_r+0x82>
 8007984:	06dd      	lsls	r5, r3, #27
 8007986:	d411      	bmi.n	80079ac <__swsetup_r+0x50>
 8007988:	2309      	movs	r3, #9
 800798a:	6033      	str	r3, [r6, #0]
 800798c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	f04f 30ff 	mov.w	r0, #4294967295
 8007996:	e03e      	b.n	8007a16 <__swsetup_r+0xba>
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <__swsetup_r+0xd4>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d101      	bne.n	80079a2 <__swsetup_r+0x46>
 800799e:	68ac      	ldr	r4, [r5, #8]
 80079a0:	e7eb      	b.n	800797a <__swsetup_r+0x1e>
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <__swsetup_r+0xd8>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	bf08      	it	eq
 80079a8:	68ec      	ldreq	r4, [r5, #12]
 80079aa:	e7e6      	b.n	800797a <__swsetup_r+0x1e>
 80079ac:	0758      	lsls	r0, r3, #29
 80079ae:	d512      	bpl.n	80079d6 <__swsetup_r+0x7a>
 80079b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b2:	b141      	cbz	r1, 80079c6 <__swsetup_r+0x6a>
 80079b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d002      	beq.n	80079c2 <__swsetup_r+0x66>
 80079bc:	4630      	mov	r0, r6
 80079be:	f002 f947 	bl	8009c50 <_free_r>
 80079c2:	2300      	movs	r3, #0
 80079c4:	6363      	str	r3, [r4, #52]	; 0x34
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b94b      	cbnz	r3, 80079f6 <__swsetup_r+0x9a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ec:	d003      	beq.n	80079f6 <__swsetup_r+0x9a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4630      	mov	r0, r6
 80079f2:	f001 fbed 	bl	80091d0 <__smakebuf_r>
 80079f6:	89a0      	ldrh	r0, [r4, #12]
 80079f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079fc:	f010 0301 	ands.w	r3, r0, #1
 8007a00:	d00a      	beq.n	8007a18 <__swsetup_r+0xbc>
 8007a02:	2300      	movs	r3, #0
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	425b      	negs	r3, r3
 8007a0a:	61a3      	str	r3, [r4, #24]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	b943      	cbnz	r3, 8007a22 <__swsetup_r+0xc6>
 8007a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a14:	d1ba      	bne.n	800798c <__swsetup_r+0x30>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	0781      	lsls	r1, r0, #30
 8007a1a:	bf58      	it	pl
 8007a1c:	6963      	ldrpl	r3, [r4, #20]
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	e7f4      	b.n	8007a0c <__swsetup_r+0xb0>
 8007a22:	2000      	movs	r0, #0
 8007a24:	e7f7      	b.n	8007a16 <__swsetup_r+0xba>
 8007a26:	bf00      	nop
 8007a28:	20000014 	.word	0x20000014
 8007a2c:	0800ab4c 	.word	0x0800ab4c
 8007a30:	0800ab6c 	.word	0x0800ab6c
 8007a34:	0800ab2c 	.word	0x0800ab2c

08007a38 <quorem>:
 8007a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	6903      	ldr	r3, [r0, #16]
 8007a3e:	690c      	ldr	r4, [r1, #16]
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	4607      	mov	r7, r0
 8007a44:	f2c0 8081 	blt.w	8007b4a <quorem+0x112>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	f101 0814 	add.w	r8, r1, #20
 8007a4e:	f100 0514 	add.w	r5, r0, #20
 8007a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a60:	3301      	adds	r3, #1
 8007a62:	429a      	cmp	r2, r3
 8007a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a70:	d331      	bcc.n	8007ad6 <quorem+0x9e>
 8007a72:	f04f 0e00 	mov.w	lr, #0
 8007a76:	4640      	mov	r0, r8
 8007a78:	46ac      	mov	ip, r5
 8007a7a:	46f2      	mov	sl, lr
 8007a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a80:	b293      	uxth	r3, r2
 8007a82:	fb06 e303 	mla	r3, r6, r3, lr
 8007a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a90:	f8dc a000 	ldr.w	sl, [ip]
 8007a94:	0c12      	lsrs	r2, r2, #16
 8007a96:	fa13 f38a 	uxtah	r3, r3, sl
 8007a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aa6:	b292      	uxth	r2, r2
 8007aa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ab4:	4581      	cmp	r9, r0
 8007ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aba:	f84c 3b04 	str.w	r3, [ip], #4
 8007abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ac2:	d2db      	bcs.n	8007a7c <quorem+0x44>
 8007ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ac8:	b92b      	cbnz	r3, 8007ad6 <quorem+0x9e>
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	429d      	cmp	r5, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	d32e      	bcc.n	8007b32 <quorem+0xfa>
 8007ad4:	613c      	str	r4, [r7, #16]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f001 feae 	bl	8009838 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	db24      	blt.n	8007b2a <quorem+0xf2>
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f04f 0c00 	mov.w	ip, #0
 8007ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aec:	f8d0 e000 	ldr.w	lr, [r0]
 8007af0:	b293      	uxth	r3, r2
 8007af2:	ebac 0303 	sub.w	r3, ip, r3
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	fa13 f38e 	uxtah	r3, r3, lr
 8007afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0a:	45c1      	cmp	r9, r8
 8007b0c:	f840 3b04 	str.w	r3, [r0], #4
 8007b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b14:	d2e8      	bcs.n	8007ae8 <quorem+0xb0>
 8007b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1e:	b922      	cbnz	r2, 8007b2a <quorem+0xf2>
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d30a      	bcc.n	8007b3e <quorem+0x106>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1cc      	bne.n	8007ad4 <quorem+0x9c>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7c7      	b.n	8007ace <quorem+0x96>
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d1f0      	bne.n	8007b28 <quorem+0xf0>
 8007b46:	3c01      	subs	r4, #1
 8007b48:	e7eb      	b.n	8007b22 <quorem+0xea>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7ee      	b.n	8007b2c <quorem+0xf4>
	...

08007b50 <_dtoa_r>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b04 	vpush	{d8-d9}
 8007b58:	ec57 6b10 	vmov	r6, r7, d0
 8007b5c:	b093      	sub	sp, #76	; 0x4c
 8007b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b64:	9106      	str	r1, [sp, #24]
 8007b66:	ee10 aa10 	vmov	sl, s0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b70:	46bb      	mov	fp, r7
 8007b72:	b975      	cbnz	r5, 8007b92 <_dtoa_r+0x42>
 8007b74:	2010      	movs	r0, #16
 8007b76:	f001 fb6b 	bl	8009250 <malloc>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b7e:	b920      	cbnz	r0, 8007b8a <_dtoa_r+0x3a>
 8007b80:	4ba7      	ldr	r3, [pc, #668]	; (8007e20 <_dtoa_r+0x2d0>)
 8007b82:	21ea      	movs	r1, #234	; 0xea
 8007b84:	48a7      	ldr	r0, [pc, #668]	; (8007e24 <_dtoa_r+0x2d4>)
 8007b86:	f002 fc89 	bl	800a49c <__assert_func>
 8007b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b8e:	6005      	str	r5, [r0, #0]
 8007b90:	60c5      	str	r5, [r0, #12]
 8007b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b94:	6819      	ldr	r1, [r3, #0]
 8007b96:	b151      	cbz	r1, 8007bae <_dtoa_r+0x5e>
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	604a      	str	r2, [r1, #4]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4093      	lsls	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f001 fbbc 	bl	8009320 <_Bfree>
 8007ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	1e3b      	subs	r3, r7, #0
 8007bb0:	bfaa      	itet	ge
 8007bb2:	2300      	movge	r3, #0
 8007bb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007bb8:	f8c8 3000 	strge.w	r3, [r8]
 8007bbc:	4b9a      	ldr	r3, [pc, #616]	; (8007e28 <_dtoa_r+0x2d8>)
 8007bbe:	bfbc      	itt	lt
 8007bc0:	2201      	movlt	r2, #1
 8007bc2:	f8c8 2000 	strlt.w	r2, [r8]
 8007bc6:	ea33 030b 	bics.w	r3, r3, fp
 8007bca:	d11b      	bne.n	8007c04 <_dtoa_r+0xb4>
 8007bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bd8:	4333      	orrs	r3, r6
 8007bda:	f000 8592 	beq.w	8008702 <_dtoa_r+0xbb2>
 8007bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be0:	b963      	cbnz	r3, 8007bfc <_dtoa_r+0xac>
 8007be2:	4b92      	ldr	r3, [pc, #584]	; (8007e2c <_dtoa_r+0x2dc>)
 8007be4:	e022      	b.n	8007c2c <_dtoa_r+0xdc>
 8007be6:	4b92      	ldr	r3, [pc, #584]	; (8007e30 <_dtoa_r+0x2e0>)
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	3308      	adds	r3, #8
 8007bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	9801      	ldr	r0, [sp, #4]
 8007bf2:	b013      	add	sp, #76	; 0x4c
 8007bf4:	ecbd 8b04 	vpop	{d8-d9}
 8007bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfc:	4b8b      	ldr	r3, [pc, #556]	; (8007e2c <_dtoa_r+0x2dc>)
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	3303      	adds	r3, #3
 8007c02:	e7f3      	b.n	8007bec <_dtoa_r+0x9c>
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	f7f8 ff34 	bl	8000a78 <__aeabi_dcmpeq>
 8007c10:	ec4b ab19 	vmov	d9, sl, fp
 8007c14:	4680      	mov	r8, r0
 8007c16:	b158      	cbz	r0, 8007c30 <_dtoa_r+0xe0>
 8007c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 856b 	beq.w	80086fc <_dtoa_r+0xbac>
 8007c26:	4883      	ldr	r0, [pc, #524]	; (8007e34 <_dtoa_r+0x2e4>)
 8007c28:	6018      	str	r0, [r3, #0]
 8007c2a:	1e43      	subs	r3, r0, #1
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	e7df      	b.n	8007bf0 <_dtoa_r+0xa0>
 8007c30:	ec4b ab10 	vmov	d0, sl, fp
 8007c34:	aa10      	add	r2, sp, #64	; 0x40
 8007c36:	a911      	add	r1, sp, #68	; 0x44
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f001 ff1f 	bl	8009a7c <__d2b>
 8007c3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c42:	ee08 0a10 	vmov	s16, r0
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	f000 8084 	beq.w	8007d54 <_dtoa_r+0x204>
 8007c4c:	ee19 3a90 	vmov	r3, s19
 8007c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c58:	4656      	mov	r6, sl
 8007c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c66:	4b74      	ldr	r3, [pc, #464]	; (8007e38 <_dtoa_r+0x2e8>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fae3 	bl	8000238 <__aeabi_dsub>
 8007c72:	a365      	add	r3, pc, #404	; (adr r3, 8007e08 <_dtoa_r+0x2b8>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fc96 	bl	80005a8 <__aeabi_dmul>
 8007c7c:	a364      	add	r3, pc, #400	; (adr r3, 8007e10 <_dtoa_r+0x2c0>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fadb 	bl	800023c <__adddf3>
 8007c86:	4606      	mov	r6, r0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	f7f8 fc22 	bl	80004d4 <__aeabi_i2d>
 8007c90:	a361      	add	r3, pc, #388	; (adr r3, 8007e18 <_dtoa_r+0x2c8>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fc87 	bl	80005a8 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f8 facb 	bl	800023c <__adddf3>
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460f      	mov	r7, r1
 8007caa:	f7f8 ff2d 	bl	8000b08 <__aeabi_d2iz>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	9000      	str	r0, [sp, #0]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fee8 	bl	8000a8c <__aeabi_dcmplt>
 8007cbc:	b150      	cbz	r0, 8007cd4 <_dtoa_r+0x184>
 8007cbe:	9800      	ldr	r0, [sp, #0]
 8007cc0:	f7f8 fc08 	bl	80004d4 <__aeabi_i2d>
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	f7f8 fed6 	bl	8000a78 <__aeabi_dcmpeq>
 8007ccc:	b910      	cbnz	r0, 8007cd4 <_dtoa_r+0x184>
 8007cce:	9b00      	ldr	r3, [sp, #0]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	2b16      	cmp	r3, #22
 8007cd8:	d85a      	bhi.n	8007d90 <_dtoa_r+0x240>
 8007cda:	9a00      	ldr	r2, [sp, #0]
 8007cdc:	4b57      	ldr	r3, [pc, #348]	; (8007e3c <_dtoa_r+0x2ec>)
 8007cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	ec51 0b19 	vmov	r0, r1, d9
 8007cea:	f7f8 fecf 	bl	8000a8c <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d050      	beq.n	8007d94 <_dtoa_r+0x244>
 8007cf2:	9b00      	ldr	r3, [sp, #0]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cfe:	1b5d      	subs	r5, r3, r5
 8007d00:	1e6b      	subs	r3, r5, #1
 8007d02:	9305      	str	r3, [sp, #20]
 8007d04:	bf45      	ittet	mi
 8007d06:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d0a:	9304      	strmi	r3, [sp, #16]
 8007d0c:	2300      	movpl	r3, #0
 8007d0e:	2300      	movmi	r3, #0
 8007d10:	bf4c      	ite	mi
 8007d12:	9305      	strmi	r3, [sp, #20]
 8007d14:	9304      	strpl	r3, [sp, #16]
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	db3d      	blt.n	8007d98 <_dtoa_r+0x248>
 8007d1c:	9b05      	ldr	r3, [sp, #20]
 8007d1e:	9a00      	ldr	r2, [sp, #0]
 8007d20:	920a      	str	r2, [sp, #40]	; 0x28
 8007d22:	4413      	add	r3, r2
 8007d24:	9305      	str	r3, [sp, #20]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9307      	str	r3, [sp, #28]
 8007d2a:	9b06      	ldr	r3, [sp, #24]
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	f200 8089 	bhi.w	8007e44 <_dtoa_r+0x2f4>
 8007d32:	2b05      	cmp	r3, #5
 8007d34:	bfc4      	itt	gt
 8007d36:	3b04      	subgt	r3, #4
 8007d38:	9306      	strgt	r3, [sp, #24]
 8007d3a:	9b06      	ldr	r3, [sp, #24]
 8007d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d40:	bfcc      	ite	gt
 8007d42:	2500      	movgt	r5, #0
 8007d44:	2501      	movle	r5, #1
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	f200 8087 	bhi.w	8007e5a <_dtoa_r+0x30a>
 8007d4c:	e8df f003 	tbb	[pc, r3]
 8007d50:	59383a2d 	.word	0x59383a2d
 8007d54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d58:	441d      	add	r5, r3
 8007d5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	bfc1      	itttt	gt
 8007d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d72:	bfda      	itte	le
 8007d74:	f1c3 0320 	rsble	r3, r3, #32
 8007d78:	fa06 f003 	lslle.w	r0, r6, r3
 8007d7c:	4318      	orrgt	r0, r3
 8007d7e:	f7f8 fb99 	bl	80004b4 <__aeabi_ui2d>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4606      	mov	r6, r0
 8007d86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d8a:	3d01      	subs	r5, #1
 8007d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d8e:	e76a      	b.n	8007c66 <_dtoa_r+0x116>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e7b2      	b.n	8007cfa <_dtoa_r+0x1aa>
 8007d94:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d96:	e7b1      	b.n	8007cfc <_dtoa_r+0x1ac>
 8007d98:	9b04      	ldr	r3, [sp, #16]
 8007d9a:	9a00      	ldr	r2, [sp, #0]
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	9304      	str	r3, [sp, #16]
 8007da0:	4253      	negs	r3, r2
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	2300      	movs	r3, #0
 8007da6:	930a      	str	r3, [sp, #40]	; 0x28
 8007da8:	e7bf      	b.n	8007d2a <_dtoa_r+0x1da>
 8007daa:	2300      	movs	r3, #0
 8007dac:	9308      	str	r3, [sp, #32]
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc55      	bgt.n	8007e60 <_dtoa_r+0x310>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dbe:	e00c      	b.n	8007dda <_dtoa_r+0x28a>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7f3      	b.n	8007dac <_dtoa_r+0x25c>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc8:	9308      	str	r3, [sp, #32]
 8007dca:	9b00      	ldr	r3, [sp, #0]
 8007dcc:	4413      	add	r3, r2
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	9303      	str	r3, [sp, #12]
 8007dd6:	bfb8      	it	lt
 8007dd8:	2301      	movlt	r3, #1
 8007dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ddc:	2200      	movs	r2, #0
 8007dde:	6042      	str	r2, [r0, #4]
 8007de0:	2204      	movs	r2, #4
 8007de2:	f102 0614 	add.w	r6, r2, #20
 8007de6:	429e      	cmp	r6, r3
 8007de8:	6841      	ldr	r1, [r0, #4]
 8007dea:	d93d      	bls.n	8007e68 <_dtoa_r+0x318>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f001 fa57 	bl	80092a0 <_Balloc>
 8007df2:	9001      	str	r0, [sp, #4]
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d13b      	bne.n	8007e70 <_dtoa_r+0x320>
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <_dtoa_r+0x2f0>)
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e00:	e6c0      	b.n	8007b84 <_dtoa_r+0x34>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e7df      	b.n	8007dc6 <_dtoa_r+0x276>
 8007e06:	bf00      	nop
 8007e08:	636f4361 	.word	0x636f4361
 8007e0c:	3fd287a7 	.word	0x3fd287a7
 8007e10:	8b60c8b3 	.word	0x8b60c8b3
 8007e14:	3fc68a28 	.word	0x3fc68a28
 8007e18:	509f79fb 	.word	0x509f79fb
 8007e1c:	3fd34413 	.word	0x3fd34413
 8007e20:	0800aaa6 	.word	0x0800aaa6
 8007e24:	0800aabd 	.word	0x0800aabd
 8007e28:	7ff00000 	.word	0x7ff00000
 8007e2c:	0800aaa2 	.word	0x0800aaa2
 8007e30:	0800aa99 	.word	0x0800aa99
 8007e34:	0800a91d 	.word	0x0800a91d
 8007e38:	3ff80000 	.word	0x3ff80000
 8007e3c:	0800ac90 	.word	0x0800ac90
 8007e40:	0800ab18 	.word	0x0800ab18
 8007e44:	2501      	movs	r5, #1
 8007e46:	2300      	movs	r3, #0
 8007e48:	9306      	str	r3, [sp, #24]
 8007e4a:	9508      	str	r5, [sp, #32]
 8007e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	2312      	movs	r3, #18
 8007e58:	e7b0      	b.n	8007dbc <_dtoa_r+0x26c>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	9308      	str	r3, [sp, #32]
 8007e5e:	e7f5      	b.n	8007e4c <_dtoa_r+0x2fc>
 8007e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e66:	e7b8      	b.n	8007dda <_dtoa_r+0x28a>
 8007e68:	3101      	adds	r1, #1
 8007e6a:	6041      	str	r1, [r0, #4]
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	e7b8      	b.n	8007de2 <_dtoa_r+0x292>
 8007e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e72:	9a01      	ldr	r2, [sp, #4]
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	2b0e      	cmp	r3, #14
 8007e7a:	f200 809d 	bhi.w	8007fb8 <_dtoa_r+0x468>
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f000 809a 	beq.w	8007fb8 <_dtoa_r+0x468>
 8007e84:	9b00      	ldr	r3, [sp, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dd32      	ble.n	8007ef0 <_dtoa_r+0x3a0>
 8007e8a:	4ab7      	ldr	r2, [pc, #732]	; (8008168 <_dtoa_r+0x618>)
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e98:	9b00      	ldr	r3, [sp, #0]
 8007e9a:	05d8      	lsls	r0, r3, #23
 8007e9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ea0:	d516      	bpl.n	8007ed0 <_dtoa_r+0x380>
 8007ea2:	4bb2      	ldr	r3, [pc, #712]	; (800816c <_dtoa_r+0x61c>)
 8007ea4:	ec51 0b19 	vmov	r0, r1, d9
 8007ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eac:	f7f8 fca6 	bl	80007fc <__aeabi_ddiv>
 8007eb0:	f007 070f 	and.w	r7, r7, #15
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	468b      	mov	fp, r1
 8007eb8:	2503      	movs	r5, #3
 8007eba:	4eac      	ldr	r6, [pc, #688]	; (800816c <_dtoa_r+0x61c>)
 8007ebc:	b957      	cbnz	r7, 8007ed4 <_dtoa_r+0x384>
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	f7f8 fc99 	bl	80007fc <__aeabi_ddiv>
 8007eca:	4682      	mov	sl, r0
 8007ecc:	468b      	mov	fp, r1
 8007ece:	e028      	b.n	8007f22 <_dtoa_r+0x3d2>
 8007ed0:	2502      	movs	r5, #2
 8007ed2:	e7f2      	b.n	8007eba <_dtoa_r+0x36a>
 8007ed4:	07f9      	lsls	r1, r7, #31
 8007ed6:	d508      	bpl.n	8007eea <_dtoa_r+0x39a>
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ee0:	f7f8 fb62 	bl	80005a8 <__aeabi_dmul>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	107f      	asrs	r7, r7, #1
 8007eec:	3608      	adds	r6, #8
 8007eee:	e7e5      	b.n	8007ebc <_dtoa_r+0x36c>
 8007ef0:	f000 809b 	beq.w	800802a <_dtoa_r+0x4da>
 8007ef4:	9b00      	ldr	r3, [sp, #0]
 8007ef6:	4f9d      	ldr	r7, [pc, #628]	; (800816c <_dtoa_r+0x61c>)
 8007ef8:	425e      	negs	r6, r3
 8007efa:	4b9b      	ldr	r3, [pc, #620]	; (8008168 <_dtoa_r+0x618>)
 8007efc:	f006 020f 	and.w	r2, r6, #15
 8007f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	ec51 0b19 	vmov	r0, r1, d9
 8007f0c:	f7f8 fb4c 	bl	80005a8 <__aeabi_dmul>
 8007f10:	1136      	asrs	r6, r6, #4
 8007f12:	4682      	mov	sl, r0
 8007f14:	468b      	mov	fp, r1
 8007f16:	2300      	movs	r3, #0
 8007f18:	2502      	movs	r5, #2
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	d17a      	bne.n	8008014 <_dtoa_r+0x4c4>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1d3      	bne.n	8007eca <_dtoa_r+0x37a>
 8007f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8082 	beq.w	800802e <_dtoa_r+0x4de>
 8007f2a:	4b91      	ldr	r3, [pc, #580]	; (8008170 <_dtoa_r+0x620>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4650      	mov	r0, sl
 8007f30:	4659      	mov	r1, fp
 8007f32:	f7f8 fdab 	bl	8000a8c <__aeabi_dcmplt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d079      	beq.n	800802e <_dtoa_r+0x4de>
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d076      	beq.n	800802e <_dtoa_r+0x4de>
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd36      	ble.n	8007fb4 <_dtoa_r+0x464>
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	4650      	mov	r0, sl
 8007f4a:	4659      	mov	r1, fp
 8007f4c:	1e5f      	subs	r7, r3, #1
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4b88      	ldr	r3, [pc, #544]	; (8008174 <_dtoa_r+0x624>)
 8007f52:	f7f8 fb29 	bl	80005a8 <__aeabi_dmul>
 8007f56:	9e02      	ldr	r6, [sp, #8]
 8007f58:	4682      	mov	sl, r0
 8007f5a:	468b      	mov	fp, r1
 8007f5c:	3501      	adds	r5, #1
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7f8 fab8 	bl	80004d4 <__aeabi_i2d>
 8007f64:	4652      	mov	r2, sl
 8007f66:	465b      	mov	r3, fp
 8007f68:	f7f8 fb1e 	bl	80005a8 <__aeabi_dmul>
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <_dtoa_r+0x628>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f7f8 f964 	bl	800023c <__adddf3>
 8007f74:	46d0      	mov	r8, sl
 8007f76:	46d9      	mov	r9, fp
 8007f78:	4682      	mov	sl, r0
 8007f7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	d158      	bne.n	8008034 <_dtoa_r+0x4e4>
 8007f82:	4b7e      	ldr	r3, [pc, #504]	; (800817c <_dtoa_r+0x62c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	4640      	mov	r0, r8
 8007f88:	4649      	mov	r1, r9
 8007f8a:	f7f8 f955 	bl	8000238 <__aeabi_dsub>
 8007f8e:	4652      	mov	r2, sl
 8007f90:	465b      	mov	r3, fp
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	f7f8 fd97 	bl	8000ac8 <__aeabi_dcmpgt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f040 8295 	bne.w	80084ca <_dtoa_r+0x97a>
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4649      	mov	r1, r9
 8007faa:	f7f8 fd6f 	bl	8000a8c <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f040 8289 	bne.w	80084c6 <_dtoa_r+0x976>
 8007fb4:	ec5b ab19 	vmov	sl, fp, d9
 8007fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f2c0 8148 	blt.w	8008250 <_dtoa_r+0x700>
 8007fc0:	9a00      	ldr	r2, [sp, #0]
 8007fc2:	2a0e      	cmp	r2, #14
 8007fc4:	f300 8144 	bgt.w	8008250 <_dtoa_r+0x700>
 8007fc8:	4b67      	ldr	r3, [pc, #412]	; (8008168 <_dtoa_r+0x618>)
 8007fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f280 80d5 	bge.w	8008184 <_dtoa_r+0x634>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f300 80d1 	bgt.w	8008184 <_dtoa_r+0x634>
 8007fe2:	f040 826f 	bne.w	80084c4 <_dtoa_r+0x974>
 8007fe6:	4b65      	ldr	r3, [pc, #404]	; (800817c <_dtoa_r+0x62c>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4640      	mov	r0, r8
 8007fec:	4649      	mov	r1, r9
 8007fee:	f7f8 fadb 	bl	80005a8 <__aeabi_dmul>
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	465b      	mov	r3, fp
 8007ff6:	f7f8 fd5d 	bl	8000ab4 <__aeabi_dcmpge>
 8007ffa:	9e03      	ldr	r6, [sp, #12]
 8007ffc:	4637      	mov	r7, r6
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f040 8245 	bne.w	800848e <_dtoa_r+0x93e>
 8008004:	9d01      	ldr	r5, [sp, #4]
 8008006:	2331      	movs	r3, #49	; 0x31
 8008008:	f805 3b01 	strb.w	r3, [r5], #1
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	e240      	b.n	8008496 <_dtoa_r+0x946>
 8008014:	07f2      	lsls	r2, r6, #31
 8008016:	d505      	bpl.n	8008024 <_dtoa_r+0x4d4>
 8008018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800801c:	f7f8 fac4 	bl	80005a8 <__aeabi_dmul>
 8008020:	3501      	adds	r5, #1
 8008022:	2301      	movs	r3, #1
 8008024:	1076      	asrs	r6, r6, #1
 8008026:	3708      	adds	r7, #8
 8008028:	e777      	b.n	8007f1a <_dtoa_r+0x3ca>
 800802a:	2502      	movs	r5, #2
 800802c:	e779      	b.n	8007f22 <_dtoa_r+0x3d2>
 800802e:	9f00      	ldr	r7, [sp, #0]
 8008030:	9e03      	ldr	r6, [sp, #12]
 8008032:	e794      	b.n	8007f5e <_dtoa_r+0x40e>
 8008034:	9901      	ldr	r1, [sp, #4]
 8008036:	4b4c      	ldr	r3, [pc, #304]	; (8008168 <_dtoa_r+0x618>)
 8008038:	4431      	add	r1, r6
 800803a:	910d      	str	r1, [sp, #52]	; 0x34
 800803c:	9908      	ldr	r1, [sp, #32]
 800803e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008046:	2900      	cmp	r1, #0
 8008048:	d043      	beq.n	80080d2 <_dtoa_r+0x582>
 800804a:	494d      	ldr	r1, [pc, #308]	; (8008180 <_dtoa_r+0x630>)
 800804c:	2000      	movs	r0, #0
 800804e:	f7f8 fbd5 	bl	80007fc <__aeabi_ddiv>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 f8ef 	bl	8000238 <__aeabi_dsub>
 800805a:	9d01      	ldr	r5, [sp, #4]
 800805c:	4682      	mov	sl, r0
 800805e:	468b      	mov	fp, r1
 8008060:	4649      	mov	r1, r9
 8008062:	4640      	mov	r0, r8
 8008064:	f7f8 fd50 	bl	8000b08 <__aeabi_d2iz>
 8008068:	4606      	mov	r6, r0
 800806a:	f7f8 fa33 	bl	80004d4 <__aeabi_i2d>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4640      	mov	r0, r8
 8008074:	4649      	mov	r1, r9
 8008076:	f7f8 f8df 	bl	8000238 <__aeabi_dsub>
 800807a:	3630      	adds	r6, #48	; 0x30
 800807c:	f805 6b01 	strb.w	r6, [r5], #1
 8008080:	4652      	mov	r2, sl
 8008082:	465b      	mov	r3, fp
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	f7f8 fd00 	bl	8000a8c <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	d163      	bne.n	8008158 <_dtoa_r+0x608>
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	4936      	ldr	r1, [pc, #216]	; (8008170 <_dtoa_r+0x620>)
 8008096:	2000      	movs	r0, #0
 8008098:	f7f8 f8ce 	bl	8000238 <__aeabi_dsub>
 800809c:	4652      	mov	r2, sl
 800809e:	465b      	mov	r3, fp
 80080a0:	f7f8 fcf4 	bl	8000a8c <__aeabi_dcmplt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	f040 80b5 	bne.w	8008214 <_dtoa_r+0x6c4>
 80080aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ac:	429d      	cmp	r5, r3
 80080ae:	d081      	beq.n	8007fb4 <_dtoa_r+0x464>
 80080b0:	4b30      	ldr	r3, [pc, #192]	; (8008174 <_dtoa_r+0x624>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	4650      	mov	r0, sl
 80080b6:	4659      	mov	r1, fp
 80080b8:	f7f8 fa76 	bl	80005a8 <__aeabi_dmul>
 80080bc:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <_dtoa_r+0x624>)
 80080be:	4682      	mov	sl, r0
 80080c0:	468b      	mov	fp, r1
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	2200      	movs	r2, #0
 80080c8:	f7f8 fa6e 	bl	80005a8 <__aeabi_dmul>
 80080cc:	4680      	mov	r8, r0
 80080ce:	4689      	mov	r9, r1
 80080d0:	e7c6      	b.n	8008060 <_dtoa_r+0x510>
 80080d2:	4650      	mov	r0, sl
 80080d4:	4659      	mov	r1, fp
 80080d6:	f7f8 fa67 	bl	80005a8 <__aeabi_dmul>
 80080da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080dc:	9d01      	ldr	r5, [sp, #4]
 80080de:	930f      	str	r3, [sp, #60]	; 0x3c
 80080e0:	4682      	mov	sl, r0
 80080e2:	468b      	mov	fp, r1
 80080e4:	4649      	mov	r1, r9
 80080e6:	4640      	mov	r0, r8
 80080e8:	f7f8 fd0e 	bl	8000b08 <__aeabi_d2iz>
 80080ec:	4606      	mov	r6, r0
 80080ee:	f7f8 f9f1 	bl	80004d4 <__aeabi_i2d>
 80080f2:	3630      	adds	r6, #48	; 0x30
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4640      	mov	r0, r8
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 f89c 	bl	8000238 <__aeabi_dsub>
 8008100:	f805 6b01 	strb.w	r6, [r5], #1
 8008104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008106:	429d      	cmp	r5, r3
 8008108:	4680      	mov	r8, r0
 800810a:	4689      	mov	r9, r1
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	d124      	bne.n	800815c <_dtoa_r+0x60c>
 8008112:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <_dtoa_r+0x630>)
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	f7f8 f890 	bl	800023c <__adddf3>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4640      	mov	r0, r8
 8008122:	4649      	mov	r1, r9
 8008124:	f7f8 fcd0 	bl	8000ac8 <__aeabi_dcmpgt>
 8008128:	2800      	cmp	r0, #0
 800812a:	d173      	bne.n	8008214 <_dtoa_r+0x6c4>
 800812c:	4652      	mov	r2, sl
 800812e:	465b      	mov	r3, fp
 8008130:	4913      	ldr	r1, [pc, #76]	; (8008180 <_dtoa_r+0x630>)
 8008132:	2000      	movs	r0, #0
 8008134:	f7f8 f880 	bl	8000238 <__aeabi_dsub>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 fca4 	bl	8000a8c <__aeabi_dcmplt>
 8008144:	2800      	cmp	r0, #0
 8008146:	f43f af35 	beq.w	8007fb4 <_dtoa_r+0x464>
 800814a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800814c:	1e6b      	subs	r3, r5, #1
 800814e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008150:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d0f8      	beq.n	800814a <_dtoa_r+0x5fa>
 8008158:	9700      	str	r7, [sp, #0]
 800815a:	e049      	b.n	80081f0 <_dtoa_r+0x6a0>
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <_dtoa_r+0x624>)
 800815e:	f7f8 fa23 	bl	80005a8 <__aeabi_dmul>
 8008162:	4680      	mov	r8, r0
 8008164:	4689      	mov	r9, r1
 8008166:	e7bd      	b.n	80080e4 <_dtoa_r+0x594>
 8008168:	0800ac90 	.word	0x0800ac90
 800816c:	0800ac68 	.word	0x0800ac68
 8008170:	3ff00000 	.word	0x3ff00000
 8008174:	40240000 	.word	0x40240000
 8008178:	401c0000 	.word	0x401c0000
 800817c:	40140000 	.word	0x40140000
 8008180:	3fe00000 	.word	0x3fe00000
 8008184:	9d01      	ldr	r5, [sp, #4]
 8008186:	4656      	mov	r6, sl
 8008188:	465f      	mov	r7, fp
 800818a:	4642      	mov	r2, r8
 800818c:	464b      	mov	r3, r9
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fb33 	bl	80007fc <__aeabi_ddiv>
 8008196:	f7f8 fcb7 	bl	8000b08 <__aeabi_d2iz>
 800819a:	4682      	mov	sl, r0
 800819c:	f7f8 f99a 	bl	80004d4 <__aeabi_i2d>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 fa00 	bl	80005a8 <__aeabi_dmul>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4630      	mov	r0, r6
 80081ae:	4639      	mov	r1, r7
 80081b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80081b4:	f7f8 f840 	bl	8000238 <__aeabi_dsub>
 80081b8:	f805 6b01 	strb.w	r6, [r5], #1
 80081bc:	9e01      	ldr	r6, [sp, #4]
 80081be:	9f03      	ldr	r7, [sp, #12]
 80081c0:	1bae      	subs	r6, r5, r6
 80081c2:	42b7      	cmp	r7, r6
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	d135      	bne.n	8008236 <_dtoa_r+0x6e6>
 80081ca:	f7f8 f837 	bl	800023c <__adddf3>
 80081ce:	4642      	mov	r2, r8
 80081d0:	464b      	mov	r3, r9
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	f7f8 fc77 	bl	8000ac8 <__aeabi_dcmpgt>
 80081da:	b9d0      	cbnz	r0, 8008212 <_dtoa_r+0x6c2>
 80081dc:	4642      	mov	r2, r8
 80081de:	464b      	mov	r3, r9
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 fc48 	bl	8000a78 <__aeabi_dcmpeq>
 80081e8:	b110      	cbz	r0, 80081f0 <_dtoa_r+0x6a0>
 80081ea:	f01a 0f01 	tst.w	sl, #1
 80081ee:	d110      	bne.n	8008212 <_dtoa_r+0x6c2>
 80081f0:	4620      	mov	r0, r4
 80081f2:	ee18 1a10 	vmov	r1, s16
 80081f6:	f001 f893 	bl	8009320 <_Bfree>
 80081fa:	2300      	movs	r3, #0
 80081fc:	9800      	ldr	r0, [sp, #0]
 80081fe:	702b      	strb	r3, [r5, #0]
 8008200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008202:	3001      	adds	r0, #1
 8008204:	6018      	str	r0, [r3, #0]
 8008206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008208:	2b00      	cmp	r3, #0
 800820a:	f43f acf1 	beq.w	8007bf0 <_dtoa_r+0xa0>
 800820e:	601d      	str	r5, [r3, #0]
 8008210:	e4ee      	b.n	8007bf0 <_dtoa_r+0xa0>
 8008212:	9f00      	ldr	r7, [sp, #0]
 8008214:	462b      	mov	r3, r5
 8008216:	461d      	mov	r5, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a39      	cmp	r2, #57	; 0x39
 800821e:	d106      	bne.n	800822e <_dtoa_r+0x6de>
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d1f7      	bne.n	8008216 <_dtoa_r+0x6c6>
 8008226:	9901      	ldr	r1, [sp, #4]
 8008228:	2230      	movs	r2, #48	; 0x30
 800822a:	3701      	adds	r7, #1
 800822c:	700a      	strb	r2, [r1, #0]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	3201      	adds	r2, #1
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	e790      	b.n	8008158 <_dtoa_r+0x608>
 8008236:	4ba6      	ldr	r3, [pc, #664]	; (80084d0 <_dtoa_r+0x980>)
 8008238:	2200      	movs	r2, #0
 800823a:	f7f8 f9b5 	bl	80005a8 <__aeabi_dmul>
 800823e:	2200      	movs	r2, #0
 8008240:	2300      	movs	r3, #0
 8008242:	4606      	mov	r6, r0
 8008244:	460f      	mov	r7, r1
 8008246:	f7f8 fc17 	bl	8000a78 <__aeabi_dcmpeq>
 800824a:	2800      	cmp	r0, #0
 800824c:	d09d      	beq.n	800818a <_dtoa_r+0x63a>
 800824e:	e7cf      	b.n	80081f0 <_dtoa_r+0x6a0>
 8008250:	9a08      	ldr	r2, [sp, #32]
 8008252:	2a00      	cmp	r2, #0
 8008254:	f000 80d7 	beq.w	8008406 <_dtoa_r+0x8b6>
 8008258:	9a06      	ldr	r2, [sp, #24]
 800825a:	2a01      	cmp	r2, #1
 800825c:	f300 80ba 	bgt.w	80083d4 <_dtoa_r+0x884>
 8008260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008262:	2a00      	cmp	r2, #0
 8008264:	f000 80b2 	beq.w	80083cc <_dtoa_r+0x87c>
 8008268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800826c:	9e07      	ldr	r6, [sp, #28]
 800826e:	9d04      	ldr	r5, [sp, #16]
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	441a      	add	r2, r3
 8008274:	9204      	str	r2, [sp, #16]
 8008276:	9a05      	ldr	r2, [sp, #20]
 8008278:	2101      	movs	r1, #1
 800827a:	441a      	add	r2, r3
 800827c:	4620      	mov	r0, r4
 800827e:	9205      	str	r2, [sp, #20]
 8008280:	f001 f950 	bl	8009524 <__i2b>
 8008284:	4607      	mov	r7, r0
 8008286:	2d00      	cmp	r5, #0
 8008288:	dd0c      	ble.n	80082a4 <_dtoa_r+0x754>
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	dd09      	ble.n	80082a4 <_dtoa_r+0x754>
 8008290:	42ab      	cmp	r3, r5
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	bfa8      	it	ge
 8008296:	462b      	movge	r3, r5
 8008298:	1ad2      	subs	r2, r2, r3
 800829a:	9204      	str	r2, [sp, #16]
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	1aed      	subs	r5, r5, r3
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	b31b      	cbz	r3, 80082f0 <_dtoa_r+0x7a0>
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80af 	beq.w	800840e <_dtoa_r+0x8be>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	dd13      	ble.n	80082dc <_dtoa_r+0x78c>
 80082b4:	4639      	mov	r1, r7
 80082b6:	4632      	mov	r2, r6
 80082b8:	4620      	mov	r0, r4
 80082ba:	f001 f9f3 	bl	80096a4 <__pow5mult>
 80082be:	ee18 2a10 	vmov	r2, s16
 80082c2:	4601      	mov	r1, r0
 80082c4:	4607      	mov	r7, r0
 80082c6:	4620      	mov	r0, r4
 80082c8:	f001 f942 	bl	8009550 <__multiply>
 80082cc:	ee18 1a10 	vmov	r1, s16
 80082d0:	4680      	mov	r8, r0
 80082d2:	4620      	mov	r0, r4
 80082d4:	f001 f824 	bl	8009320 <_Bfree>
 80082d8:	ee08 8a10 	vmov	s16, r8
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	1b9a      	subs	r2, r3, r6
 80082e0:	d006      	beq.n	80082f0 <_dtoa_r+0x7a0>
 80082e2:	ee18 1a10 	vmov	r1, s16
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 f9dc 	bl	80096a4 <__pow5mult>
 80082ec:	ee08 0a10 	vmov	s16, r0
 80082f0:	2101      	movs	r1, #1
 80082f2:	4620      	mov	r0, r4
 80082f4:	f001 f916 	bl	8009524 <__i2b>
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	4606      	mov	r6, r0
 80082fe:	f340 8088 	ble.w	8008412 <_dtoa_r+0x8c2>
 8008302:	461a      	mov	r2, r3
 8008304:	4601      	mov	r1, r0
 8008306:	4620      	mov	r0, r4
 8008308:	f001 f9cc 	bl	80096a4 <__pow5mult>
 800830c:	9b06      	ldr	r3, [sp, #24]
 800830e:	2b01      	cmp	r3, #1
 8008310:	4606      	mov	r6, r0
 8008312:	f340 8081 	ble.w	8008418 <_dtoa_r+0x8c8>
 8008316:	f04f 0800 	mov.w	r8, #0
 800831a:	6933      	ldr	r3, [r6, #16]
 800831c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008320:	6918      	ldr	r0, [r3, #16]
 8008322:	f001 f8af 	bl	8009484 <__hi0bits>
 8008326:	f1c0 0020 	rsb	r0, r0, #32
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	4418      	add	r0, r3
 800832e:	f010 001f 	ands.w	r0, r0, #31
 8008332:	f000 8092 	beq.w	800845a <_dtoa_r+0x90a>
 8008336:	f1c0 0320 	rsb	r3, r0, #32
 800833a:	2b04      	cmp	r3, #4
 800833c:	f340 808a 	ble.w	8008454 <_dtoa_r+0x904>
 8008340:	f1c0 001c 	rsb	r0, r0, #28
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	4403      	add	r3, r0
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	9b05      	ldr	r3, [sp, #20]
 800834c:	4403      	add	r3, r0
 800834e:	4405      	add	r5, r0
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd07      	ble.n	8008368 <_dtoa_r+0x818>
 8008358:	ee18 1a10 	vmov	r1, s16
 800835c:	461a      	mov	r2, r3
 800835e:	4620      	mov	r0, r4
 8008360:	f001 f9fa 	bl	8009758 <__lshift>
 8008364:	ee08 0a10 	vmov	s16, r0
 8008368:	9b05      	ldr	r3, [sp, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd05      	ble.n	800837a <_dtoa_r+0x82a>
 800836e:	4631      	mov	r1, r6
 8008370:	461a      	mov	r2, r3
 8008372:	4620      	mov	r0, r4
 8008374:	f001 f9f0 	bl	8009758 <__lshift>
 8008378:	4606      	mov	r6, r0
 800837a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d06e      	beq.n	800845e <_dtoa_r+0x90e>
 8008380:	ee18 0a10 	vmov	r0, s16
 8008384:	4631      	mov	r1, r6
 8008386:	f001 fa57 	bl	8009838 <__mcmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	da67      	bge.n	800845e <_dtoa_r+0x90e>
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	ee18 1a10 	vmov	r1, s16
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	220a      	movs	r2, #10
 800839a:	2300      	movs	r3, #0
 800839c:	4620      	mov	r0, r4
 800839e:	f000 ffe1 	bl	8009364 <__multadd>
 80083a2:	9b08      	ldr	r3, [sp, #32]
 80083a4:	ee08 0a10 	vmov	s16, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 81b1 	beq.w	8008710 <_dtoa_r+0xbc0>
 80083ae:	2300      	movs	r3, #0
 80083b0:	4639      	mov	r1, r7
 80083b2:	220a      	movs	r2, #10
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 ffd5 	bl	8009364 <__multadd>
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	4607      	mov	r7, r0
 80083c0:	f300 808e 	bgt.w	80084e0 <_dtoa_r+0x990>
 80083c4:	9b06      	ldr	r3, [sp, #24]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	dc51      	bgt.n	800846e <_dtoa_r+0x91e>
 80083ca:	e089      	b.n	80084e0 <_dtoa_r+0x990>
 80083cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083d2:	e74b      	b.n	800826c <_dtoa_r+0x71c>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	1e5e      	subs	r6, r3, #1
 80083d8:	9b07      	ldr	r3, [sp, #28]
 80083da:	42b3      	cmp	r3, r6
 80083dc:	bfbf      	itttt	lt
 80083de:	9b07      	ldrlt	r3, [sp, #28]
 80083e0:	9607      	strlt	r6, [sp, #28]
 80083e2:	1af2      	sublt	r2, r6, r3
 80083e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083e6:	bfb6      	itet	lt
 80083e8:	189b      	addlt	r3, r3, r2
 80083ea:	1b9e      	subge	r6, r3, r6
 80083ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	bfb8      	it	lt
 80083f2:	2600      	movlt	r6, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb7      	itett	lt
 80083f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008400:	1a9d      	sublt	r5, r3, r2
 8008402:	2300      	movlt	r3, #0
 8008404:	e734      	b.n	8008270 <_dtoa_r+0x720>
 8008406:	9e07      	ldr	r6, [sp, #28]
 8008408:	9d04      	ldr	r5, [sp, #16]
 800840a:	9f08      	ldr	r7, [sp, #32]
 800840c:	e73b      	b.n	8008286 <_dtoa_r+0x736>
 800840e:	9a07      	ldr	r2, [sp, #28]
 8008410:	e767      	b.n	80082e2 <_dtoa_r+0x792>
 8008412:	9b06      	ldr	r3, [sp, #24]
 8008414:	2b01      	cmp	r3, #1
 8008416:	dc18      	bgt.n	800844a <_dtoa_r+0x8fa>
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	d115      	bne.n	800844a <_dtoa_r+0x8fa>
 800841e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008422:	b993      	cbnz	r3, 800844a <_dtoa_r+0x8fa>
 8008424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008428:	0d1b      	lsrs	r3, r3, #20
 800842a:	051b      	lsls	r3, r3, #20
 800842c:	b183      	cbz	r3, 8008450 <_dtoa_r+0x900>
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	9b05      	ldr	r3, [sp, #20]
 8008436:	3301      	adds	r3, #1
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	f04f 0801 	mov.w	r8, #1
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	f47f af6a 	bne.w	800831a <_dtoa_r+0x7ca>
 8008446:	2001      	movs	r0, #1
 8008448:	e76f      	b.n	800832a <_dtoa_r+0x7da>
 800844a:	f04f 0800 	mov.w	r8, #0
 800844e:	e7f6      	b.n	800843e <_dtoa_r+0x8ee>
 8008450:	4698      	mov	r8, r3
 8008452:	e7f4      	b.n	800843e <_dtoa_r+0x8ee>
 8008454:	f43f af7d 	beq.w	8008352 <_dtoa_r+0x802>
 8008458:	4618      	mov	r0, r3
 800845a:	301c      	adds	r0, #28
 800845c:	e772      	b.n	8008344 <_dtoa_r+0x7f4>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc37      	bgt.n	80084d4 <_dtoa_r+0x984>
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	2b02      	cmp	r3, #2
 8008468:	dd34      	ble.n	80084d4 <_dtoa_r+0x984>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	9302      	str	r3, [sp, #8]
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	b96b      	cbnz	r3, 800848e <_dtoa_r+0x93e>
 8008472:	4631      	mov	r1, r6
 8008474:	2205      	movs	r2, #5
 8008476:	4620      	mov	r0, r4
 8008478:	f000 ff74 	bl	8009364 <__multadd>
 800847c:	4601      	mov	r1, r0
 800847e:	4606      	mov	r6, r0
 8008480:	ee18 0a10 	vmov	r0, s16
 8008484:	f001 f9d8 	bl	8009838 <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	f73f adbb 	bgt.w	8008004 <_dtoa_r+0x4b4>
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	9d01      	ldr	r5, [sp, #4]
 8008492:	43db      	mvns	r3, r3
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	4631      	mov	r1, r6
 800849c:	4620      	mov	r0, r4
 800849e:	f000 ff3f 	bl	8009320 <_Bfree>
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	f43f aea4 	beq.w	80081f0 <_dtoa_r+0x6a0>
 80084a8:	f1b8 0f00 	cmp.w	r8, #0
 80084ac:	d005      	beq.n	80084ba <_dtoa_r+0x96a>
 80084ae:	45b8      	cmp	r8, r7
 80084b0:	d003      	beq.n	80084ba <_dtoa_r+0x96a>
 80084b2:	4641      	mov	r1, r8
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 ff33 	bl	8009320 <_Bfree>
 80084ba:	4639      	mov	r1, r7
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 ff2f 	bl	8009320 <_Bfree>
 80084c2:	e695      	b.n	80081f0 <_dtoa_r+0x6a0>
 80084c4:	2600      	movs	r6, #0
 80084c6:	4637      	mov	r7, r6
 80084c8:	e7e1      	b.n	800848e <_dtoa_r+0x93e>
 80084ca:	9700      	str	r7, [sp, #0]
 80084cc:	4637      	mov	r7, r6
 80084ce:	e599      	b.n	8008004 <_dtoa_r+0x4b4>
 80084d0:	40240000 	.word	0x40240000
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 80ca 	beq.w	8008670 <_dtoa_r+0xb20>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	dd05      	ble.n	80084f0 <_dtoa_r+0x9a0>
 80084e4:	4639      	mov	r1, r7
 80084e6:	462a      	mov	r2, r5
 80084e8:	4620      	mov	r0, r4
 80084ea:	f001 f935 	bl	8009758 <__lshift>
 80084ee:	4607      	mov	r7, r0
 80084f0:	f1b8 0f00 	cmp.w	r8, #0
 80084f4:	d05b      	beq.n	80085ae <_dtoa_r+0xa5e>
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fed1 	bl	80092a0 <_Balloc>
 80084fe:	4605      	mov	r5, r0
 8008500:	b928      	cbnz	r0, 800850e <_dtoa_r+0x9be>
 8008502:	4b87      	ldr	r3, [pc, #540]	; (8008720 <_dtoa_r+0xbd0>)
 8008504:	4602      	mov	r2, r0
 8008506:	f240 21ea 	movw	r1, #746	; 0x2ea
 800850a:	f7ff bb3b 	b.w	8007b84 <_dtoa_r+0x34>
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	3202      	adds	r2, #2
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	f107 010c 	add.w	r1, r7, #12
 8008518:	300c      	adds	r0, #12
 800851a:	f000 feb3 	bl	8009284 <memcpy>
 800851e:	2201      	movs	r2, #1
 8008520:	4629      	mov	r1, r5
 8008522:	4620      	mov	r0, r4
 8008524:	f001 f918 	bl	8009758 <__lshift>
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	f103 0901 	add.w	r9, r3, #1
 800852e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008532:	4413      	add	r3, r2
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	f00a 0301 	and.w	r3, sl, #1
 800853a:	46b8      	mov	r8, r7
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	4607      	mov	r7, r0
 8008540:	4631      	mov	r1, r6
 8008542:	ee18 0a10 	vmov	r0, s16
 8008546:	f7ff fa77 	bl	8007a38 <quorem>
 800854a:	4641      	mov	r1, r8
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008552:	ee18 0a10 	vmov	r0, s16
 8008556:	f001 f96f 	bl	8009838 <__mcmp>
 800855a:	463a      	mov	r2, r7
 800855c:	9003      	str	r0, [sp, #12]
 800855e:	4631      	mov	r1, r6
 8008560:	4620      	mov	r0, r4
 8008562:	f001 f985 	bl	8009870 <__mdiff>
 8008566:	68c2      	ldr	r2, [r0, #12]
 8008568:	f109 3bff 	add.w	fp, r9, #4294967295
 800856c:	4605      	mov	r5, r0
 800856e:	bb02      	cbnz	r2, 80085b2 <_dtoa_r+0xa62>
 8008570:	4601      	mov	r1, r0
 8008572:	ee18 0a10 	vmov	r0, s16
 8008576:	f001 f95f 	bl	8009838 <__mcmp>
 800857a:	4602      	mov	r2, r0
 800857c:	4629      	mov	r1, r5
 800857e:	4620      	mov	r0, r4
 8008580:	9207      	str	r2, [sp, #28]
 8008582:	f000 fecd 	bl	8009320 <_Bfree>
 8008586:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800858a:	ea43 0102 	orr.w	r1, r3, r2
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	430b      	orrs	r3, r1
 8008592:	464d      	mov	r5, r9
 8008594:	d10f      	bne.n	80085b6 <_dtoa_r+0xa66>
 8008596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800859a:	d02a      	beq.n	80085f2 <_dtoa_r+0xaa2>
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dd02      	ble.n	80085a8 <_dtoa_r+0xa58>
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80085a8:	f88b a000 	strb.w	sl, [fp]
 80085ac:	e775      	b.n	800849a <_dtoa_r+0x94a>
 80085ae:	4638      	mov	r0, r7
 80085b0:	e7ba      	b.n	8008528 <_dtoa_r+0x9d8>
 80085b2:	2201      	movs	r2, #1
 80085b4:	e7e2      	b.n	800857c <_dtoa_r+0xa2c>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db04      	blt.n	80085c6 <_dtoa_r+0xa76>
 80085bc:	9906      	ldr	r1, [sp, #24]
 80085be:	430b      	orrs	r3, r1
 80085c0:	9904      	ldr	r1, [sp, #16]
 80085c2:	430b      	orrs	r3, r1
 80085c4:	d122      	bne.n	800860c <_dtoa_r+0xabc>
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	ddee      	ble.n	80085a8 <_dtoa_r+0xa58>
 80085ca:	ee18 1a10 	vmov	r1, s16
 80085ce:	2201      	movs	r2, #1
 80085d0:	4620      	mov	r0, r4
 80085d2:	f001 f8c1 	bl	8009758 <__lshift>
 80085d6:	4631      	mov	r1, r6
 80085d8:	ee08 0a10 	vmov	s16, r0
 80085dc:	f001 f92c 	bl	8009838 <__mcmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	dc03      	bgt.n	80085ec <_dtoa_r+0xa9c>
 80085e4:	d1e0      	bne.n	80085a8 <_dtoa_r+0xa58>
 80085e6:	f01a 0f01 	tst.w	sl, #1
 80085ea:	d0dd      	beq.n	80085a8 <_dtoa_r+0xa58>
 80085ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085f0:	d1d7      	bne.n	80085a2 <_dtoa_r+0xa52>
 80085f2:	2339      	movs	r3, #57	; 0x39
 80085f4:	f88b 3000 	strb.w	r3, [fp]
 80085f8:	462b      	mov	r3, r5
 80085fa:	461d      	mov	r5, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008602:	2a39      	cmp	r2, #57	; 0x39
 8008604:	d071      	beq.n	80086ea <_dtoa_r+0xb9a>
 8008606:	3201      	adds	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e746      	b.n	800849a <_dtoa_r+0x94a>
 800860c:	2a00      	cmp	r2, #0
 800860e:	dd07      	ble.n	8008620 <_dtoa_r+0xad0>
 8008610:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008614:	d0ed      	beq.n	80085f2 <_dtoa_r+0xaa2>
 8008616:	f10a 0301 	add.w	r3, sl, #1
 800861a:	f88b 3000 	strb.w	r3, [fp]
 800861e:	e73c      	b.n	800849a <_dtoa_r+0x94a>
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008626:	4599      	cmp	r9, r3
 8008628:	d047      	beq.n	80086ba <_dtoa_r+0xb6a>
 800862a:	ee18 1a10 	vmov	r1, s16
 800862e:	2300      	movs	r3, #0
 8008630:	220a      	movs	r2, #10
 8008632:	4620      	mov	r0, r4
 8008634:	f000 fe96 	bl	8009364 <__multadd>
 8008638:	45b8      	cmp	r8, r7
 800863a:	ee08 0a10 	vmov	s16, r0
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	f04f 020a 	mov.w	r2, #10
 8008646:	4641      	mov	r1, r8
 8008648:	4620      	mov	r0, r4
 800864a:	d106      	bne.n	800865a <_dtoa_r+0xb0a>
 800864c:	f000 fe8a 	bl	8009364 <__multadd>
 8008650:	4680      	mov	r8, r0
 8008652:	4607      	mov	r7, r0
 8008654:	f109 0901 	add.w	r9, r9, #1
 8008658:	e772      	b.n	8008540 <_dtoa_r+0x9f0>
 800865a:	f000 fe83 	bl	8009364 <__multadd>
 800865e:	4639      	mov	r1, r7
 8008660:	4680      	mov	r8, r0
 8008662:	2300      	movs	r3, #0
 8008664:	220a      	movs	r2, #10
 8008666:	4620      	mov	r0, r4
 8008668:	f000 fe7c 	bl	8009364 <__multadd>
 800866c:	4607      	mov	r7, r0
 800866e:	e7f1      	b.n	8008654 <_dtoa_r+0xb04>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	9d01      	ldr	r5, [sp, #4]
 8008676:	ee18 0a10 	vmov	r0, s16
 800867a:	4631      	mov	r1, r6
 800867c:	f7ff f9dc 	bl	8007a38 <quorem>
 8008680:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	f805 ab01 	strb.w	sl, [r5], #1
 800868a:	1aea      	subs	r2, r5, r3
 800868c:	9b02      	ldr	r3, [sp, #8]
 800868e:	4293      	cmp	r3, r2
 8008690:	dd09      	ble.n	80086a6 <_dtoa_r+0xb56>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2300      	movs	r3, #0
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fe62 	bl	8009364 <__multadd>
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	e7e7      	b.n	8008676 <_dtoa_r+0xb26>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bfc8      	it	gt
 80086ac:	461d      	movgt	r5, r3
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	bfd8      	it	le
 80086b2:	2501      	movle	r5, #1
 80086b4:	441d      	add	r5, r3
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	ee18 1a10 	vmov	r1, s16
 80086be:	2201      	movs	r2, #1
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 f849 	bl	8009758 <__lshift>
 80086c6:	4631      	mov	r1, r6
 80086c8:	ee08 0a10 	vmov	s16, r0
 80086cc:	f001 f8b4 	bl	8009838 <__mcmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	dc91      	bgt.n	80085f8 <_dtoa_r+0xaa8>
 80086d4:	d102      	bne.n	80086dc <_dtoa_r+0xb8c>
 80086d6:	f01a 0f01 	tst.w	sl, #1
 80086da:	d18d      	bne.n	80085f8 <_dtoa_r+0xaa8>
 80086dc:	462b      	mov	r3, r5
 80086de:	461d      	mov	r5, r3
 80086e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e4:	2a30      	cmp	r2, #48	; 0x30
 80086e6:	d0fa      	beq.n	80086de <_dtoa_r+0xb8e>
 80086e8:	e6d7      	b.n	800849a <_dtoa_r+0x94a>
 80086ea:	9a01      	ldr	r2, [sp, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d184      	bne.n	80085fa <_dtoa_r+0xaaa>
 80086f0:	9b00      	ldr	r3, [sp, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	2331      	movs	r3, #49	; 0x31
 80086f8:	7013      	strb	r3, [r2, #0]
 80086fa:	e6ce      	b.n	800849a <_dtoa_r+0x94a>
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <_dtoa_r+0xbd4>)
 80086fe:	f7ff ba95 	b.w	8007c2c <_dtoa_r+0xdc>
 8008702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008704:	2b00      	cmp	r3, #0
 8008706:	f47f aa6e 	bne.w	8007be6 <_dtoa_r+0x96>
 800870a:	4b07      	ldr	r3, [pc, #28]	; (8008728 <_dtoa_r+0xbd8>)
 800870c:	f7ff ba8e 	b.w	8007c2c <_dtoa_r+0xdc>
 8008710:	9b02      	ldr	r3, [sp, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	dcae      	bgt.n	8008674 <_dtoa_r+0xb24>
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	2b02      	cmp	r3, #2
 800871a:	f73f aea8 	bgt.w	800846e <_dtoa_r+0x91e>
 800871e:	e7a9      	b.n	8008674 <_dtoa_r+0xb24>
 8008720:	0800ab18 	.word	0x0800ab18
 8008724:	0800a91c 	.word	0x0800a91c
 8008728:	0800aa99 	.word	0x0800aa99

0800872c <__sflush_r>:
 800872c:	898a      	ldrh	r2, [r1, #12]
 800872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	4605      	mov	r5, r0
 8008734:	0710      	lsls	r0, r2, #28
 8008736:	460c      	mov	r4, r1
 8008738:	d458      	bmi.n	80087ec <__sflush_r+0xc0>
 800873a:	684b      	ldr	r3, [r1, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	dc05      	bgt.n	800874c <__sflush_r+0x20>
 8008740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	dc02      	bgt.n	800874c <__sflush_r+0x20>
 8008746:	2000      	movs	r0, #0
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874e:	2e00      	cmp	r6, #0
 8008750:	d0f9      	beq.n	8008746 <__sflush_r+0x1a>
 8008752:	2300      	movs	r3, #0
 8008754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008758:	682f      	ldr	r7, [r5, #0]
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	d032      	beq.n	80087c4 <__sflush_r+0x98>
 800875e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	075a      	lsls	r2, r3, #29
 8008764:	d505      	bpl.n	8008772 <__sflush_r+0x46>
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	1ac0      	subs	r0, r0, r3
 800876a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800876c:	b10b      	cbz	r3, 8008772 <__sflush_r+0x46>
 800876e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008770:	1ac0      	subs	r0, r0, r3
 8008772:	2300      	movs	r3, #0
 8008774:	4602      	mov	r2, r0
 8008776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008778:	6a21      	ldr	r1, [r4, #32]
 800877a:	4628      	mov	r0, r5
 800877c:	47b0      	blx	r6
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	d106      	bne.n	8008792 <__sflush_r+0x66>
 8008784:	6829      	ldr	r1, [r5, #0]
 8008786:	291d      	cmp	r1, #29
 8008788:	d82c      	bhi.n	80087e4 <__sflush_r+0xb8>
 800878a:	4a2a      	ldr	r2, [pc, #168]	; (8008834 <__sflush_r+0x108>)
 800878c:	40ca      	lsrs	r2, r1
 800878e:	07d6      	lsls	r6, r2, #31
 8008790:	d528      	bpl.n	80087e4 <__sflush_r+0xb8>
 8008792:	2200      	movs	r2, #0
 8008794:	6062      	str	r2, [r4, #4]
 8008796:	04d9      	lsls	r1, r3, #19
 8008798:	6922      	ldr	r2, [r4, #16]
 800879a:	6022      	str	r2, [r4, #0]
 800879c:	d504      	bpl.n	80087a8 <__sflush_r+0x7c>
 800879e:	1c42      	adds	r2, r0, #1
 80087a0:	d101      	bne.n	80087a6 <__sflush_r+0x7a>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	b903      	cbnz	r3, 80087a8 <__sflush_r+0x7c>
 80087a6:	6560      	str	r0, [r4, #84]	; 0x54
 80087a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087aa:	602f      	str	r7, [r5, #0]
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d0ca      	beq.n	8008746 <__sflush_r+0x1a>
 80087b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b4:	4299      	cmp	r1, r3
 80087b6:	d002      	beq.n	80087be <__sflush_r+0x92>
 80087b8:	4628      	mov	r0, r5
 80087ba:	f001 fa49 	bl	8009c50 <_free_r>
 80087be:	2000      	movs	r0, #0
 80087c0:	6360      	str	r0, [r4, #52]	; 0x34
 80087c2:	e7c1      	b.n	8008748 <__sflush_r+0x1c>
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	2301      	movs	r3, #1
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b0      	blx	r6
 80087cc:	1c41      	adds	r1, r0, #1
 80087ce:	d1c7      	bne.n	8008760 <__sflush_r+0x34>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0c4      	beq.n	8008760 <__sflush_r+0x34>
 80087d6:	2b1d      	cmp	r3, #29
 80087d8:	d001      	beq.n	80087de <__sflush_r+0xb2>
 80087da:	2b16      	cmp	r3, #22
 80087dc:	d101      	bne.n	80087e2 <__sflush_r+0xb6>
 80087de:	602f      	str	r7, [r5, #0]
 80087e0:	e7b1      	b.n	8008746 <__sflush_r+0x1a>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	e7ad      	b.n	8008748 <__sflush_r+0x1c>
 80087ec:	690f      	ldr	r7, [r1, #16]
 80087ee:	2f00      	cmp	r7, #0
 80087f0:	d0a9      	beq.n	8008746 <__sflush_r+0x1a>
 80087f2:	0793      	lsls	r3, r2, #30
 80087f4:	680e      	ldr	r6, [r1, #0]
 80087f6:	bf08      	it	eq
 80087f8:	694b      	ldreq	r3, [r1, #20]
 80087fa:	600f      	str	r7, [r1, #0]
 80087fc:	bf18      	it	ne
 80087fe:	2300      	movne	r3, #0
 8008800:	eba6 0807 	sub.w	r8, r6, r7
 8008804:	608b      	str	r3, [r1, #8]
 8008806:	f1b8 0f00 	cmp.w	r8, #0
 800880a:	dd9c      	ble.n	8008746 <__sflush_r+0x1a>
 800880c:	6a21      	ldr	r1, [r4, #32]
 800880e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008810:	4643      	mov	r3, r8
 8008812:	463a      	mov	r2, r7
 8008814:	4628      	mov	r0, r5
 8008816:	47b0      	blx	r6
 8008818:	2800      	cmp	r0, #0
 800881a:	dc06      	bgt.n	800882a <__sflush_r+0xfe>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e78e      	b.n	8008748 <__sflush_r+0x1c>
 800882a:	4407      	add	r7, r0
 800882c:	eba8 0800 	sub.w	r8, r8, r0
 8008830:	e7e9      	b.n	8008806 <__sflush_r+0xda>
 8008832:	bf00      	nop
 8008834:	20400001 	.word	0x20400001

08008838 <_fflush_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	690b      	ldr	r3, [r1, #16]
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	b913      	cbnz	r3, 8008848 <_fflush_r+0x10>
 8008842:	2500      	movs	r5, #0
 8008844:	4628      	mov	r0, r5
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	b118      	cbz	r0, 8008852 <_fflush_r+0x1a>
 800884a:	6983      	ldr	r3, [r0, #24]
 800884c:	b90b      	cbnz	r3, 8008852 <_fflush_r+0x1a>
 800884e:	f000 f887 	bl	8008960 <__sinit>
 8008852:	4b14      	ldr	r3, [pc, #80]	; (80088a4 <_fflush_r+0x6c>)
 8008854:	429c      	cmp	r4, r3
 8008856:	d11b      	bne.n	8008890 <_fflush_r+0x58>
 8008858:	686c      	ldr	r4, [r5, #4]
 800885a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0ef      	beq.n	8008842 <_fflush_r+0xa>
 8008862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008864:	07d0      	lsls	r0, r2, #31
 8008866:	d404      	bmi.n	8008872 <_fflush_r+0x3a>
 8008868:	0599      	lsls	r1, r3, #22
 800886a:	d402      	bmi.n	8008872 <_fflush_r+0x3a>
 800886c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886e:	f000 fc88 	bl	8009182 <__retarget_lock_acquire_recursive>
 8008872:	4628      	mov	r0, r5
 8008874:	4621      	mov	r1, r4
 8008876:	f7ff ff59 	bl	800872c <__sflush_r>
 800887a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800887c:	07da      	lsls	r2, r3, #31
 800887e:	4605      	mov	r5, r0
 8008880:	d4e0      	bmi.n	8008844 <_fflush_r+0xc>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	059b      	lsls	r3, r3, #22
 8008886:	d4dd      	bmi.n	8008844 <_fflush_r+0xc>
 8008888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888a:	f000 fc7b 	bl	8009184 <__retarget_lock_release_recursive>
 800888e:	e7d9      	b.n	8008844 <_fflush_r+0xc>
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <_fflush_r+0x70>)
 8008892:	429c      	cmp	r4, r3
 8008894:	d101      	bne.n	800889a <_fflush_r+0x62>
 8008896:	68ac      	ldr	r4, [r5, #8]
 8008898:	e7df      	b.n	800885a <_fflush_r+0x22>
 800889a:	4b04      	ldr	r3, [pc, #16]	; (80088ac <_fflush_r+0x74>)
 800889c:	429c      	cmp	r4, r3
 800889e:	bf08      	it	eq
 80088a0:	68ec      	ldreq	r4, [r5, #12]
 80088a2:	e7da      	b.n	800885a <_fflush_r+0x22>
 80088a4:	0800ab4c 	.word	0x0800ab4c
 80088a8:	0800ab6c 	.word	0x0800ab6c
 80088ac:	0800ab2c 	.word	0x0800ab2c

080088b0 <std>:
 80088b0:	2300      	movs	r3, #0
 80088b2:	b510      	push	{r4, lr}
 80088b4:	4604      	mov	r4, r0
 80088b6:	e9c0 3300 	strd	r3, r3, [r0]
 80088ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088be:	6083      	str	r3, [r0, #8]
 80088c0:	8181      	strh	r1, [r0, #12]
 80088c2:	6643      	str	r3, [r0, #100]	; 0x64
 80088c4:	81c2      	strh	r2, [r0, #14]
 80088c6:	6183      	str	r3, [r0, #24]
 80088c8:	4619      	mov	r1, r3
 80088ca:	2208      	movs	r2, #8
 80088cc:	305c      	adds	r0, #92	; 0x5c
 80088ce:	f7fd fa0f 	bl	8005cf0 <memset>
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <std+0x38>)
 80088d4:	6263      	str	r3, [r4, #36]	; 0x24
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std+0x3c>)
 80088d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <std+0x40>)
 80088dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <std+0x44>)
 80088e0:	6224      	str	r4, [r4, #32]
 80088e2:	6323      	str	r3, [r4, #48]	; 0x30
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	bf00      	nop
 80088e8:	0800a3b1 	.word	0x0800a3b1
 80088ec:	0800a3d3 	.word	0x0800a3d3
 80088f0:	0800a40b 	.word	0x0800a40b
 80088f4:	0800a42f 	.word	0x0800a42f

080088f8 <_cleanup_r>:
 80088f8:	4901      	ldr	r1, [pc, #4]	; (8008900 <_cleanup_r+0x8>)
 80088fa:	f000 b8af 	b.w	8008a5c <_fwalk_reent>
 80088fe:	bf00      	nop
 8008900:	08008839 	.word	0x08008839

08008904 <__sfmoreglue>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	2268      	movs	r2, #104	; 0x68
 8008908:	1e4d      	subs	r5, r1, #1
 800890a:	4355      	muls	r5, r2
 800890c:	460e      	mov	r6, r1
 800890e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008912:	f001 fa09 	bl	8009d28 <_malloc_r>
 8008916:	4604      	mov	r4, r0
 8008918:	b140      	cbz	r0, 800892c <__sfmoreglue+0x28>
 800891a:	2100      	movs	r1, #0
 800891c:	e9c0 1600 	strd	r1, r6, [r0]
 8008920:	300c      	adds	r0, #12
 8008922:	60a0      	str	r0, [r4, #8]
 8008924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008928:	f7fd f9e2 	bl	8005cf0 <memset>
 800892c:	4620      	mov	r0, r4
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <__sfp_lock_acquire>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sfp_lock_acquire+0x8>)
 8008932:	f000 bc26 	b.w	8009182 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	200002f5 	.word	0x200002f5

0800893c <__sfp_lock_release>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__sfp_lock_release+0x8>)
 800893e:	f000 bc21 	b.w	8009184 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	200002f5 	.word	0x200002f5

08008948 <__sinit_lock_acquire>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__sinit_lock_acquire+0x8>)
 800894a:	f000 bc1a 	b.w	8009182 <__retarget_lock_acquire_recursive>
 800894e:	bf00      	nop
 8008950:	200002f6 	.word	0x200002f6

08008954 <__sinit_lock_release>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__sinit_lock_release+0x8>)
 8008956:	f000 bc15 	b.w	8009184 <__retarget_lock_release_recursive>
 800895a:	bf00      	nop
 800895c:	200002f6 	.word	0x200002f6

08008960 <__sinit>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4604      	mov	r4, r0
 8008964:	f7ff fff0 	bl	8008948 <__sinit_lock_acquire>
 8008968:	69a3      	ldr	r3, [r4, #24]
 800896a:	b11b      	cbz	r3, 8008974 <__sinit+0x14>
 800896c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008970:	f7ff bff0 	b.w	8008954 <__sinit_lock_release>
 8008974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008978:	6523      	str	r3, [r4, #80]	; 0x50
 800897a:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <__sinit+0x68>)
 800897c:	4a13      	ldr	r2, [pc, #76]	; (80089cc <__sinit+0x6c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	62a2      	str	r2, [r4, #40]	; 0x28
 8008982:	42a3      	cmp	r3, r4
 8008984:	bf04      	itt	eq
 8008986:	2301      	moveq	r3, #1
 8008988:	61a3      	streq	r3, [r4, #24]
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f820 	bl	80089d0 <__sfp>
 8008990:	6060      	str	r0, [r4, #4]
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f81c 	bl	80089d0 <__sfp>
 8008998:	60a0      	str	r0, [r4, #8]
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f818 	bl	80089d0 <__sfp>
 80089a0:	2200      	movs	r2, #0
 80089a2:	60e0      	str	r0, [r4, #12]
 80089a4:	2104      	movs	r1, #4
 80089a6:	6860      	ldr	r0, [r4, #4]
 80089a8:	f7ff ff82 	bl	80088b0 <std>
 80089ac:	68a0      	ldr	r0, [r4, #8]
 80089ae:	2201      	movs	r2, #1
 80089b0:	2109      	movs	r1, #9
 80089b2:	f7ff ff7d 	bl	80088b0 <std>
 80089b6:	68e0      	ldr	r0, [r4, #12]
 80089b8:	2202      	movs	r2, #2
 80089ba:	2112      	movs	r1, #18
 80089bc:	f7ff ff78 	bl	80088b0 <std>
 80089c0:	2301      	movs	r3, #1
 80089c2:	61a3      	str	r3, [r4, #24]
 80089c4:	e7d2      	b.n	800896c <__sinit+0xc>
 80089c6:	bf00      	nop
 80089c8:	0800a908 	.word	0x0800a908
 80089cc:	080088f9 	.word	0x080088f9

080089d0 <__sfp>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	4607      	mov	r7, r0
 80089d4:	f7ff ffac 	bl	8008930 <__sfp_lock_acquire>
 80089d8:	4b1e      	ldr	r3, [pc, #120]	; (8008a54 <__sfp+0x84>)
 80089da:	681e      	ldr	r6, [r3, #0]
 80089dc:	69b3      	ldr	r3, [r6, #24]
 80089de:	b913      	cbnz	r3, 80089e6 <__sfp+0x16>
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff ffbd 	bl	8008960 <__sinit>
 80089e6:	3648      	adds	r6, #72	; 0x48
 80089e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	d503      	bpl.n	80089f8 <__sfp+0x28>
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	b30b      	cbz	r3, 8008a38 <__sfp+0x68>
 80089f4:	6836      	ldr	r6, [r6, #0]
 80089f6:	e7f7      	b.n	80089e8 <__sfp+0x18>
 80089f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089fc:	b9d5      	cbnz	r5, 8008a34 <__sfp+0x64>
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <__sfp+0x88>)
 8008a00:	60e3      	str	r3, [r4, #12]
 8008a02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a06:	6665      	str	r5, [r4, #100]	; 0x64
 8008a08:	f000 fbba 	bl	8009180 <__retarget_lock_init_recursive>
 8008a0c:	f7ff ff96 	bl	800893c <__sfp_lock_release>
 8008a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a18:	6025      	str	r5, [r4, #0]
 8008a1a:	61a5      	str	r5, [r4, #24]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a24:	f7fd f964 	bl	8005cf0 <memset>
 8008a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a30:	4620      	mov	r0, r4
 8008a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a34:	3468      	adds	r4, #104	; 0x68
 8008a36:	e7d9      	b.n	80089ec <__sfp+0x1c>
 8008a38:	2104      	movs	r1, #4
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff ff62 	bl	8008904 <__sfmoreglue>
 8008a40:	4604      	mov	r4, r0
 8008a42:	6030      	str	r0, [r6, #0]
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d1d5      	bne.n	80089f4 <__sfp+0x24>
 8008a48:	f7ff ff78 	bl	800893c <__sfp_lock_release>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	e7ee      	b.n	8008a30 <__sfp+0x60>
 8008a52:	bf00      	nop
 8008a54:	0800a908 	.word	0x0800a908
 8008a58:	ffff0001 	.word	0xffff0001

08008a5c <_fwalk_reent>:
 8008a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	4606      	mov	r6, r0
 8008a62:	4688      	mov	r8, r1
 8008a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a68:	2700      	movs	r7, #0
 8008a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8008a72:	d505      	bpl.n	8008a80 <_fwalk_reent+0x24>
 8008a74:	6824      	ldr	r4, [r4, #0]
 8008a76:	2c00      	cmp	r4, #0
 8008a78:	d1f7      	bne.n	8008a6a <_fwalk_reent+0xe>
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a80:	89ab      	ldrh	r3, [r5, #12]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d907      	bls.n	8008a96 <_fwalk_reent+0x3a>
 8008a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	d003      	beq.n	8008a96 <_fwalk_reent+0x3a>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4630      	mov	r0, r6
 8008a92:	47c0      	blx	r8
 8008a94:	4307      	orrs	r7, r0
 8008a96:	3568      	adds	r5, #104	; 0x68
 8008a98:	e7e9      	b.n	8008a6e <_fwalk_reent+0x12>

08008a9a <rshift>:
 8008a9a:	6903      	ldr	r3, [r0, #16]
 8008a9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008aa8:	f100 0414 	add.w	r4, r0, #20
 8008aac:	dd45      	ble.n	8008b3a <rshift+0xa0>
 8008aae:	f011 011f 	ands.w	r1, r1, #31
 8008ab2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ab6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008aba:	d10c      	bne.n	8008ad6 <rshift+0x3c>
 8008abc:	f100 0710 	add.w	r7, r0, #16
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	42b1      	cmp	r1, r6
 8008ac4:	d334      	bcc.n	8008b30 <rshift+0x96>
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	1eea      	subs	r2, r5, #3
 8008acc:	4296      	cmp	r6, r2
 8008ace:	bf38      	it	cc
 8008ad0:	2300      	movcc	r3, #0
 8008ad2:	4423      	add	r3, r4
 8008ad4:	e015      	b.n	8008b02 <rshift+0x68>
 8008ad6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ada:	f1c1 0820 	rsb	r8, r1, #32
 8008ade:	40cf      	lsrs	r7, r1
 8008ae0:	f105 0e04 	add.w	lr, r5, #4
 8008ae4:	46a1      	mov	r9, r4
 8008ae6:	4576      	cmp	r6, lr
 8008ae8:	46f4      	mov	ip, lr
 8008aea:	d815      	bhi.n	8008b18 <rshift+0x7e>
 8008aec:	1a9a      	subs	r2, r3, r2
 8008aee:	0092      	lsls	r2, r2, #2
 8008af0:	3a04      	subs	r2, #4
 8008af2:	3501      	adds	r5, #1
 8008af4:	42ae      	cmp	r6, r5
 8008af6:	bf38      	it	cc
 8008af8:	2200      	movcc	r2, #0
 8008afa:	18a3      	adds	r3, r4, r2
 8008afc:	50a7      	str	r7, [r4, r2]
 8008afe:	b107      	cbz	r7, 8008b02 <rshift+0x68>
 8008b00:	3304      	adds	r3, #4
 8008b02:	1b1a      	subs	r2, r3, r4
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b0a:	bf08      	it	eq
 8008b0c:	2300      	moveq	r3, #0
 8008b0e:	6102      	str	r2, [r0, #16]
 8008b10:	bf08      	it	eq
 8008b12:	6143      	streq	r3, [r0, #20]
 8008b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b18:	f8dc c000 	ldr.w	ip, [ip]
 8008b1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b20:	ea4c 0707 	orr.w	r7, ip, r7
 8008b24:	f849 7b04 	str.w	r7, [r9], #4
 8008b28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b2c:	40cf      	lsrs	r7, r1
 8008b2e:	e7da      	b.n	8008ae6 <rshift+0x4c>
 8008b30:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b34:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b38:	e7c3      	b.n	8008ac2 <rshift+0x28>
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	e7e1      	b.n	8008b02 <rshift+0x68>

08008b3e <__hexdig_fun>:
 8008b3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d802      	bhi.n	8008b4c <__hexdig_fun+0xe>
 8008b46:	3820      	subs	r0, #32
 8008b48:	b2c0      	uxtb	r0, r0
 8008b4a:	4770      	bx	lr
 8008b4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b50:	2b05      	cmp	r3, #5
 8008b52:	d801      	bhi.n	8008b58 <__hexdig_fun+0x1a>
 8008b54:	3847      	subs	r0, #71	; 0x47
 8008b56:	e7f7      	b.n	8008b48 <__hexdig_fun+0xa>
 8008b58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	d801      	bhi.n	8008b64 <__hexdig_fun+0x26>
 8008b60:	3827      	subs	r0, #39	; 0x27
 8008b62:	e7f1      	b.n	8008b48 <__hexdig_fun+0xa>
 8008b64:	2000      	movs	r0, #0
 8008b66:	4770      	bx	lr

08008b68 <__gethex>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ed2d 8b02 	vpush	{d8}
 8008b70:	b089      	sub	sp, #36	; 0x24
 8008b72:	ee08 0a10 	vmov	s16, r0
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	4bb4      	ldr	r3, [pc, #720]	; (8008e4c <__gethex+0x2e4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	468b      	mov	fp, r1
 8008b82:	4690      	mov	r8, r2
 8008b84:	f7f7 fafc 	bl	8000180 <strlen>
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	f8db 2000 	ldr.w	r2, [fp]
 8008b8e:	4403      	add	r3, r0
 8008b90:	4682      	mov	sl, r0
 8008b92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	1c93      	adds	r3, r2, #2
 8008b9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ba2:	32fe      	adds	r2, #254	; 0xfe
 8008ba4:	18d1      	adds	r1, r2, r3
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008bac:	9100      	str	r1, [sp, #0]
 8008bae:	2830      	cmp	r0, #48	; 0x30
 8008bb0:	d0f8      	beq.n	8008ba4 <__gethex+0x3c>
 8008bb2:	f7ff ffc4 	bl	8008b3e <__hexdig_fun>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d13a      	bne.n	8008c32 <__gethex+0xca>
 8008bbc:	9901      	ldr	r1, [sp, #4]
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f001 fc38 	bl	800a436 <strncmp>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d168      	bne.n	8008c9e <__gethex+0x136>
 8008bcc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008bd0:	eb07 060a 	add.w	r6, r7, sl
 8008bd4:	f7ff ffb3 	bl	8008b3e <__hexdig_fun>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d062      	beq.n	8008ca2 <__gethex+0x13a>
 8008bdc:	4633      	mov	r3, r6
 8008bde:	7818      	ldrb	r0, [r3, #0]
 8008be0:	2830      	cmp	r0, #48	; 0x30
 8008be2:	461f      	mov	r7, r3
 8008be4:	f103 0301 	add.w	r3, r3, #1
 8008be8:	d0f9      	beq.n	8008bde <__gethex+0x76>
 8008bea:	f7ff ffa8 	bl	8008b3e <__hexdig_fun>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	fab0 f480 	clz	r4, r0
 8008bf4:	0964      	lsrs	r4, r4, #5
 8008bf6:	4635      	mov	r5, r6
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	463a      	mov	r2, r7
 8008bfc:	4616      	mov	r6, r2
 8008bfe:	3201      	adds	r2, #1
 8008c00:	7830      	ldrb	r0, [r6, #0]
 8008c02:	f7ff ff9c 	bl	8008b3e <__hexdig_fun>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d1f8      	bne.n	8008bfc <__gethex+0x94>
 8008c0a:	9901      	ldr	r1, [sp, #4]
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f001 fc11 	bl	800a436 <strncmp>
 8008c14:	b980      	cbnz	r0, 8008c38 <__gethex+0xd0>
 8008c16:	b94d      	cbnz	r5, 8008c2c <__gethex+0xc4>
 8008c18:	eb06 050a 	add.w	r5, r6, sl
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4616      	mov	r6, r2
 8008c20:	3201      	adds	r2, #1
 8008c22:	7830      	ldrb	r0, [r6, #0]
 8008c24:	f7ff ff8b 	bl	8008b3e <__hexdig_fun>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1f8      	bne.n	8008c1e <__gethex+0xb6>
 8008c2c:	1bad      	subs	r5, r5, r6
 8008c2e:	00ad      	lsls	r5, r5, #2
 8008c30:	e004      	b.n	8008c3c <__gethex+0xd4>
 8008c32:	2400      	movs	r4, #0
 8008c34:	4625      	mov	r5, r4
 8008c36:	e7e0      	b.n	8008bfa <__gethex+0x92>
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	d1f7      	bne.n	8008c2c <__gethex+0xc4>
 8008c3c:	7833      	ldrb	r3, [r6, #0]
 8008c3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c42:	2b50      	cmp	r3, #80	; 0x50
 8008c44:	d13b      	bne.n	8008cbe <__gethex+0x156>
 8008c46:	7873      	ldrb	r3, [r6, #1]
 8008c48:	2b2b      	cmp	r3, #43	; 0x2b
 8008c4a:	d02c      	beq.n	8008ca6 <__gethex+0x13e>
 8008c4c:	2b2d      	cmp	r3, #45	; 0x2d
 8008c4e:	d02e      	beq.n	8008cae <__gethex+0x146>
 8008c50:	1c71      	adds	r1, r6, #1
 8008c52:	f04f 0900 	mov.w	r9, #0
 8008c56:	7808      	ldrb	r0, [r1, #0]
 8008c58:	f7ff ff71 	bl	8008b3e <__hexdig_fun>
 8008c5c:	1e43      	subs	r3, r0, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b18      	cmp	r3, #24
 8008c62:	d82c      	bhi.n	8008cbe <__gethex+0x156>
 8008c64:	f1a0 0210 	sub.w	r2, r0, #16
 8008c68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c6c:	f7ff ff67 	bl	8008b3e <__hexdig_fun>
 8008c70:	1e43      	subs	r3, r0, #1
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b18      	cmp	r3, #24
 8008c76:	d91d      	bls.n	8008cb4 <__gethex+0x14c>
 8008c78:	f1b9 0f00 	cmp.w	r9, #0
 8008c7c:	d000      	beq.n	8008c80 <__gethex+0x118>
 8008c7e:	4252      	negs	r2, r2
 8008c80:	4415      	add	r5, r2
 8008c82:	f8cb 1000 	str.w	r1, [fp]
 8008c86:	b1e4      	cbz	r4, 8008cc2 <__gethex+0x15a>
 8008c88:	9b00      	ldr	r3, [sp, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf14      	ite	ne
 8008c8e:	2700      	movne	r7, #0
 8008c90:	2706      	moveq	r7, #6
 8008c92:	4638      	mov	r0, r7
 8008c94:	b009      	add	sp, #36	; 0x24
 8008c96:	ecbd 8b02 	vpop	{d8}
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	463e      	mov	r6, r7
 8008ca0:	4625      	mov	r5, r4
 8008ca2:	2401      	movs	r4, #1
 8008ca4:	e7ca      	b.n	8008c3c <__gethex+0xd4>
 8008ca6:	f04f 0900 	mov.w	r9, #0
 8008caa:	1cb1      	adds	r1, r6, #2
 8008cac:	e7d3      	b.n	8008c56 <__gethex+0xee>
 8008cae:	f04f 0901 	mov.w	r9, #1
 8008cb2:	e7fa      	b.n	8008caa <__gethex+0x142>
 8008cb4:	230a      	movs	r3, #10
 8008cb6:	fb03 0202 	mla	r2, r3, r2, r0
 8008cba:	3a10      	subs	r2, #16
 8008cbc:	e7d4      	b.n	8008c68 <__gethex+0x100>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	e7df      	b.n	8008c82 <__gethex+0x11a>
 8008cc2:	1bf3      	subs	r3, r6, r7
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	2b07      	cmp	r3, #7
 8008cca:	dc0b      	bgt.n	8008ce4 <__gethex+0x17c>
 8008ccc:	ee18 0a10 	vmov	r0, s16
 8008cd0:	f000 fae6 	bl	80092a0 <_Balloc>
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	b940      	cbnz	r0, 8008cea <__gethex+0x182>
 8008cd8:	4b5d      	ldr	r3, [pc, #372]	; (8008e50 <__gethex+0x2e8>)
 8008cda:	4602      	mov	r2, r0
 8008cdc:	21de      	movs	r1, #222	; 0xde
 8008cde:	485d      	ldr	r0, [pc, #372]	; (8008e54 <__gethex+0x2ec>)
 8008ce0:	f001 fbdc 	bl	800a49c <__assert_func>
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	105b      	asrs	r3, r3, #1
 8008ce8:	e7ee      	b.n	8008cc8 <__gethex+0x160>
 8008cea:	f100 0914 	add.w	r9, r0, #20
 8008cee:	f04f 0b00 	mov.w	fp, #0
 8008cf2:	f1ca 0301 	rsb	r3, sl, #1
 8008cf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cfa:	f8cd b000 	str.w	fp, [sp]
 8008cfe:	9306      	str	r3, [sp, #24]
 8008d00:	42b7      	cmp	r7, r6
 8008d02:	d340      	bcc.n	8008d86 <__gethex+0x21e>
 8008d04:	9802      	ldr	r0, [sp, #8]
 8008d06:	9b00      	ldr	r3, [sp, #0]
 8008d08:	f840 3b04 	str.w	r3, [r0], #4
 8008d0c:	eba0 0009 	sub.w	r0, r0, r9
 8008d10:	1080      	asrs	r0, r0, #2
 8008d12:	0146      	lsls	r6, r0, #5
 8008d14:	6120      	str	r0, [r4, #16]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fbb4 	bl	8009484 <__hi0bits>
 8008d1c:	1a30      	subs	r0, r6, r0
 8008d1e:	f8d8 6000 	ldr.w	r6, [r8]
 8008d22:	42b0      	cmp	r0, r6
 8008d24:	dd63      	ble.n	8008dee <__gethex+0x286>
 8008d26:	1b87      	subs	r7, r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 ff58 	bl	8009be0 <__any_on>
 8008d30:	4682      	mov	sl, r0
 8008d32:	b1a8      	cbz	r0, 8008d60 <__gethex+0x1f8>
 8008d34:	1e7b      	subs	r3, r7, #1
 8008d36:	1159      	asrs	r1, r3, #5
 8008d38:	f003 021f 	and.w	r2, r3, #31
 8008d3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d40:	f04f 0a01 	mov.w	sl, #1
 8008d44:	fa0a f202 	lsl.w	r2, sl, r2
 8008d48:	420a      	tst	r2, r1
 8008d4a:	d009      	beq.n	8008d60 <__gethex+0x1f8>
 8008d4c:	4553      	cmp	r3, sl
 8008d4e:	dd05      	ble.n	8008d5c <__gethex+0x1f4>
 8008d50:	1eb9      	subs	r1, r7, #2
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 ff44 	bl	8009be0 <__any_on>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d145      	bne.n	8008de8 <__gethex+0x280>
 8008d5c:	f04f 0a02 	mov.w	sl, #2
 8008d60:	4639      	mov	r1, r7
 8008d62:	4620      	mov	r0, r4
 8008d64:	f7ff fe99 	bl	8008a9a <rshift>
 8008d68:	443d      	add	r5, r7
 8008d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d6e:	42ab      	cmp	r3, r5
 8008d70:	da4c      	bge.n	8008e0c <__gethex+0x2a4>
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	4621      	mov	r1, r4
 8008d78:	f000 fad2 	bl	8009320 <_Bfree>
 8008d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	27a3      	movs	r7, #163	; 0xa3
 8008d84:	e785      	b.n	8008c92 <__gethex+0x12a>
 8008d86:	1e73      	subs	r3, r6, #1
 8008d88:	9a05      	ldr	r2, [sp, #20]
 8008d8a:	9303      	str	r3, [sp, #12]
 8008d8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d019      	beq.n	8008dc8 <__gethex+0x260>
 8008d94:	f1bb 0f20 	cmp.w	fp, #32
 8008d98:	d107      	bne.n	8008daa <__gethex+0x242>
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	9a00      	ldr	r2, [sp, #0]
 8008d9e:	f843 2b04 	str.w	r2, [r3], #4
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	469b      	mov	fp, r3
 8008daa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008dae:	f7ff fec6 	bl	8008b3e <__hexdig_fun>
 8008db2:	9b00      	ldr	r3, [sp, #0]
 8008db4:	f000 000f 	and.w	r0, r0, #15
 8008db8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008dbc:	4303      	orrs	r3, r0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	f10b 0b04 	add.w	fp, fp, #4
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	e00d      	b.n	8008de4 <__gethex+0x27c>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	9a06      	ldr	r2, [sp, #24]
 8008dcc:	4413      	add	r3, r2
 8008dce:	42bb      	cmp	r3, r7
 8008dd0:	d3e0      	bcc.n	8008d94 <__gethex+0x22c>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	9901      	ldr	r1, [sp, #4]
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	4652      	mov	r2, sl
 8008dda:	f001 fb2c 	bl	800a436 <strncmp>
 8008dde:	9b07      	ldr	r3, [sp, #28]
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d1d7      	bne.n	8008d94 <__gethex+0x22c>
 8008de4:	461e      	mov	r6, r3
 8008de6:	e78b      	b.n	8008d00 <__gethex+0x198>
 8008de8:	f04f 0a03 	mov.w	sl, #3
 8008dec:	e7b8      	b.n	8008d60 <__gethex+0x1f8>
 8008dee:	da0a      	bge.n	8008e06 <__gethex+0x29e>
 8008df0:	1a37      	subs	r7, r6, r0
 8008df2:	4621      	mov	r1, r4
 8008df4:	ee18 0a10 	vmov	r0, s16
 8008df8:	463a      	mov	r2, r7
 8008dfa:	f000 fcad 	bl	8009758 <__lshift>
 8008dfe:	1bed      	subs	r5, r5, r7
 8008e00:	4604      	mov	r4, r0
 8008e02:	f100 0914 	add.w	r9, r0, #20
 8008e06:	f04f 0a00 	mov.w	sl, #0
 8008e0a:	e7ae      	b.n	8008d6a <__gethex+0x202>
 8008e0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e10:	42a8      	cmp	r0, r5
 8008e12:	dd72      	ble.n	8008efa <__gethex+0x392>
 8008e14:	1b45      	subs	r5, r0, r5
 8008e16:	42ae      	cmp	r6, r5
 8008e18:	dc36      	bgt.n	8008e88 <__gethex+0x320>
 8008e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d02a      	beq.n	8008e78 <__gethex+0x310>
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d02c      	beq.n	8008e80 <__gethex+0x318>
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d11c      	bne.n	8008e64 <__gethex+0x2fc>
 8008e2a:	42ae      	cmp	r6, r5
 8008e2c:	d11a      	bne.n	8008e64 <__gethex+0x2fc>
 8008e2e:	2e01      	cmp	r6, #1
 8008e30:	d112      	bne.n	8008e58 <__gethex+0x2f0>
 8008e32:	9a04      	ldr	r2, [sp, #16]
 8008e34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	6123      	str	r3, [r4, #16]
 8008e3e:	f8c9 3000 	str.w	r3, [r9]
 8008e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e44:	2762      	movs	r7, #98	; 0x62
 8008e46:	601c      	str	r4, [r3, #0]
 8008e48:	e723      	b.n	8008c92 <__gethex+0x12a>
 8008e4a:	bf00      	nop
 8008e4c:	0800abf4 	.word	0x0800abf4
 8008e50:	0800ab18 	.word	0x0800ab18
 8008e54:	0800ab8c 	.word	0x0800ab8c
 8008e58:	1e71      	subs	r1, r6, #1
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fec0 	bl	8009be0 <__any_on>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1e6      	bne.n	8008e32 <__gethex+0x2ca>
 8008e64:	ee18 0a10 	vmov	r0, s16
 8008e68:	4621      	mov	r1, r4
 8008e6a:	f000 fa59 	bl	8009320 <_Bfree>
 8008e6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e70:	2300      	movs	r3, #0
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	2750      	movs	r7, #80	; 0x50
 8008e76:	e70c      	b.n	8008c92 <__gethex+0x12a>
 8008e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1f2      	bne.n	8008e64 <__gethex+0x2fc>
 8008e7e:	e7d8      	b.n	8008e32 <__gethex+0x2ca>
 8008e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1d5      	bne.n	8008e32 <__gethex+0x2ca>
 8008e86:	e7ed      	b.n	8008e64 <__gethex+0x2fc>
 8008e88:	1e6f      	subs	r7, r5, #1
 8008e8a:	f1ba 0f00 	cmp.w	sl, #0
 8008e8e:	d131      	bne.n	8008ef4 <__gethex+0x38c>
 8008e90:	b127      	cbz	r7, 8008e9c <__gethex+0x334>
 8008e92:	4639      	mov	r1, r7
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 fea3 	bl	8009be0 <__any_on>
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	117b      	asrs	r3, r7, #5
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ea4:	f007 071f 	and.w	r7, r7, #31
 8008ea8:	fa01 f707 	lsl.w	r7, r1, r7
 8008eac:	421f      	tst	r7, r3
 8008eae:	4629      	mov	r1, r5
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bf18      	it	ne
 8008eb4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008eb8:	1b76      	subs	r6, r6, r5
 8008eba:	f7ff fdee 	bl	8008a9a <rshift>
 8008ebe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ec2:	2702      	movs	r7, #2
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	d048      	beq.n	8008f5c <__gethex+0x3f4>
 8008eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d015      	beq.n	8008efe <__gethex+0x396>
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d017      	beq.n	8008f06 <__gethex+0x39e>
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d109      	bne.n	8008eee <__gethex+0x386>
 8008eda:	f01a 0f02 	tst.w	sl, #2
 8008ede:	d006      	beq.n	8008eee <__gethex+0x386>
 8008ee0:	f8d9 0000 	ldr.w	r0, [r9]
 8008ee4:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ee8:	f01a 0f01 	tst.w	sl, #1
 8008eec:	d10e      	bne.n	8008f0c <__gethex+0x3a4>
 8008eee:	f047 0710 	orr.w	r7, r7, #16
 8008ef2:	e033      	b.n	8008f5c <__gethex+0x3f4>
 8008ef4:	f04f 0a01 	mov.w	sl, #1
 8008ef8:	e7d0      	b.n	8008e9c <__gethex+0x334>
 8008efa:	2701      	movs	r7, #1
 8008efc:	e7e2      	b.n	8008ec4 <__gethex+0x35c>
 8008efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f00:	f1c3 0301 	rsb	r3, r3, #1
 8008f04:	9315      	str	r3, [sp, #84]	; 0x54
 8008f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0f0      	beq.n	8008eee <__gethex+0x386>
 8008f0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f10:	f104 0314 	add.w	r3, r4, #20
 8008f14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f1c:	f04f 0c00 	mov.w	ip, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f2a:	d01c      	beq.n	8008f66 <__gethex+0x3fe>
 8008f2c:	3201      	adds	r2, #1
 8008f2e:	6002      	str	r2, [r0, #0]
 8008f30:	2f02      	cmp	r7, #2
 8008f32:	f104 0314 	add.w	r3, r4, #20
 8008f36:	d13f      	bne.n	8008fb8 <__gethex+0x450>
 8008f38:	f8d8 2000 	ldr.w	r2, [r8]
 8008f3c:	3a01      	subs	r2, #1
 8008f3e:	42b2      	cmp	r2, r6
 8008f40:	d10a      	bne.n	8008f58 <__gethex+0x3f0>
 8008f42:	1171      	asrs	r1, r6, #5
 8008f44:	2201      	movs	r2, #1
 8008f46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f4a:	f006 061f 	and.w	r6, r6, #31
 8008f4e:	fa02 f606 	lsl.w	r6, r2, r6
 8008f52:	421e      	tst	r6, r3
 8008f54:	bf18      	it	ne
 8008f56:	4617      	movne	r7, r2
 8008f58:	f047 0720 	orr.w	r7, r7, #32
 8008f5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f5e:	601c      	str	r4, [r3, #0]
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	601d      	str	r5, [r3, #0]
 8008f64:	e695      	b.n	8008c92 <__gethex+0x12a>
 8008f66:	4299      	cmp	r1, r3
 8008f68:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f6c:	d8d8      	bhi.n	8008f20 <__gethex+0x3b8>
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	459b      	cmp	fp, r3
 8008f72:	db19      	blt.n	8008fa8 <__gethex+0x440>
 8008f74:	6861      	ldr	r1, [r4, #4]
 8008f76:	ee18 0a10 	vmov	r0, s16
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	f000 f990 	bl	80092a0 <_Balloc>
 8008f80:	4681      	mov	r9, r0
 8008f82:	b918      	cbnz	r0, 8008f8c <__gethex+0x424>
 8008f84:	4b1a      	ldr	r3, [pc, #104]	; (8008ff0 <__gethex+0x488>)
 8008f86:	4602      	mov	r2, r0
 8008f88:	2184      	movs	r1, #132	; 0x84
 8008f8a:	e6a8      	b.n	8008cde <__gethex+0x176>
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	3202      	adds	r2, #2
 8008f90:	f104 010c 	add.w	r1, r4, #12
 8008f94:	0092      	lsls	r2, r2, #2
 8008f96:	300c      	adds	r0, #12
 8008f98:	f000 f974 	bl	8009284 <memcpy>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	ee18 0a10 	vmov	r0, s16
 8008fa2:	f000 f9bd 	bl	8009320 <_Bfree>
 8008fa6:	464c      	mov	r4, r9
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fb0:	6122      	str	r2, [r4, #16]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	615a      	str	r2, [r3, #20]
 8008fb6:	e7bb      	b.n	8008f30 <__gethex+0x3c8>
 8008fb8:	6922      	ldr	r2, [r4, #16]
 8008fba:	455a      	cmp	r2, fp
 8008fbc:	dd0b      	ble.n	8008fd6 <__gethex+0x46e>
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f7ff fd6a 	bl	8008a9a <rshift>
 8008fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fca:	3501      	adds	r5, #1
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	f6ff aed0 	blt.w	8008d72 <__gethex+0x20a>
 8008fd2:	2701      	movs	r7, #1
 8008fd4:	e7c0      	b.n	8008f58 <__gethex+0x3f0>
 8008fd6:	f016 061f 	ands.w	r6, r6, #31
 8008fda:	d0fa      	beq.n	8008fd2 <__gethex+0x46a>
 8008fdc:	4453      	add	r3, sl
 8008fde:	f1c6 0620 	rsb	r6, r6, #32
 8008fe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fe6:	f000 fa4d 	bl	8009484 <__hi0bits>
 8008fea:	42b0      	cmp	r0, r6
 8008fec:	dbe7      	blt.n	8008fbe <__gethex+0x456>
 8008fee:	e7f0      	b.n	8008fd2 <__gethex+0x46a>
 8008ff0:	0800ab18 	.word	0x0800ab18

08008ff4 <L_shift>:
 8008ff4:	f1c2 0208 	rsb	r2, r2, #8
 8008ff8:	0092      	lsls	r2, r2, #2
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	f1c2 0620 	rsb	r6, r2, #32
 8009000:	6843      	ldr	r3, [r0, #4]
 8009002:	6804      	ldr	r4, [r0, #0]
 8009004:	fa03 f506 	lsl.w	r5, r3, r6
 8009008:	432c      	orrs	r4, r5
 800900a:	40d3      	lsrs	r3, r2
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009012:	4288      	cmp	r0, r1
 8009014:	d3f4      	bcc.n	8009000 <L_shift+0xc>
 8009016:	bd70      	pop	{r4, r5, r6, pc}

08009018 <__match>:
 8009018:	b530      	push	{r4, r5, lr}
 800901a:	6803      	ldr	r3, [r0, #0]
 800901c:	3301      	adds	r3, #1
 800901e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009022:	b914      	cbnz	r4, 800902a <__match+0x12>
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	2001      	movs	r0, #1
 8009028:	bd30      	pop	{r4, r5, pc}
 800902a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800902e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009032:	2d19      	cmp	r5, #25
 8009034:	bf98      	it	ls
 8009036:	3220      	addls	r2, #32
 8009038:	42a2      	cmp	r2, r4
 800903a:	d0f0      	beq.n	800901e <__match+0x6>
 800903c:	2000      	movs	r0, #0
 800903e:	e7f3      	b.n	8009028 <__match+0x10>

08009040 <__hexnan>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	680b      	ldr	r3, [r1, #0]
 8009046:	115e      	asrs	r6, r3, #5
 8009048:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800904c:	f013 031f 	ands.w	r3, r3, #31
 8009050:	b087      	sub	sp, #28
 8009052:	bf18      	it	ne
 8009054:	3604      	addne	r6, #4
 8009056:	2500      	movs	r5, #0
 8009058:	1f37      	subs	r7, r6, #4
 800905a:	4690      	mov	r8, r2
 800905c:	6802      	ldr	r2, [r0, #0]
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	4682      	mov	sl, r0
 8009062:	f846 5c04 	str.w	r5, [r6, #-4]
 8009066:	46b9      	mov	r9, r7
 8009068:	463c      	mov	r4, r7
 800906a:	9502      	str	r5, [sp, #8]
 800906c:	46ab      	mov	fp, r5
 800906e:	7851      	ldrb	r1, [r2, #1]
 8009070:	1c53      	adds	r3, r2, #1
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	b341      	cbz	r1, 80090c8 <__hexnan+0x88>
 8009076:	4608      	mov	r0, r1
 8009078:	9205      	str	r2, [sp, #20]
 800907a:	9104      	str	r1, [sp, #16]
 800907c:	f7ff fd5f 	bl	8008b3e <__hexdig_fun>
 8009080:	2800      	cmp	r0, #0
 8009082:	d14f      	bne.n	8009124 <__hexnan+0xe4>
 8009084:	9904      	ldr	r1, [sp, #16]
 8009086:	9a05      	ldr	r2, [sp, #20]
 8009088:	2920      	cmp	r1, #32
 800908a:	d818      	bhi.n	80090be <__hexnan+0x7e>
 800908c:	9b02      	ldr	r3, [sp, #8]
 800908e:	459b      	cmp	fp, r3
 8009090:	dd13      	ble.n	80090ba <__hexnan+0x7a>
 8009092:	454c      	cmp	r4, r9
 8009094:	d206      	bcs.n	80090a4 <__hexnan+0x64>
 8009096:	2d07      	cmp	r5, #7
 8009098:	dc04      	bgt.n	80090a4 <__hexnan+0x64>
 800909a:	462a      	mov	r2, r5
 800909c:	4649      	mov	r1, r9
 800909e:	4620      	mov	r0, r4
 80090a0:	f7ff ffa8 	bl	8008ff4 <L_shift>
 80090a4:	4544      	cmp	r4, r8
 80090a6:	d950      	bls.n	800914a <__hexnan+0x10a>
 80090a8:	2300      	movs	r3, #0
 80090aa:	f1a4 0904 	sub.w	r9, r4, #4
 80090ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80090b2:	f8cd b008 	str.w	fp, [sp, #8]
 80090b6:	464c      	mov	r4, r9
 80090b8:	461d      	mov	r5, r3
 80090ba:	9a03      	ldr	r2, [sp, #12]
 80090bc:	e7d7      	b.n	800906e <__hexnan+0x2e>
 80090be:	2929      	cmp	r1, #41	; 0x29
 80090c0:	d156      	bne.n	8009170 <__hexnan+0x130>
 80090c2:	3202      	adds	r2, #2
 80090c4:	f8ca 2000 	str.w	r2, [sl]
 80090c8:	f1bb 0f00 	cmp.w	fp, #0
 80090cc:	d050      	beq.n	8009170 <__hexnan+0x130>
 80090ce:	454c      	cmp	r4, r9
 80090d0:	d206      	bcs.n	80090e0 <__hexnan+0xa0>
 80090d2:	2d07      	cmp	r5, #7
 80090d4:	dc04      	bgt.n	80090e0 <__hexnan+0xa0>
 80090d6:	462a      	mov	r2, r5
 80090d8:	4649      	mov	r1, r9
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff ff8a 	bl	8008ff4 <L_shift>
 80090e0:	4544      	cmp	r4, r8
 80090e2:	d934      	bls.n	800914e <__hexnan+0x10e>
 80090e4:	f1a8 0204 	sub.w	r2, r8, #4
 80090e8:	4623      	mov	r3, r4
 80090ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80090ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80090f2:	429f      	cmp	r7, r3
 80090f4:	d2f9      	bcs.n	80090ea <__hexnan+0xaa>
 80090f6:	1b3b      	subs	r3, r7, r4
 80090f8:	f023 0303 	bic.w	r3, r3, #3
 80090fc:	3304      	adds	r3, #4
 80090fe:	3401      	adds	r4, #1
 8009100:	3e03      	subs	r6, #3
 8009102:	42b4      	cmp	r4, r6
 8009104:	bf88      	it	hi
 8009106:	2304      	movhi	r3, #4
 8009108:	4443      	add	r3, r8
 800910a:	2200      	movs	r2, #0
 800910c:	f843 2b04 	str.w	r2, [r3], #4
 8009110:	429f      	cmp	r7, r3
 8009112:	d2fb      	bcs.n	800910c <__hexnan+0xcc>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	b91b      	cbnz	r3, 8009120 <__hexnan+0xe0>
 8009118:	4547      	cmp	r7, r8
 800911a:	d127      	bne.n	800916c <__hexnan+0x12c>
 800911c:	2301      	movs	r3, #1
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	2005      	movs	r0, #5
 8009122:	e026      	b.n	8009172 <__hexnan+0x132>
 8009124:	3501      	adds	r5, #1
 8009126:	2d08      	cmp	r5, #8
 8009128:	f10b 0b01 	add.w	fp, fp, #1
 800912c:	dd06      	ble.n	800913c <__hexnan+0xfc>
 800912e:	4544      	cmp	r4, r8
 8009130:	d9c3      	bls.n	80090ba <__hexnan+0x7a>
 8009132:	2300      	movs	r3, #0
 8009134:	f844 3c04 	str.w	r3, [r4, #-4]
 8009138:	2501      	movs	r5, #1
 800913a:	3c04      	subs	r4, #4
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	f000 000f 	and.w	r0, r0, #15
 8009142:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009146:	6022      	str	r2, [r4, #0]
 8009148:	e7b7      	b.n	80090ba <__hexnan+0x7a>
 800914a:	2508      	movs	r5, #8
 800914c:	e7b5      	b.n	80090ba <__hexnan+0x7a>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0df      	beq.n	8009114 <__hexnan+0xd4>
 8009154:	f04f 32ff 	mov.w	r2, #4294967295
 8009158:	f1c3 0320 	rsb	r3, r3, #32
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009164:	401a      	ands	r2, r3
 8009166:	f846 2c04 	str.w	r2, [r6, #-4]
 800916a:	e7d3      	b.n	8009114 <__hexnan+0xd4>
 800916c:	3f04      	subs	r7, #4
 800916e:	e7d1      	b.n	8009114 <__hexnan+0xd4>
 8009170:	2004      	movs	r0, #4
 8009172:	b007      	add	sp, #28
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009178 <_localeconv_r>:
 8009178:	4800      	ldr	r0, [pc, #0]	; (800917c <_localeconv_r+0x4>)
 800917a:	4770      	bx	lr
 800917c:	2000016c 	.word	0x2000016c

08009180 <__retarget_lock_init_recursive>:
 8009180:	4770      	bx	lr

08009182 <__retarget_lock_acquire_recursive>:
 8009182:	4770      	bx	lr

08009184 <__retarget_lock_release_recursive>:
 8009184:	4770      	bx	lr

08009186 <__swhatbuf_r>:
 8009186:	b570      	push	{r4, r5, r6, lr}
 8009188:	460e      	mov	r6, r1
 800918a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918e:	2900      	cmp	r1, #0
 8009190:	b096      	sub	sp, #88	; 0x58
 8009192:	4614      	mov	r4, r2
 8009194:	461d      	mov	r5, r3
 8009196:	da08      	bge.n	80091aa <__swhatbuf_r+0x24>
 8009198:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	602a      	str	r2, [r5, #0]
 80091a0:	061a      	lsls	r2, r3, #24
 80091a2:	d410      	bmi.n	80091c6 <__swhatbuf_r+0x40>
 80091a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a8:	e00e      	b.n	80091c8 <__swhatbuf_r+0x42>
 80091aa:	466a      	mov	r2, sp
 80091ac:	f001 f9b6 	bl	800a51c <_fstat_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dbf1      	blt.n	8009198 <__swhatbuf_r+0x12>
 80091b4:	9a01      	ldr	r2, [sp, #4]
 80091b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091be:	425a      	negs	r2, r3
 80091c0:	415a      	adcs	r2, r3
 80091c2:	602a      	str	r2, [r5, #0]
 80091c4:	e7ee      	b.n	80091a4 <__swhatbuf_r+0x1e>
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	2000      	movs	r0, #0
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	b016      	add	sp, #88	; 0x58
 80091ce:	bd70      	pop	{r4, r5, r6, pc}

080091d0 <__smakebuf_r>:
 80091d0:	898b      	ldrh	r3, [r1, #12]
 80091d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d4:	079d      	lsls	r5, r3, #30
 80091d6:	4606      	mov	r6, r0
 80091d8:	460c      	mov	r4, r1
 80091da:	d507      	bpl.n	80091ec <__smakebuf_r+0x1c>
 80091dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	2301      	movs	r3, #1
 80091e6:	6163      	str	r3, [r4, #20]
 80091e8:	b002      	add	sp, #8
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	ab01      	add	r3, sp, #4
 80091ee:	466a      	mov	r2, sp
 80091f0:	f7ff ffc9 	bl	8009186 <__swhatbuf_r>
 80091f4:	9900      	ldr	r1, [sp, #0]
 80091f6:	4605      	mov	r5, r0
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 fd95 	bl	8009d28 <_malloc_r>
 80091fe:	b948      	cbnz	r0, 8009214 <__smakebuf_r+0x44>
 8009200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009204:	059a      	lsls	r2, r3, #22
 8009206:	d4ef      	bmi.n	80091e8 <__smakebuf_r+0x18>
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	e7e3      	b.n	80091dc <__smakebuf_r+0xc>
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <__smakebuf_r+0x7c>)
 8009216:	62b3      	str	r3, [r6, #40]	; 0x28
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	6120      	str	r0, [r4, #16]
 800922a:	b15b      	cbz	r3, 8009244 <__smakebuf_r+0x74>
 800922c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009230:	4630      	mov	r0, r6
 8009232:	f001 f985 	bl	800a540 <_isatty_r>
 8009236:	b128      	cbz	r0, 8009244 <__smakebuf_r+0x74>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	89a0      	ldrh	r0, [r4, #12]
 8009246:	4305      	orrs	r5, r0
 8009248:	81a5      	strh	r5, [r4, #12]
 800924a:	e7cd      	b.n	80091e8 <__smakebuf_r+0x18>
 800924c:	080088f9 	.word	0x080088f9

08009250 <malloc>:
 8009250:	4b02      	ldr	r3, [pc, #8]	; (800925c <malloc+0xc>)
 8009252:	4601      	mov	r1, r0
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	f000 bd67 	b.w	8009d28 <_malloc_r>
 800925a:	bf00      	nop
 800925c:	20000014 	.word	0x20000014

08009260 <__ascii_mbtowc>:
 8009260:	b082      	sub	sp, #8
 8009262:	b901      	cbnz	r1, 8009266 <__ascii_mbtowc+0x6>
 8009264:	a901      	add	r1, sp, #4
 8009266:	b142      	cbz	r2, 800927a <__ascii_mbtowc+0x1a>
 8009268:	b14b      	cbz	r3, 800927e <__ascii_mbtowc+0x1e>
 800926a:	7813      	ldrb	r3, [r2, #0]
 800926c:	600b      	str	r3, [r1, #0]
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	1e10      	subs	r0, r2, #0
 8009272:	bf18      	it	ne
 8009274:	2001      	movne	r0, #1
 8009276:	b002      	add	sp, #8
 8009278:	4770      	bx	lr
 800927a:	4610      	mov	r0, r2
 800927c:	e7fb      	b.n	8009276 <__ascii_mbtowc+0x16>
 800927e:	f06f 0001 	mvn.w	r0, #1
 8009282:	e7f8      	b.n	8009276 <__ascii_mbtowc+0x16>

08009284 <memcpy>:
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	f100 33ff 	add.w	r3, r0, #4294967295
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929a:	4291      	cmp	r1, r2
 800929c:	d1f9      	bne.n	8009292 <memcpy+0xe>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <_Balloc>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092a4:	4604      	mov	r4, r0
 80092a6:	460d      	mov	r5, r1
 80092a8:	b976      	cbnz	r6, 80092c8 <_Balloc+0x28>
 80092aa:	2010      	movs	r0, #16
 80092ac:	f7ff ffd0 	bl	8009250 <malloc>
 80092b0:	4602      	mov	r2, r0
 80092b2:	6260      	str	r0, [r4, #36]	; 0x24
 80092b4:	b920      	cbnz	r0, 80092c0 <_Balloc+0x20>
 80092b6:	4b18      	ldr	r3, [pc, #96]	; (8009318 <_Balloc+0x78>)
 80092b8:	4818      	ldr	r0, [pc, #96]	; (800931c <_Balloc+0x7c>)
 80092ba:	2166      	movs	r1, #102	; 0x66
 80092bc:	f001 f8ee 	bl	800a49c <__assert_func>
 80092c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092c4:	6006      	str	r6, [r0, #0]
 80092c6:	60c6      	str	r6, [r0, #12]
 80092c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092ca:	68f3      	ldr	r3, [r6, #12]
 80092cc:	b183      	cbz	r3, 80092f0 <_Balloc+0x50>
 80092ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092d6:	b9b8      	cbnz	r0, 8009308 <_Balloc+0x68>
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f605 	lsl.w	r6, r1, r5
 80092de:	1d72      	adds	r2, r6, #5
 80092e0:	0092      	lsls	r2, r2, #2
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fc9d 	bl	8009c22 <_calloc_r>
 80092e8:	b160      	cbz	r0, 8009304 <_Balloc+0x64>
 80092ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092ee:	e00e      	b.n	800930e <_Balloc+0x6e>
 80092f0:	2221      	movs	r2, #33	; 0x21
 80092f2:	2104      	movs	r1, #4
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fc94 	bl	8009c22 <_calloc_r>
 80092fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092fc:	60f0      	str	r0, [r6, #12]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e4      	bne.n	80092ce <_Balloc+0x2e>
 8009304:	2000      	movs	r0, #0
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	6802      	ldr	r2, [r0, #0]
 800930a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800930e:	2300      	movs	r3, #0
 8009310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009314:	e7f7      	b.n	8009306 <_Balloc+0x66>
 8009316:	bf00      	nop
 8009318:	0800aaa6 	.word	0x0800aaa6
 800931c:	0800ac08 	.word	0x0800ac08

08009320 <_Bfree>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b976      	cbnz	r6, 8009348 <_Bfree+0x28>
 800932a:	2010      	movs	r0, #16
 800932c:	f7ff ff90 	bl	8009250 <malloc>
 8009330:	4602      	mov	r2, r0
 8009332:	6268      	str	r0, [r5, #36]	; 0x24
 8009334:	b920      	cbnz	r0, 8009340 <_Bfree+0x20>
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <_Bfree+0x3c>)
 8009338:	4809      	ldr	r0, [pc, #36]	; (8009360 <_Bfree+0x40>)
 800933a:	218a      	movs	r1, #138	; 0x8a
 800933c:	f001 f8ae 	bl	800a49c <__assert_func>
 8009340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009344:	6006      	str	r6, [r0, #0]
 8009346:	60c6      	str	r6, [r0, #12]
 8009348:	b13c      	cbz	r4, 800935a <_Bfree+0x3a>
 800934a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800934c:	6862      	ldr	r2, [r4, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009354:	6021      	str	r1, [r4, #0]
 8009356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	0800aaa6 	.word	0x0800aaa6
 8009360:	0800ac08 	.word	0x0800ac08

08009364 <__multadd>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	690d      	ldr	r5, [r1, #16]
 800936a:	4607      	mov	r7, r0
 800936c:	460c      	mov	r4, r1
 800936e:	461e      	mov	r6, r3
 8009370:	f101 0c14 	add.w	ip, r1, #20
 8009374:	2000      	movs	r0, #0
 8009376:	f8dc 3000 	ldr.w	r3, [ip]
 800937a:	b299      	uxth	r1, r3
 800937c:	fb02 6101 	mla	r1, r2, r1, r6
 8009380:	0c1e      	lsrs	r6, r3, #16
 8009382:	0c0b      	lsrs	r3, r1, #16
 8009384:	fb02 3306 	mla	r3, r2, r6, r3
 8009388:	b289      	uxth	r1, r1
 800938a:	3001      	adds	r0, #1
 800938c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009390:	4285      	cmp	r5, r0
 8009392:	f84c 1b04 	str.w	r1, [ip], #4
 8009396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800939a:	dcec      	bgt.n	8009376 <__multadd+0x12>
 800939c:	b30e      	cbz	r6, 80093e2 <__multadd+0x7e>
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	dc19      	bgt.n	80093d8 <__multadd+0x74>
 80093a4:	6861      	ldr	r1, [r4, #4]
 80093a6:	4638      	mov	r0, r7
 80093a8:	3101      	adds	r1, #1
 80093aa:	f7ff ff79 	bl	80092a0 <_Balloc>
 80093ae:	4680      	mov	r8, r0
 80093b0:	b928      	cbnz	r0, 80093be <__multadd+0x5a>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <__multadd+0x84>)
 80093b6:	480d      	ldr	r0, [pc, #52]	; (80093ec <__multadd+0x88>)
 80093b8:	21b5      	movs	r1, #181	; 0xb5
 80093ba:	f001 f86f 	bl	800a49c <__assert_func>
 80093be:	6922      	ldr	r2, [r4, #16]
 80093c0:	3202      	adds	r2, #2
 80093c2:	f104 010c 	add.w	r1, r4, #12
 80093c6:	0092      	lsls	r2, r2, #2
 80093c8:	300c      	adds	r0, #12
 80093ca:	f7ff ff5b 	bl	8009284 <memcpy>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff ffa5 	bl	8009320 <_Bfree>
 80093d6:	4644      	mov	r4, r8
 80093d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093dc:	3501      	adds	r5, #1
 80093de:	615e      	str	r6, [r3, #20]
 80093e0:	6125      	str	r5, [r4, #16]
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	0800ab18 	.word	0x0800ab18
 80093ec:	0800ac08 	.word	0x0800ac08

080093f0 <__s2b>:
 80093f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	460c      	mov	r4, r1
 80093f6:	4615      	mov	r5, r2
 80093f8:	461f      	mov	r7, r3
 80093fa:	2209      	movs	r2, #9
 80093fc:	3308      	adds	r3, #8
 80093fe:	4606      	mov	r6, r0
 8009400:	fb93 f3f2 	sdiv	r3, r3, r2
 8009404:	2100      	movs	r1, #0
 8009406:	2201      	movs	r2, #1
 8009408:	429a      	cmp	r2, r3
 800940a:	db09      	blt.n	8009420 <__s2b+0x30>
 800940c:	4630      	mov	r0, r6
 800940e:	f7ff ff47 	bl	80092a0 <_Balloc>
 8009412:	b940      	cbnz	r0, 8009426 <__s2b+0x36>
 8009414:	4602      	mov	r2, r0
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <__s2b+0x8c>)
 8009418:	4819      	ldr	r0, [pc, #100]	; (8009480 <__s2b+0x90>)
 800941a:	21ce      	movs	r1, #206	; 0xce
 800941c:	f001 f83e 	bl	800a49c <__assert_func>
 8009420:	0052      	lsls	r2, r2, #1
 8009422:	3101      	adds	r1, #1
 8009424:	e7f0      	b.n	8009408 <__s2b+0x18>
 8009426:	9b08      	ldr	r3, [sp, #32]
 8009428:	6143      	str	r3, [r0, #20]
 800942a:	2d09      	cmp	r5, #9
 800942c:	f04f 0301 	mov.w	r3, #1
 8009430:	6103      	str	r3, [r0, #16]
 8009432:	dd16      	ble.n	8009462 <__s2b+0x72>
 8009434:	f104 0909 	add.w	r9, r4, #9
 8009438:	46c8      	mov	r8, r9
 800943a:	442c      	add	r4, r5
 800943c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009440:	4601      	mov	r1, r0
 8009442:	3b30      	subs	r3, #48	; 0x30
 8009444:	220a      	movs	r2, #10
 8009446:	4630      	mov	r0, r6
 8009448:	f7ff ff8c 	bl	8009364 <__multadd>
 800944c:	45a0      	cmp	r8, r4
 800944e:	d1f5      	bne.n	800943c <__s2b+0x4c>
 8009450:	f1a5 0408 	sub.w	r4, r5, #8
 8009454:	444c      	add	r4, r9
 8009456:	1b2d      	subs	r5, r5, r4
 8009458:	1963      	adds	r3, r4, r5
 800945a:	42bb      	cmp	r3, r7
 800945c:	db04      	blt.n	8009468 <__s2b+0x78>
 800945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009462:	340a      	adds	r4, #10
 8009464:	2509      	movs	r5, #9
 8009466:	e7f6      	b.n	8009456 <__s2b+0x66>
 8009468:	f814 3b01 	ldrb.w	r3, [r4], #1
 800946c:	4601      	mov	r1, r0
 800946e:	3b30      	subs	r3, #48	; 0x30
 8009470:	220a      	movs	r2, #10
 8009472:	4630      	mov	r0, r6
 8009474:	f7ff ff76 	bl	8009364 <__multadd>
 8009478:	e7ee      	b.n	8009458 <__s2b+0x68>
 800947a:	bf00      	nop
 800947c:	0800ab18 	.word	0x0800ab18
 8009480:	0800ac08 	.word	0x0800ac08

08009484 <__hi0bits>:
 8009484:	0c03      	lsrs	r3, r0, #16
 8009486:	041b      	lsls	r3, r3, #16
 8009488:	b9d3      	cbnz	r3, 80094c0 <__hi0bits+0x3c>
 800948a:	0400      	lsls	r0, r0, #16
 800948c:	2310      	movs	r3, #16
 800948e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009492:	bf04      	itt	eq
 8009494:	0200      	lsleq	r0, r0, #8
 8009496:	3308      	addeq	r3, #8
 8009498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800949c:	bf04      	itt	eq
 800949e:	0100      	lsleq	r0, r0, #4
 80094a0:	3304      	addeq	r3, #4
 80094a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094a6:	bf04      	itt	eq
 80094a8:	0080      	lsleq	r0, r0, #2
 80094aa:	3302      	addeq	r3, #2
 80094ac:	2800      	cmp	r0, #0
 80094ae:	db05      	blt.n	80094bc <__hi0bits+0x38>
 80094b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094b4:	f103 0301 	add.w	r3, r3, #1
 80094b8:	bf08      	it	eq
 80094ba:	2320      	moveq	r3, #32
 80094bc:	4618      	mov	r0, r3
 80094be:	4770      	bx	lr
 80094c0:	2300      	movs	r3, #0
 80094c2:	e7e4      	b.n	800948e <__hi0bits+0xa>

080094c4 <__lo0bits>:
 80094c4:	6803      	ldr	r3, [r0, #0]
 80094c6:	f013 0207 	ands.w	r2, r3, #7
 80094ca:	4601      	mov	r1, r0
 80094cc:	d00b      	beq.n	80094e6 <__lo0bits+0x22>
 80094ce:	07da      	lsls	r2, r3, #31
 80094d0:	d423      	bmi.n	800951a <__lo0bits+0x56>
 80094d2:	0798      	lsls	r0, r3, #30
 80094d4:	bf49      	itett	mi
 80094d6:	085b      	lsrmi	r3, r3, #1
 80094d8:	089b      	lsrpl	r3, r3, #2
 80094da:	2001      	movmi	r0, #1
 80094dc:	600b      	strmi	r3, [r1, #0]
 80094de:	bf5c      	itt	pl
 80094e0:	600b      	strpl	r3, [r1, #0]
 80094e2:	2002      	movpl	r0, #2
 80094e4:	4770      	bx	lr
 80094e6:	b298      	uxth	r0, r3
 80094e8:	b9a8      	cbnz	r0, 8009516 <__lo0bits+0x52>
 80094ea:	0c1b      	lsrs	r3, r3, #16
 80094ec:	2010      	movs	r0, #16
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	b90a      	cbnz	r2, 80094f6 <__lo0bits+0x32>
 80094f2:	3008      	adds	r0, #8
 80094f4:	0a1b      	lsrs	r3, r3, #8
 80094f6:	071a      	lsls	r2, r3, #28
 80094f8:	bf04      	itt	eq
 80094fa:	091b      	lsreq	r3, r3, #4
 80094fc:	3004      	addeq	r0, #4
 80094fe:	079a      	lsls	r2, r3, #30
 8009500:	bf04      	itt	eq
 8009502:	089b      	lsreq	r3, r3, #2
 8009504:	3002      	addeq	r0, #2
 8009506:	07da      	lsls	r2, r3, #31
 8009508:	d403      	bmi.n	8009512 <__lo0bits+0x4e>
 800950a:	085b      	lsrs	r3, r3, #1
 800950c:	f100 0001 	add.w	r0, r0, #1
 8009510:	d005      	beq.n	800951e <__lo0bits+0x5a>
 8009512:	600b      	str	r3, [r1, #0]
 8009514:	4770      	bx	lr
 8009516:	4610      	mov	r0, r2
 8009518:	e7e9      	b.n	80094ee <__lo0bits+0x2a>
 800951a:	2000      	movs	r0, #0
 800951c:	4770      	bx	lr
 800951e:	2020      	movs	r0, #32
 8009520:	4770      	bx	lr
	...

08009524 <__i2b>:
 8009524:	b510      	push	{r4, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	2101      	movs	r1, #1
 800952a:	f7ff feb9 	bl	80092a0 <_Balloc>
 800952e:	4602      	mov	r2, r0
 8009530:	b928      	cbnz	r0, 800953e <__i2b+0x1a>
 8009532:	4b05      	ldr	r3, [pc, #20]	; (8009548 <__i2b+0x24>)
 8009534:	4805      	ldr	r0, [pc, #20]	; (800954c <__i2b+0x28>)
 8009536:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800953a:	f000 ffaf 	bl	800a49c <__assert_func>
 800953e:	2301      	movs	r3, #1
 8009540:	6144      	str	r4, [r0, #20]
 8009542:	6103      	str	r3, [r0, #16]
 8009544:	bd10      	pop	{r4, pc}
 8009546:	bf00      	nop
 8009548:	0800ab18 	.word	0x0800ab18
 800954c:	0800ac08 	.word	0x0800ac08

08009550 <__multiply>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	4691      	mov	r9, r2
 8009556:	690a      	ldr	r2, [r1, #16]
 8009558:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800955c:	429a      	cmp	r2, r3
 800955e:	bfb8      	it	lt
 8009560:	460b      	movlt	r3, r1
 8009562:	460c      	mov	r4, r1
 8009564:	bfbc      	itt	lt
 8009566:	464c      	movlt	r4, r9
 8009568:	4699      	movlt	r9, r3
 800956a:	6927      	ldr	r7, [r4, #16]
 800956c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	6861      	ldr	r1, [r4, #4]
 8009574:	eb07 060a 	add.w	r6, r7, sl
 8009578:	42b3      	cmp	r3, r6
 800957a:	b085      	sub	sp, #20
 800957c:	bfb8      	it	lt
 800957e:	3101      	addlt	r1, #1
 8009580:	f7ff fe8e 	bl	80092a0 <_Balloc>
 8009584:	b930      	cbnz	r0, 8009594 <__multiply+0x44>
 8009586:	4602      	mov	r2, r0
 8009588:	4b44      	ldr	r3, [pc, #272]	; (800969c <__multiply+0x14c>)
 800958a:	4845      	ldr	r0, [pc, #276]	; (80096a0 <__multiply+0x150>)
 800958c:	f240 115d 	movw	r1, #349	; 0x15d
 8009590:	f000 ff84 	bl	800a49c <__assert_func>
 8009594:	f100 0514 	add.w	r5, r0, #20
 8009598:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800959c:	462b      	mov	r3, r5
 800959e:	2200      	movs	r2, #0
 80095a0:	4543      	cmp	r3, r8
 80095a2:	d321      	bcc.n	80095e8 <__multiply+0x98>
 80095a4:	f104 0314 	add.w	r3, r4, #20
 80095a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095ac:	f109 0314 	add.w	r3, r9, #20
 80095b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095b4:	9202      	str	r2, [sp, #8]
 80095b6:	1b3a      	subs	r2, r7, r4
 80095b8:	3a15      	subs	r2, #21
 80095ba:	f022 0203 	bic.w	r2, r2, #3
 80095be:	3204      	adds	r2, #4
 80095c0:	f104 0115 	add.w	r1, r4, #21
 80095c4:	428f      	cmp	r7, r1
 80095c6:	bf38      	it	cc
 80095c8:	2204      	movcc	r2, #4
 80095ca:	9201      	str	r2, [sp, #4]
 80095cc:	9a02      	ldr	r2, [sp, #8]
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d80c      	bhi.n	80095ee <__multiply+0x9e>
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	dd03      	ble.n	80095e0 <__multiply+0x90>
 80095d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d05a      	beq.n	8009696 <__multiply+0x146>
 80095e0:	6106      	str	r6, [r0, #16]
 80095e2:	b005      	add	sp, #20
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	f843 2b04 	str.w	r2, [r3], #4
 80095ec:	e7d8      	b.n	80095a0 <__multiply+0x50>
 80095ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80095f2:	f1ba 0f00 	cmp.w	sl, #0
 80095f6:	d024      	beq.n	8009642 <__multiply+0xf2>
 80095f8:	f104 0e14 	add.w	lr, r4, #20
 80095fc:	46a9      	mov	r9, r5
 80095fe:	f04f 0c00 	mov.w	ip, #0
 8009602:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009606:	f8d9 1000 	ldr.w	r1, [r9]
 800960a:	fa1f fb82 	uxth.w	fp, r2
 800960e:	b289      	uxth	r1, r1
 8009610:	fb0a 110b 	mla	r1, sl, fp, r1
 8009614:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009618:	f8d9 2000 	ldr.w	r2, [r9]
 800961c:	4461      	add	r1, ip
 800961e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009622:	fb0a c20b 	mla	r2, sl, fp, ip
 8009626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800962a:	b289      	uxth	r1, r1
 800962c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009630:	4577      	cmp	r7, lr
 8009632:	f849 1b04 	str.w	r1, [r9], #4
 8009636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800963a:	d8e2      	bhi.n	8009602 <__multiply+0xb2>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	f845 c002 	str.w	ip, [r5, r2]
 8009642:	9a03      	ldr	r2, [sp, #12]
 8009644:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009648:	3304      	adds	r3, #4
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	d020      	beq.n	8009692 <__multiply+0x142>
 8009650:	6829      	ldr	r1, [r5, #0]
 8009652:	f104 0c14 	add.w	ip, r4, #20
 8009656:	46ae      	mov	lr, r5
 8009658:	f04f 0a00 	mov.w	sl, #0
 800965c:	f8bc b000 	ldrh.w	fp, [ip]
 8009660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009664:	fb09 220b 	mla	r2, r9, fp, r2
 8009668:	4492      	add	sl, r2
 800966a:	b289      	uxth	r1, r1
 800966c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009670:	f84e 1b04 	str.w	r1, [lr], #4
 8009674:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009678:	f8be 1000 	ldrh.w	r1, [lr]
 800967c:	0c12      	lsrs	r2, r2, #16
 800967e:	fb09 1102 	mla	r1, r9, r2, r1
 8009682:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009686:	4567      	cmp	r7, ip
 8009688:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800968c:	d8e6      	bhi.n	800965c <__multiply+0x10c>
 800968e:	9a01      	ldr	r2, [sp, #4]
 8009690:	50a9      	str	r1, [r5, r2]
 8009692:	3504      	adds	r5, #4
 8009694:	e79a      	b.n	80095cc <__multiply+0x7c>
 8009696:	3e01      	subs	r6, #1
 8009698:	e79c      	b.n	80095d4 <__multiply+0x84>
 800969a:	bf00      	nop
 800969c:	0800ab18 	.word	0x0800ab18
 80096a0:	0800ac08 	.word	0x0800ac08

080096a4 <__pow5mult>:
 80096a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a8:	4615      	mov	r5, r2
 80096aa:	f012 0203 	ands.w	r2, r2, #3
 80096ae:	4606      	mov	r6, r0
 80096b0:	460f      	mov	r7, r1
 80096b2:	d007      	beq.n	80096c4 <__pow5mult+0x20>
 80096b4:	4c25      	ldr	r4, [pc, #148]	; (800974c <__pow5mult+0xa8>)
 80096b6:	3a01      	subs	r2, #1
 80096b8:	2300      	movs	r3, #0
 80096ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096be:	f7ff fe51 	bl	8009364 <__multadd>
 80096c2:	4607      	mov	r7, r0
 80096c4:	10ad      	asrs	r5, r5, #2
 80096c6:	d03d      	beq.n	8009744 <__pow5mult+0xa0>
 80096c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096ca:	b97c      	cbnz	r4, 80096ec <__pow5mult+0x48>
 80096cc:	2010      	movs	r0, #16
 80096ce:	f7ff fdbf 	bl	8009250 <malloc>
 80096d2:	4602      	mov	r2, r0
 80096d4:	6270      	str	r0, [r6, #36]	; 0x24
 80096d6:	b928      	cbnz	r0, 80096e4 <__pow5mult+0x40>
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <__pow5mult+0xac>)
 80096da:	481e      	ldr	r0, [pc, #120]	; (8009754 <__pow5mult+0xb0>)
 80096dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096e0:	f000 fedc 	bl	800a49c <__assert_func>
 80096e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096e8:	6004      	str	r4, [r0, #0]
 80096ea:	60c4      	str	r4, [r0, #12]
 80096ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f4:	b94c      	cbnz	r4, 800970a <__pow5mult+0x66>
 80096f6:	f240 2171 	movw	r1, #625	; 0x271
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7ff ff12 	bl	8009524 <__i2b>
 8009700:	2300      	movs	r3, #0
 8009702:	f8c8 0008 	str.w	r0, [r8, #8]
 8009706:	4604      	mov	r4, r0
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	07eb      	lsls	r3, r5, #31
 8009710:	d50a      	bpl.n	8009728 <__pow5mult+0x84>
 8009712:	4639      	mov	r1, r7
 8009714:	4622      	mov	r2, r4
 8009716:	4630      	mov	r0, r6
 8009718:	f7ff ff1a 	bl	8009550 <__multiply>
 800971c:	4639      	mov	r1, r7
 800971e:	4680      	mov	r8, r0
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff fdfd 	bl	8009320 <_Bfree>
 8009726:	4647      	mov	r7, r8
 8009728:	106d      	asrs	r5, r5, #1
 800972a:	d00b      	beq.n	8009744 <__pow5mult+0xa0>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	b938      	cbnz	r0, 8009740 <__pow5mult+0x9c>
 8009730:	4622      	mov	r2, r4
 8009732:	4621      	mov	r1, r4
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ff0b 	bl	8009550 <__multiply>
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	f8c0 9000 	str.w	r9, [r0]
 8009740:	4604      	mov	r4, r0
 8009742:	e7e4      	b.n	800970e <__pow5mult+0x6a>
 8009744:	4638      	mov	r0, r7
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	bf00      	nop
 800974c:	0800ad58 	.word	0x0800ad58
 8009750:	0800aaa6 	.word	0x0800aaa6
 8009754:	0800ac08 	.word	0x0800ac08

08009758 <__lshift>:
 8009758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	6849      	ldr	r1, [r1, #4]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	4607      	mov	r7, r0
 800976a:	4691      	mov	r9, r2
 800976c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009770:	f108 0601 	add.w	r6, r8, #1
 8009774:	42b3      	cmp	r3, r6
 8009776:	db0b      	blt.n	8009790 <__lshift+0x38>
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff fd91 	bl	80092a0 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b948      	cbnz	r0, 8009796 <__lshift+0x3e>
 8009782:	4602      	mov	r2, r0
 8009784:	4b2a      	ldr	r3, [pc, #168]	; (8009830 <__lshift+0xd8>)
 8009786:	482b      	ldr	r0, [pc, #172]	; (8009834 <__lshift+0xdc>)
 8009788:	f240 11d9 	movw	r1, #473	; 0x1d9
 800978c:	f000 fe86 	bl	800a49c <__assert_func>
 8009790:	3101      	adds	r1, #1
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	e7ee      	b.n	8009774 <__lshift+0x1c>
 8009796:	2300      	movs	r3, #0
 8009798:	f100 0114 	add.w	r1, r0, #20
 800979c:	f100 0210 	add.w	r2, r0, #16
 80097a0:	4618      	mov	r0, r3
 80097a2:	4553      	cmp	r3, sl
 80097a4:	db37      	blt.n	8009816 <__lshift+0xbe>
 80097a6:	6920      	ldr	r0, [r4, #16]
 80097a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097ac:	f104 0314 	add.w	r3, r4, #20
 80097b0:	f019 091f 	ands.w	r9, r9, #31
 80097b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097bc:	d02f      	beq.n	800981e <__lshift+0xc6>
 80097be:	f1c9 0e20 	rsb	lr, r9, #32
 80097c2:	468a      	mov	sl, r1
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	fa02 f209 	lsl.w	r2, r2, r9
 80097ce:	ea42 020c 	orr.w	r2, r2, ip
 80097d2:	f84a 2b04 	str.w	r2, [sl], #4
 80097d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097da:	4298      	cmp	r0, r3
 80097dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097e0:	d8f2      	bhi.n	80097c8 <__lshift+0x70>
 80097e2:	1b03      	subs	r3, r0, r4
 80097e4:	3b15      	subs	r3, #21
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	3304      	adds	r3, #4
 80097ec:	f104 0215 	add.w	r2, r4, #21
 80097f0:	4290      	cmp	r0, r2
 80097f2:	bf38      	it	cc
 80097f4:	2304      	movcc	r3, #4
 80097f6:	f841 c003 	str.w	ip, [r1, r3]
 80097fa:	f1bc 0f00 	cmp.w	ip, #0
 80097fe:	d001      	beq.n	8009804 <__lshift+0xac>
 8009800:	f108 0602 	add.w	r6, r8, #2
 8009804:	3e01      	subs	r6, #1
 8009806:	4638      	mov	r0, r7
 8009808:	612e      	str	r6, [r5, #16]
 800980a:	4621      	mov	r1, r4
 800980c:	f7ff fd88 	bl	8009320 <_Bfree>
 8009810:	4628      	mov	r0, r5
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	f842 0f04 	str.w	r0, [r2, #4]!
 800981a:	3301      	adds	r3, #1
 800981c:	e7c1      	b.n	80097a2 <__lshift+0x4a>
 800981e:	3904      	subs	r1, #4
 8009820:	f853 2b04 	ldr.w	r2, [r3], #4
 8009824:	f841 2f04 	str.w	r2, [r1, #4]!
 8009828:	4298      	cmp	r0, r3
 800982a:	d8f9      	bhi.n	8009820 <__lshift+0xc8>
 800982c:	e7ea      	b.n	8009804 <__lshift+0xac>
 800982e:	bf00      	nop
 8009830:	0800ab18 	.word	0x0800ab18
 8009834:	0800ac08 	.word	0x0800ac08

08009838 <__mcmp>:
 8009838:	b530      	push	{r4, r5, lr}
 800983a:	6902      	ldr	r2, [r0, #16]
 800983c:	690c      	ldr	r4, [r1, #16]
 800983e:	1b12      	subs	r2, r2, r4
 8009840:	d10e      	bne.n	8009860 <__mcmp+0x28>
 8009842:	f100 0314 	add.w	r3, r0, #20
 8009846:	3114      	adds	r1, #20
 8009848:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800984c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009850:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009854:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009858:	42a5      	cmp	r5, r4
 800985a:	d003      	beq.n	8009864 <__mcmp+0x2c>
 800985c:	d305      	bcc.n	800986a <__mcmp+0x32>
 800985e:	2201      	movs	r2, #1
 8009860:	4610      	mov	r0, r2
 8009862:	bd30      	pop	{r4, r5, pc}
 8009864:	4283      	cmp	r3, r0
 8009866:	d3f3      	bcc.n	8009850 <__mcmp+0x18>
 8009868:	e7fa      	b.n	8009860 <__mcmp+0x28>
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	e7f7      	b.n	8009860 <__mcmp+0x28>

08009870 <__mdiff>:
 8009870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	460c      	mov	r4, r1
 8009876:	4606      	mov	r6, r0
 8009878:	4611      	mov	r1, r2
 800987a:	4620      	mov	r0, r4
 800987c:	4690      	mov	r8, r2
 800987e:	f7ff ffdb 	bl	8009838 <__mcmp>
 8009882:	1e05      	subs	r5, r0, #0
 8009884:	d110      	bne.n	80098a8 <__mdiff+0x38>
 8009886:	4629      	mov	r1, r5
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff fd09 	bl	80092a0 <_Balloc>
 800988e:	b930      	cbnz	r0, 800989e <__mdiff+0x2e>
 8009890:	4b3a      	ldr	r3, [pc, #232]	; (800997c <__mdiff+0x10c>)
 8009892:	4602      	mov	r2, r0
 8009894:	f240 2132 	movw	r1, #562	; 0x232
 8009898:	4839      	ldr	r0, [pc, #228]	; (8009980 <__mdiff+0x110>)
 800989a:	f000 fdff 	bl	800a49c <__assert_func>
 800989e:	2301      	movs	r3, #1
 80098a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a8:	bfa4      	itt	ge
 80098aa:	4643      	movge	r3, r8
 80098ac:	46a0      	movge	r8, r4
 80098ae:	4630      	mov	r0, r6
 80098b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098b4:	bfa6      	itte	ge
 80098b6:	461c      	movge	r4, r3
 80098b8:	2500      	movge	r5, #0
 80098ba:	2501      	movlt	r5, #1
 80098bc:	f7ff fcf0 	bl	80092a0 <_Balloc>
 80098c0:	b920      	cbnz	r0, 80098cc <__mdiff+0x5c>
 80098c2:	4b2e      	ldr	r3, [pc, #184]	; (800997c <__mdiff+0x10c>)
 80098c4:	4602      	mov	r2, r0
 80098c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098ca:	e7e5      	b.n	8009898 <__mdiff+0x28>
 80098cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098d0:	6926      	ldr	r6, [r4, #16]
 80098d2:	60c5      	str	r5, [r0, #12]
 80098d4:	f104 0914 	add.w	r9, r4, #20
 80098d8:	f108 0514 	add.w	r5, r8, #20
 80098dc:	f100 0e14 	add.w	lr, r0, #20
 80098e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098e8:	f108 0210 	add.w	r2, r8, #16
 80098ec:	46f2      	mov	sl, lr
 80098ee:	2100      	movs	r1, #0
 80098f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80098f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098f8:	fa1f f883 	uxth.w	r8, r3
 80098fc:	fa11 f18b 	uxtah	r1, r1, fp
 8009900:	0c1b      	lsrs	r3, r3, #16
 8009902:	eba1 0808 	sub.w	r8, r1, r8
 8009906:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800990a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800990e:	fa1f f888 	uxth.w	r8, r8
 8009912:	1419      	asrs	r1, r3, #16
 8009914:	454e      	cmp	r6, r9
 8009916:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800991a:	f84a 3b04 	str.w	r3, [sl], #4
 800991e:	d8e7      	bhi.n	80098f0 <__mdiff+0x80>
 8009920:	1b33      	subs	r3, r6, r4
 8009922:	3b15      	subs	r3, #21
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	3304      	adds	r3, #4
 800992a:	3415      	adds	r4, #21
 800992c:	42a6      	cmp	r6, r4
 800992e:	bf38      	it	cc
 8009930:	2304      	movcc	r3, #4
 8009932:	441d      	add	r5, r3
 8009934:	4473      	add	r3, lr
 8009936:	469e      	mov	lr, r3
 8009938:	462e      	mov	r6, r5
 800993a:	4566      	cmp	r6, ip
 800993c:	d30e      	bcc.n	800995c <__mdiff+0xec>
 800993e:	f10c 0203 	add.w	r2, ip, #3
 8009942:	1b52      	subs	r2, r2, r5
 8009944:	f022 0203 	bic.w	r2, r2, #3
 8009948:	3d03      	subs	r5, #3
 800994a:	45ac      	cmp	ip, r5
 800994c:	bf38      	it	cc
 800994e:	2200      	movcc	r2, #0
 8009950:	441a      	add	r2, r3
 8009952:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009956:	b17b      	cbz	r3, 8009978 <__mdiff+0x108>
 8009958:	6107      	str	r7, [r0, #16]
 800995a:	e7a3      	b.n	80098a4 <__mdiff+0x34>
 800995c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009960:	fa11 f288 	uxtah	r2, r1, r8
 8009964:	1414      	asrs	r4, r2, #16
 8009966:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800996a:	b292      	uxth	r2, r2
 800996c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009970:	f84e 2b04 	str.w	r2, [lr], #4
 8009974:	1421      	asrs	r1, r4, #16
 8009976:	e7e0      	b.n	800993a <__mdiff+0xca>
 8009978:	3f01      	subs	r7, #1
 800997a:	e7ea      	b.n	8009952 <__mdiff+0xe2>
 800997c:	0800ab18 	.word	0x0800ab18
 8009980:	0800ac08 	.word	0x0800ac08

08009984 <__ulp>:
 8009984:	b082      	sub	sp, #8
 8009986:	ed8d 0b00 	vstr	d0, [sp]
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	4912      	ldr	r1, [pc, #72]	; (80099d8 <__ulp+0x54>)
 800998e:	4019      	ands	r1, r3
 8009990:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009994:	2900      	cmp	r1, #0
 8009996:	dd05      	ble.n	80099a4 <__ulp+0x20>
 8009998:	2200      	movs	r2, #0
 800999a:	460b      	mov	r3, r1
 800999c:	ec43 2b10 	vmov	d0, r2, r3
 80099a0:	b002      	add	sp, #8
 80099a2:	4770      	bx	lr
 80099a4:	4249      	negs	r1, r1
 80099a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f04f 0300 	mov.w	r3, #0
 80099b6:	da04      	bge.n	80099c2 <__ulp+0x3e>
 80099b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099bc:	fa41 f300 	asr.w	r3, r1, r0
 80099c0:	e7ec      	b.n	800999c <__ulp+0x18>
 80099c2:	f1a0 0114 	sub.w	r1, r0, #20
 80099c6:	291e      	cmp	r1, #30
 80099c8:	bfda      	itte	le
 80099ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80099d2:	2101      	movgt	r1, #1
 80099d4:	460a      	mov	r2, r1
 80099d6:	e7e1      	b.n	800999c <__ulp+0x18>
 80099d8:	7ff00000 	.word	0x7ff00000

080099dc <__b2d>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	6905      	ldr	r5, [r0, #16]
 80099e0:	f100 0714 	add.w	r7, r0, #20
 80099e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099e8:	1f2e      	subs	r6, r5, #4
 80099ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7ff fd48 	bl	8009484 <__hi0bits>
 80099f4:	f1c0 0320 	rsb	r3, r0, #32
 80099f8:	280a      	cmp	r0, #10
 80099fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a78 <__b2d+0x9c>
 80099fe:	600b      	str	r3, [r1, #0]
 8009a00:	dc14      	bgt.n	8009a2c <__b2d+0x50>
 8009a02:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a06:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a0a:	42b7      	cmp	r7, r6
 8009a0c:	ea41 030c 	orr.w	r3, r1, ip
 8009a10:	bf34      	ite	cc
 8009a12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a16:	2100      	movcs	r1, #0
 8009a18:	3015      	adds	r0, #21
 8009a1a:	fa04 f000 	lsl.w	r0, r4, r0
 8009a1e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a22:	ea40 0201 	orr.w	r2, r0, r1
 8009a26:	ec43 2b10 	vmov	d0, r2, r3
 8009a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2c:	42b7      	cmp	r7, r6
 8009a2e:	bf3a      	itte	cc
 8009a30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a34:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a38:	2100      	movcs	r1, #0
 8009a3a:	380b      	subs	r0, #11
 8009a3c:	d017      	beq.n	8009a6e <__b2d+0x92>
 8009a3e:	f1c0 0c20 	rsb	ip, r0, #32
 8009a42:	fa04 f500 	lsl.w	r5, r4, r0
 8009a46:	42be      	cmp	r6, r7
 8009a48:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a4c:	ea45 0504 	orr.w	r5, r5, r4
 8009a50:	bf8c      	ite	hi
 8009a52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a56:	2400      	movls	r4, #0
 8009a58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a5c:	fa01 f000 	lsl.w	r0, r1, r0
 8009a60:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a68:	ea40 0204 	orr.w	r2, r0, r4
 8009a6c:	e7db      	b.n	8009a26 <__b2d+0x4a>
 8009a6e:	ea44 030c 	orr.w	r3, r4, ip
 8009a72:	460a      	mov	r2, r1
 8009a74:	e7d7      	b.n	8009a26 <__b2d+0x4a>
 8009a76:	bf00      	nop
 8009a78:	3ff00000 	.word	0x3ff00000

08009a7c <__d2b>:
 8009a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a80:	4689      	mov	r9, r1
 8009a82:	2101      	movs	r1, #1
 8009a84:	ec57 6b10 	vmov	r6, r7, d0
 8009a88:	4690      	mov	r8, r2
 8009a8a:	f7ff fc09 	bl	80092a0 <_Balloc>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	b930      	cbnz	r0, 8009aa0 <__d2b+0x24>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <__d2b+0xb0>)
 8009a96:	4826      	ldr	r0, [pc, #152]	; (8009b30 <__d2b+0xb4>)
 8009a98:	f240 310a 	movw	r1, #778	; 0x30a
 8009a9c:	f000 fcfe 	bl	800a49c <__assert_func>
 8009aa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009aa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aa8:	bb35      	cbnz	r5, 8009af8 <__d2b+0x7c>
 8009aaa:	2e00      	cmp	r6, #0
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	d028      	beq.n	8009b02 <__d2b+0x86>
 8009ab0:	4668      	mov	r0, sp
 8009ab2:	9600      	str	r6, [sp, #0]
 8009ab4:	f7ff fd06 	bl	80094c4 <__lo0bits>
 8009ab8:	9900      	ldr	r1, [sp, #0]
 8009aba:	b300      	cbz	r0, 8009afe <__d2b+0x82>
 8009abc:	9a01      	ldr	r2, [sp, #4]
 8009abe:	f1c0 0320 	rsb	r3, r0, #32
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	40c2      	lsrs	r2, r0
 8009aca:	6163      	str	r3, [r4, #20]
 8009acc:	9201      	str	r2, [sp, #4]
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	61a3      	str	r3, [r4, #24]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bf14      	ite	ne
 8009ad6:	2202      	movne	r2, #2
 8009ad8:	2201      	moveq	r2, #1
 8009ada:	6122      	str	r2, [r4, #16]
 8009adc:	b1d5      	cbz	r5, 8009b14 <__d2b+0x98>
 8009ade:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ae2:	4405      	add	r5, r0
 8009ae4:	f8c9 5000 	str.w	r5, [r9]
 8009ae8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009aec:	f8c8 0000 	str.w	r0, [r8]
 8009af0:	4620      	mov	r0, r4
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009afc:	e7d5      	b.n	8009aaa <__d2b+0x2e>
 8009afe:	6161      	str	r1, [r4, #20]
 8009b00:	e7e5      	b.n	8009ace <__d2b+0x52>
 8009b02:	a801      	add	r0, sp, #4
 8009b04:	f7ff fcde 	bl	80094c4 <__lo0bits>
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	6163      	str	r3, [r4, #20]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	6122      	str	r2, [r4, #16]
 8009b10:	3020      	adds	r0, #32
 8009b12:	e7e3      	b.n	8009adc <__d2b+0x60>
 8009b14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b1c:	f8c9 0000 	str.w	r0, [r9]
 8009b20:	6918      	ldr	r0, [r3, #16]
 8009b22:	f7ff fcaf 	bl	8009484 <__hi0bits>
 8009b26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b2a:	e7df      	b.n	8009aec <__d2b+0x70>
 8009b2c:	0800ab18 	.word	0x0800ab18
 8009b30:	0800ac08 	.word	0x0800ac08

08009b34 <__ratio>:
 8009b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4688      	mov	r8, r1
 8009b3a:	4669      	mov	r1, sp
 8009b3c:	4681      	mov	r9, r0
 8009b3e:	f7ff ff4d 	bl	80099dc <__b2d>
 8009b42:	a901      	add	r1, sp, #4
 8009b44:	4640      	mov	r0, r8
 8009b46:	ec55 4b10 	vmov	r4, r5, d0
 8009b4a:	f7ff ff47 	bl	80099dc <__b2d>
 8009b4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b56:	eba3 0c02 	sub.w	ip, r3, r2
 8009b5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b64:	ec51 0b10 	vmov	r0, r1, d0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfd6      	itet	le
 8009b6c:	460a      	movle	r2, r1
 8009b6e:	462a      	movgt	r2, r5
 8009b70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b74:	468b      	mov	fp, r1
 8009b76:	462f      	mov	r7, r5
 8009b78:	bfd4      	ite	le
 8009b7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b82:	4620      	mov	r0, r4
 8009b84:	ee10 2a10 	vmov	r2, s0
 8009b88:	465b      	mov	r3, fp
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 fe36 	bl	80007fc <__aeabi_ddiv>
 8009b90:	ec41 0b10 	vmov	d0, r0, r1
 8009b94:	b003      	add	sp, #12
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b9a <__copybits>:
 8009b9a:	3901      	subs	r1, #1
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	1149      	asrs	r1, r1, #5
 8009ba0:	6914      	ldr	r4, [r2, #16]
 8009ba2:	3101      	adds	r1, #1
 8009ba4:	f102 0314 	add.w	r3, r2, #20
 8009ba8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bb0:	1f05      	subs	r5, r0, #4
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	d30c      	bcc.n	8009bd0 <__copybits+0x36>
 8009bb6:	1aa3      	subs	r3, r4, r2
 8009bb8:	3b11      	subs	r3, #17
 8009bba:	f023 0303 	bic.w	r3, r3, #3
 8009bbe:	3211      	adds	r2, #17
 8009bc0:	42a2      	cmp	r2, r4
 8009bc2:	bf88      	it	hi
 8009bc4:	2300      	movhi	r3, #0
 8009bc6:	4418      	add	r0, r3
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	d305      	bcc.n	8009bda <__copybits+0x40>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bd4:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bd8:	e7eb      	b.n	8009bb2 <__copybits+0x18>
 8009bda:	f840 3b04 	str.w	r3, [r0], #4
 8009bde:	e7f4      	b.n	8009bca <__copybits+0x30>

08009be0 <__any_on>:
 8009be0:	f100 0214 	add.w	r2, r0, #20
 8009be4:	6900      	ldr	r0, [r0, #16]
 8009be6:	114b      	asrs	r3, r1, #5
 8009be8:	4298      	cmp	r0, r3
 8009bea:	b510      	push	{r4, lr}
 8009bec:	db11      	blt.n	8009c12 <__any_on+0x32>
 8009bee:	dd0a      	ble.n	8009c06 <__any_on+0x26>
 8009bf0:	f011 011f 	ands.w	r1, r1, #31
 8009bf4:	d007      	beq.n	8009c06 <__any_on+0x26>
 8009bf6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bfa:	fa24 f001 	lsr.w	r0, r4, r1
 8009bfe:	fa00 f101 	lsl.w	r1, r0, r1
 8009c02:	428c      	cmp	r4, r1
 8009c04:	d10b      	bne.n	8009c1e <__any_on+0x3e>
 8009c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d803      	bhi.n	8009c16 <__any_on+0x36>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	4603      	mov	r3, r0
 8009c14:	e7f7      	b.n	8009c06 <__any_on+0x26>
 8009c16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d0f5      	beq.n	8009c0a <__any_on+0x2a>
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7f6      	b.n	8009c10 <__any_on+0x30>

08009c22 <_calloc_r>:
 8009c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c24:	fba1 2402 	umull	r2, r4, r1, r2
 8009c28:	b94c      	cbnz	r4, 8009c3e <_calloc_r+0x1c>
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	9201      	str	r2, [sp, #4]
 8009c2e:	f000 f87b 	bl	8009d28 <_malloc_r>
 8009c32:	9a01      	ldr	r2, [sp, #4]
 8009c34:	4605      	mov	r5, r0
 8009c36:	b930      	cbnz	r0, 8009c46 <_calloc_r+0x24>
 8009c38:	4628      	mov	r0, r5
 8009c3a:	b003      	add	sp, #12
 8009c3c:	bd30      	pop	{r4, r5, pc}
 8009c3e:	220c      	movs	r2, #12
 8009c40:	6002      	str	r2, [r0, #0]
 8009c42:	2500      	movs	r5, #0
 8009c44:	e7f8      	b.n	8009c38 <_calloc_r+0x16>
 8009c46:	4621      	mov	r1, r4
 8009c48:	f7fc f852 	bl	8005cf0 <memset>
 8009c4c:	e7f4      	b.n	8009c38 <_calloc_r+0x16>
	...

08009c50 <_free_r>:
 8009c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c52:	2900      	cmp	r1, #0
 8009c54:	d044      	beq.n	8009ce0 <_free_r+0x90>
 8009c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5a:	9001      	str	r0, [sp, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c62:	bfb8      	it	lt
 8009c64:	18e4      	addlt	r4, r4, r3
 8009c66:	f000 fca7 	bl	800a5b8 <__malloc_lock>
 8009c6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ce4 <_free_r+0x94>)
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	b933      	cbnz	r3, 8009c80 <_free_r+0x30>
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	6014      	str	r4, [r2, #0]
 8009c76:	b003      	add	sp, #12
 8009c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c7c:	f000 bca2 	b.w	800a5c4 <__malloc_unlock>
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d908      	bls.n	8009c96 <_free_r+0x46>
 8009c84:	6825      	ldr	r5, [r4, #0]
 8009c86:	1961      	adds	r1, r4, r5
 8009c88:	428b      	cmp	r3, r1
 8009c8a:	bf01      	itttt	eq
 8009c8c:	6819      	ldreq	r1, [r3, #0]
 8009c8e:	685b      	ldreq	r3, [r3, #4]
 8009c90:	1949      	addeq	r1, r1, r5
 8009c92:	6021      	streq	r1, [r4, #0]
 8009c94:	e7ed      	b.n	8009c72 <_free_r+0x22>
 8009c96:	461a      	mov	r2, r3
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	b10b      	cbz	r3, 8009ca0 <_free_r+0x50>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d9fa      	bls.n	8009c96 <_free_r+0x46>
 8009ca0:	6811      	ldr	r1, [r2, #0]
 8009ca2:	1855      	adds	r5, r2, r1
 8009ca4:	42a5      	cmp	r5, r4
 8009ca6:	d10b      	bne.n	8009cc0 <_free_r+0x70>
 8009ca8:	6824      	ldr	r4, [r4, #0]
 8009caa:	4421      	add	r1, r4
 8009cac:	1854      	adds	r4, r2, r1
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	6011      	str	r1, [r2, #0]
 8009cb2:	d1e0      	bne.n	8009c76 <_free_r+0x26>
 8009cb4:	681c      	ldr	r4, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	6053      	str	r3, [r2, #4]
 8009cba:	4421      	add	r1, r4
 8009cbc:	6011      	str	r1, [r2, #0]
 8009cbe:	e7da      	b.n	8009c76 <_free_r+0x26>
 8009cc0:	d902      	bls.n	8009cc8 <_free_r+0x78>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	e7d6      	b.n	8009c76 <_free_r+0x26>
 8009cc8:	6825      	ldr	r5, [r4, #0]
 8009cca:	1961      	adds	r1, r4, r5
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	bf04      	itt	eq
 8009cd0:	6819      	ldreq	r1, [r3, #0]
 8009cd2:	685b      	ldreq	r3, [r3, #4]
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	bf04      	itt	eq
 8009cd8:	1949      	addeq	r1, r1, r5
 8009cda:	6021      	streq	r1, [r4, #0]
 8009cdc:	6054      	str	r4, [r2, #4]
 8009cde:	e7ca      	b.n	8009c76 <_free_r+0x26>
 8009ce0:	b003      	add	sp, #12
 8009ce2:	bd30      	pop	{r4, r5, pc}
 8009ce4:	200002f8 	.word	0x200002f8

08009ce8 <sbrk_aligned>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4e0e      	ldr	r6, [pc, #56]	; (8009d24 <sbrk_aligned+0x3c>)
 8009cec:	460c      	mov	r4, r1
 8009cee:	6831      	ldr	r1, [r6, #0]
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	b911      	cbnz	r1, 8009cfa <sbrk_aligned+0x12>
 8009cf4:	f000 fb4c 	bl	800a390 <_sbrk_r>
 8009cf8:	6030      	str	r0, [r6, #0]
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 fb47 	bl	800a390 <_sbrk_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d00a      	beq.n	8009d1c <sbrk_aligned+0x34>
 8009d06:	1cc4      	adds	r4, r0, #3
 8009d08:	f024 0403 	bic.w	r4, r4, #3
 8009d0c:	42a0      	cmp	r0, r4
 8009d0e:	d007      	beq.n	8009d20 <sbrk_aligned+0x38>
 8009d10:	1a21      	subs	r1, r4, r0
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 fb3c 	bl	800a390 <_sbrk_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d101      	bne.n	8009d20 <sbrk_aligned+0x38>
 8009d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d20:	4620      	mov	r0, r4
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	200002fc 	.word	0x200002fc

08009d28 <_malloc_r>:
 8009d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2c:	1ccd      	adds	r5, r1, #3
 8009d2e:	f025 0503 	bic.w	r5, r5, #3
 8009d32:	3508      	adds	r5, #8
 8009d34:	2d0c      	cmp	r5, #12
 8009d36:	bf38      	it	cc
 8009d38:	250c      	movcc	r5, #12
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	db01      	blt.n	8009d44 <_malloc_r+0x1c>
 8009d40:	42a9      	cmp	r1, r5
 8009d42:	d905      	bls.n	8009d50 <_malloc_r+0x28>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	2600      	movs	r6, #0
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	4e2e      	ldr	r6, [pc, #184]	; (8009e0c <_malloc_r+0xe4>)
 8009d52:	f000 fc31 	bl	800a5b8 <__malloc_lock>
 8009d56:	6833      	ldr	r3, [r6, #0]
 8009d58:	461c      	mov	r4, r3
 8009d5a:	bb34      	cbnz	r4, 8009daa <_malloc_r+0x82>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f7ff ffc2 	bl	8009ce8 <sbrk_aligned>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	4604      	mov	r4, r0
 8009d68:	d14d      	bne.n	8009e06 <_malloc_r+0xde>
 8009d6a:	6834      	ldr	r4, [r6, #0]
 8009d6c:	4626      	mov	r6, r4
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	d140      	bne.n	8009df4 <_malloc_r+0xcc>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	4631      	mov	r1, r6
 8009d76:	4638      	mov	r0, r7
 8009d78:	eb04 0803 	add.w	r8, r4, r3
 8009d7c:	f000 fb08 	bl	800a390 <_sbrk_r>
 8009d80:	4580      	cmp	r8, r0
 8009d82:	d13a      	bne.n	8009dfa <_malloc_r+0xd2>
 8009d84:	6821      	ldr	r1, [r4, #0]
 8009d86:	3503      	adds	r5, #3
 8009d88:	1a6d      	subs	r5, r5, r1
 8009d8a:	f025 0503 	bic.w	r5, r5, #3
 8009d8e:	3508      	adds	r5, #8
 8009d90:	2d0c      	cmp	r5, #12
 8009d92:	bf38      	it	cc
 8009d94:	250c      	movcc	r5, #12
 8009d96:	4629      	mov	r1, r5
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7ff ffa5 	bl	8009ce8 <sbrk_aligned>
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d02b      	beq.n	8009dfa <_malloc_r+0xd2>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	442b      	add	r3, r5
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	e00e      	b.n	8009dc8 <_malloc_r+0xa0>
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	d41e      	bmi.n	8009dee <_malloc_r+0xc6>
 8009db0:	2a0b      	cmp	r2, #11
 8009db2:	d916      	bls.n	8009de2 <_malloc_r+0xba>
 8009db4:	1961      	adds	r1, r4, r5
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	6025      	str	r5, [r4, #0]
 8009dba:	bf18      	it	ne
 8009dbc:	6059      	strne	r1, [r3, #4]
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	bf08      	it	eq
 8009dc2:	6031      	streq	r1, [r6, #0]
 8009dc4:	5162      	str	r2, [r4, r5]
 8009dc6:	604b      	str	r3, [r1, #4]
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f104 060b 	add.w	r6, r4, #11
 8009dce:	f000 fbf9 	bl	800a5c4 <__malloc_unlock>
 8009dd2:	f026 0607 	bic.w	r6, r6, #7
 8009dd6:	1d23      	adds	r3, r4, #4
 8009dd8:	1af2      	subs	r2, r6, r3
 8009dda:	d0b6      	beq.n	8009d4a <_malloc_r+0x22>
 8009ddc:	1b9b      	subs	r3, r3, r6
 8009dde:	50a3      	str	r3, [r4, r2]
 8009de0:	e7b3      	b.n	8009d4a <_malloc_r+0x22>
 8009de2:	6862      	ldr	r2, [r4, #4]
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	bf0c      	ite	eq
 8009de8:	6032      	streq	r2, [r6, #0]
 8009dea:	605a      	strne	r2, [r3, #4]
 8009dec:	e7ec      	b.n	8009dc8 <_malloc_r+0xa0>
 8009dee:	4623      	mov	r3, r4
 8009df0:	6864      	ldr	r4, [r4, #4]
 8009df2:	e7b2      	b.n	8009d5a <_malloc_r+0x32>
 8009df4:	4634      	mov	r4, r6
 8009df6:	6876      	ldr	r6, [r6, #4]
 8009df8:	e7b9      	b.n	8009d6e <_malloc_r+0x46>
 8009dfa:	230c      	movs	r3, #12
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f000 fbe0 	bl	800a5c4 <__malloc_unlock>
 8009e04:	e7a1      	b.n	8009d4a <_malloc_r+0x22>
 8009e06:	6025      	str	r5, [r4, #0]
 8009e08:	e7de      	b.n	8009dc8 <_malloc_r+0xa0>
 8009e0a:	bf00      	nop
 8009e0c:	200002f8 	.word	0x200002f8

08009e10 <__ssputs_r>:
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	688e      	ldr	r6, [r1, #8]
 8009e16:	429e      	cmp	r6, r3
 8009e18:	4682      	mov	sl, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	461f      	mov	r7, r3
 8009e20:	d838      	bhi.n	8009e94 <__ssputs_r+0x84>
 8009e22:	898a      	ldrh	r2, [r1, #12]
 8009e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e28:	d032      	beq.n	8009e90 <__ssputs_r+0x80>
 8009e2a:	6825      	ldr	r5, [r4, #0]
 8009e2c:	6909      	ldr	r1, [r1, #16]
 8009e2e:	eba5 0901 	sub.w	r9, r5, r1
 8009e32:	6965      	ldr	r5, [r4, #20]
 8009e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	444b      	add	r3, r9
 8009e40:	106d      	asrs	r5, r5, #1
 8009e42:	429d      	cmp	r5, r3
 8009e44:	bf38      	it	cc
 8009e46:	461d      	movcc	r5, r3
 8009e48:	0553      	lsls	r3, r2, #21
 8009e4a:	d531      	bpl.n	8009eb0 <__ssputs_r+0xa0>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7ff ff6b 	bl	8009d28 <_malloc_r>
 8009e52:	4606      	mov	r6, r0
 8009e54:	b950      	cbnz	r0, 8009e6c <__ssputs_r+0x5c>
 8009e56:	230c      	movs	r3, #12
 8009e58:	f8ca 3000 	str.w	r3, [sl]
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6c:	6921      	ldr	r1, [r4, #16]
 8009e6e:	464a      	mov	r2, r9
 8009e70:	f7ff fa08 	bl	8009284 <memcpy>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	6126      	str	r6, [r4, #16]
 8009e82:	6165      	str	r5, [r4, #20]
 8009e84:	444e      	add	r6, r9
 8009e86:	eba5 0509 	sub.w	r5, r5, r9
 8009e8a:	6026      	str	r6, [r4, #0]
 8009e8c:	60a5      	str	r5, [r4, #8]
 8009e8e:	463e      	mov	r6, r7
 8009e90:	42be      	cmp	r6, r7
 8009e92:	d900      	bls.n	8009e96 <__ssputs_r+0x86>
 8009e94:	463e      	mov	r6, r7
 8009e96:	6820      	ldr	r0, [r4, #0]
 8009e98:	4632      	mov	r2, r6
 8009e9a:	4641      	mov	r1, r8
 8009e9c:	f000 fb72 	bl	800a584 <memmove>
 8009ea0:	68a3      	ldr	r3, [r4, #8]
 8009ea2:	1b9b      	subs	r3, r3, r6
 8009ea4:	60a3      	str	r3, [r4, #8]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	4433      	add	r3, r6
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e7db      	b.n	8009e68 <__ssputs_r+0x58>
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	f000 fb8d 	bl	800a5d0 <_realloc_r>
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1e1      	bne.n	8009e80 <__ssputs_r+0x70>
 8009ebc:	6921      	ldr	r1, [r4, #16]
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	f7ff fec6 	bl	8009c50 <_free_r>
 8009ec4:	e7c7      	b.n	8009e56 <__ssputs_r+0x46>
	...

08009ec8 <_svfiprintf_r>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4698      	mov	r8, r3
 8009ece:	898b      	ldrh	r3, [r1, #12]
 8009ed0:	061b      	lsls	r3, r3, #24
 8009ed2:	b09d      	sub	sp, #116	; 0x74
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	d50e      	bpl.n	8009efa <_svfiprintf_r+0x32>
 8009edc:	690b      	ldr	r3, [r1, #16]
 8009ede:	b963      	cbnz	r3, 8009efa <_svfiprintf_r+0x32>
 8009ee0:	2140      	movs	r1, #64	; 0x40
 8009ee2:	f7ff ff21 	bl	8009d28 <_malloc_r>
 8009ee6:	6028      	str	r0, [r5, #0]
 8009ee8:	6128      	str	r0, [r5, #16]
 8009eea:	b920      	cbnz	r0, 8009ef6 <_svfiprintf_r+0x2e>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	e0d1      	b.n	800a09a <_svfiprintf_r+0x1d2>
 8009ef6:	2340      	movs	r3, #64	; 0x40
 8009ef8:	616b      	str	r3, [r5, #20]
 8009efa:	2300      	movs	r3, #0
 8009efc:	9309      	str	r3, [sp, #36]	; 0x24
 8009efe:	2320      	movs	r3, #32
 8009f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f08:	2330      	movs	r3, #48	; 0x30
 8009f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0b4 <_svfiprintf_r+0x1ec>
 8009f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f12:	f04f 0901 	mov.w	r9, #1
 8009f16:	4623      	mov	r3, r4
 8009f18:	469a      	mov	sl, r3
 8009f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1e:	b10a      	cbz	r2, 8009f24 <_svfiprintf_r+0x5c>
 8009f20:	2a25      	cmp	r2, #37	; 0x25
 8009f22:	d1f9      	bne.n	8009f18 <_svfiprintf_r+0x50>
 8009f24:	ebba 0b04 	subs.w	fp, sl, r4
 8009f28:	d00b      	beq.n	8009f42 <_svfiprintf_r+0x7a>
 8009f2a:	465b      	mov	r3, fp
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff ff6d 	bl	8009e10 <__ssputs_r>
 8009f36:	3001      	adds	r0, #1
 8009f38:	f000 80aa 	beq.w	800a090 <_svfiprintf_r+0x1c8>
 8009f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3e:	445a      	add	r2, fp
 8009f40:	9209      	str	r2, [sp, #36]	; 0x24
 8009f42:	f89a 3000 	ldrb.w	r3, [sl]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 80a2 	beq.w	800a090 <_svfiprintf_r+0x1c8>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f56:	f10a 0a01 	add.w	sl, sl, #1
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f62:	931a      	str	r3, [sp, #104]	; 0x68
 8009f64:	4654      	mov	r4, sl
 8009f66:	2205      	movs	r2, #5
 8009f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6c:	4851      	ldr	r0, [pc, #324]	; (800a0b4 <_svfiprintf_r+0x1ec>)
 8009f6e:	f7f6 f90f 	bl	8000190 <memchr>
 8009f72:	9a04      	ldr	r2, [sp, #16]
 8009f74:	b9d8      	cbnz	r0, 8009fae <_svfiprintf_r+0xe6>
 8009f76:	06d0      	lsls	r0, r2, #27
 8009f78:	bf44      	itt	mi
 8009f7a:	2320      	movmi	r3, #32
 8009f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f80:	0711      	lsls	r1, r2, #28
 8009f82:	bf44      	itt	mi
 8009f84:	232b      	movmi	r3, #43	; 0x2b
 8009f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f90:	d015      	beq.n	8009fbe <_svfiprintf_r+0xf6>
 8009f92:	9a07      	ldr	r2, [sp, #28]
 8009f94:	4654      	mov	r4, sl
 8009f96:	2000      	movs	r0, #0
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa2:	3b30      	subs	r3, #48	; 0x30
 8009fa4:	2b09      	cmp	r3, #9
 8009fa6:	d94e      	bls.n	800a046 <_svfiprintf_r+0x17e>
 8009fa8:	b1b0      	cbz	r0, 8009fd8 <_svfiprintf_r+0x110>
 8009faa:	9207      	str	r2, [sp, #28]
 8009fac:	e014      	b.n	8009fd8 <_svfiprintf_r+0x110>
 8009fae:	eba0 0308 	sub.w	r3, r0, r8
 8009fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	46a2      	mov	sl, r4
 8009fbc:	e7d2      	b.n	8009f64 <_svfiprintf_r+0x9c>
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	1d19      	adds	r1, r3, #4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	9103      	str	r1, [sp, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bfbb      	ittet	lt
 8009fca:	425b      	neglt	r3, r3
 8009fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd0:	9307      	strge	r3, [sp, #28]
 8009fd2:	9307      	strlt	r3, [sp, #28]
 8009fd4:	bfb8      	it	lt
 8009fd6:	9204      	strlt	r2, [sp, #16]
 8009fd8:	7823      	ldrb	r3, [r4, #0]
 8009fda:	2b2e      	cmp	r3, #46	; 0x2e
 8009fdc:	d10c      	bne.n	8009ff8 <_svfiprintf_r+0x130>
 8009fde:	7863      	ldrb	r3, [r4, #1]
 8009fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe2:	d135      	bne.n	800a050 <_svfiprintf_r+0x188>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	1d1a      	adds	r2, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	9203      	str	r2, [sp, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	bfb8      	it	lt
 8009ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ff4:	3402      	adds	r4, #2
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0c4 <_svfiprintf_r+0x1fc>
 8009ffc:	7821      	ldrb	r1, [r4, #0]
 8009ffe:	2203      	movs	r2, #3
 800a000:	4650      	mov	r0, sl
 800a002:	f7f6 f8c5 	bl	8000190 <memchr>
 800a006:	b140      	cbz	r0, 800a01a <_svfiprintf_r+0x152>
 800a008:	2340      	movs	r3, #64	; 0x40
 800a00a:	eba0 000a 	sub.w	r0, r0, sl
 800a00e:	fa03 f000 	lsl.w	r0, r3, r0
 800a012:	9b04      	ldr	r3, [sp, #16]
 800a014:	4303      	orrs	r3, r0
 800a016:	3401      	adds	r4, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4826      	ldr	r0, [pc, #152]	; (800a0b8 <_svfiprintf_r+0x1f0>)
 800a020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a024:	2206      	movs	r2, #6
 800a026:	f7f6 f8b3 	bl	8000190 <memchr>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d038      	beq.n	800a0a0 <_svfiprintf_r+0x1d8>
 800a02e:	4b23      	ldr	r3, [pc, #140]	; (800a0bc <_svfiprintf_r+0x1f4>)
 800a030:	bb1b      	cbnz	r3, 800a07a <_svfiprintf_r+0x1b2>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	3307      	adds	r3, #7
 800a036:	f023 0307 	bic.w	r3, r3, #7
 800a03a:	3308      	adds	r3, #8
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a040:	4433      	add	r3, r6
 800a042:	9309      	str	r3, [sp, #36]	; 0x24
 800a044:	e767      	b.n	8009f16 <_svfiprintf_r+0x4e>
 800a046:	fb0c 3202 	mla	r2, ip, r2, r3
 800a04a:	460c      	mov	r4, r1
 800a04c:	2001      	movs	r0, #1
 800a04e:	e7a5      	b.n	8009f9c <_svfiprintf_r+0xd4>
 800a050:	2300      	movs	r3, #0
 800a052:	3401      	adds	r4, #1
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	4619      	mov	r1, r3
 800a058:	f04f 0c0a 	mov.w	ip, #10
 800a05c:	4620      	mov	r0, r4
 800a05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a062:	3a30      	subs	r2, #48	; 0x30
 800a064:	2a09      	cmp	r2, #9
 800a066:	d903      	bls.n	800a070 <_svfiprintf_r+0x1a8>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0c5      	beq.n	8009ff8 <_svfiprintf_r+0x130>
 800a06c:	9105      	str	r1, [sp, #20]
 800a06e:	e7c3      	b.n	8009ff8 <_svfiprintf_r+0x130>
 800a070:	fb0c 2101 	mla	r1, ip, r1, r2
 800a074:	4604      	mov	r4, r0
 800a076:	2301      	movs	r3, #1
 800a078:	e7f0      	b.n	800a05c <_svfiprintf_r+0x194>
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	462a      	mov	r2, r5
 800a080:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <_svfiprintf_r+0x1f8>)
 800a082:	a904      	add	r1, sp, #16
 800a084:	4638      	mov	r0, r7
 800a086:	f7fb fedb 	bl	8005e40 <_printf_float>
 800a08a:	1c42      	adds	r2, r0, #1
 800a08c:	4606      	mov	r6, r0
 800a08e:	d1d6      	bne.n	800a03e <_svfiprintf_r+0x176>
 800a090:	89ab      	ldrh	r3, [r5, #12]
 800a092:	065b      	lsls	r3, r3, #25
 800a094:	f53f af2c 	bmi.w	8009ef0 <_svfiprintf_r+0x28>
 800a098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a09a:	b01d      	add	sp, #116	; 0x74
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a0:	ab03      	add	r3, sp, #12
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <_svfiprintf_r+0x1f8>)
 800a0a8:	a904      	add	r1, sp, #16
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	f7fc f96c 	bl	8006388 <_printf_i>
 800a0b0:	e7eb      	b.n	800a08a <_svfiprintf_r+0x1c2>
 800a0b2:	bf00      	nop
 800a0b4:	0800ad64 	.word	0x0800ad64
 800a0b8:	0800ad6e 	.word	0x0800ad6e
 800a0bc:	08005e41 	.word	0x08005e41
 800a0c0:	08009e11 	.word	0x08009e11
 800a0c4:	0800ad6a 	.word	0x0800ad6a

0800a0c8 <__sfputc_r>:
 800a0c8:	6893      	ldr	r3, [r2, #8]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	b410      	push	{r4}
 800a0d0:	6093      	str	r3, [r2, #8]
 800a0d2:	da08      	bge.n	800a0e6 <__sfputc_r+0x1e>
 800a0d4:	6994      	ldr	r4, [r2, #24]
 800a0d6:	42a3      	cmp	r3, r4
 800a0d8:	db01      	blt.n	800a0de <__sfputc_r+0x16>
 800a0da:	290a      	cmp	r1, #10
 800a0dc:	d103      	bne.n	800a0e6 <__sfputc_r+0x1e>
 800a0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0e2:	f7fd bbe9 	b.w	80078b8 <__swbuf_r>
 800a0e6:	6813      	ldr	r3, [r2, #0]
 800a0e8:	1c58      	adds	r0, r3, #1
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	7019      	strb	r1, [r3, #0]
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <__sfputs_r>:
 800a0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	460f      	mov	r7, r1
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	18d5      	adds	r5, r2, r3
 800a100:	42ac      	cmp	r4, r5
 800a102:	d101      	bne.n	800a108 <__sfputs_r+0x12>
 800a104:	2000      	movs	r0, #0
 800a106:	e007      	b.n	800a118 <__sfputs_r+0x22>
 800a108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10c:	463a      	mov	r2, r7
 800a10e:	4630      	mov	r0, r6
 800a110:	f7ff ffda 	bl	800a0c8 <__sfputc_r>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d1f3      	bne.n	800a100 <__sfputs_r+0xa>
 800a118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a11c <_vfiprintf_r>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	460d      	mov	r5, r1
 800a122:	b09d      	sub	sp, #116	; 0x74
 800a124:	4614      	mov	r4, r2
 800a126:	4698      	mov	r8, r3
 800a128:	4606      	mov	r6, r0
 800a12a:	b118      	cbz	r0, 800a134 <_vfiprintf_r+0x18>
 800a12c:	6983      	ldr	r3, [r0, #24]
 800a12e:	b90b      	cbnz	r3, 800a134 <_vfiprintf_r+0x18>
 800a130:	f7fe fc16 	bl	8008960 <__sinit>
 800a134:	4b89      	ldr	r3, [pc, #548]	; (800a35c <_vfiprintf_r+0x240>)
 800a136:	429d      	cmp	r5, r3
 800a138:	d11b      	bne.n	800a172 <_vfiprintf_r+0x56>
 800a13a:	6875      	ldr	r5, [r6, #4]
 800a13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a13e:	07d9      	lsls	r1, r3, #31
 800a140:	d405      	bmi.n	800a14e <_vfiprintf_r+0x32>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d402      	bmi.n	800a14e <_vfiprintf_r+0x32>
 800a148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a14a:	f7ff f81a 	bl	8009182 <__retarget_lock_acquire_recursive>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	071b      	lsls	r3, r3, #28
 800a152:	d501      	bpl.n	800a158 <_vfiprintf_r+0x3c>
 800a154:	692b      	ldr	r3, [r5, #16]
 800a156:	b9eb      	cbnz	r3, 800a194 <_vfiprintf_r+0x78>
 800a158:	4629      	mov	r1, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7fd fbfe 	bl	800795c <__swsetup_r>
 800a160:	b1c0      	cbz	r0, 800a194 <_vfiprintf_r+0x78>
 800a162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a164:	07dc      	lsls	r4, r3, #31
 800a166:	d50e      	bpl.n	800a186 <_vfiprintf_r+0x6a>
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	b01d      	add	sp, #116	; 0x74
 800a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	4b7b      	ldr	r3, [pc, #492]	; (800a360 <_vfiprintf_r+0x244>)
 800a174:	429d      	cmp	r5, r3
 800a176:	d101      	bne.n	800a17c <_vfiprintf_r+0x60>
 800a178:	68b5      	ldr	r5, [r6, #8]
 800a17a:	e7df      	b.n	800a13c <_vfiprintf_r+0x20>
 800a17c:	4b79      	ldr	r3, [pc, #484]	; (800a364 <_vfiprintf_r+0x248>)
 800a17e:	429d      	cmp	r5, r3
 800a180:	bf08      	it	eq
 800a182:	68f5      	ldreq	r5, [r6, #12]
 800a184:	e7da      	b.n	800a13c <_vfiprintf_r+0x20>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	0598      	lsls	r0, r3, #22
 800a18a:	d4ed      	bmi.n	800a168 <_vfiprintf_r+0x4c>
 800a18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a18e:	f7fe fff9 	bl	8009184 <__retarget_lock_release_recursive>
 800a192:	e7e9      	b.n	800a168 <_vfiprintf_r+0x4c>
 800a194:	2300      	movs	r3, #0
 800a196:	9309      	str	r3, [sp, #36]	; 0x24
 800a198:	2320      	movs	r3, #32
 800a19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1a2:	2330      	movs	r3, #48	; 0x30
 800a1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a368 <_vfiprintf_r+0x24c>
 800a1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ac:	f04f 0901 	mov.w	r9, #1
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	469a      	mov	sl, r3
 800a1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b8:	b10a      	cbz	r2, 800a1be <_vfiprintf_r+0xa2>
 800a1ba:	2a25      	cmp	r2, #37	; 0x25
 800a1bc:	d1f9      	bne.n	800a1b2 <_vfiprintf_r+0x96>
 800a1be:	ebba 0b04 	subs.w	fp, sl, r4
 800a1c2:	d00b      	beq.n	800a1dc <_vfiprintf_r+0xc0>
 800a1c4:	465b      	mov	r3, fp
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7ff ff93 	bl	800a0f6 <__sfputs_r>
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	f000 80aa 	beq.w	800a32a <_vfiprintf_r+0x20e>
 800a1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d8:	445a      	add	r2, fp
 800a1da:	9209      	str	r2, [sp, #36]	; 0x24
 800a1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80a2 	beq.w	800a32a <_vfiprintf_r+0x20e>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f0:	f10a 0a01 	add.w	sl, sl, #1
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	9307      	str	r3, [sp, #28]
 800a1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a1fe:	4654      	mov	r4, sl
 800a200:	2205      	movs	r2, #5
 800a202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a206:	4858      	ldr	r0, [pc, #352]	; (800a368 <_vfiprintf_r+0x24c>)
 800a208:	f7f5 ffc2 	bl	8000190 <memchr>
 800a20c:	9a04      	ldr	r2, [sp, #16]
 800a20e:	b9d8      	cbnz	r0, 800a248 <_vfiprintf_r+0x12c>
 800a210:	06d1      	lsls	r1, r2, #27
 800a212:	bf44      	itt	mi
 800a214:	2320      	movmi	r3, #32
 800a216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a21a:	0713      	lsls	r3, r2, #28
 800a21c:	bf44      	itt	mi
 800a21e:	232b      	movmi	r3, #43	; 0x2b
 800a220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a224:	f89a 3000 	ldrb.w	r3, [sl]
 800a228:	2b2a      	cmp	r3, #42	; 0x2a
 800a22a:	d015      	beq.n	800a258 <_vfiprintf_r+0x13c>
 800a22c:	9a07      	ldr	r2, [sp, #28]
 800a22e:	4654      	mov	r4, sl
 800a230:	2000      	movs	r0, #0
 800a232:	f04f 0c0a 	mov.w	ip, #10
 800a236:	4621      	mov	r1, r4
 800a238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a23c:	3b30      	subs	r3, #48	; 0x30
 800a23e:	2b09      	cmp	r3, #9
 800a240:	d94e      	bls.n	800a2e0 <_vfiprintf_r+0x1c4>
 800a242:	b1b0      	cbz	r0, 800a272 <_vfiprintf_r+0x156>
 800a244:	9207      	str	r2, [sp, #28]
 800a246:	e014      	b.n	800a272 <_vfiprintf_r+0x156>
 800a248:	eba0 0308 	sub.w	r3, r0, r8
 800a24c:	fa09 f303 	lsl.w	r3, r9, r3
 800a250:	4313      	orrs	r3, r2
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	46a2      	mov	sl, r4
 800a256:	e7d2      	b.n	800a1fe <_vfiprintf_r+0xe2>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	1d19      	adds	r1, r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	9103      	str	r1, [sp, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	bfbb      	ittet	lt
 800a264:	425b      	neglt	r3, r3
 800a266:	f042 0202 	orrlt.w	r2, r2, #2
 800a26a:	9307      	strge	r3, [sp, #28]
 800a26c:	9307      	strlt	r3, [sp, #28]
 800a26e:	bfb8      	it	lt
 800a270:	9204      	strlt	r2, [sp, #16]
 800a272:	7823      	ldrb	r3, [r4, #0]
 800a274:	2b2e      	cmp	r3, #46	; 0x2e
 800a276:	d10c      	bne.n	800a292 <_vfiprintf_r+0x176>
 800a278:	7863      	ldrb	r3, [r4, #1]
 800a27a:	2b2a      	cmp	r3, #42	; 0x2a
 800a27c:	d135      	bne.n	800a2ea <_vfiprintf_r+0x1ce>
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	1d1a      	adds	r2, r3, #4
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	9203      	str	r2, [sp, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfb8      	it	lt
 800a28a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a28e:	3402      	adds	r4, #2
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a378 <_vfiprintf_r+0x25c>
 800a296:	7821      	ldrb	r1, [r4, #0]
 800a298:	2203      	movs	r2, #3
 800a29a:	4650      	mov	r0, sl
 800a29c:	f7f5 ff78 	bl	8000190 <memchr>
 800a2a0:	b140      	cbz	r0, 800a2b4 <_vfiprintf_r+0x198>
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	eba0 000a 	sub.w	r0, r0, sl
 800a2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ac:	9b04      	ldr	r3, [sp, #16]
 800a2ae:	4303      	orrs	r3, r0
 800a2b0:	3401      	adds	r4, #1
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b8:	482c      	ldr	r0, [pc, #176]	; (800a36c <_vfiprintf_r+0x250>)
 800a2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2be:	2206      	movs	r2, #6
 800a2c0:	f7f5 ff66 	bl	8000190 <memchr>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d03f      	beq.n	800a348 <_vfiprintf_r+0x22c>
 800a2c8:	4b29      	ldr	r3, [pc, #164]	; (800a370 <_vfiprintf_r+0x254>)
 800a2ca:	bb1b      	cbnz	r3, 800a314 <_vfiprintf_r+0x1f8>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	3307      	adds	r3, #7
 800a2d0:	f023 0307 	bic.w	r3, r3, #7
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	9303      	str	r3, [sp, #12]
 800a2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2da:	443b      	add	r3, r7
 800a2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2de:	e767      	b.n	800a1b0 <_vfiprintf_r+0x94>
 800a2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	e7a5      	b.n	800a236 <_vfiprintf_r+0x11a>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	9305      	str	r3, [sp, #20]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f04f 0c0a 	mov.w	ip, #10
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2fc:	3a30      	subs	r2, #48	; 0x30
 800a2fe:	2a09      	cmp	r2, #9
 800a300:	d903      	bls.n	800a30a <_vfiprintf_r+0x1ee>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0c5      	beq.n	800a292 <_vfiprintf_r+0x176>
 800a306:	9105      	str	r1, [sp, #20]
 800a308:	e7c3      	b.n	800a292 <_vfiprintf_r+0x176>
 800a30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a30e:	4604      	mov	r4, r0
 800a310:	2301      	movs	r3, #1
 800a312:	e7f0      	b.n	800a2f6 <_vfiprintf_r+0x1da>
 800a314:	ab03      	add	r3, sp, #12
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	462a      	mov	r2, r5
 800a31a:	4b16      	ldr	r3, [pc, #88]	; (800a374 <_vfiprintf_r+0x258>)
 800a31c:	a904      	add	r1, sp, #16
 800a31e:	4630      	mov	r0, r6
 800a320:	f7fb fd8e 	bl	8005e40 <_printf_float>
 800a324:	4607      	mov	r7, r0
 800a326:	1c78      	adds	r0, r7, #1
 800a328:	d1d6      	bne.n	800a2d8 <_vfiprintf_r+0x1bc>
 800a32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a32c:	07d9      	lsls	r1, r3, #31
 800a32e:	d405      	bmi.n	800a33c <_vfiprintf_r+0x220>
 800a330:	89ab      	ldrh	r3, [r5, #12]
 800a332:	059a      	lsls	r2, r3, #22
 800a334:	d402      	bmi.n	800a33c <_vfiprintf_r+0x220>
 800a336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a338:	f7fe ff24 	bl	8009184 <__retarget_lock_release_recursive>
 800a33c:	89ab      	ldrh	r3, [r5, #12]
 800a33e:	065b      	lsls	r3, r3, #25
 800a340:	f53f af12 	bmi.w	800a168 <_vfiprintf_r+0x4c>
 800a344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a346:	e711      	b.n	800a16c <_vfiprintf_r+0x50>
 800a348:	ab03      	add	r3, sp, #12
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	462a      	mov	r2, r5
 800a34e:	4b09      	ldr	r3, [pc, #36]	; (800a374 <_vfiprintf_r+0x258>)
 800a350:	a904      	add	r1, sp, #16
 800a352:	4630      	mov	r0, r6
 800a354:	f7fc f818 	bl	8006388 <_printf_i>
 800a358:	e7e4      	b.n	800a324 <_vfiprintf_r+0x208>
 800a35a:	bf00      	nop
 800a35c:	0800ab4c 	.word	0x0800ab4c
 800a360:	0800ab6c 	.word	0x0800ab6c
 800a364:	0800ab2c 	.word	0x0800ab2c
 800a368:	0800ad64 	.word	0x0800ad64
 800a36c:	0800ad6e 	.word	0x0800ad6e
 800a370:	08005e41 	.word	0x08005e41
 800a374:	0800a0f7 	.word	0x0800a0f7
 800a378:	0800ad6a 	.word	0x0800ad6a
 800a37c:	00000000 	.word	0x00000000

0800a380 <nan>:
 800a380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a388 <nan+0x8>
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	00000000 	.word	0x00000000
 800a38c:	7ff80000 	.word	0x7ff80000

0800a390 <_sbrk_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_sbrk_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7f7 fa64 	bl	8001868 <_sbrk>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_sbrk_r+0x1a>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_sbrk_r+0x1a>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	20000300 	.word	0x20000300

0800a3b0 <__sread>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	f000 f93a 	bl	800a630 <_read_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	bfab      	itete	ge
 800a3c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3c4:	181b      	addge	r3, r3, r0
 800a3c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ca:	bfac      	ite	ge
 800a3cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ce:	81a3      	strhlt	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__swrite>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	05db      	lsls	r3, r3, #23
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	d505      	bpl.n	800a3f0 <__swrite+0x1e>
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f000 f8b8 	bl	800a560 <_lseek_r>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	f000 b837 	b.w	800a478 <_write_r>

0800a40a <__sseek>:
 800a40a:	b510      	push	{r4, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 f8a5 	bl	800a560 <_lseek_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	bf15      	itete	ne
 800a41c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a41e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a426:	81a3      	strheq	r3, [r4, #12]
 800a428:	bf18      	it	ne
 800a42a:	81a3      	strhne	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__sclose>:
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 b851 	b.w	800a4d8 <_close_r>

0800a436 <strncmp>:
 800a436:	b510      	push	{r4, lr}
 800a438:	b17a      	cbz	r2, 800a45a <strncmp+0x24>
 800a43a:	4603      	mov	r3, r0
 800a43c:	3901      	subs	r1, #1
 800a43e:	1884      	adds	r4, r0, r2
 800a440:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a444:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a448:	4290      	cmp	r0, r2
 800a44a:	d101      	bne.n	800a450 <strncmp+0x1a>
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	d101      	bne.n	800a454 <strncmp+0x1e>
 800a450:	1a80      	subs	r0, r0, r2
 800a452:	bd10      	pop	{r4, pc}
 800a454:	2800      	cmp	r0, #0
 800a456:	d1f3      	bne.n	800a440 <strncmp+0xa>
 800a458:	e7fa      	b.n	800a450 <strncmp+0x1a>
 800a45a:	4610      	mov	r0, r2
 800a45c:	e7f9      	b.n	800a452 <strncmp+0x1c>

0800a45e <__ascii_wctomb>:
 800a45e:	b149      	cbz	r1, 800a474 <__ascii_wctomb+0x16>
 800a460:	2aff      	cmp	r2, #255	; 0xff
 800a462:	bf85      	ittet	hi
 800a464:	238a      	movhi	r3, #138	; 0x8a
 800a466:	6003      	strhi	r3, [r0, #0]
 800a468:	700a      	strbls	r2, [r1, #0]
 800a46a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a46e:	bf98      	it	ls
 800a470:	2001      	movls	r0, #1
 800a472:	4770      	bx	lr
 800a474:	4608      	mov	r0, r1
 800a476:	4770      	bx	lr

0800a478 <_write_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	; (800a498 <_write_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f7 f99d 	bl	80017c6 <_write>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_write_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_write_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20000300 	.word	0x20000300

0800a49c <__assert_func>:
 800a49c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a49e:	4614      	mov	r4, r2
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <__assert_func+0x2c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	68d8      	ldr	r0, [r3, #12]
 800a4aa:	b14c      	cbz	r4, 800a4c0 <__assert_func+0x24>
 800a4ac:	4b07      	ldr	r3, [pc, #28]	; (800a4cc <__assert_func+0x30>)
 800a4ae:	9100      	str	r1, [sp, #0]
 800a4b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4b4:	4906      	ldr	r1, [pc, #24]	; (800a4d0 <__assert_func+0x34>)
 800a4b6:	462b      	mov	r3, r5
 800a4b8:	f000 f81e 	bl	800a4f8 <fiprintf>
 800a4bc:	f000 f8ca 	bl	800a654 <abort>
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <__assert_func+0x38>)
 800a4c2:	461c      	mov	r4, r3
 800a4c4:	e7f3      	b.n	800a4ae <__assert_func+0x12>
 800a4c6:	bf00      	nop
 800a4c8:	20000014 	.word	0x20000014
 800a4cc:	0800ad75 	.word	0x0800ad75
 800a4d0:	0800ad82 	.word	0x0800ad82
 800a4d4:	0800adb0 	.word	0x0800adb0

0800a4d8 <_close_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_close_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f7 f98b 	bl	80017fe <_close>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_close_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_close_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20000300 	.word	0x20000300

0800a4f8 <fiprintf>:
 800a4f8:	b40e      	push	{r1, r2, r3}
 800a4fa:	b503      	push	{r0, r1, lr}
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	ab03      	add	r3, sp, #12
 800a500:	4805      	ldr	r0, [pc, #20]	; (800a518 <fiprintf+0x20>)
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	6800      	ldr	r0, [r0, #0]
 800a508:	9301      	str	r3, [sp, #4]
 800a50a:	f7ff fe07 	bl	800a11c <_vfiprintf_r>
 800a50e:	b002      	add	sp, #8
 800a510:	f85d eb04 	ldr.w	lr, [sp], #4
 800a514:	b003      	add	sp, #12
 800a516:	4770      	bx	lr
 800a518:	20000014 	.word	0x20000014

0800a51c <_fstat_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	; (800a53c <_fstat_r+0x20>)
 800a520:	2300      	movs	r3, #0
 800a522:	4604      	mov	r4, r0
 800a524:	4608      	mov	r0, r1
 800a526:	4611      	mov	r1, r2
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	f7f7 f974 	bl	8001816 <_fstat>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d102      	bne.n	800a538 <_fstat_r+0x1c>
 800a532:	682b      	ldr	r3, [r5, #0]
 800a534:	b103      	cbz	r3, 800a538 <_fstat_r+0x1c>
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	bd38      	pop	{r3, r4, r5, pc}
 800a53a:	bf00      	nop
 800a53c:	20000300 	.word	0x20000300

0800a540 <_isatty_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d06      	ldr	r5, [pc, #24]	; (800a55c <_isatty_r+0x1c>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	f7f7 f973 	bl	8001836 <_isatty>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_isatty_r+0x1a>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_isatty_r+0x1a>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	20000300 	.word	0x20000300

0800a560 <_lseek_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_lseek_r+0x20>)
 800a564:	4604      	mov	r4, r0
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	f7f7 f96c 	bl	800184c <_lseek>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_lseek_r+0x1e>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_lseek_r+0x1e>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000300 	.word	0x20000300

0800a584 <memmove>:
 800a584:	4288      	cmp	r0, r1
 800a586:	b510      	push	{r4, lr}
 800a588:	eb01 0402 	add.w	r4, r1, r2
 800a58c:	d902      	bls.n	800a594 <memmove+0x10>
 800a58e:	4284      	cmp	r4, r0
 800a590:	4623      	mov	r3, r4
 800a592:	d807      	bhi.n	800a5a4 <memmove+0x20>
 800a594:	1e43      	subs	r3, r0, #1
 800a596:	42a1      	cmp	r1, r4
 800a598:	d008      	beq.n	800a5ac <memmove+0x28>
 800a59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a59e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a2:	e7f8      	b.n	800a596 <memmove+0x12>
 800a5a4:	4402      	add	r2, r0
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	428a      	cmp	r2, r1
 800a5aa:	d100      	bne.n	800a5ae <memmove+0x2a>
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5b6:	e7f7      	b.n	800a5a8 <memmove+0x24>

0800a5b8 <__malloc_lock>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__malloc_lock+0x8>)
 800a5ba:	f7fe bde2 	b.w	8009182 <__retarget_lock_acquire_recursive>
 800a5be:	bf00      	nop
 800a5c0:	200002f4 	.word	0x200002f4

0800a5c4 <__malloc_unlock>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__malloc_unlock+0x8>)
 800a5c6:	f7fe bddd 	b.w	8009184 <__retarget_lock_release_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	200002f4 	.word	0x200002f4

0800a5d0 <_realloc_r>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	460e      	mov	r6, r1
 800a5da:	b921      	cbnz	r1, 800a5e6 <_realloc_r+0x16>
 800a5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	f7ff bba1 	b.w	8009d28 <_malloc_r>
 800a5e6:	b92a      	cbnz	r2, 800a5f4 <_realloc_r+0x24>
 800a5e8:	f7ff fb32 	bl	8009c50 <_free_r>
 800a5ec:	4625      	mov	r5, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	f000 f835 	bl	800a662 <_malloc_usable_size_r>
 800a5f8:	4284      	cmp	r4, r0
 800a5fa:	4607      	mov	r7, r0
 800a5fc:	d802      	bhi.n	800a604 <_realloc_r+0x34>
 800a5fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a602:	d812      	bhi.n	800a62a <_realloc_r+0x5a>
 800a604:	4621      	mov	r1, r4
 800a606:	4640      	mov	r0, r8
 800a608:	f7ff fb8e 	bl	8009d28 <_malloc_r>
 800a60c:	4605      	mov	r5, r0
 800a60e:	2800      	cmp	r0, #0
 800a610:	d0ed      	beq.n	800a5ee <_realloc_r+0x1e>
 800a612:	42bc      	cmp	r4, r7
 800a614:	4622      	mov	r2, r4
 800a616:	4631      	mov	r1, r6
 800a618:	bf28      	it	cs
 800a61a:	463a      	movcs	r2, r7
 800a61c:	f7fe fe32 	bl	8009284 <memcpy>
 800a620:	4631      	mov	r1, r6
 800a622:	4640      	mov	r0, r8
 800a624:	f7ff fb14 	bl	8009c50 <_free_r>
 800a628:	e7e1      	b.n	800a5ee <_realloc_r+0x1e>
 800a62a:	4635      	mov	r5, r6
 800a62c:	e7df      	b.n	800a5ee <_realloc_r+0x1e>
	...

0800a630 <_read_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_read_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 f8a4 	bl	800178c <_read>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_read_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_read_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000300 	.word	0x20000300

0800a654 <abort>:
 800a654:	b508      	push	{r3, lr}
 800a656:	2006      	movs	r0, #6
 800a658:	f000 f834 	bl	800a6c4 <raise>
 800a65c:	2001      	movs	r0, #1
 800a65e:	f7f7 f88b 	bl	8001778 <_exit>

0800a662 <_malloc_usable_size_r>:
 800a662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a666:	1f18      	subs	r0, r3, #4
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfbc      	itt	lt
 800a66c:	580b      	ldrlt	r3, [r1, r0]
 800a66e:	18c0      	addlt	r0, r0, r3
 800a670:	4770      	bx	lr

0800a672 <_raise_r>:
 800a672:	291f      	cmp	r1, #31
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	d904      	bls.n	800a686 <_raise_r+0x14>
 800a67c:	2316      	movs	r3, #22
 800a67e:	6003      	str	r3, [r0, #0]
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a688:	b112      	cbz	r2, 800a690 <_raise_r+0x1e>
 800a68a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a68e:	b94b      	cbnz	r3, 800a6a4 <_raise_r+0x32>
 800a690:	4620      	mov	r0, r4
 800a692:	f000 f831 	bl	800a6f8 <_getpid_r>
 800a696:	462a      	mov	r2, r5
 800a698:	4601      	mov	r1, r0
 800a69a:	4620      	mov	r0, r4
 800a69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6a0:	f000 b818 	b.w	800a6d4 <_kill_r>
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d00a      	beq.n	800a6be <_raise_r+0x4c>
 800a6a8:	1c59      	adds	r1, r3, #1
 800a6aa:	d103      	bne.n	800a6b4 <_raise_r+0x42>
 800a6ac:	2316      	movs	r3, #22
 800a6ae:	6003      	str	r3, [r0, #0]
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	e7e7      	b.n	800a684 <_raise_r+0x12>
 800a6b4:	2400      	movs	r4, #0
 800a6b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	4798      	blx	r3
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e7e0      	b.n	800a684 <_raise_r+0x12>
	...

0800a6c4 <raise>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <raise+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f7ff bfd2 	b.w	800a672 <_raise_r>
 800a6ce:	bf00      	nop
 800a6d0:	20000014 	.word	0x20000014

0800a6d4 <_kill_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d07      	ldr	r5, [pc, #28]	; (800a6f4 <_kill_r+0x20>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	4611      	mov	r1, r2
 800a6e0:	602b      	str	r3, [r5, #0]
 800a6e2:	f7f7 f839 	bl	8001758 <_kill>
 800a6e6:	1c43      	adds	r3, r0, #1
 800a6e8:	d102      	bne.n	800a6f0 <_kill_r+0x1c>
 800a6ea:	682b      	ldr	r3, [r5, #0]
 800a6ec:	b103      	cbz	r3, 800a6f0 <_kill_r+0x1c>
 800a6ee:	6023      	str	r3, [r4, #0]
 800a6f0:	bd38      	pop	{r3, r4, r5, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000300 	.word	0x20000300

0800a6f8 <_getpid_r>:
 800a6f8:	f7f7 b826 	b.w	8001748 <_getpid>

0800a6fc <_init>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr

0800a708 <_fini>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr
