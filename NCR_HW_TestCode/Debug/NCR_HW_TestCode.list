
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be44  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  0800bf88  0800bf88  0001bf88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c70c  0800c70c  0001c70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c718  0800c718  0001c718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000008  0800c71c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000310  200001f0  0800c904  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000500  0800c904  00020500  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016ee9  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e6f  00000000  00000000  00037109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001740  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  0003b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021c72  00000000  00000000  0003cce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015ef6  00000000  00000000  0005e952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000db1f1  00000000  00000000  00074848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014fa39  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077d4  00000000  00000000  0014fa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bf6c 	.word	0x0800bf6c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800bf6c 	.word	0x0800bf6c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <initModbus>:
 *
 * @param serialPort Pointer to the UART handle for Modbus communication.
 * @param EN_GPIOPort GPIO port for MODBUS_EN pin.
 * @param EN_GPIOPin GPIO pin for MODBUS_EN.
 */
void initModbus(UART_HandleTypeDef *serialPort, GPIO_TypeDef * EN_GPIOPort, uint16_t EN_GPIOPin){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]

	modbusSerial = *serialPort;
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <initModbus+0x34>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2394      	movs	r3, #148	; 0x94
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f006 facf 	bl	8007564 <memcpy>
	MODBUS_EN.port = EN_GPIOPort;
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <initModbus+0x38>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	6013      	str	r3, [r2, #0]
	MODBUS_EN.pin = EN_GPIOPin;
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <initModbus+0x38>)
 8000fd2:	711a      	strb	r2, [r3, #4]

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000214 	.word	0x20000214
 8000fe0:	2000020c 	.word	0x2000020c

08000fe4 <sendRaw>:
 *
 * @param modbusCMD Pointer to the raw Modbus command data.
 * @param cmdLen Length of the Modbus command data.
 * @param modbusResponse Pointer to the ModBus response structure.
 */
void sendRaw(uint8_t *modbusCMD, uint16_t cmdLen, ModBus_t *modbusResponse) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	460b      	mov	r3, r1
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	817b      	strh	r3, [r7, #10]

	// Clear response buffer and reset index
	memset(modbusResponse->buffer, '\0', sizeof(modbusResponse->buffer) * sizeof(modbusResponse->buffer[0]));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	2296      	movs	r2, #150	; 0x96
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fac0 	bl	8007580 <memset>
	modbusResponse->rxIndex = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]

	// Enable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_SET);
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <sendRaw+0x6c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <sendRaw+0x6c>)
 800100c:	7912      	ldrb	r2, [r2, #4]
 800100e:	b291      	uxth	r1, r2
 8001010:	2201      	movs	r2, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fd7a 	bl	8002b0c <HAL_GPIO_WritePin>

	// Receive data using UART interrupt
	HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)modbusResponse->buffer, 1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3302      	adds	r3, #2
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <sendRaw+0x70>)
 8001022:	f004 fb01 	bl	8005628 <HAL_UART_Receive_IT>
//		printf("%02X ", modbusCMD[i]);
//	}
//	printf("\n");

	// Transmit the raw data
	Serial_Transmit(modbusCMD, cmdLen);
 8001026:	897b      	ldrh	r3, [r7, #10]
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f814 	bl	8001058 <Serial_Transmit>

	// Delay to ensure proper communication
	//HAL_Delay(1);

	// Disable MODBUS_EN
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_RESET);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <sendRaw+0x6c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <sendRaw+0x6c>)
 8001036:	7912      	ldrb	r2, [r2, #4]
 8001038:	b291      	uxth	r1, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fd65 	bl	8002b0c <HAL_GPIO_WritePin>

	// Delay for stability
	HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f001 f9e8 	bl	8002418 <HAL_Delay>


}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000020c 	.word	0x2000020c
 8001054:	20000214 	.word	0x20000214

08001058 <Serial_Transmit>:
	HAL_Delay(10);

}

// Transmit data through UART
void Serial_Transmit(uint8_t *data, uint16_t length) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
    // Assuming UART1 has been initialized
    // Transmit data
    HAL_UART_Transmit(&modbusSerial, data, length, HAL_MAX_DELAY);
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <Serial_Transmit+0x24>)
 800106e:	f004 fa4d 	bl	800550c <HAL_UART_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000214 	.word	0x20000214

08001080 <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2b95      	cmp	r3, #149	; 0x95
 800108e:	d810      	bhi.n	80010b2 <Modbus_RxCallback+0x32>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <Modbus_RxCallback+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	440b      	add	r3, r1
 80010a2:	709a      	strb	r2, [r3, #2]
        _ModbusResponse->rxIndex++;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	e002      	b.n	80010b8 <Modbus_RxCallback+0x38>


    } else {
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	801a      	strh	r2, [r3, #0]
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <Modbus_RxCallback+0x54>)
 80010c8:	f004 faae 	bl	8005628 <HAL_UART_Receive_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000214 	.word	0x20000214

080010d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001114:	1d39      	adds	r1, r7, #4
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	2201      	movs	r2, #1
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <__io_putchar+0x20>)
 800111e:	f004 f9f5 	bl	800550c <HAL_UART_Transmit>
  return ch;
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002fc 	.word	0x200002fc

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b08d      	sub	sp, #52	; 0x34
 8001134:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f001 f8e9 	bl	800230c <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
  MCP23008_Init();
 800113a:	f000 fad3 	bl	80016e4 <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f937 	bl	80013b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001142:	f000 f98d 	bl	8001460 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fa81 	bl	800164c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800114a:	f000 f9e7 	bl	800151c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800114e:	f000 f9a5 	bl	800149c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001152:	f000 fa2f 	bl	80015b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 8001156:	f000 fac5 	bl	80016e4 <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 800115a:	f000 fb55 	bl	8001808 <MCP23008_ConfigureInterrupts>

  // Initialize SHT20 Sensor
  SHT2x_Init(&hi2c1);
 800115e:	4882      	ldr	r0, [pc, #520]	; (8001368 <main+0x238>)
 8001160:	f000 ffc4 	bl	80020ec <SHT2x_Init>
  SHT2x_SetResolution(RES_14_12);
 8001164:	2000      	movs	r0, #0
 8001166:	f001 f8a9 	bl	80022bc <SHT2x_SetResolution>

  // Initialize Modbus
  initModbus(&huart1, MODBUS_EN_GPIO_Port, MODBUS_EN_Pin);
 800116a:	2210      	movs	r2, #16
 800116c:	497f      	ldr	r1, [pc, #508]	; (800136c <main+0x23c>)
 800116e:	4880      	ldr	r0, [pc, #512]	; (8001370 <main+0x240>)
 8001170:	f7ff ff1a 	bl	8000fa8 <initModbus>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8001174:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <main+0x244>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <main+0x248>)
 800117c:	4413      	add	r3, r2
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	487b      	ldr	r0, [pc, #492]	; (8001370 <main+0x240>)
 8001184:	f004 fa50 	bl	8005628 <HAL_UART_Receive_IT>

  // Initialize timers;
  shtReadMillis = HAL_GetTick();
 8001188:	f001 f92e 	bl	80023e8 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4a7b      	ldr	r2, [pc, #492]	; (800137c <main+0x24c>)
 8001190:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" # # # # # # # # # # -> %s\r\n ", FirmwareName);
 8001192:	497b      	ldr	r1, [pc, #492]	; (8001380 <main+0x250>)
 8001194:	487b      	ldr	r0, [pc, #492]	; (8001384 <main+0x254>)
 8001196:	f007 f875 	bl	8008284 <iprintf>
  printf("# # # # # # # # # # -> Firmware Version %d.%d.%d\r\n ", VERSION_MAJOR, VERSION_MID, VERSION_MINOR);
 800119a:	2300      	movs	r3, #0
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4879      	ldr	r0, [pc, #484]	; (8001388 <main+0x258>)
 80011a2:	f007 f86f 	bl	8008284 <iprintf>

#ifdef SCAN_I2C_DEVICES
  scanI2CDevices();
 80011a6:	f000 fc7d 	bl	8001aa4 <scanI2CDevices>
#endif

  WDTReset();
 80011aa:	f000 fc65 	bl	8001a78 <WDTReset>
    /* USER CODE BEGIN 3 */



  	  // Check Temperature Reading Every X Interval
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 80011ae:	f001 f91b 	bl	80023e8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b71      	ldr	r3, [pc, #452]	; (800137c <main+0x24c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011be:	d92f      	bls.n	8001220 <main+0xf0>
  		  sensors.sht20.temperature = SHT2x_GetTemperature(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 fff5 	bl	80021b0 <SHT2x_GetTemperature>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	4b70      	ldr	r3, [pc, #448]	; (800138c <main+0x25c>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
  		  sensors.sht20.humidity = SHT2x_GetRelativeHumidity(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 f833 	bl	800223c <SHT2x_GetRelativeHumidity>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	4b6c      	ldr	r3, [pc, #432]	; (800138c <main+0x25c>)
 80011dc:	edc3 7a01 	vstr	s15, [r3, #4]

#ifdef SERIAL_DEBUG_SHT
  		printLineMarker('*');
 80011e0:	202a      	movs	r0, #42	; 0x2a
 80011e2:	f000 fc89 	bl	8001af8 <printLineMarker>
  		printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht20.temperature, sensors.sht20.humidity);
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <main+0x25c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f984 	bl	80004f8 <__aeabi_f2d>
 80011f0:	4604      	mov	r4, r0
 80011f2:	460d      	mov	r5, r1
 80011f4:	4b65      	ldr	r3, [pc, #404]	; (800138c <main+0x25c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f97d 	bl	80004f8 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9cd 2300 	strd	r2, r3, [sp]
 8001206:	4622      	mov	r2, r4
 8001208:	462b      	mov	r3, r5
 800120a:	4861      	ldr	r0, [pc, #388]	; (8001390 <main+0x260>)
 800120c:	f007 f83a 	bl	8008284 <iprintf>
  		printLineMarker('*');
 8001210:	202a      	movs	r0, #42	; 0x2a
 8001212:	f000 fc71 	bl	8001af8 <printLineMarker>
#endif
  		/// @TODO: Insert Threshold Control here for Unscheduled TX

  		shtReadMillis = HAL_GetTick();
 8001216:	f001 f8e7 	bl	80023e8 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <main+0x24c>)
 800121e:	6013      	str	r3, [r2, #0]
  	  }

  	  // Read All Sensors every Y Interval
  	  if(HAL_GetTick() - sensorsReadMillis > DEVICE_HEARTBEAL){
 8001220:	f001 f8e2 	bl	80023e8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <main+0x264>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	f240 8096 	bls.w	8001362 <main+0x232>

  		// Read SHT20
  		sensors.sht20.temperature = SHT2x_GetTemperature(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 ffba 	bl	80021b0 <SHT2x_GetTemperature>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <main+0x25c>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
	    sensors.sht20.humidity = SHT2x_GetRelativeHumidity(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fff8 	bl	800223c <SHT2x_GetRelativeHumidity>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <main+0x25c>)
 8001252:	edc3 7a01 	vstr	s15, [r3, #4]

	    // Read Smoke Sensor
	    sensors.smoke = ReadSmokeStatus();
 8001256:	4c4d      	ldr	r4, [pc, #308]	; (800138c <main+0x25c>)
 8001258:	463b      	mov	r3, r7
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fb7a 	bl	8001954 <ReadSmokeStatus>
 8001260:	f104 0308 	add.w	r3, r4, #8
 8001264:	463a      	mov	r2, r7
 8001266:	ca07      	ldmia	r2, {r0, r1, r2}
 8001268:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Read DryContacts
	    sensors.dryContact = MCP23008_ReadInputs();
 800126c:	4c47      	ldr	r4, [pc, #284]	; (800138c <main+0x25c>)
 800126e:	463b      	mov	r3, r7
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fa4d 	bl	8001710 <MCP23008_ReadInputs>
 8001276:	f104 0314 	add.w	r3, r4, #20
 800127a:	463a      	mov	r2, r7
 800127c:	6810      	ldr	r0, [r2, #0]
 800127e:	6851      	ldr	r1, [r2, #4]
 8001280:	c303      	stmia	r3!, {r0, r1}
 8001282:	7a12      	ldrb	r2, [r2, #8]
 8001284:	701a      	strb	r2, [r3, #0]

	    // Read ModBus Device

	    sendRaw(getMeterDataCmd, GetMeterData_LEN, &ModbusResp);
 8001286:	4a3b      	ldr	r2, [pc, #236]	; (8001374 <main+0x244>)
 8001288:	2105      	movs	r1, #5
 800128a:	4843      	ldr	r0, [pc, #268]	; (8001398 <main+0x268>)
 800128c:	f7ff feaa 	bl	8000fe4 <sendRaw>
	    HAL_Delay(2000); // Give time to receive response
 8001290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001294:	f001 f8c0 	bl	8002418 <HAL_Delay>

#ifdef SCAN_I2C_DEVICES
  		scanI2CDevices();
 8001298:	f000 fc04 	bl	8001aa4 <scanI2CDevices>
#endif

#ifdef SERIAL_DEBUG_SENSORS
	    printLineMarker('-');
 800129c:	202d      	movs	r0, #45	; 0x2d
 800129e:	f000 fc2b 	bl	8001af8 <printLineMarker>
	    printf("SHT20 Reading ->Temperature: %.02f \t Humidity: %.02f\r\n", sensors.sht20.temperature, sensors.sht20.humidity);
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <main+0x25c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f926 	bl	80004f8 <__aeabi_f2d>
 80012ac:	4604      	mov	r4, r0
 80012ae:	460d      	mov	r5, r1
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <main+0x25c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f91f 	bl	80004f8 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	e9cd 2300 	strd	r2, r3, [sp]
 80012c2:	4622      	mov	r2, r4
 80012c4:	462b      	mov	r3, r5
 80012c6:	4832      	ldr	r0, [pc, #200]	; (8001390 <main+0x260>)
 80012c8:	f006 ffdc 	bl	8008284 <iprintf>
	    printf("Smoke Level -> Level %d \r\n", sensors.smoke.level);
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <main+0x25c>)
 80012ce:	7c1b      	ldrb	r3, [r3, #16]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4832      	ldr	r0, [pc, #200]	; (800139c <main+0x26c>)
 80012d4:	f006 ffd6 	bl	8008284 <iprintf>
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <main+0x25c>)
 80012da:	7d5b      	ldrb	r3, [r3, #21]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012dc:	461d      	mov	r5, r3
				sensors.dryContact.DC1, sensors.dryContact.DC2,
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <main+0x25c>)
 80012e0:	7d9b      	ldrb	r3, [r3, #22]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012e2:	461e      	mov	r6, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <main+0x25c>)
 80012e6:	7ddb      	ldrb	r3, [r3, #23]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012e8:	469c      	mov	ip, r3
				sensors.dryContact.DC3, sensors.dryContact.DC4,
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <main+0x25c>)
 80012ec:	7e1b      	ldrb	r3, [r3, #24]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012ee:	461a      	mov	r2, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <main+0x25c>)
 80012f2:	7e5b      	ldrb	r3, [r3, #25]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012f4:	4619      	mov	r1, r3
				sensors.dryContact.DC5, sensors.dryContact.DC6,
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <main+0x25c>)
 80012f8:	7e9b      	ldrb	r3, [r3, #26]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 80012fa:	4618      	mov	r0, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <main+0x25c>)
 80012fe:	7edb      	ldrb	r3, [r3, #27]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 8001300:	461c      	mov	r4, r3
				sensors.dryContact.DC7, sensors.dryContact.DC8);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <main+0x25c>)
 8001304:	7f1b      	ldrb	r3, [r3, #28]
	    printf("Dry Contact States: %d %d %d %d %d %d %d %d \r\n",
 8001306:	9304      	str	r3, [sp, #16]
 8001308:	9403      	str	r4, [sp, #12]
 800130a:	9002      	str	r0, [sp, #8]
 800130c:	9101      	str	r1, [sp, #4]
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	4663      	mov	r3, ip
 8001312:	4632      	mov	r2, r6
 8001314:	4629      	mov	r1, r5
 8001316:	4822      	ldr	r0, [pc, #136]	; (80013a0 <main+0x270>)
 8001318:	f006 ffb4 	bl	8008284 <iprintf>
	    printf("MODBUS RESPONSE (Hex): ");
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <main+0x274>)
 800131e:	f006 ffb1 	bl	8008284 <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e00b      	b.n	8001340 <main+0x210>
	        printf("%02X ", ModbusResp.buffer[x]);
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <main+0x244>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <main+0x278>)
 8001336:	f006 ffa5 	bl	8008284 <iprintf>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <main+0x244>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4293      	cmp	r3, r2
 800134a:	dbed      	blt.n	8001328 <main+0x1f8>
	    }
	    printf(" \r\n");
 800134c:	4817      	ldr	r0, [pc, #92]	; (80013ac <main+0x27c>)
 800134e:	f007 f81f 	bl	8008390 <puts>
	    printLineMarker('-');
 8001352:	202d      	movs	r0, #45	; 0x2d
 8001354:	f000 fbd0 	bl	8001af8 <printLineMarker>
#endif

  		sensorsReadMillis = HAL_GetTick();
 8001358:	f001 f846 	bl	80023e8 <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <main+0x264>)
 8001360:	6013      	str	r3, [r2, #0]
  	  }

  	WDTReset();
 8001362:	f000 fb89 	bl	8001a78 <WDTReset>
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 8001366:	e722      	b.n	80011ae <main+0x7e>
 8001368:	200002a8 	.word	0x200002a8
 800136c:	48000400 	.word	0x48000400
 8001370:	20000390 	.word	0x20000390
 8001374:	20000424 	.word	0x20000424
 8001378:	20000426 	.word	0x20000426
 800137c:	200004dc 	.word	0x200004dc
 8001380:	0800bf88 	.word	0x0800bf88
 8001384:	0800bfa4 	.word	0x0800bfa4
 8001388:	0800bfc4 	.word	0x0800bfc4
 800138c:	200004bc 	.word	0x200004bc
 8001390:	0800bff8 	.word	0x0800bff8
 8001394:	200004e0 	.word	0x200004e0
 8001398:	20000008 	.word	0x20000008
 800139c:	0800c030 	.word	0x0800c030
 80013a0:	0800c04c 	.word	0x0800c04c
 80013a4:	0800c07c 	.word	0x0800c07c
 80013a8:	0800c094 	.word	0x0800c094
 80013ac:	0800c09c 	.word	0x0800c09c

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2248      	movs	r2, #72	; 0x48
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 f8de 	bl	8007580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <SystemClock_Config+0xac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <SystemClock_Config+0xac>)
 80013e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <SystemClock_Config+0xac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80013f2:	2322      	movs	r3, #34	; 0x22
 80013f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001404:	2300      	movs	r3, #0
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001408:	23a0      	movs	r3, #160	; 0xa0
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fdcf 	bl	8003fb8 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001420:	f000 fb88 	bl	8001b34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001424:	236f      	movs	r3, #111	; 0x6f
 8001426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f92b 	bl	80046a0 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001450:	f000 fb70 	bl	8001b34 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3768      	adds	r7, #104	; 0x68
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58000400 	.word	0x58000400

08001460 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2250      	movs	r2, #80	; 0x50
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 f887 	bl	8007580 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800147c:	2310      	movs	r3, #16
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fd4b 	bl	8004f1e <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800148e:	f000 fb51 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	; 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_I2C1_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_I2C1_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_I2C1_Init+0x74>)
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <MX_I2C1_Init+0x7c>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_I2C1_Init+0x74>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <MX_I2C1_Init+0x74>)
 80014d8:	f001 fb30 	bl	8002b3c <HAL_I2C_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014e2:	f000 fb27 	bl	8001b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <MX_I2C1_Init+0x74>)
 80014ea:	f002 f939 	bl	8003760 <HAL_I2CEx_ConfigAnalogFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 fb1e 	bl	8001b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_I2C1_Init+0x74>)
 80014fc:	f002 f97b 	bl	80037f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 fb15 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002a8 	.word	0x200002a8
 8001514:	40005400 	.word	0x40005400
 8001518:	00707cbb 	.word	0x00707cbb

0800151c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <MX_LPUART1_UART_Init+0x94>)
 8001524:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001564:	4811      	ldr	r0, [pc, #68]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001566:	f003 ff81 	bl	800546c <HAL_UART_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001570:	f000 fae0 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001578:	f005 feff 	bl	800737a <HAL_UARTEx_SetTxFifoThreshold>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001582:	f000 fad7 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 800158a:	f005 ff34 	bl	80073f6 <HAL_UARTEx_SetRxFifoThreshold>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001594:	f000 face 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_LPUART1_UART_Init+0x90>)
 800159a:	f005 feb5 	bl	8007308 <HAL_UARTEx_DisableFifoMode>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 fac6 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200002fc 	.word	0x200002fc
 80015b0:	40008000 	.word	0x40008000

080015b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_USART1_UART_Init+0x94>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015fe:	f003 ff35 	bl	800546c <HAL_UART_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001608:	f000 fa94 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001610:	f005 feb3 	bl	800737a <HAL_UARTEx_SetTxFifoThreshold>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800161a:	f000 fa8b 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001622:	f005 fee8 	bl	80073f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800162c:	f000 fa82 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001632:	f005 fe69 	bl	8007308 <HAL_UARTEx_DisableFifoMode>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800163c:	f000 fa7a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000390 	.word	0x20000390
 8001648:	40013800 	.word	0x40013800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff fd39 	bl	80010d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2004      	movs	r0, #4
 8001668:	f7ff fd36 	bl	80010d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WDT_DONE_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f244 0110 	movw	r1, #16400	; 0x4010
 8001672:	481b      	ldr	r0, [pc, #108]	; (80016e0 <MX_GPIO_Init+0x94>)
 8001674:	f001 fa4a 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 8001678:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800167c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800167e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <MX_GPIO_Init+0x94>)
 800168e:	f001 f8b5 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : WDT_DONE_Pin MODBUS_EN_Pin */
  GPIO_InitStruct.Pin = WDT_DONE_Pin|MODBUS_EN_Pin;
 8001692:	f244 0310 	movw	r3, #16400	; 0x4010
 8001696:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_GPIO_Init+0x94>)
 80016aa:	f001 f8a7 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_GPIO_Init+0x94>)
 80016c4:	f001 f89a 	bl	80027fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2028      	movs	r0, #40	; 0x28
 80016ce:	f000 ffa2 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f000 ffb9 	bl	800264a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	48000400 	.word	0x48000400

080016e4 <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 80016ea:	2300      	movs	r3, #0
 80016ec:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 80016ee:	23ff      	movs	r3, #255	; 0xff
 80016f0:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80016f2:	1d3a      	adds	r2, r7, #4
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2302      	movs	r3, #2
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <MCP23008_Init+0x28>)
 8001700:	f001 faac 	bl	8002c5c <HAL_I2C_Master_Transmit>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002a8 	.word	0x200002a8

08001710 <MCP23008_ReadInputs>:

DryContactStatus MCP23008_ReadInputs(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 8001718:	2309      	movs	r3, #9
 800171a:	753b      	strb	r3, [r7, #20]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 800171c:	f107 0214 	add.w	r2, r7, #20
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2140      	movs	r1, #64	; 0x40
 800172a:	4836      	ldr	r0, [pc, #216]	; (8001804 <MCP23008_ReadInputs+0xf4>)
 800172c:	f001 fa96 	bl	8002c5c <HAL_I2C_Master_Transmit>

    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8001730:	f107 0213 	add.w	r2, r7, #19
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <MCP23008_ReadInputs+0xf4>)
 8001740:	f001 fb80 	bl	8002e44 <HAL_I2C_Master_Receive>

    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	723b      	strb	r3, [r7, #8]
	dryContact.DC1 = (gpioState & (1 << 0)) ? true : false;
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	727b      	strb	r3, [r7, #9]
	dryContact.DC2 = (gpioState & (1 << 1)) ? true : false;
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	105b      	asrs	r3, r3, #1
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	72bb      	strb	r3, [r7, #10]
	dryContact.DC3 = (gpioState & (1 << 2)) ? true : false;
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	72fb      	strb	r3, [r7, #11]
	dryContact.DC4 = (gpioState & (1 << 3)) ? true : false;
 8001782:	7cfb      	ldrb	r3, [r7, #19]
 8001784:	10db      	asrs	r3, r3, #3
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	733b      	strb	r3, [r7, #12]
	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	111b      	asrs	r3, r3, #4
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	737b      	strb	r3, [r7, #13]
	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
 80017aa:	7cfb      	ldrb	r3, [r7, #19]
 80017ac:	115b      	asrs	r3, r3, #5
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	73bb      	strb	r3, [r7, #14]
	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
 80017be:	7cfb      	ldrb	r3, [r7, #19]
 80017c0:	119b      	asrs	r3, r3, #6
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	73fb      	strb	r3, [r7, #15]
	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;
 80017d2:	7cfb      	ldrb	r3, [r7, #19]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	11db      	asrs	r3, r3, #7
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	743b      	strb	r3, [r7, #16]

	return dryContact;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	cb03      	ldmia	r3!, {r0, r1}
 80017f4:	6010      	str	r0, [r2, #0]
 80017f6:	6051      	str	r1, [r2, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	7213      	strb	r3, [r2, #8]
}
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002a8 	.word	0x200002a8

08001808 <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 800180e:	2302      	movs	r3, #2
 8001810:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 8001812:	23ff      	movs	r3, #255	; 0xff
 8001814:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001816:	1d3a      	adds	r2, r7, #4
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	2140      	movs	r1, #64	; 0x40
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001824:	f001 fa1a 	bl	8002c5c <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 8001828:	2304      	movs	r3, #4
 800182a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 800182c:	2300      	movs	r3, #0
 800182e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001830:	1d3a      	adds	r2, r7, #4
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	2140      	movs	r1, #64	; 0x40
 800183c:	481a      	ldr	r0, [pc, #104]	; (80018a8 <MCP23008_ConfigureInterrupts+0xa0>)
 800183e:	f001 fa0d 	bl	8002c5c <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 8001842:	2303      	movs	r3, #3
 8001844:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 8001846:	2300      	movs	r3, #0
 8001848:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800184a:	1d3a      	adds	r2, r7, #4
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2302      	movs	r3, #2
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001858:	f001 fa00 	bl	8002c5c <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 800185c:	2305      	movs	r3, #5
 800185e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2140      	movs	r1, #64	; 0x40
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MCP23008_ConfigureInterrupts+0xa0>)
 8001870:	f001 fae8 	bl	8002e44 <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 8001874:	797b      	ldrb	r3, [r7, #5]
 8001876:	b25b      	sxtb	r3, r3
 8001878:	f023 0306 	bic.w	r3, r3, #6
 800187c:	b25b      	sxtb	r3, r3
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	b25b      	sxtb	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 8001888:	2305      	movs	r3, #5
 800188a:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800188c:	1d3a      	adds	r2, r7, #4
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2302      	movs	r3, #2
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MCP23008_ConfigureInterrupts+0xa0>)
 800189a:	f001 f9df 	bl	8002c5c <HAL_I2C_Master_Transmit>

}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a8 	.word	0x200002a8

080018ac <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b08f      	sub	sp, #60	; 0x3c
 80018b0:	af06      	add	r7, sp, #24
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_GPIO_EXTI_IRQHandler+0x9c>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03a      	beq.n	8001938 <HAL_GPIO_EXTI_IRQHandler+0x8c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <HAL_GPIO_EXTI_IRQHandler+0x9c>)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	60d3      	str	r3, [r2, #12]



    switch(GPIO_Pin)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ce:	d009      	beq.n	80018e4 <HAL_GPIO_EXTI_IRQHandler+0x38>
 80018d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d4:	dc32      	bgt.n	800193c <HAL_GPIO_EXTI_IRQHandler+0x90>
 80018d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_EXTI_IRQHandler+0x70>
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d01c      	beq.n	800191c <HAL_GPIO_EXTI_IRQHandler+0x70>

          break;
      }

      default:
        break;
 80018e2:	e02b      	b.n	800193c <HAL_GPIO_EXTI_IRQHandler+0x90>
          DryContactStatus dryContact = MCP23008_ReadInputs();
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff11 	bl	8001710 <MCP23008_ReadInputs>
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 80018ee:	7d7b      	ldrb	r3, [r7, #21]
		  printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 80018f0:	461d      	mov	r5, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 80018f2:	7dbb      	ldrb	r3, [r7, #22]
		  printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 80018f4:	461e      	mov	r6, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
		  printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 80018f8:	469c      	mov	ip, r3
				 dryContact.DC1, dryContact.DC2, dryContact.DC3, dryContact.DC4,
 80018fa:	7e3b      	ldrb	r3, [r7, #24]
				 dryContact.DC5, dryContact.DC6, dryContact.DC7, dryContact.DC8);
 80018fc:	7e7a      	ldrb	r2, [r7, #25]
 80018fe:	7eb9      	ldrb	r1, [r7, #26]
 8001900:	7ef8      	ldrb	r0, [r7, #27]
 8001902:	7f3c      	ldrb	r4, [r7, #28]
		  printf("DRY CONTACT: %d %d %d %d %d %d %d %d \r\n",
 8001904:	9404      	str	r4, [sp, #16]
 8001906:	9003      	str	r0, [sp, #12]
 8001908:	9102      	str	r1, [sp, #8]
 800190a:	9201      	str	r2, [sp, #4]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4663      	mov	r3, ip
 8001910:	4632      	mov	r2, r6
 8001912:	4629      	mov	r1, r5
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0xa0>)
 8001916:	f006 fcb5 	bl	8008284 <iprintf>
          break;
 800191a:	e010      	b.n	800193e <HAL_GPIO_EXTI_IRQHandler+0x92>
    	  SmokeStatus smokeStatus = ReadSmokeStatus();
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f817 	bl	8001954 <ReadSmokeStatus>
				 smokeStatus.pinA, smokeStatus.pinB, smokeStatus.status);
 8001926:	7a3b      	ldrb	r3, [r7, #8]
		  printf("SMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 8001928:	4619      	mov	r1, r3
				 smokeStatus.pinA, smokeStatus.pinB, smokeStatus.status);
 800192a:	7a7b      	ldrb	r3, [r7, #9]
		  printf("SMOKE_A: %d, SMOKE_B: %d, Status: %s \r\n",
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0xa4>)
 8001932:	f006 fca7 	bl	8008284 <iprintf>
          break;
 8001936:	e002      	b.n	800193e <HAL_GPIO_EXTI_IRQHandler+0x92>
    }
  }
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <HAL_GPIO_EXTI_IRQHandler+0x92>
        break;
 800193c:	bf00      	nop
}
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	bf00      	nop
 8001948:	58000800 	.word	0x58000800
 800194c:	0800c0a0 	.word	0x0800c0a0
 8001950:	0800c0c8 	.word	0x0800c0c8

08001954 <ReadSmokeStatus>:

SmokeStatus ReadSmokeStatus(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    SmokeStatus smokeStatus;
    smokeStatus.pinA = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 800195c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001960:	482e      	ldr	r0, [pc, #184]	; (8001a1c <ReadSmokeStatus+0xc8>)
 8001962:	f001 f8bb 	bl	8002adc <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	733b      	strb	r3, [r7, #12]
    smokeStatus.pinB = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 8001974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <ReadSmokeStatus+0xc8>)
 800197a:	f001 f8af 	bl	8002adc <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf14      	ite	ne
 8001984:	2301      	movne	r3, #1
 8001986:	2300      	moveq	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	737b      	strb	r3, [r7, #13]

    if (!smokeStatus.pinA && !smokeStatus.pinB) {
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	f083 0301 	eor.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <ReadSmokeStatus+0x5a>
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	f083 0301 	eor.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <ReadSmokeStatus+0x5a>
        smokeStatus.status = "Clean";
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <ReadSmokeStatus+0xcc>)
 80019a6:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	753b      	strb	r3, [r7, #20]
 80019ac:	e02a      	b.n	8001a04 <ReadSmokeStatus+0xb0>
    } else if (!smokeStatus.pinA && smokeStatus.pinB) {
 80019ae:	7b3b      	ldrb	r3, [r7, #12]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <ReadSmokeStatus+0x76>
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <ReadSmokeStatus+0x76>
        smokeStatus.status = "Light Pollution";
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <ReadSmokeStatus+0xd0>)
 80019c2:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	753b      	strb	r3, [r7, #20]
 80019c8:	e01c      	b.n	8001a04 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && !smokeStatus.pinB) {
 80019ca:	7b3b      	ldrb	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <ReadSmokeStatus+0x92>
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <ReadSmokeStatus+0x92>
        smokeStatus.status = "Moderate Pollution";
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <ReadSmokeStatus+0xd4>)
 80019de:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 3;
 80019e0:	2303      	movs	r3, #3
 80019e2:	753b      	strb	r3, [r7, #20]
 80019e4:	e00e      	b.n	8001a04 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && smokeStatus.pinB) {
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <ReadSmokeStatus+0xa8>
 80019ec:	7b7b      	ldrb	r3, [r7, #13]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <ReadSmokeStatus+0xa8>
        smokeStatus.status = "Severe Pollution";
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <ReadSmokeStatus+0xd8>)
 80019f4:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	753b      	strb	r3, [r7, #20]
 80019fa:	e003      	b.n	8001a04 <ReadSmokeStatus+0xb0>
    } else {
        smokeStatus.status = "Unknown"; // Fallback case, should not occur
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <ReadSmokeStatus+0xdc>)
 80019fe:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	753b      	strb	r3, [r7, #20]
    }

    return smokeStatus;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461c      	mov	r4, r3
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	0800c0f0 	.word	0x0800c0f0
 8001a24:	0800c0f8 	.word	0x0800c0f8
 8001a28:	0800c108 	.word	0x0800c108
 8001a2c:	0800c11c 	.word	0x0800c11c
 8001a30:	0800c130 	.word	0x0800c130

08001a34 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_UART_RxCpltCallback+0x34>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10c      	bne.n	8001a60 <HAL_UART_RxCpltCallback+0x2c>
	  {
		  Modbus_RxCallback(&ModbusResp);
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <HAL_UART_RxCpltCallback+0x38>)
 8001a48:	f7ff fb1a 	bl	8001080 <Modbus_RxCallback>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_UART_RxCpltCallback+0x38>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_UART_RxCpltCallback+0x3c>)
 8001a54:	4413      	add	r3, r2
 8001a56:	2201      	movs	r2, #1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <HAL_UART_RxCpltCallback+0x40>)
 8001a5c:	f003 fde4 	bl	8005628 <HAL_UART_Receive_IT>
	  }

}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	20000424 	.word	0x20000424
 8001a70:	20000426 	.word	0x20000426
 8001a74:	20000390 	.word	0x20000390

08001a78 <WDTReset>:

void WDTReset(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <WDTReset+0x28>)
 8001a84:	f001 f842 	bl	8002b0c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001a88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a8c:	f000 fcc4 	bl	8002418 <HAL_Delay>
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a96:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <WDTReset+0x28>)
 8001a98:	f001 f838 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <scanI2CDevices>:

void scanI2CDevices(void){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	e016      	b.n	8001ade <scanI2CDevices+0x3a>
	  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 5, 5000); // Adjust timeout as needed
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	b299      	uxth	r1, r3
 8001ab8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001abc:	2205      	movs	r2, #5
 8001abe:	480c      	ldr	r0, [pc, #48]	; (8001af0 <scanI2CDevices+0x4c>)
 8001ac0:	f001 fab6 	bl	8003030 <HAL_I2C_IsDeviceReady>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71bb      	strb	r3, [r7, #6]

	  if (status == HAL_OK) {
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <scanI2CDevices+0x34>
		printf(" ---- > Device found at address 0x%02X\n", addr);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <scanI2CDevices+0x50>)
 8001ad4:	f006 fbd6 	bl	8008284 <iprintf>
	for (uint8_t addr = 0; addr < 128; addr++) {
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	3301      	adds	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dae4      	bge.n	8001ab0 <scanI2CDevices+0xc>
	  }
	  else{
		// printf("No device found at address 0x%02X\n", addr);
	  }
	}
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002a8 	.word	0x200002a8
 8001af4:	0800c138 	.word	0x0800c138

08001af8 <printLineMarker>:

void printLineMarker(char marker) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 25; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e007      	b.n	8001b18 <printLineMarker+0x20>
        printf("%c ", marker);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <printLineMarker+0x34>)
 8001b0e:	f006 fbb9 	bl	8008284 <iprintf>
    for (int i = 0; i < 25; i++) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b18      	cmp	r3, #24
 8001b1c:	ddf4      	ble.n	8001b08 <printLineMarker+0x10>
    }
    printf("\r\n");
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <printLineMarker+0x38>)
 8001b20:	f006 fc36 	bl	8008390 <puts>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	0800c160 	.word	0x0800c160
 8001b30:	0800c164 	.word	0x0800c164

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>

08001b3e <LL_AHB2_GRP1_EnableClock>:
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b94:	68fb      	ldr	r3, [r7, #12]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b09c      	sub	sp, #112	; 0x70
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2250      	movs	r2, #80	; 0x50
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 fca3 	bl	8007580 <memset>
  if(hi2c->Instance==I2C1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_I2C_MspInit+0x88>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d126      	bne.n	8001c92 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c48:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 f963 	bl	8004f1e <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c5e:	f7ff ff69 	bl	8001b34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2002      	movs	r0, #2
 8001c64:	f7ff ff6b 	bl	8001b3e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6e:	2312      	movs	r3, #18
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c82:	4619      	mov	r1, r3
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <HAL_I2C_MspInit+0x8c>)
 8001c86:	f000 fdb9 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c8e:	f7ff ff6f 	bl	8001b70 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3770      	adds	r7, #112	; 0x70
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09c      	sub	sp, #112	; 0x70
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2250      	movs	r2, #80	; 0x50
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 fc5b 	bl	8007580 <memset>
  if(huart->Instance==LPUART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_UART_MspInit+0xf8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d12c      	bne.n	8001d2e <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 f91c 	bl	8004f1e <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cec:	f7ff ff22 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f7ff ff56 	bl	8001ba2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f7ff ff21 	bl	8001b3e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4822      	ldr	r0, [pc, #136]	; (8001da0 <HAL_UART_MspInit+0xfc>)
 8001d18:	f000 fd70 	bl	80027fc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2025      	movs	r0, #37	; 0x25
 8001d22:	f000 fc78 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d26:	2025      	movs	r0, #37	; 0x25
 8001d28:	f000 fc8f 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d2c:	e031      	b.n	8001d92 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_UART_MspInit+0x100>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d12c      	bne.n	8001d92 <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f8ea 	bl	8004f1e <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 8001d50:	f7ff fef0 	bl	8001b34 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d58:	f7ff ff3c 	bl	8001bd4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7ff feee 	bl	8001b3e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d72:	2307      	movs	r3, #7
 8001d74:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480a      	ldr	r0, [pc, #40]	; (8001da8 <HAL_UART_MspInit+0x104>)
 8001d7e:	f000 fd3d 	bl	80027fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2024      	movs	r0, #36	; 0x24
 8001d88:	f000 fc45 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8c:	2024      	movs	r0, #36	; 0x24
 8001d8e:	f000 fc5c 	bl	800264a <HAL_NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3770      	adds	r7, #112	; 0x70
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40008000 	.word	0x40008000
 8001da0:	48000800 	.word	0x48000800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	48000400 	.word	0x48000400

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 fae2 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <USART1_IRQHandler+0x10>)
 8001e06:	f003 fc5b 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000390 	.word	0x20000390

08001e14 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <LPUART1_IRQHandler+0x10>)
 8001e1a:	f003 fc51 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200002fc 	.word	0x200002fc

08001e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 8001e2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e30:	f7ff fd3c 	bl	80018ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 8001e34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e38:	f7ff fd38 	bl	80018ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e40:	f7ff fd34 	bl	80018ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e62:	f005 fb55 	bl	8007510 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e8a:	e7fe      	b.n	8001e8a <_exit+0x12>

08001e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9e:	f3af 8000 	nop.w
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
  }

  return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f913 	bl	800110c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
  }
  return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f005 faba 	bl	8007510 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20030000 	.word	0x20030000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	200004e4 	.word	0x200004e4
 8001fd0:	20000500 	.word	0x20000500

08001fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <SystemInit+0x98>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <SystemInit+0x98>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002000:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <SystemInit+0x9c>)
 800200e:	4013      	ands	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201e:	f023 0305 	bic.w	r3, r3, #5
 8002022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <SystemInit+0xa0>)
 8002040:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <SystemInit+0xa0>)
 8002048:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	faf6fefb 	.word	0xfaf6fefb
 8002074:	22041000 	.word	0x22041000

08002078 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002078:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207c:	3304      	adds	r3, #4

0800207e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002080:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002082:	d3f9      	bcc.n	8002078 <CopyDataInit>
  bx lr
 8002084:	4770      	bx	lr

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002086:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002088:	3004      	adds	r0, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800208a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>
  bx lr
 800208e:	4770      	bx	lr

08002090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002092:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002094:	f7ff ff9e 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <LoopForever+0x6>)
 800209a:	490c      	ldr	r1, [pc, #48]	; (80020cc <LoopForever+0xa>)
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <LoopForever+0xe>)
 800209e:	2300      	movs	r3, #0
 80020a0:	f7ff ffed 	bl	800207e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <LoopForever+0x12>)
 80020a6:	490c      	ldr	r1, [pc, #48]	; (80020d8 <LoopForever+0x16>)
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <LoopForever+0x1a>)
 80020aa:	2300      	movs	r3, #0
 80020ac:	f7ff ffe7 	bl	800207e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <LoopForever+0x1e>)
 80020b2:	490c      	ldr	r1, [pc, #48]	; (80020e4 <LoopForever+0x22>)
 80020b4:	2300      	movs	r3, #0
 80020b6:	f7ff ffe8 	bl	800208a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ba:	f005 fa2f 	bl	800751c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020be:	f7ff f837 	bl	8001130 <main>

080020c2 <LoopForever>:

LoopForever:
  b LoopForever
 80020c2:	e7fe      	b.n	80020c2 <LoopForever>
  ldr   r0, =_estack
 80020c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020c8:	20000008 	.word	0x20000008
 80020cc:	200001f0 	.word	0x200001f0
 80020d0:	0800c71c 	.word	0x0800c71c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020d4:	20030000 	.word	0x20030000
 80020d8:	20030000 	.word	0x20030000
 80020dc:	0800c904 	.word	0x0800c904
  INIT_BSS _sbss, _ebss
 80020e0:	200001f0 	.word	0x200001f0
 80020e4:	20000500 	.word	0x20000500

080020e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_IRQHandler>
	...

080020ec <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <SHT2x_Init+0x1c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200004e8 	.word	0x200004e8

0800210c <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8002112:	23e7      	movs	r3, #231	; 0xe7
 8002114:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <SHT2x_ReadUserReg+0x3c>)
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	1dba      	adds	r2, r7, #6
 800211c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2301      	movs	r3, #1
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	f000 fd99 	bl	8002c5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <SHT2x_ReadUserReg+0x3c>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	1dfa      	adds	r2, r7, #7
 8002130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2301      	movs	r3, #1
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	f000 fe83 	bl	8002e44 <HAL_I2C_Master_Receive>
	return val;
 800213e:	79fb      	ldrb	r3, [r7, #7]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200004e8 	.word	0x200004e8

0800214c <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af02      	add	r7, sp, #8
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <SHT2x_GetRaw+0x58>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	81bb      	strh	r3, [r7, #12]
 800215c:	2300      	movs	r3, #0
 800215e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <SHT2x_GetRaw+0x5c>)
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	1dfa      	adds	r2, r7, #7
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	f000 fd74 	bl	8002c5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <SHT2x_GetRaw+0x5c>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f107 020c 	add.w	r2, r7, #12
 800217c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2303      	movs	r3, #3
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	f000 fe5d 	bl	8002e44 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 800218a:	7b3b      	ldrb	r3, [r7, #12]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b21b      	sxth	r3, r3
 8002198:	b29b      	uxth	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	0800c168 	.word	0x0800c168
 80021a8:	200004e8 	.word	0x200004e8
 80021ac:	00000000 	.word	0x00000000

080021b0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SHT2x_GetTemperature+0x14>
 80021c0:	23e3      	movs	r3, #227	; 0xe3
 80021c2:	e000      	b.n	80021c6 <SHT2x_GetTemperature+0x16>
 80021c4:	23f3      	movs	r3, #243	; 0xf3
 80021c6:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ffbe 	bl	800214c <SHT2x_GetRaw>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f97e 	bl	80004d4 <__aeabi_i2d>
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <SHT2x_GetTemperature+0x88>)
 80021de:	f7fe fb0d 	bl	80007fc <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	a30f      	add	r3, pc, #60	; (adr r3, 8002228 <SHT2x_GetTemperature+0x78>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe f9da 	bl	80005a8 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	a30c      	add	r3, pc, #48	; (adr r3, 8002230 <SHT2x_GetTemperature+0x80>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe f819 	bl	8000238 <__aeabi_dsub>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fcc3 	bl	8000b98 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	ee07 3a90 	vmov	s15, r3
}
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	3d70a3d7 	.word	0x3d70a3d7
 800222c:	4065f70a 	.word	0x4065f70a
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	40476ccc 	.word	0x40476ccc
 8002238:	40f00000 	.word	0x40f00000

0800223c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SHT2x_GetRelativeHumidity+0x14>
 800224c:	23e5      	movs	r3, #229	; 0xe5
 800224e:	e000      	b.n	8002252 <SHT2x_GetRelativeHumidity+0x16>
 8002250:	23f5      	movs	r3, #245	; 0xf5
 8002252:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff78 	bl	800214c <SHT2x_GetRaw>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f938 	bl	80004d4 <__aeabi_i2d>
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <SHT2x_GetRelativeHumidity+0x74>)
 800226a:	f7fe fac7 	bl	80007fc <__aeabi_ddiv>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <SHT2x_GetRelativeHumidity+0x78>)
 800227c:	f7fe f994 	bl	80005a8 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <SHT2x_GetRelativeHumidity+0x7c>)
 800228e:	f7fd ffd3 	bl	8000238 <__aeabi_dsub>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fc7d 	bl	8000b98 <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	ee07 3a90 	vmov	s15, r3
}
 80022a4:	eeb0 0a67 	vmov.f32	s0, s15
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40f00000 	.word	0x40f00000
 80022b4:	405f4000 	.word	0x405f4000
 80022b8:	40180000 	.word	0x40180000

080022bc <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80022c6:	f7ff ff21 	bl	800210c <SHT2x_ReadUserReg>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80022d6:	b25a      	sxtb	r2, r3
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	4313      	orrs	r3, r2
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 80022e2:	23e6      	movs	r3, #230	; 0xe6
 80022e4:	733b      	strb	r3, [r7, #12]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <SHT2x_SetResolution+0x4c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f107 020c 	add.w	r2, r7, #12
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2302      	movs	r3, #2
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	f000 fcae 	bl	8002c5c <HAL_I2C_Master_Transmit>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200004e8 	.word	0x200004e8

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_Init+0x3c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <HAL_Init+0x3c>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002322:	2003      	movs	r0, #3
 8002324:	f000 f96c 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002328:	200f      	movs	r0, #15
 800232a:	f000 f80f 	bl	800234c <HAL_InitTick>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	71fb      	strb	r3, [r7, #7]
 8002338:	e001      	b.n	800233e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800233a:	f7ff fc64 	bl	8001c06 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800233e:	79fb      	ldrb	r3, [r7, #7]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	58004000 	.word	0x58004000

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_InitTick+0x6c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d024      	beq.n	80023aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002360:	f002 fb4c 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_InitTick+0x6c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002370:	fbb3 f3f1 	udiv	r3, r3, r1
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f974 	bl	8002666 <HAL_SYSTICK_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d809      	bhi.n	800239e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238a:	2200      	movs	r2, #0
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	f04f 30ff 	mov.w	r0, #4294967295
 8002392:	f000 f940 	bl	8002616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_InitTick+0x70>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e007      	b.n	80023ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e004      	b.n	80023ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000018 	.word	0x20000018
 80023bc:	20000014 	.word	0x20000014

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x20>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_IncTick+0x24>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_IncTick+0x24>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000018 	.word	0x20000018
 80023e4:	200004ec 	.word	0x200004ec

080023e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_GetTick+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200004ec 	.word	0x200004ec

08002400 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTickPrio+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000014 	.word	0x20000014

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffe2 	bl	80023e8 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffd2 	bl	80023e8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000018 	.word	0x20000018

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff40 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff90 	bl	8002554 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5f 	bl	8002500 <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff33 	bl	80024c4 <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffa4 	bl	80025bc <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e04f      	b.n	8002730 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2204      	movs	r2, #4
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e040      	b.n	8002730 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 020e 	bic.w	r2, r2, #14
 80026bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 021c 	and.w	r2, r3, #28
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800271c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d005      	beq.n	8002760 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e047      	b.n	80027f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020e 	bic.w	r2, r2, #14
 800276e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f003 021c 	and.w	r2, r3, #28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
    }
  }
  return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	e14c      	b.n	8002aa6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 813e 	beq.w	8002aa0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d005      	beq.n	800283c <HAL_GPIO_Init+0x40>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002872:	2201      	movs	r2, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d017      	beq.n	80028da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d123      	bne.n	800292e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	6939      	ldr	r1, [r7, #16]
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8098 	beq.w	8002aa0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_GPIO_Init+0x2c8>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299a:	d019      	beq.n	80029d0 <HAL_GPIO_Init+0x1d4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a4a      	ldr	r2, [pc, #296]	; (8002ac8 <HAL_GPIO_Init+0x2cc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_GPIO_Init+0x1d0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a49      	ldr	r2, [pc, #292]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <HAL_GPIO_Init+0x1cc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a48      	ldr	r2, [pc, #288]	; (8002ad0 <HAL_GPIO_Init+0x2d4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x1c8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a47      	ldr	r2, [pc, #284]	; (8002ad4 <HAL_GPIO_Init+0x2d8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_Init+0x1c4>
 80029bc:	2304      	movs	r3, #4
 80029be:	e008      	b.n	80029d2 <HAL_GPIO_Init+0x1d6>
 80029c0:	2307      	movs	r3, #7
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_Init+0x1d6>
 80029c4:	2303      	movs	r3, #3
 80029c6:	e004      	b.n	80029d2 <HAL_GPIO_Init+0x1d6>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x1d6>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_GPIO_Init+0x1d6>
 80029d0:	2300      	movs	r3, #0
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	4093      	lsls	r3, r2
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e2:	4938      	ldr	r1, [pc, #224]	; (8002ac4 <HAL_GPIO_Init+0x2c8>)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a14:	4a30      	ldr	r2, [pc, #192]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a3e:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <HAL_GPIO_Init+0x2dc>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f aeab 	bne.w	800280c <HAL_GPIO_Init+0x10>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	48000400 	.word	0x48000400
 8002acc:	48000800 	.word	0x48000800
 8002ad0:	48000c00 	.word	0x48000c00
 8002ad4:	48001000 	.word	0x48001000
 8002ad8:	58000800 	.word	0x58000800

08002adc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e001      	b.n	8002afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e081      	b.n	8002c52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff f856 	bl	8001c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d104      	bne.n	8002bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 80da 	bne.w	8002e32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x30>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0d3      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c94:	f7ff fba8 	bl	80023e8 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2319      	movs	r3, #25
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 faed 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0be      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2221      	movs	r2, #33	; 0x21
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2bff      	cmp	r3, #255	; 0xff
 8002ce6:	d90e      	bls.n	8002d06 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	4b51      	ldr	r3, [pc, #324]	; (8002e3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fcfc 	bl	80036fc <I2C_TransferConfig>
 8002d04:	e06c      	b.n	8002de0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fceb 	bl	80036fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d26:	e05b      	b.n	8002de0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6a39      	ldr	r1, [r7, #32]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 faf9 	bl	8003324 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e07b      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d034      	beq.n	8002de0 <HAL_I2C_Master_Transmit+0x184>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d130      	bne.n	8002de0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fa7c 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e04d      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2bff      	cmp	r3, #255	; 0xff
 8002da0:	d90e      	bls.n	8002dc0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	8979      	ldrh	r1, [r7, #10]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fc9f 	bl	80036fc <I2C_TransferConfig>
 8002dbe:	e00f      	b.n	8002de0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fc8e 	bl	80036fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d19e      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fadf 	bl	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e01a      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2220      	movs	r2, #32
 8002e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e12:	400b      	ands	r3, r1
 8002e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	80002000 	.word	0x80002000
 8002e40:	fe00e800 	.word	0xfe00e800

08002e44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	817b      	strh	r3, [r7, #10]
 8002e54:	4613      	mov	r3, r2
 8002e56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	f040 80db 	bne.w	800301c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2C_Master_Receive+0x30>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0d4      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e7c:	f7ff fab4 	bl	80023e8 <HAL_GetTick>
 8002e80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2319      	movs	r3, #25
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f9f9 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0bf      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2222      	movs	r2, #34	; 0x22
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	893a      	ldrh	r2, [r7, #8]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2bff      	cmp	r3, #255	; 0xff
 8002ece:	d90e      	bls.n	8002eee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	4b52      	ldr	r3, [pc, #328]	; (8003028 <HAL_I2C_Master_Receive+0x1e4>)
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fc08 	bl	80036fc <I2C_TransferConfig>
 8002eec:	e06d      	b.n	8002fca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	4b49      	ldr	r3, [pc, #292]	; (8003028 <HAL_I2C_Master_Receive+0x1e4>)
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fbf7 	bl	80036fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f0e:	e05c      	b.n	8002fca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	6a39      	ldr	r1, [r7, #32]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fa8f 	bl	8003438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e07c      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d034      	beq.n	8002fca <HAL_I2C_Master_Receive+0x186>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d130      	bne.n	8002fca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f987 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e04d      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d90e      	bls.n	8002faa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	8979      	ldrh	r1, [r7, #10]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fbaa 	bl	80036fc <I2C_TransferConfig>
 8002fa8:	e00f      	b.n	8002fca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fb99 	bl	80036fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d19d      	bne.n	8002f10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	6a39      	ldr	r1, [r7, #32]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9ea 	bl	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e01a      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2220      	movs	r2, #32
 8002fee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_I2C_Master_Receive+0x1e8>)
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	80002400 	.word	0x80002400
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	f040 80f1 	bne.w	8003234 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	d101      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e0e7      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_IsDeviceReady+0x44>
 8003070:	2302      	movs	r3, #2
 8003072:	e0e0      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_IsDeviceReady+0x72>
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030a0:	e004      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x7c>
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030b2:	f7ff f999 	bl	80023e8 <HAL_GetTick>
 80030b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030e4:	e034      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d01a      	beq.n	8003124 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7ff f97b 	bl	80023e8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <HAL_I2C_IsDeviceReady+0xd4>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e088      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_I2C_IsDeviceReady+0x12c>
 8003156:	7fbb      	ldrb	r3, [r7, #30]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0c4      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d01a      	beq.n	80031a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2120      	movs	r1, #32
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f886 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e058      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e04a      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2120      	movs	r1, #32
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f86b 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03d      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d118      	bne.n	8003204 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2120      	movs	r1, #32
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f84a 	bl	8003286 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01c      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	f63f af3b 	bhi.w	800308a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d103      	bne.n	800325c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d007      	beq.n	800327a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	619a      	str	r2, [r3, #24]
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003296:	e031      	b.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d02d      	beq.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7ff f8a2 	bl	80023e8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d122      	bne.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d113      	bne.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e00f      	b.n	800331c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	429a      	cmp	r2, r3
 8003318:	d0be      	beq.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003330:	e033      	b.n	800339a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f900 	bl	800353c <I2C_IsErrorOccurred>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e031      	b.n	80033aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d025      	beq.n	800339a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7ff f84b 	bl	80023e8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11a      	bne.n	800339a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d013      	beq.n	800339a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d1c4      	bne.n	8003332 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033be:	e02f      	b.n	8003420 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f8b9 	bl	800353c <I2C_IsErrorOccurred>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e02d      	b.n	8003430 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff f808 	bl	80023e8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11a      	bne.n	8003420 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d013      	beq.n	8003420 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e007      	b.n	8003430 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b20      	cmp	r3, #32
 800342c:	d1c8      	bne.n	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	e06b      	b.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f876 	bl	800353c <I2C_IsErrorOccurred>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e069      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d138      	bne.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d105      	bne.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e055      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b10      	cmp	r3, #16
 800348e:	d107      	bne.n	80034a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2204      	movs	r2, #4
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
 800349e:	e002      	b.n	80034a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2220      	movs	r2, #32
 80034ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80034ba:	400b      	ands	r3, r1
 80034bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e029      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe ff85 	bl	80023e8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d00f      	beq.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d18c      	bne.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	fe00e800 	.word	0xfe00e800

0800353c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d068      	beq.n	800363a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003570:	e049      	b.n	8003606 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d045      	beq.n	8003606 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe ff35 	bl	80023e8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_IsErrorOccurred+0x54>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d13a      	bne.n	8003606 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b2:	d121      	bne.n	80035f8 <I2C_IsErrorOccurred+0xbc>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ba:	d01d      	beq.n	80035f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d01a      	beq.n	80035f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035d2:	f7fe ff09 	bl	80023e8 <HAL_GetTick>
 80035d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d8:	e00e      	b.n	80035f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035da:	f7fe ff05 	bl	80023e8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b19      	cmp	r3, #25
 80035e6:	d907      	bls.n	80035f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035f6:	e006      	b.n	8003606 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d1e9      	bne.n	80035da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d003      	beq.n	800361c <I2C_IsErrorOccurred+0xe0>
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0aa      	beq.n	8003572 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800361c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fdc4 	bl	800323e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <I2C_IsErrorOccurred+0x1bc>)
 80036c2:	400b      	ands	r3, r1
 80036c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	fe00e800 	.word	0xfe00e800

080036fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	4613      	mov	r3, r2
 800370c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003714:	7a7b      	ldrb	r3, [r7, #9]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800371c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4313      	orrs	r3, r2
 8003726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800372a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	0d5b      	lsrs	r3, r3, #21
 8003736:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <I2C_TransferConfig+0x60>)
 800373c:	430b      	orrs	r3, r1
 800373e:	43db      	mvns	r3, r3
 8003740:	ea02 0103 	and.w	r1, r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	03ff63ff 	.word	0x03ff63ff

08003760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	d138      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003780:	2302      	movs	r3, #2
 8003782:	e032      	b.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	d139      	bne.n	8003880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003816:	2302      	movs	r3, #2
 8003818:	e033      	b.n	8003882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	; 0x24
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	58000400 	.word	0x58000400

080038b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	58000400 	.word	0x58000400

080038cc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d101      	bne.n	80038e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800393e:	d101      	bne.n	8003944 <LL_RCC_HSE_IsReady+0x18>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <LL_RCC_HSE_IsReady+0x1a>
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d101      	bne.n	80039a4 <LL_RCC_HSI_IsReady+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_RCC_HSI_IsReady+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d101      	bne.n	8003a36 <LL_RCC_HSI48_IsReady+0x18>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <LL_RCC_HSI48_IsReady+0x1a>
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d101      	bne.n	8003ae2 <LL_RCC_LSE_IsReady+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_RCC_LSE_IsReady+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d101      	bne.n	8003b4a <LL_RCC_LSI1_IsReady+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_RCC_LSI1_IsReady+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b66:	f043 0304 	orr.w	r3, r3, #4
 8003b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d101      	bne.n	8003bb2 <LL_RCC_LSI2_IsReady+0x18>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <LL_RCC_LSI2_IsReady+0x1a>
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d101      	bne.n	8003c3e <LL_RCC_MSI_IsReady+0x16>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_RCC_MSI_IsReady+0x18>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2bb0      	cmp	r3, #176	; 0xb0
 8003c88:	d901      	bls.n	8003c8e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003c8a:	23b0      	movs	r3, #176	; 0xb0
 8003c8c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 0203 	bic.w	r2, r3, #3
 8003cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	6013      	str	r3, [r2, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6c:	6013      	str	r3, [r2, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e8a:	d101      	bne.n	8003e90 <LL_RCC_PLL_IsReady+0x18>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <LL_RCC_PLL_IsReady+0x1a>
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d101      	bne.n	8003f16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f36:	d101      	bne.n	8003f3c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d101      	bne.n	8003f62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f80:	d101      	bne.n	8003f86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fa4:	d101      	bne.n	8003faa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b08d      	sub	sp, #52	; 0x34
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e363      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 808d 	beq.w	80040f2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd8:	f7ff fe89 	bl	8003cee <LL_RCC_GetSysClkSource>
 8003fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fde:	f7ff ff82 	bl	8003ee6 <LL_RCC_PLL_GetMainSource>
 8003fe2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x3e>
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d147      	bne.n	8004080 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d144      	bne.n	8004080 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e347      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004006:	f7ff fe34 	bl	8003c72 <LL_RCC_MSI_GetRange>
 800400a:	4603      	mov	r3, r0
 800400c:	429c      	cmp	r4, r3
 800400e:	d914      	bls.n	800403a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fd31 	bl	8004a7c <RCC_SetFlashLatencyFromMSIRange>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e336      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fe0e 	bl	8003c4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fe32 	bl	8003c9c <LL_RCC_MSI_SetCalibTrimming>
 8004038:	e013      	b.n	8004062 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fe03 	bl	8003c4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe27 	bl	8003c9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fd12 	bl	8004a7c <RCC_SetFlashLatencyFromMSIRange>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e317      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004062:	f000 fccb 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004066:	4603      	mov	r3, r0
 8004068:	4aa4      	ldr	r2, [pc, #656]	; (80042fc <HAL_RCC_OscConfig+0x344>)
 800406a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800406c:	4ba4      	ldr	r3, [pc, #656]	; (8004300 <HAL_RCC_OscConfig+0x348>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f96b 	bl	800234c <HAL_InitTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d039      	beq.n	80040f0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e308      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01e      	beq.n	80040c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004088:	f7ff fdb0 	bl	8003bec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800408c:	f7fe f9ac 	bl	80023e8 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004094:	f7fe f9a8 	bl	80023e8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e2f5      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80040a6:	f7ff fdbf 	bl	8003c28 <LL_RCC_MSI_IsReady>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f1      	beq.n	8004094 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fdc8 	bl	8003c4a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fdec 	bl	8003c9c <LL_RCC_MSI_SetCalibTrimming>
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040c6:	f7ff fda0 	bl	8003c0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ca:	f7fe f98d 	bl	80023e8 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d2:	f7fe f989 	bl	80023e8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e2d6      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80040e4:	f7ff fda0 	bl	8003c28 <LL_RCC_MSI_IsReady>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f1      	bne.n	80040d2 <HAL_RCC_OscConfig+0x11a>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040f0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d047      	beq.n	800418e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	f7ff fdf6 	bl	8003cee <LL_RCC_GetSysClkSource>
 8004102:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004104:	f7ff feef 	bl	8003ee6 <LL_RCC_PLL_GetMainSource>
 8004108:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x164>
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d108      	bne.n	8004128 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d134      	bne.n	800418e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e2b4      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0x180>
 8004132:	f7ff fbdd 	bl	80038f0 <LL_RCC_HSE_Enable>
 8004136:	e001      	b.n	800413c <HAL_RCC_OscConfig+0x184>
 8004138:	f7ff fbe9 	bl	800390e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe f950 	bl	80023e8 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe f94c 	bl	80023e8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e299      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800415e:	f7ff fbe5 	bl	800392c <LL_RCC_HSE_IsReady>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f1      	beq.n	800414c <HAL_RCC_OscConfig+0x194>
 8004168:	e011      	b.n	800418e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe f93d 	bl	80023e8 <HAL_GetTick>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004172:	f7fe f939 	bl	80023e8 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e286      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004184:	f7ff fbd2 	bl	800392c <LL_RCC_HSE_IsReady>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f1      	bne.n	8004172 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04c      	beq.n	8004234 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419a:	f7ff fda8 	bl	8003cee <LL_RCC_GetSysClkSource>
 800419e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	f7ff fea1 	bl	8003ee6 <LL_RCC_PLL_GetMainSource>
 80041a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_OscConfig+0x200>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d10e      	bne.n	80041d0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e266      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fbf1 	bl	80039b0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041ce:	e031      	b.n	8004234 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d019      	beq.n	800420c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	f7ff fbba 	bl	8003950 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fe f904 	bl	80023e8 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fe f900 	bl	80023e8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e24d      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80041f6:	f7ff fbc9 	bl	800398c <LL_RCC_HSI_IsReady>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f1      	beq.n	80041e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fbd3 	bl	80039b0 <LL_RCC_HSI_SetCalibTrimming>
 800420a:	e013      	b.n	8004234 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420c:	f7ff fbaf 	bl	800396e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe f8ea 	bl	80023e8 <HAL_GetTick>
 8004214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fe f8e6 	bl	80023e8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e233      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800422a:	f7ff fbaf 	bl	800398c <LL_RCC_HSI_IsReady>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f1      	bne.n	8004218 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a3 	beq.w	8004394 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d076      	beq.n	8004344 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d046      	beq.n	80042f0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004262:	f7ff fc66 	bl	8003b32 <LL_RCC_LSI1_IsReady>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d113      	bne.n	8004294 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800426c:	f7ff fc3f 	bl	8003aee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004270:	f7fe f8ba 	bl	80023e8 <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004278:	f7fe f8b6 	bl	80023e8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e203      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800428a:	f7ff fc52 	bl	8003b32 <LL_RCC_LSI1_IsReady>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f1      	beq.n	8004278 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004294:	f7ff fc5f 	bl	8003b56 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fe f8a6 	bl	80023e8 <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042a0:	f7fe f8a2 	bl	80023e8 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1ef      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042b2:	f7ff fc72 	bl	8003b9a <LL_RCC_LSI2_IsReady>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f1      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fc7c 	bl	8003bbe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80042c6:	f7ff fc23 	bl	8003b10 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ca:	f7fe f88d 	bl	80023e8 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042d2:	f7fe f889 	bl	80023e8 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1d6      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042e4:	f7ff fc25 	bl	8003b32 <LL_RCC_LSI1_IsReady>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f1      	bne.n	80042d2 <HAL_RCC_OscConfig+0x31a>
 80042ee:	e051      	b.n	8004394 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80042f0:	f7ff fbfd 	bl	8003aee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe f878 	bl	80023e8 <HAL_GetTick>
 80042f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042fa:	e00c      	b.n	8004316 <HAL_RCC_OscConfig+0x35e>
 80042fc:	20000010 	.word	0x20000010
 8004300:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004304:	f7fe f870 	bl	80023e8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1bd      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004316:	f7ff fc0c 	bl	8003b32 <LL_RCC_LSI1_IsReady>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f1      	beq.n	8004304 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004320:	f7ff fc2a 	bl	8003b78 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004326:	f7fe f85f 	bl	80023e8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1ac      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004338:	f7ff fc2f 	bl	8003b9a <LL_RCC_LSI2_IsReady>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f1      	bne.n	8004326 <HAL_RCC_OscConfig+0x36e>
 8004342:	e027      	b.n	8004394 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004344:	f7ff fc18 	bl	8003b78 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fe f84e 	bl	80023e8 <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004350:	f7fe f84a 	bl	80023e8 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e197      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004362:	f7ff fc1a 	bl	8003b9a <LL_RCC_LSI2_IsReady>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f1      	bne.n	8004350 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800436c:	f7ff fbd0 	bl	8003b10 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fe f83a 	bl	80023e8 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004378:	f7fe f836 	bl	80023e8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e183      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800438a:	f7ff fbd2 	bl	8003b32 <LL_RCC_LSI1_IsReady>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f1      	bne.n	8004378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05b      	beq.n	8004458 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a0:	4ba7      	ldr	r3, [pc, #668]	; (8004640 <HAL_RCC_OscConfig+0x688>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d114      	bne.n	80043d6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80043ac:	f7ff fa70 	bl	8003890 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b0:	f7fe f81a 	bl	80023e8 <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fe f816 	bl	80023e8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e163      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <HAL_RCC_OscConfig+0x688>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d102      	bne.n	80043e4 <HAL_RCC_OscConfig+0x42c>
 80043de:	f7ff fb30 	bl	8003a42 <LL_RCC_LSE_Enable>
 80043e2:	e00c      	b.n	80043fe <HAL_RCC_OscConfig+0x446>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d104      	bne.n	80043f6 <HAL_RCC_OscConfig+0x43e>
 80043ec:	f7ff fb4b 	bl	8003a86 <LL_RCC_LSE_EnableBypass>
 80043f0:	f7ff fb27 	bl	8003a42 <LL_RCC_LSE_Enable>
 80043f4:	e003      	b.n	80043fe <HAL_RCC_OscConfig+0x446>
 80043f6:	f7ff fb35 	bl	8003a64 <LL_RCC_LSE_Disable>
 80043fa:	f7ff fb55 	bl	8003aa8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d014      	beq.n	8004430 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fd ffef 	bl	80023e8 <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd ffeb 	bl	80023e8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e136      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004424:	f7ff fb51 	bl	8003aca <LL_RCC_LSE_IsReady>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0ef      	beq.n	800440e <HAL_RCC_OscConfig+0x456>
 800442e:	e013      	b.n	8004458 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd ffda 	bl	80023e8 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004436:	e00a      	b.n	800444e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fd ffd6 	bl	80023e8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e121      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800444e:	f7ff fb3c 	bl	8003aca <LL_RCC_LSE_IsReady>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ef      	bne.n	8004438 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02c      	beq.n	80044be <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d014      	beq.n	8004496 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800446c:	f7ff fab5 	bl	80039da <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd ffba 	bl	80023e8 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004478:	f7fd ffb6 	bl	80023e8 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e103      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800448a:	f7ff fac8 	bl	8003a1e <LL_RCC_HSI48_IsReady>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f1      	beq.n	8004478 <HAL_RCC_OscConfig+0x4c0>
 8004494:	e013      	b.n	80044be <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004496:	f7ff fab1 	bl	80039fc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd ffa5 	bl	80023e8 <HAL_GetTick>
 800449e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a2:	f7fd ffa1 	bl	80023e8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0ee      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044b4:	f7ff fab3 	bl	8003a1e <LL_RCC_HSI48_IsReady>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f1      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80e4 	beq.w	8004690 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c8:	f7ff fc11 	bl	8003cee <LL_RCC_GetSysClkSource>
 80044cc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	2b02      	cmp	r3, #2
 80044dc:	f040 80b4 	bne.w	8004648 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0203 	and.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d123      	bne.n	8004536 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d11c      	bne.n	8004536 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d114      	bne.n	8004536 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d10d      	bne.n	8004536 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d05d      	beq.n	80045f2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d058      	beq.n	80045ee <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0a1      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800454e:	f7ff fc84 	bl	8003e5a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004552:	f7fd ff49 	bl	80023e8 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455a:	f7fd ff45 	bl	80023e8 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e092      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ef      	bne.n	800455a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_RCC_OscConfig+0x68c>)
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004592:	0212      	lsls	r2, r2, #8
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800459a:	4311      	orrs	r1, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045a6:	430a      	orrs	r2, r1
 80045a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045b0:	f7ff fc44 	bl	8003e3c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c4:	f7fd ff10 	bl	80023e8 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd ff0c 	bl	80023e8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e059      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ec:	e050      	b.n	8004690 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e04f      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d147      	bne.n	8004690 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004600:	f7ff fc1c 	bl	8003e3c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004614:	f7fd fee8 	bl	80023e8 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fee4 	bl	80023e8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e031      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ef      	beq.n	800461c <HAL_RCC_OscConfig+0x664>
 800463c:	e028      	b.n	8004690 <HAL_RCC_OscConfig+0x6d8>
 800463e:	bf00      	nop
 8004640:	58000400 	.word	0x58000400
 8004644:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d01e      	beq.n	800468c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	f7ff fc04 	bl	8003e5a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd fec9 	bl	80023e8 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd fec5 	bl	80023e8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e012      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ef      	bne.n	800465a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_OscConfig+0x6e4>)
 8004686:	4013      	ands	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
 800468a:	e001      	b.n	8004690 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3734      	adds	r7, #52	; 0x34
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}
 800469a:	bf00      	nop
 800469c:	eefefffc 	.word	0xeefefffc

080046a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e12d      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b98      	ldr	r3, [pc, #608]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d91b      	bls.n	80046fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b95      	ldr	r3, [pc, #596]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0207 	bic.w	r2, r3, #7
 80046ca:	4993      	ldr	r1, [pc, #588]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d2:	f7fd fe89 	bl	80023e8 <HAL_GetTick>
 80046d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046da:	f7fd fe85 	bl	80023e8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e111      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	4b8a      	ldr	r3, [pc, #552]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d1ef      	bne.n	80046da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fafb 	bl	8003d06 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004710:	f7fd fe6a 	bl	80023e8 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004718:	f7fd fe66 	bl	80023e8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e0f2      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800472a:	f7ff fbe8 	bl	8003efe <LL_RCC_IsActiveFlag_HPRE>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f1      	beq.n	8004718 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d016      	beq.n	800476e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff faf2 	bl	8003d2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800474a:	f7fd fe4d 	bl	80023e8 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004752:	f7fd fe49 	bl	80023e8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0d5      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004764:	f7ff fbdd 	bl	8003f22 <LL_RCC_IsActiveFlag_C2HPRE>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f1      	beq.n	8004752 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff faeb 	bl	8003d5a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004784:	f7fd fe30 	bl	80023e8 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800478c:	f7fd fe2c 	bl	80023e8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0b8      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800479e:	f7ff fbd3 	bl	8003f48 <LL_RCC_IsActiveFlag_SHDHPRE>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f1      	beq.n	800478c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fae5 	bl	8003d88 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047be:	f7fd fe13 	bl	80023e8 <HAL_GetTick>
 80047c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047c6:	f7fd fe0f 	bl	80023e8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e09b      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80047d8:	f7ff fbc9 	bl	8003f6e <LL_RCC_IsActiveFlag_PPRE1>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f1      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d017      	beq.n	800481e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fadb 	bl	8003db0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047fa:	f7fd fdf5 	bl	80023e8 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004802:	f7fd fdf1 	bl	80023e8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e07d      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004814:	f7ff fbbd 	bl	8003f92 <LL_RCC_IsActiveFlag_PPRE2>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f1      	beq.n	8004802 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d043      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d106      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004832:	f7ff f87b 	bl	800392c <LL_RCC_HSE_IsReady>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11e      	bne.n	800487a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e067      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d106      	bne.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004848:	f7ff fb16 	bl	8003e78 <LL_RCC_PLL_IsReady>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e05c      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800485e:	f7ff f9e3 	bl	8003c28 <LL_RCC_MSI_IsReady>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d108      	bne.n	800487a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e051      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800486c:	f7ff f88e 	bl	800398c <LL_RCC_HSI_IsReady>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e04a      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fa21 	bl	8003cc6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fd fdb0 	bl	80023e8 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fd fdac 	bl	80023e8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e036      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	f7ff fa24 	bl	8003cee <LL_RCC_GetSysClkSource>
 80048a6:	4602      	mov	r2, r0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d1ec      	bne.n	800488c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d21b      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 0207 	bic.w	r2, r3, #7
 80048c8:	4913      	ldr	r1, [pc, #76]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fd fd8a 	bl	80023e8 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048d8:	f7fd fd86 	bl	80023e8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e012      	b.n	8004910 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_ClockConfig+0x278>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1ef      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048f8:	f000 f880 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_ClockConfig+0x27c>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004902:	f7fd fd7d 	bl	8002400 <HAL_GetTickPrio>
 8004906:	4603      	mov	r3, r0
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd fd1f 	bl	800234c <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58004000 	.word	0x58004000
 800491c:	20000010 	.word	0x20000010

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	f7ff f9e2 	bl	8003cee <LL_RCC_GetSysClkSource>
 800492a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004932:	f7ff f99e 	bl	8003c72 <LL_RCC_MSI_GetRange>
 8004936:	4603      	mov	r3, r0
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e04b      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d102      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494e:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e045      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d10a      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800495a:	f7fe ffb7 	bl	80038cc <LL_RCC_HSE_IsEnabledDiv2>
 800495e:	4603      	mov	r3, r0
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e03a      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e037      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004970:	f7ff fab9 	bl	8003ee6 <LL_RCC_PLL_GetMainSource>
 8004974:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d003      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x64>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d003      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0x6a>
 8004982:	e00d      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004986:	60bb      	str	r3, [r7, #8]
        break;
 8004988:	e015      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800498a:	f7fe ff9f 	bl	80038cc <LL_RCC_HSE_IsEnabledDiv2>
 800498e:	4603      	mov	r3, r0
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004996:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004998:	e00d      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800499c:	60bb      	str	r3, [r7, #8]
        break;
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80049a0:	f7ff f967 	bl	8003c72 <LL_RCC_MSI_GetRange>
 80049a4:	4603      	mov	r3, r0
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	60bb      	str	r3, [r7, #8]
        break;
 80049b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80049b6:	f7ff fa71 	bl	8003e9c <LL_RCC_PLL_GetN>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	fb03 f402 	mul.w	r4, r3, r2
 80049c2:	f7ff fa84 	bl	8003ece <LL_RCC_PLL_GetDivider>
 80049c6:	4603      	mov	r3, r0
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	3301      	adds	r3, #1
 80049cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80049d0:	f7ff fa71 	bl	8003eb6 <LL_RCC_PLL_GetR>
 80049d4:	4603      	mov	r3, r0
 80049d6:	0f5b      	lsrs	r3, r3, #29
 80049d8:	3301      	adds	r3, #1
 80049da:	fbb4 f3f3 	udiv	r3, r4, r3
 80049de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80049e0:	68fb      	ldr	r3, [r7, #12]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	0800c1f8 	.word	0x0800c1f8
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	003d0900 	.word	0x003d0900
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b598      	push	{r3, r4, r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a00:	f7ff ff8e 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8004a04:	4604      	mov	r4, r0
 8004a06:	f7ff f9e7 	bl	8003dd8 <LL_RCC_GetAHBPrescaler>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x24>)
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd98      	pop	{r3, r4, r7, pc}
 8004a20:	0800c198 	.word	0x0800c198

08004a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a24:	b598      	push	{r3, r4, r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a28:	f7ff ffe8 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	f7ff f9ed 	bl	8003e0c <LL_RCC_GetAPB1Prescaler>
 8004a32:	4603      	mov	r3, r0
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd98      	pop	{r3, r4, r7, pc}
 8004a4c:	0800c1d8 	.word	0x0800c1d8

08004a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a50:	b598      	push	{r3, r4, r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004a54:	f7ff ffd2 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	f7ff f9e3 	bl	8003e24 <LL_RCC_GetAPB2Prescaler>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	0adb      	lsrs	r3, r3, #11
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd98      	pop	{r3, r4, r7, pc}
 8004a78:	0800c1d8 	.word	0x0800c1d8

08004a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2bb0      	cmp	r3, #176	; 0xb0
 8004a88:	d903      	bls.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e007      	b.n	8004aa2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004aa2:	f7ff f9a5 	bl	8003df0 <LL_RCC_GetAHB4Prescaler>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0c9c      	lsrs	r4, r3, #18
 8004ac6:	f7fe fef3 	bl	80038b0 <HAL_PWREx_GetVoltageRange>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4619      	mov	r1, r3
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 f80c 	bl	8004aec <RCC_SetFlashLatency>
 8004ad4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	0800c1f8 	.word	0x0800c1f8
 8004ae4:	0800c198 	.word	0x0800c198
 8004ae8:	431bde83 	.word	0x431bde83

08004aec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b093      	sub	sp, #76	; 0x4c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <RCC_SetFlashLatency+0xe8>)
 8004af8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b02:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <RCC_SetFlashLatency+0xec>)
 8004b04:	f107 031c 	add.w	r3, r7, #28
 8004b08:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <RCC_SetFlashLatency+0xf0>)
 8004b10:	f107 040c 	add.w	r4, r7, #12
 8004b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d11a      	bne.n	8004b5c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b26:	2300      	movs	r3, #0
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
 8004b2a:	e013      	b.n	8004b54 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3348      	adds	r3, #72	; 0x48
 8004b32:	443b      	add	r3, r7
 8004b34:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d807      	bhi.n	8004b4e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	3348      	adds	r3, #72	; 0x48
 8004b44:	443b      	add	r3, r7
 8004b46:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b4a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004b4c:	e020      	b.n	8004b90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	3301      	adds	r3, #1
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40
 8004b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d9e8      	bls.n	8004b2c <RCC_SetFlashLatency+0x40>
 8004b5a:	e019      	b.n	8004b90 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e013      	b.n	8004b8a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3348      	adds	r3, #72	; 0x48
 8004b68:	443b      	add	r3, r7
 8004b6a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d807      	bhi.n	8004b84 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004b82:	e005      	b.n	8004b90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	3301      	adds	r3, #1
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d9e8      	bls.n	8004b62 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <RCC_SetFlashLatency+0xf4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 0207 	bic.w	r2, r3, #7
 8004b98:	4911      	ldr	r1, [pc, #68]	; (8004be0 <RCC_SetFlashLatency+0xf4>)
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ba0:	f7fd fc22 	bl	80023e8 <HAL_GetTick>
 8004ba4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ba6:	e008      	b.n	8004bba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ba8:	f7fd fc1e 	bl	80023e8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e007      	b.n	8004bca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <RCC_SetFlashLatency+0xf4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1ef      	bne.n	8004ba8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	374c      	adds	r7, #76	; 0x4c
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	0800c16c 	.word	0x0800c16c
 8004bd8:	0800c17c 	.word	0x0800c17c
 8004bdc:	0800c188 	.word	0x0800c188
 8004be0:	58004000 	.word	0x58004000

08004be4 <LL_RCC_LSE_IsEnabled>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <LL_RCC_LSE_IsEnabled+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_RCC_LSE_IsEnabled+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_LSE_IsReady>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d101      	bne.n	8004c20 <LL_RCC_LSE_IsReady+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_RCC_LSE_IsReady+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_RCC_SetRFWKPClockSource>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_SetSMPSClockSource>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_RCC_SetSMPSPrescaler>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_SetUSARTClockSource>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f023 0203 	bic.w	r2, r3, #3
 8004cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <LL_RCC_SetLPUARTClockSource>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_SetI2CClockSource>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_SetLPTIMClockSource>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	43db      	mvns	r3, r3
 8004d52:	401a      	ands	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_SetSAIClockSource>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_RCC_SetRNGClockSource>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_SetCLK48ClockSource>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_SetUSBClockSource>:
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ffe3 	bl	8004dc6 <LL_RCC_SetCLK48ClockSource>
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <LL_RCC_SetADCClockSource>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_SetRTCClockSource>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_RCC_GetRTCClockSource>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LL_RCC_ForceBackupDomainReset>:
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e92:	bf00      	nop
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_ReleaseBackupDomainReset>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_PLLSAI1_Enable>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ed0:	6013      	str	r3, [r2, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_RCC_PLLSAI1_Disable>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_PLLSAI1_IsReady>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0c:	d101      	bne.n	8004f12 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f26:	2300      	movs	r3, #0
 8004f28:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d034      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f42:	d021      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f48:	d81b      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f4e:	d01d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f54:	d815      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d110      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f70:	e00d      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f947 	bl	800520a <RCCEx_PLLSAI1_ConfigNP>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f80:	e005      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	77fb      	strb	r3, [r7, #31]
        break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fee8 	bl	8004d6e <LL_RCC_SetSAIClockSource>
 8004f9e:	e001      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	7ffb      	ldrb	r3, [r7, #31]
 8004fa2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d046      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004fb0:	f7ff ff56 	bl	8004e60 <LL_RCC_GetRTCClockSource>
 8004fb4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d03c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fc0:	f7fe fc66 	bl	8003890 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff ff30 	bl	8004e34 <LL_RCC_SetRTCClockSource>
 8004fd4:	e02e      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004fe0:	f7ff ff4b 	bl	8004e7a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004fe4:	f7ff ff5a 	bl	8004e9c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005000:	f7ff fdf0 	bl	8004be4 <LL_RCC_LSE_IsEnabled>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d114      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800500a:	f7fd f9ed 	bl	80023e8 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005010:	e00b      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd f9e9 	bl	80023e8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d902      	bls.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	77fb      	strb	r3, [r7, #31]
              break;
 8005028:	e004      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800502a:	f7ff fded 	bl	8004c08 <LL_RCC_LSE_IsReady>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d1ee      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	77bb      	strb	r3, [r7, #30]
 8005038:	e001      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	7ffb      	ldrb	r3, [r7, #31]
 800503c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fe2a 	bl	8004ca8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fe35 	bl	8004cd4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fe5d 	bl	8004d3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fe52 	bl	8004d3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fe2a 	bl	8004d00 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe1f 	bl	8004d00 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d022      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fe8d 	bl	8004df2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e0:	d107      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050fa:	d10b      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f8dd 	bl	80052c0 <RCCEx_PLLSAI1_ConfigNQ>
 8005106:	4603      	mov	r3, r0
 8005108:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800510a:	7ffb      	ldrb	r3, [r7, #31]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005110:	7ffb      	ldrb	r3, [r7, #31]
 8005112:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02b      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d008      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005132:	d003      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fe2a 	bl	8004d9a <LL_RCC_SetRNGClockSource>
 8005146:	e00a      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	2000      	movs	r0, #0
 8005154:	f7ff fe21 	bl	8004d9a <LL_RCC_SetRNGClockSource>
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fe34 	bl	8004dc6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005166:	d107      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005176:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	2b00      	cmp	r3, #0
 8005182:	d022      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fe3d 	bl	8004e08 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005196:	d107      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b0:	d10b      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f8dd 	bl	8005376 <RCCEx_PLLSAI1_ConfigNR>
 80051bc:	4603      	mov	r3, r0
 80051be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fd26 	bl	8004c2c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fd45 	bl	8004c80 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fd2c 	bl	8004c58 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005200:	7fbb      	ldrb	r3, [r7, #30]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005216:	f7ff fe61 	bl	8004edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800521a:	f7fd f8e5 	bl	80023e8 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005220:	e009      	b.n	8005236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005222:	f7fd f8e1 	bl	80023e8 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d902      	bls.n	8005236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	e004      	b.n	8005240 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005236:	f7ff fe60 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d137      	bne.n	80052b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005274:	f7ff fe23 	bl	8004ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005278:	f7fd f8b6 	bl	80023e8 <HAL_GetTick>
 800527c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800527e:	e009      	b.n	8005294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005280:	f7fd f8b2 	bl	80023e8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d902      	bls.n	8005294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	73fb      	strb	r3, [r7, #15]
        break;
 8005292:	e004      	b.n	800529e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005294:	f7ff fe31 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d1f0      	bne.n	8005280 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052cc:	f7ff fe06 	bl	8004edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052d0:	f7fd f88a 	bl	80023e8 <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d8:	f7fd f886 	bl	80023e8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ea:	e004      	b.n	80052f6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052ec:	f7ff fe05 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d137      	bne.n	800536c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005310:	4313      	orrs	r3, r2
 8005312:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800532a:	f7ff fdc8 	bl	8004ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532e:	f7fd f85b 	bl	80023e8 <HAL_GetTick>
 8005332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005334:	e009      	b.n	800534a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005336:	f7fd f857 	bl	80023e8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d902      	bls.n	800534a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	73fb      	strb	r3, [r7, #15]
        break;
 8005348:	e004      	b.n	8005354 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800534a:	f7ff fdd6 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 800534e:	4603      	mov	r3, r0
 8005350:	2b01      	cmp	r3, #1
 8005352:	d1f0      	bne.n	8005336 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005368:	4313      	orrs	r3, r2
 800536a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005382:	f7ff fdab 	bl	8004edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005386:	f7fd f82f 	bl	80023e8 <HAL_GetTick>
 800538a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800538c:	e009      	b.n	80053a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800538e:	f7fd f82b 	bl	80023e8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d902      	bls.n	80053a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	73fb      	strb	r3, [r7, #15]
      break;
 80053a0:	e004      	b.n	80053ac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053a2:	f7ff fdaa 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d137      	bne.n	8005422 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053dc:	4313      	orrs	r3, r2
 80053de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053e0:	f7ff fd6d 	bl	8004ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fd f800 	bl	80023e8 <HAL_GetTick>
 80053e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053ea:	e009      	b.n	8005400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ec:	f7fc fffc 	bl	80023e8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d902      	bls.n	8005400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	73fb      	strb	r3, [r7, #15]
        break;
 80053fe:	e004      	b.n	800540a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005400:	f7ff fd7b 	bl	8004efa <LL_RCC_PLLSAI1_IsReady>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d1f0      	bne.n	80053ec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541e:	4313      	orrs	r3, r2
 8005420:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <LL_RCC_GetUSARTClockSource>:
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4013      	ands	r3, r2
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <LL_RCC_GetLPUARTClockSource>:
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4013      	ands	r3, r2
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e042      	b.n	8005504 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc fc07 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2224      	movs	r2, #36	; 0x24
 800549a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fc4a 	bl	8005d48 <UART_SetConfig>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e022      	b.n	8005504 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fe66 	bl	8006198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 feed 	bl	80062dc <UART_CheckIdleState>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	2b20      	cmp	r3, #32
 8005524:	d17b      	bne.n	800561e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_UART_Transmit+0x26>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e074      	b.n	8005620 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2221      	movs	r2, #33	; 0x21
 8005542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005546:	f7fc ff4f 	bl	80023e8 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d108      	bne.n	8005578 <HAL_UART_Transmit+0x6c>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e003      	b.n	8005580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005580:	e030      	b.n	80055e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 ff4f 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e03d      	b.n	8005620 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3302      	adds	r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e007      	b.n	80055d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3301      	adds	r3, #1
 80055d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1c8      	bne.n	8005582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 ff18 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e006      	b.n	8005620 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800563c:	2b20      	cmp	r3, #32
 800563e:	d137      	bne.n	80056b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_UART_Receive_IT+0x24>
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e030      	b.n	80056b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <HAL_UART_Receive_IT+0x94>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d01f      	beq.n	80056a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	613b      	str	r3, [r7, #16]
   return(result);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	61bb      	str	r3, [r7, #24]
   return(result);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	461a      	mov	r2, r3
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 ff2a 	bl	8006500 <UART_Start_Receive_IT>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e000      	b.n	80056b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3728      	adds	r7, #40	; 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40008000 	.word	0x40008000

080056c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b0ba      	sub	sp, #232	; 0xe8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80056ee:	4013      	ands	r3, r2
 80056f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11b      	bne.n	8005734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d105      	bne.n	8005720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 82e3 	beq.w	8005cf0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
      }
      return;
 8005732:	e2dd      	b.n	8005cf0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8123 	beq.w	8005984 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800573e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005742:	4b8d      	ldr	r3, [pc, #564]	; (8005978 <HAL_UART_IRQHandler+0x2b8>)
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800574a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800574e:	4b8b      	ldr	r3, [pc, #556]	; (800597c <HAL_UART_IRQHandler+0x2bc>)
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8116 	beq.w	8005984 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d011      	beq.n	8005788 <HAL_UART_IRQHandler+0xc8>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2201      	movs	r2, #1
 8005776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f043 0201 	orr.w	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <HAL_UART_IRQHandler+0xf8>
 8005794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2202      	movs	r2, #2
 80057a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d011      	beq.n	80057e8 <HAL_UART_IRQHandler+0x128>
 80057c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2204      	movs	r2, #4
 80057d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f043 0202 	orr.w	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d017      	beq.n	8005824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005804:	4b5c      	ldr	r3, [pc, #368]	; (8005978 <HAL_UART_IRQHandler+0x2b8>)
 8005806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2208      	movs	r2, #8
 8005812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <HAL_UART_IRQHandler+0x196>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00c      	beq.n	8005856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8249 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d013      	beq.n	8005896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d005      	beq.n	80058ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d054      	beq.n	8005964 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 ff42 	bl	8006744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d146      	bne.n	800595c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1d9      	bne.n	80058ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <HAL_UART_IRQHandler+0x2c0>)
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005934:	4618      	mov	r0, r3
 8005936:	f7fc ff01 	bl	800273c <HAL_DMA_Abort_IT>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d019      	beq.n	8005974 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800594e:	4610      	mov	r0, r2
 8005950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	e00f      	b.n	8005974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f9e1 	bl	8005d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	e00b      	b.n	8005974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f9dd 	bl	8005d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	e007      	b.n	8005974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9d9 	bl	8005d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005972:	e1bf      	b.n	8005cf4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	bf00      	nop
    return;
 8005976:	e1bd      	b.n	8005cf4 <HAL_UART_IRQHandler+0x634>
 8005978:	10000001 	.word	0x10000001
 800597c:	04000120 	.word	0x04000120
 8005980:	08006811 	.word	0x08006811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 8153 	bne.w	8005c34 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 814c 	beq.w	8005c34 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8145 	beq.w	8005c34 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2210      	movs	r2, #16
 80059b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	f040 80bb 	bne.w	8005b38 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 818f 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059e4:	429a      	cmp	r2, r3
 80059e6:	f080 8187 	bcs.w	8005cf8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 8087 	bne.w	8005b16 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1da      	bne.n	8005a08 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e1      	bne.n	8005a52 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e3      	bne.n	8005a8e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e4      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fc fdb4 	bl	800267e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8fd 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b36:	e0df      	b.n	8005cf8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80d1 	beq.w	8005cfc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005b5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80cc 	beq.w	8005cfc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e4      	bne.n	8005b64 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e1      	bne.n	8005b9a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0310 	bic.w	r3, r3, #16
 8005bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	617b      	str	r3, [r7, #20]
   return(result);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e4      	bne.n	8005bea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f87f 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c32:	e063      	b.n	8005cfc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_UART_IRQHandler+0x59e>
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fb38 	bl	80072cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5c:	e051      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d03a      	beq.n	8005d00 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
    }
    return;
 8005c92:	e035      	b.n	8005d00 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x5f4>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fdc5 	bl	800683c <UART_EndTransmit_IT>
    return;
 8005cb2:	e026      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x614>
 8005cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fb11 	bl	80072f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cd2:	e016      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <HAL_UART_IRQHandler+0x642>
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da0c      	bge.n	8005d02 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 faf9 	bl	80072e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cee:	e008      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
      return;
 8005cf0:	bf00      	nop
 8005cf2:	e006      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
    return;
 8005cf4:	bf00      	nop
 8005cf6:	e004      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
      return;
 8005cf8:	bf00      	nop
 8005cfa:	e002      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
      return;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_UART_IRQHandler+0x642>
    return;
 8005d00:	bf00      	nop
  }
}
 8005d02:	37e8      	adds	r7, #232	; 0xe8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b08c      	sub	sp, #48	; 0x30
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4baf      	ldr	r3, [pc, #700]	; (8006034 <UART_SetConfig+0x2ec>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4aa4      	ldr	r2, [pc, #656]	; (8006038 <UART_SetConfig+0x2f0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db0:	4313      	orrs	r3, r2
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	f023 010f 	bic.w	r1, r3, #15
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a95      	ldr	r2, [pc, #596]	; (800603c <UART_SetConfig+0x2f4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d125      	bne.n	8005e38 <UART_SetConfig+0xf0>
 8005dec:	2003      	movs	r0, #3
 8005dee:	f7ff fb1d 	bl	800542c <LL_RCC_GetUSARTClockSource>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d81b      	bhi.n	8005e30 <UART_SetConfig+0xe8>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0xb8>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e042      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e03e      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e03a      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	e036      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e032      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a7e      	ldr	r2, [pc, #504]	; (8006038 <UART_SetConfig+0x2f0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d12a      	bne.n	8005e98 <UART_SetConfig+0x150>
 8005e42:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005e46:	f7ff fb01 	bl	800544c <LL_RCC_GetLPUARTClockSource>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e50:	d01a      	beq.n	8005e88 <UART_SetConfig+0x140>
 8005e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e56:	d81b      	bhi.n	8005e90 <UART_SetConfig+0x148>
 8005e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5c:	d00c      	beq.n	8005e78 <UART_SetConfig+0x130>
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e62:	d815      	bhi.n	8005e90 <UART_SetConfig+0x148>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <UART_SetConfig+0x128>
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d008      	beq.n	8005e80 <UART_SetConfig+0x138>
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x148>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e76:	e012      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7e:	e00e      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e00a      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8e:	e006      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e002      	b.n	8005e9e <UART_SetConfig+0x156>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a65      	ldr	r2, [pc, #404]	; (8006038 <UART_SetConfig+0x2f0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	f040 8097 	bne.w	8005fd8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d823      	bhi.n	8005efa <UART_SetConfig+0x1b2>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x170>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005efb 	.word	0x08005efb
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005eeb 	.word	0x08005eeb
 8005ecc:	08005efb 	.word	0x08005efb
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005efb 	.word	0x08005efb
 8005ed8:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7fe fda2 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ee2:	e010      	b.n	8005f06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b56      	ldr	r3, [pc, #344]	; (8006040 <UART_SetConfig+0x2f8>)
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ee8:	e00d      	b.n	8005f06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fe fd19 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 812b 	beq.w	8006164 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	4a4c      	ldr	r2, [pc, #304]	; (8006044 <UART_SetConfig+0x2fc>)
 8005f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d305      	bcc.n	8005f3e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d903      	bls.n	8005f46 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f44:	e10e      	b.n	8006164 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2200      	movs	r2, #0
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	60fa      	str	r2, [r7, #12]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	4a3c      	ldr	r2, [pc, #240]	; (8006044 <UART_SetConfig+0x2fc>)
 8005f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f68:	f7fa fe66 	bl	8000c38 <__aeabi_uldivmod>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	020b      	lsls	r3, r1, #8
 8005f7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f82:	0202      	lsls	r2, r0, #8
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	6849      	ldr	r1, [r1, #4]
 8005f88:	0849      	lsrs	r1, r1, #1
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	4605      	mov	r5, r0
 8005f90:	eb12 0804 	adds.w	r8, r2, r4
 8005f94:	eb43 0905 	adc.w	r9, r3, r5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	4693      	mov	fp, r2
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	465b      	mov	r3, fp
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa fe45 	bl	8000c38 <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbc:	d308      	bcc.n	8005fd0 <UART_SetConfig+0x288>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc4:	d204      	bcs.n	8005fd0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e0c9      	b.n	8006164 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fd6:	e0c5      	b.n	8006164 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe0:	d16d      	bne.n	80060be <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d82d      	bhi.n	8006048 <UART_SetConfig+0x300>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x2ac>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006023 	.word	0x08006023
 8006004:	08006049 	.word	0x08006049
 8006008:	08006049 	.word	0x08006049
 800600c:	08006049 	.word	0x08006049
 8006010:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fd1c 	bl	8004a50 <HAL_RCC_GetPCLK2Freq>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800601a:	e01b      	b.n	8006054 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <UART_SetConfig+0x2f8>)
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006020:	e018      	b.n	8006054 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe fc7d 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006028:	e014      	b.n	8006054 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006030:	e010      	b.n	8006054 <UART_SetConfig+0x30c>
 8006032:	bf00      	nop
 8006034:	cfff69f3 	.word	0xcfff69f3
 8006038:	40008000 	.word	0x40008000
 800603c:	40013800 	.word	0x40013800
 8006040:	00f42400 	.word	0x00f42400
 8006044:	0800c238 	.word	0x0800c238
      default:
        pclk = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8084 	beq.w	8006164 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	4a4b      	ldr	r2, [pc, #300]	; (8006190 <UART_SetConfig+0x448>)
 8006062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006066:	461a      	mov	r2, r3
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	005a      	lsls	r2, r3, #1
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	441a      	add	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006080:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d916      	bls.n	80060b6 <UART_SetConfig+0x36e>
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d212      	bcs.n	80060b6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f023 030f 	bic.w	r3, r3, #15
 8006098:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	8bfa      	ldrh	r2, [r7, #30]
 80060b2:	60da      	str	r2, [r3, #12]
 80060b4:	e056      	b.n	8006164 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060bc:	e052      	b.n	8006164 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	d822      	bhi.n	800610e <UART_SetConfig+0x3c6>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x388>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f1 	.word	0x080060f1
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	080060ff 	.word	0x080060ff
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	0800610f 	.word	0x0800610f
 80060e8:	0800610f 	.word	0x0800610f
 80060ec:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fe fcae 	bl	8004a50 <HAL_RCC_GetPCLK2Freq>
 80060f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060f6:	e010      	b.n	800611a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b26      	ldr	r3, [pc, #152]	; (8006194 <UART_SetConfig+0x44c>)
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060fc:	e00d      	b.n	800611a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fe fc0f 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006104:	e009      	b.n	800611a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800610c:	e005      	b.n	800611a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006118:	bf00      	nop
    }

    if (pclk != 0U)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d021      	beq.n	8006164 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4a1a      	ldr	r2, [pc, #104]	; (8006190 <UART_SetConfig+0x448>)
 8006126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612a:	461a      	mov	r2, r3
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	441a      	add	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d909      	bls.n	800615e <UART_SetConfig+0x416>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d205      	bcs.n	800615e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	b29a      	uxth	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e002      	b.n	8006164 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2201      	movs	r2, #1
 8006168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2201      	movs	r2, #1
 8006170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006180:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	; 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618e:	bf00      	nop
 8006190:	0800c238 	.word	0x0800c238
 8006194:	00f42400 	.word	0x00f42400

08006198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01a      	beq.n	80062ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006296:	d10a      	bne.n	80062ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b098      	sub	sp, #96	; 0x60
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062ec:	f7fc f87c 	bl	80023e8 <HAL_GetTick>
 80062f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d12f      	bne.n	8006360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006308:	2200      	movs	r2, #0
 800630a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f88e 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d022      	beq.n	8006360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632e:	653b      	str	r3, [r7, #80]	; 0x50
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006338:	647b      	str	r3, [r7, #68]	; 0x44
 800633a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800633e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e6      	bne.n	800631a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e063      	b.n	8006428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b04      	cmp	r3, #4
 800636c:	d149      	bne.n	8006402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800636e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006376:	2200      	movs	r2, #0
 8006378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f857 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d03c      	beq.n	8006402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	623b      	str	r3, [r7, #32]
   return(result);
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800639c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
 80063a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e6      	bne.n	8006388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063da:	61fa      	str	r2, [r7, #28]
 80063dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	69b9      	ldr	r1, [r7, #24]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	617b      	str	r3, [r7, #20]
   return(result);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e012      	b.n	8006428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3758      	adds	r7, #88	; 0x58
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006440:	e049      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d045      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fb ffcd 	bl	80023e8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <UART_WaitOnFlagUntilTimeout+0x30>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e048      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d031      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d110      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f95b 	bl	8006744 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2208      	movs	r2, #8
 8006492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e029      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b0:	d111      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f941 	bl	8006744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00f      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0a6      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006500:	b480      	push	{r7}
 8006502:	b0a3      	sub	sp, #140	; 0x8c
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	d10e      	bne.n	8006552 <UART_Start_Receive_IT+0x52>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <UART_Start_Receive_IT+0x48>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006546:	e02d      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	22ff      	movs	r2, #255	; 0xff
 800654c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006550:	e028      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <UART_Start_Receive_IT+0x76>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <UART_Start_Receive_IT+0x6c>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	22ff      	movs	r2, #255	; 0xff
 8006566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800656a:	e01b      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	227f      	movs	r2, #127	; 0x7f
 8006570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006574:	e016      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657e:	d10d      	bne.n	800659c <UART_Start_Receive_IT+0x9c>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <UART_Start_Receive_IT+0x92>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	227f      	movs	r2, #127	; 0x7f
 800658c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006590:	e008      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	223f      	movs	r2, #63	; 0x3f
 8006596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800659a:	e003      	b.n	80065a4 <UART_Start_Receive_IT+0xa4>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2222      	movs	r2, #34	; 0x22
 80065b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80065c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065d8:	673a      	str	r2, [r7, #112]	; 0x70
 80065da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80065de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80065e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e3      	bne.n	80065b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f4:	d14f      	bne.n	8006696 <UART_Start_Receive_IT+0x196>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d349      	bcc.n	8006696 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660a:	d107      	bne.n	800661c <UART_Start_Receive_IT+0x11c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a47      	ldr	r2, [pc, #284]	; (8006734 <UART_Start_Receive_IT+0x234>)
 8006618:	675a      	str	r2, [r3, #116]	; 0x74
 800661a:	e002      	b.n	8006622 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a46      	ldr	r2, [pc, #280]	; (8006738 <UART_Start_Receive_IT+0x238>)
 8006620:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01a      	beq.n	8006660 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800664c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800665a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e4      	bne.n	800662a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006680:	64ba      	str	r2, [r7, #72]	; 0x48
 8006682:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800668e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_Start_Receive_IT+0x160>
 8006694:	e046      	b.n	8006724 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669e:	d107      	bne.n	80066b0 <UART_Start_Receive_IT+0x1b0>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a24      	ldr	r2, [pc, #144]	; (800673c <UART_Start_Receive_IT+0x23c>)
 80066ac:	675a      	str	r2, [r3, #116]	; 0x74
 80066ae:	e002      	b.n	80066b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <UART_Start_Receive_IT+0x240>)
 80066b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d019      	beq.n	80066f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066d2:	677b      	str	r3, [r7, #116]	; 0x74
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
 80066de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_Start_Receive_IT+0x1be>
 80066f0:	e018      	b.n	8006724 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f043 0320 	orr.w	r3, r3, #32
 8006706:	67bb      	str	r3, [r7, #120]	; 0x78
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	61bb      	str	r3, [r7, #24]
   return(result);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e6      	bne.n	80066f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	378c      	adds	r7, #140	; 0x8c
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	08006f65 	.word	0x08006f65
 8006738:	08006c05 	.word	0x08006c05
 800673c:	08006a4d 	.word	0x08006a4d
 8006740:	08006895 	.word	0x08006895

08006744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b095      	sub	sp, #84	; 0x54
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	643b      	str	r3, [r7, #64]	; 0x40
 800676c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e6      	bne.n	800674c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3308      	adds	r3, #8
 8006784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	61fb      	str	r3, [r7, #28]
   return(result);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	64bb      	str	r3, [r7, #72]	; 0x48
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e3      	bne.n	800677e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d118      	bne.n	80067f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 0310 	bic.w	r3, r3, #16
 80067d2:	647b      	str	r3, [r7, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e6      	bne.n	80067be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006804:	bf00      	nop
 8006806:	3754      	adds	r7, #84	; 0x54
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fa74 	bl	8005d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	60bb      	str	r3, [r7, #8]
   return(result);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6979      	ldr	r1, [r7, #20]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	613b      	str	r3, [r7, #16]
   return(result);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e6      	bne.n	8006844 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff fa3f 	bl	8005d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688a:	bf00      	nop
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b09c      	sub	sp, #112	; 0x70
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	2b22      	cmp	r3, #34	; 0x22
 80068ae:	f040 80be 	bne.w	8006a2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068c0:	b2d9      	uxtb	r1, r3
 80068c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	400a      	ands	r2, r1
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 80a1 	bne.w	8006a3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800690a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006910:	66bb      	str	r3, [r7, #104]	; 0x68
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800691a:	65bb      	str	r3, [r7, #88]	; 0x58
 800691c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	667b      	str	r3, [r7, #100]	; 0x64
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800694e:	647a      	str	r2, [r7, #68]	; 0x44
 8006950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a33      	ldr	r2, [pc, #204]	; (8006a48 <UART_RxISR_8BIT+0x1b4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d01f      	beq.n	80069c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d018      	beq.n	80069c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	623b      	str	r3, [r7, #32]
   return(result);
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069a2:	663b      	str	r3, [r7, #96]	; 0x60
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ac:	633b      	str	r3, [r7, #48]	; 0x30
 80069ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d12e      	bne.n	8006a26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60fb      	str	r3, [r7, #12]
   return(result);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0310 	bic.w	r3, r3, #16
 80069e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	617b      	str	r3, [r7, #20]
   return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d103      	bne.n	8006a16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff f986 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a24:	e00b      	b.n	8006a3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fb f804 	bl	8001a34 <HAL_UART_RxCpltCallback>
}
 8006a2c:	e007      	b.n	8006a3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0208 	orr.w	r2, r2, #8
 8006a3c:	619a      	str	r2, [r3, #24]
}
 8006a3e:	bf00      	nop
 8006a40:	3770      	adds	r7, #112	; 0x70
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40008000 	.word	0x40008000

08006a4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b09c      	sub	sp, #112	; 0x70
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a64:	2b22      	cmp	r3, #34	; 0x22
 8006a66:	f040 80be 	bne.w	8006be6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006a7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a82:	4013      	ands	r3, r2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 80a1 	bne.w	8006bf6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	663b      	str	r3, [r7, #96]	; 0x60
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b06:	643a      	str	r2, [r7, #64]	; 0x40
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <UART_RxISR_16BIT+0x1b4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d01f      	beq.n	8006b78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d12e      	bne.n	8006bde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0310 	bic.w	r3, r3, #16
 8006b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d103      	bne.n	8006bce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff f8aa 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bdc:	e00b      	b.n	8006bf6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fa ff28 	bl	8001a34 <HAL_UART_RxCpltCallback>
}
 8006be4:	e007      	b.n	8006bf6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0208 	orr.w	r2, r2, #8
 8006bf4:	619a      	str	r2, [r3, #24]
}
 8006bf6:	bf00      	nop
 8006bf8:	3770      	adds	r7, #112	; 0x70
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40008000 	.word	0x40008000

08006c04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b0ac      	sub	sp, #176	; 0xb0
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	2b22      	cmp	r3, #34	; 0x22
 8006c3c:	f040 8182 	bne.w	8006f44 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c4a:	e125      	b.n	8006e98 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006c5a:	b2d9      	uxtb	r1, r3
 8006c5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	400a      	ands	r2, r1
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d053      	beq.n	8006d46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d011      	beq.n	8006cce <UART_RxISR_8BIT_FIFOEN+0xca>
 8006caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc4:	f043 0201 	orr.w	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d011      	beq.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2202      	movs	r2, #2
 8006cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf4:	f043 0204 	orr.w	r2, r3, #4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d011      	beq.n	8006d2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d24:	f043 0202 	orr.w	r2, r3, #2
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7fe ffef 	bl	8005d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 80a2 	bne.w	8006e98 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006d7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e4      	bne.n	8006d54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006db2:	66ba      	str	r2, [r7, #104]	; 0x68
 8006db4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e1      	bne.n	8006d8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5f      	ldr	r2, [pc, #380]	; (8006f5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d021      	beq.n	8006e28 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01a      	beq.n	8006e28 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e14:	657b      	str	r3, [r7, #84]	; 0x54
 8006e16:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d130      	bne.n	8006e92 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f023 0310 	bic.w	r3, r3, #16
 8006e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e58:	643b      	str	r3, [r7, #64]	; 0x40
 8006e5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e4      	bne.n	8006e36 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d103      	bne.n	8006e82 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2210      	movs	r2, #16
 8006e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fe ff50 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
 8006e90:	e002      	b.n	8006e98 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa fdce 	bl	8001a34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d006      	beq.n	8006eae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f47f aecf 	bne.w	8006c4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006eb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d049      	beq.n	8006f54 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ec6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d242      	bcs.n	8006f54 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e3      	bne.n	8006ece <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006f0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e4      	bne.n	8006f0c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f42:	e007      	b.n	8006f54 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0208 	orr.w	r2, r2, #8
 8006f52:	619a      	str	r2, [r3, #24]
}
 8006f54:	bf00      	nop
 8006f56:	37b0      	adds	r7, #176	; 0xb0
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40008000 	.word	0x40008000
 8006f60:	08006895 	.word	0x08006895

08006f64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b0ae      	sub	sp, #184	; 0xb8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f72:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 8186 	bne.w	80072ac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fa6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006faa:	e129      	b.n	8007200 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006fbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006fc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	1c9a      	adds	r2, r3, #2
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d053      	beq.n	80070aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d011      	beq.n	8007032 <UART_RxISR_16BIT_FIFOEN+0xce>
 800700e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007028:	f043 0201 	orr.w	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800703e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2202      	movs	r2, #2
 8007050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007058:	f043 0204 	orr.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d011      	beq.n	8007092 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800706e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2204      	movs	r2, #4
 8007080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f043 0202 	orr.w	r2, r3, #2
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	2b00      	cmp	r3, #0
 800709a:	d006      	beq.n	80070aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7fe fe3d 	bl	8005d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 80a4 	bne.w	8007200 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e2      	bne.n	80070b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800711a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800711c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007120:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e1      	bne.n	80070f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5f      	ldr	r2, [pc, #380]	; (80072c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d021      	beq.n	8007190 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01a      	beq.n	8007190 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800716e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800717c:	65bb      	str	r3, [r7, #88]	; 0x58
 800717e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800718a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e4      	bne.n	800715a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d130      	bne.n	80071fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
 80071c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e4      	bne.n	800719e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d103      	bne.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2210      	movs	r2, #16
 80071e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fe fd9c 	bl	8005d30 <HAL_UARTEx_RxEventCallback>
 80071f8:	e002      	b.n	8007200 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fa fc1a 	bl	8001a34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007200:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	f47f aecb 	bne.w	8006fac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800721c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007220:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007224:	2b00      	cmp	r3, #0
 8007226:	d049      	beq.n	80072bc <UART_RxISR_16BIT_FIFOEN+0x358>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800722e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007232:	429a      	cmp	r2, r3
 8007234:	d242      	bcs.n	80072bc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	623b      	str	r3, [r7, #32]
   return(result);
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3308      	adds	r3, #8
 8007256:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800725a:	633a      	str	r2, [r7, #48]	; 0x30
 800725c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e3      	bne.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007272:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	60fb      	str	r3, [r7, #12]
   return(result);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f043 0320 	orr.w	r3, r3, #32
 8007288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69b9      	ldr	r1, [r7, #24]
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	617b      	str	r3, [r7, #20]
   return(result);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e4      	bne.n	8007274 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072aa:	e007      	b.n	80072bc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0208 	orr.w	r2, r2, #8
 80072ba:	619a      	str	r2, [r3, #24]
}
 80072bc:	bf00      	nop
 80072be:	37b8      	adds	r7, #184	; 0xb8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40008000 	.word	0x40008000
 80072c8:	08006a4d 	.word	0x08006a4d

080072cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_UARTEx_DisableFifoMode+0x16>
 800731a:	2302      	movs	r3, #2
 800731c:	e027      	b.n	800736e <HAL_UARTEx_DisableFifoMode+0x66>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2224      	movs	r2, #36	; 0x24
 800732a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800734c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800738e:	2302      	movs	r3, #2
 8007390:	e02d      	b.n	80073ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2224      	movs	r2, #36	; 0x24
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f850 	bl	8007474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800740a:	2302      	movs	r3, #2
 800740c:	e02d      	b.n	800746a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2224      	movs	r2, #36	; 0x24
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f812 	bl	8007474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007494:	e031      	b.n	80074fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007496:	2308      	movs	r3, #8
 8007498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800749a:	2308      	movs	r3, #8
 800749c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	0e5b      	lsrs	r3, r3, #25
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	0f5b      	lsrs	r3, r3, #29
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	7b3a      	ldrb	r2, [r7, #12]
 80074c2:	4911      	ldr	r1, [pc, #68]	; (8007508 <UARTEx_SetNbDataToProcess+0x94>)
 80074c4:	5c8a      	ldrb	r2, [r1, r2]
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074ca:	7b3a      	ldrb	r2, [r7, #12]
 80074cc:	490f      	ldr	r1, [pc, #60]	; (800750c <UARTEx_SetNbDataToProcess+0x98>)
 80074ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	7b7a      	ldrb	r2, [r7, #13]
 80074e0:	4909      	ldr	r1, [pc, #36]	; (8007508 <UARTEx_SetNbDataToProcess+0x94>)
 80074e2:	5c8a      	ldrb	r2, [r1, r2]
 80074e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074e8:	7b7a      	ldrb	r2, [r7, #13]
 80074ea:	4908      	ldr	r1, [pc, #32]	; (800750c <UARTEx_SetNbDataToProcess+0x98>)
 80074ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	0800c250 	.word	0x0800c250
 800750c:	0800c258 	.word	0x0800c258

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	; (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	2000001c 	.word	0x2000001c

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f004 fd1c 	bl	800bf6c <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	0800c714 	.word	0x0800c714
 8007558:	0800c714 	.word	0x0800c714
 800755c:	0800c714 	.word	0x0800c714
 8007560:	0800c718 	.word	0x0800c718

08007564 <memcpy>:
 8007564:	440a      	add	r2, r1
 8007566:	4291      	cmp	r1, r2
 8007568:	f100 33ff 	add.w	r3, r0, #4294967295
 800756c:	d100      	bne.n	8007570 <memcpy+0xc>
 800756e:	4770      	bx	lr
 8007570:	b510      	push	{r4, lr}
 8007572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757a:	4291      	cmp	r1, r2
 800757c:	d1f9      	bne.n	8007572 <memcpy+0xe>
 800757e:	bd10      	pop	{r4, pc}

08007580 <memset>:
 8007580:	4402      	add	r2, r0
 8007582:	4603      	mov	r3, r0
 8007584:	4293      	cmp	r3, r2
 8007586:	d100      	bne.n	800758a <memset+0xa>
 8007588:	4770      	bx	lr
 800758a:	f803 1b01 	strb.w	r1, [r3], #1
 800758e:	e7f9      	b.n	8007584 <memset+0x4>

08007590 <__cvt>:
 8007590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	ec55 4b10 	vmov	r4, r5, d0
 8007598:	2d00      	cmp	r5, #0
 800759a:	460e      	mov	r6, r1
 800759c:	4619      	mov	r1, r3
 800759e:	462b      	mov	r3, r5
 80075a0:	bfbb      	ittet	lt
 80075a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075a6:	461d      	movlt	r5, r3
 80075a8:	2300      	movge	r3, #0
 80075aa:	232d      	movlt	r3, #45	; 0x2d
 80075ac:	700b      	strb	r3, [r1, #0]
 80075ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075b4:	4691      	mov	r9, r2
 80075b6:	f023 0820 	bic.w	r8, r3, #32
 80075ba:	bfbc      	itt	lt
 80075bc:	4622      	movlt	r2, r4
 80075be:	4614      	movlt	r4, r2
 80075c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075c4:	d005      	beq.n	80075d2 <__cvt+0x42>
 80075c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075ca:	d100      	bne.n	80075ce <__cvt+0x3e>
 80075cc:	3601      	adds	r6, #1
 80075ce:	2102      	movs	r1, #2
 80075d0:	e000      	b.n	80075d4 <__cvt+0x44>
 80075d2:	2103      	movs	r1, #3
 80075d4:	ab03      	add	r3, sp, #12
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	ab02      	add	r3, sp, #8
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	ec45 4b10 	vmov	d0, r4, r5
 80075e0:	4653      	mov	r3, sl
 80075e2:	4632      	mov	r2, r6
 80075e4:	f001 fefc 	bl	80093e0 <_dtoa_r>
 80075e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075ec:	4607      	mov	r7, r0
 80075ee:	d102      	bne.n	80075f6 <__cvt+0x66>
 80075f0:	f019 0f01 	tst.w	r9, #1
 80075f4:	d022      	beq.n	800763c <__cvt+0xac>
 80075f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075fa:	eb07 0906 	add.w	r9, r7, r6
 80075fe:	d110      	bne.n	8007622 <__cvt+0x92>
 8007600:	783b      	ldrb	r3, [r7, #0]
 8007602:	2b30      	cmp	r3, #48	; 0x30
 8007604:	d10a      	bne.n	800761c <__cvt+0x8c>
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	f7f9 fa33 	bl	8000a78 <__aeabi_dcmpeq>
 8007612:	b918      	cbnz	r0, 800761c <__cvt+0x8c>
 8007614:	f1c6 0601 	rsb	r6, r6, #1
 8007618:	f8ca 6000 	str.w	r6, [sl]
 800761c:	f8da 3000 	ldr.w	r3, [sl]
 8007620:	4499      	add	r9, r3
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	f7f9 fa25 	bl	8000a78 <__aeabi_dcmpeq>
 800762e:	b108      	cbz	r0, 8007634 <__cvt+0xa4>
 8007630:	f8cd 900c 	str.w	r9, [sp, #12]
 8007634:	2230      	movs	r2, #48	; 0x30
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	454b      	cmp	r3, r9
 800763a:	d307      	bcc.n	800764c <__cvt+0xbc>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007640:	1bdb      	subs	r3, r3, r7
 8007642:	4638      	mov	r0, r7
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	b004      	add	sp, #16
 8007648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	9103      	str	r1, [sp, #12]
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e7f0      	b.n	8007636 <__cvt+0xa6>

08007654 <__exponent>:
 8007654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007656:	4603      	mov	r3, r0
 8007658:	2900      	cmp	r1, #0
 800765a:	bfb8      	it	lt
 800765c:	4249      	neglt	r1, r1
 800765e:	f803 2b02 	strb.w	r2, [r3], #2
 8007662:	bfb4      	ite	lt
 8007664:	222d      	movlt	r2, #45	; 0x2d
 8007666:	222b      	movge	r2, #43	; 0x2b
 8007668:	2909      	cmp	r1, #9
 800766a:	7042      	strb	r2, [r0, #1]
 800766c:	dd2a      	ble.n	80076c4 <__exponent+0x70>
 800766e:	f10d 0407 	add.w	r4, sp, #7
 8007672:	46a4      	mov	ip, r4
 8007674:	270a      	movs	r7, #10
 8007676:	46a6      	mov	lr, r4
 8007678:	460a      	mov	r2, r1
 800767a:	fb91 f6f7 	sdiv	r6, r1, r7
 800767e:	fb07 1516 	mls	r5, r7, r6, r1
 8007682:	3530      	adds	r5, #48	; 0x30
 8007684:	2a63      	cmp	r2, #99	; 0x63
 8007686:	f104 34ff 	add.w	r4, r4, #4294967295
 800768a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800768e:	4631      	mov	r1, r6
 8007690:	dcf1      	bgt.n	8007676 <__exponent+0x22>
 8007692:	3130      	adds	r1, #48	; 0x30
 8007694:	f1ae 0502 	sub.w	r5, lr, #2
 8007698:	f804 1c01 	strb.w	r1, [r4, #-1]
 800769c:	1c44      	adds	r4, r0, #1
 800769e:	4629      	mov	r1, r5
 80076a0:	4561      	cmp	r1, ip
 80076a2:	d30a      	bcc.n	80076ba <__exponent+0x66>
 80076a4:	f10d 0209 	add.w	r2, sp, #9
 80076a8:	eba2 020e 	sub.w	r2, r2, lr
 80076ac:	4565      	cmp	r5, ip
 80076ae:	bf88      	it	hi
 80076b0:	2200      	movhi	r2, #0
 80076b2:	4413      	add	r3, r2
 80076b4:	1a18      	subs	r0, r3, r0
 80076b6:	b003      	add	sp, #12
 80076b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076c2:	e7ed      	b.n	80076a0 <__exponent+0x4c>
 80076c4:	2330      	movs	r3, #48	; 0x30
 80076c6:	3130      	adds	r1, #48	; 0x30
 80076c8:	7083      	strb	r3, [r0, #2]
 80076ca:	70c1      	strb	r1, [r0, #3]
 80076cc:	1d03      	adds	r3, r0, #4
 80076ce:	e7f1      	b.n	80076b4 <__exponent+0x60>

080076d0 <_printf_float>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	b08d      	sub	sp, #52	; 0x34
 80076da:	460c      	mov	r4, r1
 80076dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076e0:	4616      	mov	r6, r2
 80076e2:	461f      	mov	r7, r3
 80076e4:	4605      	mov	r5, r0
 80076e6:	f003 f98f 	bl	800aa08 <_localeconv_r>
 80076ea:	f8d0 a000 	ldr.w	sl, [r0]
 80076ee:	4650      	mov	r0, sl
 80076f0:	f7f8 fd46 	bl	8000180 <strlen>
 80076f4:	2300      	movs	r3, #0
 80076f6:	930a      	str	r3, [sp, #40]	; 0x28
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007700:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007704:	3307      	adds	r3, #7
 8007706:	f023 0307 	bic.w	r3, r3, #7
 800770a:	f103 0208 	add.w	r2, r3, #8
 800770e:	f8c8 2000 	str.w	r2, [r8]
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800771a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800771e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	f8cd 8018 	str.w	r8, [sp, #24]
 8007728:	ee08 0a10 	vmov	s16, r0
 800772c:	4b9f      	ldr	r3, [pc, #636]	; (80079ac <_printf_float+0x2dc>)
 800772e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007732:	f04f 32ff 	mov.w	r2, #4294967295
 8007736:	f7f9 f9d1 	bl	8000adc <__aeabi_dcmpun>
 800773a:	bb88      	cbnz	r0, 80077a0 <_printf_float+0xd0>
 800773c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007740:	4b9a      	ldr	r3, [pc, #616]	; (80079ac <_printf_float+0x2dc>)
 8007742:	f04f 32ff 	mov.w	r2, #4294967295
 8007746:	f7f9 f9ab 	bl	8000aa0 <__aeabi_dcmple>
 800774a:	bb48      	cbnz	r0, 80077a0 <_printf_float+0xd0>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4640      	mov	r0, r8
 8007752:	4649      	mov	r1, r9
 8007754:	f7f9 f99a 	bl	8000a8c <__aeabi_dcmplt>
 8007758:	b110      	cbz	r0, 8007760 <_printf_float+0x90>
 800775a:	232d      	movs	r3, #45	; 0x2d
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007760:	4b93      	ldr	r3, [pc, #588]	; (80079b0 <_printf_float+0x2e0>)
 8007762:	4894      	ldr	r0, [pc, #592]	; (80079b4 <_printf_float+0x2e4>)
 8007764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007768:	bf94      	ite	ls
 800776a:	4698      	movls	r8, r3
 800776c:	4680      	movhi	r8, r0
 800776e:	2303      	movs	r3, #3
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	f023 0204 	bic.w	r2, r3, #4
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	f04f 0900 	mov.w	r9, #0
 800777e:	9700      	str	r7, [sp, #0]
 8007780:	4633      	mov	r3, r6
 8007782:	aa0b      	add	r2, sp, #44	; 0x2c
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f9d8 	bl	8007b3c <_printf_common>
 800778c:	3001      	adds	r0, #1
 800778e:	f040 8090 	bne.w	80078b2 <_printf_float+0x1e2>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	b00d      	add	sp, #52	; 0x34
 8007798:	ecbd 8b02 	vpop	{d8}
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	4640      	mov	r0, r8
 80077a6:	4649      	mov	r1, r9
 80077a8:	f7f9 f998 	bl	8000adc <__aeabi_dcmpun>
 80077ac:	b140      	cbz	r0, 80077c0 <_printf_float+0xf0>
 80077ae:	464b      	mov	r3, r9
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfbc      	itt	lt
 80077b4:	232d      	movlt	r3, #45	; 0x2d
 80077b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077ba:	487f      	ldr	r0, [pc, #508]	; (80079b8 <_printf_float+0x2e8>)
 80077bc:	4b7f      	ldr	r3, [pc, #508]	; (80079bc <_printf_float+0x2ec>)
 80077be:	e7d1      	b.n	8007764 <_printf_float+0x94>
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077c6:	9206      	str	r2, [sp, #24]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	d13f      	bne.n	800784c <_printf_float+0x17c>
 80077cc:	2306      	movs	r3, #6
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	6861      	ldr	r1, [r4, #4]
 80077d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077d8:	2300      	movs	r3, #0
 80077da:	9303      	str	r3, [sp, #12]
 80077dc:	ab0a      	add	r3, sp, #40	; 0x28
 80077de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077e2:	ab09      	add	r3, sp, #36	; 0x24
 80077e4:	ec49 8b10 	vmov	d0, r8, r9
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7ff fecd 	bl	8007590 <__cvt>
 80077f6:	9b06      	ldr	r3, [sp, #24]
 80077f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077fa:	2b47      	cmp	r3, #71	; 0x47
 80077fc:	4680      	mov	r8, r0
 80077fe:	d108      	bne.n	8007812 <_printf_float+0x142>
 8007800:	1cc8      	adds	r0, r1, #3
 8007802:	db02      	blt.n	800780a <_printf_float+0x13a>
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	4299      	cmp	r1, r3
 8007808:	dd41      	ble.n	800788e <_printf_float+0x1be>
 800780a:	f1ab 0b02 	sub.w	fp, fp, #2
 800780e:	fa5f fb8b 	uxtb.w	fp, fp
 8007812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007816:	d820      	bhi.n	800785a <_printf_float+0x18a>
 8007818:	3901      	subs	r1, #1
 800781a:	465a      	mov	r2, fp
 800781c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007820:	9109      	str	r1, [sp, #36]	; 0x24
 8007822:	f7ff ff17 	bl	8007654 <__exponent>
 8007826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007828:	1813      	adds	r3, r2, r0
 800782a:	2a01      	cmp	r2, #1
 800782c:	4681      	mov	r9, r0
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	dc02      	bgt.n	8007838 <_printf_float+0x168>
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	07d2      	lsls	r2, r2, #31
 8007836:	d501      	bpl.n	800783c <_printf_float+0x16c>
 8007838:	3301      	adds	r3, #1
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007840:	2b00      	cmp	r3, #0
 8007842:	d09c      	beq.n	800777e <_printf_float+0xae>
 8007844:	232d      	movs	r3, #45	; 0x2d
 8007846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784a:	e798      	b.n	800777e <_printf_float+0xae>
 800784c:	9a06      	ldr	r2, [sp, #24]
 800784e:	2a47      	cmp	r2, #71	; 0x47
 8007850:	d1be      	bne.n	80077d0 <_printf_float+0x100>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1bc      	bne.n	80077d0 <_printf_float+0x100>
 8007856:	2301      	movs	r3, #1
 8007858:	e7b9      	b.n	80077ce <_printf_float+0xfe>
 800785a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800785e:	d118      	bne.n	8007892 <_printf_float+0x1c2>
 8007860:	2900      	cmp	r1, #0
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	dd0b      	ble.n	800787e <_printf_float+0x1ae>
 8007866:	6121      	str	r1, [r4, #16]
 8007868:	b913      	cbnz	r3, 8007870 <_printf_float+0x1a0>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	07d0      	lsls	r0, r2, #31
 800786e:	d502      	bpl.n	8007876 <_printf_float+0x1a6>
 8007870:	3301      	adds	r3, #1
 8007872:	440b      	add	r3, r1
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	65a1      	str	r1, [r4, #88]	; 0x58
 8007878:	f04f 0900 	mov.w	r9, #0
 800787c:	e7de      	b.n	800783c <_printf_float+0x16c>
 800787e:	b913      	cbnz	r3, 8007886 <_printf_float+0x1b6>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	07d2      	lsls	r2, r2, #31
 8007884:	d501      	bpl.n	800788a <_printf_float+0x1ba>
 8007886:	3302      	adds	r3, #2
 8007888:	e7f4      	b.n	8007874 <_printf_float+0x1a4>
 800788a:	2301      	movs	r3, #1
 800788c:	e7f2      	b.n	8007874 <_printf_float+0x1a4>
 800788e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007894:	4299      	cmp	r1, r3
 8007896:	db05      	blt.n	80078a4 <_printf_float+0x1d4>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	6121      	str	r1, [r4, #16]
 800789c:	07d8      	lsls	r0, r3, #31
 800789e:	d5ea      	bpl.n	8007876 <_printf_float+0x1a6>
 80078a0:	1c4b      	adds	r3, r1, #1
 80078a2:	e7e7      	b.n	8007874 <_printf_float+0x1a4>
 80078a4:	2900      	cmp	r1, #0
 80078a6:	bfd4      	ite	le
 80078a8:	f1c1 0202 	rsble	r2, r1, #2
 80078ac:	2201      	movgt	r2, #1
 80078ae:	4413      	add	r3, r2
 80078b0:	e7e0      	b.n	8007874 <_printf_float+0x1a4>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	055a      	lsls	r2, r3, #21
 80078b6:	d407      	bmi.n	80078c8 <_printf_float+0x1f8>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	4642      	mov	r2, r8
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	d12c      	bne.n	8007920 <_printf_float+0x250>
 80078c6:	e764      	b.n	8007792 <_printf_float+0xc2>
 80078c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078cc:	f240 80e0 	bls.w	8007a90 <_printf_float+0x3c0>
 80078d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d4:	2200      	movs	r2, #0
 80078d6:	2300      	movs	r3, #0
 80078d8:	f7f9 f8ce 	bl	8000a78 <__aeabi_dcmpeq>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d034      	beq.n	800794a <_printf_float+0x27a>
 80078e0:	4a37      	ldr	r2, [pc, #220]	; (80079c0 <_printf_float+0x2f0>)
 80078e2:	2301      	movs	r3, #1
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	f43f af51 	beq.w	8007792 <_printf_float+0xc2>
 80078f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078f4:	429a      	cmp	r2, r3
 80078f6:	db02      	blt.n	80078fe <_printf_float+0x22e>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	07d8      	lsls	r0, r3, #31
 80078fc:	d510      	bpl.n	8007920 <_printf_float+0x250>
 80078fe:	ee18 3a10 	vmov	r3, s16
 8007902:	4652      	mov	r2, sl
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f af41 	beq.w	8007792 <_printf_float+0xc2>
 8007910:	f04f 0800 	mov.w	r8, #0
 8007914:	f104 091a 	add.w	r9, r4, #26
 8007918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791a:	3b01      	subs	r3, #1
 800791c:	4543      	cmp	r3, r8
 800791e:	dc09      	bgt.n	8007934 <_printf_float+0x264>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	079b      	lsls	r3, r3, #30
 8007924:	f100 8105 	bmi.w	8007b32 <_printf_float+0x462>
 8007928:	68e0      	ldr	r0, [r4, #12]
 800792a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792c:	4298      	cmp	r0, r3
 800792e:	bfb8      	it	lt
 8007930:	4618      	movlt	r0, r3
 8007932:	e730      	b.n	8007796 <_printf_float+0xc6>
 8007934:	2301      	movs	r3, #1
 8007936:	464a      	mov	r2, r9
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f af27 	beq.w	8007792 <_printf_float+0xc2>
 8007944:	f108 0801 	add.w	r8, r8, #1
 8007948:	e7e6      	b.n	8007918 <_printf_float+0x248>
 800794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	dc39      	bgt.n	80079c4 <_printf_float+0x2f4>
 8007950:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <_printf_float+0x2f0>)
 8007952:	2301      	movs	r3, #1
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f af19 	beq.w	8007792 <_printf_float+0xc2>
 8007960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007964:	4313      	orrs	r3, r2
 8007966:	d102      	bne.n	800796e <_printf_float+0x29e>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	07d9      	lsls	r1, r3, #31
 800796c:	d5d8      	bpl.n	8007920 <_printf_float+0x250>
 800796e:	ee18 3a10 	vmov	r3, s16
 8007972:	4652      	mov	r2, sl
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	47b8      	blx	r7
 800797a:	3001      	adds	r0, #1
 800797c:	f43f af09 	beq.w	8007792 <_printf_float+0xc2>
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	f104 0a1a 	add.w	sl, r4, #26
 8007988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798a:	425b      	negs	r3, r3
 800798c:	454b      	cmp	r3, r9
 800798e:	dc01      	bgt.n	8007994 <_printf_float+0x2c4>
 8007990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007992:	e792      	b.n	80078ba <_printf_float+0x1ea>
 8007994:	2301      	movs	r3, #1
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f aef7 	beq.w	8007792 <_printf_float+0xc2>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7ee      	b.n	8007988 <_printf_float+0x2b8>
 80079aa:	bf00      	nop
 80079ac:	7fefffff 	.word	0x7fefffff
 80079b0:	0800c264 	.word	0x0800c264
 80079b4:	0800c268 	.word	0x0800c268
 80079b8:	0800c270 	.word	0x0800c270
 80079bc:	0800c26c 	.word	0x0800c26c
 80079c0:	0800c274 	.word	0x0800c274
 80079c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bfa8      	it	ge
 80079cc:	461a      	movge	r2, r3
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	4691      	mov	r9, r2
 80079d2:	dc37      	bgt.n	8007a44 <_printf_float+0x374>
 80079d4:	f04f 0b00 	mov.w	fp, #0
 80079d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079dc:	f104 021a 	add.w	r2, r4, #26
 80079e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	eba3 0309 	sub.w	r3, r3, r9
 80079e8:	455b      	cmp	r3, fp
 80079ea:	dc33      	bgt.n	8007a54 <_printf_float+0x384>
 80079ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f0:	429a      	cmp	r2, r3
 80079f2:	db3b      	blt.n	8007a6c <_printf_float+0x39c>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07da      	lsls	r2, r3, #31
 80079f8:	d438      	bmi.n	8007a6c <_printf_float+0x39c>
 80079fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fc:	9a05      	ldr	r2, [sp, #20]
 80079fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a00:	1a9a      	subs	r2, r3, r2
 8007a02:	eba3 0901 	sub.w	r9, r3, r1
 8007a06:	4591      	cmp	r9, r2
 8007a08:	bfa8      	it	ge
 8007a0a:	4691      	movge	r9, r2
 8007a0c:	f1b9 0f00 	cmp.w	r9, #0
 8007a10:	dc35      	bgt.n	8007a7e <_printf_float+0x3ae>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a1a:	f104 0a1a 	add.w	sl, r4, #26
 8007a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a22:	1a9b      	subs	r3, r3, r2
 8007a24:	eba3 0309 	sub.w	r3, r3, r9
 8007a28:	4543      	cmp	r3, r8
 8007a2a:	f77f af79 	ble.w	8007920 <_printf_float+0x250>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f43f aeaa 	beq.w	8007792 <_printf_float+0xc2>
 8007a3e:	f108 0801 	add.w	r8, r8, #1
 8007a42:	e7ec      	b.n	8007a1e <_printf_float+0x34e>
 8007a44:	4613      	mov	r3, r2
 8007a46:	4631      	mov	r1, r6
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d1c0      	bne.n	80079d4 <_printf_float+0x304>
 8007a52:	e69e      	b.n	8007792 <_printf_float+0xc2>
 8007a54:	2301      	movs	r3, #1
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	9205      	str	r2, [sp, #20]
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f ae97 	beq.w	8007792 <_printf_float+0xc2>
 8007a64:	9a05      	ldr	r2, [sp, #20]
 8007a66:	f10b 0b01 	add.w	fp, fp, #1
 8007a6a:	e7b9      	b.n	80079e0 <_printf_float+0x310>
 8007a6c:	ee18 3a10 	vmov	r3, s16
 8007a70:	4652      	mov	r2, sl
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d1be      	bne.n	80079fa <_printf_float+0x32a>
 8007a7c:	e689      	b.n	8007792 <_printf_float+0xc2>
 8007a7e:	9a05      	ldr	r2, [sp, #20]
 8007a80:	464b      	mov	r3, r9
 8007a82:	4442      	add	r2, r8
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b8      	blx	r7
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d1c1      	bne.n	8007a12 <_printf_float+0x342>
 8007a8e:	e680      	b.n	8007792 <_printf_float+0xc2>
 8007a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a92:	2a01      	cmp	r2, #1
 8007a94:	dc01      	bgt.n	8007a9a <_printf_float+0x3ca>
 8007a96:	07db      	lsls	r3, r3, #31
 8007a98:	d538      	bpl.n	8007b0c <_printf_float+0x43c>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae74 	beq.w	8007792 <_printf_float+0xc2>
 8007aaa:	ee18 3a10 	vmov	r3, s16
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f ae6b 	beq.w	8007792 <_printf_float+0xc2>
 8007abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f7f8 ffd8 	bl	8000a78 <__aeabi_dcmpeq>
 8007ac8:	b9d8      	cbnz	r0, 8007b02 <_printf_float+0x432>
 8007aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007acc:	f108 0201 	add.w	r2, r8, #1
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d10e      	bne.n	8007afa <_printf_float+0x42a>
 8007adc:	e659      	b.n	8007792 <_printf_float+0xc2>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f43f ae52 	beq.w	8007792 <_printf_float+0xc2>
 8007aee:	f108 0801 	add.w	r8, r8, #1
 8007af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4543      	cmp	r3, r8
 8007af8:	dcf1      	bgt.n	8007ade <_printf_float+0x40e>
 8007afa:	464b      	mov	r3, r9
 8007afc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b00:	e6dc      	b.n	80078bc <_printf_float+0x1ec>
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	f104 0a1a 	add.w	sl, r4, #26
 8007b0a:	e7f2      	b.n	8007af2 <_printf_float+0x422>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4642      	mov	r2, r8
 8007b10:	e7df      	b.n	8007ad2 <_printf_float+0x402>
 8007b12:	2301      	movs	r3, #1
 8007b14:	464a      	mov	r2, r9
 8007b16:	4631      	mov	r1, r6
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b8      	blx	r7
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f43f ae38 	beq.w	8007792 <_printf_float+0xc2>
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	68e3      	ldr	r3, [r4, #12]
 8007b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	dcf0      	bgt.n	8007b12 <_printf_float+0x442>
 8007b30:	e6fa      	b.n	8007928 <_printf_float+0x258>
 8007b32:	f04f 0800 	mov.w	r8, #0
 8007b36:	f104 0919 	add.w	r9, r4, #25
 8007b3a:	e7f4      	b.n	8007b26 <_printf_float+0x456>

08007b3c <_printf_common>:
 8007b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	4616      	mov	r6, r2
 8007b42:	4699      	mov	r9, r3
 8007b44:	688a      	ldr	r2, [r1, #8]
 8007b46:	690b      	ldr	r3, [r1, #16]
 8007b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	bfb8      	it	lt
 8007b50:	4613      	movlt	r3, r2
 8007b52:	6033      	str	r3, [r6, #0]
 8007b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b58:	4607      	mov	r7, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	b10a      	cbz	r2, 8007b62 <_printf_common+0x26>
 8007b5e:	3301      	adds	r3, #1
 8007b60:	6033      	str	r3, [r6, #0]
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	0699      	lsls	r1, r3, #26
 8007b66:	bf42      	ittt	mi
 8007b68:	6833      	ldrmi	r3, [r6, #0]
 8007b6a:	3302      	addmi	r3, #2
 8007b6c:	6033      	strmi	r3, [r6, #0]
 8007b6e:	6825      	ldr	r5, [r4, #0]
 8007b70:	f015 0506 	ands.w	r5, r5, #6
 8007b74:	d106      	bne.n	8007b84 <_printf_common+0x48>
 8007b76:	f104 0a19 	add.w	sl, r4, #25
 8007b7a:	68e3      	ldr	r3, [r4, #12]
 8007b7c:	6832      	ldr	r2, [r6, #0]
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	42ab      	cmp	r3, r5
 8007b82:	dc26      	bgt.n	8007bd2 <_printf_common+0x96>
 8007b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b88:	1e13      	subs	r3, r2, #0
 8007b8a:	6822      	ldr	r2, [r4, #0]
 8007b8c:	bf18      	it	ne
 8007b8e:	2301      	movne	r3, #1
 8007b90:	0692      	lsls	r2, r2, #26
 8007b92:	d42b      	bmi.n	8007bec <_printf_common+0xb0>
 8007b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	47c0      	blx	r8
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d01e      	beq.n	8007be0 <_printf_common+0xa4>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	68e5      	ldr	r5, [r4, #12]
 8007ba6:	6832      	ldr	r2, [r6, #0]
 8007ba8:	f003 0306 	and.w	r3, r3, #6
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	bf08      	it	eq
 8007bb0:	1aad      	subeq	r5, r5, r2
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	bf0c      	ite	eq
 8007bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bbc:	2500      	movne	r5, #0
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	bfc4      	itt	gt
 8007bc2:	1a9b      	subgt	r3, r3, r2
 8007bc4:	18ed      	addgt	r5, r5, r3
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	341a      	adds	r4, #26
 8007bca:	42b5      	cmp	r5, r6
 8007bcc:	d11a      	bne.n	8007c04 <_printf_common+0xc8>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e008      	b.n	8007be4 <_printf_common+0xa8>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4638      	mov	r0, r7
 8007bda:	47c0      	blx	r8
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d103      	bne.n	8007be8 <_printf_common+0xac>
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be8:	3501      	adds	r5, #1
 8007bea:	e7c6      	b.n	8007b7a <_printf_common+0x3e>
 8007bec:	18e1      	adds	r1, r4, r3
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	2030      	movs	r0, #48	; 0x30
 8007bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bf6:	4422      	add	r2, r4
 8007bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c00:	3302      	adds	r3, #2
 8007c02:	e7c7      	b.n	8007b94 <_printf_common+0x58>
 8007c04:	2301      	movs	r3, #1
 8007c06:	4622      	mov	r2, r4
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	47c0      	blx	r8
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d0e6      	beq.n	8007be0 <_printf_common+0xa4>
 8007c12:	3601      	adds	r6, #1
 8007c14:	e7d9      	b.n	8007bca <_printf_common+0x8e>
	...

08007c18 <_printf_i>:
 8007c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	7e0f      	ldrb	r7, [r1, #24]
 8007c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c20:	2f78      	cmp	r7, #120	; 0x78
 8007c22:	4691      	mov	r9, r2
 8007c24:	4680      	mov	r8, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	469a      	mov	sl, r3
 8007c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c2e:	d807      	bhi.n	8007c40 <_printf_i+0x28>
 8007c30:	2f62      	cmp	r7, #98	; 0x62
 8007c32:	d80a      	bhi.n	8007c4a <_printf_i+0x32>
 8007c34:	2f00      	cmp	r7, #0
 8007c36:	f000 80d8 	beq.w	8007dea <_printf_i+0x1d2>
 8007c3a:	2f58      	cmp	r7, #88	; 0x58
 8007c3c:	f000 80a3 	beq.w	8007d86 <_printf_i+0x16e>
 8007c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c48:	e03a      	b.n	8007cc0 <_printf_i+0xa8>
 8007c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c4e:	2b15      	cmp	r3, #21
 8007c50:	d8f6      	bhi.n	8007c40 <_printf_i+0x28>
 8007c52:	a101      	add	r1, pc, #4	; (adr r1, 8007c58 <_printf_i+0x40>)
 8007c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007cc5 	.word	0x08007cc5
 8007c60:	08007c41 	.word	0x08007c41
 8007c64:	08007c41 	.word	0x08007c41
 8007c68:	08007c41 	.word	0x08007c41
 8007c6c:	08007c41 	.word	0x08007c41
 8007c70:	08007cc5 	.word	0x08007cc5
 8007c74:	08007c41 	.word	0x08007c41
 8007c78:	08007c41 	.word	0x08007c41
 8007c7c:	08007c41 	.word	0x08007c41
 8007c80:	08007c41 	.word	0x08007c41
 8007c84:	08007dd1 	.word	0x08007dd1
 8007c88:	08007cf5 	.word	0x08007cf5
 8007c8c:	08007db3 	.word	0x08007db3
 8007c90:	08007c41 	.word	0x08007c41
 8007c94:	08007c41 	.word	0x08007c41
 8007c98:	08007df3 	.word	0x08007df3
 8007c9c:	08007c41 	.word	0x08007c41
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007c41 	.word	0x08007c41
 8007ca8:	08007c41 	.word	0x08007c41
 8007cac:	08007dbb 	.word	0x08007dbb
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	602a      	str	r2, [r5, #0]
 8007cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0a3      	b.n	8007e0c <_printf_i+0x1f4>
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	6829      	ldr	r1, [r5, #0]
 8007cc8:	0606      	lsls	r6, r0, #24
 8007cca:	f101 0304 	add.w	r3, r1, #4
 8007cce:	d50a      	bpl.n	8007ce6 <_printf_i+0xce>
 8007cd0:	680e      	ldr	r6, [r1, #0]
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	2e00      	cmp	r6, #0
 8007cd6:	da03      	bge.n	8007ce0 <_printf_i+0xc8>
 8007cd8:	232d      	movs	r3, #45	; 0x2d
 8007cda:	4276      	negs	r6, r6
 8007cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce0:	485e      	ldr	r0, [pc, #376]	; (8007e5c <_printf_i+0x244>)
 8007ce2:	230a      	movs	r3, #10
 8007ce4:	e019      	b.n	8007d1a <_printf_i+0x102>
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cee:	bf18      	it	ne
 8007cf0:	b236      	sxthne	r6, r6
 8007cf2:	e7ef      	b.n	8007cd4 <_printf_i+0xbc>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1d19      	adds	r1, r3, #4
 8007cfa:	6029      	str	r1, [r5, #0]
 8007cfc:	0601      	lsls	r1, r0, #24
 8007cfe:	d501      	bpl.n	8007d04 <_printf_i+0xec>
 8007d00:	681e      	ldr	r6, [r3, #0]
 8007d02:	e002      	b.n	8007d0a <_printf_i+0xf2>
 8007d04:	0646      	lsls	r6, r0, #25
 8007d06:	d5fb      	bpl.n	8007d00 <_printf_i+0xe8>
 8007d08:	881e      	ldrh	r6, [r3, #0]
 8007d0a:	4854      	ldr	r0, [pc, #336]	; (8007e5c <_printf_i+0x244>)
 8007d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d0e:	bf0c      	ite	eq
 8007d10:	2308      	moveq	r3, #8
 8007d12:	230a      	movne	r3, #10
 8007d14:	2100      	movs	r1, #0
 8007d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d1a:	6865      	ldr	r5, [r4, #4]
 8007d1c:	60a5      	str	r5, [r4, #8]
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	bfa2      	ittt	ge
 8007d22:	6821      	ldrge	r1, [r4, #0]
 8007d24:	f021 0104 	bicge.w	r1, r1, #4
 8007d28:	6021      	strge	r1, [r4, #0]
 8007d2a:	b90e      	cbnz	r6, 8007d30 <_printf_i+0x118>
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	d04d      	beq.n	8007dcc <_printf_i+0x1b4>
 8007d30:	4615      	mov	r5, r2
 8007d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d36:	fb03 6711 	mls	r7, r3, r1, r6
 8007d3a:	5dc7      	ldrb	r7, [r0, r7]
 8007d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d40:	4637      	mov	r7, r6
 8007d42:	42bb      	cmp	r3, r7
 8007d44:	460e      	mov	r6, r1
 8007d46:	d9f4      	bls.n	8007d32 <_printf_i+0x11a>
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d10b      	bne.n	8007d64 <_printf_i+0x14c>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	07de      	lsls	r6, r3, #31
 8007d50:	d508      	bpl.n	8007d64 <_printf_i+0x14c>
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	6861      	ldr	r1, [r4, #4]
 8007d56:	4299      	cmp	r1, r3
 8007d58:	bfde      	ittt	le
 8007d5a:	2330      	movle	r3, #48	; 0x30
 8007d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d64:	1b52      	subs	r2, r2, r5
 8007d66:	6122      	str	r2, [r4, #16]
 8007d68:	f8cd a000 	str.w	sl, [sp]
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	aa03      	add	r2, sp, #12
 8007d70:	4621      	mov	r1, r4
 8007d72:	4640      	mov	r0, r8
 8007d74:	f7ff fee2 	bl	8007b3c <_printf_common>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d14c      	bne.n	8007e16 <_printf_i+0x1fe>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	b004      	add	sp, #16
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	4835      	ldr	r0, [pc, #212]	; (8007e5c <_printf_i+0x244>)
 8007d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d8c:	6829      	ldr	r1, [r5, #0]
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d94:	6029      	str	r1, [r5, #0]
 8007d96:	061d      	lsls	r5, r3, #24
 8007d98:	d514      	bpl.n	8007dc4 <_printf_i+0x1ac>
 8007d9a:	07df      	lsls	r7, r3, #31
 8007d9c:	bf44      	itt	mi
 8007d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007da2:	6023      	strmi	r3, [r4, #0]
 8007da4:	b91e      	cbnz	r6, 8007dae <_printf_i+0x196>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	f023 0320 	bic.w	r3, r3, #32
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	2310      	movs	r3, #16
 8007db0:	e7b0      	b.n	8007d14 <_printf_i+0xfc>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	f043 0320 	orr.w	r3, r3, #32
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	2378      	movs	r3, #120	; 0x78
 8007dbc:	4828      	ldr	r0, [pc, #160]	; (8007e60 <_printf_i+0x248>)
 8007dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dc2:	e7e3      	b.n	8007d8c <_printf_i+0x174>
 8007dc4:	0659      	lsls	r1, r3, #25
 8007dc6:	bf48      	it	mi
 8007dc8:	b2b6      	uxthmi	r6, r6
 8007dca:	e7e6      	b.n	8007d9a <_printf_i+0x182>
 8007dcc:	4615      	mov	r5, r2
 8007dce:	e7bb      	b.n	8007d48 <_printf_i+0x130>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	6826      	ldr	r6, [r4, #0]
 8007dd4:	6961      	ldr	r1, [r4, #20]
 8007dd6:	1d18      	adds	r0, r3, #4
 8007dd8:	6028      	str	r0, [r5, #0]
 8007dda:	0635      	lsls	r5, r6, #24
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	d501      	bpl.n	8007de4 <_printf_i+0x1cc>
 8007de0:	6019      	str	r1, [r3, #0]
 8007de2:	e002      	b.n	8007dea <_printf_i+0x1d2>
 8007de4:	0670      	lsls	r0, r6, #25
 8007de6:	d5fb      	bpl.n	8007de0 <_printf_i+0x1c8>
 8007de8:	8019      	strh	r1, [r3, #0]
 8007dea:	2300      	movs	r3, #0
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	4615      	mov	r5, r2
 8007df0:	e7ba      	b.n	8007d68 <_printf_i+0x150>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	681d      	ldr	r5, [r3, #0]
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7f8 f9c6 	bl	8000190 <memchr>
 8007e04:	b108      	cbz	r0, 8007e0a <_printf_i+0x1f2>
 8007e06:	1b40      	subs	r0, r0, r5
 8007e08:	6060      	str	r0, [r4, #4]
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e14:	e7a8      	b.n	8007d68 <_printf_i+0x150>
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	47d0      	blx	sl
 8007e20:	3001      	adds	r0, #1
 8007e22:	d0ab      	beq.n	8007d7c <_printf_i+0x164>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	079b      	lsls	r3, r3, #30
 8007e28:	d413      	bmi.n	8007e52 <_printf_i+0x23a>
 8007e2a:	68e0      	ldr	r0, [r4, #12]
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	4298      	cmp	r0, r3
 8007e30:	bfb8      	it	lt
 8007e32:	4618      	movlt	r0, r3
 8007e34:	e7a4      	b.n	8007d80 <_printf_i+0x168>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4632      	mov	r2, r6
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	47d0      	blx	sl
 8007e40:	3001      	adds	r0, #1
 8007e42:	d09b      	beq.n	8007d7c <_printf_i+0x164>
 8007e44:	3501      	adds	r5, #1
 8007e46:	68e3      	ldr	r3, [r4, #12]
 8007e48:	9903      	ldr	r1, [sp, #12]
 8007e4a:	1a5b      	subs	r3, r3, r1
 8007e4c:	42ab      	cmp	r3, r5
 8007e4e:	dcf2      	bgt.n	8007e36 <_printf_i+0x21e>
 8007e50:	e7eb      	b.n	8007e2a <_printf_i+0x212>
 8007e52:	2500      	movs	r5, #0
 8007e54:	f104 0619 	add.w	r6, r4, #25
 8007e58:	e7f5      	b.n	8007e46 <_printf_i+0x22e>
 8007e5a:	bf00      	nop
 8007e5c:	0800c276 	.word	0x0800c276
 8007e60:	0800c287 	.word	0x0800c287

08007e64 <_scanf_float>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	b087      	sub	sp, #28
 8007e6a:	4617      	mov	r7, r2
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	688b      	ldr	r3, [r1, #8]
 8007e70:	1e5a      	subs	r2, r3, #1
 8007e72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e76:	bf83      	ittte	hi
 8007e78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e7c:	195b      	addhi	r3, r3, r5
 8007e7e:	9302      	strhi	r3, [sp, #8]
 8007e80:	2300      	movls	r3, #0
 8007e82:	bf86      	itte	hi
 8007e84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e88:	608b      	strhi	r3, [r1, #8]
 8007e8a:	9302      	strls	r3, [sp, #8]
 8007e8c:	680b      	ldr	r3, [r1, #0]
 8007e8e:	468b      	mov	fp, r1
 8007e90:	2500      	movs	r5, #0
 8007e92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e96:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	465e      	mov	r6, fp
 8007ea4:	46aa      	mov	sl, r5
 8007ea6:	46a9      	mov	r9, r5
 8007ea8:	9501      	str	r5, [sp, #4]
 8007eaa:	68a2      	ldr	r2, [r4, #8]
 8007eac:	b152      	cbz	r2, 8007ec4 <_scanf_float+0x60>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b4e      	cmp	r3, #78	; 0x4e
 8007eb4:	d864      	bhi.n	8007f80 <_scanf_float+0x11c>
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d83c      	bhi.n	8007f34 <_scanf_float+0xd0>
 8007eba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ebe:	b2c8      	uxtb	r0, r1
 8007ec0:	280e      	cmp	r0, #14
 8007ec2:	d93a      	bls.n	8007f3a <_scanf_float+0xd6>
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	d003      	beq.n	8007ed2 <_scanf_float+0x6e>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ed6:	f1ba 0f01 	cmp.w	sl, #1
 8007eda:	f200 8113 	bhi.w	8008104 <_scanf_float+0x2a0>
 8007ede:	455e      	cmp	r6, fp
 8007ee0:	f200 8105 	bhi.w	80080ee <_scanf_float+0x28a>
 8007ee4:	2501      	movs	r5, #1
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	b007      	add	sp, #28
 8007eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007ef2:	2a0d      	cmp	r2, #13
 8007ef4:	d8e6      	bhi.n	8007ec4 <_scanf_float+0x60>
 8007ef6:	a101      	add	r1, pc, #4	; (adr r1, 8007efc <_scanf_float+0x98>)
 8007ef8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007efc:	0800803b 	.word	0x0800803b
 8007f00:	08007ec5 	.word	0x08007ec5
 8007f04:	08007ec5 	.word	0x08007ec5
 8007f08:	08007ec5 	.word	0x08007ec5
 8007f0c:	0800809b 	.word	0x0800809b
 8007f10:	08008073 	.word	0x08008073
 8007f14:	08007ec5 	.word	0x08007ec5
 8007f18:	08007ec5 	.word	0x08007ec5
 8007f1c:	08008049 	.word	0x08008049
 8007f20:	08007ec5 	.word	0x08007ec5
 8007f24:	08007ec5 	.word	0x08007ec5
 8007f28:	08007ec5 	.word	0x08007ec5
 8007f2c:	08007ec5 	.word	0x08007ec5
 8007f30:	08008001 	.word	0x08008001
 8007f34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007f38:	e7db      	b.n	8007ef2 <_scanf_float+0x8e>
 8007f3a:	290e      	cmp	r1, #14
 8007f3c:	d8c2      	bhi.n	8007ec4 <_scanf_float+0x60>
 8007f3e:	a001      	add	r0, pc, #4	; (adr r0, 8007f44 <_scanf_float+0xe0>)
 8007f40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f44:	08007ff3 	.word	0x08007ff3
 8007f48:	08007ec5 	.word	0x08007ec5
 8007f4c:	08007ff3 	.word	0x08007ff3
 8007f50:	08008087 	.word	0x08008087
 8007f54:	08007ec5 	.word	0x08007ec5
 8007f58:	08007fa1 	.word	0x08007fa1
 8007f5c:	08007fdd 	.word	0x08007fdd
 8007f60:	08007fdd 	.word	0x08007fdd
 8007f64:	08007fdd 	.word	0x08007fdd
 8007f68:	08007fdd 	.word	0x08007fdd
 8007f6c:	08007fdd 	.word	0x08007fdd
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fdd 	.word	0x08007fdd
 8007f80:	2b6e      	cmp	r3, #110	; 0x6e
 8007f82:	d809      	bhi.n	8007f98 <_scanf_float+0x134>
 8007f84:	2b60      	cmp	r3, #96	; 0x60
 8007f86:	d8b2      	bhi.n	8007eee <_scanf_float+0x8a>
 8007f88:	2b54      	cmp	r3, #84	; 0x54
 8007f8a:	d077      	beq.n	800807c <_scanf_float+0x218>
 8007f8c:	2b59      	cmp	r3, #89	; 0x59
 8007f8e:	d199      	bne.n	8007ec4 <_scanf_float+0x60>
 8007f90:	2d07      	cmp	r5, #7
 8007f92:	d197      	bne.n	8007ec4 <_scanf_float+0x60>
 8007f94:	2508      	movs	r5, #8
 8007f96:	e029      	b.n	8007fec <_scanf_float+0x188>
 8007f98:	2b74      	cmp	r3, #116	; 0x74
 8007f9a:	d06f      	beq.n	800807c <_scanf_float+0x218>
 8007f9c:	2b79      	cmp	r3, #121	; 0x79
 8007f9e:	e7f6      	b.n	8007f8e <_scanf_float+0x12a>
 8007fa0:	6821      	ldr	r1, [r4, #0]
 8007fa2:	05c8      	lsls	r0, r1, #23
 8007fa4:	d51a      	bpl.n	8007fdc <_scanf_float+0x178>
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007fac:	6021      	str	r1, [r4, #0]
 8007fae:	f109 0901 	add.w	r9, r9, #1
 8007fb2:	b11b      	cbz	r3, 8007fbc <_scanf_float+0x158>
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	9302      	str	r3, [sp, #8]
 8007fba:	60a2      	str	r2, [r4, #8]
 8007fbc:	68a3      	ldr	r3, [r4, #8]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	f340 8084 	ble.w	80080dc <_scanf_float+0x278>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	e766      	b.n	8007eaa <_scanf_float+0x46>
 8007fdc:	eb1a 0f05 	cmn.w	sl, r5
 8007fe0:	f47f af70 	bne.w	8007ec4 <_scanf_float+0x60>
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007fea:	6022      	str	r2, [r4, #0]
 8007fec:	f806 3b01 	strb.w	r3, [r6], #1
 8007ff0:	e7e4      	b.n	8007fbc <_scanf_float+0x158>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	0610      	lsls	r0, r2, #24
 8007ff6:	f57f af65 	bpl.w	8007ec4 <_scanf_float+0x60>
 8007ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ffe:	e7f4      	b.n	8007fea <_scanf_float+0x186>
 8008000:	f1ba 0f00 	cmp.w	sl, #0
 8008004:	d10e      	bne.n	8008024 <_scanf_float+0x1c0>
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	d10e      	bne.n	800802a <_scanf_float+0x1c6>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008012:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008016:	d108      	bne.n	800802a <_scanf_float+0x1c6>
 8008018:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	f04f 0a01 	mov.w	sl, #1
 8008022:	e7e3      	b.n	8007fec <_scanf_float+0x188>
 8008024:	f1ba 0f02 	cmp.w	sl, #2
 8008028:	d055      	beq.n	80080d6 <_scanf_float+0x272>
 800802a:	2d01      	cmp	r5, #1
 800802c:	d002      	beq.n	8008034 <_scanf_float+0x1d0>
 800802e:	2d04      	cmp	r5, #4
 8008030:	f47f af48 	bne.w	8007ec4 <_scanf_float+0x60>
 8008034:	3501      	adds	r5, #1
 8008036:	b2ed      	uxtb	r5, r5
 8008038:	e7d8      	b.n	8007fec <_scanf_float+0x188>
 800803a:	f1ba 0f01 	cmp.w	sl, #1
 800803e:	f47f af41 	bne.w	8007ec4 <_scanf_float+0x60>
 8008042:	f04f 0a02 	mov.w	sl, #2
 8008046:	e7d1      	b.n	8007fec <_scanf_float+0x188>
 8008048:	b97d      	cbnz	r5, 800806a <_scanf_float+0x206>
 800804a:	f1b9 0f00 	cmp.w	r9, #0
 800804e:	f47f af3c 	bne.w	8007eca <_scanf_float+0x66>
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008058:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800805c:	f47f af39 	bne.w	8007ed2 <_scanf_float+0x6e>
 8008060:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008064:	6022      	str	r2, [r4, #0]
 8008066:	2501      	movs	r5, #1
 8008068:	e7c0      	b.n	8007fec <_scanf_float+0x188>
 800806a:	2d03      	cmp	r5, #3
 800806c:	d0e2      	beq.n	8008034 <_scanf_float+0x1d0>
 800806e:	2d05      	cmp	r5, #5
 8008070:	e7de      	b.n	8008030 <_scanf_float+0x1cc>
 8008072:	2d02      	cmp	r5, #2
 8008074:	f47f af26 	bne.w	8007ec4 <_scanf_float+0x60>
 8008078:	2503      	movs	r5, #3
 800807a:	e7b7      	b.n	8007fec <_scanf_float+0x188>
 800807c:	2d06      	cmp	r5, #6
 800807e:	f47f af21 	bne.w	8007ec4 <_scanf_float+0x60>
 8008082:	2507      	movs	r5, #7
 8008084:	e7b2      	b.n	8007fec <_scanf_float+0x188>
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	0591      	lsls	r1, r2, #22
 800808a:	f57f af1b 	bpl.w	8007ec4 <_scanf_float+0x60>
 800808e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008092:	6022      	str	r2, [r4, #0]
 8008094:	f8cd 9004 	str.w	r9, [sp, #4]
 8008098:	e7a8      	b.n	8007fec <_scanf_float+0x188>
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80080a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80080a4:	d006      	beq.n	80080b4 <_scanf_float+0x250>
 80080a6:	0550      	lsls	r0, r2, #21
 80080a8:	f57f af0c 	bpl.w	8007ec4 <_scanf_float+0x60>
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	f43f af0f 	beq.w	8007ed2 <_scanf_float+0x6e>
 80080b4:	0591      	lsls	r1, r2, #22
 80080b6:	bf58      	it	pl
 80080b8:	9901      	ldrpl	r1, [sp, #4]
 80080ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080be:	bf58      	it	pl
 80080c0:	eba9 0101 	subpl.w	r1, r9, r1
 80080c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80080c8:	bf58      	it	pl
 80080ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	f04f 0900 	mov.w	r9, #0
 80080d4:	e78a      	b.n	8007fec <_scanf_float+0x188>
 80080d6:	f04f 0a03 	mov.w	sl, #3
 80080da:	e787      	b.n	8007fec <_scanf_float+0x188>
 80080dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080e0:	4639      	mov	r1, r7
 80080e2:	4640      	mov	r0, r8
 80080e4:	4798      	blx	r3
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f aedf 	beq.w	8007eaa <_scanf_float+0x46>
 80080ec:	e6ea      	b.n	8007ec4 <_scanf_float+0x60>
 80080ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080f6:	463a      	mov	r2, r7
 80080f8:	4640      	mov	r0, r8
 80080fa:	4798      	blx	r3
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	3b01      	subs	r3, #1
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	e6ec      	b.n	8007ede <_scanf_float+0x7a>
 8008104:	1e6b      	subs	r3, r5, #1
 8008106:	2b06      	cmp	r3, #6
 8008108:	d825      	bhi.n	8008156 <_scanf_float+0x2f2>
 800810a:	2d02      	cmp	r5, #2
 800810c:	d836      	bhi.n	800817c <_scanf_float+0x318>
 800810e:	455e      	cmp	r6, fp
 8008110:	f67f aee8 	bls.w	8007ee4 <_scanf_float+0x80>
 8008114:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008118:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800811c:	463a      	mov	r2, r7
 800811e:	4640      	mov	r0, r8
 8008120:	4798      	blx	r3
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	3b01      	subs	r3, #1
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	e7f1      	b.n	800810e <_scanf_float+0x2aa>
 800812a:	9802      	ldr	r0, [sp, #8]
 800812c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008130:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008134:	9002      	str	r0, [sp, #8]
 8008136:	463a      	mov	r2, r7
 8008138:	4640      	mov	r0, r8
 800813a:	4798      	blx	r3
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	3b01      	subs	r3, #1
 8008140:	6123      	str	r3, [r4, #16]
 8008142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008146:	fa5f fa8a 	uxtb.w	sl, sl
 800814a:	f1ba 0f02 	cmp.w	sl, #2
 800814e:	d1ec      	bne.n	800812a <_scanf_float+0x2c6>
 8008150:	3d03      	subs	r5, #3
 8008152:	b2ed      	uxtb	r5, r5
 8008154:	1b76      	subs	r6, r6, r5
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	05da      	lsls	r2, r3, #23
 800815a:	d52f      	bpl.n	80081bc <_scanf_float+0x358>
 800815c:	055b      	lsls	r3, r3, #21
 800815e:	d510      	bpl.n	8008182 <_scanf_float+0x31e>
 8008160:	455e      	cmp	r6, fp
 8008162:	f67f aebf 	bls.w	8007ee4 <_scanf_float+0x80>
 8008166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800816a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800816e:	463a      	mov	r2, r7
 8008170:	4640      	mov	r0, r8
 8008172:	4798      	blx	r3
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	3b01      	subs	r3, #1
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	e7f1      	b.n	8008160 <_scanf_float+0x2fc>
 800817c:	46aa      	mov	sl, r5
 800817e:	9602      	str	r6, [sp, #8]
 8008180:	e7df      	b.n	8008142 <_scanf_float+0x2de>
 8008182:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	2965      	cmp	r1, #101	; 0x65
 800818a:	f103 33ff 	add.w	r3, r3, #4294967295
 800818e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	d00c      	beq.n	80081b0 <_scanf_float+0x34c>
 8008196:	2945      	cmp	r1, #69	; 0x45
 8008198:	d00a      	beq.n	80081b0 <_scanf_float+0x34c>
 800819a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800819e:	463a      	mov	r2, r7
 80081a0:	4640      	mov	r0, r8
 80081a2:	4798      	blx	r3
 80081a4:	6923      	ldr	r3, [r4, #16]
 80081a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	1eb5      	subs	r5, r6, #2
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081b4:	463a      	mov	r2, r7
 80081b6:	4640      	mov	r0, r8
 80081b8:	4798      	blx	r3
 80081ba:	462e      	mov	r6, r5
 80081bc:	6825      	ldr	r5, [r4, #0]
 80081be:	f015 0510 	ands.w	r5, r5, #16
 80081c2:	d159      	bne.n	8008278 <_scanf_float+0x414>
 80081c4:	7035      	strb	r5, [r6, #0]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d0:	d11b      	bne.n	800820a <_scanf_float+0x3a6>
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	454b      	cmp	r3, r9
 80081d6:	eba3 0209 	sub.w	r2, r3, r9
 80081da:	d123      	bne.n	8008224 <_scanf_float+0x3c0>
 80081dc:	2200      	movs	r2, #0
 80081de:	4659      	mov	r1, fp
 80081e0:	4640      	mov	r0, r8
 80081e2:	f000 ff27 	bl	8009034 <_strtod_r>
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	f012 0f02 	tst.w	r2, #2
 80081ee:	ec57 6b10 	vmov	r6, r7, d0
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	d021      	beq.n	800823a <_scanf_float+0x3d6>
 80081f6:	9903      	ldr	r1, [sp, #12]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	600a      	str	r2, [r1, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	e9c3 6700 	strd	r6, r7, [r3]
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60e3      	str	r3, [r4, #12]
 8008208:	e66d      	b.n	8007ee6 <_scanf_float+0x82>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0e5      	beq.n	80081dc <_scanf_float+0x378>
 8008210:	9905      	ldr	r1, [sp, #20]
 8008212:	230a      	movs	r3, #10
 8008214:	462a      	mov	r2, r5
 8008216:	3101      	adds	r1, #1
 8008218:	4640      	mov	r0, r8
 800821a:	f000 ff93 	bl	8009144 <_strtol_r>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	9e05      	ldr	r6, [sp, #20]
 8008222:	1ac2      	subs	r2, r0, r3
 8008224:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008228:	429e      	cmp	r6, r3
 800822a:	bf28      	it	cs
 800822c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008230:	4912      	ldr	r1, [pc, #72]	; (800827c <_scanf_float+0x418>)
 8008232:	4630      	mov	r0, r6
 8008234:	f000 f8ba 	bl	80083ac <siprintf>
 8008238:	e7d0      	b.n	80081dc <_scanf_float+0x378>
 800823a:	9903      	ldr	r1, [sp, #12]
 800823c:	f012 0f04 	tst.w	r2, #4
 8008240:	f103 0204 	add.w	r2, r3, #4
 8008244:	600a      	str	r2, [r1, #0]
 8008246:	d1d9      	bne.n	80081fc <_scanf_float+0x398>
 8008248:	f8d3 8000 	ldr.w	r8, [r3]
 800824c:	ee10 2a10 	vmov	r2, s0
 8008250:	ee10 0a10 	vmov	r0, s0
 8008254:	463b      	mov	r3, r7
 8008256:	4639      	mov	r1, r7
 8008258:	f7f8 fc40 	bl	8000adc <__aeabi_dcmpun>
 800825c:	b128      	cbz	r0, 800826a <_scanf_float+0x406>
 800825e:	4808      	ldr	r0, [pc, #32]	; (8008280 <_scanf_float+0x41c>)
 8008260:	f000 f89e 	bl	80083a0 <nanf>
 8008264:	ed88 0a00 	vstr	s0, [r8]
 8008268:	e7cb      	b.n	8008202 <_scanf_float+0x39e>
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 fc93 	bl	8000b98 <__aeabi_d2f>
 8008272:	f8c8 0000 	str.w	r0, [r8]
 8008276:	e7c4      	b.n	8008202 <_scanf_float+0x39e>
 8008278:	2500      	movs	r5, #0
 800827a:	e634      	b.n	8007ee6 <_scanf_float+0x82>
 800827c:	0800c298 	.word	0x0800c298
 8008280:	0800c708 	.word	0x0800c708

08008284 <iprintf>:
 8008284:	b40f      	push	{r0, r1, r2, r3}
 8008286:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <iprintf+0x2c>)
 8008288:	b513      	push	{r0, r1, r4, lr}
 800828a:	681c      	ldr	r4, [r3, #0]
 800828c:	b124      	cbz	r4, 8008298 <iprintf+0x14>
 800828e:	69a3      	ldr	r3, [r4, #24]
 8008290:	b913      	cbnz	r3, 8008298 <iprintf+0x14>
 8008292:	4620      	mov	r0, r4
 8008294:	f001 ffac 	bl	800a1f0 <__sinit>
 8008298:	ab05      	add	r3, sp, #20
 800829a:	9a04      	ldr	r2, [sp, #16]
 800829c:	68a1      	ldr	r1, [r4, #8]
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f003 fb75 	bl	800b990 <_vfiprintf_r>
 80082a6:	b002      	add	sp, #8
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr
 80082b0:	2000001c 	.word	0x2000001c

080082b4 <_puts_r>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	460e      	mov	r6, r1
 80082b8:	4605      	mov	r5, r0
 80082ba:	b118      	cbz	r0, 80082c4 <_puts_r+0x10>
 80082bc:	6983      	ldr	r3, [r0, #24]
 80082be:	b90b      	cbnz	r3, 80082c4 <_puts_r+0x10>
 80082c0:	f001 ff96 	bl	800a1f0 <__sinit>
 80082c4:	69ab      	ldr	r3, [r5, #24]
 80082c6:	68ac      	ldr	r4, [r5, #8]
 80082c8:	b913      	cbnz	r3, 80082d0 <_puts_r+0x1c>
 80082ca:	4628      	mov	r0, r5
 80082cc:	f001 ff90 	bl	800a1f0 <__sinit>
 80082d0:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <_puts_r+0xd0>)
 80082d2:	429c      	cmp	r4, r3
 80082d4:	d120      	bne.n	8008318 <_puts_r+0x64>
 80082d6:	686c      	ldr	r4, [r5, #4]
 80082d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082da:	07db      	lsls	r3, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_puts_r+0x36>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	0598      	lsls	r0, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_puts_r+0x36>
 80082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e6:	f002 fb94 	bl	800aa12 <__retarget_lock_acquire_recursive>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	0719      	lsls	r1, r3, #28
 80082ee:	d51d      	bpl.n	800832c <_puts_r+0x78>
 80082f0:	6923      	ldr	r3, [r4, #16]
 80082f2:	b1db      	cbz	r3, 800832c <_puts_r+0x78>
 80082f4:	3e01      	subs	r6, #1
 80082f6:	68a3      	ldr	r3, [r4, #8]
 80082f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082fc:	3b01      	subs	r3, #1
 80082fe:	60a3      	str	r3, [r4, #8]
 8008300:	bb39      	cbnz	r1, 8008352 <_puts_r+0x9e>
 8008302:	2b00      	cmp	r3, #0
 8008304:	da38      	bge.n	8008378 <_puts_r+0xc4>
 8008306:	4622      	mov	r2, r4
 8008308:	210a      	movs	r1, #10
 800830a:	4628      	mov	r0, r5
 800830c:	f000 ff1c 	bl	8009148 <__swbuf_r>
 8008310:	3001      	adds	r0, #1
 8008312:	d011      	beq.n	8008338 <_puts_r+0x84>
 8008314:	250a      	movs	r5, #10
 8008316:	e011      	b.n	800833c <_puts_r+0x88>
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <_puts_r+0xd4>)
 800831a:	429c      	cmp	r4, r3
 800831c:	d101      	bne.n	8008322 <_puts_r+0x6e>
 800831e:	68ac      	ldr	r4, [r5, #8]
 8008320:	e7da      	b.n	80082d8 <_puts_r+0x24>
 8008322:	4b1a      	ldr	r3, [pc, #104]	; (800838c <_puts_r+0xd8>)
 8008324:	429c      	cmp	r4, r3
 8008326:	bf08      	it	eq
 8008328:	68ec      	ldreq	r4, [r5, #12]
 800832a:	e7d5      	b.n	80082d8 <_puts_r+0x24>
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 ff5c 	bl	80091ec <__swsetup_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	d0dd      	beq.n	80082f4 <_puts_r+0x40>
 8008338:	f04f 35ff 	mov.w	r5, #4294967295
 800833c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800833e:	07da      	lsls	r2, r3, #31
 8008340:	d405      	bmi.n	800834e <_puts_r+0x9a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	059b      	lsls	r3, r3, #22
 8008346:	d402      	bmi.n	800834e <_puts_r+0x9a>
 8008348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834a:	f002 fb63 	bl	800aa14 <__retarget_lock_release_recursive>
 800834e:	4628      	mov	r0, r5
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	2b00      	cmp	r3, #0
 8008354:	da04      	bge.n	8008360 <_puts_r+0xac>
 8008356:	69a2      	ldr	r2, [r4, #24]
 8008358:	429a      	cmp	r2, r3
 800835a:	dc06      	bgt.n	800836a <_puts_r+0xb6>
 800835c:	290a      	cmp	r1, #10
 800835e:	d004      	beq.n	800836a <_puts_r+0xb6>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	7019      	strb	r1, [r3, #0]
 8008368:	e7c5      	b.n	80082f6 <_puts_r+0x42>
 800836a:	4622      	mov	r2, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f000 feeb 	bl	8009148 <__swbuf_r>
 8008372:	3001      	adds	r0, #1
 8008374:	d1bf      	bne.n	80082f6 <_puts_r+0x42>
 8008376:	e7df      	b.n	8008338 <_puts_r+0x84>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	250a      	movs	r5, #10
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	701d      	strb	r5, [r3, #0]
 8008382:	e7db      	b.n	800833c <_puts_r+0x88>
 8008384:	0800c4a4 	.word	0x0800c4a4
 8008388:	0800c4c4 	.word	0x0800c4c4
 800838c:	0800c484 	.word	0x0800c484

08008390 <puts>:
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <puts+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f7ff bf8d 	b.w	80082b4 <_puts_r>
 800839a:	bf00      	nop
 800839c:	2000001c 	.word	0x2000001c

080083a0 <nanf>:
 80083a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a8 <nanf+0x8>
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	7fc00000 	.word	0x7fc00000

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	b500      	push	{lr}
 80083b0:	b09c      	sub	sp, #112	; 0x70
 80083b2:	ab1d      	add	r3, sp, #116	; 0x74
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <siprintf+0x38>)
 80083be:	9107      	str	r1, [sp, #28]
 80083c0:	9104      	str	r1, [sp, #16]
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	a902      	add	r1, sp, #8
 80083d0:	f003 f9b4 	bl	800b73c <_svfiprintf_r>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	2000001c 	.word	0x2000001c
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <sulp>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	ec45 4b10 	vmov	d0, r4, r5
 80083f6:	4616      	mov	r6, r2
 80083f8:	f002 fefe 	bl	800b1f8 <__ulp>
 80083fc:	ec51 0b10 	vmov	r0, r1, d0
 8008400:	b17e      	cbz	r6, 8008422 <sulp+0x36>
 8008402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008406:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800840a:	2b00      	cmp	r3, #0
 800840c:	dd09      	ble.n	8008422 <sulp+0x36>
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008414:	2400      	movs	r4, #0
 8008416:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800841a:	4622      	mov	r2, r4
 800841c:	462b      	mov	r3, r5
 800841e:	f7f8 f8c3 	bl	80005a8 <__aeabi_dmul>
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	0000      	movs	r0, r0
	...

08008428 <_strtod_l>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ed2d 8b02 	vpush	{d8}
 8008430:	b09d      	sub	sp, #116	; 0x74
 8008432:	461f      	mov	r7, r3
 8008434:	2300      	movs	r3, #0
 8008436:	9318      	str	r3, [sp, #96]	; 0x60
 8008438:	4ba2      	ldr	r3, [pc, #648]	; (80086c4 <_strtod_l+0x29c>)
 800843a:	9213      	str	r2, [sp, #76]	; 0x4c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	4604      	mov	r4, r0
 8008442:	4618      	mov	r0, r3
 8008444:	4688      	mov	r8, r1
 8008446:	f7f7 fe9b 	bl	8000180 <strlen>
 800844a:	f04f 0a00 	mov.w	sl, #0
 800844e:	4605      	mov	r5, r0
 8008450:	f04f 0b00 	mov.w	fp, #0
 8008454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	2a2b      	cmp	r2, #43	; 0x2b
 800845e:	d04e      	beq.n	80084fe <_strtod_l+0xd6>
 8008460:	d83b      	bhi.n	80084da <_strtod_l+0xb2>
 8008462:	2a0d      	cmp	r2, #13
 8008464:	d834      	bhi.n	80084d0 <_strtod_l+0xa8>
 8008466:	2a08      	cmp	r2, #8
 8008468:	d834      	bhi.n	80084d4 <_strtod_l+0xac>
 800846a:	2a00      	cmp	r2, #0
 800846c:	d03e      	beq.n	80084ec <_strtod_l+0xc4>
 800846e:	2300      	movs	r3, #0
 8008470:	930a      	str	r3, [sp, #40]	; 0x28
 8008472:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008474:	7833      	ldrb	r3, [r6, #0]
 8008476:	2b30      	cmp	r3, #48	; 0x30
 8008478:	f040 80b0 	bne.w	80085dc <_strtod_l+0x1b4>
 800847c:	7873      	ldrb	r3, [r6, #1]
 800847e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008482:	2b58      	cmp	r3, #88	; 0x58
 8008484:	d168      	bne.n	8008558 <_strtod_l+0x130>
 8008486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	ab18      	add	r3, sp, #96	; 0x60
 800848c:	9702      	str	r7, [sp, #8]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4a8d      	ldr	r2, [pc, #564]	; (80086c8 <_strtod_l+0x2a0>)
 8008492:	ab19      	add	r3, sp, #100	; 0x64
 8008494:	a917      	add	r1, sp, #92	; 0x5c
 8008496:	4620      	mov	r0, r4
 8008498:	f001 ffae 	bl	800a3f8 <__gethex>
 800849c:	f010 0707 	ands.w	r7, r0, #7
 80084a0:	4605      	mov	r5, r0
 80084a2:	d005      	beq.n	80084b0 <_strtod_l+0x88>
 80084a4:	2f06      	cmp	r7, #6
 80084a6:	d12c      	bne.n	8008502 <_strtod_l+0xda>
 80084a8:	3601      	adds	r6, #1
 80084aa:	2300      	movs	r3, #0
 80084ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80084ae:	930a      	str	r3, [sp, #40]	; 0x28
 80084b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 8590 	bne.w	8008fd8 <_strtod_l+0xbb0>
 80084b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ba:	b1eb      	cbz	r3, 80084f8 <_strtod_l+0xd0>
 80084bc:	4652      	mov	r2, sl
 80084be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084c2:	ec43 2b10 	vmov	d0, r2, r3
 80084c6:	b01d      	add	sp, #116	; 0x74
 80084c8:	ecbd 8b02 	vpop	{d8}
 80084cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d0:	2a20      	cmp	r2, #32
 80084d2:	d1cc      	bne.n	800846e <_strtod_l+0x46>
 80084d4:	3301      	adds	r3, #1
 80084d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80084d8:	e7be      	b.n	8008458 <_strtod_l+0x30>
 80084da:	2a2d      	cmp	r2, #45	; 0x2d
 80084dc:	d1c7      	bne.n	800846e <_strtod_l+0x46>
 80084de:	2201      	movs	r2, #1
 80084e0:	920a      	str	r2, [sp, #40]	; 0x28
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1c2      	bne.n	8008472 <_strtod_l+0x4a>
 80084ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 856e 	bne.w	8008fd4 <_strtod_l+0xbac>
 80084f8:	4652      	mov	r2, sl
 80084fa:	465b      	mov	r3, fp
 80084fc:	e7e1      	b.n	80084c2 <_strtod_l+0x9a>
 80084fe:	2200      	movs	r2, #0
 8008500:	e7ee      	b.n	80084e0 <_strtod_l+0xb8>
 8008502:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008504:	b13a      	cbz	r2, 8008516 <_strtod_l+0xee>
 8008506:	2135      	movs	r1, #53	; 0x35
 8008508:	a81a      	add	r0, sp, #104	; 0x68
 800850a:	f002 ff80 	bl	800b40e <__copybits>
 800850e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008510:	4620      	mov	r0, r4
 8008512:	f002 fb3f 	bl	800ab94 <_Bfree>
 8008516:	3f01      	subs	r7, #1
 8008518:	2f04      	cmp	r7, #4
 800851a:	d806      	bhi.n	800852a <_strtod_l+0x102>
 800851c:	e8df f007 	tbb	[pc, r7]
 8008520:	1714030a 	.word	0x1714030a
 8008524:	0a          	.byte	0x0a
 8008525:	00          	.byte	0x00
 8008526:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800852a:	0728      	lsls	r0, r5, #28
 800852c:	d5c0      	bpl.n	80084b0 <_strtod_l+0x88>
 800852e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008532:	e7bd      	b.n	80084b0 <_strtod_l+0x88>
 8008534:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008538:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800853a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800853e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008542:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008546:	e7f0      	b.n	800852a <_strtod_l+0x102>
 8008548:	f8df b180 	ldr.w	fp, [pc, #384]	; 80086cc <_strtod_l+0x2a4>
 800854c:	e7ed      	b.n	800852a <_strtod_l+0x102>
 800854e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008552:	f04f 3aff 	mov.w	sl, #4294967295
 8008556:	e7e8      	b.n	800852a <_strtod_l+0x102>
 8008558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	9217      	str	r2, [sp, #92]	; 0x5c
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	2b30      	cmp	r3, #48	; 0x30
 8008562:	d0f9      	beq.n	8008558 <_strtod_l+0x130>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0a3      	beq.n	80084b0 <_strtod_l+0x88>
 8008568:	2301      	movs	r3, #1
 800856a:	f04f 0900 	mov.w	r9, #0
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008572:	9308      	str	r3, [sp, #32]
 8008574:	f8cd 901c 	str.w	r9, [sp, #28]
 8008578:	464f      	mov	r7, r9
 800857a:	220a      	movs	r2, #10
 800857c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800857e:	7806      	ldrb	r6, [r0, #0]
 8008580:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008584:	b2d9      	uxtb	r1, r3
 8008586:	2909      	cmp	r1, #9
 8008588:	d92a      	bls.n	80085e0 <_strtod_l+0x1b8>
 800858a:	9905      	ldr	r1, [sp, #20]
 800858c:	462a      	mov	r2, r5
 800858e:	f003 fb8a 	bl	800bca6 <strncmp>
 8008592:	b398      	cbz	r0, 80085fc <_strtod_l+0x1d4>
 8008594:	2000      	movs	r0, #0
 8008596:	4632      	mov	r2, r6
 8008598:	463d      	mov	r5, r7
 800859a:	9005      	str	r0, [sp, #20]
 800859c:	4603      	mov	r3, r0
 800859e:	2a65      	cmp	r2, #101	; 0x65
 80085a0:	d001      	beq.n	80085a6 <_strtod_l+0x17e>
 80085a2:	2a45      	cmp	r2, #69	; 0x45
 80085a4:	d118      	bne.n	80085d8 <_strtod_l+0x1b0>
 80085a6:	b91d      	cbnz	r5, 80085b0 <_strtod_l+0x188>
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	4302      	orrs	r2, r0
 80085ac:	d09e      	beq.n	80084ec <_strtod_l+0xc4>
 80085ae:	2500      	movs	r5, #0
 80085b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80085b4:	f108 0201 	add.w	r2, r8, #1
 80085b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80085ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80085be:	2a2b      	cmp	r2, #43	; 0x2b
 80085c0:	d075      	beq.n	80086ae <_strtod_l+0x286>
 80085c2:	2a2d      	cmp	r2, #45	; 0x2d
 80085c4:	d07b      	beq.n	80086be <_strtod_l+0x296>
 80085c6:	f04f 0c00 	mov.w	ip, #0
 80085ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80085ce:	2909      	cmp	r1, #9
 80085d0:	f240 8082 	bls.w	80086d8 <_strtod_l+0x2b0>
 80085d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80085d8:	2600      	movs	r6, #0
 80085da:	e09d      	b.n	8008718 <_strtod_l+0x2f0>
 80085dc:	2300      	movs	r3, #0
 80085de:	e7c4      	b.n	800856a <_strtod_l+0x142>
 80085e0:	2f08      	cmp	r7, #8
 80085e2:	bfd8      	it	le
 80085e4:	9907      	ldrle	r1, [sp, #28]
 80085e6:	f100 0001 	add.w	r0, r0, #1
 80085ea:	bfda      	itte	le
 80085ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80085f0:	9307      	strle	r3, [sp, #28]
 80085f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80085f6:	3701      	adds	r7, #1
 80085f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80085fa:	e7bf      	b.n	800857c <_strtod_l+0x154>
 80085fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085fe:	195a      	adds	r2, r3, r5
 8008600:	9217      	str	r2, [sp, #92]	; 0x5c
 8008602:	5d5a      	ldrb	r2, [r3, r5]
 8008604:	2f00      	cmp	r7, #0
 8008606:	d037      	beq.n	8008678 <_strtod_l+0x250>
 8008608:	9005      	str	r0, [sp, #20]
 800860a:	463d      	mov	r5, r7
 800860c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008610:	2b09      	cmp	r3, #9
 8008612:	d912      	bls.n	800863a <_strtod_l+0x212>
 8008614:	2301      	movs	r3, #1
 8008616:	e7c2      	b.n	800859e <_strtod_l+0x176>
 8008618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	9217      	str	r2, [sp, #92]	; 0x5c
 800861e:	785a      	ldrb	r2, [r3, #1]
 8008620:	3001      	adds	r0, #1
 8008622:	2a30      	cmp	r2, #48	; 0x30
 8008624:	d0f8      	beq.n	8008618 <_strtod_l+0x1f0>
 8008626:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800862a:	2b08      	cmp	r3, #8
 800862c:	f200 84d9 	bhi.w	8008fe2 <_strtod_l+0xbba>
 8008630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008632:	9005      	str	r0, [sp, #20]
 8008634:	2000      	movs	r0, #0
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	4605      	mov	r5, r0
 800863a:	3a30      	subs	r2, #48	; 0x30
 800863c:	f100 0301 	add.w	r3, r0, #1
 8008640:	d014      	beq.n	800866c <_strtod_l+0x244>
 8008642:	9905      	ldr	r1, [sp, #20]
 8008644:	4419      	add	r1, r3
 8008646:	9105      	str	r1, [sp, #20]
 8008648:	462b      	mov	r3, r5
 800864a:	eb00 0e05 	add.w	lr, r0, r5
 800864e:	210a      	movs	r1, #10
 8008650:	4573      	cmp	r3, lr
 8008652:	d113      	bne.n	800867c <_strtod_l+0x254>
 8008654:	182b      	adds	r3, r5, r0
 8008656:	2b08      	cmp	r3, #8
 8008658:	f105 0501 	add.w	r5, r5, #1
 800865c:	4405      	add	r5, r0
 800865e:	dc1c      	bgt.n	800869a <_strtod_l+0x272>
 8008660:	9907      	ldr	r1, [sp, #28]
 8008662:	230a      	movs	r3, #10
 8008664:	fb03 2301 	mla	r3, r3, r1, r2
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	2300      	movs	r3, #0
 800866c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800866e:	1c51      	adds	r1, r2, #1
 8008670:	9117      	str	r1, [sp, #92]	; 0x5c
 8008672:	7852      	ldrb	r2, [r2, #1]
 8008674:	4618      	mov	r0, r3
 8008676:	e7c9      	b.n	800860c <_strtod_l+0x1e4>
 8008678:	4638      	mov	r0, r7
 800867a:	e7d2      	b.n	8008622 <_strtod_l+0x1fa>
 800867c:	2b08      	cmp	r3, #8
 800867e:	dc04      	bgt.n	800868a <_strtod_l+0x262>
 8008680:	9e07      	ldr	r6, [sp, #28]
 8008682:	434e      	muls	r6, r1
 8008684:	9607      	str	r6, [sp, #28]
 8008686:	3301      	adds	r3, #1
 8008688:	e7e2      	b.n	8008650 <_strtod_l+0x228>
 800868a:	f103 0c01 	add.w	ip, r3, #1
 800868e:	f1bc 0f10 	cmp.w	ip, #16
 8008692:	bfd8      	it	le
 8008694:	fb01 f909 	mulle.w	r9, r1, r9
 8008698:	e7f5      	b.n	8008686 <_strtod_l+0x25e>
 800869a:	2d10      	cmp	r5, #16
 800869c:	bfdc      	itt	le
 800869e:	230a      	movle	r3, #10
 80086a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80086a4:	e7e1      	b.n	800866a <_strtod_l+0x242>
 80086a6:	2300      	movs	r3, #0
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	2301      	movs	r3, #1
 80086ac:	e77c      	b.n	80085a8 <_strtod_l+0x180>
 80086ae:	f04f 0c00 	mov.w	ip, #0
 80086b2:	f108 0202 	add.w	r2, r8, #2
 80086b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80086b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80086bc:	e785      	b.n	80085ca <_strtod_l+0x1a2>
 80086be:	f04f 0c01 	mov.w	ip, #1
 80086c2:	e7f6      	b.n	80086b2 <_strtod_l+0x28a>
 80086c4:	0800c54c 	.word	0x0800c54c
 80086c8:	0800c2a0 	.word	0x0800c2a0
 80086cc:	7ff00000 	.word	0x7ff00000
 80086d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086d2:	1c51      	adds	r1, r2, #1
 80086d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80086d6:	7852      	ldrb	r2, [r2, #1]
 80086d8:	2a30      	cmp	r2, #48	; 0x30
 80086da:	d0f9      	beq.n	80086d0 <_strtod_l+0x2a8>
 80086dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80086e0:	2908      	cmp	r1, #8
 80086e2:	f63f af79 	bhi.w	80085d8 <_strtod_l+0x1b0>
 80086e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80086ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086ec:	9206      	str	r2, [sp, #24]
 80086ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086f0:	1c51      	adds	r1, r2, #1
 80086f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80086f4:	7852      	ldrb	r2, [r2, #1]
 80086f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80086fa:	2e09      	cmp	r6, #9
 80086fc:	d937      	bls.n	800876e <_strtod_l+0x346>
 80086fe:	9e06      	ldr	r6, [sp, #24]
 8008700:	1b89      	subs	r1, r1, r6
 8008702:	2908      	cmp	r1, #8
 8008704:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008708:	dc02      	bgt.n	8008710 <_strtod_l+0x2e8>
 800870a:	4576      	cmp	r6, lr
 800870c:	bfa8      	it	ge
 800870e:	4676      	movge	r6, lr
 8008710:	f1bc 0f00 	cmp.w	ip, #0
 8008714:	d000      	beq.n	8008718 <_strtod_l+0x2f0>
 8008716:	4276      	negs	r6, r6
 8008718:	2d00      	cmp	r5, #0
 800871a:	d14d      	bne.n	80087b8 <_strtod_l+0x390>
 800871c:	9904      	ldr	r1, [sp, #16]
 800871e:	4301      	orrs	r1, r0
 8008720:	f47f aec6 	bne.w	80084b0 <_strtod_l+0x88>
 8008724:	2b00      	cmp	r3, #0
 8008726:	f47f aee1 	bne.w	80084ec <_strtod_l+0xc4>
 800872a:	2a69      	cmp	r2, #105	; 0x69
 800872c:	d027      	beq.n	800877e <_strtod_l+0x356>
 800872e:	dc24      	bgt.n	800877a <_strtod_l+0x352>
 8008730:	2a49      	cmp	r2, #73	; 0x49
 8008732:	d024      	beq.n	800877e <_strtod_l+0x356>
 8008734:	2a4e      	cmp	r2, #78	; 0x4e
 8008736:	f47f aed9 	bne.w	80084ec <_strtod_l+0xc4>
 800873a:	499f      	ldr	r1, [pc, #636]	; (80089b8 <_strtod_l+0x590>)
 800873c:	a817      	add	r0, sp, #92	; 0x5c
 800873e:	f002 f8b3 	bl	800a8a8 <__match>
 8008742:	2800      	cmp	r0, #0
 8008744:	f43f aed2 	beq.w	80084ec <_strtod_l+0xc4>
 8008748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b28      	cmp	r3, #40	; 0x28
 800874e:	d12d      	bne.n	80087ac <_strtod_l+0x384>
 8008750:	499a      	ldr	r1, [pc, #616]	; (80089bc <_strtod_l+0x594>)
 8008752:	aa1a      	add	r2, sp, #104	; 0x68
 8008754:	a817      	add	r0, sp, #92	; 0x5c
 8008756:	f002 f8bb 	bl	800a8d0 <__hexnan>
 800875a:	2805      	cmp	r0, #5
 800875c:	d126      	bne.n	80087ac <_strtod_l+0x384>
 800875e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008760:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008764:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008768:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800876c:	e6a0      	b.n	80084b0 <_strtod_l+0x88>
 800876e:	210a      	movs	r1, #10
 8008770:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008774:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008778:	e7b9      	b.n	80086ee <_strtod_l+0x2c6>
 800877a:	2a6e      	cmp	r2, #110	; 0x6e
 800877c:	e7db      	b.n	8008736 <_strtod_l+0x30e>
 800877e:	4990      	ldr	r1, [pc, #576]	; (80089c0 <_strtod_l+0x598>)
 8008780:	a817      	add	r0, sp, #92	; 0x5c
 8008782:	f002 f891 	bl	800a8a8 <__match>
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f aeb0 	beq.w	80084ec <_strtod_l+0xc4>
 800878c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800878e:	498d      	ldr	r1, [pc, #564]	; (80089c4 <_strtod_l+0x59c>)
 8008790:	3b01      	subs	r3, #1
 8008792:	a817      	add	r0, sp, #92	; 0x5c
 8008794:	9317      	str	r3, [sp, #92]	; 0x5c
 8008796:	f002 f887 	bl	800a8a8 <__match>
 800879a:	b910      	cbnz	r0, 80087a2 <_strtod_l+0x37a>
 800879c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800879e:	3301      	adds	r3, #1
 80087a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80087a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80089d4 <_strtod_l+0x5ac>
 80087a6:	f04f 0a00 	mov.w	sl, #0
 80087aa:	e681      	b.n	80084b0 <_strtod_l+0x88>
 80087ac:	4886      	ldr	r0, [pc, #536]	; (80089c8 <_strtod_l+0x5a0>)
 80087ae:	f003 fa1f 	bl	800bbf0 <nan>
 80087b2:	ec5b ab10 	vmov	sl, fp, d0
 80087b6:	e67b      	b.n	80084b0 <_strtod_l+0x88>
 80087b8:	9b05      	ldr	r3, [sp, #20]
 80087ba:	9807      	ldr	r0, [sp, #28]
 80087bc:	1af3      	subs	r3, r6, r3
 80087be:	2f00      	cmp	r7, #0
 80087c0:	bf08      	it	eq
 80087c2:	462f      	moveq	r7, r5
 80087c4:	2d10      	cmp	r5, #16
 80087c6:	9306      	str	r3, [sp, #24]
 80087c8:	46a8      	mov	r8, r5
 80087ca:	bfa8      	it	ge
 80087cc:	f04f 0810 	movge.w	r8, #16
 80087d0:	f7f7 fe70 	bl	80004b4 <__aeabi_ui2d>
 80087d4:	2d09      	cmp	r5, #9
 80087d6:	4682      	mov	sl, r0
 80087d8:	468b      	mov	fp, r1
 80087da:	dd13      	ble.n	8008804 <_strtod_l+0x3dc>
 80087dc:	4b7b      	ldr	r3, [pc, #492]	; (80089cc <_strtod_l+0x5a4>)
 80087de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80087e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80087e6:	f7f7 fedf 	bl	80005a8 <__aeabi_dmul>
 80087ea:	4682      	mov	sl, r0
 80087ec:	4648      	mov	r0, r9
 80087ee:	468b      	mov	fp, r1
 80087f0:	f7f7 fe60 	bl	80004b4 <__aeabi_ui2d>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f7 fd1e 	bl	800023c <__adddf3>
 8008800:	4682      	mov	sl, r0
 8008802:	468b      	mov	fp, r1
 8008804:	2d0f      	cmp	r5, #15
 8008806:	dc38      	bgt.n	800887a <_strtod_l+0x452>
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f43f ae50 	beq.w	80084b0 <_strtod_l+0x88>
 8008810:	dd24      	ble.n	800885c <_strtod_l+0x434>
 8008812:	2b16      	cmp	r3, #22
 8008814:	dc0b      	bgt.n	800882e <_strtod_l+0x406>
 8008816:	496d      	ldr	r1, [pc, #436]	; (80089cc <_strtod_l+0x5a4>)
 8008818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800881c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008820:	4652      	mov	r2, sl
 8008822:	465b      	mov	r3, fp
 8008824:	f7f7 fec0 	bl	80005a8 <__aeabi_dmul>
 8008828:	4682      	mov	sl, r0
 800882a:	468b      	mov	fp, r1
 800882c:	e640      	b.n	80084b0 <_strtod_l+0x88>
 800882e:	9a06      	ldr	r2, [sp, #24]
 8008830:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008834:	4293      	cmp	r3, r2
 8008836:	db20      	blt.n	800887a <_strtod_l+0x452>
 8008838:	4c64      	ldr	r4, [pc, #400]	; (80089cc <_strtod_l+0x5a4>)
 800883a:	f1c5 050f 	rsb	r5, r5, #15
 800883e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008842:	4652      	mov	r2, sl
 8008844:	465b      	mov	r3, fp
 8008846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884a:	f7f7 fead 	bl	80005a8 <__aeabi_dmul>
 800884e:	9b06      	ldr	r3, [sp, #24]
 8008850:	1b5d      	subs	r5, r3, r5
 8008852:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008856:	e9d4 2300 	ldrd	r2, r3, [r4]
 800885a:	e7e3      	b.n	8008824 <_strtod_l+0x3fc>
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	3316      	adds	r3, #22
 8008860:	db0b      	blt.n	800887a <_strtod_l+0x452>
 8008862:	9b05      	ldr	r3, [sp, #20]
 8008864:	1b9e      	subs	r6, r3, r6
 8008866:	4b59      	ldr	r3, [pc, #356]	; (80089cc <_strtod_l+0x5a4>)
 8008868:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800886c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008870:	4650      	mov	r0, sl
 8008872:	4659      	mov	r1, fp
 8008874:	f7f7 ffc2 	bl	80007fc <__aeabi_ddiv>
 8008878:	e7d6      	b.n	8008828 <_strtod_l+0x400>
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	eba5 0808 	sub.w	r8, r5, r8
 8008880:	4498      	add	r8, r3
 8008882:	f1b8 0f00 	cmp.w	r8, #0
 8008886:	dd74      	ble.n	8008972 <_strtod_l+0x54a>
 8008888:	f018 030f 	ands.w	r3, r8, #15
 800888c:	d00a      	beq.n	80088a4 <_strtod_l+0x47c>
 800888e:	494f      	ldr	r1, [pc, #316]	; (80089cc <_strtod_l+0x5a4>)
 8008890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008894:	4652      	mov	r2, sl
 8008896:	465b      	mov	r3, fp
 8008898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889c:	f7f7 fe84 	bl	80005a8 <__aeabi_dmul>
 80088a0:	4682      	mov	sl, r0
 80088a2:	468b      	mov	fp, r1
 80088a4:	f038 080f 	bics.w	r8, r8, #15
 80088a8:	d04f      	beq.n	800894a <_strtod_l+0x522>
 80088aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80088ae:	dd22      	ble.n	80088f6 <_strtod_l+0x4ce>
 80088b0:	2500      	movs	r5, #0
 80088b2:	462e      	mov	r6, r5
 80088b4:	9507      	str	r5, [sp, #28]
 80088b6:	9505      	str	r5, [sp, #20]
 80088b8:	2322      	movs	r3, #34	; 0x22
 80088ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80089d4 <_strtod_l+0x5ac>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	f04f 0a00 	mov.w	sl, #0
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f43f adf2 	beq.w	80084b0 <_strtod_l+0x88>
 80088cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088ce:	4620      	mov	r0, r4
 80088d0:	f002 f960 	bl	800ab94 <_Bfree>
 80088d4:	9905      	ldr	r1, [sp, #20]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f002 f95c 	bl	800ab94 <_Bfree>
 80088dc:	4631      	mov	r1, r6
 80088de:	4620      	mov	r0, r4
 80088e0:	f002 f958 	bl	800ab94 <_Bfree>
 80088e4:	9907      	ldr	r1, [sp, #28]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f002 f954 	bl	800ab94 <_Bfree>
 80088ec:	4629      	mov	r1, r5
 80088ee:	4620      	mov	r0, r4
 80088f0:	f002 f950 	bl	800ab94 <_Bfree>
 80088f4:	e5dc      	b.n	80084b0 <_strtod_l+0x88>
 80088f6:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <_strtod_l+0x5a8>)
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	2300      	movs	r3, #0
 80088fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008900:	4650      	mov	r0, sl
 8008902:	4659      	mov	r1, fp
 8008904:	4699      	mov	r9, r3
 8008906:	f1b8 0f01 	cmp.w	r8, #1
 800890a:	dc21      	bgt.n	8008950 <_strtod_l+0x528>
 800890c:	b10b      	cbz	r3, 8008912 <_strtod_l+0x4ea>
 800890e:	4682      	mov	sl, r0
 8008910:	468b      	mov	fp, r1
 8008912:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <_strtod_l+0x5a8>)
 8008914:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008918:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800891c:	4652      	mov	r2, sl
 800891e:	465b      	mov	r3, fp
 8008920:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008924:	f7f7 fe40 	bl	80005a8 <__aeabi_dmul>
 8008928:	4b2a      	ldr	r3, [pc, #168]	; (80089d4 <_strtod_l+0x5ac>)
 800892a:	460a      	mov	r2, r1
 800892c:	400b      	ands	r3, r1
 800892e:	492a      	ldr	r1, [pc, #168]	; (80089d8 <_strtod_l+0x5b0>)
 8008930:	428b      	cmp	r3, r1
 8008932:	4682      	mov	sl, r0
 8008934:	d8bc      	bhi.n	80088b0 <_strtod_l+0x488>
 8008936:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800893a:	428b      	cmp	r3, r1
 800893c:	bf86      	itte	hi
 800893e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80089dc <_strtod_l+0x5b4>
 8008942:	f04f 3aff 	movhi.w	sl, #4294967295
 8008946:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800894a:	2300      	movs	r3, #0
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	e084      	b.n	8008a5a <_strtod_l+0x632>
 8008950:	f018 0f01 	tst.w	r8, #1
 8008954:	d005      	beq.n	8008962 <_strtod_l+0x53a>
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fe24 	bl	80005a8 <__aeabi_dmul>
 8008960:	2301      	movs	r3, #1
 8008962:	9a04      	ldr	r2, [sp, #16]
 8008964:	3208      	adds	r2, #8
 8008966:	f109 0901 	add.w	r9, r9, #1
 800896a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800896e:	9204      	str	r2, [sp, #16]
 8008970:	e7c9      	b.n	8008906 <_strtod_l+0x4de>
 8008972:	d0ea      	beq.n	800894a <_strtod_l+0x522>
 8008974:	f1c8 0800 	rsb	r8, r8, #0
 8008978:	f018 020f 	ands.w	r2, r8, #15
 800897c:	d00a      	beq.n	8008994 <_strtod_l+0x56c>
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <_strtod_l+0x5a4>)
 8008980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008984:	4650      	mov	r0, sl
 8008986:	4659      	mov	r1, fp
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 ff36 	bl	80007fc <__aeabi_ddiv>
 8008990:	4682      	mov	sl, r0
 8008992:	468b      	mov	fp, r1
 8008994:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008998:	d0d7      	beq.n	800894a <_strtod_l+0x522>
 800899a:	f1b8 0f1f 	cmp.w	r8, #31
 800899e:	dd1f      	ble.n	80089e0 <_strtod_l+0x5b8>
 80089a0:	2500      	movs	r5, #0
 80089a2:	462e      	mov	r6, r5
 80089a4:	9507      	str	r5, [sp, #28]
 80089a6:	9505      	str	r5, [sp, #20]
 80089a8:	2322      	movs	r3, #34	; 0x22
 80089aa:	f04f 0a00 	mov.w	sl, #0
 80089ae:	f04f 0b00 	mov.w	fp, #0
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	e786      	b.n	80088c4 <_strtod_l+0x49c>
 80089b6:	bf00      	nop
 80089b8:	0800c271 	.word	0x0800c271
 80089bc:	0800c2b4 	.word	0x0800c2b4
 80089c0:	0800c269 	.word	0x0800c269
 80089c4:	0800c3f4 	.word	0x0800c3f4
 80089c8:	0800c708 	.word	0x0800c708
 80089cc:	0800c5e8 	.word	0x0800c5e8
 80089d0:	0800c5c0 	.word	0x0800c5c0
 80089d4:	7ff00000 	.word	0x7ff00000
 80089d8:	7ca00000 	.word	0x7ca00000
 80089dc:	7fefffff 	.word	0x7fefffff
 80089e0:	f018 0310 	ands.w	r3, r8, #16
 80089e4:	bf18      	it	ne
 80089e6:	236a      	movne	r3, #106	; 0x6a
 80089e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008d98 <_strtod_l+0x970>
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	4650      	mov	r0, sl
 80089f0:	4659      	mov	r1, fp
 80089f2:	2300      	movs	r3, #0
 80089f4:	f018 0f01 	tst.w	r8, #1
 80089f8:	d004      	beq.n	8008a04 <_strtod_l+0x5dc>
 80089fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089fe:	f7f7 fdd3 	bl	80005a8 <__aeabi_dmul>
 8008a02:	2301      	movs	r3, #1
 8008a04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008a08:	f109 0908 	add.w	r9, r9, #8
 8008a0c:	d1f2      	bne.n	80089f4 <_strtod_l+0x5cc>
 8008a0e:	b10b      	cbz	r3, 8008a14 <_strtod_l+0x5ec>
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	b1c3      	cbz	r3, 8008a4a <_strtod_l+0x622>
 8008a18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	4659      	mov	r1, fp
 8008a24:	dd11      	ble.n	8008a4a <_strtod_l+0x622>
 8008a26:	2b1f      	cmp	r3, #31
 8008a28:	f340 8124 	ble.w	8008c74 <_strtod_l+0x84c>
 8008a2c:	2b34      	cmp	r3, #52	; 0x34
 8008a2e:	bfde      	ittt	le
 8008a30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a34:	f04f 33ff 	movle.w	r3, #4294967295
 8008a38:	fa03 f202 	lslle.w	r2, r3, r2
 8008a3c:	f04f 0a00 	mov.w	sl, #0
 8008a40:	bfcc      	ite	gt
 8008a42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008a46:	ea02 0b01 	andle.w	fp, r2, r1
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4650      	mov	r0, sl
 8008a50:	4659      	mov	r1, fp
 8008a52:	f7f8 f811 	bl	8000a78 <__aeabi_dcmpeq>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d1a2      	bne.n	80089a0 <_strtod_l+0x578>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	9908      	ldr	r1, [sp, #32]
 8008a60:	462b      	mov	r3, r5
 8008a62:	463a      	mov	r2, r7
 8008a64:	4620      	mov	r0, r4
 8008a66:	f002 f8fd 	bl	800ac64 <__s2b>
 8008a6a:	9007      	str	r0, [sp, #28]
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f43f af1f 	beq.w	80088b0 <_strtod_l+0x488>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	1b9e      	subs	r6, r3, r6
 8008a76:	9b06      	ldr	r3, [sp, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfb4      	ite	lt
 8008a7c:	4633      	movlt	r3, r6
 8008a7e:	2300      	movge	r3, #0
 8008a80:	930c      	str	r3, [sp, #48]	; 0x30
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	2500      	movs	r5, #0
 8008a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a8a:	9312      	str	r3, [sp, #72]	; 0x48
 8008a8c:	462e      	mov	r6, r5
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	4620      	mov	r0, r4
 8008a92:	6859      	ldr	r1, [r3, #4]
 8008a94:	f002 f83e 	bl	800ab14 <_Balloc>
 8008a98:	9005      	str	r0, [sp, #20]
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f43f af0c 	beq.w	80088b8 <_strtod_l+0x490>
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	3202      	adds	r2, #2
 8008aa6:	f103 010c 	add.w	r1, r3, #12
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f7fe fd59 	bl	8007564 <memcpy>
 8008ab2:	ec4b ab10 	vmov	d0, sl, fp
 8008ab6:	aa1a      	add	r2, sp, #104	; 0x68
 8008ab8:	a919      	add	r1, sp, #100	; 0x64
 8008aba:	4620      	mov	r0, r4
 8008abc:	f002 fc18 	bl	800b2f0 <__d2b>
 8008ac0:	ec4b ab18 	vmov	d8, sl, fp
 8008ac4:	9018      	str	r0, [sp, #96]	; 0x60
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f aef6 	beq.w	80088b8 <_strtod_l+0x490>
 8008acc:	2101      	movs	r1, #1
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f002 f962 	bl	800ad98 <__i2b>
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f aeee 	beq.w	80088b8 <_strtod_l+0x490>
 8008adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfab      	itete	ge
 8008ae4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008ae6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008ae8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008aea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008aee:	bfac      	ite	ge
 8008af0:	eb03 0902 	addge.w	r9, r3, r2
 8008af4:	1ad7      	sublt	r7, r2, r3
 8008af6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008af8:	eba3 0801 	sub.w	r8, r3, r1
 8008afc:	4490      	add	r8, r2
 8008afe:	4ba1      	ldr	r3, [pc, #644]	; (8008d84 <_strtod_l+0x95c>)
 8008b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b04:	4598      	cmp	r8, r3
 8008b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b0a:	f280 80c7 	bge.w	8008c9c <_strtod_l+0x874>
 8008b0e:	eba3 0308 	sub.w	r3, r3, r8
 8008b12:	2b1f      	cmp	r3, #31
 8008b14:	eba2 0203 	sub.w	r2, r2, r3
 8008b18:	f04f 0101 	mov.w	r1, #1
 8008b1c:	f300 80b1 	bgt.w	8008c82 <_strtod_l+0x85a>
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	930d      	str	r3, [sp, #52]	; 0x34
 8008b26:	2300      	movs	r3, #0
 8008b28:	9308      	str	r3, [sp, #32]
 8008b2a:	eb09 0802 	add.w	r8, r9, r2
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	45c1      	cmp	r9, r8
 8008b32:	4417      	add	r7, r2
 8008b34:	441f      	add	r7, r3
 8008b36:	464b      	mov	r3, r9
 8008b38:	bfa8      	it	ge
 8008b3a:	4643      	movge	r3, r8
 8008b3c:	42bb      	cmp	r3, r7
 8008b3e:	bfa8      	it	ge
 8008b40:	463b      	movge	r3, r7
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfc2      	ittt	gt
 8008b46:	eba8 0803 	subgt.w	r8, r8, r3
 8008b4a:	1aff      	subgt	r7, r7, r3
 8008b4c:	eba9 0903 	subgt.w	r9, r9, r3
 8008b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dd17      	ble.n	8008b86 <_strtod_l+0x75e>
 8008b56:	4631      	mov	r1, r6
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f002 f9dc 	bl	800af18 <__pow5mult>
 8008b60:	4606      	mov	r6, r0
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f aea8 	beq.w	80088b8 <_strtod_l+0x490>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f002 f929 	bl	800adc4 <__multiply>
 8008b72:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f43f ae9f 	beq.w	80088b8 <_strtod_l+0x490>
 8008b7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f002 f809 	bl	800ab94 <_Bfree>
 8008b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b84:	9318      	str	r3, [sp, #96]	; 0x60
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	f300 808c 	bgt.w	8008ca6 <_strtod_l+0x87e>
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dd08      	ble.n	8008ba6 <_strtod_l+0x77e>
 8008b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b96:	9905      	ldr	r1, [sp, #20]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f002 f9bd 	bl	800af18 <__pow5mult>
 8008b9e:	9005      	str	r0, [sp, #20]
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f43f ae89 	beq.w	80088b8 <_strtod_l+0x490>
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	dd08      	ble.n	8008bbc <_strtod_l+0x794>
 8008baa:	9905      	ldr	r1, [sp, #20]
 8008bac:	463a      	mov	r2, r7
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f002 fa0c 	bl	800afcc <__lshift>
 8008bb4:	9005      	str	r0, [sp, #20]
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f ae7e 	beq.w	80088b8 <_strtod_l+0x490>
 8008bbc:	f1b9 0f00 	cmp.w	r9, #0
 8008bc0:	dd08      	ble.n	8008bd4 <_strtod_l+0x7ac>
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	464a      	mov	r2, r9
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f002 fa00 	bl	800afcc <__lshift>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f43f ae72 	beq.w	80088b8 <_strtod_l+0x490>
 8008bd4:	9a05      	ldr	r2, [sp, #20]
 8008bd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f002 fa83 	bl	800b0e4 <__mdiff>
 8008bde:	4605      	mov	r5, r0
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f43f ae69 	beq.w	80088b8 <_strtod_l+0x490>
 8008be6:	68c3      	ldr	r3, [r0, #12]
 8008be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bea:	2300      	movs	r3, #0
 8008bec:	60c3      	str	r3, [r0, #12]
 8008bee:	4631      	mov	r1, r6
 8008bf0:	f002 fa5c 	bl	800b0ac <__mcmp>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	da60      	bge.n	8008cba <_strtod_l+0x892>
 8008bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bfa:	ea53 030a 	orrs.w	r3, r3, sl
 8008bfe:	f040 8082 	bne.w	8008d06 <_strtod_l+0x8de>
 8008c02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d17d      	bne.n	8008d06 <_strtod_l+0x8de>
 8008c0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c0e:	0d1b      	lsrs	r3, r3, #20
 8008c10:	051b      	lsls	r3, r3, #20
 8008c12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c16:	d976      	bls.n	8008d06 <_strtod_l+0x8de>
 8008c18:	696b      	ldr	r3, [r5, #20]
 8008c1a:	b913      	cbnz	r3, 8008c22 <_strtod_l+0x7fa>
 8008c1c:	692b      	ldr	r3, [r5, #16]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	dd71      	ble.n	8008d06 <_strtod_l+0x8de>
 8008c22:	4629      	mov	r1, r5
 8008c24:	2201      	movs	r2, #1
 8008c26:	4620      	mov	r0, r4
 8008c28:	f002 f9d0 	bl	800afcc <__lshift>
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4605      	mov	r5, r0
 8008c30:	f002 fa3c 	bl	800b0ac <__mcmp>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dd66      	ble.n	8008d06 <_strtod_l+0x8de>
 8008c38:	9904      	ldr	r1, [sp, #16]
 8008c3a:	4a53      	ldr	r2, [pc, #332]	; (8008d88 <_strtod_l+0x960>)
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	f000 8081 	beq.w	8008d46 <_strtod_l+0x91e>
 8008c44:	ea02 010b 	and.w	r1, r2, fp
 8008c48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c4c:	dc7b      	bgt.n	8008d46 <_strtod_l+0x91e>
 8008c4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c52:	f77f aea9 	ble.w	80089a8 <_strtod_l+0x580>
 8008c56:	4b4d      	ldr	r3, [pc, #308]	; (8008d8c <_strtod_l+0x964>)
 8008c58:	4650      	mov	r0, sl
 8008c5a:	4659      	mov	r1, fp
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f7f7 fca3 	bl	80005a8 <__aeabi_dmul>
 8008c62:	460b      	mov	r3, r1
 8008c64:	4303      	orrs	r3, r0
 8008c66:	bf08      	it	eq
 8008c68:	2322      	moveq	r3, #34	; 0x22
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	468b      	mov	fp, r1
 8008c6e:	bf08      	it	eq
 8008c70:	6023      	streq	r3, [r4, #0]
 8008c72:	e62b      	b.n	80088cc <_strtod_l+0x4a4>
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	ea03 0a0a 	and.w	sl, r3, sl
 8008c80:	e6e3      	b.n	8008a4a <_strtod_l+0x622>
 8008c82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c92:	fa01 f308 	lsl.w	r3, r1, r8
 8008c96:	9308      	str	r3, [sp, #32]
 8008c98:	910d      	str	r1, [sp, #52]	; 0x34
 8008c9a:	e746      	b.n	8008b2a <_strtod_l+0x702>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9308      	str	r3, [sp, #32]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ca4:	e741      	b.n	8008b2a <_strtod_l+0x702>
 8008ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ca8:	4642      	mov	r2, r8
 8008caa:	4620      	mov	r0, r4
 8008cac:	f002 f98e 	bl	800afcc <__lshift>
 8008cb0:	9018      	str	r0, [sp, #96]	; 0x60
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f47f af6b 	bne.w	8008b8e <_strtod_l+0x766>
 8008cb8:	e5fe      	b.n	80088b8 <_strtod_l+0x490>
 8008cba:	465f      	mov	r7, fp
 8008cbc:	d16e      	bne.n	8008d9c <_strtod_l+0x974>
 8008cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cc4:	b342      	cbz	r2, 8008d18 <_strtod_l+0x8f0>
 8008cc6:	4a32      	ldr	r2, [pc, #200]	; (8008d90 <_strtod_l+0x968>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d128      	bne.n	8008d1e <_strtod_l+0x8f6>
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	4651      	mov	r1, sl
 8008cd0:	b1eb      	cbz	r3, 8008d0e <_strtod_l+0x8e6>
 8008cd2:	4b2d      	ldr	r3, [pc, #180]	; (8008d88 <_strtod_l+0x960>)
 8008cd4:	403b      	ands	r3, r7
 8008cd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	d819      	bhi.n	8008d14 <_strtod_l+0x8ec>
 8008ce0:	0d1b      	lsrs	r3, r3, #20
 8008ce2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	4299      	cmp	r1, r3
 8008cec:	d117      	bne.n	8008d1e <_strtod_l+0x8f6>
 8008cee:	4b29      	ldr	r3, [pc, #164]	; (8008d94 <_strtod_l+0x96c>)
 8008cf0:	429f      	cmp	r7, r3
 8008cf2:	d102      	bne.n	8008cfa <_strtod_l+0x8d2>
 8008cf4:	3101      	adds	r1, #1
 8008cf6:	f43f addf 	beq.w	80088b8 <_strtod_l+0x490>
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <_strtod_l+0x960>)
 8008cfc:	403b      	ands	r3, r7
 8008cfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1a4      	bne.n	8008c56 <_strtod_l+0x82e>
 8008d0c:	e5de      	b.n	80088cc <_strtod_l+0x4a4>
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	e7ea      	b.n	8008cea <_strtod_l+0x8c2>
 8008d14:	4613      	mov	r3, r2
 8008d16:	e7e8      	b.n	8008cea <_strtod_l+0x8c2>
 8008d18:	ea53 030a 	orrs.w	r3, r3, sl
 8008d1c:	d08c      	beq.n	8008c38 <_strtod_l+0x810>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	b1db      	cbz	r3, 8008d5a <_strtod_l+0x932>
 8008d22:	423b      	tst	r3, r7
 8008d24:	d0ef      	beq.n	8008d06 <_strtod_l+0x8de>
 8008d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	b1c3      	cbz	r3, 8008d62 <_strtod_l+0x93a>
 8008d30:	f7ff fb5c 	bl	80083ec <sulp>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	ec51 0b18 	vmov	r0, r1, d8
 8008d3c:	f7f7 fa7e 	bl	800023c <__adddf3>
 8008d40:	4682      	mov	sl, r0
 8008d42:	468b      	mov	fp, r1
 8008d44:	e7df      	b.n	8008d06 <_strtod_l+0x8de>
 8008d46:	4013      	ands	r3, r2
 8008d48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d54:	f04f 3aff 	mov.w	sl, #4294967295
 8008d58:	e7d5      	b.n	8008d06 <_strtod_l+0x8de>
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	ea13 0f0a 	tst.w	r3, sl
 8008d60:	e7e0      	b.n	8008d24 <_strtod_l+0x8fc>
 8008d62:	f7ff fb43 	bl	80083ec <sulp>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	ec51 0b18 	vmov	r0, r1, d8
 8008d6e:	f7f7 fa63 	bl	8000238 <__aeabi_dsub>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4682      	mov	sl, r0
 8008d78:	468b      	mov	fp, r1
 8008d7a:	f7f7 fe7d 	bl	8000a78 <__aeabi_dcmpeq>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0c1      	beq.n	8008d06 <_strtod_l+0x8de>
 8008d82:	e611      	b.n	80089a8 <_strtod_l+0x580>
 8008d84:	fffffc02 	.word	0xfffffc02
 8008d88:	7ff00000 	.word	0x7ff00000
 8008d8c:	39500000 	.word	0x39500000
 8008d90:	000fffff 	.word	0x000fffff
 8008d94:	7fefffff 	.word	0x7fefffff
 8008d98:	0800c2c8 	.word	0x0800c2c8
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f002 fb02 	bl	800b3a8 <__ratio>
 8008da4:	ec59 8b10 	vmov	r8, r9, d0
 8008da8:	ee10 0a10 	vmov	r0, s0
 8008dac:	2200      	movs	r2, #0
 8008dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fe74 	bl	8000aa0 <__aeabi_dcmple>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d07a      	beq.n	8008eb2 <_strtod_l+0xa8a>
 8008dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04a      	beq.n	8008e58 <_strtod_l+0xa30>
 8008dc2:	4b95      	ldr	r3, [pc, #596]	; (8009018 <_strtod_l+0xbf0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008dca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009018 <_strtod_l+0xbf0>
 8008dce:	f04f 0800 	mov.w	r8, #0
 8008dd2:	4b92      	ldr	r3, [pc, #584]	; (800901c <_strtod_l+0xbf4>)
 8008dd4:	403b      	ands	r3, r7
 8008dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dda:	4b91      	ldr	r3, [pc, #580]	; (8009020 <_strtod_l+0xbf8>)
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f040 80b0 	bne.w	8008f42 <_strtod_l+0xb1a>
 8008de2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008de6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008dea:	ec4b ab10 	vmov	d0, sl, fp
 8008dee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008df2:	f002 fa01 	bl	800b1f8 <__ulp>
 8008df6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dfa:	ec53 2b10 	vmov	r2, r3, d0
 8008dfe:	f7f7 fbd3 	bl	80005a8 <__aeabi_dmul>
 8008e02:	4652      	mov	r2, sl
 8008e04:	465b      	mov	r3, fp
 8008e06:	f7f7 fa19 	bl	800023c <__adddf3>
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4983      	ldr	r1, [pc, #524]	; (800901c <_strtod_l+0xbf4>)
 8008e0e:	4a85      	ldr	r2, [pc, #532]	; (8009024 <_strtod_l+0xbfc>)
 8008e10:	4019      	ands	r1, r3
 8008e12:	4291      	cmp	r1, r2
 8008e14:	4682      	mov	sl, r0
 8008e16:	d960      	bls.n	8008eda <_strtod_l+0xab2>
 8008e18:	ee18 3a90 	vmov	r3, s17
 8008e1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d104      	bne.n	8008e2e <_strtod_l+0xa06>
 8008e24:	ee18 3a10 	vmov	r3, s16
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f43f ad45 	beq.w	80088b8 <_strtod_l+0x490>
 8008e2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009030 <_strtod_l+0xc08>
 8008e32:	f04f 3aff 	mov.w	sl, #4294967295
 8008e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f001 feab 	bl	800ab94 <_Bfree>
 8008e3e:	9905      	ldr	r1, [sp, #20]
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 fea7 	bl	800ab94 <_Bfree>
 8008e46:	4631      	mov	r1, r6
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f001 fea3 	bl	800ab94 <_Bfree>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f001 fe9f 	bl	800ab94 <_Bfree>
 8008e56:	e61a      	b.n	8008a8e <_strtod_l+0x666>
 8008e58:	f1ba 0f00 	cmp.w	sl, #0
 8008e5c:	d11b      	bne.n	8008e96 <_strtod_l+0xa6e>
 8008e5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e62:	b9f3      	cbnz	r3, 8008ea2 <_strtod_l+0xa7a>
 8008e64:	4b6c      	ldr	r3, [pc, #432]	; (8009018 <_strtod_l+0xbf0>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fe0e 	bl	8000a8c <__aeabi_dcmplt>
 8008e70:	b9d0      	cbnz	r0, 8008ea8 <_strtod_l+0xa80>
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	4b6c      	ldr	r3, [pc, #432]	; (8009028 <_strtod_l+0xc00>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f7f7 fb95 	bl	80005a8 <__aeabi_dmul>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8008e8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e94:	e79d      	b.n	8008dd2 <_strtod_l+0x9aa>
 8008e96:	f1ba 0f01 	cmp.w	sl, #1
 8008e9a:	d102      	bne.n	8008ea2 <_strtod_l+0xa7a>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f43f ad83 	beq.w	80089a8 <_strtod_l+0x580>
 8008ea2:	4b62      	ldr	r3, [pc, #392]	; (800902c <_strtod_l+0xc04>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	e78e      	b.n	8008dc6 <_strtod_l+0x99e>
 8008ea8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009028 <_strtod_l+0xc00>
 8008eac:	f04f 0800 	mov.w	r8, #0
 8008eb0:	e7e7      	b.n	8008e82 <_strtod_l+0xa5a>
 8008eb2:	4b5d      	ldr	r3, [pc, #372]	; (8009028 <_strtod_l+0xc00>)
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f7f7 fb75 	bl	80005a8 <__aeabi_dmul>
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	b933      	cbnz	r3, 8008ed4 <_strtod_l+0xaac>
 8008ec6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008eca:	900e      	str	r0, [sp, #56]	; 0x38
 8008ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ece:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ed2:	e7dd      	b.n	8008e90 <_strtod_l+0xa68>
 8008ed4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008ed8:	e7f9      	b.n	8008ece <_strtod_l+0xaa6>
 8008eda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1a8      	bne.n	8008e36 <_strtod_l+0xa0e>
 8008ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eea:	0d1b      	lsrs	r3, r3, #20
 8008eec:	051b      	lsls	r3, r3, #20
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d1a1      	bne.n	8008e36 <_strtod_l+0xa0e>
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 feb7 	bl	8000c68 <__aeabi_d2lz>
 8008efa:	f7f7 fb27 	bl	800054c <__aeabi_l2d>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4640      	mov	r0, r8
 8008f04:	4649      	mov	r1, r9
 8008f06:	f7f7 f997 	bl	8000238 <__aeabi_dsub>
 8008f0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f10:	ea43 030a 	orr.w	r3, r3, sl
 8008f14:	4313      	orrs	r3, r2
 8008f16:	4680      	mov	r8, r0
 8008f18:	4689      	mov	r9, r1
 8008f1a:	d055      	beq.n	8008fc8 <_strtod_l+0xba0>
 8008f1c:	a336      	add	r3, pc, #216	; (adr r3, 8008ff8 <_strtod_l+0xbd0>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 fdb3 	bl	8000a8c <__aeabi_dcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f47f acd0 	bne.w	80088cc <_strtod_l+0x4a4>
 8008f2c:	a334      	add	r3, pc, #208	; (adr r3, 8009000 <_strtod_l+0xbd8>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 fdc7 	bl	8000ac8 <__aeabi_dcmpgt>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f43f af7b 	beq.w	8008e36 <_strtod_l+0xa0e>
 8008f40:	e4c4      	b.n	80088cc <_strtod_l+0x4a4>
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	b333      	cbz	r3, 8008f94 <_strtod_l+0xb6c>
 8008f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f4c:	d822      	bhi.n	8008f94 <_strtod_l+0xb6c>
 8008f4e:	a32e      	add	r3, pc, #184	; (adr r3, 8009008 <_strtod_l+0xbe0>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 fda2 	bl	8000aa0 <__aeabi_dcmple>
 8008f5c:	b1a0      	cbz	r0, 8008f88 <_strtod_l+0xb60>
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	f7f7 fdf9 	bl	8000b58 <__aeabi_d2uiz>
 8008f66:	2801      	cmp	r0, #1
 8008f68:	bf38      	it	cc
 8008f6a:	2001      	movcc	r0, #1
 8008f6c:	f7f7 faa2 	bl	80004b4 <__aeabi_ui2d>
 8008f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f72:	4680      	mov	r8, r0
 8008f74:	4689      	mov	r9, r1
 8008f76:	bb23      	cbnz	r3, 8008fc2 <_strtod_l+0xb9a>
 8008f78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f7c:	9010      	str	r0, [sp, #64]	; 0x40
 8008f7e:	9311      	str	r3, [sp, #68]	; 0x44
 8008f80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	9309      	str	r3, [sp, #36]	; 0x24
 8008f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f98:	eeb0 0a48 	vmov.f32	s0, s16
 8008f9c:	eef0 0a68 	vmov.f32	s1, s17
 8008fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fa4:	f002 f928 	bl	800b1f8 <__ulp>
 8008fa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fac:	ec53 2b10 	vmov	r2, r3, d0
 8008fb0:	f7f7 fafa 	bl	80005a8 <__aeabi_dmul>
 8008fb4:	ec53 2b18 	vmov	r2, r3, d8
 8008fb8:	f7f7 f940 	bl	800023c <__adddf3>
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	468b      	mov	fp, r1
 8008fc0:	e78d      	b.n	8008ede <_strtod_l+0xab6>
 8008fc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008fc6:	e7db      	b.n	8008f80 <_strtod_l+0xb58>
 8008fc8:	a311      	add	r3, pc, #68	; (adr r3, 8009010 <_strtod_l+0xbe8>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 fd5d 	bl	8000a8c <__aeabi_dcmplt>
 8008fd2:	e7b2      	b.n	8008f3a <_strtod_l+0xb12>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	f7ff ba6b 	b.w	80084b8 <_strtod_l+0x90>
 8008fe2:	2a65      	cmp	r2, #101	; 0x65
 8008fe4:	f43f ab5f 	beq.w	80086a6 <_strtod_l+0x27e>
 8008fe8:	2a45      	cmp	r2, #69	; 0x45
 8008fea:	f43f ab5c 	beq.w	80086a6 <_strtod_l+0x27e>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f7ff bb94 	b.w	800871c <_strtod_l+0x2f4>
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	94a03595 	.word	0x94a03595
 8008ffc:	3fdfffff 	.word	0x3fdfffff
 8009000:	35afe535 	.word	0x35afe535
 8009004:	3fe00000 	.word	0x3fe00000
 8009008:	ffc00000 	.word	0xffc00000
 800900c:	41dfffff 	.word	0x41dfffff
 8009010:	94a03595 	.word	0x94a03595
 8009014:	3fcfffff 	.word	0x3fcfffff
 8009018:	3ff00000 	.word	0x3ff00000
 800901c:	7ff00000 	.word	0x7ff00000
 8009020:	7fe00000 	.word	0x7fe00000
 8009024:	7c9fffff 	.word	0x7c9fffff
 8009028:	3fe00000 	.word	0x3fe00000
 800902c:	bff00000 	.word	0xbff00000
 8009030:	7fefffff 	.word	0x7fefffff

08009034 <_strtod_r>:
 8009034:	4b01      	ldr	r3, [pc, #4]	; (800903c <_strtod_r+0x8>)
 8009036:	f7ff b9f7 	b.w	8008428 <_strtod_l>
 800903a:	bf00      	nop
 800903c:	20000084 	.word	0x20000084

08009040 <_strtol_l.constprop.0>:
 8009040:	2b01      	cmp	r3, #1
 8009042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009046:	d001      	beq.n	800904c <_strtol_l.constprop.0+0xc>
 8009048:	2b24      	cmp	r3, #36	; 0x24
 800904a:	d906      	bls.n	800905a <_strtol_l.constprop.0+0x1a>
 800904c:	f7fe fa60 	bl	8007510 <__errno>
 8009050:	2316      	movs	r3, #22
 8009052:	6003      	str	r3, [r0, #0]
 8009054:	2000      	movs	r0, #0
 8009056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009140 <_strtol_l.constprop.0+0x100>
 800905e:	460d      	mov	r5, r1
 8009060:	462e      	mov	r6, r5
 8009062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009066:	f814 700c 	ldrb.w	r7, [r4, ip]
 800906a:	f017 0708 	ands.w	r7, r7, #8
 800906e:	d1f7      	bne.n	8009060 <_strtol_l.constprop.0+0x20>
 8009070:	2c2d      	cmp	r4, #45	; 0x2d
 8009072:	d132      	bne.n	80090da <_strtol_l.constprop.0+0x9a>
 8009074:	782c      	ldrb	r4, [r5, #0]
 8009076:	2701      	movs	r7, #1
 8009078:	1cb5      	adds	r5, r6, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d05b      	beq.n	8009136 <_strtol_l.constprop.0+0xf6>
 800907e:	2b10      	cmp	r3, #16
 8009080:	d109      	bne.n	8009096 <_strtol_l.constprop.0+0x56>
 8009082:	2c30      	cmp	r4, #48	; 0x30
 8009084:	d107      	bne.n	8009096 <_strtol_l.constprop.0+0x56>
 8009086:	782c      	ldrb	r4, [r5, #0]
 8009088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800908c:	2c58      	cmp	r4, #88	; 0x58
 800908e:	d14d      	bne.n	800912c <_strtol_l.constprop.0+0xec>
 8009090:	786c      	ldrb	r4, [r5, #1]
 8009092:	2310      	movs	r3, #16
 8009094:	3502      	adds	r5, #2
 8009096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800909a:	f108 38ff 	add.w	r8, r8, #4294967295
 800909e:	f04f 0c00 	mov.w	ip, #0
 80090a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80090a6:	4666      	mov	r6, ip
 80090a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80090ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80090b0:	f1be 0f09 	cmp.w	lr, #9
 80090b4:	d816      	bhi.n	80090e4 <_strtol_l.constprop.0+0xa4>
 80090b6:	4674      	mov	r4, lr
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	dd24      	ble.n	8009106 <_strtol_l.constprop.0+0xc6>
 80090bc:	f1bc 0f00 	cmp.w	ip, #0
 80090c0:	db1e      	blt.n	8009100 <_strtol_l.constprop.0+0xc0>
 80090c2:	45b1      	cmp	r9, r6
 80090c4:	d31c      	bcc.n	8009100 <_strtol_l.constprop.0+0xc0>
 80090c6:	d101      	bne.n	80090cc <_strtol_l.constprop.0+0x8c>
 80090c8:	45a2      	cmp	sl, r4
 80090ca:	db19      	blt.n	8009100 <_strtol_l.constprop.0+0xc0>
 80090cc:	fb06 4603 	mla	r6, r6, r3, r4
 80090d0:	f04f 0c01 	mov.w	ip, #1
 80090d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090d8:	e7e8      	b.n	80090ac <_strtol_l.constprop.0+0x6c>
 80090da:	2c2b      	cmp	r4, #43	; 0x2b
 80090dc:	bf04      	itt	eq
 80090de:	782c      	ldrbeq	r4, [r5, #0]
 80090e0:	1cb5      	addeq	r5, r6, #2
 80090e2:	e7ca      	b.n	800907a <_strtol_l.constprop.0+0x3a>
 80090e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80090e8:	f1be 0f19 	cmp.w	lr, #25
 80090ec:	d801      	bhi.n	80090f2 <_strtol_l.constprop.0+0xb2>
 80090ee:	3c37      	subs	r4, #55	; 0x37
 80090f0:	e7e2      	b.n	80090b8 <_strtol_l.constprop.0+0x78>
 80090f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80090f6:	f1be 0f19 	cmp.w	lr, #25
 80090fa:	d804      	bhi.n	8009106 <_strtol_l.constprop.0+0xc6>
 80090fc:	3c57      	subs	r4, #87	; 0x57
 80090fe:	e7db      	b.n	80090b8 <_strtol_l.constprop.0+0x78>
 8009100:	f04f 3cff 	mov.w	ip, #4294967295
 8009104:	e7e6      	b.n	80090d4 <_strtol_l.constprop.0+0x94>
 8009106:	f1bc 0f00 	cmp.w	ip, #0
 800910a:	da05      	bge.n	8009118 <_strtol_l.constprop.0+0xd8>
 800910c:	2322      	movs	r3, #34	; 0x22
 800910e:	6003      	str	r3, [r0, #0]
 8009110:	4646      	mov	r6, r8
 8009112:	b942      	cbnz	r2, 8009126 <_strtol_l.constprop.0+0xe6>
 8009114:	4630      	mov	r0, r6
 8009116:	e79e      	b.n	8009056 <_strtol_l.constprop.0+0x16>
 8009118:	b107      	cbz	r7, 800911c <_strtol_l.constprop.0+0xdc>
 800911a:	4276      	negs	r6, r6
 800911c:	2a00      	cmp	r2, #0
 800911e:	d0f9      	beq.n	8009114 <_strtol_l.constprop.0+0xd4>
 8009120:	f1bc 0f00 	cmp.w	ip, #0
 8009124:	d000      	beq.n	8009128 <_strtol_l.constprop.0+0xe8>
 8009126:	1e69      	subs	r1, r5, #1
 8009128:	6011      	str	r1, [r2, #0]
 800912a:	e7f3      	b.n	8009114 <_strtol_l.constprop.0+0xd4>
 800912c:	2430      	movs	r4, #48	; 0x30
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1b1      	bne.n	8009096 <_strtol_l.constprop.0+0x56>
 8009132:	2308      	movs	r3, #8
 8009134:	e7af      	b.n	8009096 <_strtol_l.constprop.0+0x56>
 8009136:	2c30      	cmp	r4, #48	; 0x30
 8009138:	d0a5      	beq.n	8009086 <_strtol_l.constprop.0+0x46>
 800913a:	230a      	movs	r3, #10
 800913c:	e7ab      	b.n	8009096 <_strtol_l.constprop.0+0x56>
 800913e:	bf00      	nop
 8009140:	0800c2f1 	.word	0x0800c2f1

08009144 <_strtol_r>:
 8009144:	f7ff bf7c 	b.w	8009040 <_strtol_l.constprop.0>

08009148 <__swbuf_r>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	460e      	mov	r6, r1
 800914c:	4614      	mov	r4, r2
 800914e:	4605      	mov	r5, r0
 8009150:	b118      	cbz	r0, 800915a <__swbuf_r+0x12>
 8009152:	6983      	ldr	r3, [r0, #24]
 8009154:	b90b      	cbnz	r3, 800915a <__swbuf_r+0x12>
 8009156:	f001 f84b 	bl	800a1f0 <__sinit>
 800915a:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <__swbuf_r+0x98>)
 800915c:	429c      	cmp	r4, r3
 800915e:	d12b      	bne.n	80091b8 <__swbuf_r+0x70>
 8009160:	686c      	ldr	r4, [r5, #4]
 8009162:	69a3      	ldr	r3, [r4, #24]
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	071a      	lsls	r2, r3, #28
 800916a:	d52f      	bpl.n	80091cc <__swbuf_r+0x84>
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	b36b      	cbz	r3, 80091cc <__swbuf_r+0x84>
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	6820      	ldr	r0, [r4, #0]
 8009174:	1ac0      	subs	r0, r0, r3
 8009176:	6963      	ldr	r3, [r4, #20]
 8009178:	b2f6      	uxtb	r6, r6
 800917a:	4283      	cmp	r3, r0
 800917c:	4637      	mov	r7, r6
 800917e:	dc04      	bgt.n	800918a <__swbuf_r+0x42>
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f000 ffa0 	bl	800a0c8 <_fflush_r>
 8009188:	bb30      	cbnz	r0, 80091d8 <__swbuf_r+0x90>
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	3b01      	subs	r3, #1
 800918e:	60a3      	str	r3, [r4, #8]
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	701e      	strb	r6, [r3, #0]
 8009198:	6963      	ldr	r3, [r4, #20]
 800919a:	3001      	adds	r0, #1
 800919c:	4283      	cmp	r3, r0
 800919e:	d004      	beq.n	80091aa <__swbuf_r+0x62>
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	07db      	lsls	r3, r3, #31
 80091a4:	d506      	bpl.n	80091b4 <__swbuf_r+0x6c>
 80091a6:	2e0a      	cmp	r6, #10
 80091a8:	d104      	bne.n	80091b4 <__swbuf_r+0x6c>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 ff8b 	bl	800a0c8 <_fflush_r>
 80091b2:	b988      	cbnz	r0, 80091d8 <__swbuf_r+0x90>
 80091b4:	4638      	mov	r0, r7
 80091b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <__swbuf_r+0x9c>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d101      	bne.n	80091c2 <__swbuf_r+0x7a>
 80091be:	68ac      	ldr	r4, [r5, #8]
 80091c0:	e7cf      	b.n	8009162 <__swbuf_r+0x1a>
 80091c2:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <__swbuf_r+0xa0>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	bf08      	it	eq
 80091c8:	68ec      	ldreq	r4, [r5, #12]
 80091ca:	e7ca      	b.n	8009162 <__swbuf_r+0x1a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f80c 	bl	80091ec <__swsetup_r>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0cb      	beq.n	8009170 <__swbuf_r+0x28>
 80091d8:	f04f 37ff 	mov.w	r7, #4294967295
 80091dc:	e7ea      	b.n	80091b4 <__swbuf_r+0x6c>
 80091de:	bf00      	nop
 80091e0:	0800c4a4 	.word	0x0800c4a4
 80091e4:	0800c4c4 	.word	0x0800c4c4
 80091e8:	0800c484 	.word	0x0800c484

080091ec <__swsetup_r>:
 80091ec:	4b32      	ldr	r3, [pc, #200]	; (80092b8 <__swsetup_r+0xcc>)
 80091ee:	b570      	push	{r4, r5, r6, lr}
 80091f0:	681d      	ldr	r5, [r3, #0]
 80091f2:	4606      	mov	r6, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	b125      	cbz	r5, 8009202 <__swsetup_r+0x16>
 80091f8:	69ab      	ldr	r3, [r5, #24]
 80091fa:	b913      	cbnz	r3, 8009202 <__swsetup_r+0x16>
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 fff7 	bl	800a1f0 <__sinit>
 8009202:	4b2e      	ldr	r3, [pc, #184]	; (80092bc <__swsetup_r+0xd0>)
 8009204:	429c      	cmp	r4, r3
 8009206:	d10f      	bne.n	8009228 <__swsetup_r+0x3c>
 8009208:	686c      	ldr	r4, [r5, #4]
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009210:	0719      	lsls	r1, r3, #28
 8009212:	d42c      	bmi.n	800926e <__swsetup_r+0x82>
 8009214:	06dd      	lsls	r5, r3, #27
 8009216:	d411      	bmi.n	800923c <__swsetup_r+0x50>
 8009218:	2309      	movs	r3, #9
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	f04f 30ff 	mov.w	r0, #4294967295
 8009226:	e03e      	b.n	80092a6 <__swsetup_r+0xba>
 8009228:	4b25      	ldr	r3, [pc, #148]	; (80092c0 <__swsetup_r+0xd4>)
 800922a:	429c      	cmp	r4, r3
 800922c:	d101      	bne.n	8009232 <__swsetup_r+0x46>
 800922e:	68ac      	ldr	r4, [r5, #8]
 8009230:	e7eb      	b.n	800920a <__swsetup_r+0x1e>
 8009232:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <__swsetup_r+0xd8>)
 8009234:	429c      	cmp	r4, r3
 8009236:	bf08      	it	eq
 8009238:	68ec      	ldreq	r4, [r5, #12]
 800923a:	e7e6      	b.n	800920a <__swsetup_r+0x1e>
 800923c:	0758      	lsls	r0, r3, #29
 800923e:	d512      	bpl.n	8009266 <__swsetup_r+0x7a>
 8009240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009242:	b141      	cbz	r1, 8009256 <__swsetup_r+0x6a>
 8009244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009248:	4299      	cmp	r1, r3
 800924a:	d002      	beq.n	8009252 <__swsetup_r+0x66>
 800924c:	4630      	mov	r0, r6
 800924e:	f002 f939 	bl	800b4c4 <_free_r>
 8009252:	2300      	movs	r3, #0
 8009254:	6363      	str	r3, [r4, #52]	; 0x34
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	2300      	movs	r3, #0
 8009260:	6063      	str	r3, [r4, #4]
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	f043 0308 	orr.w	r3, r3, #8
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	b94b      	cbnz	r3, 8009286 <__swsetup_r+0x9a>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d003      	beq.n	8009286 <__swsetup_r+0x9a>
 800927e:	4621      	mov	r1, r4
 8009280:	4630      	mov	r0, r6
 8009282:	f001 fbed 	bl	800aa60 <__smakebuf_r>
 8009286:	89a0      	ldrh	r0, [r4, #12]
 8009288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800928c:	f010 0301 	ands.w	r3, r0, #1
 8009290:	d00a      	beq.n	80092a8 <__swsetup_r+0xbc>
 8009292:	2300      	movs	r3, #0
 8009294:	60a3      	str	r3, [r4, #8]
 8009296:	6963      	ldr	r3, [r4, #20]
 8009298:	425b      	negs	r3, r3
 800929a:	61a3      	str	r3, [r4, #24]
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	b943      	cbnz	r3, 80092b2 <__swsetup_r+0xc6>
 80092a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092a4:	d1ba      	bne.n	800921c <__swsetup_r+0x30>
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	0781      	lsls	r1, r0, #30
 80092aa:	bf58      	it	pl
 80092ac:	6963      	ldrpl	r3, [r4, #20]
 80092ae:	60a3      	str	r3, [r4, #8]
 80092b0:	e7f4      	b.n	800929c <__swsetup_r+0xb0>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e7f7      	b.n	80092a6 <__swsetup_r+0xba>
 80092b6:	bf00      	nop
 80092b8:	2000001c 	.word	0x2000001c
 80092bc:	0800c4a4 	.word	0x0800c4a4
 80092c0:	0800c4c4 	.word	0x0800c4c4
 80092c4:	0800c484 	.word	0x0800c484

080092c8 <quorem>:
 80092c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	6903      	ldr	r3, [r0, #16]
 80092ce:	690c      	ldr	r4, [r1, #16]
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	4607      	mov	r7, r0
 80092d4:	f2c0 8081 	blt.w	80093da <quorem+0x112>
 80092d8:	3c01      	subs	r4, #1
 80092da:	f101 0814 	add.w	r8, r1, #20
 80092de:	f100 0514 	add.w	r5, r0, #20
 80092e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f0:	3301      	adds	r3, #1
 80092f2:	429a      	cmp	r2, r3
 80092f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009300:	d331      	bcc.n	8009366 <quorem+0x9e>
 8009302:	f04f 0e00 	mov.w	lr, #0
 8009306:	4640      	mov	r0, r8
 8009308:	46ac      	mov	ip, r5
 800930a:	46f2      	mov	sl, lr
 800930c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009310:	b293      	uxth	r3, r2
 8009312:	fb06 e303 	mla	r3, r6, r3, lr
 8009316:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800931a:	b29b      	uxth	r3, r3
 800931c:	ebaa 0303 	sub.w	r3, sl, r3
 8009320:	f8dc a000 	ldr.w	sl, [ip]
 8009324:	0c12      	lsrs	r2, r2, #16
 8009326:	fa13 f38a 	uxtah	r3, r3, sl
 800932a:	fb06 e202 	mla	r2, r6, r2, lr
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009336:	b292      	uxth	r2, r2
 8009338:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800933c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009340:	f8bd 3000 	ldrh.w	r3, [sp]
 8009344:	4581      	cmp	r9, r0
 8009346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800934a:	f84c 3b04 	str.w	r3, [ip], #4
 800934e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009352:	d2db      	bcs.n	800930c <quorem+0x44>
 8009354:	f855 300b 	ldr.w	r3, [r5, fp]
 8009358:	b92b      	cbnz	r3, 8009366 <quorem+0x9e>
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	3b04      	subs	r3, #4
 800935e:	429d      	cmp	r5, r3
 8009360:	461a      	mov	r2, r3
 8009362:	d32e      	bcc.n	80093c2 <quorem+0xfa>
 8009364:	613c      	str	r4, [r7, #16]
 8009366:	4638      	mov	r0, r7
 8009368:	f001 fea0 	bl	800b0ac <__mcmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	db24      	blt.n	80093ba <quorem+0xf2>
 8009370:	3601      	adds	r6, #1
 8009372:	4628      	mov	r0, r5
 8009374:	f04f 0c00 	mov.w	ip, #0
 8009378:	f858 2b04 	ldr.w	r2, [r8], #4
 800937c:	f8d0 e000 	ldr.w	lr, [r0]
 8009380:	b293      	uxth	r3, r2
 8009382:	ebac 0303 	sub.w	r3, ip, r3
 8009386:	0c12      	lsrs	r2, r2, #16
 8009388:	fa13 f38e 	uxtah	r3, r3, lr
 800938c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009394:	b29b      	uxth	r3, r3
 8009396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800939a:	45c1      	cmp	r9, r8
 800939c:	f840 3b04 	str.w	r3, [r0], #4
 80093a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093a4:	d2e8      	bcs.n	8009378 <quorem+0xb0>
 80093a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ae:	b922      	cbnz	r2, 80093ba <quorem+0xf2>
 80093b0:	3b04      	subs	r3, #4
 80093b2:	429d      	cmp	r5, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	d30a      	bcc.n	80093ce <quorem+0x106>
 80093b8:	613c      	str	r4, [r7, #16]
 80093ba:	4630      	mov	r0, r6
 80093bc:	b003      	add	sp, #12
 80093be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	3b04      	subs	r3, #4
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	d1cc      	bne.n	8009364 <quorem+0x9c>
 80093ca:	3c01      	subs	r4, #1
 80093cc:	e7c7      	b.n	800935e <quorem+0x96>
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	3b04      	subs	r3, #4
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d1f0      	bne.n	80093b8 <quorem+0xf0>
 80093d6:	3c01      	subs	r4, #1
 80093d8:	e7eb      	b.n	80093b2 <quorem+0xea>
 80093da:	2000      	movs	r0, #0
 80093dc:	e7ee      	b.n	80093bc <quorem+0xf4>
	...

080093e0 <_dtoa_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	ed2d 8b04 	vpush	{d8-d9}
 80093e8:	ec57 6b10 	vmov	r6, r7, d0
 80093ec:	b093      	sub	sp, #76	; 0x4c
 80093ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093f4:	9106      	str	r1, [sp, #24]
 80093f6:	ee10 aa10 	vmov	sl, s0
 80093fa:	4604      	mov	r4, r0
 80093fc:	9209      	str	r2, [sp, #36]	; 0x24
 80093fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009400:	46bb      	mov	fp, r7
 8009402:	b975      	cbnz	r5, 8009422 <_dtoa_r+0x42>
 8009404:	2010      	movs	r0, #16
 8009406:	f001 fb6b 	bl	800aae0 <malloc>
 800940a:	4602      	mov	r2, r0
 800940c:	6260      	str	r0, [r4, #36]	; 0x24
 800940e:	b920      	cbnz	r0, 800941a <_dtoa_r+0x3a>
 8009410:	4ba7      	ldr	r3, [pc, #668]	; (80096b0 <_dtoa_r+0x2d0>)
 8009412:	21ea      	movs	r1, #234	; 0xea
 8009414:	48a7      	ldr	r0, [pc, #668]	; (80096b4 <_dtoa_r+0x2d4>)
 8009416:	f002 fc79 	bl	800bd0c <__assert_func>
 800941a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800941e:	6005      	str	r5, [r0, #0]
 8009420:	60c5      	str	r5, [r0, #12]
 8009422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009424:	6819      	ldr	r1, [r3, #0]
 8009426:	b151      	cbz	r1, 800943e <_dtoa_r+0x5e>
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	604a      	str	r2, [r1, #4]
 800942c:	2301      	movs	r3, #1
 800942e:	4093      	lsls	r3, r2
 8009430:	608b      	str	r3, [r1, #8]
 8009432:	4620      	mov	r0, r4
 8009434:	f001 fbae 	bl	800ab94 <_Bfree>
 8009438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	1e3b      	subs	r3, r7, #0
 8009440:	bfaa      	itet	ge
 8009442:	2300      	movge	r3, #0
 8009444:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009448:	f8c8 3000 	strge.w	r3, [r8]
 800944c:	4b9a      	ldr	r3, [pc, #616]	; (80096b8 <_dtoa_r+0x2d8>)
 800944e:	bfbc      	itt	lt
 8009450:	2201      	movlt	r2, #1
 8009452:	f8c8 2000 	strlt.w	r2, [r8]
 8009456:	ea33 030b 	bics.w	r3, r3, fp
 800945a:	d11b      	bne.n	8009494 <_dtoa_r+0xb4>
 800945c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800945e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009468:	4333      	orrs	r3, r6
 800946a:	f000 8592 	beq.w	8009f92 <_dtoa_r+0xbb2>
 800946e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009470:	b963      	cbnz	r3, 800948c <_dtoa_r+0xac>
 8009472:	4b92      	ldr	r3, [pc, #584]	; (80096bc <_dtoa_r+0x2dc>)
 8009474:	e022      	b.n	80094bc <_dtoa_r+0xdc>
 8009476:	4b92      	ldr	r3, [pc, #584]	; (80096c0 <_dtoa_r+0x2e0>)
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	3308      	adds	r3, #8
 800947c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	b013      	add	sp, #76	; 0x4c
 8009484:	ecbd 8b04 	vpop	{d8-d9}
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	4b8b      	ldr	r3, [pc, #556]	; (80096bc <_dtoa_r+0x2dc>)
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	3303      	adds	r3, #3
 8009492:	e7f3      	b.n	800947c <_dtoa_r+0x9c>
 8009494:	2200      	movs	r2, #0
 8009496:	2300      	movs	r3, #0
 8009498:	4650      	mov	r0, sl
 800949a:	4659      	mov	r1, fp
 800949c:	f7f7 faec 	bl	8000a78 <__aeabi_dcmpeq>
 80094a0:	ec4b ab19 	vmov	d9, sl, fp
 80094a4:	4680      	mov	r8, r0
 80094a6:	b158      	cbz	r0, 80094c0 <_dtoa_r+0xe0>
 80094a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094aa:	2301      	movs	r3, #1
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 856b 	beq.w	8009f8c <_dtoa_r+0xbac>
 80094b6:	4883      	ldr	r0, [pc, #524]	; (80096c4 <_dtoa_r+0x2e4>)
 80094b8:	6018      	str	r0, [r3, #0]
 80094ba:	1e43      	subs	r3, r0, #1
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	e7df      	b.n	8009480 <_dtoa_r+0xa0>
 80094c0:	ec4b ab10 	vmov	d0, sl, fp
 80094c4:	aa10      	add	r2, sp, #64	; 0x40
 80094c6:	a911      	add	r1, sp, #68	; 0x44
 80094c8:	4620      	mov	r0, r4
 80094ca:	f001 ff11 	bl	800b2f0 <__d2b>
 80094ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80094d2:	ee08 0a10 	vmov	s16, r0
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	f000 8084 	beq.w	80095e4 <_dtoa_r+0x204>
 80094dc:	ee19 3a90 	vmov	r3, s19
 80094e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094e8:	4656      	mov	r6, sl
 80094ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80094f6:	4b74      	ldr	r3, [pc, #464]	; (80096c8 <_dtoa_r+0x2e8>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f6 fe9b 	bl	8000238 <__aeabi_dsub>
 8009502:	a365      	add	r3, pc, #404	; (adr r3, 8009698 <_dtoa_r+0x2b8>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f7f7 f84e 	bl	80005a8 <__aeabi_dmul>
 800950c:	a364      	add	r3, pc, #400	; (adr r3, 80096a0 <_dtoa_r+0x2c0>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f6 fe93 	bl	800023c <__adddf3>
 8009516:	4606      	mov	r6, r0
 8009518:	4628      	mov	r0, r5
 800951a:	460f      	mov	r7, r1
 800951c:	f7f6 ffda 	bl	80004d4 <__aeabi_i2d>
 8009520:	a361      	add	r3, pc, #388	; (adr r3, 80096a8 <_dtoa_r+0x2c8>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f83f 	bl	80005a8 <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4630      	mov	r0, r6
 8009530:	4639      	mov	r1, r7
 8009532:	f7f6 fe83 	bl	800023c <__adddf3>
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	f7f7 fae5 	bl	8000b08 <__aeabi_d2iz>
 800953e:	2200      	movs	r2, #0
 8009540:	9000      	str	r0, [sp, #0]
 8009542:	2300      	movs	r3, #0
 8009544:	4630      	mov	r0, r6
 8009546:	4639      	mov	r1, r7
 8009548:	f7f7 faa0 	bl	8000a8c <__aeabi_dcmplt>
 800954c:	b150      	cbz	r0, 8009564 <_dtoa_r+0x184>
 800954e:	9800      	ldr	r0, [sp, #0]
 8009550:	f7f6 ffc0 	bl	80004d4 <__aeabi_i2d>
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	f7f7 fa8e 	bl	8000a78 <__aeabi_dcmpeq>
 800955c:	b910      	cbnz	r0, 8009564 <_dtoa_r+0x184>
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	3b01      	subs	r3, #1
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	9b00      	ldr	r3, [sp, #0]
 8009566:	2b16      	cmp	r3, #22
 8009568:	d85a      	bhi.n	8009620 <_dtoa_r+0x240>
 800956a:	9a00      	ldr	r2, [sp, #0]
 800956c:	4b57      	ldr	r3, [pc, #348]	; (80096cc <_dtoa_r+0x2ec>)
 800956e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	ec51 0b19 	vmov	r0, r1, d9
 800957a:	f7f7 fa87 	bl	8000a8c <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	d050      	beq.n	8009624 <_dtoa_r+0x244>
 8009582:	9b00      	ldr	r3, [sp, #0]
 8009584:	3b01      	subs	r3, #1
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2300      	movs	r3, #0
 800958a:	930b      	str	r3, [sp, #44]	; 0x2c
 800958c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800958e:	1b5d      	subs	r5, r3, r5
 8009590:	1e6b      	subs	r3, r5, #1
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	bf45      	ittet	mi
 8009596:	f1c5 0301 	rsbmi	r3, r5, #1
 800959a:	9304      	strmi	r3, [sp, #16]
 800959c:	2300      	movpl	r3, #0
 800959e:	2300      	movmi	r3, #0
 80095a0:	bf4c      	ite	mi
 80095a2:	9305      	strmi	r3, [sp, #20]
 80095a4:	9304      	strpl	r3, [sp, #16]
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	db3d      	blt.n	8009628 <_dtoa_r+0x248>
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	9a00      	ldr	r2, [sp, #0]
 80095b0:	920a      	str	r2, [sp, #40]	; 0x28
 80095b2:	4413      	add	r3, r2
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	2b09      	cmp	r3, #9
 80095be:	f200 8089 	bhi.w	80096d4 <_dtoa_r+0x2f4>
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	bfc4      	itt	gt
 80095c6:	3b04      	subgt	r3, #4
 80095c8:	9306      	strgt	r3, [sp, #24]
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	f1a3 0302 	sub.w	r3, r3, #2
 80095d0:	bfcc      	ite	gt
 80095d2:	2500      	movgt	r5, #0
 80095d4:	2501      	movle	r5, #1
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	f200 8087 	bhi.w	80096ea <_dtoa_r+0x30a>
 80095dc:	e8df f003 	tbb	[pc, r3]
 80095e0:	59383a2d 	.word	0x59383a2d
 80095e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80095e8:	441d      	add	r5, r3
 80095ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	bfc1      	itttt	gt
 80095f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80095fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009602:	bfda      	itte	le
 8009604:	f1c3 0320 	rsble	r3, r3, #32
 8009608:	fa06 f003 	lslle.w	r0, r6, r3
 800960c:	4318      	orrgt	r0, r3
 800960e:	f7f6 ff51 	bl	80004b4 <__aeabi_ui2d>
 8009612:	2301      	movs	r3, #1
 8009614:	4606      	mov	r6, r0
 8009616:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800961a:	3d01      	subs	r5, #1
 800961c:	930e      	str	r3, [sp, #56]	; 0x38
 800961e:	e76a      	b.n	80094f6 <_dtoa_r+0x116>
 8009620:	2301      	movs	r3, #1
 8009622:	e7b2      	b.n	800958a <_dtoa_r+0x1aa>
 8009624:	900b      	str	r0, [sp, #44]	; 0x2c
 8009626:	e7b1      	b.n	800958c <_dtoa_r+0x1ac>
 8009628:	9b04      	ldr	r3, [sp, #16]
 800962a:	9a00      	ldr	r2, [sp, #0]
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	4253      	negs	r3, r2
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	2300      	movs	r3, #0
 8009636:	930a      	str	r3, [sp, #40]	; 0x28
 8009638:	e7bf      	b.n	80095ba <_dtoa_r+0x1da>
 800963a:	2300      	movs	r3, #0
 800963c:	9308      	str	r3, [sp, #32]
 800963e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	dc55      	bgt.n	80096f0 <_dtoa_r+0x310>
 8009644:	2301      	movs	r3, #1
 8009646:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800964a:	461a      	mov	r2, r3
 800964c:	9209      	str	r2, [sp, #36]	; 0x24
 800964e:	e00c      	b.n	800966a <_dtoa_r+0x28a>
 8009650:	2301      	movs	r3, #1
 8009652:	e7f3      	b.n	800963c <_dtoa_r+0x25c>
 8009654:	2300      	movs	r3, #0
 8009656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	9b00      	ldr	r3, [sp, #0]
 800965c:	4413      	add	r3, r2
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	3301      	adds	r3, #1
 8009662:	2b01      	cmp	r3, #1
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	bfb8      	it	lt
 8009668:	2301      	movlt	r3, #1
 800966a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800966c:	2200      	movs	r2, #0
 800966e:	6042      	str	r2, [r0, #4]
 8009670:	2204      	movs	r2, #4
 8009672:	f102 0614 	add.w	r6, r2, #20
 8009676:	429e      	cmp	r6, r3
 8009678:	6841      	ldr	r1, [r0, #4]
 800967a:	d93d      	bls.n	80096f8 <_dtoa_r+0x318>
 800967c:	4620      	mov	r0, r4
 800967e:	f001 fa49 	bl	800ab14 <_Balloc>
 8009682:	9001      	str	r0, [sp, #4]
 8009684:	2800      	cmp	r0, #0
 8009686:	d13b      	bne.n	8009700 <_dtoa_r+0x320>
 8009688:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <_dtoa_r+0x2f0>)
 800968a:	4602      	mov	r2, r0
 800968c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009690:	e6c0      	b.n	8009414 <_dtoa_r+0x34>
 8009692:	2301      	movs	r3, #1
 8009694:	e7df      	b.n	8009656 <_dtoa_r+0x276>
 8009696:	bf00      	nop
 8009698:	636f4361 	.word	0x636f4361
 800969c:	3fd287a7 	.word	0x3fd287a7
 80096a0:	8b60c8b3 	.word	0x8b60c8b3
 80096a4:	3fc68a28 	.word	0x3fc68a28
 80096a8:	509f79fb 	.word	0x509f79fb
 80096ac:	3fd34413 	.word	0x3fd34413
 80096b0:	0800c3fe 	.word	0x0800c3fe
 80096b4:	0800c415 	.word	0x0800c415
 80096b8:	7ff00000 	.word	0x7ff00000
 80096bc:	0800c3fa 	.word	0x0800c3fa
 80096c0:	0800c3f1 	.word	0x0800c3f1
 80096c4:	0800c275 	.word	0x0800c275
 80096c8:	3ff80000 	.word	0x3ff80000
 80096cc:	0800c5e8 	.word	0x0800c5e8
 80096d0:	0800c470 	.word	0x0800c470
 80096d4:	2501      	movs	r5, #1
 80096d6:	2300      	movs	r3, #0
 80096d8:	9306      	str	r3, [sp, #24]
 80096da:	9508      	str	r5, [sp, #32]
 80096dc:	f04f 33ff 	mov.w	r3, #4294967295
 80096e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	2312      	movs	r3, #18
 80096e8:	e7b0      	b.n	800964c <_dtoa_r+0x26c>
 80096ea:	2301      	movs	r3, #1
 80096ec:	9308      	str	r3, [sp, #32]
 80096ee:	e7f5      	b.n	80096dc <_dtoa_r+0x2fc>
 80096f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096f6:	e7b8      	b.n	800966a <_dtoa_r+0x28a>
 80096f8:	3101      	adds	r1, #1
 80096fa:	6041      	str	r1, [r0, #4]
 80096fc:	0052      	lsls	r2, r2, #1
 80096fe:	e7b8      	b.n	8009672 <_dtoa_r+0x292>
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	9a01      	ldr	r2, [sp, #4]
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	2b0e      	cmp	r3, #14
 800970a:	f200 809d 	bhi.w	8009848 <_dtoa_r+0x468>
 800970e:	2d00      	cmp	r5, #0
 8009710:	f000 809a 	beq.w	8009848 <_dtoa_r+0x468>
 8009714:	9b00      	ldr	r3, [sp, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	dd32      	ble.n	8009780 <_dtoa_r+0x3a0>
 800971a:	4ab7      	ldr	r2, [pc, #732]	; (80099f8 <_dtoa_r+0x618>)
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009728:	9b00      	ldr	r3, [sp, #0]
 800972a:	05d8      	lsls	r0, r3, #23
 800972c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009730:	d516      	bpl.n	8009760 <_dtoa_r+0x380>
 8009732:	4bb2      	ldr	r3, [pc, #712]	; (80099fc <_dtoa_r+0x61c>)
 8009734:	ec51 0b19 	vmov	r0, r1, d9
 8009738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800973c:	f7f7 f85e 	bl	80007fc <__aeabi_ddiv>
 8009740:	f007 070f 	and.w	r7, r7, #15
 8009744:	4682      	mov	sl, r0
 8009746:	468b      	mov	fp, r1
 8009748:	2503      	movs	r5, #3
 800974a:	4eac      	ldr	r6, [pc, #688]	; (80099fc <_dtoa_r+0x61c>)
 800974c:	b957      	cbnz	r7, 8009764 <_dtoa_r+0x384>
 800974e:	4642      	mov	r2, r8
 8009750:	464b      	mov	r3, r9
 8009752:	4650      	mov	r0, sl
 8009754:	4659      	mov	r1, fp
 8009756:	f7f7 f851 	bl	80007fc <__aeabi_ddiv>
 800975a:	4682      	mov	sl, r0
 800975c:	468b      	mov	fp, r1
 800975e:	e028      	b.n	80097b2 <_dtoa_r+0x3d2>
 8009760:	2502      	movs	r5, #2
 8009762:	e7f2      	b.n	800974a <_dtoa_r+0x36a>
 8009764:	07f9      	lsls	r1, r7, #31
 8009766:	d508      	bpl.n	800977a <_dtoa_r+0x39a>
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009770:	f7f6 ff1a 	bl	80005a8 <__aeabi_dmul>
 8009774:	3501      	adds	r5, #1
 8009776:	4680      	mov	r8, r0
 8009778:	4689      	mov	r9, r1
 800977a:	107f      	asrs	r7, r7, #1
 800977c:	3608      	adds	r6, #8
 800977e:	e7e5      	b.n	800974c <_dtoa_r+0x36c>
 8009780:	f000 809b 	beq.w	80098ba <_dtoa_r+0x4da>
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	4f9d      	ldr	r7, [pc, #628]	; (80099fc <_dtoa_r+0x61c>)
 8009788:	425e      	negs	r6, r3
 800978a:	4b9b      	ldr	r3, [pc, #620]	; (80099f8 <_dtoa_r+0x618>)
 800978c:	f006 020f 	and.w	r2, r6, #15
 8009790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	ec51 0b19 	vmov	r0, r1, d9
 800979c:	f7f6 ff04 	bl	80005a8 <__aeabi_dmul>
 80097a0:	1136      	asrs	r6, r6, #4
 80097a2:	4682      	mov	sl, r0
 80097a4:	468b      	mov	fp, r1
 80097a6:	2300      	movs	r3, #0
 80097a8:	2502      	movs	r5, #2
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	d17a      	bne.n	80098a4 <_dtoa_r+0x4c4>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1d3      	bne.n	800975a <_dtoa_r+0x37a>
 80097b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8082 	beq.w	80098be <_dtoa_r+0x4de>
 80097ba:	4b91      	ldr	r3, [pc, #580]	; (8009a00 <_dtoa_r+0x620>)
 80097bc:	2200      	movs	r2, #0
 80097be:	4650      	mov	r0, sl
 80097c0:	4659      	mov	r1, fp
 80097c2:	f7f7 f963 	bl	8000a8c <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d079      	beq.n	80098be <_dtoa_r+0x4de>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d076      	beq.n	80098be <_dtoa_r+0x4de>
 80097d0:	9b02      	ldr	r3, [sp, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	dd36      	ble.n	8009844 <_dtoa_r+0x464>
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	4650      	mov	r0, sl
 80097da:	4659      	mov	r1, fp
 80097dc:	1e5f      	subs	r7, r3, #1
 80097de:	2200      	movs	r2, #0
 80097e0:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <_dtoa_r+0x624>)
 80097e2:	f7f6 fee1 	bl	80005a8 <__aeabi_dmul>
 80097e6:	9e02      	ldr	r6, [sp, #8]
 80097e8:	4682      	mov	sl, r0
 80097ea:	468b      	mov	fp, r1
 80097ec:	3501      	adds	r5, #1
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7f6 fe70 	bl	80004d4 <__aeabi_i2d>
 80097f4:	4652      	mov	r2, sl
 80097f6:	465b      	mov	r3, fp
 80097f8:	f7f6 fed6 	bl	80005a8 <__aeabi_dmul>
 80097fc:	4b82      	ldr	r3, [pc, #520]	; (8009a08 <_dtoa_r+0x628>)
 80097fe:	2200      	movs	r2, #0
 8009800:	f7f6 fd1c 	bl	800023c <__adddf3>
 8009804:	46d0      	mov	r8, sl
 8009806:	46d9      	mov	r9, fp
 8009808:	4682      	mov	sl, r0
 800980a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800980e:	2e00      	cmp	r6, #0
 8009810:	d158      	bne.n	80098c4 <_dtoa_r+0x4e4>
 8009812:	4b7e      	ldr	r3, [pc, #504]	; (8009a0c <_dtoa_r+0x62c>)
 8009814:	2200      	movs	r2, #0
 8009816:	4640      	mov	r0, r8
 8009818:	4649      	mov	r1, r9
 800981a:	f7f6 fd0d 	bl	8000238 <__aeabi_dsub>
 800981e:	4652      	mov	r2, sl
 8009820:	465b      	mov	r3, fp
 8009822:	4680      	mov	r8, r0
 8009824:	4689      	mov	r9, r1
 8009826:	f7f7 f94f 	bl	8000ac8 <__aeabi_dcmpgt>
 800982a:	2800      	cmp	r0, #0
 800982c:	f040 8295 	bne.w	8009d5a <_dtoa_r+0x97a>
 8009830:	4652      	mov	r2, sl
 8009832:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f7 f927 	bl	8000a8c <__aeabi_dcmplt>
 800983e:	2800      	cmp	r0, #0
 8009840:	f040 8289 	bne.w	8009d56 <_dtoa_r+0x976>
 8009844:	ec5b ab19 	vmov	sl, fp, d9
 8009848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800984a:	2b00      	cmp	r3, #0
 800984c:	f2c0 8148 	blt.w	8009ae0 <_dtoa_r+0x700>
 8009850:	9a00      	ldr	r2, [sp, #0]
 8009852:	2a0e      	cmp	r2, #14
 8009854:	f300 8144 	bgt.w	8009ae0 <_dtoa_r+0x700>
 8009858:	4b67      	ldr	r3, [pc, #412]	; (80099f8 <_dtoa_r+0x618>)
 800985a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800985e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	f280 80d5 	bge.w	8009a14 <_dtoa_r+0x634>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f300 80d1 	bgt.w	8009a14 <_dtoa_r+0x634>
 8009872:	f040 826f 	bne.w	8009d54 <_dtoa_r+0x974>
 8009876:	4b65      	ldr	r3, [pc, #404]	; (8009a0c <_dtoa_r+0x62c>)
 8009878:	2200      	movs	r2, #0
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	f7f6 fe93 	bl	80005a8 <__aeabi_dmul>
 8009882:	4652      	mov	r2, sl
 8009884:	465b      	mov	r3, fp
 8009886:	f7f7 f915 	bl	8000ab4 <__aeabi_dcmpge>
 800988a:	9e03      	ldr	r6, [sp, #12]
 800988c:	4637      	mov	r7, r6
 800988e:	2800      	cmp	r0, #0
 8009890:	f040 8245 	bne.w	8009d1e <_dtoa_r+0x93e>
 8009894:	9d01      	ldr	r5, [sp, #4]
 8009896:	2331      	movs	r3, #49	; 0x31
 8009898:	f805 3b01 	strb.w	r3, [r5], #1
 800989c:	9b00      	ldr	r3, [sp, #0]
 800989e:	3301      	adds	r3, #1
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	e240      	b.n	8009d26 <_dtoa_r+0x946>
 80098a4:	07f2      	lsls	r2, r6, #31
 80098a6:	d505      	bpl.n	80098b4 <_dtoa_r+0x4d4>
 80098a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ac:	f7f6 fe7c 	bl	80005a8 <__aeabi_dmul>
 80098b0:	3501      	adds	r5, #1
 80098b2:	2301      	movs	r3, #1
 80098b4:	1076      	asrs	r6, r6, #1
 80098b6:	3708      	adds	r7, #8
 80098b8:	e777      	b.n	80097aa <_dtoa_r+0x3ca>
 80098ba:	2502      	movs	r5, #2
 80098bc:	e779      	b.n	80097b2 <_dtoa_r+0x3d2>
 80098be:	9f00      	ldr	r7, [sp, #0]
 80098c0:	9e03      	ldr	r6, [sp, #12]
 80098c2:	e794      	b.n	80097ee <_dtoa_r+0x40e>
 80098c4:	9901      	ldr	r1, [sp, #4]
 80098c6:	4b4c      	ldr	r3, [pc, #304]	; (80099f8 <_dtoa_r+0x618>)
 80098c8:	4431      	add	r1, r6
 80098ca:	910d      	str	r1, [sp, #52]	; 0x34
 80098cc:	9908      	ldr	r1, [sp, #32]
 80098ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80098d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098d6:	2900      	cmp	r1, #0
 80098d8:	d043      	beq.n	8009962 <_dtoa_r+0x582>
 80098da:	494d      	ldr	r1, [pc, #308]	; (8009a10 <_dtoa_r+0x630>)
 80098dc:	2000      	movs	r0, #0
 80098de:	f7f6 ff8d 	bl	80007fc <__aeabi_ddiv>
 80098e2:	4652      	mov	r2, sl
 80098e4:	465b      	mov	r3, fp
 80098e6:	f7f6 fca7 	bl	8000238 <__aeabi_dsub>
 80098ea:	9d01      	ldr	r5, [sp, #4]
 80098ec:	4682      	mov	sl, r0
 80098ee:	468b      	mov	fp, r1
 80098f0:	4649      	mov	r1, r9
 80098f2:	4640      	mov	r0, r8
 80098f4:	f7f7 f908 	bl	8000b08 <__aeabi_d2iz>
 80098f8:	4606      	mov	r6, r0
 80098fa:	f7f6 fdeb 	bl	80004d4 <__aeabi_i2d>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	f7f6 fc97 	bl	8000238 <__aeabi_dsub>
 800990a:	3630      	adds	r6, #48	; 0x30
 800990c:	f805 6b01 	strb.w	r6, [r5], #1
 8009910:	4652      	mov	r2, sl
 8009912:	465b      	mov	r3, fp
 8009914:	4680      	mov	r8, r0
 8009916:	4689      	mov	r9, r1
 8009918:	f7f7 f8b8 	bl	8000a8c <__aeabi_dcmplt>
 800991c:	2800      	cmp	r0, #0
 800991e:	d163      	bne.n	80099e8 <_dtoa_r+0x608>
 8009920:	4642      	mov	r2, r8
 8009922:	464b      	mov	r3, r9
 8009924:	4936      	ldr	r1, [pc, #216]	; (8009a00 <_dtoa_r+0x620>)
 8009926:	2000      	movs	r0, #0
 8009928:	f7f6 fc86 	bl	8000238 <__aeabi_dsub>
 800992c:	4652      	mov	r2, sl
 800992e:	465b      	mov	r3, fp
 8009930:	f7f7 f8ac 	bl	8000a8c <__aeabi_dcmplt>
 8009934:	2800      	cmp	r0, #0
 8009936:	f040 80b5 	bne.w	8009aa4 <_dtoa_r+0x6c4>
 800993a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800993c:	429d      	cmp	r5, r3
 800993e:	d081      	beq.n	8009844 <_dtoa_r+0x464>
 8009940:	4b30      	ldr	r3, [pc, #192]	; (8009a04 <_dtoa_r+0x624>)
 8009942:	2200      	movs	r2, #0
 8009944:	4650      	mov	r0, sl
 8009946:	4659      	mov	r1, fp
 8009948:	f7f6 fe2e 	bl	80005a8 <__aeabi_dmul>
 800994c:	4b2d      	ldr	r3, [pc, #180]	; (8009a04 <_dtoa_r+0x624>)
 800994e:	4682      	mov	sl, r0
 8009950:	468b      	mov	fp, r1
 8009952:	4640      	mov	r0, r8
 8009954:	4649      	mov	r1, r9
 8009956:	2200      	movs	r2, #0
 8009958:	f7f6 fe26 	bl	80005a8 <__aeabi_dmul>
 800995c:	4680      	mov	r8, r0
 800995e:	4689      	mov	r9, r1
 8009960:	e7c6      	b.n	80098f0 <_dtoa_r+0x510>
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	f7f6 fe1f 	bl	80005a8 <__aeabi_dmul>
 800996a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996c:	9d01      	ldr	r5, [sp, #4]
 800996e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009970:	4682      	mov	sl, r0
 8009972:	468b      	mov	fp, r1
 8009974:	4649      	mov	r1, r9
 8009976:	4640      	mov	r0, r8
 8009978:	f7f7 f8c6 	bl	8000b08 <__aeabi_d2iz>
 800997c:	4606      	mov	r6, r0
 800997e:	f7f6 fda9 	bl	80004d4 <__aeabi_i2d>
 8009982:	3630      	adds	r6, #48	; 0x30
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4640      	mov	r0, r8
 800998a:	4649      	mov	r1, r9
 800998c:	f7f6 fc54 	bl	8000238 <__aeabi_dsub>
 8009990:	f805 6b01 	strb.w	r6, [r5], #1
 8009994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009996:	429d      	cmp	r5, r3
 8009998:	4680      	mov	r8, r0
 800999a:	4689      	mov	r9, r1
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	d124      	bne.n	80099ec <_dtoa_r+0x60c>
 80099a2:	4b1b      	ldr	r3, [pc, #108]	; (8009a10 <_dtoa_r+0x630>)
 80099a4:	4650      	mov	r0, sl
 80099a6:	4659      	mov	r1, fp
 80099a8:	f7f6 fc48 	bl	800023c <__adddf3>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f7 f888 	bl	8000ac8 <__aeabi_dcmpgt>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d173      	bne.n	8009aa4 <_dtoa_r+0x6c4>
 80099bc:	4652      	mov	r2, sl
 80099be:	465b      	mov	r3, fp
 80099c0:	4913      	ldr	r1, [pc, #76]	; (8009a10 <_dtoa_r+0x630>)
 80099c2:	2000      	movs	r0, #0
 80099c4:	f7f6 fc38 	bl	8000238 <__aeabi_dsub>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4640      	mov	r0, r8
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7f7 f85c 	bl	8000a8c <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f af35 	beq.w	8009844 <_dtoa_r+0x464>
 80099da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099dc:	1e6b      	subs	r3, r5, #1
 80099de:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099e4:	2b30      	cmp	r3, #48	; 0x30
 80099e6:	d0f8      	beq.n	80099da <_dtoa_r+0x5fa>
 80099e8:	9700      	str	r7, [sp, #0]
 80099ea:	e049      	b.n	8009a80 <_dtoa_r+0x6a0>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_dtoa_r+0x624>)
 80099ee:	f7f6 fddb 	bl	80005a8 <__aeabi_dmul>
 80099f2:	4680      	mov	r8, r0
 80099f4:	4689      	mov	r9, r1
 80099f6:	e7bd      	b.n	8009974 <_dtoa_r+0x594>
 80099f8:	0800c5e8 	.word	0x0800c5e8
 80099fc:	0800c5c0 	.word	0x0800c5c0
 8009a00:	3ff00000 	.word	0x3ff00000
 8009a04:	40240000 	.word	0x40240000
 8009a08:	401c0000 	.word	0x401c0000
 8009a0c:	40140000 	.word	0x40140000
 8009a10:	3fe00000 	.word	0x3fe00000
 8009a14:	9d01      	ldr	r5, [sp, #4]
 8009a16:	4656      	mov	r6, sl
 8009a18:	465f      	mov	r7, fp
 8009a1a:	4642      	mov	r2, r8
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f6 feeb 	bl	80007fc <__aeabi_ddiv>
 8009a26:	f7f7 f86f 	bl	8000b08 <__aeabi_d2iz>
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	f7f6 fd52 	bl	80004d4 <__aeabi_i2d>
 8009a30:	4642      	mov	r2, r8
 8009a32:	464b      	mov	r3, r9
 8009a34:	f7f6 fdb8 	bl	80005a8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a44:	f7f6 fbf8 	bl	8000238 <__aeabi_dsub>
 8009a48:	f805 6b01 	strb.w	r6, [r5], #1
 8009a4c:	9e01      	ldr	r6, [sp, #4]
 8009a4e:	9f03      	ldr	r7, [sp, #12]
 8009a50:	1bae      	subs	r6, r5, r6
 8009a52:	42b7      	cmp	r7, r6
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	d135      	bne.n	8009ac6 <_dtoa_r+0x6e6>
 8009a5a:	f7f6 fbef 	bl	800023c <__adddf3>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	464b      	mov	r3, r9
 8009a62:	4606      	mov	r6, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	f7f7 f82f 	bl	8000ac8 <__aeabi_dcmpgt>
 8009a6a:	b9d0      	cbnz	r0, 8009aa2 <_dtoa_r+0x6c2>
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	464b      	mov	r3, r9
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f800 	bl	8000a78 <__aeabi_dcmpeq>
 8009a78:	b110      	cbz	r0, 8009a80 <_dtoa_r+0x6a0>
 8009a7a:	f01a 0f01 	tst.w	sl, #1
 8009a7e:	d110      	bne.n	8009aa2 <_dtoa_r+0x6c2>
 8009a80:	4620      	mov	r0, r4
 8009a82:	ee18 1a10 	vmov	r1, s16
 8009a86:	f001 f885 	bl	800ab94 <_Bfree>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9800      	ldr	r0, [sp, #0]
 8009a8e:	702b      	strb	r3, [r5, #0]
 8009a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a92:	3001      	adds	r0, #1
 8009a94:	6018      	str	r0, [r3, #0]
 8009a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f43f acf1 	beq.w	8009480 <_dtoa_r+0xa0>
 8009a9e:	601d      	str	r5, [r3, #0]
 8009aa0:	e4ee      	b.n	8009480 <_dtoa_r+0xa0>
 8009aa2:	9f00      	ldr	r7, [sp, #0]
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	461d      	mov	r5, r3
 8009aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aac:	2a39      	cmp	r2, #57	; 0x39
 8009aae:	d106      	bne.n	8009abe <_dtoa_r+0x6de>
 8009ab0:	9a01      	ldr	r2, [sp, #4]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d1f7      	bne.n	8009aa6 <_dtoa_r+0x6c6>
 8009ab6:	9901      	ldr	r1, [sp, #4]
 8009ab8:	2230      	movs	r2, #48	; 0x30
 8009aba:	3701      	adds	r7, #1
 8009abc:	700a      	strb	r2, [r1, #0]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e790      	b.n	80099e8 <_dtoa_r+0x608>
 8009ac6:	4ba6      	ldr	r3, [pc, #664]	; (8009d60 <_dtoa_r+0x980>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f7f6 fd6d 	bl	80005a8 <__aeabi_dmul>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	f7f6 ffcf 	bl	8000a78 <__aeabi_dcmpeq>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d09d      	beq.n	8009a1a <_dtoa_r+0x63a>
 8009ade:	e7cf      	b.n	8009a80 <_dtoa_r+0x6a0>
 8009ae0:	9a08      	ldr	r2, [sp, #32]
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	f000 80d7 	beq.w	8009c96 <_dtoa_r+0x8b6>
 8009ae8:	9a06      	ldr	r2, [sp, #24]
 8009aea:	2a01      	cmp	r2, #1
 8009aec:	f300 80ba 	bgt.w	8009c64 <_dtoa_r+0x884>
 8009af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	f000 80b2 	beq.w	8009c5c <_dtoa_r+0x87c>
 8009af8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009afc:	9e07      	ldr	r6, [sp, #28]
 8009afe:	9d04      	ldr	r5, [sp, #16]
 8009b00:	9a04      	ldr	r2, [sp, #16]
 8009b02:	441a      	add	r2, r3
 8009b04:	9204      	str	r2, [sp, #16]
 8009b06:	9a05      	ldr	r2, [sp, #20]
 8009b08:	2101      	movs	r1, #1
 8009b0a:	441a      	add	r2, r3
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	9205      	str	r2, [sp, #20]
 8009b10:	f001 f942 	bl	800ad98 <__i2b>
 8009b14:	4607      	mov	r7, r0
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	dd0c      	ble.n	8009b34 <_dtoa_r+0x754>
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd09      	ble.n	8009b34 <_dtoa_r+0x754>
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	9a04      	ldr	r2, [sp, #16]
 8009b24:	bfa8      	it	ge
 8009b26:	462b      	movge	r3, r5
 8009b28:	1ad2      	subs	r2, r2, r3
 8009b2a:	9204      	str	r2, [sp, #16]
 8009b2c:	9a05      	ldr	r2, [sp, #20]
 8009b2e:	1aed      	subs	r5, r5, r3
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	9b07      	ldr	r3, [sp, #28]
 8009b36:	b31b      	cbz	r3, 8009b80 <_dtoa_r+0x7a0>
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 80af 	beq.w	8009c9e <_dtoa_r+0x8be>
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	dd13      	ble.n	8009b6c <_dtoa_r+0x78c>
 8009b44:	4639      	mov	r1, r7
 8009b46:	4632      	mov	r2, r6
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f001 f9e5 	bl	800af18 <__pow5mult>
 8009b4e:	ee18 2a10 	vmov	r2, s16
 8009b52:	4601      	mov	r1, r0
 8009b54:	4607      	mov	r7, r0
 8009b56:	4620      	mov	r0, r4
 8009b58:	f001 f934 	bl	800adc4 <__multiply>
 8009b5c:	ee18 1a10 	vmov	r1, s16
 8009b60:	4680      	mov	r8, r0
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 f816 	bl	800ab94 <_Bfree>
 8009b68:	ee08 8a10 	vmov	s16, r8
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	1b9a      	subs	r2, r3, r6
 8009b70:	d006      	beq.n	8009b80 <_dtoa_r+0x7a0>
 8009b72:	ee18 1a10 	vmov	r1, s16
 8009b76:	4620      	mov	r0, r4
 8009b78:	f001 f9ce 	bl	800af18 <__pow5mult>
 8009b7c:	ee08 0a10 	vmov	s16, r0
 8009b80:	2101      	movs	r1, #1
 8009b82:	4620      	mov	r0, r4
 8009b84:	f001 f908 	bl	800ad98 <__i2b>
 8009b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	f340 8088 	ble.w	8009ca2 <_dtoa_r+0x8c2>
 8009b92:	461a      	mov	r2, r3
 8009b94:	4601      	mov	r1, r0
 8009b96:	4620      	mov	r0, r4
 8009b98:	f001 f9be 	bl	800af18 <__pow5mult>
 8009b9c:	9b06      	ldr	r3, [sp, #24]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	f340 8081 	ble.w	8009ca8 <_dtoa_r+0x8c8>
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	6933      	ldr	r3, [r6, #16]
 8009bac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bb0:	6918      	ldr	r0, [r3, #16]
 8009bb2:	f001 f8a1 	bl	800acf8 <__hi0bits>
 8009bb6:	f1c0 0020 	rsb	r0, r0, #32
 8009bba:	9b05      	ldr	r3, [sp, #20]
 8009bbc:	4418      	add	r0, r3
 8009bbe:	f010 001f 	ands.w	r0, r0, #31
 8009bc2:	f000 8092 	beq.w	8009cea <_dtoa_r+0x90a>
 8009bc6:	f1c0 0320 	rsb	r3, r0, #32
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	f340 808a 	ble.w	8009ce4 <_dtoa_r+0x904>
 8009bd0:	f1c0 001c 	rsb	r0, r0, #28
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	4403      	add	r3, r0
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	9b05      	ldr	r3, [sp, #20]
 8009bdc:	4403      	add	r3, r0
 8009bde:	4405      	add	r5, r0
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd07      	ble.n	8009bf8 <_dtoa_r+0x818>
 8009be8:	ee18 1a10 	vmov	r1, s16
 8009bec:	461a      	mov	r2, r3
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 f9ec 	bl	800afcc <__lshift>
 8009bf4:	ee08 0a10 	vmov	s16, r0
 8009bf8:	9b05      	ldr	r3, [sp, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dd05      	ble.n	8009c0a <_dtoa_r+0x82a>
 8009bfe:	4631      	mov	r1, r6
 8009c00:	461a      	mov	r2, r3
 8009c02:	4620      	mov	r0, r4
 8009c04:	f001 f9e2 	bl	800afcc <__lshift>
 8009c08:	4606      	mov	r6, r0
 8009c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d06e      	beq.n	8009cee <_dtoa_r+0x90e>
 8009c10:	ee18 0a10 	vmov	r0, s16
 8009c14:	4631      	mov	r1, r6
 8009c16:	f001 fa49 	bl	800b0ac <__mcmp>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	da67      	bge.n	8009cee <_dtoa_r+0x90e>
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	ee18 1a10 	vmov	r1, s16
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	220a      	movs	r2, #10
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 ffd3 	bl	800abd8 <__multadd>
 8009c32:	9b08      	ldr	r3, [sp, #32]
 8009c34:	ee08 0a10 	vmov	s16, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 81b1 	beq.w	8009fa0 <_dtoa_r+0xbc0>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	4639      	mov	r1, r7
 8009c42:	220a      	movs	r2, #10
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 ffc7 	bl	800abd8 <__multadd>
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	4607      	mov	r7, r0
 8009c50:	f300 808e 	bgt.w	8009d70 <_dtoa_r+0x990>
 8009c54:	9b06      	ldr	r3, [sp, #24]
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	dc51      	bgt.n	8009cfe <_dtoa_r+0x91e>
 8009c5a:	e089      	b.n	8009d70 <_dtoa_r+0x990>
 8009c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c62:	e74b      	b.n	8009afc <_dtoa_r+0x71c>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	1e5e      	subs	r6, r3, #1
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	42b3      	cmp	r3, r6
 8009c6c:	bfbf      	itttt	lt
 8009c6e:	9b07      	ldrlt	r3, [sp, #28]
 8009c70:	9607      	strlt	r6, [sp, #28]
 8009c72:	1af2      	sublt	r2, r6, r3
 8009c74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c76:	bfb6      	itet	lt
 8009c78:	189b      	addlt	r3, r3, r2
 8009c7a:	1b9e      	subge	r6, r3, r6
 8009c7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	bfb8      	it	lt
 8009c82:	2600      	movlt	r6, #0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfb7      	itett	lt
 8009c88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009c8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c90:	1a9d      	sublt	r5, r3, r2
 8009c92:	2300      	movlt	r3, #0
 8009c94:	e734      	b.n	8009b00 <_dtoa_r+0x720>
 8009c96:	9e07      	ldr	r6, [sp, #28]
 8009c98:	9d04      	ldr	r5, [sp, #16]
 8009c9a:	9f08      	ldr	r7, [sp, #32]
 8009c9c:	e73b      	b.n	8009b16 <_dtoa_r+0x736>
 8009c9e:	9a07      	ldr	r2, [sp, #28]
 8009ca0:	e767      	b.n	8009b72 <_dtoa_r+0x792>
 8009ca2:	9b06      	ldr	r3, [sp, #24]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	dc18      	bgt.n	8009cda <_dtoa_r+0x8fa>
 8009ca8:	f1ba 0f00 	cmp.w	sl, #0
 8009cac:	d115      	bne.n	8009cda <_dtoa_r+0x8fa>
 8009cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cb2:	b993      	cbnz	r3, 8009cda <_dtoa_r+0x8fa>
 8009cb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cb8:	0d1b      	lsrs	r3, r3, #20
 8009cba:	051b      	lsls	r3, r3, #20
 8009cbc:	b183      	cbz	r3, 8009ce0 <_dtoa_r+0x900>
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	9b05      	ldr	r3, [sp, #20]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	f04f 0801 	mov.w	r8, #1
 8009cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f47f af6a 	bne.w	8009baa <_dtoa_r+0x7ca>
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	e76f      	b.n	8009bba <_dtoa_r+0x7da>
 8009cda:	f04f 0800 	mov.w	r8, #0
 8009cde:	e7f6      	b.n	8009cce <_dtoa_r+0x8ee>
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	e7f4      	b.n	8009cce <_dtoa_r+0x8ee>
 8009ce4:	f43f af7d 	beq.w	8009be2 <_dtoa_r+0x802>
 8009ce8:	4618      	mov	r0, r3
 8009cea:	301c      	adds	r0, #28
 8009cec:	e772      	b.n	8009bd4 <_dtoa_r+0x7f4>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dc37      	bgt.n	8009d64 <_dtoa_r+0x984>
 8009cf4:	9b06      	ldr	r3, [sp, #24]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	dd34      	ble.n	8009d64 <_dtoa_r+0x984>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	9302      	str	r3, [sp, #8]
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	b96b      	cbnz	r3, 8009d1e <_dtoa_r+0x93e>
 8009d02:	4631      	mov	r1, r6
 8009d04:	2205      	movs	r2, #5
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 ff66 	bl	800abd8 <__multadd>
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	4606      	mov	r6, r0
 8009d10:	ee18 0a10 	vmov	r0, s16
 8009d14:	f001 f9ca 	bl	800b0ac <__mcmp>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f73f adbb 	bgt.w	8009894 <_dtoa_r+0x4b4>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d20:	9d01      	ldr	r5, [sp, #4]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	f04f 0800 	mov.w	r8, #0
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 ff31 	bl	800ab94 <_Bfree>
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	f43f aea4 	beq.w	8009a80 <_dtoa_r+0x6a0>
 8009d38:	f1b8 0f00 	cmp.w	r8, #0
 8009d3c:	d005      	beq.n	8009d4a <_dtoa_r+0x96a>
 8009d3e:	45b8      	cmp	r8, r7
 8009d40:	d003      	beq.n	8009d4a <_dtoa_r+0x96a>
 8009d42:	4641      	mov	r1, r8
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 ff25 	bl	800ab94 <_Bfree>
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 ff21 	bl	800ab94 <_Bfree>
 8009d52:	e695      	b.n	8009a80 <_dtoa_r+0x6a0>
 8009d54:	2600      	movs	r6, #0
 8009d56:	4637      	mov	r7, r6
 8009d58:	e7e1      	b.n	8009d1e <_dtoa_r+0x93e>
 8009d5a:	9700      	str	r7, [sp, #0]
 8009d5c:	4637      	mov	r7, r6
 8009d5e:	e599      	b.n	8009894 <_dtoa_r+0x4b4>
 8009d60:	40240000 	.word	0x40240000
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80ca 	beq.w	8009f00 <_dtoa_r+0xb20>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	9302      	str	r3, [sp, #8]
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x9a0>
 8009d74:	4639      	mov	r1, r7
 8009d76:	462a      	mov	r2, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 f927 	bl	800afcc <__lshift>
 8009d7e:	4607      	mov	r7, r0
 8009d80:	f1b8 0f00 	cmp.w	r8, #0
 8009d84:	d05b      	beq.n	8009e3e <_dtoa_r+0xa5e>
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fec3 	bl	800ab14 <_Balloc>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	b928      	cbnz	r0, 8009d9e <_dtoa_r+0x9be>
 8009d92:	4b87      	ldr	r3, [pc, #540]	; (8009fb0 <_dtoa_r+0xbd0>)
 8009d94:	4602      	mov	r2, r0
 8009d96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d9a:	f7ff bb3b 	b.w	8009414 <_dtoa_r+0x34>
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	3202      	adds	r2, #2
 8009da2:	0092      	lsls	r2, r2, #2
 8009da4:	f107 010c 	add.w	r1, r7, #12
 8009da8:	300c      	adds	r0, #12
 8009daa:	f7fd fbdb 	bl	8007564 <memcpy>
 8009dae:	2201      	movs	r2, #1
 8009db0:	4629      	mov	r1, r5
 8009db2:	4620      	mov	r0, r4
 8009db4:	f001 f90a 	bl	800afcc <__lshift>
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	f103 0901 	add.w	r9, r3, #1
 8009dbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	f00a 0301 	and.w	r3, sl, #1
 8009dca:	46b8      	mov	r8, r7
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	4607      	mov	r7, r0
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	ee18 0a10 	vmov	r0, s16
 8009dd6:	f7ff fa77 	bl	80092c8 <quorem>
 8009dda:	4641      	mov	r1, r8
 8009ddc:	9002      	str	r0, [sp, #8]
 8009dde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009de2:	ee18 0a10 	vmov	r0, s16
 8009de6:	f001 f961 	bl	800b0ac <__mcmp>
 8009dea:	463a      	mov	r2, r7
 8009dec:	9003      	str	r0, [sp, #12]
 8009dee:	4631      	mov	r1, r6
 8009df0:	4620      	mov	r0, r4
 8009df2:	f001 f977 	bl	800b0e4 <__mdiff>
 8009df6:	68c2      	ldr	r2, [r0, #12]
 8009df8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	bb02      	cbnz	r2, 8009e42 <_dtoa_r+0xa62>
 8009e00:	4601      	mov	r1, r0
 8009e02:	ee18 0a10 	vmov	r0, s16
 8009e06:	f001 f951 	bl	800b0ac <__mcmp>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	4620      	mov	r0, r4
 8009e10:	9207      	str	r2, [sp, #28]
 8009e12:	f000 febf 	bl	800ab94 <_Bfree>
 8009e16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e1a:	ea43 0102 	orr.w	r1, r3, r2
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	430b      	orrs	r3, r1
 8009e22:	464d      	mov	r5, r9
 8009e24:	d10f      	bne.n	8009e46 <_dtoa_r+0xa66>
 8009e26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e2a:	d02a      	beq.n	8009e82 <_dtoa_r+0xaa2>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd02      	ble.n	8009e38 <_dtoa_r+0xa58>
 8009e32:	9b02      	ldr	r3, [sp, #8]
 8009e34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e38:	f88b a000 	strb.w	sl, [fp]
 8009e3c:	e775      	b.n	8009d2a <_dtoa_r+0x94a>
 8009e3e:	4638      	mov	r0, r7
 8009e40:	e7ba      	b.n	8009db8 <_dtoa_r+0x9d8>
 8009e42:	2201      	movs	r2, #1
 8009e44:	e7e2      	b.n	8009e0c <_dtoa_r+0xa2c>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	db04      	blt.n	8009e56 <_dtoa_r+0xa76>
 8009e4c:	9906      	ldr	r1, [sp, #24]
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	9904      	ldr	r1, [sp, #16]
 8009e52:	430b      	orrs	r3, r1
 8009e54:	d122      	bne.n	8009e9c <_dtoa_r+0xabc>
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	ddee      	ble.n	8009e38 <_dtoa_r+0xa58>
 8009e5a:	ee18 1a10 	vmov	r1, s16
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4620      	mov	r0, r4
 8009e62:	f001 f8b3 	bl	800afcc <__lshift>
 8009e66:	4631      	mov	r1, r6
 8009e68:	ee08 0a10 	vmov	s16, r0
 8009e6c:	f001 f91e 	bl	800b0ac <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dc03      	bgt.n	8009e7c <_dtoa_r+0xa9c>
 8009e74:	d1e0      	bne.n	8009e38 <_dtoa_r+0xa58>
 8009e76:	f01a 0f01 	tst.w	sl, #1
 8009e7a:	d0dd      	beq.n	8009e38 <_dtoa_r+0xa58>
 8009e7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e80:	d1d7      	bne.n	8009e32 <_dtoa_r+0xa52>
 8009e82:	2339      	movs	r3, #57	; 0x39
 8009e84:	f88b 3000 	strb.w	r3, [fp]
 8009e88:	462b      	mov	r3, r5
 8009e8a:	461d      	mov	r5, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e92:	2a39      	cmp	r2, #57	; 0x39
 8009e94:	d071      	beq.n	8009f7a <_dtoa_r+0xb9a>
 8009e96:	3201      	adds	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	e746      	b.n	8009d2a <_dtoa_r+0x94a>
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	dd07      	ble.n	8009eb0 <_dtoa_r+0xad0>
 8009ea0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ea4:	d0ed      	beq.n	8009e82 <_dtoa_r+0xaa2>
 8009ea6:	f10a 0301 	add.w	r3, sl, #1
 8009eaa:	f88b 3000 	strb.w	r3, [fp]
 8009eae:	e73c      	b.n	8009d2a <_dtoa_r+0x94a>
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009eb6:	4599      	cmp	r9, r3
 8009eb8:	d047      	beq.n	8009f4a <_dtoa_r+0xb6a>
 8009eba:	ee18 1a10 	vmov	r1, s16
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	220a      	movs	r2, #10
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 fe88 	bl	800abd8 <__multadd>
 8009ec8:	45b8      	cmp	r8, r7
 8009eca:	ee08 0a10 	vmov	s16, r0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	f04f 020a 	mov.w	r2, #10
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	4620      	mov	r0, r4
 8009eda:	d106      	bne.n	8009eea <_dtoa_r+0xb0a>
 8009edc:	f000 fe7c 	bl	800abd8 <__multadd>
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	f109 0901 	add.w	r9, r9, #1
 8009ee8:	e772      	b.n	8009dd0 <_dtoa_r+0x9f0>
 8009eea:	f000 fe75 	bl	800abd8 <__multadd>
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4680      	mov	r8, r0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	220a      	movs	r2, #10
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 fe6e 	bl	800abd8 <__multadd>
 8009efc:	4607      	mov	r7, r0
 8009efe:	e7f1      	b.n	8009ee4 <_dtoa_r+0xb04>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	9d01      	ldr	r5, [sp, #4]
 8009f06:	ee18 0a10 	vmov	r0, s16
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	f7ff f9dc 	bl	80092c8 <quorem>
 8009f10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	f805 ab01 	strb.w	sl, [r5], #1
 8009f1a:	1aea      	subs	r2, r5, r3
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	dd09      	ble.n	8009f36 <_dtoa_r+0xb56>
 8009f22:	ee18 1a10 	vmov	r1, s16
 8009f26:	2300      	movs	r3, #0
 8009f28:	220a      	movs	r2, #10
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fe54 	bl	800abd8 <__multadd>
 8009f30:	ee08 0a10 	vmov	s16, r0
 8009f34:	e7e7      	b.n	8009f06 <_dtoa_r+0xb26>
 8009f36:	9b02      	ldr	r3, [sp, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfc8      	it	gt
 8009f3c:	461d      	movgt	r5, r3
 8009f3e:	9b01      	ldr	r3, [sp, #4]
 8009f40:	bfd8      	it	le
 8009f42:	2501      	movle	r5, #1
 8009f44:	441d      	add	r5, r3
 8009f46:	f04f 0800 	mov.w	r8, #0
 8009f4a:	ee18 1a10 	vmov	r1, s16
 8009f4e:	2201      	movs	r2, #1
 8009f50:	4620      	mov	r0, r4
 8009f52:	f001 f83b 	bl	800afcc <__lshift>
 8009f56:	4631      	mov	r1, r6
 8009f58:	ee08 0a10 	vmov	s16, r0
 8009f5c:	f001 f8a6 	bl	800b0ac <__mcmp>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	dc91      	bgt.n	8009e88 <_dtoa_r+0xaa8>
 8009f64:	d102      	bne.n	8009f6c <_dtoa_r+0xb8c>
 8009f66:	f01a 0f01 	tst.w	sl, #1
 8009f6a:	d18d      	bne.n	8009e88 <_dtoa_r+0xaa8>
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	461d      	mov	r5, r3
 8009f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f74:	2a30      	cmp	r2, #48	; 0x30
 8009f76:	d0fa      	beq.n	8009f6e <_dtoa_r+0xb8e>
 8009f78:	e6d7      	b.n	8009d2a <_dtoa_r+0x94a>
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d184      	bne.n	8009e8a <_dtoa_r+0xaaa>
 8009f80:	9b00      	ldr	r3, [sp, #0]
 8009f82:	3301      	adds	r3, #1
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	2331      	movs	r3, #49	; 0x31
 8009f88:	7013      	strb	r3, [r2, #0]
 8009f8a:	e6ce      	b.n	8009d2a <_dtoa_r+0x94a>
 8009f8c:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <_dtoa_r+0xbd4>)
 8009f8e:	f7ff ba95 	b.w	80094bc <_dtoa_r+0xdc>
 8009f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f47f aa6e 	bne.w	8009476 <_dtoa_r+0x96>
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <_dtoa_r+0xbd8>)
 8009f9c:	f7ff ba8e 	b.w	80094bc <_dtoa_r+0xdc>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dcae      	bgt.n	8009f04 <_dtoa_r+0xb24>
 8009fa6:	9b06      	ldr	r3, [sp, #24]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	f73f aea8 	bgt.w	8009cfe <_dtoa_r+0x91e>
 8009fae:	e7a9      	b.n	8009f04 <_dtoa_r+0xb24>
 8009fb0:	0800c470 	.word	0x0800c470
 8009fb4:	0800c274 	.word	0x0800c274
 8009fb8:	0800c3f1 	.word	0x0800c3f1

08009fbc <__sflush_r>:
 8009fbc:	898a      	ldrh	r2, [r1, #12]
 8009fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	0710      	lsls	r0, r2, #28
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	d458      	bmi.n	800a07c <__sflush_r+0xc0>
 8009fca:	684b      	ldr	r3, [r1, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dc05      	bgt.n	8009fdc <__sflush_r+0x20>
 8009fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dc02      	bgt.n	8009fdc <__sflush_r+0x20>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	d0f9      	beq.n	8009fd6 <__sflush_r+0x1a>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fe8:	682f      	ldr	r7, [r5, #0]
 8009fea:	602b      	str	r3, [r5, #0]
 8009fec:	d032      	beq.n	800a054 <__sflush_r+0x98>
 8009fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	075a      	lsls	r2, r3, #29
 8009ff4:	d505      	bpl.n	800a002 <__sflush_r+0x46>
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	1ac0      	subs	r0, r0, r3
 8009ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ffc:	b10b      	cbz	r3, 800a002 <__sflush_r+0x46>
 8009ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a000:	1ac0      	subs	r0, r0, r3
 800a002:	2300      	movs	r3, #0
 800a004:	4602      	mov	r2, r0
 800a006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a008:	6a21      	ldr	r1, [r4, #32]
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b0      	blx	r6
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	d106      	bne.n	800a022 <__sflush_r+0x66>
 800a014:	6829      	ldr	r1, [r5, #0]
 800a016:	291d      	cmp	r1, #29
 800a018:	d82c      	bhi.n	800a074 <__sflush_r+0xb8>
 800a01a:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <__sflush_r+0x108>)
 800a01c:	40ca      	lsrs	r2, r1
 800a01e:	07d6      	lsls	r6, r2, #31
 800a020:	d528      	bpl.n	800a074 <__sflush_r+0xb8>
 800a022:	2200      	movs	r2, #0
 800a024:	6062      	str	r2, [r4, #4]
 800a026:	04d9      	lsls	r1, r3, #19
 800a028:	6922      	ldr	r2, [r4, #16]
 800a02a:	6022      	str	r2, [r4, #0]
 800a02c:	d504      	bpl.n	800a038 <__sflush_r+0x7c>
 800a02e:	1c42      	adds	r2, r0, #1
 800a030:	d101      	bne.n	800a036 <__sflush_r+0x7a>
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	b903      	cbnz	r3, 800a038 <__sflush_r+0x7c>
 800a036:	6560      	str	r0, [r4, #84]	; 0x54
 800a038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a03a:	602f      	str	r7, [r5, #0]
 800a03c:	2900      	cmp	r1, #0
 800a03e:	d0ca      	beq.n	8009fd6 <__sflush_r+0x1a>
 800a040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a044:	4299      	cmp	r1, r3
 800a046:	d002      	beq.n	800a04e <__sflush_r+0x92>
 800a048:	4628      	mov	r0, r5
 800a04a:	f001 fa3b 	bl	800b4c4 <_free_r>
 800a04e:	2000      	movs	r0, #0
 800a050:	6360      	str	r0, [r4, #52]	; 0x34
 800a052:	e7c1      	b.n	8009fd8 <__sflush_r+0x1c>
 800a054:	6a21      	ldr	r1, [r4, #32]
 800a056:	2301      	movs	r3, #1
 800a058:	4628      	mov	r0, r5
 800a05a:	47b0      	blx	r6
 800a05c:	1c41      	adds	r1, r0, #1
 800a05e:	d1c7      	bne.n	8009ff0 <__sflush_r+0x34>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0c4      	beq.n	8009ff0 <__sflush_r+0x34>
 800a066:	2b1d      	cmp	r3, #29
 800a068:	d001      	beq.n	800a06e <__sflush_r+0xb2>
 800a06a:	2b16      	cmp	r3, #22
 800a06c:	d101      	bne.n	800a072 <__sflush_r+0xb6>
 800a06e:	602f      	str	r7, [r5, #0]
 800a070:	e7b1      	b.n	8009fd6 <__sflush_r+0x1a>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	e7ad      	b.n	8009fd8 <__sflush_r+0x1c>
 800a07c:	690f      	ldr	r7, [r1, #16]
 800a07e:	2f00      	cmp	r7, #0
 800a080:	d0a9      	beq.n	8009fd6 <__sflush_r+0x1a>
 800a082:	0793      	lsls	r3, r2, #30
 800a084:	680e      	ldr	r6, [r1, #0]
 800a086:	bf08      	it	eq
 800a088:	694b      	ldreq	r3, [r1, #20]
 800a08a:	600f      	str	r7, [r1, #0]
 800a08c:	bf18      	it	ne
 800a08e:	2300      	movne	r3, #0
 800a090:	eba6 0807 	sub.w	r8, r6, r7
 800a094:	608b      	str	r3, [r1, #8]
 800a096:	f1b8 0f00 	cmp.w	r8, #0
 800a09a:	dd9c      	ble.n	8009fd6 <__sflush_r+0x1a>
 800a09c:	6a21      	ldr	r1, [r4, #32]
 800a09e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0a0:	4643      	mov	r3, r8
 800a0a2:	463a      	mov	r2, r7
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b0      	blx	r6
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	dc06      	bgt.n	800a0ba <__sflush_r+0xfe>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e78e      	b.n	8009fd8 <__sflush_r+0x1c>
 800a0ba:	4407      	add	r7, r0
 800a0bc:	eba8 0800 	sub.w	r8, r8, r0
 800a0c0:	e7e9      	b.n	800a096 <__sflush_r+0xda>
 800a0c2:	bf00      	nop
 800a0c4:	20400001 	.word	0x20400001

0800a0c8 <_fflush_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	690b      	ldr	r3, [r1, #16]
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	b913      	cbnz	r3, 800a0d8 <_fflush_r+0x10>
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	b118      	cbz	r0, 800a0e2 <_fflush_r+0x1a>
 800a0da:	6983      	ldr	r3, [r0, #24]
 800a0dc:	b90b      	cbnz	r3, 800a0e2 <_fflush_r+0x1a>
 800a0de:	f000 f887 	bl	800a1f0 <__sinit>
 800a0e2:	4b14      	ldr	r3, [pc, #80]	; (800a134 <_fflush_r+0x6c>)
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	d11b      	bne.n	800a120 <_fflush_r+0x58>
 800a0e8:	686c      	ldr	r4, [r5, #4]
 800a0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0ef      	beq.n	800a0d2 <_fflush_r+0xa>
 800a0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0f4:	07d0      	lsls	r0, r2, #31
 800a0f6:	d404      	bmi.n	800a102 <_fflush_r+0x3a>
 800a0f8:	0599      	lsls	r1, r3, #22
 800a0fa:	d402      	bmi.n	800a102 <_fflush_r+0x3a>
 800a0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fe:	f000 fc88 	bl	800aa12 <__retarget_lock_acquire_recursive>
 800a102:	4628      	mov	r0, r5
 800a104:	4621      	mov	r1, r4
 800a106:	f7ff ff59 	bl	8009fbc <__sflush_r>
 800a10a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a10c:	07da      	lsls	r2, r3, #31
 800a10e:	4605      	mov	r5, r0
 800a110:	d4e0      	bmi.n	800a0d4 <_fflush_r+0xc>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	059b      	lsls	r3, r3, #22
 800a116:	d4dd      	bmi.n	800a0d4 <_fflush_r+0xc>
 800a118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a11a:	f000 fc7b 	bl	800aa14 <__retarget_lock_release_recursive>
 800a11e:	e7d9      	b.n	800a0d4 <_fflush_r+0xc>
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <_fflush_r+0x70>)
 800a122:	429c      	cmp	r4, r3
 800a124:	d101      	bne.n	800a12a <_fflush_r+0x62>
 800a126:	68ac      	ldr	r4, [r5, #8]
 800a128:	e7df      	b.n	800a0ea <_fflush_r+0x22>
 800a12a:	4b04      	ldr	r3, [pc, #16]	; (800a13c <_fflush_r+0x74>)
 800a12c:	429c      	cmp	r4, r3
 800a12e:	bf08      	it	eq
 800a130:	68ec      	ldreq	r4, [r5, #12]
 800a132:	e7da      	b.n	800a0ea <_fflush_r+0x22>
 800a134:	0800c4a4 	.word	0x0800c4a4
 800a138:	0800c4c4 	.word	0x0800c4c4
 800a13c:	0800c484 	.word	0x0800c484

0800a140 <std>:
 800a140:	2300      	movs	r3, #0
 800a142:	b510      	push	{r4, lr}
 800a144:	4604      	mov	r4, r0
 800a146:	e9c0 3300 	strd	r3, r3, [r0]
 800a14a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a14e:	6083      	str	r3, [r0, #8]
 800a150:	8181      	strh	r1, [r0, #12]
 800a152:	6643      	str	r3, [r0, #100]	; 0x64
 800a154:	81c2      	strh	r2, [r0, #14]
 800a156:	6183      	str	r3, [r0, #24]
 800a158:	4619      	mov	r1, r3
 800a15a:	2208      	movs	r2, #8
 800a15c:	305c      	adds	r0, #92	; 0x5c
 800a15e:	f7fd fa0f 	bl	8007580 <memset>
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <std+0x38>)
 800a164:	6263      	str	r3, [r4, #36]	; 0x24
 800a166:	4b05      	ldr	r3, [pc, #20]	; (800a17c <std+0x3c>)
 800a168:	62a3      	str	r3, [r4, #40]	; 0x28
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x40>)
 800a16c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x44>)
 800a170:	6224      	str	r4, [r4, #32]
 800a172:	6323      	str	r3, [r4, #48]	; 0x30
 800a174:	bd10      	pop	{r4, pc}
 800a176:	bf00      	nop
 800a178:	0800bc21 	.word	0x0800bc21
 800a17c:	0800bc43 	.word	0x0800bc43
 800a180:	0800bc7b 	.word	0x0800bc7b
 800a184:	0800bc9f 	.word	0x0800bc9f

0800a188 <_cleanup_r>:
 800a188:	4901      	ldr	r1, [pc, #4]	; (800a190 <_cleanup_r+0x8>)
 800a18a:	f000 b8af 	b.w	800a2ec <_fwalk_reent>
 800a18e:	bf00      	nop
 800a190:	0800a0c9 	.word	0x0800a0c9

0800a194 <__sfmoreglue>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	2268      	movs	r2, #104	; 0x68
 800a198:	1e4d      	subs	r5, r1, #1
 800a19a:	4355      	muls	r5, r2
 800a19c:	460e      	mov	r6, r1
 800a19e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1a2:	f001 f9fb 	bl	800b59c <_malloc_r>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	b140      	cbz	r0, 800a1bc <__sfmoreglue+0x28>
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b0:	300c      	adds	r0, #12
 800a1b2:	60a0      	str	r0, [r4, #8]
 800a1b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1b8:	f7fd f9e2 	bl	8007580 <memset>
 800a1bc:	4620      	mov	r0, r4
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <__sfp_lock_acquire>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	; (800a1c8 <__sfp_lock_acquire+0x8>)
 800a1c2:	f000 bc26 	b.w	800aa12 <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	200004f1 	.word	0x200004f1

0800a1cc <__sfp_lock_release>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__sfp_lock_release+0x8>)
 800a1ce:	f000 bc21 	b.w	800aa14 <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	200004f1 	.word	0x200004f1

0800a1d8 <__sinit_lock_acquire>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__sinit_lock_acquire+0x8>)
 800a1da:	f000 bc1a 	b.w	800aa12 <__retarget_lock_acquire_recursive>
 800a1de:	bf00      	nop
 800a1e0:	200004f2 	.word	0x200004f2

0800a1e4 <__sinit_lock_release>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__sinit_lock_release+0x8>)
 800a1e6:	f000 bc15 	b.w	800aa14 <__retarget_lock_release_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	200004f2 	.word	0x200004f2

0800a1f0 <__sinit>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f7ff fff0 	bl	800a1d8 <__sinit_lock_acquire>
 800a1f8:	69a3      	ldr	r3, [r4, #24]
 800a1fa:	b11b      	cbz	r3, 800a204 <__sinit+0x14>
 800a1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a200:	f7ff bff0 	b.w	800a1e4 <__sinit_lock_release>
 800a204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a208:	6523      	str	r3, [r4, #80]	; 0x50
 800a20a:	4b13      	ldr	r3, [pc, #76]	; (800a258 <__sinit+0x68>)
 800a20c:	4a13      	ldr	r2, [pc, #76]	; (800a25c <__sinit+0x6c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	62a2      	str	r2, [r4, #40]	; 0x28
 800a212:	42a3      	cmp	r3, r4
 800a214:	bf04      	itt	eq
 800a216:	2301      	moveq	r3, #1
 800a218:	61a3      	streq	r3, [r4, #24]
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 f820 	bl	800a260 <__sfp>
 800a220:	6060      	str	r0, [r4, #4]
 800a222:	4620      	mov	r0, r4
 800a224:	f000 f81c 	bl	800a260 <__sfp>
 800a228:	60a0      	str	r0, [r4, #8]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 f818 	bl	800a260 <__sfp>
 800a230:	2200      	movs	r2, #0
 800a232:	60e0      	str	r0, [r4, #12]
 800a234:	2104      	movs	r1, #4
 800a236:	6860      	ldr	r0, [r4, #4]
 800a238:	f7ff ff82 	bl	800a140 <std>
 800a23c:	68a0      	ldr	r0, [r4, #8]
 800a23e:	2201      	movs	r2, #1
 800a240:	2109      	movs	r1, #9
 800a242:	f7ff ff7d 	bl	800a140 <std>
 800a246:	68e0      	ldr	r0, [r4, #12]
 800a248:	2202      	movs	r2, #2
 800a24a:	2112      	movs	r1, #18
 800a24c:	f7ff ff78 	bl	800a140 <std>
 800a250:	2301      	movs	r3, #1
 800a252:	61a3      	str	r3, [r4, #24]
 800a254:	e7d2      	b.n	800a1fc <__sinit+0xc>
 800a256:	bf00      	nop
 800a258:	0800c260 	.word	0x0800c260
 800a25c:	0800a189 	.word	0x0800a189

0800a260 <__sfp>:
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a262:	4607      	mov	r7, r0
 800a264:	f7ff ffac 	bl	800a1c0 <__sfp_lock_acquire>
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <__sfp+0x84>)
 800a26a:	681e      	ldr	r6, [r3, #0]
 800a26c:	69b3      	ldr	r3, [r6, #24]
 800a26e:	b913      	cbnz	r3, 800a276 <__sfp+0x16>
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff ffbd 	bl	800a1f0 <__sinit>
 800a276:	3648      	adds	r6, #72	; 0x48
 800a278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	d503      	bpl.n	800a288 <__sfp+0x28>
 800a280:	6833      	ldr	r3, [r6, #0]
 800a282:	b30b      	cbz	r3, 800a2c8 <__sfp+0x68>
 800a284:	6836      	ldr	r6, [r6, #0]
 800a286:	e7f7      	b.n	800a278 <__sfp+0x18>
 800a288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a28c:	b9d5      	cbnz	r5, 800a2c4 <__sfp+0x64>
 800a28e:	4b16      	ldr	r3, [pc, #88]	; (800a2e8 <__sfp+0x88>)
 800a290:	60e3      	str	r3, [r4, #12]
 800a292:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a296:	6665      	str	r5, [r4, #100]	; 0x64
 800a298:	f000 fbba 	bl	800aa10 <__retarget_lock_init_recursive>
 800a29c:	f7ff ff96 	bl	800a1cc <__sfp_lock_release>
 800a2a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2a8:	6025      	str	r5, [r4, #0]
 800a2aa:	61a5      	str	r5, [r4, #24]
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2b4:	f7fd f964 	bl	8007580 <memset>
 800a2b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c4:	3468      	adds	r4, #104	; 0x68
 800a2c6:	e7d9      	b.n	800a27c <__sfp+0x1c>
 800a2c8:	2104      	movs	r1, #4
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f7ff ff62 	bl	800a194 <__sfmoreglue>
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	6030      	str	r0, [r6, #0]
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d1d5      	bne.n	800a284 <__sfp+0x24>
 800a2d8:	f7ff ff78 	bl	800a1cc <__sfp_lock_release>
 800a2dc:	230c      	movs	r3, #12
 800a2de:	603b      	str	r3, [r7, #0]
 800a2e0:	e7ee      	b.n	800a2c0 <__sfp+0x60>
 800a2e2:	bf00      	nop
 800a2e4:	0800c260 	.word	0x0800c260
 800a2e8:	ffff0001 	.word	0xffff0001

0800a2ec <_fwalk_reent>:
 800a2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	4688      	mov	r8, r1
 800a2f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2f8:	2700      	movs	r7, #0
 800a2fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2fe:	f1b9 0901 	subs.w	r9, r9, #1
 800a302:	d505      	bpl.n	800a310 <_fwalk_reent+0x24>
 800a304:	6824      	ldr	r4, [r4, #0]
 800a306:	2c00      	cmp	r4, #0
 800a308:	d1f7      	bne.n	800a2fa <_fwalk_reent+0xe>
 800a30a:	4638      	mov	r0, r7
 800a30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a310:	89ab      	ldrh	r3, [r5, #12]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d907      	bls.n	800a326 <_fwalk_reent+0x3a>
 800a316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31a:	3301      	adds	r3, #1
 800a31c:	d003      	beq.n	800a326 <_fwalk_reent+0x3a>
 800a31e:	4629      	mov	r1, r5
 800a320:	4630      	mov	r0, r6
 800a322:	47c0      	blx	r8
 800a324:	4307      	orrs	r7, r0
 800a326:	3568      	adds	r5, #104	; 0x68
 800a328:	e7e9      	b.n	800a2fe <_fwalk_reent+0x12>

0800a32a <rshift>:
 800a32a:	6903      	ldr	r3, [r0, #16]
 800a32c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a338:	f100 0414 	add.w	r4, r0, #20
 800a33c:	dd45      	ble.n	800a3ca <rshift+0xa0>
 800a33e:	f011 011f 	ands.w	r1, r1, #31
 800a342:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a346:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a34a:	d10c      	bne.n	800a366 <rshift+0x3c>
 800a34c:	f100 0710 	add.w	r7, r0, #16
 800a350:	4629      	mov	r1, r5
 800a352:	42b1      	cmp	r1, r6
 800a354:	d334      	bcc.n	800a3c0 <rshift+0x96>
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	1eea      	subs	r2, r5, #3
 800a35c:	4296      	cmp	r6, r2
 800a35e:	bf38      	it	cc
 800a360:	2300      	movcc	r3, #0
 800a362:	4423      	add	r3, r4
 800a364:	e015      	b.n	800a392 <rshift+0x68>
 800a366:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a36a:	f1c1 0820 	rsb	r8, r1, #32
 800a36e:	40cf      	lsrs	r7, r1
 800a370:	f105 0e04 	add.w	lr, r5, #4
 800a374:	46a1      	mov	r9, r4
 800a376:	4576      	cmp	r6, lr
 800a378:	46f4      	mov	ip, lr
 800a37a:	d815      	bhi.n	800a3a8 <rshift+0x7e>
 800a37c:	1a9a      	subs	r2, r3, r2
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	3a04      	subs	r2, #4
 800a382:	3501      	adds	r5, #1
 800a384:	42ae      	cmp	r6, r5
 800a386:	bf38      	it	cc
 800a388:	2200      	movcc	r2, #0
 800a38a:	18a3      	adds	r3, r4, r2
 800a38c:	50a7      	str	r7, [r4, r2]
 800a38e:	b107      	cbz	r7, 800a392 <rshift+0x68>
 800a390:	3304      	adds	r3, #4
 800a392:	1b1a      	subs	r2, r3, r4
 800a394:	42a3      	cmp	r3, r4
 800a396:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a39a:	bf08      	it	eq
 800a39c:	2300      	moveq	r3, #0
 800a39e:	6102      	str	r2, [r0, #16]
 800a3a0:	bf08      	it	eq
 800a3a2:	6143      	streq	r3, [r0, #20]
 800a3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a8:	f8dc c000 	ldr.w	ip, [ip]
 800a3ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3b0:	ea4c 0707 	orr.w	r7, ip, r7
 800a3b4:	f849 7b04 	str.w	r7, [r9], #4
 800a3b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3bc:	40cf      	lsrs	r7, r1
 800a3be:	e7da      	b.n	800a376 <rshift+0x4c>
 800a3c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3c8:	e7c3      	b.n	800a352 <rshift+0x28>
 800a3ca:	4623      	mov	r3, r4
 800a3cc:	e7e1      	b.n	800a392 <rshift+0x68>

0800a3ce <__hexdig_fun>:
 800a3ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d802      	bhi.n	800a3dc <__hexdig_fun+0xe>
 800a3d6:	3820      	subs	r0, #32
 800a3d8:	b2c0      	uxtb	r0, r0
 800a3da:	4770      	bx	lr
 800a3dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3e0:	2b05      	cmp	r3, #5
 800a3e2:	d801      	bhi.n	800a3e8 <__hexdig_fun+0x1a>
 800a3e4:	3847      	subs	r0, #71	; 0x47
 800a3e6:	e7f7      	b.n	800a3d8 <__hexdig_fun+0xa>
 800a3e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3ec:	2b05      	cmp	r3, #5
 800a3ee:	d801      	bhi.n	800a3f4 <__hexdig_fun+0x26>
 800a3f0:	3827      	subs	r0, #39	; 0x27
 800a3f2:	e7f1      	b.n	800a3d8 <__hexdig_fun+0xa>
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4770      	bx	lr

0800a3f8 <__gethex>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	ed2d 8b02 	vpush	{d8}
 800a400:	b089      	sub	sp, #36	; 0x24
 800a402:	ee08 0a10 	vmov	s16, r0
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	4bb4      	ldr	r3, [pc, #720]	; (800a6dc <__gethex+0x2e4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	468b      	mov	fp, r1
 800a412:	4690      	mov	r8, r2
 800a414:	f7f5 feb4 	bl	8000180 <strlen>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	f8db 2000 	ldr.w	r2, [fp]
 800a41e:	4403      	add	r3, r0
 800a420:	4682      	mov	sl, r0
 800a422:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	1c93      	adds	r3, r2, #2
 800a42a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a42e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a432:	32fe      	adds	r2, #254	; 0xfe
 800a434:	18d1      	adds	r1, r2, r3
 800a436:	461f      	mov	r7, r3
 800a438:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a43c:	9100      	str	r1, [sp, #0]
 800a43e:	2830      	cmp	r0, #48	; 0x30
 800a440:	d0f8      	beq.n	800a434 <__gethex+0x3c>
 800a442:	f7ff ffc4 	bl	800a3ce <__hexdig_fun>
 800a446:	4604      	mov	r4, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d13a      	bne.n	800a4c2 <__gethex+0xca>
 800a44c:	9901      	ldr	r1, [sp, #4]
 800a44e:	4652      	mov	r2, sl
 800a450:	4638      	mov	r0, r7
 800a452:	f001 fc28 	bl	800bca6 <strncmp>
 800a456:	4605      	mov	r5, r0
 800a458:	2800      	cmp	r0, #0
 800a45a:	d168      	bne.n	800a52e <__gethex+0x136>
 800a45c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a460:	eb07 060a 	add.w	r6, r7, sl
 800a464:	f7ff ffb3 	bl	800a3ce <__hexdig_fun>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d062      	beq.n	800a532 <__gethex+0x13a>
 800a46c:	4633      	mov	r3, r6
 800a46e:	7818      	ldrb	r0, [r3, #0]
 800a470:	2830      	cmp	r0, #48	; 0x30
 800a472:	461f      	mov	r7, r3
 800a474:	f103 0301 	add.w	r3, r3, #1
 800a478:	d0f9      	beq.n	800a46e <__gethex+0x76>
 800a47a:	f7ff ffa8 	bl	800a3ce <__hexdig_fun>
 800a47e:	2301      	movs	r3, #1
 800a480:	fab0 f480 	clz	r4, r0
 800a484:	0964      	lsrs	r4, r4, #5
 800a486:	4635      	mov	r5, r6
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	463a      	mov	r2, r7
 800a48c:	4616      	mov	r6, r2
 800a48e:	3201      	adds	r2, #1
 800a490:	7830      	ldrb	r0, [r6, #0]
 800a492:	f7ff ff9c 	bl	800a3ce <__hexdig_fun>
 800a496:	2800      	cmp	r0, #0
 800a498:	d1f8      	bne.n	800a48c <__gethex+0x94>
 800a49a:	9901      	ldr	r1, [sp, #4]
 800a49c:	4652      	mov	r2, sl
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f001 fc01 	bl	800bca6 <strncmp>
 800a4a4:	b980      	cbnz	r0, 800a4c8 <__gethex+0xd0>
 800a4a6:	b94d      	cbnz	r5, 800a4bc <__gethex+0xc4>
 800a4a8:	eb06 050a 	add.w	r5, r6, sl
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	7830      	ldrb	r0, [r6, #0]
 800a4b4:	f7ff ff8b 	bl	800a3ce <__hexdig_fun>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d1f8      	bne.n	800a4ae <__gethex+0xb6>
 800a4bc:	1bad      	subs	r5, r5, r6
 800a4be:	00ad      	lsls	r5, r5, #2
 800a4c0:	e004      	b.n	800a4cc <__gethex+0xd4>
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	4625      	mov	r5, r4
 800a4c6:	e7e0      	b.n	800a48a <__gethex+0x92>
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	d1f7      	bne.n	800a4bc <__gethex+0xc4>
 800a4cc:	7833      	ldrb	r3, [r6, #0]
 800a4ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4d2:	2b50      	cmp	r3, #80	; 0x50
 800a4d4:	d13b      	bne.n	800a54e <__gethex+0x156>
 800a4d6:	7873      	ldrb	r3, [r6, #1]
 800a4d8:	2b2b      	cmp	r3, #43	; 0x2b
 800a4da:	d02c      	beq.n	800a536 <__gethex+0x13e>
 800a4dc:	2b2d      	cmp	r3, #45	; 0x2d
 800a4de:	d02e      	beq.n	800a53e <__gethex+0x146>
 800a4e0:	1c71      	adds	r1, r6, #1
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	7808      	ldrb	r0, [r1, #0]
 800a4e8:	f7ff ff71 	bl	800a3ce <__hexdig_fun>
 800a4ec:	1e43      	subs	r3, r0, #1
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b18      	cmp	r3, #24
 800a4f2:	d82c      	bhi.n	800a54e <__gethex+0x156>
 800a4f4:	f1a0 0210 	sub.w	r2, r0, #16
 800a4f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4fc:	f7ff ff67 	bl	800a3ce <__hexdig_fun>
 800a500:	1e43      	subs	r3, r0, #1
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b18      	cmp	r3, #24
 800a506:	d91d      	bls.n	800a544 <__gethex+0x14c>
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	d000      	beq.n	800a510 <__gethex+0x118>
 800a50e:	4252      	negs	r2, r2
 800a510:	4415      	add	r5, r2
 800a512:	f8cb 1000 	str.w	r1, [fp]
 800a516:	b1e4      	cbz	r4, 800a552 <__gethex+0x15a>
 800a518:	9b00      	ldr	r3, [sp, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bf14      	ite	ne
 800a51e:	2700      	movne	r7, #0
 800a520:	2706      	moveq	r7, #6
 800a522:	4638      	mov	r0, r7
 800a524:	b009      	add	sp, #36	; 0x24
 800a526:	ecbd 8b02 	vpop	{d8}
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	463e      	mov	r6, r7
 800a530:	4625      	mov	r5, r4
 800a532:	2401      	movs	r4, #1
 800a534:	e7ca      	b.n	800a4cc <__gethex+0xd4>
 800a536:	f04f 0900 	mov.w	r9, #0
 800a53a:	1cb1      	adds	r1, r6, #2
 800a53c:	e7d3      	b.n	800a4e6 <__gethex+0xee>
 800a53e:	f04f 0901 	mov.w	r9, #1
 800a542:	e7fa      	b.n	800a53a <__gethex+0x142>
 800a544:	230a      	movs	r3, #10
 800a546:	fb03 0202 	mla	r2, r3, r2, r0
 800a54a:	3a10      	subs	r2, #16
 800a54c:	e7d4      	b.n	800a4f8 <__gethex+0x100>
 800a54e:	4631      	mov	r1, r6
 800a550:	e7df      	b.n	800a512 <__gethex+0x11a>
 800a552:	1bf3      	subs	r3, r6, r7
 800a554:	3b01      	subs	r3, #1
 800a556:	4621      	mov	r1, r4
 800a558:	2b07      	cmp	r3, #7
 800a55a:	dc0b      	bgt.n	800a574 <__gethex+0x17c>
 800a55c:	ee18 0a10 	vmov	r0, s16
 800a560:	f000 fad8 	bl	800ab14 <_Balloc>
 800a564:	4604      	mov	r4, r0
 800a566:	b940      	cbnz	r0, 800a57a <__gethex+0x182>
 800a568:	4b5d      	ldr	r3, [pc, #372]	; (800a6e0 <__gethex+0x2e8>)
 800a56a:	4602      	mov	r2, r0
 800a56c:	21de      	movs	r1, #222	; 0xde
 800a56e:	485d      	ldr	r0, [pc, #372]	; (800a6e4 <__gethex+0x2ec>)
 800a570:	f001 fbcc 	bl	800bd0c <__assert_func>
 800a574:	3101      	adds	r1, #1
 800a576:	105b      	asrs	r3, r3, #1
 800a578:	e7ee      	b.n	800a558 <__gethex+0x160>
 800a57a:	f100 0914 	add.w	r9, r0, #20
 800a57e:	f04f 0b00 	mov.w	fp, #0
 800a582:	f1ca 0301 	rsb	r3, sl, #1
 800a586:	f8cd 9008 	str.w	r9, [sp, #8]
 800a58a:	f8cd b000 	str.w	fp, [sp]
 800a58e:	9306      	str	r3, [sp, #24]
 800a590:	42b7      	cmp	r7, r6
 800a592:	d340      	bcc.n	800a616 <__gethex+0x21e>
 800a594:	9802      	ldr	r0, [sp, #8]
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	f840 3b04 	str.w	r3, [r0], #4
 800a59c:	eba0 0009 	sub.w	r0, r0, r9
 800a5a0:	1080      	asrs	r0, r0, #2
 800a5a2:	0146      	lsls	r6, r0, #5
 800a5a4:	6120      	str	r0, [r4, #16]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fba6 	bl	800acf8 <__hi0bits>
 800a5ac:	1a30      	subs	r0, r6, r0
 800a5ae:	f8d8 6000 	ldr.w	r6, [r8]
 800a5b2:	42b0      	cmp	r0, r6
 800a5b4:	dd63      	ble.n	800a67e <__gethex+0x286>
 800a5b6:	1b87      	subs	r7, r0, r6
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 ff4a 	bl	800b454 <__any_on>
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	b1a8      	cbz	r0, 800a5f0 <__gethex+0x1f8>
 800a5c4:	1e7b      	subs	r3, r7, #1
 800a5c6:	1159      	asrs	r1, r3, #5
 800a5c8:	f003 021f 	and.w	r2, r3, #31
 800a5cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5d0:	f04f 0a01 	mov.w	sl, #1
 800a5d4:	fa0a f202 	lsl.w	r2, sl, r2
 800a5d8:	420a      	tst	r2, r1
 800a5da:	d009      	beq.n	800a5f0 <__gethex+0x1f8>
 800a5dc:	4553      	cmp	r3, sl
 800a5de:	dd05      	ble.n	800a5ec <__gethex+0x1f4>
 800a5e0:	1eb9      	subs	r1, r7, #2
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 ff36 	bl	800b454 <__any_on>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d145      	bne.n	800a678 <__gethex+0x280>
 800a5ec:	f04f 0a02 	mov.w	sl, #2
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff fe99 	bl	800a32a <rshift>
 800a5f8:	443d      	add	r5, r7
 800a5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5fe:	42ab      	cmp	r3, r5
 800a600:	da4c      	bge.n	800a69c <__gethex+0x2a4>
 800a602:	ee18 0a10 	vmov	r0, s16
 800a606:	4621      	mov	r1, r4
 800a608:	f000 fac4 	bl	800ab94 <_Bfree>
 800a60c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a60e:	2300      	movs	r3, #0
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	27a3      	movs	r7, #163	; 0xa3
 800a614:	e785      	b.n	800a522 <__gethex+0x12a>
 800a616:	1e73      	subs	r3, r6, #1
 800a618:	9a05      	ldr	r2, [sp, #20]
 800a61a:	9303      	str	r3, [sp, #12]
 800a61c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a620:	4293      	cmp	r3, r2
 800a622:	d019      	beq.n	800a658 <__gethex+0x260>
 800a624:	f1bb 0f20 	cmp.w	fp, #32
 800a628:	d107      	bne.n	800a63a <__gethex+0x242>
 800a62a:	9b02      	ldr	r3, [sp, #8]
 800a62c:	9a00      	ldr	r2, [sp, #0]
 800a62e:	f843 2b04 	str.w	r2, [r3], #4
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	2300      	movs	r3, #0
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	469b      	mov	fp, r3
 800a63a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a63e:	f7ff fec6 	bl	800a3ce <__hexdig_fun>
 800a642:	9b00      	ldr	r3, [sp, #0]
 800a644:	f000 000f 	and.w	r0, r0, #15
 800a648:	fa00 f00b 	lsl.w	r0, r0, fp
 800a64c:	4303      	orrs	r3, r0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	f10b 0b04 	add.w	fp, fp, #4
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	e00d      	b.n	800a674 <__gethex+0x27c>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	9a06      	ldr	r2, [sp, #24]
 800a65c:	4413      	add	r3, r2
 800a65e:	42bb      	cmp	r3, r7
 800a660:	d3e0      	bcc.n	800a624 <__gethex+0x22c>
 800a662:	4618      	mov	r0, r3
 800a664:	9901      	ldr	r1, [sp, #4]
 800a666:	9307      	str	r3, [sp, #28]
 800a668:	4652      	mov	r2, sl
 800a66a:	f001 fb1c 	bl	800bca6 <strncmp>
 800a66e:	9b07      	ldr	r3, [sp, #28]
 800a670:	2800      	cmp	r0, #0
 800a672:	d1d7      	bne.n	800a624 <__gethex+0x22c>
 800a674:	461e      	mov	r6, r3
 800a676:	e78b      	b.n	800a590 <__gethex+0x198>
 800a678:	f04f 0a03 	mov.w	sl, #3
 800a67c:	e7b8      	b.n	800a5f0 <__gethex+0x1f8>
 800a67e:	da0a      	bge.n	800a696 <__gethex+0x29e>
 800a680:	1a37      	subs	r7, r6, r0
 800a682:	4621      	mov	r1, r4
 800a684:	ee18 0a10 	vmov	r0, s16
 800a688:	463a      	mov	r2, r7
 800a68a:	f000 fc9f 	bl	800afcc <__lshift>
 800a68e:	1bed      	subs	r5, r5, r7
 800a690:	4604      	mov	r4, r0
 800a692:	f100 0914 	add.w	r9, r0, #20
 800a696:	f04f 0a00 	mov.w	sl, #0
 800a69a:	e7ae      	b.n	800a5fa <__gethex+0x202>
 800a69c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6a0:	42a8      	cmp	r0, r5
 800a6a2:	dd72      	ble.n	800a78a <__gethex+0x392>
 800a6a4:	1b45      	subs	r5, r0, r5
 800a6a6:	42ae      	cmp	r6, r5
 800a6a8:	dc36      	bgt.n	800a718 <__gethex+0x320>
 800a6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d02a      	beq.n	800a708 <__gethex+0x310>
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d02c      	beq.n	800a710 <__gethex+0x318>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d11c      	bne.n	800a6f4 <__gethex+0x2fc>
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	d11a      	bne.n	800a6f4 <__gethex+0x2fc>
 800a6be:	2e01      	cmp	r6, #1
 800a6c0:	d112      	bne.n	800a6e8 <__gethex+0x2f0>
 800a6c2:	9a04      	ldr	r2, [sp, #16]
 800a6c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	f8c9 3000 	str.w	r3, [r9]
 800a6d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6d4:	2762      	movs	r7, #98	; 0x62
 800a6d6:	601c      	str	r4, [r3, #0]
 800a6d8:	e723      	b.n	800a522 <__gethex+0x12a>
 800a6da:	bf00      	nop
 800a6dc:	0800c54c 	.word	0x0800c54c
 800a6e0:	0800c470 	.word	0x0800c470
 800a6e4:	0800c4e4 	.word	0x0800c4e4
 800a6e8:	1e71      	subs	r1, r6, #1
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 feb2 	bl	800b454 <__any_on>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e6      	bne.n	800a6c2 <__gethex+0x2ca>
 800a6f4:	ee18 0a10 	vmov	r0, s16
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	f000 fa4b 	bl	800ab94 <_Bfree>
 800a6fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a700:	2300      	movs	r3, #0
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	2750      	movs	r7, #80	; 0x50
 800a706:	e70c      	b.n	800a522 <__gethex+0x12a>
 800a708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f2      	bne.n	800a6f4 <__gethex+0x2fc>
 800a70e:	e7d8      	b.n	800a6c2 <__gethex+0x2ca>
 800a710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1d5      	bne.n	800a6c2 <__gethex+0x2ca>
 800a716:	e7ed      	b.n	800a6f4 <__gethex+0x2fc>
 800a718:	1e6f      	subs	r7, r5, #1
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	d131      	bne.n	800a784 <__gethex+0x38c>
 800a720:	b127      	cbz	r7, 800a72c <__gethex+0x334>
 800a722:	4639      	mov	r1, r7
 800a724:	4620      	mov	r0, r4
 800a726:	f000 fe95 	bl	800b454 <__any_on>
 800a72a:	4682      	mov	sl, r0
 800a72c:	117b      	asrs	r3, r7, #5
 800a72e:	2101      	movs	r1, #1
 800a730:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a734:	f007 071f 	and.w	r7, r7, #31
 800a738:	fa01 f707 	lsl.w	r7, r1, r7
 800a73c:	421f      	tst	r7, r3
 800a73e:	4629      	mov	r1, r5
 800a740:	4620      	mov	r0, r4
 800a742:	bf18      	it	ne
 800a744:	f04a 0a02 	orrne.w	sl, sl, #2
 800a748:	1b76      	subs	r6, r6, r5
 800a74a:	f7ff fdee 	bl	800a32a <rshift>
 800a74e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a752:	2702      	movs	r7, #2
 800a754:	f1ba 0f00 	cmp.w	sl, #0
 800a758:	d048      	beq.n	800a7ec <__gethex+0x3f4>
 800a75a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d015      	beq.n	800a78e <__gethex+0x396>
 800a762:	2b03      	cmp	r3, #3
 800a764:	d017      	beq.n	800a796 <__gethex+0x39e>
 800a766:	2b01      	cmp	r3, #1
 800a768:	d109      	bne.n	800a77e <__gethex+0x386>
 800a76a:	f01a 0f02 	tst.w	sl, #2
 800a76e:	d006      	beq.n	800a77e <__gethex+0x386>
 800a770:	f8d9 0000 	ldr.w	r0, [r9]
 800a774:	ea4a 0a00 	orr.w	sl, sl, r0
 800a778:	f01a 0f01 	tst.w	sl, #1
 800a77c:	d10e      	bne.n	800a79c <__gethex+0x3a4>
 800a77e:	f047 0710 	orr.w	r7, r7, #16
 800a782:	e033      	b.n	800a7ec <__gethex+0x3f4>
 800a784:	f04f 0a01 	mov.w	sl, #1
 800a788:	e7d0      	b.n	800a72c <__gethex+0x334>
 800a78a:	2701      	movs	r7, #1
 800a78c:	e7e2      	b.n	800a754 <__gethex+0x35c>
 800a78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a790:	f1c3 0301 	rsb	r3, r3, #1
 800a794:	9315      	str	r3, [sp, #84]	; 0x54
 800a796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d0f0      	beq.n	800a77e <__gethex+0x386>
 800a79c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7a0:	f104 0314 	add.w	r3, r4, #20
 800a7a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ac:	f04f 0c00 	mov.w	ip, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7ba:	d01c      	beq.n	800a7f6 <__gethex+0x3fe>
 800a7bc:	3201      	adds	r2, #1
 800a7be:	6002      	str	r2, [r0, #0]
 800a7c0:	2f02      	cmp	r7, #2
 800a7c2:	f104 0314 	add.w	r3, r4, #20
 800a7c6:	d13f      	bne.n	800a848 <__gethex+0x450>
 800a7c8:	f8d8 2000 	ldr.w	r2, [r8]
 800a7cc:	3a01      	subs	r2, #1
 800a7ce:	42b2      	cmp	r2, r6
 800a7d0:	d10a      	bne.n	800a7e8 <__gethex+0x3f0>
 800a7d2:	1171      	asrs	r1, r6, #5
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7da:	f006 061f 	and.w	r6, r6, #31
 800a7de:	fa02 f606 	lsl.w	r6, r2, r6
 800a7e2:	421e      	tst	r6, r3
 800a7e4:	bf18      	it	ne
 800a7e6:	4617      	movne	r7, r2
 800a7e8:	f047 0720 	orr.w	r7, r7, #32
 800a7ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7ee:	601c      	str	r4, [r3, #0]
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	601d      	str	r5, [r3, #0]
 800a7f4:	e695      	b.n	800a522 <__gethex+0x12a>
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7fc:	d8d8      	bhi.n	800a7b0 <__gethex+0x3b8>
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	459b      	cmp	fp, r3
 800a802:	db19      	blt.n	800a838 <__gethex+0x440>
 800a804:	6861      	ldr	r1, [r4, #4]
 800a806:	ee18 0a10 	vmov	r0, s16
 800a80a:	3101      	adds	r1, #1
 800a80c:	f000 f982 	bl	800ab14 <_Balloc>
 800a810:	4681      	mov	r9, r0
 800a812:	b918      	cbnz	r0, 800a81c <__gethex+0x424>
 800a814:	4b1a      	ldr	r3, [pc, #104]	; (800a880 <__gethex+0x488>)
 800a816:	4602      	mov	r2, r0
 800a818:	2184      	movs	r1, #132	; 0x84
 800a81a:	e6a8      	b.n	800a56e <__gethex+0x176>
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	3202      	adds	r2, #2
 800a820:	f104 010c 	add.w	r1, r4, #12
 800a824:	0092      	lsls	r2, r2, #2
 800a826:	300c      	adds	r0, #12
 800a828:	f7fc fe9c 	bl	8007564 <memcpy>
 800a82c:	4621      	mov	r1, r4
 800a82e:	ee18 0a10 	vmov	r0, s16
 800a832:	f000 f9af 	bl	800ab94 <_Bfree>
 800a836:	464c      	mov	r4, r9
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a840:	6122      	str	r2, [r4, #16]
 800a842:	2201      	movs	r2, #1
 800a844:	615a      	str	r2, [r3, #20]
 800a846:	e7bb      	b.n	800a7c0 <__gethex+0x3c8>
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	455a      	cmp	r2, fp
 800a84c:	dd0b      	ble.n	800a866 <__gethex+0x46e>
 800a84e:	2101      	movs	r1, #1
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff fd6a 	bl	800a32a <rshift>
 800a856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a85a:	3501      	adds	r5, #1
 800a85c:	42ab      	cmp	r3, r5
 800a85e:	f6ff aed0 	blt.w	800a602 <__gethex+0x20a>
 800a862:	2701      	movs	r7, #1
 800a864:	e7c0      	b.n	800a7e8 <__gethex+0x3f0>
 800a866:	f016 061f 	ands.w	r6, r6, #31
 800a86a:	d0fa      	beq.n	800a862 <__gethex+0x46a>
 800a86c:	4453      	add	r3, sl
 800a86e:	f1c6 0620 	rsb	r6, r6, #32
 800a872:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a876:	f000 fa3f 	bl	800acf8 <__hi0bits>
 800a87a:	42b0      	cmp	r0, r6
 800a87c:	dbe7      	blt.n	800a84e <__gethex+0x456>
 800a87e:	e7f0      	b.n	800a862 <__gethex+0x46a>
 800a880:	0800c470 	.word	0x0800c470

0800a884 <L_shift>:
 800a884:	f1c2 0208 	rsb	r2, r2, #8
 800a888:	0092      	lsls	r2, r2, #2
 800a88a:	b570      	push	{r4, r5, r6, lr}
 800a88c:	f1c2 0620 	rsb	r6, r2, #32
 800a890:	6843      	ldr	r3, [r0, #4]
 800a892:	6804      	ldr	r4, [r0, #0]
 800a894:	fa03 f506 	lsl.w	r5, r3, r6
 800a898:	432c      	orrs	r4, r5
 800a89a:	40d3      	lsrs	r3, r2
 800a89c:	6004      	str	r4, [r0, #0]
 800a89e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8a2:	4288      	cmp	r0, r1
 800a8a4:	d3f4      	bcc.n	800a890 <L_shift+0xc>
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}

0800a8a8 <__match>:
 800a8a8:	b530      	push	{r4, r5, lr}
 800a8aa:	6803      	ldr	r3, [r0, #0]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b2:	b914      	cbnz	r4, 800a8ba <__match+0x12>
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	bd30      	pop	{r4, r5, pc}
 800a8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8c2:	2d19      	cmp	r5, #25
 800a8c4:	bf98      	it	ls
 800a8c6:	3220      	addls	r2, #32
 800a8c8:	42a2      	cmp	r2, r4
 800a8ca:	d0f0      	beq.n	800a8ae <__match+0x6>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e7f3      	b.n	800a8b8 <__match+0x10>

0800a8d0 <__hexnan>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	680b      	ldr	r3, [r1, #0]
 800a8d6:	115e      	asrs	r6, r3, #5
 800a8d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8dc:	f013 031f 	ands.w	r3, r3, #31
 800a8e0:	b087      	sub	sp, #28
 800a8e2:	bf18      	it	ne
 800a8e4:	3604      	addne	r6, #4
 800a8e6:	2500      	movs	r5, #0
 800a8e8:	1f37      	subs	r7, r6, #4
 800a8ea:	4690      	mov	r8, r2
 800a8ec:	6802      	ldr	r2, [r0, #0]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	4682      	mov	sl, r0
 800a8f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8f6:	46b9      	mov	r9, r7
 800a8f8:	463c      	mov	r4, r7
 800a8fa:	9502      	str	r5, [sp, #8]
 800a8fc:	46ab      	mov	fp, r5
 800a8fe:	7851      	ldrb	r1, [r2, #1]
 800a900:	1c53      	adds	r3, r2, #1
 800a902:	9303      	str	r3, [sp, #12]
 800a904:	b341      	cbz	r1, 800a958 <__hexnan+0x88>
 800a906:	4608      	mov	r0, r1
 800a908:	9205      	str	r2, [sp, #20]
 800a90a:	9104      	str	r1, [sp, #16]
 800a90c:	f7ff fd5f 	bl	800a3ce <__hexdig_fun>
 800a910:	2800      	cmp	r0, #0
 800a912:	d14f      	bne.n	800a9b4 <__hexnan+0xe4>
 800a914:	9904      	ldr	r1, [sp, #16]
 800a916:	9a05      	ldr	r2, [sp, #20]
 800a918:	2920      	cmp	r1, #32
 800a91a:	d818      	bhi.n	800a94e <__hexnan+0x7e>
 800a91c:	9b02      	ldr	r3, [sp, #8]
 800a91e:	459b      	cmp	fp, r3
 800a920:	dd13      	ble.n	800a94a <__hexnan+0x7a>
 800a922:	454c      	cmp	r4, r9
 800a924:	d206      	bcs.n	800a934 <__hexnan+0x64>
 800a926:	2d07      	cmp	r5, #7
 800a928:	dc04      	bgt.n	800a934 <__hexnan+0x64>
 800a92a:	462a      	mov	r2, r5
 800a92c:	4649      	mov	r1, r9
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff ffa8 	bl	800a884 <L_shift>
 800a934:	4544      	cmp	r4, r8
 800a936:	d950      	bls.n	800a9da <__hexnan+0x10a>
 800a938:	2300      	movs	r3, #0
 800a93a:	f1a4 0904 	sub.w	r9, r4, #4
 800a93e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a942:	f8cd b008 	str.w	fp, [sp, #8]
 800a946:	464c      	mov	r4, r9
 800a948:	461d      	mov	r5, r3
 800a94a:	9a03      	ldr	r2, [sp, #12]
 800a94c:	e7d7      	b.n	800a8fe <__hexnan+0x2e>
 800a94e:	2929      	cmp	r1, #41	; 0x29
 800a950:	d156      	bne.n	800aa00 <__hexnan+0x130>
 800a952:	3202      	adds	r2, #2
 800a954:	f8ca 2000 	str.w	r2, [sl]
 800a958:	f1bb 0f00 	cmp.w	fp, #0
 800a95c:	d050      	beq.n	800aa00 <__hexnan+0x130>
 800a95e:	454c      	cmp	r4, r9
 800a960:	d206      	bcs.n	800a970 <__hexnan+0xa0>
 800a962:	2d07      	cmp	r5, #7
 800a964:	dc04      	bgt.n	800a970 <__hexnan+0xa0>
 800a966:	462a      	mov	r2, r5
 800a968:	4649      	mov	r1, r9
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7ff ff8a 	bl	800a884 <L_shift>
 800a970:	4544      	cmp	r4, r8
 800a972:	d934      	bls.n	800a9de <__hexnan+0x10e>
 800a974:	f1a8 0204 	sub.w	r2, r8, #4
 800a978:	4623      	mov	r3, r4
 800a97a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a97e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a982:	429f      	cmp	r7, r3
 800a984:	d2f9      	bcs.n	800a97a <__hexnan+0xaa>
 800a986:	1b3b      	subs	r3, r7, r4
 800a988:	f023 0303 	bic.w	r3, r3, #3
 800a98c:	3304      	adds	r3, #4
 800a98e:	3401      	adds	r4, #1
 800a990:	3e03      	subs	r6, #3
 800a992:	42b4      	cmp	r4, r6
 800a994:	bf88      	it	hi
 800a996:	2304      	movhi	r3, #4
 800a998:	4443      	add	r3, r8
 800a99a:	2200      	movs	r2, #0
 800a99c:	f843 2b04 	str.w	r2, [r3], #4
 800a9a0:	429f      	cmp	r7, r3
 800a9a2:	d2fb      	bcs.n	800a99c <__hexnan+0xcc>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	b91b      	cbnz	r3, 800a9b0 <__hexnan+0xe0>
 800a9a8:	4547      	cmp	r7, r8
 800a9aa:	d127      	bne.n	800a9fc <__hexnan+0x12c>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	2005      	movs	r0, #5
 800a9b2:	e026      	b.n	800aa02 <__hexnan+0x132>
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	2d08      	cmp	r5, #8
 800a9b8:	f10b 0b01 	add.w	fp, fp, #1
 800a9bc:	dd06      	ble.n	800a9cc <__hexnan+0xfc>
 800a9be:	4544      	cmp	r4, r8
 800a9c0:	d9c3      	bls.n	800a94a <__hexnan+0x7a>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9c8:	2501      	movs	r5, #1
 800a9ca:	3c04      	subs	r4, #4
 800a9cc:	6822      	ldr	r2, [r4, #0]
 800a9ce:	f000 000f 	and.w	r0, r0, #15
 800a9d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	e7b7      	b.n	800a94a <__hexnan+0x7a>
 800a9da:	2508      	movs	r5, #8
 800a9dc:	e7b5      	b.n	800a94a <__hexnan+0x7a>
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0df      	beq.n	800a9a4 <__hexnan+0xd4>
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e8:	f1c3 0320 	rsb	r3, r3, #32
 800a9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9f4:	401a      	ands	r2, r3
 800a9f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9fa:	e7d3      	b.n	800a9a4 <__hexnan+0xd4>
 800a9fc:	3f04      	subs	r7, #4
 800a9fe:	e7d1      	b.n	800a9a4 <__hexnan+0xd4>
 800aa00:	2004      	movs	r0, #4
 800aa02:	b007      	add	sp, #28
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa08 <_localeconv_r>:
 800aa08:	4800      	ldr	r0, [pc, #0]	; (800aa0c <_localeconv_r+0x4>)
 800aa0a:	4770      	bx	lr
 800aa0c:	20000174 	.word	0x20000174

0800aa10 <__retarget_lock_init_recursive>:
 800aa10:	4770      	bx	lr

0800aa12 <__retarget_lock_acquire_recursive>:
 800aa12:	4770      	bx	lr

0800aa14 <__retarget_lock_release_recursive>:
 800aa14:	4770      	bx	lr

0800aa16 <__swhatbuf_r>:
 800aa16:	b570      	push	{r4, r5, r6, lr}
 800aa18:	460e      	mov	r6, r1
 800aa1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	b096      	sub	sp, #88	; 0x58
 800aa22:	4614      	mov	r4, r2
 800aa24:	461d      	mov	r5, r3
 800aa26:	da08      	bge.n	800aa3a <__swhatbuf_r+0x24>
 800aa28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	602a      	str	r2, [r5, #0]
 800aa30:	061a      	lsls	r2, r3, #24
 800aa32:	d410      	bmi.n	800aa56 <__swhatbuf_r+0x40>
 800aa34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa38:	e00e      	b.n	800aa58 <__swhatbuf_r+0x42>
 800aa3a:	466a      	mov	r2, sp
 800aa3c:	f001 f9a6 	bl	800bd8c <_fstat_r>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	dbf1      	blt.n	800aa28 <__swhatbuf_r+0x12>
 800aa44:	9a01      	ldr	r2, [sp, #4]
 800aa46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa4e:	425a      	negs	r2, r3
 800aa50:	415a      	adcs	r2, r3
 800aa52:	602a      	str	r2, [r5, #0]
 800aa54:	e7ee      	b.n	800aa34 <__swhatbuf_r+0x1e>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	2000      	movs	r0, #0
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	b016      	add	sp, #88	; 0x58
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}

0800aa60 <__smakebuf_r>:
 800aa60:	898b      	ldrh	r3, [r1, #12]
 800aa62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa64:	079d      	lsls	r5, r3, #30
 800aa66:	4606      	mov	r6, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	d507      	bpl.n	800aa7c <__smakebuf_r+0x1c>
 800aa6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	2301      	movs	r3, #1
 800aa76:	6163      	str	r3, [r4, #20]
 800aa78:	b002      	add	sp, #8
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	ab01      	add	r3, sp, #4
 800aa7e:	466a      	mov	r2, sp
 800aa80:	f7ff ffc9 	bl	800aa16 <__swhatbuf_r>
 800aa84:	9900      	ldr	r1, [sp, #0]
 800aa86:	4605      	mov	r5, r0
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 fd87 	bl	800b59c <_malloc_r>
 800aa8e:	b948      	cbnz	r0, 800aaa4 <__smakebuf_r+0x44>
 800aa90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa94:	059a      	lsls	r2, r3, #22
 800aa96:	d4ef      	bmi.n	800aa78 <__smakebuf_r+0x18>
 800aa98:	f023 0303 	bic.w	r3, r3, #3
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	e7e3      	b.n	800aa6c <__smakebuf_r+0xc>
 800aaa4:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <__smakebuf_r+0x7c>)
 800aaa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	6163      	str	r3, [r4, #20]
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	6120      	str	r0, [r4, #16]
 800aaba:	b15b      	cbz	r3, 800aad4 <__smakebuf_r+0x74>
 800aabc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aac0:	4630      	mov	r0, r6
 800aac2:	f001 f975 	bl	800bdb0 <_isatty_r>
 800aac6:	b128      	cbz	r0, 800aad4 <__smakebuf_r+0x74>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	89a0      	ldrh	r0, [r4, #12]
 800aad6:	4305      	orrs	r5, r0
 800aad8:	81a5      	strh	r5, [r4, #12]
 800aada:	e7cd      	b.n	800aa78 <__smakebuf_r+0x18>
 800aadc:	0800a189 	.word	0x0800a189

0800aae0 <malloc>:
 800aae0:	4b02      	ldr	r3, [pc, #8]	; (800aaec <malloc+0xc>)
 800aae2:	4601      	mov	r1, r0
 800aae4:	6818      	ldr	r0, [r3, #0]
 800aae6:	f000 bd59 	b.w	800b59c <_malloc_r>
 800aaea:	bf00      	nop
 800aaec:	2000001c 	.word	0x2000001c

0800aaf0 <__ascii_mbtowc>:
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	b901      	cbnz	r1, 800aaf6 <__ascii_mbtowc+0x6>
 800aaf4:	a901      	add	r1, sp, #4
 800aaf6:	b142      	cbz	r2, 800ab0a <__ascii_mbtowc+0x1a>
 800aaf8:	b14b      	cbz	r3, 800ab0e <__ascii_mbtowc+0x1e>
 800aafa:	7813      	ldrb	r3, [r2, #0]
 800aafc:	600b      	str	r3, [r1, #0]
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	1e10      	subs	r0, r2, #0
 800ab02:	bf18      	it	ne
 800ab04:	2001      	movne	r0, #1
 800ab06:	b002      	add	sp, #8
 800ab08:	4770      	bx	lr
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	e7fb      	b.n	800ab06 <__ascii_mbtowc+0x16>
 800ab0e:	f06f 0001 	mvn.w	r0, #1
 800ab12:	e7f8      	b.n	800ab06 <__ascii_mbtowc+0x16>

0800ab14 <_Balloc>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab18:	4604      	mov	r4, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	b976      	cbnz	r6, 800ab3c <_Balloc+0x28>
 800ab1e:	2010      	movs	r0, #16
 800ab20:	f7ff ffde 	bl	800aae0 <malloc>
 800ab24:	4602      	mov	r2, r0
 800ab26:	6260      	str	r0, [r4, #36]	; 0x24
 800ab28:	b920      	cbnz	r0, 800ab34 <_Balloc+0x20>
 800ab2a:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <_Balloc+0x78>)
 800ab2c:	4818      	ldr	r0, [pc, #96]	; (800ab90 <_Balloc+0x7c>)
 800ab2e:	2166      	movs	r1, #102	; 0x66
 800ab30:	f001 f8ec 	bl	800bd0c <__assert_func>
 800ab34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab38:	6006      	str	r6, [r0, #0]
 800ab3a:	60c6      	str	r6, [r0, #12]
 800ab3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab3e:	68f3      	ldr	r3, [r6, #12]
 800ab40:	b183      	cbz	r3, 800ab64 <_Balloc+0x50>
 800ab42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab4a:	b9b8      	cbnz	r0, 800ab7c <_Balloc+0x68>
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab52:	1d72      	adds	r2, r6, #5
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fc9d 	bl	800b496 <_calloc_r>
 800ab5c:	b160      	cbz	r0, 800ab78 <_Balloc+0x64>
 800ab5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab62:	e00e      	b.n	800ab82 <_Balloc+0x6e>
 800ab64:	2221      	movs	r2, #33	; 0x21
 800ab66:	2104      	movs	r1, #4
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fc94 	bl	800b496 <_calloc_r>
 800ab6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab70:	60f0      	str	r0, [r6, #12]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e4      	bne.n	800ab42 <_Balloc+0x2e>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	6802      	ldr	r2, [r0, #0]
 800ab7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab82:	2300      	movs	r3, #0
 800ab84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab88:	e7f7      	b.n	800ab7a <_Balloc+0x66>
 800ab8a:	bf00      	nop
 800ab8c:	0800c3fe 	.word	0x0800c3fe
 800ab90:	0800c560 	.word	0x0800c560

0800ab94 <_Bfree>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b976      	cbnz	r6, 800abbc <_Bfree+0x28>
 800ab9e:	2010      	movs	r0, #16
 800aba0:	f7ff ff9e 	bl	800aae0 <malloc>
 800aba4:	4602      	mov	r2, r0
 800aba6:	6268      	str	r0, [r5, #36]	; 0x24
 800aba8:	b920      	cbnz	r0, 800abb4 <_Bfree+0x20>
 800abaa:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <_Bfree+0x3c>)
 800abac:	4809      	ldr	r0, [pc, #36]	; (800abd4 <_Bfree+0x40>)
 800abae:	218a      	movs	r1, #138	; 0x8a
 800abb0:	f001 f8ac 	bl	800bd0c <__assert_func>
 800abb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb8:	6006      	str	r6, [r0, #0]
 800abba:	60c6      	str	r6, [r0, #12]
 800abbc:	b13c      	cbz	r4, 800abce <_Bfree+0x3a>
 800abbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abc0:	6862      	ldr	r2, [r4, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc8:	6021      	str	r1, [r4, #0]
 800abca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	0800c3fe 	.word	0x0800c3fe
 800abd4:	0800c560 	.word	0x0800c560

0800abd8 <__multadd>:
 800abd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abdc:	690d      	ldr	r5, [r1, #16]
 800abde:	4607      	mov	r7, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	461e      	mov	r6, r3
 800abe4:	f101 0c14 	add.w	ip, r1, #20
 800abe8:	2000      	movs	r0, #0
 800abea:	f8dc 3000 	ldr.w	r3, [ip]
 800abee:	b299      	uxth	r1, r3
 800abf0:	fb02 6101 	mla	r1, r2, r1, r6
 800abf4:	0c1e      	lsrs	r6, r3, #16
 800abf6:	0c0b      	lsrs	r3, r1, #16
 800abf8:	fb02 3306 	mla	r3, r2, r6, r3
 800abfc:	b289      	uxth	r1, r1
 800abfe:	3001      	adds	r0, #1
 800ac00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac04:	4285      	cmp	r5, r0
 800ac06:	f84c 1b04 	str.w	r1, [ip], #4
 800ac0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac0e:	dcec      	bgt.n	800abea <__multadd+0x12>
 800ac10:	b30e      	cbz	r6, 800ac56 <__multadd+0x7e>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	42ab      	cmp	r3, r5
 800ac16:	dc19      	bgt.n	800ac4c <__multadd+0x74>
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	3101      	adds	r1, #1
 800ac1e:	f7ff ff79 	bl	800ab14 <_Balloc>
 800ac22:	4680      	mov	r8, r0
 800ac24:	b928      	cbnz	r0, 800ac32 <__multadd+0x5a>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <__multadd+0x84>)
 800ac2a:	480d      	ldr	r0, [pc, #52]	; (800ac60 <__multadd+0x88>)
 800ac2c:	21b5      	movs	r1, #181	; 0xb5
 800ac2e:	f001 f86d 	bl	800bd0c <__assert_func>
 800ac32:	6922      	ldr	r2, [r4, #16]
 800ac34:	3202      	adds	r2, #2
 800ac36:	f104 010c 	add.w	r1, r4, #12
 800ac3a:	0092      	lsls	r2, r2, #2
 800ac3c:	300c      	adds	r0, #12
 800ac3e:	f7fc fc91 	bl	8007564 <memcpy>
 800ac42:	4621      	mov	r1, r4
 800ac44:	4638      	mov	r0, r7
 800ac46:	f7ff ffa5 	bl	800ab94 <_Bfree>
 800ac4a:	4644      	mov	r4, r8
 800ac4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac50:	3501      	adds	r5, #1
 800ac52:	615e      	str	r6, [r3, #20]
 800ac54:	6125      	str	r5, [r4, #16]
 800ac56:	4620      	mov	r0, r4
 800ac58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5c:	0800c470 	.word	0x0800c470
 800ac60:	0800c560 	.word	0x0800c560

0800ac64 <__s2b>:
 800ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4615      	mov	r5, r2
 800ac6c:	461f      	mov	r7, r3
 800ac6e:	2209      	movs	r2, #9
 800ac70:	3308      	adds	r3, #8
 800ac72:	4606      	mov	r6, r0
 800ac74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac78:	2100      	movs	r1, #0
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	db09      	blt.n	800ac94 <__s2b+0x30>
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7ff ff47 	bl	800ab14 <_Balloc>
 800ac86:	b940      	cbnz	r0, 800ac9a <__s2b+0x36>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b19      	ldr	r3, [pc, #100]	; (800acf0 <__s2b+0x8c>)
 800ac8c:	4819      	ldr	r0, [pc, #100]	; (800acf4 <__s2b+0x90>)
 800ac8e:	21ce      	movs	r1, #206	; 0xce
 800ac90:	f001 f83c 	bl	800bd0c <__assert_func>
 800ac94:	0052      	lsls	r2, r2, #1
 800ac96:	3101      	adds	r1, #1
 800ac98:	e7f0      	b.n	800ac7c <__s2b+0x18>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	6143      	str	r3, [r0, #20]
 800ac9e:	2d09      	cmp	r5, #9
 800aca0:	f04f 0301 	mov.w	r3, #1
 800aca4:	6103      	str	r3, [r0, #16]
 800aca6:	dd16      	ble.n	800acd6 <__s2b+0x72>
 800aca8:	f104 0909 	add.w	r9, r4, #9
 800acac:	46c8      	mov	r8, r9
 800acae:	442c      	add	r4, r5
 800acb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acb4:	4601      	mov	r1, r0
 800acb6:	3b30      	subs	r3, #48	; 0x30
 800acb8:	220a      	movs	r2, #10
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff ff8c 	bl	800abd8 <__multadd>
 800acc0:	45a0      	cmp	r8, r4
 800acc2:	d1f5      	bne.n	800acb0 <__s2b+0x4c>
 800acc4:	f1a5 0408 	sub.w	r4, r5, #8
 800acc8:	444c      	add	r4, r9
 800acca:	1b2d      	subs	r5, r5, r4
 800accc:	1963      	adds	r3, r4, r5
 800acce:	42bb      	cmp	r3, r7
 800acd0:	db04      	blt.n	800acdc <__s2b+0x78>
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	340a      	adds	r4, #10
 800acd8:	2509      	movs	r5, #9
 800acda:	e7f6      	b.n	800acca <__s2b+0x66>
 800acdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ace0:	4601      	mov	r1, r0
 800ace2:	3b30      	subs	r3, #48	; 0x30
 800ace4:	220a      	movs	r2, #10
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ff76 	bl	800abd8 <__multadd>
 800acec:	e7ee      	b.n	800accc <__s2b+0x68>
 800acee:	bf00      	nop
 800acf0:	0800c470 	.word	0x0800c470
 800acf4:	0800c560 	.word	0x0800c560

0800acf8 <__hi0bits>:
 800acf8:	0c03      	lsrs	r3, r0, #16
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	b9d3      	cbnz	r3, 800ad34 <__hi0bits+0x3c>
 800acfe:	0400      	lsls	r0, r0, #16
 800ad00:	2310      	movs	r3, #16
 800ad02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad06:	bf04      	itt	eq
 800ad08:	0200      	lsleq	r0, r0, #8
 800ad0a:	3308      	addeq	r3, #8
 800ad0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad10:	bf04      	itt	eq
 800ad12:	0100      	lsleq	r0, r0, #4
 800ad14:	3304      	addeq	r3, #4
 800ad16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad1a:	bf04      	itt	eq
 800ad1c:	0080      	lsleq	r0, r0, #2
 800ad1e:	3302      	addeq	r3, #2
 800ad20:	2800      	cmp	r0, #0
 800ad22:	db05      	blt.n	800ad30 <__hi0bits+0x38>
 800ad24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad28:	f103 0301 	add.w	r3, r3, #1
 800ad2c:	bf08      	it	eq
 800ad2e:	2320      	moveq	r3, #32
 800ad30:	4618      	mov	r0, r3
 800ad32:	4770      	bx	lr
 800ad34:	2300      	movs	r3, #0
 800ad36:	e7e4      	b.n	800ad02 <__hi0bits+0xa>

0800ad38 <__lo0bits>:
 800ad38:	6803      	ldr	r3, [r0, #0]
 800ad3a:	f013 0207 	ands.w	r2, r3, #7
 800ad3e:	4601      	mov	r1, r0
 800ad40:	d00b      	beq.n	800ad5a <__lo0bits+0x22>
 800ad42:	07da      	lsls	r2, r3, #31
 800ad44:	d423      	bmi.n	800ad8e <__lo0bits+0x56>
 800ad46:	0798      	lsls	r0, r3, #30
 800ad48:	bf49      	itett	mi
 800ad4a:	085b      	lsrmi	r3, r3, #1
 800ad4c:	089b      	lsrpl	r3, r3, #2
 800ad4e:	2001      	movmi	r0, #1
 800ad50:	600b      	strmi	r3, [r1, #0]
 800ad52:	bf5c      	itt	pl
 800ad54:	600b      	strpl	r3, [r1, #0]
 800ad56:	2002      	movpl	r0, #2
 800ad58:	4770      	bx	lr
 800ad5a:	b298      	uxth	r0, r3
 800ad5c:	b9a8      	cbnz	r0, 800ad8a <__lo0bits+0x52>
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	2010      	movs	r0, #16
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	b90a      	cbnz	r2, 800ad6a <__lo0bits+0x32>
 800ad66:	3008      	adds	r0, #8
 800ad68:	0a1b      	lsrs	r3, r3, #8
 800ad6a:	071a      	lsls	r2, r3, #28
 800ad6c:	bf04      	itt	eq
 800ad6e:	091b      	lsreq	r3, r3, #4
 800ad70:	3004      	addeq	r0, #4
 800ad72:	079a      	lsls	r2, r3, #30
 800ad74:	bf04      	itt	eq
 800ad76:	089b      	lsreq	r3, r3, #2
 800ad78:	3002      	addeq	r0, #2
 800ad7a:	07da      	lsls	r2, r3, #31
 800ad7c:	d403      	bmi.n	800ad86 <__lo0bits+0x4e>
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	f100 0001 	add.w	r0, r0, #1
 800ad84:	d005      	beq.n	800ad92 <__lo0bits+0x5a>
 800ad86:	600b      	str	r3, [r1, #0]
 800ad88:	4770      	bx	lr
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	e7e9      	b.n	800ad62 <__lo0bits+0x2a>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	4770      	bx	lr
 800ad92:	2020      	movs	r0, #32
 800ad94:	4770      	bx	lr
	...

0800ad98 <__i2b>:
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	f7ff feb9 	bl	800ab14 <_Balloc>
 800ada2:	4602      	mov	r2, r0
 800ada4:	b928      	cbnz	r0, 800adb2 <__i2b+0x1a>
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <__i2b+0x24>)
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <__i2b+0x28>)
 800adaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adae:	f000 ffad 	bl	800bd0c <__assert_func>
 800adb2:	2301      	movs	r3, #1
 800adb4:	6144      	str	r4, [r0, #20]
 800adb6:	6103      	str	r3, [r0, #16]
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	bf00      	nop
 800adbc:	0800c470 	.word	0x0800c470
 800adc0:	0800c560 	.word	0x0800c560

0800adc4 <__multiply>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	4691      	mov	r9, r2
 800adca:	690a      	ldr	r2, [r1, #16]
 800adcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800add0:	429a      	cmp	r2, r3
 800add2:	bfb8      	it	lt
 800add4:	460b      	movlt	r3, r1
 800add6:	460c      	mov	r4, r1
 800add8:	bfbc      	itt	lt
 800adda:	464c      	movlt	r4, r9
 800addc:	4699      	movlt	r9, r3
 800adde:	6927      	ldr	r7, [r4, #16]
 800ade0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	6861      	ldr	r1, [r4, #4]
 800ade8:	eb07 060a 	add.w	r6, r7, sl
 800adec:	42b3      	cmp	r3, r6
 800adee:	b085      	sub	sp, #20
 800adf0:	bfb8      	it	lt
 800adf2:	3101      	addlt	r1, #1
 800adf4:	f7ff fe8e 	bl	800ab14 <_Balloc>
 800adf8:	b930      	cbnz	r0, 800ae08 <__multiply+0x44>
 800adfa:	4602      	mov	r2, r0
 800adfc:	4b44      	ldr	r3, [pc, #272]	; (800af10 <__multiply+0x14c>)
 800adfe:	4845      	ldr	r0, [pc, #276]	; (800af14 <__multiply+0x150>)
 800ae00:	f240 115d 	movw	r1, #349	; 0x15d
 800ae04:	f000 ff82 	bl	800bd0c <__assert_func>
 800ae08:	f100 0514 	add.w	r5, r0, #20
 800ae0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae10:	462b      	mov	r3, r5
 800ae12:	2200      	movs	r2, #0
 800ae14:	4543      	cmp	r3, r8
 800ae16:	d321      	bcc.n	800ae5c <__multiply+0x98>
 800ae18:	f104 0314 	add.w	r3, r4, #20
 800ae1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae20:	f109 0314 	add.w	r3, r9, #20
 800ae24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae28:	9202      	str	r2, [sp, #8]
 800ae2a:	1b3a      	subs	r2, r7, r4
 800ae2c:	3a15      	subs	r2, #21
 800ae2e:	f022 0203 	bic.w	r2, r2, #3
 800ae32:	3204      	adds	r2, #4
 800ae34:	f104 0115 	add.w	r1, r4, #21
 800ae38:	428f      	cmp	r7, r1
 800ae3a:	bf38      	it	cc
 800ae3c:	2204      	movcc	r2, #4
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	9a02      	ldr	r2, [sp, #8]
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d80c      	bhi.n	800ae62 <__multiply+0x9e>
 800ae48:	2e00      	cmp	r6, #0
 800ae4a:	dd03      	ble.n	800ae54 <__multiply+0x90>
 800ae4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d05a      	beq.n	800af0a <__multiply+0x146>
 800ae54:	6106      	str	r6, [r0, #16]
 800ae56:	b005      	add	sp, #20
 800ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5c:	f843 2b04 	str.w	r2, [r3], #4
 800ae60:	e7d8      	b.n	800ae14 <__multiply+0x50>
 800ae62:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae66:	f1ba 0f00 	cmp.w	sl, #0
 800ae6a:	d024      	beq.n	800aeb6 <__multiply+0xf2>
 800ae6c:	f104 0e14 	add.w	lr, r4, #20
 800ae70:	46a9      	mov	r9, r5
 800ae72:	f04f 0c00 	mov.w	ip, #0
 800ae76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae7a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae7e:	fa1f fb82 	uxth.w	fp, r2
 800ae82:	b289      	uxth	r1, r1
 800ae84:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae8c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae90:	4461      	add	r1, ip
 800ae92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae96:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae9e:	b289      	uxth	r1, r1
 800aea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea4:	4577      	cmp	r7, lr
 800aea6:	f849 1b04 	str.w	r1, [r9], #4
 800aeaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeae:	d8e2      	bhi.n	800ae76 <__multiply+0xb2>
 800aeb0:	9a01      	ldr	r2, [sp, #4]
 800aeb2:	f845 c002 	str.w	ip, [r5, r2]
 800aeb6:	9a03      	ldr	r2, [sp, #12]
 800aeb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aebc:	3304      	adds	r3, #4
 800aebe:	f1b9 0f00 	cmp.w	r9, #0
 800aec2:	d020      	beq.n	800af06 <__multiply+0x142>
 800aec4:	6829      	ldr	r1, [r5, #0]
 800aec6:	f104 0c14 	add.w	ip, r4, #20
 800aeca:	46ae      	mov	lr, r5
 800aecc:	f04f 0a00 	mov.w	sl, #0
 800aed0:	f8bc b000 	ldrh.w	fp, [ip]
 800aed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed8:	fb09 220b 	mla	r2, r9, fp, r2
 800aedc:	4492      	add	sl, r2
 800aede:	b289      	uxth	r1, r1
 800aee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee4:	f84e 1b04 	str.w	r1, [lr], #4
 800aee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aeec:	f8be 1000 	ldrh.w	r1, [lr]
 800aef0:	0c12      	lsrs	r2, r2, #16
 800aef2:	fb09 1102 	mla	r1, r9, r2, r1
 800aef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aefa:	4567      	cmp	r7, ip
 800aefc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af00:	d8e6      	bhi.n	800aed0 <__multiply+0x10c>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	50a9      	str	r1, [r5, r2]
 800af06:	3504      	adds	r5, #4
 800af08:	e79a      	b.n	800ae40 <__multiply+0x7c>
 800af0a:	3e01      	subs	r6, #1
 800af0c:	e79c      	b.n	800ae48 <__multiply+0x84>
 800af0e:	bf00      	nop
 800af10:	0800c470 	.word	0x0800c470
 800af14:	0800c560 	.word	0x0800c560

0800af18 <__pow5mult>:
 800af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	4615      	mov	r5, r2
 800af1e:	f012 0203 	ands.w	r2, r2, #3
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	d007      	beq.n	800af38 <__pow5mult+0x20>
 800af28:	4c25      	ldr	r4, [pc, #148]	; (800afc0 <__pow5mult+0xa8>)
 800af2a:	3a01      	subs	r2, #1
 800af2c:	2300      	movs	r3, #0
 800af2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af32:	f7ff fe51 	bl	800abd8 <__multadd>
 800af36:	4607      	mov	r7, r0
 800af38:	10ad      	asrs	r5, r5, #2
 800af3a:	d03d      	beq.n	800afb8 <__pow5mult+0xa0>
 800af3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3e:	b97c      	cbnz	r4, 800af60 <__pow5mult+0x48>
 800af40:	2010      	movs	r0, #16
 800af42:	f7ff fdcd 	bl	800aae0 <malloc>
 800af46:	4602      	mov	r2, r0
 800af48:	6270      	str	r0, [r6, #36]	; 0x24
 800af4a:	b928      	cbnz	r0, 800af58 <__pow5mult+0x40>
 800af4c:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <__pow5mult+0xac>)
 800af4e:	481e      	ldr	r0, [pc, #120]	; (800afc8 <__pow5mult+0xb0>)
 800af50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af54:	f000 feda 	bl	800bd0c <__assert_func>
 800af58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	60c4      	str	r4, [r0, #12]
 800af60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af68:	b94c      	cbnz	r4, 800af7e <__pow5mult+0x66>
 800af6a:	f240 2171 	movw	r1, #625	; 0x271
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ff12 	bl	800ad98 <__i2b>
 800af74:	2300      	movs	r3, #0
 800af76:	f8c8 0008 	str.w	r0, [r8, #8]
 800af7a:	4604      	mov	r4, r0
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	f04f 0900 	mov.w	r9, #0
 800af82:	07eb      	lsls	r3, r5, #31
 800af84:	d50a      	bpl.n	800af9c <__pow5mult+0x84>
 800af86:	4639      	mov	r1, r7
 800af88:	4622      	mov	r2, r4
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ff1a 	bl	800adc4 <__multiply>
 800af90:	4639      	mov	r1, r7
 800af92:	4680      	mov	r8, r0
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff fdfd 	bl	800ab94 <_Bfree>
 800af9a:	4647      	mov	r7, r8
 800af9c:	106d      	asrs	r5, r5, #1
 800af9e:	d00b      	beq.n	800afb8 <__pow5mult+0xa0>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	b938      	cbnz	r0, 800afb4 <__pow5mult+0x9c>
 800afa4:	4622      	mov	r2, r4
 800afa6:	4621      	mov	r1, r4
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ff0b 	bl	800adc4 <__multiply>
 800afae:	6020      	str	r0, [r4, #0]
 800afb0:	f8c0 9000 	str.w	r9, [r0]
 800afb4:	4604      	mov	r4, r0
 800afb6:	e7e4      	b.n	800af82 <__pow5mult+0x6a>
 800afb8:	4638      	mov	r0, r7
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	bf00      	nop
 800afc0:	0800c6b0 	.word	0x0800c6b0
 800afc4:	0800c3fe 	.word	0x0800c3fe
 800afc8:	0800c560 	.word	0x0800c560

0800afcc <__lshift>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	460c      	mov	r4, r1
 800afd2:	6849      	ldr	r1, [r1, #4]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	4607      	mov	r7, r0
 800afde:	4691      	mov	r9, r2
 800afe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe4:	f108 0601 	add.w	r6, r8, #1
 800afe8:	42b3      	cmp	r3, r6
 800afea:	db0b      	blt.n	800b004 <__lshift+0x38>
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff fd91 	bl	800ab14 <_Balloc>
 800aff2:	4605      	mov	r5, r0
 800aff4:	b948      	cbnz	r0, 800b00a <__lshift+0x3e>
 800aff6:	4602      	mov	r2, r0
 800aff8:	4b2a      	ldr	r3, [pc, #168]	; (800b0a4 <__lshift+0xd8>)
 800affa:	482b      	ldr	r0, [pc, #172]	; (800b0a8 <__lshift+0xdc>)
 800affc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b000:	f000 fe84 	bl	800bd0c <__assert_func>
 800b004:	3101      	adds	r1, #1
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	e7ee      	b.n	800afe8 <__lshift+0x1c>
 800b00a:	2300      	movs	r3, #0
 800b00c:	f100 0114 	add.w	r1, r0, #20
 800b010:	f100 0210 	add.w	r2, r0, #16
 800b014:	4618      	mov	r0, r3
 800b016:	4553      	cmp	r3, sl
 800b018:	db37      	blt.n	800b08a <__lshift+0xbe>
 800b01a:	6920      	ldr	r0, [r4, #16]
 800b01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b020:	f104 0314 	add.w	r3, r4, #20
 800b024:	f019 091f 	ands.w	r9, r9, #31
 800b028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b02c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b030:	d02f      	beq.n	800b092 <__lshift+0xc6>
 800b032:	f1c9 0e20 	rsb	lr, r9, #32
 800b036:	468a      	mov	sl, r1
 800b038:	f04f 0c00 	mov.w	ip, #0
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	fa02 f209 	lsl.w	r2, r2, r9
 800b042:	ea42 020c 	orr.w	r2, r2, ip
 800b046:	f84a 2b04 	str.w	r2, [sl], #4
 800b04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04e:	4298      	cmp	r0, r3
 800b050:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b054:	d8f2      	bhi.n	800b03c <__lshift+0x70>
 800b056:	1b03      	subs	r3, r0, r4
 800b058:	3b15      	subs	r3, #21
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	3304      	adds	r3, #4
 800b060:	f104 0215 	add.w	r2, r4, #21
 800b064:	4290      	cmp	r0, r2
 800b066:	bf38      	it	cc
 800b068:	2304      	movcc	r3, #4
 800b06a:	f841 c003 	str.w	ip, [r1, r3]
 800b06e:	f1bc 0f00 	cmp.w	ip, #0
 800b072:	d001      	beq.n	800b078 <__lshift+0xac>
 800b074:	f108 0602 	add.w	r6, r8, #2
 800b078:	3e01      	subs	r6, #1
 800b07a:	4638      	mov	r0, r7
 800b07c:	612e      	str	r6, [r5, #16]
 800b07e:	4621      	mov	r1, r4
 800b080:	f7ff fd88 	bl	800ab94 <_Bfree>
 800b084:	4628      	mov	r0, r5
 800b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08e:	3301      	adds	r3, #1
 800b090:	e7c1      	b.n	800b016 <__lshift+0x4a>
 800b092:	3904      	subs	r1, #4
 800b094:	f853 2b04 	ldr.w	r2, [r3], #4
 800b098:	f841 2f04 	str.w	r2, [r1, #4]!
 800b09c:	4298      	cmp	r0, r3
 800b09e:	d8f9      	bhi.n	800b094 <__lshift+0xc8>
 800b0a0:	e7ea      	b.n	800b078 <__lshift+0xac>
 800b0a2:	bf00      	nop
 800b0a4:	0800c470 	.word	0x0800c470
 800b0a8:	0800c560 	.word	0x0800c560

0800b0ac <__mcmp>:
 800b0ac:	b530      	push	{r4, r5, lr}
 800b0ae:	6902      	ldr	r2, [r0, #16]
 800b0b0:	690c      	ldr	r4, [r1, #16]
 800b0b2:	1b12      	subs	r2, r2, r4
 800b0b4:	d10e      	bne.n	800b0d4 <__mcmp+0x28>
 800b0b6:	f100 0314 	add.w	r3, r0, #20
 800b0ba:	3114      	adds	r1, #20
 800b0bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0cc:	42a5      	cmp	r5, r4
 800b0ce:	d003      	beq.n	800b0d8 <__mcmp+0x2c>
 800b0d0:	d305      	bcc.n	800b0de <__mcmp+0x32>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	bd30      	pop	{r4, r5, pc}
 800b0d8:	4283      	cmp	r3, r0
 800b0da:	d3f3      	bcc.n	800b0c4 <__mcmp+0x18>
 800b0dc:	e7fa      	b.n	800b0d4 <__mcmp+0x28>
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e2:	e7f7      	b.n	800b0d4 <__mcmp+0x28>

0800b0e4 <__mdiff>:
 800b0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	4690      	mov	r8, r2
 800b0f2:	f7ff ffdb 	bl	800b0ac <__mcmp>
 800b0f6:	1e05      	subs	r5, r0, #0
 800b0f8:	d110      	bne.n	800b11c <__mdiff+0x38>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f7ff fd09 	bl	800ab14 <_Balloc>
 800b102:	b930      	cbnz	r0, 800b112 <__mdiff+0x2e>
 800b104:	4b3a      	ldr	r3, [pc, #232]	; (800b1f0 <__mdiff+0x10c>)
 800b106:	4602      	mov	r2, r0
 800b108:	f240 2132 	movw	r1, #562	; 0x232
 800b10c:	4839      	ldr	r0, [pc, #228]	; (800b1f4 <__mdiff+0x110>)
 800b10e:	f000 fdfd 	bl	800bd0c <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	bfa4      	itt	ge
 800b11e:	4643      	movge	r3, r8
 800b120:	46a0      	movge	r8, r4
 800b122:	4630      	mov	r0, r6
 800b124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b128:	bfa6      	itte	ge
 800b12a:	461c      	movge	r4, r3
 800b12c:	2500      	movge	r5, #0
 800b12e:	2501      	movlt	r5, #1
 800b130:	f7ff fcf0 	bl	800ab14 <_Balloc>
 800b134:	b920      	cbnz	r0, 800b140 <__mdiff+0x5c>
 800b136:	4b2e      	ldr	r3, [pc, #184]	; (800b1f0 <__mdiff+0x10c>)
 800b138:	4602      	mov	r2, r0
 800b13a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b13e:	e7e5      	b.n	800b10c <__mdiff+0x28>
 800b140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b144:	6926      	ldr	r6, [r4, #16]
 800b146:	60c5      	str	r5, [r0, #12]
 800b148:	f104 0914 	add.w	r9, r4, #20
 800b14c:	f108 0514 	add.w	r5, r8, #20
 800b150:	f100 0e14 	add.w	lr, r0, #20
 800b154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b15c:	f108 0210 	add.w	r2, r8, #16
 800b160:	46f2      	mov	sl, lr
 800b162:	2100      	movs	r1, #0
 800b164:	f859 3b04 	ldr.w	r3, [r9], #4
 800b168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b16c:	fa1f f883 	uxth.w	r8, r3
 800b170:	fa11 f18b 	uxtah	r1, r1, fp
 800b174:	0c1b      	lsrs	r3, r3, #16
 800b176:	eba1 0808 	sub.w	r8, r1, r8
 800b17a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b17e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b182:	fa1f f888 	uxth.w	r8, r8
 800b186:	1419      	asrs	r1, r3, #16
 800b188:	454e      	cmp	r6, r9
 800b18a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b18e:	f84a 3b04 	str.w	r3, [sl], #4
 800b192:	d8e7      	bhi.n	800b164 <__mdiff+0x80>
 800b194:	1b33      	subs	r3, r6, r4
 800b196:	3b15      	subs	r3, #21
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	3304      	adds	r3, #4
 800b19e:	3415      	adds	r4, #21
 800b1a0:	42a6      	cmp	r6, r4
 800b1a2:	bf38      	it	cc
 800b1a4:	2304      	movcc	r3, #4
 800b1a6:	441d      	add	r5, r3
 800b1a8:	4473      	add	r3, lr
 800b1aa:	469e      	mov	lr, r3
 800b1ac:	462e      	mov	r6, r5
 800b1ae:	4566      	cmp	r6, ip
 800b1b0:	d30e      	bcc.n	800b1d0 <__mdiff+0xec>
 800b1b2:	f10c 0203 	add.w	r2, ip, #3
 800b1b6:	1b52      	subs	r2, r2, r5
 800b1b8:	f022 0203 	bic.w	r2, r2, #3
 800b1bc:	3d03      	subs	r5, #3
 800b1be:	45ac      	cmp	ip, r5
 800b1c0:	bf38      	it	cc
 800b1c2:	2200      	movcc	r2, #0
 800b1c4:	441a      	add	r2, r3
 800b1c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ca:	b17b      	cbz	r3, 800b1ec <__mdiff+0x108>
 800b1cc:	6107      	str	r7, [r0, #16]
 800b1ce:	e7a3      	b.n	800b118 <__mdiff+0x34>
 800b1d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1d4:	fa11 f288 	uxtah	r2, r1, r8
 800b1d8:	1414      	asrs	r4, r2, #16
 800b1da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1de:	b292      	uxth	r2, r2
 800b1e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1e4:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e8:	1421      	asrs	r1, r4, #16
 800b1ea:	e7e0      	b.n	800b1ae <__mdiff+0xca>
 800b1ec:	3f01      	subs	r7, #1
 800b1ee:	e7ea      	b.n	800b1c6 <__mdiff+0xe2>
 800b1f0:	0800c470 	.word	0x0800c470
 800b1f4:	0800c560 	.word	0x0800c560

0800b1f8 <__ulp>:
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	ed8d 0b00 	vstr	d0, [sp]
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	4912      	ldr	r1, [pc, #72]	; (800b24c <__ulp+0x54>)
 800b202:	4019      	ands	r1, r3
 800b204:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b208:	2900      	cmp	r1, #0
 800b20a:	dd05      	ble.n	800b218 <__ulp+0x20>
 800b20c:	2200      	movs	r2, #0
 800b20e:	460b      	mov	r3, r1
 800b210:	ec43 2b10 	vmov	d0, r2, r3
 800b214:	b002      	add	sp, #8
 800b216:	4770      	bx	lr
 800b218:	4249      	negs	r1, r1
 800b21a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b21e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	da04      	bge.n	800b236 <__ulp+0x3e>
 800b22c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b230:	fa41 f300 	asr.w	r3, r1, r0
 800b234:	e7ec      	b.n	800b210 <__ulp+0x18>
 800b236:	f1a0 0114 	sub.w	r1, r0, #20
 800b23a:	291e      	cmp	r1, #30
 800b23c:	bfda      	itte	le
 800b23e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b242:	fa20 f101 	lsrle.w	r1, r0, r1
 800b246:	2101      	movgt	r1, #1
 800b248:	460a      	mov	r2, r1
 800b24a:	e7e1      	b.n	800b210 <__ulp+0x18>
 800b24c:	7ff00000 	.word	0x7ff00000

0800b250 <__b2d>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	6905      	ldr	r5, [r0, #16]
 800b254:	f100 0714 	add.w	r7, r0, #20
 800b258:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b25c:	1f2e      	subs	r6, r5, #4
 800b25e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b262:	4620      	mov	r0, r4
 800b264:	f7ff fd48 	bl	800acf8 <__hi0bits>
 800b268:	f1c0 0320 	rsb	r3, r0, #32
 800b26c:	280a      	cmp	r0, #10
 800b26e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2ec <__b2d+0x9c>
 800b272:	600b      	str	r3, [r1, #0]
 800b274:	dc14      	bgt.n	800b2a0 <__b2d+0x50>
 800b276:	f1c0 0e0b 	rsb	lr, r0, #11
 800b27a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b27e:	42b7      	cmp	r7, r6
 800b280:	ea41 030c 	orr.w	r3, r1, ip
 800b284:	bf34      	ite	cc
 800b286:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b28a:	2100      	movcs	r1, #0
 800b28c:	3015      	adds	r0, #21
 800b28e:	fa04 f000 	lsl.w	r0, r4, r0
 800b292:	fa21 f10e 	lsr.w	r1, r1, lr
 800b296:	ea40 0201 	orr.w	r2, r0, r1
 800b29a:	ec43 2b10 	vmov	d0, r2, r3
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a0:	42b7      	cmp	r7, r6
 800b2a2:	bf3a      	itte	cc
 800b2a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2ac:	2100      	movcs	r1, #0
 800b2ae:	380b      	subs	r0, #11
 800b2b0:	d017      	beq.n	800b2e2 <__b2d+0x92>
 800b2b2:	f1c0 0c20 	rsb	ip, r0, #32
 800b2b6:	fa04 f500 	lsl.w	r5, r4, r0
 800b2ba:	42be      	cmp	r6, r7
 800b2bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2c0:	ea45 0504 	orr.w	r5, r5, r4
 800b2c4:	bf8c      	ite	hi
 800b2c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2ca:	2400      	movls	r4, #0
 800b2cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2d0:	fa01 f000 	lsl.w	r0, r1, r0
 800b2d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2dc:	ea40 0204 	orr.w	r2, r0, r4
 800b2e0:	e7db      	b.n	800b29a <__b2d+0x4a>
 800b2e2:	ea44 030c 	orr.w	r3, r4, ip
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	e7d7      	b.n	800b29a <__b2d+0x4a>
 800b2ea:	bf00      	nop
 800b2ec:	3ff00000 	.word	0x3ff00000

0800b2f0 <__d2b>:
 800b2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	4689      	mov	r9, r1
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	ec57 6b10 	vmov	r6, r7, d0
 800b2fc:	4690      	mov	r8, r2
 800b2fe:	f7ff fc09 	bl	800ab14 <_Balloc>
 800b302:	4604      	mov	r4, r0
 800b304:	b930      	cbnz	r0, 800b314 <__d2b+0x24>
 800b306:	4602      	mov	r2, r0
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <__d2b+0xb0>)
 800b30a:	4826      	ldr	r0, [pc, #152]	; (800b3a4 <__d2b+0xb4>)
 800b30c:	f240 310a 	movw	r1, #778	; 0x30a
 800b310:	f000 fcfc 	bl	800bd0c <__assert_func>
 800b314:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b31c:	bb35      	cbnz	r5, 800b36c <__d2b+0x7c>
 800b31e:	2e00      	cmp	r6, #0
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	d028      	beq.n	800b376 <__d2b+0x86>
 800b324:	4668      	mov	r0, sp
 800b326:	9600      	str	r6, [sp, #0]
 800b328:	f7ff fd06 	bl	800ad38 <__lo0bits>
 800b32c:	9900      	ldr	r1, [sp, #0]
 800b32e:	b300      	cbz	r0, 800b372 <__d2b+0x82>
 800b330:	9a01      	ldr	r2, [sp, #4]
 800b332:	f1c0 0320 	rsb	r3, r0, #32
 800b336:	fa02 f303 	lsl.w	r3, r2, r3
 800b33a:	430b      	orrs	r3, r1
 800b33c:	40c2      	lsrs	r2, r0
 800b33e:	6163      	str	r3, [r4, #20]
 800b340:	9201      	str	r2, [sp, #4]
 800b342:	9b01      	ldr	r3, [sp, #4]
 800b344:	61a3      	str	r3, [r4, #24]
 800b346:	2b00      	cmp	r3, #0
 800b348:	bf14      	ite	ne
 800b34a:	2202      	movne	r2, #2
 800b34c:	2201      	moveq	r2, #1
 800b34e:	6122      	str	r2, [r4, #16]
 800b350:	b1d5      	cbz	r5, 800b388 <__d2b+0x98>
 800b352:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b356:	4405      	add	r5, r0
 800b358:	f8c9 5000 	str.w	r5, [r9]
 800b35c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b360:	f8c8 0000 	str.w	r0, [r8]
 800b364:	4620      	mov	r0, r4
 800b366:	b003      	add	sp, #12
 800b368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b36c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b370:	e7d5      	b.n	800b31e <__d2b+0x2e>
 800b372:	6161      	str	r1, [r4, #20]
 800b374:	e7e5      	b.n	800b342 <__d2b+0x52>
 800b376:	a801      	add	r0, sp, #4
 800b378:	f7ff fcde 	bl	800ad38 <__lo0bits>
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	6163      	str	r3, [r4, #20]
 800b380:	2201      	movs	r2, #1
 800b382:	6122      	str	r2, [r4, #16]
 800b384:	3020      	adds	r0, #32
 800b386:	e7e3      	b.n	800b350 <__d2b+0x60>
 800b388:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b38c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b390:	f8c9 0000 	str.w	r0, [r9]
 800b394:	6918      	ldr	r0, [r3, #16]
 800b396:	f7ff fcaf 	bl	800acf8 <__hi0bits>
 800b39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b39e:	e7df      	b.n	800b360 <__d2b+0x70>
 800b3a0:	0800c470 	.word	0x0800c470
 800b3a4:	0800c560 	.word	0x0800c560

0800b3a8 <__ratio>:
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4688      	mov	r8, r1
 800b3ae:	4669      	mov	r1, sp
 800b3b0:	4681      	mov	r9, r0
 800b3b2:	f7ff ff4d 	bl	800b250 <__b2d>
 800b3b6:	a901      	add	r1, sp, #4
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	ec55 4b10 	vmov	r4, r5, d0
 800b3be:	f7ff ff47 	bl	800b250 <__b2d>
 800b3c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3ca:	eba3 0c02 	sub.w	ip, r3, r2
 800b3ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3d8:	ec51 0b10 	vmov	r0, r1, d0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bfd6      	itet	le
 800b3e0:	460a      	movle	r2, r1
 800b3e2:	462a      	movgt	r2, r5
 800b3e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3e8:	468b      	mov	fp, r1
 800b3ea:	462f      	mov	r7, r5
 800b3ec:	bfd4      	ite	le
 800b3ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	ee10 2a10 	vmov	r2, s0
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 f9fc 	bl	80007fc <__aeabi_ddiv>
 800b404:	ec41 0b10 	vmov	d0, r0, r1
 800b408:	b003      	add	sp, #12
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b40e <__copybits>:
 800b40e:	3901      	subs	r1, #1
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	1149      	asrs	r1, r1, #5
 800b414:	6914      	ldr	r4, [r2, #16]
 800b416:	3101      	adds	r1, #1
 800b418:	f102 0314 	add.w	r3, r2, #20
 800b41c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b424:	1f05      	subs	r5, r0, #4
 800b426:	42a3      	cmp	r3, r4
 800b428:	d30c      	bcc.n	800b444 <__copybits+0x36>
 800b42a:	1aa3      	subs	r3, r4, r2
 800b42c:	3b11      	subs	r3, #17
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	3211      	adds	r2, #17
 800b434:	42a2      	cmp	r2, r4
 800b436:	bf88      	it	hi
 800b438:	2300      	movhi	r3, #0
 800b43a:	4418      	add	r0, r3
 800b43c:	2300      	movs	r3, #0
 800b43e:	4288      	cmp	r0, r1
 800b440:	d305      	bcc.n	800b44e <__copybits+0x40>
 800b442:	bd70      	pop	{r4, r5, r6, pc}
 800b444:	f853 6b04 	ldr.w	r6, [r3], #4
 800b448:	f845 6f04 	str.w	r6, [r5, #4]!
 800b44c:	e7eb      	b.n	800b426 <__copybits+0x18>
 800b44e:	f840 3b04 	str.w	r3, [r0], #4
 800b452:	e7f4      	b.n	800b43e <__copybits+0x30>

0800b454 <__any_on>:
 800b454:	f100 0214 	add.w	r2, r0, #20
 800b458:	6900      	ldr	r0, [r0, #16]
 800b45a:	114b      	asrs	r3, r1, #5
 800b45c:	4298      	cmp	r0, r3
 800b45e:	b510      	push	{r4, lr}
 800b460:	db11      	blt.n	800b486 <__any_on+0x32>
 800b462:	dd0a      	ble.n	800b47a <__any_on+0x26>
 800b464:	f011 011f 	ands.w	r1, r1, #31
 800b468:	d007      	beq.n	800b47a <__any_on+0x26>
 800b46a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b46e:	fa24 f001 	lsr.w	r0, r4, r1
 800b472:	fa00 f101 	lsl.w	r1, r0, r1
 800b476:	428c      	cmp	r4, r1
 800b478:	d10b      	bne.n	800b492 <__any_on+0x3e>
 800b47a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b47e:	4293      	cmp	r3, r2
 800b480:	d803      	bhi.n	800b48a <__any_on+0x36>
 800b482:	2000      	movs	r0, #0
 800b484:	bd10      	pop	{r4, pc}
 800b486:	4603      	mov	r3, r0
 800b488:	e7f7      	b.n	800b47a <__any_on+0x26>
 800b48a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b48e:	2900      	cmp	r1, #0
 800b490:	d0f5      	beq.n	800b47e <__any_on+0x2a>
 800b492:	2001      	movs	r0, #1
 800b494:	e7f6      	b.n	800b484 <__any_on+0x30>

0800b496 <_calloc_r>:
 800b496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b498:	fba1 2402 	umull	r2, r4, r1, r2
 800b49c:	b94c      	cbnz	r4, 800b4b2 <_calloc_r+0x1c>
 800b49e:	4611      	mov	r1, r2
 800b4a0:	9201      	str	r2, [sp, #4]
 800b4a2:	f000 f87b 	bl	800b59c <_malloc_r>
 800b4a6:	9a01      	ldr	r2, [sp, #4]
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	b930      	cbnz	r0, 800b4ba <_calloc_r+0x24>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	b003      	add	sp, #12
 800b4b0:	bd30      	pop	{r4, r5, pc}
 800b4b2:	220c      	movs	r2, #12
 800b4b4:	6002      	str	r2, [r0, #0]
 800b4b6:	2500      	movs	r5, #0
 800b4b8:	e7f8      	b.n	800b4ac <_calloc_r+0x16>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f7fc f860 	bl	8007580 <memset>
 800b4c0:	e7f4      	b.n	800b4ac <_calloc_r+0x16>
	...

0800b4c4 <_free_r>:
 800b4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d044      	beq.n	800b554 <_free_r+0x90>
 800b4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ce:	9001      	str	r0, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4d6:	bfb8      	it	lt
 800b4d8:	18e4      	addlt	r4, r4, r3
 800b4da:	f000 fca5 	bl	800be28 <__malloc_lock>
 800b4de:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <_free_r+0x94>)
 800b4e0:	9801      	ldr	r0, [sp, #4]
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	b933      	cbnz	r3, 800b4f4 <_free_r+0x30>
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	b003      	add	sp, #12
 800b4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f0:	f000 bca0 	b.w	800be34 <__malloc_unlock>
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	d908      	bls.n	800b50a <_free_r+0x46>
 800b4f8:	6825      	ldr	r5, [r4, #0]
 800b4fa:	1961      	adds	r1, r4, r5
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf01      	itttt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	1949      	addeq	r1, r1, r5
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	e7ed      	b.n	800b4e6 <_free_r+0x22>
 800b50a:	461a      	mov	r2, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b10b      	cbz	r3, 800b514 <_free_r+0x50>
 800b510:	42a3      	cmp	r3, r4
 800b512:	d9fa      	bls.n	800b50a <_free_r+0x46>
 800b514:	6811      	ldr	r1, [r2, #0]
 800b516:	1855      	adds	r5, r2, r1
 800b518:	42a5      	cmp	r5, r4
 800b51a:	d10b      	bne.n	800b534 <_free_r+0x70>
 800b51c:	6824      	ldr	r4, [r4, #0]
 800b51e:	4421      	add	r1, r4
 800b520:	1854      	adds	r4, r2, r1
 800b522:	42a3      	cmp	r3, r4
 800b524:	6011      	str	r1, [r2, #0]
 800b526:	d1e0      	bne.n	800b4ea <_free_r+0x26>
 800b528:	681c      	ldr	r4, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	6053      	str	r3, [r2, #4]
 800b52e:	4421      	add	r1, r4
 800b530:	6011      	str	r1, [r2, #0]
 800b532:	e7da      	b.n	800b4ea <_free_r+0x26>
 800b534:	d902      	bls.n	800b53c <_free_r+0x78>
 800b536:	230c      	movs	r3, #12
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	e7d6      	b.n	800b4ea <_free_r+0x26>
 800b53c:	6825      	ldr	r5, [r4, #0]
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	428b      	cmp	r3, r1
 800b542:	bf04      	itt	eq
 800b544:	6819      	ldreq	r1, [r3, #0]
 800b546:	685b      	ldreq	r3, [r3, #4]
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	bf04      	itt	eq
 800b54c:	1949      	addeq	r1, r1, r5
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	6054      	str	r4, [r2, #4]
 800b552:	e7ca      	b.n	800b4ea <_free_r+0x26>
 800b554:	b003      	add	sp, #12
 800b556:	bd30      	pop	{r4, r5, pc}
 800b558:	200004f4 	.word	0x200004f4

0800b55c <sbrk_aligned>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4e0e      	ldr	r6, [pc, #56]	; (800b598 <sbrk_aligned+0x3c>)
 800b560:	460c      	mov	r4, r1
 800b562:	6831      	ldr	r1, [r6, #0]
 800b564:	4605      	mov	r5, r0
 800b566:	b911      	cbnz	r1, 800b56e <sbrk_aligned+0x12>
 800b568:	f000 fb4a 	bl	800bc00 <_sbrk_r>
 800b56c:	6030      	str	r0, [r6, #0]
 800b56e:	4621      	mov	r1, r4
 800b570:	4628      	mov	r0, r5
 800b572:	f000 fb45 	bl	800bc00 <_sbrk_r>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d00a      	beq.n	800b590 <sbrk_aligned+0x34>
 800b57a:	1cc4      	adds	r4, r0, #3
 800b57c:	f024 0403 	bic.w	r4, r4, #3
 800b580:	42a0      	cmp	r0, r4
 800b582:	d007      	beq.n	800b594 <sbrk_aligned+0x38>
 800b584:	1a21      	subs	r1, r4, r0
 800b586:	4628      	mov	r0, r5
 800b588:	f000 fb3a 	bl	800bc00 <_sbrk_r>
 800b58c:	3001      	adds	r0, #1
 800b58e:	d101      	bne.n	800b594 <sbrk_aligned+0x38>
 800b590:	f04f 34ff 	mov.w	r4, #4294967295
 800b594:	4620      	mov	r0, r4
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	200004f8 	.word	0x200004f8

0800b59c <_malloc_r>:
 800b59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a0:	1ccd      	adds	r5, r1, #3
 800b5a2:	f025 0503 	bic.w	r5, r5, #3
 800b5a6:	3508      	adds	r5, #8
 800b5a8:	2d0c      	cmp	r5, #12
 800b5aa:	bf38      	it	cc
 800b5ac:	250c      	movcc	r5, #12
 800b5ae:	2d00      	cmp	r5, #0
 800b5b0:	4607      	mov	r7, r0
 800b5b2:	db01      	blt.n	800b5b8 <_malloc_r+0x1c>
 800b5b4:	42a9      	cmp	r1, r5
 800b5b6:	d905      	bls.n	800b5c4 <_malloc_r+0x28>
 800b5b8:	230c      	movs	r3, #12
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	2600      	movs	r6, #0
 800b5be:	4630      	mov	r0, r6
 800b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c4:	4e2e      	ldr	r6, [pc, #184]	; (800b680 <_malloc_r+0xe4>)
 800b5c6:	f000 fc2f 	bl	800be28 <__malloc_lock>
 800b5ca:	6833      	ldr	r3, [r6, #0]
 800b5cc:	461c      	mov	r4, r3
 800b5ce:	bb34      	cbnz	r4, 800b61e <_malloc_r+0x82>
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7ff ffc2 	bl	800b55c <sbrk_aligned>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	4604      	mov	r4, r0
 800b5dc:	d14d      	bne.n	800b67a <_malloc_r+0xde>
 800b5de:	6834      	ldr	r4, [r6, #0]
 800b5e0:	4626      	mov	r6, r4
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d140      	bne.n	800b668 <_malloc_r+0xcc>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	eb04 0803 	add.w	r8, r4, r3
 800b5f0:	f000 fb06 	bl	800bc00 <_sbrk_r>
 800b5f4:	4580      	cmp	r8, r0
 800b5f6:	d13a      	bne.n	800b66e <_malloc_r+0xd2>
 800b5f8:	6821      	ldr	r1, [r4, #0]
 800b5fa:	3503      	adds	r5, #3
 800b5fc:	1a6d      	subs	r5, r5, r1
 800b5fe:	f025 0503 	bic.w	r5, r5, #3
 800b602:	3508      	adds	r5, #8
 800b604:	2d0c      	cmp	r5, #12
 800b606:	bf38      	it	cc
 800b608:	250c      	movcc	r5, #12
 800b60a:	4629      	mov	r1, r5
 800b60c:	4638      	mov	r0, r7
 800b60e:	f7ff ffa5 	bl	800b55c <sbrk_aligned>
 800b612:	3001      	adds	r0, #1
 800b614:	d02b      	beq.n	800b66e <_malloc_r+0xd2>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	442b      	add	r3, r5
 800b61a:	6023      	str	r3, [r4, #0]
 800b61c:	e00e      	b.n	800b63c <_malloc_r+0xa0>
 800b61e:	6822      	ldr	r2, [r4, #0]
 800b620:	1b52      	subs	r2, r2, r5
 800b622:	d41e      	bmi.n	800b662 <_malloc_r+0xc6>
 800b624:	2a0b      	cmp	r2, #11
 800b626:	d916      	bls.n	800b656 <_malloc_r+0xba>
 800b628:	1961      	adds	r1, r4, r5
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	6025      	str	r5, [r4, #0]
 800b62e:	bf18      	it	ne
 800b630:	6059      	strne	r1, [r3, #4]
 800b632:	6863      	ldr	r3, [r4, #4]
 800b634:	bf08      	it	eq
 800b636:	6031      	streq	r1, [r6, #0]
 800b638:	5162      	str	r2, [r4, r5]
 800b63a:	604b      	str	r3, [r1, #4]
 800b63c:	4638      	mov	r0, r7
 800b63e:	f104 060b 	add.w	r6, r4, #11
 800b642:	f000 fbf7 	bl	800be34 <__malloc_unlock>
 800b646:	f026 0607 	bic.w	r6, r6, #7
 800b64a:	1d23      	adds	r3, r4, #4
 800b64c:	1af2      	subs	r2, r6, r3
 800b64e:	d0b6      	beq.n	800b5be <_malloc_r+0x22>
 800b650:	1b9b      	subs	r3, r3, r6
 800b652:	50a3      	str	r3, [r4, r2]
 800b654:	e7b3      	b.n	800b5be <_malloc_r+0x22>
 800b656:	6862      	ldr	r2, [r4, #4]
 800b658:	42a3      	cmp	r3, r4
 800b65a:	bf0c      	ite	eq
 800b65c:	6032      	streq	r2, [r6, #0]
 800b65e:	605a      	strne	r2, [r3, #4]
 800b660:	e7ec      	b.n	800b63c <_malloc_r+0xa0>
 800b662:	4623      	mov	r3, r4
 800b664:	6864      	ldr	r4, [r4, #4]
 800b666:	e7b2      	b.n	800b5ce <_malloc_r+0x32>
 800b668:	4634      	mov	r4, r6
 800b66a:	6876      	ldr	r6, [r6, #4]
 800b66c:	e7b9      	b.n	800b5e2 <_malloc_r+0x46>
 800b66e:	230c      	movs	r3, #12
 800b670:	603b      	str	r3, [r7, #0]
 800b672:	4638      	mov	r0, r7
 800b674:	f000 fbde 	bl	800be34 <__malloc_unlock>
 800b678:	e7a1      	b.n	800b5be <_malloc_r+0x22>
 800b67a:	6025      	str	r5, [r4, #0]
 800b67c:	e7de      	b.n	800b63c <_malloc_r+0xa0>
 800b67e:	bf00      	nop
 800b680:	200004f4 	.word	0x200004f4

0800b684 <__ssputs_r>:
 800b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b688:	688e      	ldr	r6, [r1, #8]
 800b68a:	429e      	cmp	r6, r3
 800b68c:	4682      	mov	sl, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	4690      	mov	r8, r2
 800b692:	461f      	mov	r7, r3
 800b694:	d838      	bhi.n	800b708 <__ssputs_r+0x84>
 800b696:	898a      	ldrh	r2, [r1, #12]
 800b698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b69c:	d032      	beq.n	800b704 <__ssputs_r+0x80>
 800b69e:	6825      	ldr	r5, [r4, #0]
 800b6a0:	6909      	ldr	r1, [r1, #16]
 800b6a2:	eba5 0901 	sub.w	r9, r5, r1
 800b6a6:	6965      	ldr	r5, [r4, #20]
 800b6a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	444b      	add	r3, r9
 800b6b4:	106d      	asrs	r5, r5, #1
 800b6b6:	429d      	cmp	r5, r3
 800b6b8:	bf38      	it	cc
 800b6ba:	461d      	movcc	r5, r3
 800b6bc:	0553      	lsls	r3, r2, #21
 800b6be:	d531      	bpl.n	800b724 <__ssputs_r+0xa0>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7ff ff6b 	bl	800b59c <_malloc_r>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	b950      	cbnz	r0, 800b6e0 <__ssputs_r+0x5c>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	f8ca 3000 	str.w	r3, [sl]
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e0:	6921      	ldr	r1, [r4, #16]
 800b6e2:	464a      	mov	r2, r9
 800b6e4:	f7fb ff3e 	bl	8007564 <memcpy>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	6126      	str	r6, [r4, #16]
 800b6f6:	6165      	str	r5, [r4, #20]
 800b6f8:	444e      	add	r6, r9
 800b6fa:	eba5 0509 	sub.w	r5, r5, r9
 800b6fe:	6026      	str	r6, [r4, #0]
 800b700:	60a5      	str	r5, [r4, #8]
 800b702:	463e      	mov	r6, r7
 800b704:	42be      	cmp	r6, r7
 800b706:	d900      	bls.n	800b70a <__ssputs_r+0x86>
 800b708:	463e      	mov	r6, r7
 800b70a:	6820      	ldr	r0, [r4, #0]
 800b70c:	4632      	mov	r2, r6
 800b70e:	4641      	mov	r1, r8
 800b710:	f000 fb70 	bl	800bdf4 <memmove>
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	1b9b      	subs	r3, r3, r6
 800b718:	60a3      	str	r3, [r4, #8]
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	4433      	add	r3, r6
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	2000      	movs	r0, #0
 800b722:	e7db      	b.n	800b6dc <__ssputs_r+0x58>
 800b724:	462a      	mov	r2, r5
 800b726:	f000 fb8b 	bl	800be40 <_realloc_r>
 800b72a:	4606      	mov	r6, r0
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d1e1      	bne.n	800b6f4 <__ssputs_r+0x70>
 800b730:	6921      	ldr	r1, [r4, #16]
 800b732:	4650      	mov	r0, sl
 800b734:	f7ff fec6 	bl	800b4c4 <_free_r>
 800b738:	e7c7      	b.n	800b6ca <__ssputs_r+0x46>
	...

0800b73c <_svfiprintf_r>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	4698      	mov	r8, r3
 800b742:	898b      	ldrh	r3, [r1, #12]
 800b744:	061b      	lsls	r3, r3, #24
 800b746:	b09d      	sub	sp, #116	; 0x74
 800b748:	4607      	mov	r7, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	4614      	mov	r4, r2
 800b74e:	d50e      	bpl.n	800b76e <_svfiprintf_r+0x32>
 800b750:	690b      	ldr	r3, [r1, #16]
 800b752:	b963      	cbnz	r3, 800b76e <_svfiprintf_r+0x32>
 800b754:	2140      	movs	r1, #64	; 0x40
 800b756:	f7ff ff21 	bl	800b59c <_malloc_r>
 800b75a:	6028      	str	r0, [r5, #0]
 800b75c:	6128      	str	r0, [r5, #16]
 800b75e:	b920      	cbnz	r0, 800b76a <_svfiprintf_r+0x2e>
 800b760:	230c      	movs	r3, #12
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	e0d1      	b.n	800b90e <_svfiprintf_r+0x1d2>
 800b76a:	2340      	movs	r3, #64	; 0x40
 800b76c:	616b      	str	r3, [r5, #20]
 800b76e:	2300      	movs	r3, #0
 800b770:	9309      	str	r3, [sp, #36]	; 0x24
 800b772:	2320      	movs	r3, #32
 800b774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b778:	f8cd 800c 	str.w	r8, [sp, #12]
 800b77c:	2330      	movs	r3, #48	; 0x30
 800b77e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b928 <_svfiprintf_r+0x1ec>
 800b782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b786:	f04f 0901 	mov.w	r9, #1
 800b78a:	4623      	mov	r3, r4
 800b78c:	469a      	mov	sl, r3
 800b78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b792:	b10a      	cbz	r2, 800b798 <_svfiprintf_r+0x5c>
 800b794:	2a25      	cmp	r2, #37	; 0x25
 800b796:	d1f9      	bne.n	800b78c <_svfiprintf_r+0x50>
 800b798:	ebba 0b04 	subs.w	fp, sl, r4
 800b79c:	d00b      	beq.n	800b7b6 <_svfiprintf_r+0x7a>
 800b79e:	465b      	mov	r3, fp
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f7ff ff6d 	bl	800b684 <__ssputs_r>
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	f000 80aa 	beq.w	800b904 <_svfiprintf_r+0x1c8>
 800b7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b2:	445a      	add	r2, fp
 800b7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 80a2 	beq.w	800b904 <_svfiprintf_r+0x1c8>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ca:	f10a 0a01 	add.w	sl, sl, #1
 800b7ce:	9304      	str	r3, [sp, #16]
 800b7d0:	9307      	str	r3, [sp, #28]
 800b7d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d8:	4654      	mov	r4, sl
 800b7da:	2205      	movs	r2, #5
 800b7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e0:	4851      	ldr	r0, [pc, #324]	; (800b928 <_svfiprintf_r+0x1ec>)
 800b7e2:	f7f4 fcd5 	bl	8000190 <memchr>
 800b7e6:	9a04      	ldr	r2, [sp, #16]
 800b7e8:	b9d8      	cbnz	r0, 800b822 <_svfiprintf_r+0xe6>
 800b7ea:	06d0      	lsls	r0, r2, #27
 800b7ec:	bf44      	itt	mi
 800b7ee:	2320      	movmi	r3, #32
 800b7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f4:	0711      	lsls	r1, r2, #28
 800b7f6:	bf44      	itt	mi
 800b7f8:	232b      	movmi	r3, #43	; 0x2b
 800b7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b802:	2b2a      	cmp	r3, #42	; 0x2a
 800b804:	d015      	beq.n	800b832 <_svfiprintf_r+0xf6>
 800b806:	9a07      	ldr	r2, [sp, #28]
 800b808:	4654      	mov	r4, sl
 800b80a:	2000      	movs	r0, #0
 800b80c:	f04f 0c0a 	mov.w	ip, #10
 800b810:	4621      	mov	r1, r4
 800b812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b816:	3b30      	subs	r3, #48	; 0x30
 800b818:	2b09      	cmp	r3, #9
 800b81a:	d94e      	bls.n	800b8ba <_svfiprintf_r+0x17e>
 800b81c:	b1b0      	cbz	r0, 800b84c <_svfiprintf_r+0x110>
 800b81e:	9207      	str	r2, [sp, #28]
 800b820:	e014      	b.n	800b84c <_svfiprintf_r+0x110>
 800b822:	eba0 0308 	sub.w	r3, r0, r8
 800b826:	fa09 f303 	lsl.w	r3, r9, r3
 800b82a:	4313      	orrs	r3, r2
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	46a2      	mov	sl, r4
 800b830:	e7d2      	b.n	800b7d8 <_svfiprintf_r+0x9c>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	1d19      	adds	r1, r3, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	9103      	str	r1, [sp, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bfbb      	ittet	lt
 800b83e:	425b      	neglt	r3, r3
 800b840:	f042 0202 	orrlt.w	r2, r2, #2
 800b844:	9307      	strge	r3, [sp, #28]
 800b846:	9307      	strlt	r3, [sp, #28]
 800b848:	bfb8      	it	lt
 800b84a:	9204      	strlt	r2, [sp, #16]
 800b84c:	7823      	ldrb	r3, [r4, #0]
 800b84e:	2b2e      	cmp	r3, #46	; 0x2e
 800b850:	d10c      	bne.n	800b86c <_svfiprintf_r+0x130>
 800b852:	7863      	ldrb	r3, [r4, #1]
 800b854:	2b2a      	cmp	r3, #42	; 0x2a
 800b856:	d135      	bne.n	800b8c4 <_svfiprintf_r+0x188>
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	1d1a      	adds	r2, r3, #4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	9203      	str	r2, [sp, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	bfb8      	it	lt
 800b864:	f04f 33ff 	movlt.w	r3, #4294967295
 800b868:	3402      	adds	r4, #2
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b938 <_svfiprintf_r+0x1fc>
 800b870:	7821      	ldrb	r1, [r4, #0]
 800b872:	2203      	movs	r2, #3
 800b874:	4650      	mov	r0, sl
 800b876:	f7f4 fc8b 	bl	8000190 <memchr>
 800b87a:	b140      	cbz	r0, 800b88e <_svfiprintf_r+0x152>
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	eba0 000a 	sub.w	r0, r0, sl
 800b882:	fa03 f000 	lsl.w	r0, r3, r0
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	4303      	orrs	r3, r0
 800b88a:	3401      	adds	r4, #1
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b892:	4826      	ldr	r0, [pc, #152]	; (800b92c <_svfiprintf_r+0x1f0>)
 800b894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b898:	2206      	movs	r2, #6
 800b89a:	f7f4 fc79 	bl	8000190 <memchr>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d038      	beq.n	800b914 <_svfiprintf_r+0x1d8>
 800b8a2:	4b23      	ldr	r3, [pc, #140]	; (800b930 <_svfiprintf_r+0x1f4>)
 800b8a4:	bb1b      	cbnz	r3, 800b8ee <_svfiprintf_r+0x1b2>
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	3307      	adds	r3, #7
 800b8aa:	f023 0307 	bic.w	r3, r3, #7
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b4:	4433      	add	r3, r6
 800b8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b8:	e767      	b.n	800b78a <_svfiprintf_r+0x4e>
 800b8ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8be:	460c      	mov	r4, r1
 800b8c0:	2001      	movs	r0, #1
 800b8c2:	e7a5      	b.n	800b810 <_svfiprintf_r+0xd4>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	3401      	adds	r4, #1
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	f04f 0c0a 	mov.w	ip, #10
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d6:	3a30      	subs	r2, #48	; 0x30
 800b8d8:	2a09      	cmp	r2, #9
 800b8da:	d903      	bls.n	800b8e4 <_svfiprintf_r+0x1a8>
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d0c5      	beq.n	800b86c <_svfiprintf_r+0x130>
 800b8e0:	9105      	str	r1, [sp, #20]
 800b8e2:	e7c3      	b.n	800b86c <_svfiprintf_r+0x130>
 800b8e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e7f0      	b.n	800b8d0 <_svfiprintf_r+0x194>
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <_svfiprintf_r+0x1f8>)
 800b8f6:	a904      	add	r1, sp, #16
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7fb fee9 	bl	80076d0 <_printf_float>
 800b8fe:	1c42      	adds	r2, r0, #1
 800b900:	4606      	mov	r6, r0
 800b902:	d1d6      	bne.n	800b8b2 <_svfiprintf_r+0x176>
 800b904:	89ab      	ldrh	r3, [r5, #12]
 800b906:	065b      	lsls	r3, r3, #25
 800b908:	f53f af2c 	bmi.w	800b764 <_svfiprintf_r+0x28>
 800b90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b90e:	b01d      	add	sp, #116	; 0x74
 800b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b914:	ab03      	add	r3, sp, #12
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	462a      	mov	r2, r5
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <_svfiprintf_r+0x1f8>)
 800b91c:	a904      	add	r1, sp, #16
 800b91e:	4638      	mov	r0, r7
 800b920:	f7fc f97a 	bl	8007c18 <_printf_i>
 800b924:	e7eb      	b.n	800b8fe <_svfiprintf_r+0x1c2>
 800b926:	bf00      	nop
 800b928:	0800c6bc 	.word	0x0800c6bc
 800b92c:	0800c6c6 	.word	0x0800c6c6
 800b930:	080076d1 	.word	0x080076d1
 800b934:	0800b685 	.word	0x0800b685
 800b938:	0800c6c2 	.word	0x0800c6c2

0800b93c <__sfputc_r>:
 800b93c:	6893      	ldr	r3, [r2, #8]
 800b93e:	3b01      	subs	r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	b410      	push	{r4}
 800b944:	6093      	str	r3, [r2, #8]
 800b946:	da08      	bge.n	800b95a <__sfputc_r+0x1e>
 800b948:	6994      	ldr	r4, [r2, #24]
 800b94a:	42a3      	cmp	r3, r4
 800b94c:	db01      	blt.n	800b952 <__sfputc_r+0x16>
 800b94e:	290a      	cmp	r1, #10
 800b950:	d103      	bne.n	800b95a <__sfputc_r+0x1e>
 800b952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b956:	f7fd bbf7 	b.w	8009148 <__swbuf_r>
 800b95a:	6813      	ldr	r3, [r2, #0]
 800b95c:	1c58      	adds	r0, r3, #1
 800b95e:	6010      	str	r0, [r2, #0]
 800b960:	7019      	strb	r1, [r3, #0]
 800b962:	4608      	mov	r0, r1
 800b964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <__sfputs_r>:
 800b96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96c:	4606      	mov	r6, r0
 800b96e:	460f      	mov	r7, r1
 800b970:	4614      	mov	r4, r2
 800b972:	18d5      	adds	r5, r2, r3
 800b974:	42ac      	cmp	r4, r5
 800b976:	d101      	bne.n	800b97c <__sfputs_r+0x12>
 800b978:	2000      	movs	r0, #0
 800b97a:	e007      	b.n	800b98c <__sfputs_r+0x22>
 800b97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b980:	463a      	mov	r2, r7
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff ffda 	bl	800b93c <__sfputc_r>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d1f3      	bne.n	800b974 <__sfputs_r+0xa>
 800b98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b990 <_vfiprintf_r>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	460d      	mov	r5, r1
 800b996:	b09d      	sub	sp, #116	; 0x74
 800b998:	4614      	mov	r4, r2
 800b99a:	4698      	mov	r8, r3
 800b99c:	4606      	mov	r6, r0
 800b99e:	b118      	cbz	r0, 800b9a8 <_vfiprintf_r+0x18>
 800b9a0:	6983      	ldr	r3, [r0, #24]
 800b9a2:	b90b      	cbnz	r3, 800b9a8 <_vfiprintf_r+0x18>
 800b9a4:	f7fe fc24 	bl	800a1f0 <__sinit>
 800b9a8:	4b89      	ldr	r3, [pc, #548]	; (800bbd0 <_vfiprintf_r+0x240>)
 800b9aa:	429d      	cmp	r5, r3
 800b9ac:	d11b      	bne.n	800b9e6 <_vfiprintf_r+0x56>
 800b9ae:	6875      	ldr	r5, [r6, #4]
 800b9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9b2:	07d9      	lsls	r1, r3, #31
 800b9b4:	d405      	bmi.n	800b9c2 <_vfiprintf_r+0x32>
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	059a      	lsls	r2, r3, #22
 800b9ba:	d402      	bmi.n	800b9c2 <_vfiprintf_r+0x32>
 800b9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9be:	f7ff f828 	bl	800aa12 <__retarget_lock_acquire_recursive>
 800b9c2:	89ab      	ldrh	r3, [r5, #12]
 800b9c4:	071b      	lsls	r3, r3, #28
 800b9c6:	d501      	bpl.n	800b9cc <_vfiprintf_r+0x3c>
 800b9c8:	692b      	ldr	r3, [r5, #16]
 800b9ca:	b9eb      	cbnz	r3, 800ba08 <_vfiprintf_r+0x78>
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7fd fc0c 	bl	80091ec <__swsetup_r>
 800b9d4:	b1c0      	cbz	r0, 800ba08 <_vfiprintf_r+0x78>
 800b9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9d8:	07dc      	lsls	r4, r3, #31
 800b9da:	d50e      	bpl.n	800b9fa <_vfiprintf_r+0x6a>
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	b01d      	add	sp, #116	; 0x74
 800b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e6:	4b7b      	ldr	r3, [pc, #492]	; (800bbd4 <_vfiprintf_r+0x244>)
 800b9e8:	429d      	cmp	r5, r3
 800b9ea:	d101      	bne.n	800b9f0 <_vfiprintf_r+0x60>
 800b9ec:	68b5      	ldr	r5, [r6, #8]
 800b9ee:	e7df      	b.n	800b9b0 <_vfiprintf_r+0x20>
 800b9f0:	4b79      	ldr	r3, [pc, #484]	; (800bbd8 <_vfiprintf_r+0x248>)
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	bf08      	it	eq
 800b9f6:	68f5      	ldreq	r5, [r6, #12]
 800b9f8:	e7da      	b.n	800b9b0 <_vfiprintf_r+0x20>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	0598      	lsls	r0, r3, #22
 800b9fe:	d4ed      	bmi.n	800b9dc <_vfiprintf_r+0x4c>
 800ba00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba02:	f7ff f807 	bl	800aa14 <__retarget_lock_release_recursive>
 800ba06:	e7e9      	b.n	800b9dc <_vfiprintf_r+0x4c>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba16:	2330      	movs	r3, #48	; 0x30
 800ba18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbdc <_vfiprintf_r+0x24c>
 800ba1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba20:	f04f 0901 	mov.w	r9, #1
 800ba24:	4623      	mov	r3, r4
 800ba26:	469a      	mov	sl, r3
 800ba28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba2c:	b10a      	cbz	r2, 800ba32 <_vfiprintf_r+0xa2>
 800ba2e:	2a25      	cmp	r2, #37	; 0x25
 800ba30:	d1f9      	bne.n	800ba26 <_vfiprintf_r+0x96>
 800ba32:	ebba 0b04 	subs.w	fp, sl, r4
 800ba36:	d00b      	beq.n	800ba50 <_vfiprintf_r+0xc0>
 800ba38:	465b      	mov	r3, fp
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7ff ff93 	bl	800b96a <__sfputs_r>
 800ba44:	3001      	adds	r0, #1
 800ba46:	f000 80aa 	beq.w	800bb9e <_vfiprintf_r+0x20e>
 800ba4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba4c:	445a      	add	r2, fp
 800ba4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba50:	f89a 3000 	ldrb.w	r3, [sl]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80a2 	beq.w	800bb9e <_vfiprintf_r+0x20e>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba64:	f10a 0a01 	add.w	sl, sl, #1
 800ba68:	9304      	str	r3, [sp, #16]
 800ba6a:	9307      	str	r3, [sp, #28]
 800ba6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba70:	931a      	str	r3, [sp, #104]	; 0x68
 800ba72:	4654      	mov	r4, sl
 800ba74:	2205      	movs	r2, #5
 800ba76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba7a:	4858      	ldr	r0, [pc, #352]	; (800bbdc <_vfiprintf_r+0x24c>)
 800ba7c:	f7f4 fb88 	bl	8000190 <memchr>
 800ba80:	9a04      	ldr	r2, [sp, #16]
 800ba82:	b9d8      	cbnz	r0, 800babc <_vfiprintf_r+0x12c>
 800ba84:	06d1      	lsls	r1, r2, #27
 800ba86:	bf44      	itt	mi
 800ba88:	2320      	movmi	r3, #32
 800ba8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba8e:	0713      	lsls	r3, r2, #28
 800ba90:	bf44      	itt	mi
 800ba92:	232b      	movmi	r3, #43	; 0x2b
 800ba94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba98:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9e:	d015      	beq.n	800bacc <_vfiprintf_r+0x13c>
 800baa0:	9a07      	ldr	r2, [sp, #28]
 800baa2:	4654      	mov	r4, sl
 800baa4:	2000      	movs	r0, #0
 800baa6:	f04f 0c0a 	mov.w	ip, #10
 800baaa:	4621      	mov	r1, r4
 800baac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bab0:	3b30      	subs	r3, #48	; 0x30
 800bab2:	2b09      	cmp	r3, #9
 800bab4:	d94e      	bls.n	800bb54 <_vfiprintf_r+0x1c4>
 800bab6:	b1b0      	cbz	r0, 800bae6 <_vfiprintf_r+0x156>
 800bab8:	9207      	str	r2, [sp, #28]
 800baba:	e014      	b.n	800bae6 <_vfiprintf_r+0x156>
 800babc:	eba0 0308 	sub.w	r3, r0, r8
 800bac0:	fa09 f303 	lsl.w	r3, r9, r3
 800bac4:	4313      	orrs	r3, r2
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	46a2      	mov	sl, r4
 800baca:	e7d2      	b.n	800ba72 <_vfiprintf_r+0xe2>
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	1d19      	adds	r1, r3, #4
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	9103      	str	r1, [sp, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bfbb      	ittet	lt
 800bad8:	425b      	neglt	r3, r3
 800bada:	f042 0202 	orrlt.w	r2, r2, #2
 800bade:	9307      	strge	r3, [sp, #28]
 800bae0:	9307      	strlt	r3, [sp, #28]
 800bae2:	bfb8      	it	lt
 800bae4:	9204      	strlt	r2, [sp, #16]
 800bae6:	7823      	ldrb	r3, [r4, #0]
 800bae8:	2b2e      	cmp	r3, #46	; 0x2e
 800baea:	d10c      	bne.n	800bb06 <_vfiprintf_r+0x176>
 800baec:	7863      	ldrb	r3, [r4, #1]
 800baee:	2b2a      	cmp	r3, #42	; 0x2a
 800baf0:	d135      	bne.n	800bb5e <_vfiprintf_r+0x1ce>
 800baf2:	9b03      	ldr	r3, [sp, #12]
 800baf4:	1d1a      	adds	r2, r3, #4
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	9203      	str	r2, [sp, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	bfb8      	it	lt
 800bafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb02:	3402      	adds	r4, #2
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbec <_vfiprintf_r+0x25c>
 800bb0a:	7821      	ldrb	r1, [r4, #0]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	4650      	mov	r0, sl
 800bb10:	f7f4 fb3e 	bl	8000190 <memchr>
 800bb14:	b140      	cbz	r0, 800bb28 <_vfiprintf_r+0x198>
 800bb16:	2340      	movs	r3, #64	; 0x40
 800bb18:	eba0 000a 	sub.w	r0, r0, sl
 800bb1c:	fa03 f000 	lsl.w	r0, r3, r0
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	4303      	orrs	r3, r0
 800bb24:	3401      	adds	r4, #1
 800bb26:	9304      	str	r3, [sp, #16]
 800bb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2c:	482c      	ldr	r0, [pc, #176]	; (800bbe0 <_vfiprintf_r+0x250>)
 800bb2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb32:	2206      	movs	r2, #6
 800bb34:	f7f4 fb2c 	bl	8000190 <memchr>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d03f      	beq.n	800bbbc <_vfiprintf_r+0x22c>
 800bb3c:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <_vfiprintf_r+0x254>)
 800bb3e:	bb1b      	cbnz	r3, 800bb88 <_vfiprintf_r+0x1f8>
 800bb40:	9b03      	ldr	r3, [sp, #12]
 800bb42:	3307      	adds	r3, #7
 800bb44:	f023 0307 	bic.w	r3, r3, #7
 800bb48:	3308      	adds	r3, #8
 800bb4a:	9303      	str	r3, [sp, #12]
 800bb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4e:	443b      	add	r3, r7
 800bb50:	9309      	str	r3, [sp, #36]	; 0x24
 800bb52:	e767      	b.n	800ba24 <_vfiprintf_r+0x94>
 800bb54:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb58:	460c      	mov	r4, r1
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	e7a5      	b.n	800baaa <_vfiprintf_r+0x11a>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	3401      	adds	r4, #1
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	4619      	mov	r1, r3
 800bb66:	f04f 0c0a 	mov.w	ip, #10
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb70:	3a30      	subs	r2, #48	; 0x30
 800bb72:	2a09      	cmp	r2, #9
 800bb74:	d903      	bls.n	800bb7e <_vfiprintf_r+0x1ee>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0c5      	beq.n	800bb06 <_vfiprintf_r+0x176>
 800bb7a:	9105      	str	r1, [sp, #20]
 800bb7c:	e7c3      	b.n	800bb06 <_vfiprintf_r+0x176>
 800bb7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb82:	4604      	mov	r4, r0
 800bb84:	2301      	movs	r3, #1
 800bb86:	e7f0      	b.n	800bb6a <_vfiprintf_r+0x1da>
 800bb88:	ab03      	add	r3, sp, #12
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	462a      	mov	r2, r5
 800bb8e:	4b16      	ldr	r3, [pc, #88]	; (800bbe8 <_vfiprintf_r+0x258>)
 800bb90:	a904      	add	r1, sp, #16
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7fb fd9c 	bl	80076d0 <_printf_float>
 800bb98:	4607      	mov	r7, r0
 800bb9a:	1c78      	adds	r0, r7, #1
 800bb9c:	d1d6      	bne.n	800bb4c <_vfiprintf_r+0x1bc>
 800bb9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba0:	07d9      	lsls	r1, r3, #31
 800bba2:	d405      	bmi.n	800bbb0 <_vfiprintf_r+0x220>
 800bba4:	89ab      	ldrh	r3, [r5, #12]
 800bba6:	059a      	lsls	r2, r3, #22
 800bba8:	d402      	bmi.n	800bbb0 <_vfiprintf_r+0x220>
 800bbaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbac:	f7fe ff32 	bl	800aa14 <__retarget_lock_release_recursive>
 800bbb0:	89ab      	ldrh	r3, [r5, #12]
 800bbb2:	065b      	lsls	r3, r3, #25
 800bbb4:	f53f af12 	bmi.w	800b9dc <_vfiprintf_r+0x4c>
 800bbb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbba:	e711      	b.n	800b9e0 <_vfiprintf_r+0x50>
 800bbbc:	ab03      	add	r3, sp, #12
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	462a      	mov	r2, r5
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <_vfiprintf_r+0x258>)
 800bbc4:	a904      	add	r1, sp, #16
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7fc f826 	bl	8007c18 <_printf_i>
 800bbcc:	e7e4      	b.n	800bb98 <_vfiprintf_r+0x208>
 800bbce:	bf00      	nop
 800bbd0:	0800c4a4 	.word	0x0800c4a4
 800bbd4:	0800c4c4 	.word	0x0800c4c4
 800bbd8:	0800c484 	.word	0x0800c484
 800bbdc:	0800c6bc 	.word	0x0800c6bc
 800bbe0:	0800c6c6 	.word	0x0800c6c6
 800bbe4:	080076d1 	.word	0x080076d1
 800bbe8:	0800b96b 	.word	0x0800b96b
 800bbec:	0800c6c2 	.word	0x0800c6c2

0800bbf0 <nan>:
 800bbf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bbf8 <nan+0x8>
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	7ff80000 	.word	0x7ff80000

0800bc00 <_sbrk_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d06      	ldr	r5, [pc, #24]	; (800bc1c <_sbrk_r+0x1c>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f6 f9ac 	bl	8001f68 <_sbrk>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_sbrk_r+0x1a>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_sbrk_r+0x1a>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	200004fc 	.word	0x200004fc

0800bc20 <__sread>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	f000 f93a 	bl	800bea0 <_read_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	bfab      	itete	ge
 800bc30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc32:	89a3      	ldrhlt	r3, [r4, #12]
 800bc34:	181b      	addge	r3, r3, r0
 800bc36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc3a:	bfac      	ite	ge
 800bc3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3e:	81a3      	strhlt	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__swrite>:
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	461f      	mov	r7, r3
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	05db      	lsls	r3, r3, #23
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	4616      	mov	r6, r2
 800bc52:	d505      	bpl.n	800bc60 <__swrite+0x1e>
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	2302      	movs	r3, #2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f000 f8b8 	bl	800bdd0 <_lseek_r>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4628      	mov	r0, r5
 800bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	f000 b837 	b.w	800bce8 <_write_r>

0800bc7a <__sseek>:
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f000 f8a5 	bl	800bdd0 <_lseek_r>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	bf15      	itete	ne
 800bc8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc96:	81a3      	strheq	r3, [r4, #12]
 800bc98:	bf18      	it	ne
 800bc9a:	81a3      	strhne	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__sclose>:
 800bc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca2:	f000 b851 	b.w	800bd48 <_close_r>

0800bca6 <strncmp>:
 800bca6:	b510      	push	{r4, lr}
 800bca8:	b17a      	cbz	r2, 800bcca <strncmp+0x24>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	3901      	subs	r1, #1
 800bcae:	1884      	adds	r4, r0, r2
 800bcb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bcb8:	4290      	cmp	r0, r2
 800bcba:	d101      	bne.n	800bcc0 <strncmp+0x1a>
 800bcbc:	42a3      	cmp	r3, r4
 800bcbe:	d101      	bne.n	800bcc4 <strncmp+0x1e>
 800bcc0:	1a80      	subs	r0, r0, r2
 800bcc2:	bd10      	pop	{r4, pc}
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d1f3      	bne.n	800bcb0 <strncmp+0xa>
 800bcc8:	e7fa      	b.n	800bcc0 <strncmp+0x1a>
 800bcca:	4610      	mov	r0, r2
 800bccc:	e7f9      	b.n	800bcc2 <strncmp+0x1c>

0800bcce <__ascii_wctomb>:
 800bcce:	b149      	cbz	r1, 800bce4 <__ascii_wctomb+0x16>
 800bcd0:	2aff      	cmp	r2, #255	; 0xff
 800bcd2:	bf85      	ittet	hi
 800bcd4:	238a      	movhi	r3, #138	; 0x8a
 800bcd6:	6003      	strhi	r3, [r0, #0]
 800bcd8:	700a      	strbls	r2, [r1, #0]
 800bcda:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcde:	bf98      	it	ls
 800bce0:	2001      	movls	r0, #1
 800bce2:	4770      	bx	lr
 800bce4:	4608      	mov	r0, r1
 800bce6:	4770      	bx	lr

0800bce8 <_write_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <_write_r+0x20>)
 800bcec:	4604      	mov	r4, r0
 800bcee:	4608      	mov	r0, r1
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7f6 f8e5 	bl	8001ec6 <_write>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_write_r+0x1e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_write_r+0x1e>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	200004fc 	.word	0x200004fc

0800bd0c <__assert_func>:
 800bd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd0e:	4614      	mov	r4, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <__assert_func+0x2c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4605      	mov	r5, r0
 800bd18:	68d8      	ldr	r0, [r3, #12]
 800bd1a:	b14c      	cbz	r4, 800bd30 <__assert_func+0x24>
 800bd1c:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <__assert_func+0x30>)
 800bd1e:	9100      	str	r1, [sp, #0]
 800bd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd24:	4906      	ldr	r1, [pc, #24]	; (800bd40 <__assert_func+0x34>)
 800bd26:	462b      	mov	r3, r5
 800bd28:	f000 f81e 	bl	800bd68 <fiprintf>
 800bd2c:	f000 f8ca 	bl	800bec4 <abort>
 800bd30:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <__assert_func+0x38>)
 800bd32:	461c      	mov	r4, r3
 800bd34:	e7f3      	b.n	800bd1e <__assert_func+0x12>
 800bd36:	bf00      	nop
 800bd38:	2000001c 	.word	0x2000001c
 800bd3c:	0800c6cd 	.word	0x0800c6cd
 800bd40:	0800c6da 	.word	0x0800c6da
 800bd44:	0800c708 	.word	0x0800c708

0800bd48 <_close_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d06      	ldr	r5, [pc, #24]	; (800bd64 <_close_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f6 f8d3 	bl	8001efe <_close>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_close_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_close_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	200004fc 	.word	0x200004fc

0800bd68 <fiprintf>:
 800bd68:	b40e      	push	{r1, r2, r3}
 800bd6a:	b503      	push	{r0, r1, lr}
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	ab03      	add	r3, sp, #12
 800bd70:	4805      	ldr	r0, [pc, #20]	; (800bd88 <fiprintf+0x20>)
 800bd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd76:	6800      	ldr	r0, [r0, #0]
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	f7ff fe09 	bl	800b990 <_vfiprintf_r>
 800bd7e:	b002      	add	sp, #8
 800bd80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd84:	b003      	add	sp, #12
 800bd86:	4770      	bx	lr
 800bd88:	2000001c 	.word	0x2000001c

0800bd8c <_fstat_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_fstat_r+0x20>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	602b      	str	r3, [r5, #0]
 800bd9a:	f7f6 f8bc 	bl	8001f16 <_fstat>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d102      	bne.n	800bda8 <_fstat_r+0x1c>
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	b103      	cbz	r3, 800bda8 <_fstat_r+0x1c>
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	bd38      	pop	{r3, r4, r5, pc}
 800bdaa:	bf00      	nop
 800bdac:	200004fc 	.word	0x200004fc

0800bdb0 <_isatty_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_isatty_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f6 f8bb 	bl	8001f36 <_isatty>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_isatty_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_isatty_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	200004fc 	.word	0x200004fc

0800bdd0 <_lseek_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_lseek_r+0x20>)
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	4611      	mov	r1, r2
 800bdda:	2200      	movs	r2, #0
 800bddc:	602a      	str	r2, [r5, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	f7f6 f8b4 	bl	8001f4c <_lseek>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_lseek_r+0x1e>
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_lseek_r+0x1e>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	200004fc 	.word	0x200004fc

0800bdf4 <memmove>:
 800bdf4:	4288      	cmp	r0, r1
 800bdf6:	b510      	push	{r4, lr}
 800bdf8:	eb01 0402 	add.w	r4, r1, r2
 800bdfc:	d902      	bls.n	800be04 <memmove+0x10>
 800bdfe:	4284      	cmp	r4, r0
 800be00:	4623      	mov	r3, r4
 800be02:	d807      	bhi.n	800be14 <memmove+0x20>
 800be04:	1e43      	subs	r3, r0, #1
 800be06:	42a1      	cmp	r1, r4
 800be08:	d008      	beq.n	800be1c <memmove+0x28>
 800be0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be12:	e7f8      	b.n	800be06 <memmove+0x12>
 800be14:	4402      	add	r2, r0
 800be16:	4601      	mov	r1, r0
 800be18:	428a      	cmp	r2, r1
 800be1a:	d100      	bne.n	800be1e <memmove+0x2a>
 800be1c:	bd10      	pop	{r4, pc}
 800be1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be26:	e7f7      	b.n	800be18 <memmove+0x24>

0800be28 <__malloc_lock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_lock+0x8>)
 800be2a:	f7fe bdf2 	b.w	800aa12 <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	200004f0 	.word	0x200004f0

0800be34 <__malloc_unlock>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__malloc_unlock+0x8>)
 800be36:	f7fe bded 	b.w	800aa14 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	200004f0 	.word	0x200004f0

0800be40 <_realloc_r>:
 800be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be44:	4680      	mov	r8, r0
 800be46:	4614      	mov	r4, r2
 800be48:	460e      	mov	r6, r1
 800be4a:	b921      	cbnz	r1, 800be56 <_realloc_r+0x16>
 800be4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	4611      	mov	r1, r2
 800be52:	f7ff bba3 	b.w	800b59c <_malloc_r>
 800be56:	b92a      	cbnz	r2, 800be64 <_realloc_r+0x24>
 800be58:	f7ff fb34 	bl	800b4c4 <_free_r>
 800be5c:	4625      	mov	r5, r4
 800be5e:	4628      	mov	r0, r5
 800be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be64:	f000 f835 	bl	800bed2 <_malloc_usable_size_r>
 800be68:	4284      	cmp	r4, r0
 800be6a:	4607      	mov	r7, r0
 800be6c:	d802      	bhi.n	800be74 <_realloc_r+0x34>
 800be6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be72:	d812      	bhi.n	800be9a <_realloc_r+0x5a>
 800be74:	4621      	mov	r1, r4
 800be76:	4640      	mov	r0, r8
 800be78:	f7ff fb90 	bl	800b59c <_malloc_r>
 800be7c:	4605      	mov	r5, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	d0ed      	beq.n	800be5e <_realloc_r+0x1e>
 800be82:	42bc      	cmp	r4, r7
 800be84:	4622      	mov	r2, r4
 800be86:	4631      	mov	r1, r6
 800be88:	bf28      	it	cs
 800be8a:	463a      	movcs	r2, r7
 800be8c:	f7fb fb6a 	bl	8007564 <memcpy>
 800be90:	4631      	mov	r1, r6
 800be92:	4640      	mov	r0, r8
 800be94:	f7ff fb16 	bl	800b4c4 <_free_r>
 800be98:	e7e1      	b.n	800be5e <_realloc_r+0x1e>
 800be9a:	4635      	mov	r5, r6
 800be9c:	e7df      	b.n	800be5e <_realloc_r+0x1e>
	...

0800bea0 <_read_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4d07      	ldr	r5, [pc, #28]	; (800bec0 <_read_r+0x20>)
 800bea4:	4604      	mov	r4, r0
 800bea6:	4608      	mov	r0, r1
 800bea8:	4611      	mov	r1, r2
 800beaa:	2200      	movs	r2, #0
 800beac:	602a      	str	r2, [r5, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	f7f5 ffec 	bl	8001e8c <_read>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	d102      	bne.n	800bebe <_read_r+0x1e>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	b103      	cbz	r3, 800bebe <_read_r+0x1e>
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	200004fc 	.word	0x200004fc

0800bec4 <abort>:
 800bec4:	b508      	push	{r3, lr}
 800bec6:	2006      	movs	r0, #6
 800bec8:	f000 f834 	bl	800bf34 <raise>
 800becc:	2001      	movs	r0, #1
 800bece:	f7f5 ffd3 	bl	8001e78 <_exit>

0800bed2 <_malloc_usable_size_r>:
 800bed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed6:	1f18      	subs	r0, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bfbc      	itt	lt
 800bedc:	580b      	ldrlt	r3, [r1, r0]
 800bede:	18c0      	addlt	r0, r0, r3
 800bee0:	4770      	bx	lr

0800bee2 <_raise_r>:
 800bee2:	291f      	cmp	r1, #31
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	d904      	bls.n	800bef6 <_raise_r+0x14>
 800beec:	2316      	movs	r3, #22
 800beee:	6003      	str	r3, [r0, #0]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bef8:	b112      	cbz	r2, 800bf00 <_raise_r+0x1e>
 800befa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800befe:	b94b      	cbnz	r3, 800bf14 <_raise_r+0x32>
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 f831 	bl	800bf68 <_getpid_r>
 800bf06:	462a      	mov	r2, r5
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf10:	f000 b818 	b.w	800bf44 <_kill_r>
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d00a      	beq.n	800bf2e <_raise_r+0x4c>
 800bf18:	1c59      	adds	r1, r3, #1
 800bf1a:	d103      	bne.n	800bf24 <_raise_r+0x42>
 800bf1c:	2316      	movs	r3, #22
 800bf1e:	6003      	str	r3, [r0, #0]
 800bf20:	2001      	movs	r0, #1
 800bf22:	e7e7      	b.n	800bef4 <_raise_r+0x12>
 800bf24:	2400      	movs	r4, #0
 800bf26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	4798      	blx	r3
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e7e0      	b.n	800bef4 <_raise_r+0x12>
	...

0800bf34 <raise>:
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <raise+0xc>)
 800bf36:	4601      	mov	r1, r0
 800bf38:	6818      	ldr	r0, [r3, #0]
 800bf3a:	f7ff bfd2 	b.w	800bee2 <_raise_r>
 800bf3e:	bf00      	nop
 800bf40:	2000001c 	.word	0x2000001c

0800bf44 <_kill_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d07      	ldr	r5, [pc, #28]	; (800bf64 <_kill_r+0x20>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	4611      	mov	r1, r2
 800bf50:	602b      	str	r3, [r5, #0]
 800bf52:	f7f5 ff81 	bl	8001e58 <_kill>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	d102      	bne.n	800bf60 <_kill_r+0x1c>
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	b103      	cbz	r3, 800bf60 <_kill_r+0x1c>
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	bf00      	nop
 800bf64:	200004fc 	.word	0x200004fc

0800bf68 <_getpid_r>:
 800bf68:	f7f5 bf6e 	b.w	8001e48 <_getpid>

0800bf6c <_init>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr

0800bf78 <_fini>:
 800bf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7a:	bf00      	nop
 800bf7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf7e:	bc08      	pop	{r3}
 800bf80:	469e      	mov	lr, r3
 800bf82:	4770      	bx	lr
