
NCR_HW_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de84  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800dfc8  0800dfc8  0001dfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e99c  0800e99c  0001e99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e9a4  0800e9a4  0001e9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e9a8  0800e9a8  0001e9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000008  0800e9ac  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d4  200001f0  0800eb94  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007c4  0800eb94  000207c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d7cb  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000348c  00000000  00000000  0003d9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  00040e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001af0  00000000  00000000  00042ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024455  00000000  00000000  000445a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001934d  00000000  00000000  000689f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000df603  00000000  00000000  00081d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00161345  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e9c  00000000  00000000  00161398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dfac 	.word	0x0800dfac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800dfac 	.word	0x0800dfac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	72fb      	strb	r3, [r7, #11]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <lis2dw12_read_reg+0x20>
  {
    return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <lis2dw12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685c      	ldr	r4, [r3, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68d8      	ldr	r0, [r3, #12]
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	7af9      	ldrb	r1, [r7, #11]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	47a0      	blx	r4
 8000fd8:	6178      	str	r0, [r7, #20]

  return ret;
 8000fda:	697b      	ldr	r3, [r7, #20]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}

08000fe4 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	72fb      	strb	r3, [r7, #11]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <lis2dw12_write_reg+0x20>
  {
    return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <lis2dw12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681c      	ldr	r4, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68d8      	ldr	r0, [r3, #12]
 800100c:	893b      	ldrh	r3, [r7, #8]
 800100e:	7af9      	ldrb	r1, [r7, #11]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	47a0      	blx	r4
 8001014:	6178      	str	r0, [r7, #20]

  return ret;
 8001016:	697b      	ldr	r3, [r7, #20]
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	2301      	movs	r3, #1
 8001032:	2120      	movs	r1, #32
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffb7 	bl	8000fa8 <lis2dw12_read_reg>
 800103a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d118      	bne.n	8001074 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	7c3b      	ldrb	r3, [r7, #16]
 800104e:	f362 0383 	bfi	r3, r2, #2, #2
 8001052:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	b2da      	uxtb	r2, r3
 800105c:	7c3b      	ldrb	r3, [r7, #16]
 800105e:	f362 0301 	bfi	r3, r2, #0, #2
 8001062:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	2301      	movs	r3, #1
 800106a:	2120      	movs	r1, #32
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffb9 	bl	8000fe4 <lis2dw12_write_reg>
 8001072:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2301      	movs	r3, #1
 8001080:	2125      	movs	r1, #37	; 0x25
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff90 	bl	8000fa8 <lis2dw12_read_reg>
 8001088:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d110      	bne.n	80010b2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	f362 0382 	bfi	r3, r2, #2, #1
 80010a0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	2301      	movs	r3, #1
 80010a8:	2125      	movs	r1, #37	; 0x25
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff9a 	bl	8000fe4 <lis2dw12_write_reg>
 80010b0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80010b2:	697b      	ldr	r3, [r7, #20]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80010c8:	f107 0210 	add.w	r2, r7, #16
 80010cc:	2301      	movs	r3, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff69 	bl	8000fa8 <lis2dw12_read_reg>
 80010d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	7c3b      	ldrb	r3, [r7, #16]
 80010e8:	f362 1307 	bfi	r3, r2, #4, #4
 80010ec:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	2301      	movs	r3, #1
 80010f4:	2120      	movs	r1, #32
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff74 	bl	8000fe4 <lis2dw12_write_reg>
 80010fc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	2301      	movs	r3, #1
 800110a:	2122      	movs	r1, #34	; 0x22
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4b 	bl	8000fa8 <lis2dw12_read_reg>
 8001112:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d110      	bne.n	800113c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	b2da      	uxtb	r2, r3
 8001124:	7b3b      	ldrb	r3, [r7, #12]
 8001126:	f362 0301 	bfi	r3, r2, #0, #2
 800112a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	2301      	movs	r3, #1
 8001132:	2122      	movs	r1, #34	; 0x22
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff55 	bl	8000fe4 <lis2dw12_write_reg>
 800113a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800113c:	697b      	ldr	r3, [r7, #20]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	2301      	movs	r3, #1
 8001158:	2125      	movs	r1, #37	; 0x25
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff24 	bl	8000fa8 <lis2dw12_read_reg>
 8001160:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7a3b      	ldrb	r3, [r7, #8]
 8001172:	f362 1305 	bfi	r3, r2, #4, #2
 8001176:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2301      	movs	r3, #1
 800117e:	2125      	movs	r1, #37	; 0x25
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff2f 	bl	8000fe4 <lis2dw12_write_reg>
 8001186:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <lis2dw12_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_all_sources_get(const stmdev_ctx_t *ctx,
                                 lis2dw12_all_sources_t *val)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS_DUP, (uint8_t *) val, 5);
 800119c:	2305      	movs	r3, #5
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	2137      	movs	r1, #55	; 0x37
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff00 	bl	8000fa8 <lis2dw12_read_reg>
 80011a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80011be:	2301      	movs	r3, #1
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	210f      	movs	r1, #15
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff feef 	bl	8000fa8 <lis2dw12_read_reg>
 80011ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80011cc:	68fb      	ldr	r3, [r7, #12]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	2301      	movs	r3, #1
 80011e8:	2121      	movs	r1, #33	; 0x21
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fedc 	bl	8000fa8 <lis2dw12_read_reg>
 80011f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10f      	bne.n	8001218 <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7a3b      	ldrb	r3, [r7, #8]
 8001202:	f362 1386 	bfi	r3, r2, #6, #1
 8001206:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2301      	movs	r3, #1
 800120e:	2121      	movs	r1, #33	; 0x21
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fee7 	bl	8000fe4 <lis2dw12_write_reg>
 8001216:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	2301      	movs	r3, #1
 8001232:	2121      	movs	r1, #33	; 0x21
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff feb7 	bl	8000fa8 <lis2dw12_read_reg>
 800123a:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_reset;
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	701a      	strb	r2, [r3, #0]

  return ret;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(const stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001260:	f107 0210 	add.w	r2, r7, #16
 8001264:	2301      	movs	r3, #1
 8001266:	2125      	movs	r1, #37	; 0x25
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe9d 	bl	8000fa8 <lis2dw12_read_reg>
 800126e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d110      	bne.n	8001298 <lis2dw12_filter_path_set+0x44>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	7c3b      	ldrb	r3, [r7, #16]
 8001282:	f362 03c3 	bfi	r3, r2, #3, #1
 8001286:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001288:	f107 0210 	add.w	r2, r7, #16
 800128c:	2301      	movs	r3, #1
 800128e:	2125      	movs	r1, #37	; 0x25
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fea7 	bl	8000fe4 <lis2dw12_write_reg>
 8001296:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <lis2dw12_filter_path_set+0x5a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	2301      	movs	r3, #1
 80012a4:	213f      	movs	r1, #63	; 0x3f
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fe7e 	bl	8000fa8 <lis2dw12_read_reg>
 80012ac:	6178      	str	r0, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10f      	bne.n	80012d4 <lis2dw12_filter_path_set+0x80>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	f362 1304 	bfi	r3, r2, #4, #1
 80012c2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	2301      	movs	r3, #1
 80012ca:	213f      	movs	r1, #63	; 0x3f
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fe89 	bl	8000fe4 <lis2dw12_write_reg>
 80012d2:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 80012d4:	697b      	ldr	r3, [r7, #20]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(const stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80012ea:	f107 0208 	add.w	r2, r7, #8
 80012ee:	2301      	movs	r3, #1
 80012f0:	2125      	movs	r1, #37	; 0x25
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe58 	bl	8000fa8 <lis2dw12_read_reg>
 80012f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <lis2dw12_filter_bandwidth_set+0x42>
  {
    reg.bw_filt = (uint8_t) val;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7a3b      	ldrb	r3, [r7, #8]
 800130a:	f362 1387 	bfi	r3, r2, #6, #2
 800130e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8001310:	f107 0208 	add.w	r2, r7, #8
 8001314:	2301      	movs	r3, #1
 8001316:	2125      	movs	r1, #37	; 0x25
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe63 	bl	8000fe4 <lis2dw12_write_reg>
 800131e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8001334:	f107 0210 	add.w	r2, r7, #16
 8001338:	2301      	movs	r3, #1
 800133a:	2124      	movs	r1, #36	; 0x24
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe33 	bl	8000fa8 <lis2dw12_read_reg>
 8001342:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d107      	bne.n	800135a <lis2dw12_pin_int1_route_set+0x30>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	2301      	movs	r3, #1
 8001350:	213f      	movs	r1, #63	; 0x3f
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fe28 	bl	8000fa8 <lis2dw12_read_reg>
 8001358:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d13e      	bne.n	80013de <lis2dw12_pin_int1_route_set+0xb4>
  {
    if ((val->int1_tap |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001368:	b2da      	uxtb	r2, r3
         val->int1_ff |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001372:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8001374:	4313      	orrs	r3, r2
 8001376:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001380:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800138e:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8001390:	4313      	orrs	r3, r2
 8001392:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800139c:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80013a2:	7c3b      	ldrb	r3, [r7, #16]
 80013a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a8:	b2db      	uxtb	r3, r3
         val->int1_6d |
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 80013ae:	7c3b      	ldrb	r3, [r7, #16]
 80013b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013b4:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <lis2dw12_pin_int1_route_set+0x9e>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	733b      	strb	r3, [r7, #12]
 80013c6:	e003      	b.n	80013d0 <lis2dw12_pin_int1_route_set+0xa6>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	f36f 1345 	bfc	r3, #5, #1
 80013ce:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 80013d0:	2301      	movs	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	2123      	movs	r1, #35	; 0x23
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe04 	bl	8000fe4 <lis2dw12_write_reg>
 80013dc:	6178      	str	r0, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <lis2dw12_pin_int1_route_set+0xca>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	2301      	movs	r3, #1
 80013ea:	213f      	movs	r1, #63	; 0x3f
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fdf9 	bl	8000fe4 <lis2dw12_write_reg>
 80013f2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80013f4:	697b      	ldr	r3, [r7, #20]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8001408:	2301      	movs	r3, #1
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	2123      	movs	r1, #35	; 0x23
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fdca 	bl	8000fa8 <lis2dw12_read_reg>
 8001414:	60f8      	str	r0, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 800142c:	f107 0208 	add.w	r2, r7, #8
 8001430:	2301      	movs	r3, #1
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fdb7 	bl	8000fa8 <lis2dw12_read_reg>
 800143a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <lis2dw12_wkup_threshold_set+0x42>
  {
    reg.wk_ths = val;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	f362 0305 	bfi	r3, r2, #0, #6
 8001450:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001452:	f107 0208 	add.w	r2, r7, #8
 8001456:	2301      	movs	r3, #1
 8001458:	2134      	movs	r1, #52	; 0x34
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fdc2 	bl	8000fe4 <lis2dw12_write_reg>
 8001460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	2301      	movs	r3, #1
 800147e:	2135      	movs	r1, #53	; 0x35
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fd91 	bl	8000fa8 <lis2dw12_read_reg>
 8001486:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <lis2dw12_wkup_dur_set+0x42>
  {
    reg.wake_dur = val;
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	b2da      	uxtb	r2, r3
 8001496:	7a3b      	ldrb	r3, [r7, #8]
 8001498:	f362 1346 	bfi	r3, r2, #5, #2
 800149c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	2301      	movs	r3, #1
 80014a4:	2135      	movs	r1, #53	; 0x35
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fd9c 	bl	8000fe4 <lis2dw12_write_reg>
 80014ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <lis2dw12_wkup_feed_data_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_feed_data_set(const stmdev_ctx_t *ctx,
                                    lis2dw12_usr_off_on_wu_t val)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	2301      	movs	r3, #1
 80014ca:	213f      	movs	r1, #63	; 0x3f
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fd6b 	bl	8000fa8 <lis2dw12_read_reg>
 80014d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <lis2dw12_wkup_feed_data_set+0x42>
  {
    reg.usr_off_on_wu = (uint8_t) val;
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	f362 03c3 	bfi	r3, r2, #3, #1
 80014e8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	213f      	movs	r1, #63	; 0x3f
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd76 	bl	8000fe4 <lis2dw12_write_reg>
 80014f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <lis2dw12_act_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_act_mode_set(const stmdev_ctx_t *ctx,
                              lis2dw12_sleep_on_t val)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_ths_t wake_up_ths;
  lis2dw12_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS,
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	2301      	movs	r3, #1
 8001516:	2134      	movs	r1, #52	; 0x34
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fd45 	bl	8000fa8 <lis2dw12_read_reg>
 800151e:	6178      	str	r0, [r7, #20]
                          (uint8_t *) &wake_up_ths, 1);

  if (ret == 0)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <lis2dw12_act_mode_set+0x32>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR,
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	2301      	movs	r3, #1
 800152c:	2135      	movs	r1, #53	; 0x35
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd3a 	bl	8000fa8 <lis2dw12_read_reg>
 8001534:	6178      	str	r0, [r7, #20]
                            (uint8_t *) &wake_up_dur, 1);
  }

  if (ret == 0)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <lis2dw12_act_mode_set+0x58>
  {
    wake_up_ths.sleep_on = (uint8_t) val & 0x01U;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	7c3b      	ldrb	r3, [r7, #16]
 8001546:	f362 1386 	bfi	r3, r2, #6, #1
 800154a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS,
 800154c:	f107 0210 	add.w	r2, r7, #16
 8001550:	2301      	movs	r3, #1
 8001552:	2134      	movs	r1, #52	; 0x34
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fd45 	bl	8000fe4 <lis2dw12_write_reg>
 800155a:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &wake_up_ths, 1);
  }

  if (ret == 0)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d110      	bne.n	8001584 <lis2dw12_act_mode_set+0x80>
  {
    wake_up_dur.stationary = ((uint8_t)val & 0x02U) >> 1;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	f362 1304 	bfi	r3, r2, #4, #1
 8001572:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR,
 8001574:	f107 020c 	add.w	r2, r7, #12
 8001578:	2301      	movs	r3, #1
 800157a:	2135      	movs	r1, #53	; 0x35
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd31 	bl	8000fe4 <lis2dw12_write_reg>
 8001582:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &wake_up_dur, 1);
  }

  return ret;
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lis2dw12_act_sleep_dur_set>:
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_act_sleep_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 800159a:	f107 0208 	add.w	r2, r7, #8
 800159e:	2301      	movs	r3, #1
 80015a0:	2135      	movs	r1, #53	; 0x35
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fd00 	bl	8000fa8 <lis2dw12_read_reg>
 80015a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10f      	bne.n	80015d0 <lis2dw12_act_sleep_dur_set+0x42>
  {
    reg.sleep_dur = val;
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	7a3b      	ldrb	r3, [r7, #8]
 80015ba:	f362 0303 	bfi	r3, r2, #0, #4
 80015be:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	2301      	movs	r3, #1
 80015c6:	2135      	movs	r1, #53	; 0x35
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fd0b 	bl	8000fe4 <lis2dw12_write_reg>
 80015ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2b95      	cmp	r3, #149	; 0x95
 80015ea:	d810      	bhi.n	800160e <Modbus_RxCallback+0x32>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <Modbus_RxCallback+0x54>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	440b      	add	r3, r1
 80015fe:	709a      	strb	r2, [r3, #2]
        _ModbusResponse->rxIndex++;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e002      	b.n	8001614 <Modbus_RxCallback+0x38>


    } else {
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	801a      	strh	r2, [r3, #0]
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3302      	adds	r3, #2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	4413      	add	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <Modbus_RxCallback+0x54>)
 8001624:	f005 ffb6 	bl	8007594 <HAL_UART_Receive_IT>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000020c 	.word	0x2000020c

08001634 <ADS1115_Init>:
uint8_t ADS1115_config[2];
uint8_t ADS1115_rawValue[2];
float ADS1115_voltCoef; // Voltage coefficient.

/* Function definitions. */
HAL_StatusTypeDef ADS1115_Init(I2C_HandleTypeDef *handler, uint16_t setDataRate, uint16_t setPGA) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	803b      	strh	r3, [r7, #0]

	// Handler
	memcpy(&ADS1115_I2C_Handler, handler, sizeof(*handler));
 8001644:	2254      	movs	r2, #84	; 0x54
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	482f      	ldr	r0, [pc, #188]	; (8001708 <ADS1115_Init+0xd4>)
 800164a:	f007 ff51 	bl	80094f0 <memcpy>

	// Data rate and PGA configurations.
	ADS1115_dataRate = setDataRate;
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <ADS1115_Init+0xd8>)
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	8013      	strh	r3, [r2, #0]
	ADS1115_pga = setPGA;
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <ADS1115_Init+0xdc>)
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	8013      	strh	r3, [r2, #0]

	// Voltage coefficient update.
	switch (ADS1115_pga) {
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <ADS1115_Init+0xdc>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2b0e      	cmp	r3, #14
 8001660:	d83e      	bhi.n	80016e0 <ADS1115_Init+0xac>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <ADS1115_Init+0x34>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016a5 	.word	0x080016a5
 800166c:	080016e1 	.word	0x080016e1
 8001670:	080016af 	.word	0x080016af
 8001674:	080016e1 	.word	0x080016e1
 8001678:	080016b9 	.word	0x080016b9
 800167c:	080016e1 	.word	0x080016e1
 8001680:	080016c3 	.word	0x080016c3
 8001684:	080016e1 	.word	0x080016e1
 8001688:	080016cd 	.word	0x080016cd
 800168c:	080016e1 	.word	0x080016e1
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016e1 	.word	0x080016e1
 8001698:	080016e1 	.word	0x080016e1
 800169c:	080016e1 	.word	0x080016e1
 80016a0:	080016d7 	.word	0x080016d7

	case ADS1115_PGA_TWOTHIRDS:
		ADS1115_voltCoef = 0.1875;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <ADS1115_Init+0xe0>)
 80016a6:	f04f 5279 	mov.w	r2, #1044381696	; 0x3e400000
 80016aa:	601a      	str	r2, [r3, #0]
		break;
 80016ac:	e018      	b.n	80016e0 <ADS1115_Init+0xac>

	case ADS1115_PGA_ONE:
		ADS1115_voltCoef = 0.125;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <ADS1115_Init+0xe0>)
 80016b0:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80016b4:	601a      	str	r2, [r3, #0]
		break;
 80016b6:	e013      	b.n	80016e0 <ADS1115_Init+0xac>

	case ADS1115_PGA_TWO:
		ADS1115_voltCoef = 0.0625;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <ADS1115_Init+0xe0>)
 80016ba:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80016be:	601a      	str	r2, [r3, #0]
		break;
 80016c0:	e00e      	b.n	80016e0 <ADS1115_Init+0xac>

	case ADS1115_PGA_FOUR:
		ADS1115_voltCoef = 0.03125;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <ADS1115_Init+0xe0>)
 80016c4:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 80016c8:	601a      	str	r2, [r3, #0]
		break;
 80016ca:	e009      	b.n	80016e0 <ADS1115_Init+0xac>

	case ADS1115_PGA_EIGHT:
		ADS1115_voltCoef = 0.015625;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <ADS1115_Init+0xe0>)
 80016ce:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80016d2:	601a      	str	r2, [r3, #0]
		break;
 80016d4:	e004      	b.n	80016e0 <ADS1115_Init+0xac>

	case ADS1115_PGA_SIXTEEN:
		ADS1115_voltCoef = 0.0078125;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <ADS1115_Init+0xe0>)
 80016d8:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 80016dc:	601a      	str	r2, [r3, #0]
		break;
 80016de:	bf00      	nop

		}

	if (HAL_I2C_IsDeviceReady(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <ADS1115_Init+0xe4>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	b299      	uxth	r1, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	2205      	movs	r2, #5
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <ADS1115_Init+0xd4>)
 80016f0:	f003 fb4c 	bl	8004d8c <HAL_I2C_IsDeviceReady>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <ADS1115_Init+0xca>
		return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <ADS1115_Init+0xcc>
	} else {
		return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
	}

}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002a0 	.word	0x200002a0
 800170c:	2000000a 	.word	0x2000000a
 8001710:	2000000c 	.word	0x2000000c
 8001714:	200002fc 	.word	0x200002fc
 8001718:	20000008 	.word	0x20000008

0800171c <ADS1115_readSingleEnded>:

HAL_StatusTypeDef ADS1115_readSingleEnded(uint16_t muxPort, float *voltage) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	80fb      	strh	r3, [r7, #6]

	ADS1115_config[0] = ADS1115_OS | muxPort | ADS1115_pga | ADS1115_MODE;
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <ADS1115_readSingleEnded+0xbc>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f063 037e 	orn	r3, r3, #126	; 0x7e
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <ADS1115_readSingleEnded+0xc0>)
 800173e:	701a      	strb	r2, [r3, #0]
	ADS1115_config[1] = ADS1115_dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <ADS1115_readSingleEnded+0xc4>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 0303 	orr.w	r3, r3, #3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <ADS1115_readSingleEnded+0xc0>)
 800174e:	705a      	strb	r2, [r3, #1]

	if(HAL_I2C_Mem_Write(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK){
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <ADS1115_readSingleEnded+0xc8>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	b299      	uxth	r1, r3
 800175a:	2301      	movs	r3, #1
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2302      	movs	r3, #2
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <ADS1115_readSingleEnded+0xc0>)
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	2201      	movs	r2, #1
 800176a:	481f      	ldr	r0, [pc, #124]	; (80017e8 <ADS1115_readSingleEnded+0xcc>)
 800176c:	f003 f8e0 	bl	8004930 <HAL_I2C_Mem_Write>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d12b      	bne.n	80017ce <ADS1115_readSingleEnded+0xb2>

		if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT) == HAL_OK){
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <ADS1115_readSingleEnded+0xc8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b21b      	sxth	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b21b      	sxth	r3, r3
 8001784:	b299      	uxth	r1, r3
 8001786:	2301      	movs	r3, #1
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2302      	movs	r3, #2
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <ADS1115_readSingleEnded+0xd0>)
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2200      	movs	r2, #0
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <ADS1115_readSingleEnded+0xcc>)
 8001798:	f003 f9de 	bl	8004b58 <HAL_I2C_Mem_Read>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <ADS1115_readSingleEnded+0xb2>

			*voltage = (float) (((int16_t) (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1]) * ADS1115_voltCoef);
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <ADS1115_readSingleEnded+0xd0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <ADS1115_readSingleEnded+0xd0>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <ADS1115_readSingleEnded+0xd4>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	edc3 7a00 	vstr	s15, [r3]
			return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <ADS1115_readSingleEnded+0xb4>

		}

	}

	return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1

}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	200002f4 	.word	0x200002f4
 80017e0:	2000000a 	.word	0x2000000a
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200002a0 	.word	0x200002a0
 80017ec:	200002f8 	.word	0x200002f8
 80017f0:	200002fc 	.word	0x200002fc

080017f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001830:	1d39      	adds	r1, r7, #4
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	2201      	movs	r2, #1
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <__io_putchar+0x20>)
 800183a:	f005 fe1d 	bl	8007478 <HAL_UART_Transmit>
  return ch;
 800183e:	687b      	ldr	r3, [r7, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000364 	.word	0x20000364

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b0ac      	sub	sp, #176	; 0xb0
 8001850:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f002 f9c1 	bl	8003bd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize MCP23008
  MCP23008_Init();
 8001856:	f000 fbc7 	bl	8001fe8 <MCP23008_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185a:	f000 fa0b 	bl	8001c74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800185e:	f000 fa63 	bl	8001d28 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 fb75 	bl	8001f50 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001866:	f000 fadb 	bl	8001e20 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800186a:	f000 fa7b 	bl	8001d64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800186e:	f000 fb23 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8001872:	f000 fab7 	bl	8001de4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MCP23008
  MCP23008_Init();
 8001876:	f000 fbb7 	bl	8001fe8 <MCP23008_Init>

  // Configure interrupts on MCP23008
  MCP23008_ConfigureInterrupts();
 800187a:	f000 fc75 	bl	8002168 <MCP23008_ConfigureInterrupts>

  // Initialize SHT20 Sensor
  uint32_t sht40_serial;
  if( SHT40_ReadSerial(&hi2c1, &sht40_serial) != HAL_ERROR ) {
 800187e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001882:	4619      	mov	r1, r3
 8001884:	487e      	ldr	r0, [pc, #504]	; (8001a80 <main+0x234>)
 8001886:	f001 fd71 	bl	800336c <SHT40_ReadSerial>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d01b      	beq.n	80018c8 <main+0x7c>
	  	sensors.sht40.alarmState.temperature = NORMAL;
 8001890:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <main+0x238>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]
	  	sensors.sht40.alarmState.humidity = NORMAL;
 8001898:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <main+0x238>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  	sensors.sht40.thresholds.temp_high = TEMP_HIGH;
 80018a0:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <main+0x238>)
 80018a2:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <main+0x23c>)
 80018a4:	60da      	str	r2, [r3, #12]
	  	sensors.sht40.thresholds.temp_low  = TEMP_LOW;
 80018a6:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <main+0x238>)
 80018a8:	4a78      	ldr	r2, [pc, #480]	; (8001a8c <main+0x240>)
 80018aa:	609a      	str	r2, [r3, #8]
	  	sensors.sht40.thresholds.temp_hys  = TEMP_HYS;
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <main+0x238>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	  	sensors.sht40.thresholds.rel_high  = RH_HIGH;
 80018b4:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <main+0x238>)
 80018b6:	4a76      	ldr	r2, [pc, #472]	; (8001a90 <main+0x244>)
 80018b8:	619a      	str	r2, [r3, #24]
		sensors.sht40.thresholds.rel_low   = RH_LOW;
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <main+0x238>)
 80018bc:	4a75      	ldr	r2, [pc, #468]	; (8001a94 <main+0x248>)
 80018be:	615a      	str	r2, [r3, #20]
		sensors.sht40.thresholds.rel_hys   = RH_HYS;
 80018c0:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <main+0x238>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
		//printf("Failed to read serial from SHT40; check connections and reset MCU\r\n");
  }


  // Initialize accelerometer
  if(initAccelerometer()){
 80018c8:	f001 fa58 	bl	8002d7c <initAccelerometer>
  }
  else{
	  //printf("Error Accelerometer Initialization \r\n ");
  }

  if(ADS1115_Init(&hi2c1, ADS1115_DATA_RATE_64, ADS1115_PGA_ONE) == HAL_OK){
 80018cc:	2202      	movs	r2, #2
 80018ce:	2160      	movs	r1, #96	; 0x60
 80018d0:	486b      	ldr	r0, [pc, #428]	; (8001a80 <main+0x234>)
 80018d2:	f7ff feaf 	bl	8001634 <ADS1115_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <main+0x98>
	  HAL_Delay(1500);
 80018dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80018e0:	f002 fa00 	bl	8003ce4 <HAL_Delay>

  // Initialize Modbus
  //initModbus(&huart1, MODBUS_EN_GPIO_Port, MODBUS_EN_Pin);
  //HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
  uint8_t rxBuffer;
  HAL_UART_Receive_IT(&hlpuart1, &rxBuffer, 1);
 80018e4:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	486a      	ldr	r0, [pc, #424]	; (8001a98 <main+0x24c>)
 80018ee:	f005 fe51 	bl	8007594 <HAL_UART_Receive_IT>
  // Initialize timers;
  shtReadMillis = HAL_GetTick();
 80018f2:	f002 f9df 	bl	8003cb4 <HAL_GetTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a68      	ldr	r2, [pc, #416]	; (8001a9c <main+0x250>)
 80018fa:	6013      	str	r3, [r2, #0]
  payloadQueueMilis  = HAL_GetTick();
 80018fc:	f002 f9da 	bl	8003cb4 <HAL_GetTick>
 8001900:	4603      	mov	r3, r0
 8001902:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <main+0x254>)
 8001904:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" # # # # # # # # # # -> %s\r\n ", FirmwareName);
 8001906:	4967      	ldr	r1, [pc, #412]	; (8001aa4 <main+0x258>)
 8001908:	4867      	ldr	r0, [pc, #412]	; (8001aa8 <main+0x25c>)
 800190a:	f008 fd61 	bl	800a3d0 <iprintf>
  printf("# # # # # # # # # # -> Firmware Version %d.%d.%d\r\n ", VERSION_MAJOR, VERSION_MID, VERSION_MINOR);
 800190e:	2300      	movs	r3, #0
 8001910:	2203      	movs	r2, #3
 8001912:	2101      	movs	r1, #1
 8001914:	4865      	ldr	r0, [pc, #404]	; (8001aac <main+0x260>)
 8001916:	f008 fd5b 	bl	800a3d0 <iprintf>

#ifdef SCAN_I2C_DEVICES
  scanI2CDevices();
#endif

  WDTReset();
 800191a:	f000 fe2d 	bl	8002578 <WDTReset>
  HAL_Delay(2000);
 800191e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001922:	f002 f9df 	bl	8003ce4 <HAL_Delay>

  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800192c:	4860      	ldr	r0, [pc, #384]	; (8001ab0 <main+0x264>)
 800192e:	f001 f8b9 	bl	8002aa4 <sendATCommand>
  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001938:	485d      	ldr	r0, [pc, #372]	; (8001ab0 <main+0x264>)
 800193a:	f001 f8b3 	bl	8002aa4 <sendATCommand>
  sendATCommand(AT_RFS, 2000, AT_RESPONSE_CAPTURE_OK);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001944:	485a      	ldr	r0, [pc, #360]	; (8001ab0 <main+0x264>)
 8001946:	f001 f8ad 	bl	8002aa4 <sendATCommand>

  HAL_Delay(2000);
 800194a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800194e:	f002 f9c9 	bl	8003ce4 <HAL_Delay>
  //printf("Setting LoRa Credentials \r\n");
  if(!setLoraCredentials()){
 8001952:	f000 ff5b 	bl	800280c <setLoraCredentials>
	  //printf("Success setting LoRa credentials \r\n");
  }

  //printf("Joining to Network \r\n");

  while(hasJoinedNetwork == false){
 8001956:	e001      	b.n	800195c <main+0x110>
	  joinNetwork();
 8001958:	f000 ffde 	bl	8002918 <joinNetwork>
  while(hasJoinedNetwork == false){
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <main+0x268>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f6      	bne.n	8001958 <main+0x10c>
	  //printf("Retrying Joining Lora\r\n");
  }
  //printf("Success Joining Lora \r\n");

  TxPayload initPayload;
  initPayload.buffer[0] = 0x00;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  initPayload.buffer[1] = 0x01;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  initPayload.buffer[2] = 0x02;
 8001976:	2302      	movs	r3, #2
 8001978:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  initPayload.length = 3;
 800197c:	2303      	movs	r3, #3
 800197e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  initPayload.msgType = DIAGNOSTICS;
 8001982:	2302      	movs	r3, #2
 8001984:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  //printf("Sending Test Lora Payload\r\n");
  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
 8001988:	466d      	mov	r5, sp
 800198a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800198e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800199a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800199e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019a2:	cb0c      	ldmia	r3, {r2, r3}
 80019a4:	2101      	movs	r1, #1
 80019a6:	2004      	movs	r0, #4
 80019a8:	f000 ffce 	bl	8002948 <sendToLora>

//  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
//
//  sendToLora(TEST_UPLINK_PORT, CONFIRMED_UPLINK, initPayload);
  mcuResetMillis = HAL_GetTick();
 80019ac:	f002 f982 	bl	8003cb4 <HAL_GetTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <main+0x26c>)
 80019b4:	6013      	str	r3, [r2, #0]



  initQueue(&payLoadQueue);
 80019b6:	4841      	ldr	r0, [pc, #260]	; (8001abc <main+0x270>)
 80019b8:	f001 fb7e 	bl	80030b8 <initQueue>

  while (1)
  {


	  if(isDownlinkReceived == true){
 80019bc:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <main+0x274>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00c      	beq.n	80019de <main+0x192>
		  isDownlinkReceived = false;
 80019c4:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <main+0x274>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
		  printf("DOWNLINK MESSAGE RECEIVED \r\n");
 80019ca:	483e      	ldr	r0, [pc, #248]	; (8001ac4 <main+0x278>)
 80019cc:	f008 fd86 	bl	800a4dc <puts>
		  printf("Received Buffer: %.*s\r\n", downlinkBufferLen, downlinkBuffer);
 80019d0:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <main+0x27c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <main+0x280>)
 80019d6:	4619      	mov	r1, r3
 80019d8:	483d      	ldr	r0, [pc, #244]	; (8001ad0 <main+0x284>)
 80019da:	f008 fcf9 	bl	800a3d0 <iprintf>
//		  isDownlinkReceived = false;
//		  printf("CONFIRMED UPLINK RECEIVED \r\n");
//	  }

	  // Internal IWDT Feed
	  HAL_IWDG_Refresh(&hiwdg);
 80019de:	483d      	ldr	r0, [pc, #244]	; (8001ad4 <main+0x288>)
 80019e0:	f003 fefc 	bl	80057dc <HAL_IWDG_Refresh>

	  // External WDT Feed
	  if(HAL_GetTick() - wdtResetMillis > WDT_RESET_INTERVAL){
 80019e4:	f002 f966 	bl	8003cb4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <main+0x28c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d906      	bls.n	8001a06 <main+0x1ba>
		  WDTReset();
 80019f8:	f000 fdbe 	bl	8002578 <WDTReset>
		  wdtResetMillis = HAL_GetTick();
 80019fc:	f002 f95a 	bl	8003cb4 <HAL_GetTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <main+0x28c>)
 8001a04:	6013      	str	r3, [r2, #0]
	  }

	  // Hanging / Freezing BAND AID Solution
	  if(HAL_GetTick() - mcuResetMillis > MCU_REST_INTERVAL){
 8001a06:	f002 f955 	bl	8003cb4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <main+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a32      	ldr	r2, [pc, #200]	; (8001adc <main+0x290>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d90a      	bls.n	8001a2e <main+0x1e2>
		  //printf("RESTARTING MCU NOW... \r\n");
		  HAL_Delay(1000);
 8001a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a1c:	f002 f962 	bl	8003ce4 <HAL_Delay>
		  HAL_NVIC_SystemReset();
 8001a20:	f002 fa9d 	bl	8003f5e <HAL_NVIC_SystemReset>
		  mcuResetMillis = HAL_GetTick();
 8001a24:	f002 f946 	bl	8003cb4 <HAL_GetTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <main+0x26c>)
 8001a2c:	6013      	str	r3, [r2, #0]
	  }


	  // Handle Dequeue for Payloads
	  if(HAL_GetTick() - payloadQueueMilis > QUEUE_SEND_INTERVAL){
 8001a2e:	f002 f941 	bl	8003cb4 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <main+0x254>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d968      	bls.n	8001b14 <main+0x2c8>
		  TxPayload payload;
		  if (dequeue(&payLoadQueue, &payload) == 0) {
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <main+0x270>)
 8001a4a:	f001 fb9f 	bl	800318c <dequeue>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d15a      	bne.n	8001b0a <main+0x2be>
		      //printf("Sending To Lora \r\n ");

		      if(payload.msgType == UNSCHEDULED_TRANSMISSION){
 8001a54:	7c3b      	ldrb	r3, [r7, #16]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d142      	bne.n	8001ae0 <main+0x294>
		    	  sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, payload);
 8001a5a:	466d      	mov	r5, sp
 8001a5c:	f107 0418 	add.w	r4, r7, #24
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	cb0c      	ldmia	r3, {r2, r3}
 8001a76:	2101      	movs	r1, #1
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 ff65 	bl	8002948 <sendToLora>
 8001a7e:	e044      	b.n	8001b0a <main+0x2be>
 8001a80:	20000300 	.word	0x20000300
 8001a84:	20000528 	.word	0x20000528
 8001a88:	41f80000 	.word	0x41f80000
 8001a8c:	41e00000 	.word	0x41e00000
 8001a90:	428c0000 	.word	0x428c0000
 8001a94:	41f00000 	.word	0x41f00000
 8001a98:	20000364 	.word	0x20000364
 8001a9c:	20000588 	.word	0x20000588
 8001aa0:	20000598 	.word	0x20000598
 8001aa4:	0800dfc8 	.word	0x0800dfc8
 8001aa8:	0800dfe4 	.word	0x0800dfe4
 8001aac:	0800e004 	.word	0x0800e004
 8001ab0:	0800e038 	.word	0x0800e038
 8001ab4:	20000585 	.word	0x20000585
 8001ab8:	20000594 	.word	0x20000594
 8001abc:	200006a0 	.word	0x200006a0
 8001ac0:	2000067a 	.word	0x2000067a
 8001ac4:	0800e044 	.word	0x0800e044
 8001ac8:	2000067b 	.word	0x2000067b
 8001acc:	20000614 	.word	0x20000614
 8001ad0:	0800e060 	.word	0x0800e060
 8001ad4:	20000354 	.word	0x20000354
 8001ad8:	20000590 	.word	0x20000590
 8001adc:	0002bf20 	.word	0x0002bf20
		      }

		      else if(payload.msgType == HEARTBEAT){
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <main+0x2be>
		    	  sendToLora(HEARTBEAT_PORT, UNCONFIRMED_UPLINK, payload);
 8001ae6:	466d      	mov	r5, sp
 8001ae8:	f107 0418 	add.w	r4, r7, #24
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	cb0c      	ldmia	r3, {r2, r3}
 8001b02:	2100      	movs	r1, #0
 8001b04:	2002      	movs	r0, #2
 8001b06:	f000 ff1f 	bl	8002948 <sendToLora>
		      }

		  } else {
		      //printf("NOTHING TO SEND ... \r\n");
		  }
		  payloadQueueMilis = HAL_GetTick();
 8001b0a:	f002 f8d3 	bl	8003cb4 <HAL_GetTick>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <main+0x3f4>)
 8001b12:	6013      	str	r3, [r2, #0]





	  readAccelerometer(&sensors.accel);
 8001b14:	484b      	ldr	r0, [pc, #300]	; (8001c44 <main+0x3f8>)
 8001b16:	f001 f9a9 	bl	8002e6c <readAccelerometer>




  	  // Check "INTERUPT EVENTS"
  	  if(HAL_GetTick() - shtReadMillis > SHT_READ_INTERVAL){
 8001b1a:	f002 f8cb 	bl	8003cb4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <main+0x3fc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b2a:	d955      	bls.n	8001bd8 <main+0x38c>

  		 // Read Water Leak
  		readWaterLeak(&sensors.leak);
 8001b2c:	4847      	ldr	r0, [pc, #284]	; (8001c4c <main+0x400>)
 8001b2e:	f001 fbd1 	bl	80032d4 <readWaterLeak>
  		current_leak = sensors.leak.state;
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <main+0x404>)
 8001b34:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <main+0x408>)
 8001b3a:	701a      	strb	r2, [r3, #0]
  		if(current_leak != prev_leak){
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <main+0x408>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <main+0x40c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d005      	beq.n	8001b54 <main+0x308>
  			//printf("ALERT ON LEAK \r\n");
  			prev_leak = current_leak;
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <main+0x408>)
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <main+0x40c>)
 8001b4e:	701a      	strb	r2, [r3, #0]

  			queueUnscheduledPayload();
 8001b50:	f001 fb6c 	bl	800322c <queueUnscheduledPayload>


  		}

  		// Read Temperature
  		readSHT40(&sensors.sht40);
 8001b54:	483e      	ldr	r0, [pc, #248]	; (8001c50 <main+0x404>)
 8001b56:	f000 ffd9 	bl	8002b0c <readSHT40>

  		// Read Smoke Sensor
  		sensors.smoke = ReadSmokeStatus();
 8001b5a:	4c3d      	ldr	r4, [pc, #244]	; (8001c50 <main+0x404>)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fb88 	bl	8002274 <ReadSmokeStatus>
 8001b64:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001b68:	463a      	mov	r2, r7
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		current_smoke =  sensors.smoke.level;
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <main+0x404>)
 8001b72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <main+0x410>)
 8001b78:	701a      	strb	r2, [r3, #0]
  		if(current_smoke != prev_smoke){
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <main+0x410>)
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <main+0x414>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d005      	beq.n	8001b92 <main+0x346>
  			//printf("ALERT ON SMOKE \r\n");
  			prev_smoke = current_smoke;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <main+0x410>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <main+0x414>)
 8001b8c:	701a      	strb	r2, [r3, #0]

  			queueUnscheduledPayload();
 8001b8e:	f001 fb4d 	bl	800322c <queueUnscheduledPayload>

  		}

  		// Read DryContacts
  	    sensors.dryContact = MCP23008_ReadInputs();
 8001b92:	4c2f      	ldr	r4, [pc, #188]	; (8001c50 <main+0x404>)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fa3c 	bl	8002014 <MCP23008_ReadInputs>
 8001b9c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001ba0:	463a      	mov	r2, r7
 8001ba2:	6810      	ldr	r0, [r2, #0]
 8001ba4:	6851      	ldr	r1, [r2, #4]
 8001ba6:	c303      	stmia	r3!, {r0, r1}
 8001ba8:	7a12      	ldrb	r2, [r2, #8]
 8001baa:	701a      	strb	r2, [r3, #0]
  	    current_dryContact = sensors.dryContact.value;
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <main+0x404>)
 8001bae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <main+0x418>)
 8001bb4:	701a      	strb	r2, [r3, #0]
  	    if(current_dryContact != prev_dryContact){
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <main+0x418>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <main+0x41c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d005      	beq.n	8001bce <main+0x382>
  	    	//printf("ALERT ON DRY CONTACT \r\n");
  	    	prev_dryContact = current_dryContact;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <main+0x418>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <main+0x41c>)
 8001bc8:	701a      	strb	r2, [r3, #0]

  	    	queueUnscheduledPayload();
 8001bca:	f001 fb2f 	bl	800322c <queueUnscheduledPayload>
//				sensors.dryContact.DC7, sensors.dryContact.DC8);
//  		printLineMarker('*');
#endif


  		shtReadMillis = HAL_GetTick();
 8001bce:	f002 f871 	bl	8003cb4 <HAL_GetTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <main+0x3fc>)
 8001bd6:	6013      	str	r3, [r2, #0]




  	  // Read All Sensors every Y Interval - HEART BEAT
  	  if(HAL_GetTick() - sensorsReadMillis > DEVICE_HEARTBEAT){
 8001bd8:	f002 f86c 	bl	8003cb4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <main+0x420>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f247 5230 	movw	r2, #30000	; 0x7530
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f67f aee7 	bls.w	80019bc <main+0x170>

  		// Read Water Leak
  		readWaterLeak(&sensors.leak);
 8001bee:	4817      	ldr	r0, [pc, #92]	; (8001c4c <main+0x400>)
 8001bf0:	f001 fb70 	bl	80032d4 <readWaterLeak>


  		// Read SHT20
  		readSHT40(&sensors.sht40);
 8001bf4:	4816      	ldr	r0, [pc, #88]	; (8001c50 <main+0x404>)
 8001bf6:	f000 ff89 	bl	8002b0c <readSHT40>

	    // Read Smoke Sensor
	    sensors.smoke = ReadSmokeStatus();
 8001bfa:	4c15      	ldr	r4, [pc, #84]	; (8001c50 <main+0x404>)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fb38 	bl	8002274 <ReadSmokeStatus>
 8001c04:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001c08:	463a      	mov	r2, r7
 8001c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Read DryContacts
	    sensors.dryContact = MCP23008_ReadInputs();
 8001c10:	4c0f      	ldr	r4, [pc, #60]	; (8001c50 <main+0x404>)
 8001c12:	463b      	mov	r3, r7
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f9fd 	bl	8002014 <MCP23008_ReadInputs>
 8001c1a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001c1e:	463a      	mov	r2, r7
 8001c20:	6810      	ldr	r0, [r2, #0]
 8001c22:	6851      	ldr	r1, [r2, #4]
 8001c24:	c303      	stmia	r3!, {r0, r1}
 8001c26:	7a12      	ldrb	r2, [r2, #8]
 8001c28:	701a      	strb	r2, [r3, #0]

	    // PLaceholder for LTC4015
	    readLTC4015(&sensors.ltc4015);
 8001c2a:	4811      	ldr	r0, [pc, #68]	; (8001c70 <main+0x424>)
 8001c2c:	f001 f9c4 	bl	8002fb8 <readLTC4015>


	    queueHeartbeatPayload();
 8001c30:	f001 fb26 	bl	8003280 <queueHeartbeatPayload>
//	    TxPayload _heartBeatPayload;
//	    generateHeartbeatTxPayload(sensors, &_heartBeatPayload);
//
//	    sendToLora(HEARTBEAT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);

  		sensorsReadMillis = HAL_GetTick();
 8001c34:	f002 f83e 	bl	8003cb4 <HAL_GetTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <main+0x420>)
 8001c3c:	6013      	str	r3, [r2, #0]
	  if(isDownlinkReceived == true){
 8001c3e:	e6bd      	b.n	80019bc <main+0x170>
 8001c40:	20000598 	.word	0x20000598
 8001c44:	20000578 	.word	0x20000578
 8001c48:	20000588 	.word	0x20000588
 8001c4c:	2000057c 	.word	0x2000057c
 8001c50:	20000528 	.word	0x20000528
 8001c54:	2000069c 	.word	0x2000069c
 8001c58:	2000069d 	.word	0x2000069d
 8001c5c:	2000069b 	.word	0x2000069b
 8001c60:	2000069a 	.word	0x2000069a
 8001c64:	20000699 	.word	0x20000699
 8001c68:	20000698 	.word	0x20000698
 8001c6c:	2000058c 	.word	0x2000058c
 8001c70:	20000564 	.word	0x20000564

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09a      	sub	sp, #104	; 0x68
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2248      	movs	r2, #72	; 0x48
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f007 fc42 	bl	800950c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <SystemClock_Config+0xb0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <SystemClock_Config+0xb0>)
 8001ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <SystemClock_Config+0xb0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001cb6:	232a      	movs	r3, #42	; 0x2a
 8001cb8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001ccc:	23a0      	movs	r3, #160	; 0xa0
 8001cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f107 0320 	add.w	r3, r7, #32
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 f921 	bl	8005f24 <HAL_RCC_OscConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ce8:	f001 fb1c 	bl	8003324 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001cec:	236f      	movs	r3, #111	; 0x6f
 8001cee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fc7d 	bl	800660c <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001d18:	f001 fb04 	bl	8003324 <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3768      	adds	r7, #104	; 0x68
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58000400 	.word	0x58000400

08001d28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2250      	movs	r2, #80	; 0x50
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f007 fbe9 	bl	800950c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001d40:	2300      	movs	r3, #0
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001d44:	2310      	movs	r3, #16
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 f89d 	bl	8006e8a <HAL_RCCEx_PeriphCLKConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001d56:	f001 fae5 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001d5a:	bf00      	nop
 8001d5c:	3750      	adds	r7, #80	; 0x50
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_I2C1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <MX_I2C1_Init+0x7c>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9e:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001da0:	f002 fb4c 	bl	800443c <HAL_I2C_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001daa:	f001 fabb 	bl	8003324 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001db2:	f003 fc2d 	bl	8005610 <HAL_I2CEx_ConfigAnalogFilter>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f001 fab2 	bl	8003324 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001dc4:	f003 fc6f 	bl	80056a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f001 faa9 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000300 	.word	0x20000300
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00707cbb 	.word	0x00707cbb

08001de4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_IWDG_Init+0x34>)
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <MX_IWDG_Init+0x38>)
 8001dec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_IWDG_Init+0x34>)
 8001df0:	2206      	movs	r2, #6
 8001df2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_IWDG_Init+0x34>)
 8001df6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001dfa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_IWDG_Init+0x34>)
 8001dfe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e02:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_IWDG_Init+0x34>)
 8001e06:	f003 fc9a 	bl	800573e <HAL_IWDG_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001e10:	f001 fa88 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000354 	.word	0x20000354
 8001e1c:	40003000 	.word	0x40003000

08001e20 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <MX_LPUART1_UART_Init+0x94>)
 8001e28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e68:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e6a:	f005 fab5 	bl	80073d8 <HAL_UART_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e74:	f001 fa56 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e7c:	f007 fa33 	bl	80092e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e86:	f001 fa4d 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4808      	ldr	r0, [pc, #32]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e8e:	f007 fa68 	bl	8009362 <HAL_UARTEx_SetRxFifoThreshold>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e98:	f001 fa44 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e9c:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <MX_LPUART1_UART_Init+0x90>)
 8001e9e:	f007 f9e9 	bl	8009274 <HAL_UARTEx_DisableFifoMode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea8:	f001 fa3c 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000364 	.word	0x20000364
 8001eb4:	40008000 	.word	0x40008000

08001eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <MX_USART1_UART_Init+0x94>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f00:	4811      	ldr	r0, [pc, #68]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f02:	f005 fa69 	bl	80073d8 <HAL_UART_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f0c:	f001 fa0a 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f14:	f007 f9e7 	bl	80092e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f1e:	f001 fa01 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f26:	f007 fa1c 	bl	8009362 <HAL_UARTEx_SetRxFifoThreshold>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f30:	f001 f9f8 	bl	8003324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_USART1_UART_Init+0x90>)
 8001f36:	f007 f99d 	bl	8009274 <HAL_UARTEx_DisableFifoMode>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f40:	f001 f9f0 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200003f8 	.word	0x200003f8
 8001f4c:	40013800 	.word	0x40013800

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7ff fc45 	bl	80017f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	2004      	movs	r0, #4
 8001f6c:	f7ff fc42 	bl	80017f4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WDT_DONE_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	f244 0110 	movw	r1, #16400	; 0x4010
 8001f76:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <MX_GPIO_Init+0x94>)
 8001f78:	f002 fa48 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMOKE_B_Pin SMOKE_A_Pin */
  GPIO_InitStruct.Pin = SMOKE_B_Pin|SMOKE_A_Pin;
 8001f7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f82:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4814      	ldr	r0, [pc, #80]	; (8001fe4 <MX_GPIO_Init+0x94>)
 8001f92:	f002 f8b3 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : WDT_DONE_Pin MODBUS_EN_Pin */
  GPIO_InitStruct.Pin = WDT_DONE_Pin|MODBUS_EN_Pin;
 8001f96:	f244 0310 	movw	r3, #16400	; 0x4010
 8001f9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_GPIO_Init+0x94>)
 8001fae:	f002 f8a5 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_GPIO_Init+0x94>)
 8001fc8:	f002 f898 	bl	80040fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2028      	movs	r0, #40	; 0x28
 8001fd2:	f001 ff9c 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fd6:	2028      	movs	r0, #40	; 0x28
 8001fd8:	f001 ffb3 	bl	8003f42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	48000400 	.word	0x48000400

08001fe8 <MCP23008_Init>:

/* USER CODE BEGIN 4 */
void MCP23008_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Set all GPIO pins as inputs
    data[0] = MCP23008_IODIR;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF;  // Set all pins as input
 8001ff2:	23ff      	movs	r3, #255	; 0xff
 8001ff4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001ff6:	1d3a      	adds	r2, r7, #4
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	2142      	movs	r1, #66	; 0x42
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <MCP23008_Init+0x28>)
 8002004:	f002 faaa 	bl	800455c <HAL_I2C_Master_Transmit>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000300 	.word	0x20000300

08002014 <MCP23008_ReadInputs>:

DryContactStatus MCP23008_ReadInputs(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_GPIO;
 800201c:	2309      	movs	r3, #9
 800201e:	753b      	strb	r3, [r7, #20]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 8002020:	f107 0214 	add.w	r2, r7, #20
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	2142      	movs	r1, #66	; 0x42
 800202e:	4836      	ldr	r0, [pc, #216]	; (8002108 <MCP23008_ReadInputs+0xf4>)
 8002030:	f002 fa94 	bl	800455c <HAL_I2C_Master_Transmit>
    //HAL_Delay(50);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 8002034:	f107 0213 	add.w	r2, r7, #19
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2301      	movs	r3, #1
 8002040:	2142      	movs	r1, #66	; 0x42
 8002042:	4831      	ldr	r0, [pc, #196]	; (8002108 <MCP23008_ReadInputs+0xf4>)
 8002044:	f002 fb7e 	bl	8004744 <HAL_I2C_Master_Receive>

    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	723b      	strb	r3, [r7, #8]
	dryContact.DC1 = (gpioState & (1 << 0)) ? true : false;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	dryContact.DC2 = (gpioState & (1 << 1)) ? true : false;
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	105b      	asrs	r3, r3, #1
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	72bb      	strb	r3, [r7, #10]
	dryContact.DC3 = (gpioState & (1 << 2)) ? true : false;
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	109b      	asrs	r3, r3, #2
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	72fb      	strb	r3, [r7, #11]
	dryContact.DC4 = (gpioState & (1 << 3)) ? true : false;
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	10db      	asrs	r3, r3, #3
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	733b      	strb	r3, [r7, #12]
	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	111b      	asrs	r3, r3, #4
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	737b      	strb	r3, [r7, #13]
	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	115b      	asrs	r3, r3, #5
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	73bb      	strb	r3, [r7, #14]
	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	119b      	asrs	r3, r3, #6
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	73fb      	strb	r3, [r7, #15]
	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	11db      	asrs	r3, r3, #7
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	743b      	strb	r3, [r7, #16]

	return dryContact;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	cb03      	ldmia	r3!, {r0, r1}
 80020f8:	6010      	str	r0, [r2, #0]
 80020fa:	6051      	str	r1, [r2, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	7213      	strb	r3, [r2, #8]
}
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000300 	.word	0x20000300

0800210c <MCP23008_ReadCapturedINT>:

DryContactStatus MCP23008_ReadCapturedINT(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    uint8_t gpioState;

    // Request to read GPIO register
    data[0] = MCP23008_INTCAP;
 8002114:	2308      	movs	r3, #8
 8002116:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 1, HAL_MAX_DELAY);
 8002118:	f107 020c 	add.w	r2, r7, #12
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2301      	movs	r3, #1
 8002124:	2142      	movs	r1, #66	; 0x42
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <MCP23008_ReadCapturedINT+0x54>)
 8002128:	f002 fa18 	bl	800455c <HAL_I2C_Master_Transmit>
    //HAL_Delay(10);
    // Read GPIO register
    HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &gpioState, 1, HAL_MAX_DELAY);
 800212c:	f107 020b 	add.w	r2, r7, #11
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2301      	movs	r3, #1
 8002138:	2142      	movs	r1, #66	; 0x42
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <MCP23008_ReadCapturedINT+0x54>)
 800213c:	f002 fb02 	bl	8004744 <HAL_I2C_Master_Receive>

//    DryContactStatus dryContact;
    dryContact.value = gpioState;
 8002140:	7afa      	ldrb	r2, [r7, #11]
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MCP23008_ReadCapturedINT+0x58>)
 8002144:	701a      	strb	r2, [r3, #0]
//	dryContact.DC5 = (gpioState & (1 << 4)) ? true : false;
//	dryContact.DC6 = (gpioState & (1 << 5)) ? true : false;
//	dryContact.DC7 = (gpioState & (1 << 6)) ? true : false;
//	dryContact.DC8 = (gpioState & (1 << 7)) ? true : false;

	return dryContact;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4906      	ldr	r1, [pc, #24]	; (8002164 <MCP23008_ReadCapturedINT+0x58>)
 800214a:	461a      	mov	r2, r3
 800214c:	460b      	mov	r3, r1
 800214e:	cb03      	ldmia	r3!, {r0, r1}
 8002150:	6010      	str	r0, [r2, #0]
 8002152:	6051      	str	r1, [r2, #4]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	7213      	strb	r3, [r2, #8]
}
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000300 	.word	0x20000300
 8002164:	200005a4 	.word	0x200005a4

08002168 <MCP23008_ConfigureInterrupts>:

void MCP23008_ConfigureInterrupts(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af02      	add	r7, sp, #8
    uint8_t data[2];

    // Enable interrupts for all GPIO pins
    data[0] = MCP23008_GPINTEN;
 800216e:	2302      	movs	r3, #2
 8002170:	713b      	strb	r3, [r7, #4]
    data[1] = 0xFF; // Enable interrupts on all pins
 8002172:	23ff      	movs	r3, #255	; 0xff
 8002174:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002176:	1d3a      	adds	r2, r7, #4
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2302      	movs	r3, #2
 8002180:	2142      	movs	r1, #66	; 0x42
 8002182:	4821      	ldr	r0, [pc, #132]	; (8002208 <MCP23008_ConfigureInterrupts+0xa0>)
 8002184:	f002 f9ea 	bl	800455c <HAL_I2C_Master_Transmit>

    // Configure interrupt on change (default value) for all pins
    data[0] = MCP23008_INTCON;
 8002188:	2304      	movs	r3, #4
 800218a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // Compare register is used for all pins
 800218c:	2300      	movs	r3, #0
 800218e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002190:	1d3a      	adds	r2, r7, #4
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2302      	movs	r3, #2
 800219a:	2142      	movs	r1, #66	; 0x42
 800219c:	481a      	ldr	r0, [pc, #104]	; (8002208 <MCP23008_ConfigureInterrupts+0xa0>)
 800219e:	f002 f9dd 	bl	800455c <HAL_I2C_Master_Transmit>

    // Set default values for comparison (not strictly necessary)
    data[0] = MCP23008_DEFVAL;
 80021a2:	2303      	movs	r3, #3
 80021a4:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00; // No specific default value comparison
 80021a6:	2300      	movs	r3, #0
 80021a8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80021aa:	1d3a      	adds	r2, r7, #4
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2302      	movs	r3, #2
 80021b4:	2142      	movs	r1, #66	; 0x42
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <MCP23008_ConfigureInterrupts+0xa0>)
 80021b8:	f002 f9d0 	bl	800455c <HAL_I2C_Master_Transmit>

    // Configure interrupt control to generate an interrupt on change
    // Assuming here the default configuration is sufficient

    // Read the current value of the IOCON register
	data[0] = MCP23008_IOCON;
 80021bc:	2305      	movs	r3, #5
 80021be:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MCP23008_ADDR << 1, &data[1], 1, HAL_MAX_DELAY);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	2142      	movs	r1, #66	; 0x42
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <MCP23008_ConfigureInterrupts+0xa0>)
 80021d0:	f002 fab8 	bl	8004744 <HAL_I2C_Master_Receive>

	// Modify Bit 1 and Bit 2
	// Bit 1 (INTPOL) = 1 (Active High)
	// Bit 2 (Driver Output) = 0 (Keep as 0)
	data[1] = (data[1] & ~(1 << 2)) | (1 << 1);
 80021d4:	797b      	ldrb	r3, [r7, #5]
 80021d6:	b25b      	sxtb	r3, r3
 80021d8:	f023 0306 	bic.w	r3, r3, #6
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	717b      	strb	r3, [r7, #5]

	// Write the updated value back to the IOCON register
	data[0] = MCP23008_IOCON;
 80021e8:	2305      	movs	r3, #5
 80021ea:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MCP23008_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80021ec:	1d3a      	adds	r2, r7, #4
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2302      	movs	r3, #2
 80021f6:	2142      	movs	r1, #66	; 0x42
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <MCP23008_ConfigureInterrupts+0xa0>)
 80021fa:	f002 f9af 	bl	800455c <HAL_I2C_Master_Transmit>

}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000300 	.word	0x20000300

0800220c <HAL_GPIO_EXTI_IRQHandler>:

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	82fb      	strh	r3, [r7, #22]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x60>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01c      	beq.n	800225c <HAL_GPIO_EXTI_IRQHandler+0x50>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x60>)
 8002224:	8afb      	ldrh	r3, [r7, #22]
 8002226:	60d3      	str	r3, [r2, #12]

    switch(GPIO_Pin)
 8002228:	8afb      	ldrh	r3, [r7, #22]
 800222a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800222e:	d009      	beq.n	8002244 <HAL_GPIO_EXTI_IRQHandler+0x38>
 8002230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002234:	dc14      	bgt.n	8002260 <HAL_GPIO_EXTI_IRQHandler+0x54>
 8002236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800223a:	d00b      	beq.n	8002254 <HAL_GPIO_EXTI_IRQHandler+0x48>
 800223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002240:	d008      	beq.n	8002254 <HAL_GPIO_EXTI_IRQHandler+0x48>
      case SMOKE_A_Pin:
      case SMOKE_B_Pin:
    	  TxTriggers = SMOKE_SENSOR;
          break;
      default:
        break;
 8002242:	e00d      	b.n	8002260 <HAL_GPIO_EXTI_IRQHandler+0x54>
    	  MCP23008_ReadCapturedINT();
 8002244:	463b      	mov	r3, r7
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff60 	bl	800210c <MCP23008_ReadCapturedINT>
    	  TxTriggers = DRY_CONTACT;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
          break;
 8002252:	e006      	b.n	8002262 <HAL_GPIO_EXTI_IRQHandler+0x56>
    	  TxTriggers = SMOKE_SENSOR;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_GPIO_EXTI_IRQHandler+0x64>)
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
          break;
 800225a:	e002      	b.n	8002262 <HAL_GPIO_EXTI_IRQHandler+0x56>
    }

  }
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <HAL_GPIO_EXTI_IRQHandler+0x56>
        break;
 8002260:	bf00      	nop
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	58000800 	.word	0x58000800
 8002270:	2000048c 	.word	0x2000048c

08002274 <ReadSmokeStatus>:

SmokeStatus ReadSmokeStatus(void)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    SmokeStatus smokeStatus;
    smokeStatus.pinA = HAL_GPIO_ReadPin(GPIOB, SMOKE_A_Pin);
 800227c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002280:	482e      	ldr	r0, [pc, #184]	; (800233c <ReadSmokeStatus+0xc8>)
 8002282:	f002 f8ab 	bl	80043dc <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	733b      	strb	r3, [r7, #12]
    smokeStatus.pinB = HAL_GPIO_ReadPin(GPIOB, SMOKE_B_Pin);
 8002294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002298:	4828      	ldr	r0, [pc, #160]	; (800233c <ReadSmokeStatus+0xc8>)
 800229a:	f002 f89f 	bl	80043dc <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	737b      	strb	r3, [r7, #13]

    if (!smokeStatus.pinA && !smokeStatus.pinB) {
 80022ac:	7b3b      	ldrb	r3, [r7, #12]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <ReadSmokeStatus+0x5a>
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <ReadSmokeStatus+0x5a>
        smokeStatus.status = "Clean";
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <ReadSmokeStatus+0xcc>)
 80022c6:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	753b      	strb	r3, [r7, #20]
 80022cc:	e02a      	b.n	8002324 <ReadSmokeStatus+0xb0>
    } else if (!smokeStatus.pinA && smokeStatus.pinB) {
 80022ce:	7b3b      	ldrb	r3, [r7, #12]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <ReadSmokeStatus+0x76>
 80022da:	7b7b      	ldrb	r3, [r7, #13]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <ReadSmokeStatus+0x76>
        smokeStatus.status = "Light Pollution";
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <ReadSmokeStatus+0xd0>)
 80022e2:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	753b      	strb	r3, [r7, #20]
 80022e8:	e01c      	b.n	8002324 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && !smokeStatus.pinB) {
 80022ea:	7b3b      	ldrb	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <ReadSmokeStatus+0x92>
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <ReadSmokeStatus+0x92>
        smokeStatus.status = "Moderate Pollution";
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <ReadSmokeStatus+0xd4>)
 80022fe:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 3;
 8002300:	2303      	movs	r3, #3
 8002302:	753b      	strb	r3, [r7, #20]
 8002304:	e00e      	b.n	8002324 <ReadSmokeStatus+0xb0>
    } else if (smokeStatus.pinA && smokeStatus.pinB) {
 8002306:	7b3b      	ldrb	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <ReadSmokeStatus+0xa8>
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <ReadSmokeStatus+0xa8>
        smokeStatus.status = "Severe Pollution";
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <ReadSmokeStatus+0xd8>)
 8002314:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 4;
 8002316:	2304      	movs	r3, #4
 8002318:	753b      	strb	r3, [r7, #20]
 800231a:	e003      	b.n	8002324 <ReadSmokeStatus+0xb0>
    } else {
        smokeStatus.status = "Unknown"; // Fallback case, should not occur
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <ReadSmokeStatus+0xdc>)
 800231e:	613b      	str	r3, [r7, #16]
        smokeStatus.level = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	753b      	strb	r3, [r7, #20]
    }

    return smokeStatus;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	461c      	mov	r4, r3
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	48000400 	.word	0x48000400
 8002340:	0800e078 	.word	0x0800e078
 8002344:	0800e080 	.word	0x0800e080
 8002348:	0800e090 	.word	0x0800e090
 800234c:	0800e0a4 	.word	0x0800e0a4
 8002350:	0800e0b8 	.word	0x0800e0b8

08002354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_UART_RxCpltCallback+0x1cc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10c      	bne.n	8002380 <HAL_UART_RxCpltCallback+0x2c>
	  {
		  Modbus_RxCallback(&ModbusResp);
 8002366:	486f      	ldr	r0, [pc, #444]	; (8002524 <HAL_UART_RxCpltCallback+0x1d0>)
 8002368:	f7ff f938 	bl	80015dc <Modbus_RxCallback>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_UART_RxCpltCallback+0x1d0>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_UART_RxCpltCallback+0x1d4>)
 8002374:	4413      	add	r3, r2
 8002376:	2201      	movs	r2, #1
 8002378:	4619      	mov	r1, r3
 800237a:	486c      	ldr	r0, [pc, #432]	; (800252c <HAL_UART_RxCpltCallback+0x1d8>)
 800237c:	f005 f90a 	bl	8007594 <HAL_UART_Receive_IT>
	  }

	  if (huart->Instance == LPUART1) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6a      	ldr	r2, [pc, #424]	; (8002530 <HAL_UART_RxCpltCallback+0x1dc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 80c5 	bne.w	8002516 <HAL_UART_RxCpltCallback+0x1c2>
		  // Handle received data
		  uint8_t receivedData = huart->pRxBuffPtr[-1]; // Last received byte
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002394:	73fb      	strb	r3, [r7, #15]

		  if(lpuartState != UART_IDLE){
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_UART_RxCpltCallback+0x1e0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80b4 	beq.w	8002508 <HAL_UART_RxCpltCallback+0x1b4>
			  // Store received data in buffer
			  responseBuffer[bufferIndex++] = receivedData;
 80023a0:	4b65      	ldr	r3, [pc, #404]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	b291      	uxth	r1, r2
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80023aa:	8011      	strh	r1, [r2, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4a63      	ldr	r2, [pc, #396]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	5453      	strb	r3, [r2, r1]
			  mcuResetMillis = HAL_GetTick();
 80023b4:	f001 fc7e 	bl	8003cb4 <HAL_GetTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a61      	ldr	r2, [pc, #388]	; (8002540 <HAL_UART_RxCpltCallback+0x1ec>)
 80023bc:	6013      	str	r3, [r2, #0]
			  // Check if the buffer is full or if the received character is \r or \n
			  if (receivedData == '\r' || receivedData == '\n' || bufferIndex >= MAX_UART_BUFFER_SIZE) {
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b0d      	cmp	r3, #13
 80023c2:	d008      	beq.n	80023d6 <HAL_UART_RxCpltCallback+0x82>
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b0a      	cmp	r3, #10
 80023c8:	d005      	beq.n	80023d6 <HAL_UART_RxCpltCallback+0x82>
 80023ca:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023d2:	f0c0 8099 	bcc.w	8002508 <HAL_UART_RxCpltCallback+0x1b4>
				  //responseBuffer[bufferIndex] = '\r'; // Null-terminate the string
				  //printf("Received: %s\n", responseBuffer);
				  switch(lpuartState){
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_UART_RxCpltCallback+0x1e0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	f200 8091 	bhi.w	8002502 <HAL_UART_RxCpltCallback+0x1ae>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <HAL_UART_RxCpltCallback+0x94>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	08002503 	.word	0x08002503
 80023ec:	08002401 	.word	0x08002401
 80023f0:	08002417 	.word	0x08002417
 80023f4:	08002443 	.word	0x08002443
 80023f8:	08002459 	.word	0x08002459
 80023fc:	08002497 	.word	0x08002497
				  case AT_RESPONSE_CAPTURE_OK:
					  if (strstr(responseBuffer, "OK") != NULL) {
 8002400:	4950      	ldr	r1, [pc, #320]	; (8002544 <HAL_UART_RxCpltCallback+0x1f0>)
 8002402:	484e      	ldr	r0, [pc, #312]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 8002404:	f008 f8f3 	bl	800a5ee <strstr>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d070      	beq.n	80024f0 <HAL_UART_RxCpltCallback+0x19c>
						  //printf("OK RECEIVED\r\n");
						  responseReceived = true;
 800240e:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_UART_RxCpltCallback+0x1f4>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
					  }
					  break;
 8002414:	e06c      	b.n	80024f0 <HAL_UART_RxCpltCallback+0x19c>
				  case AT_RESPONSE_CAPTURE_NVM_STORED:
					  if (strstr(responseBuffer, "NVM DATA STORED") != NULL) {
 8002416:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_UART_RxCpltCallback+0x1f8>)
 8002418:	4848      	ldr	r0, [pc, #288]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 800241a:	f008 f8e8 	bl	800a5ee <strstr>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_UART_RxCpltCallback+0xd8>
						  responseReceived = true;
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_UART_RxCpltCallback+0x1f4>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
					  }
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
						  responseReceived = true;
						  //printf("STORE OK RECEIVED\r\n");
					  }
					  break;
 800242a:	e063      	b.n	80024f4 <HAL_UART_RxCpltCallback+0x1a0>
					  else if (strstr(responseBuffer, "NVM DATA UP TO DATE") != NULL) {
 800242c:	4948      	ldr	r1, [pc, #288]	; (8002550 <HAL_UART_RxCpltCallback+0x1fc>)
 800242e:	4843      	ldr	r0, [pc, #268]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 8002430:	f008 f8dd 	bl	800a5ee <strstr>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d05c      	beq.n	80024f4 <HAL_UART_RxCpltCallback+0x1a0>
						  responseReceived = true;
 800243a:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_UART_RxCpltCallback+0x1f4>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
					  break;
 8002440:	e058      	b.n	80024f4 <HAL_UART_RxCpltCallback+0x1a0>
				  case AT_RESPONSE_CAPTURE_RESET:
					  if (strstr(responseBuffer, "APPLICATION_VERSION") != NULL) {
 8002442:	4944      	ldr	r1, [pc, #272]	; (8002554 <HAL_UART_RxCpltCallback+0x200>)
 8002444:	483d      	ldr	r0, [pc, #244]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 8002446:	f008 f8d2 	bl	800a5ee <strstr>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d053      	beq.n	80024f8 <HAL_UART_RxCpltCallback+0x1a4>
						  responseReceived = true;
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_UART_RxCpltCallback+0x1f4>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
						  //printf("RESET RECEIVED\r\n");
					  }
					  break;
 8002456:	e04f      	b.n	80024f8 <HAL_UART_RxCpltCallback+0x1a4>
				  case AT_RESPONSE_CAPTURE_JOIN:
				  {
					  if (strstr(responseBuffer, "EVT:JOINED") != NULL) {
 8002458:	493f      	ldr	r1, [pc, #252]	; (8002558 <HAL_UART_RxCpltCallback+0x204>)
 800245a:	4838      	ldr	r0, [pc, #224]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 800245c:	f008 f8c7 	bl	800a5ee <strstr>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_UART_RxCpltCallback+0x126>
						  responseReceived = true;
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_UART_RxCpltCallback+0x1f4>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
						  hasJoinedNetwork = true;
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_UART_RxCpltCallback+0x208>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
						  //printf("EVENT JOINED\r\n");
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
						  bufferIndex = 0;
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
						  hasJoinedNetwork = false;
						  //printf("EVENT JOIN FAILED\r\n");
						  bufferIndex = 0;
						  //memset(responseBuffer, '\0', MAX_UART_BUFFER_SIZE);
					  }
					  break;
 8002478:	e040      	b.n	80024fc <HAL_UART_RxCpltCallback+0x1a8>
					  else if (strstr(responseBuffer, "EVT:JOIN FAILED") != NULL) {
 800247a:	4939      	ldr	r1, [pc, #228]	; (8002560 <HAL_UART_RxCpltCallback+0x20c>)
 800247c:	482f      	ldr	r0, [pc, #188]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 800247e:	f008 f8b6 	bl	800a5ee <strstr>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d039      	beq.n	80024fc <HAL_UART_RxCpltCallback+0x1a8>
						  hasJoinedNetwork = false;
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_UART_RxCpltCallback+0x208>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
						  bufferIndex = 0;
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 8002490:	2200      	movs	r2, #0
 8002492:	801a      	strh	r2, [r3, #0]
					  break;
 8002494:	e032      	b.n	80024fc <HAL_UART_RxCpltCallback+0x1a8>
				  }
				  case AT_RESPONSE_CAPTURE_SEND_OK:
					  if (strstr(responseBuffer, "NO_NETWORK_JOINED") != NULL) {
 8002496:	4933      	ldr	r1, [pc, #204]	; (8002564 <HAL_UART_RxCpltCallback+0x210>)
 8002498:	4828      	ldr	r0, [pc, #160]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 800249a:	f008 f8a8 	bl	800a5ee <strstr>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_UART_RxCpltCallback+0x158>
						 bufferIndex = 0;
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	801a      	strh	r2, [r3, #0]
						  isDownlinkReceived = true;
						  downlinkBufferLen = bufferIndex;
						  memcpy(downlinkBuffer, responseBuffer, bufferIndex);
					  }

					  break;
 80024aa:	e029      	b.n	8002500 <HAL_UART_RxCpltCallback+0x1ac>
					  else if (strstr(responseBuffer, "OK") != NULL) {
 80024ac:	4925      	ldr	r1, [pc, #148]	; (8002544 <HAL_UART_RxCpltCallback+0x1f0>)
 80024ae:	4823      	ldr	r0, [pc, #140]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 80024b0:	f008 f89d 	bl	800a5ee <strstr>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_UART_RxCpltCallback+0x16e>
						  bufferIndex = 0;
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
					  break;
 80024c0:	e01e      	b.n	8002500 <HAL_UART_RxCpltCallback+0x1ac>
					  else if (strstr(responseBuffer, "+EVT:5:") != NULL) {
 80024c2:	4929      	ldr	r1, [pc, #164]	; (8002568 <HAL_UART_RxCpltCallback+0x214>)
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 80024c6:	f008 f892 	bl	800a5ee <strstr>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d017      	beq.n	8002500 <HAL_UART_RxCpltCallback+0x1ac>
						  isDownlinkReceived = true;
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_UART_RxCpltCallback+0x218>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
						  downlinkBufferLen = bufferIndex;
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_UART_RxCpltCallback+0x21c>)
 80024de:	701a      	strb	r2, [r3, #0]
						  memcpy(downlinkBuffer, responseBuffer, bufferIndex);
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4915      	ldr	r1, [pc, #84]	; (800253c <HAL_UART_RxCpltCallback+0x1e8>)
 80024e8:	4822      	ldr	r0, [pc, #136]	; (8002574 <HAL_UART_RxCpltCallback+0x220>)
 80024ea:	f007 f801 	bl	80094f0 <memcpy>
					  break;
 80024ee:	e007      	b.n	8002500 <HAL_UART_RxCpltCallback+0x1ac>
					  break;
 80024f0:	bf00      	nop
 80024f2:	e006      	b.n	8002502 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80024f4:	bf00      	nop
 80024f6:	e004      	b.n	8002502 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80024f8:	bf00      	nop
 80024fa:	e002      	b.n	8002502 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 80024fc:	bf00      	nop
 80024fe:	e000      	b.n	8002502 <HAL_UART_RxCpltCallback+0x1ae>
					  break;
 8002500:	bf00      	nop
					  // do nothing for now
					  break;
				  }

				  // Clear the buffer and reset index
				  bufferIndex = 0;
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_UART_RxCpltCallback+0x1e4>)
 8002504:	2200      	movs	r2, #0
 8002506:	801a      	strh	r2, [r3, #0]
//				  bufferIndex = 0; // Reset buffer after handling event
//			  }
//		  }

		  // Restart reception
		  HAL_UART_Receive_IT(huart, huart->pRxBuffPtr, 1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	2201      	movs	r2, #1
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f005 f83f 	bl	8007594 <HAL_UART_Receive_IT>
	  }

}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40013800 	.word	0x40013800
 8002524:	20000490 	.word	0x20000490
 8002528:	20000492 	.word	0x20000492
 800252c:	200003f8 	.word	0x200003f8
 8002530:	40008000 	.word	0x40008000
 8002534:	20000584 	.word	0x20000584
 8002538:	20000678 	.word	0x20000678
 800253c:	200005b0 	.word	0x200005b0
 8002540:	20000594 	.word	0x20000594
 8002544:	0800e0c0 	.word	0x0800e0c0
 8002548:	200005ad 	.word	0x200005ad
 800254c:	0800e0c4 	.word	0x0800e0c4
 8002550:	0800e0d4 	.word	0x0800e0d4
 8002554:	0800e0e8 	.word	0x0800e0e8
 8002558:	0800e0fc 	.word	0x0800e0fc
 800255c:	20000585 	.word	0x20000585
 8002560:	0800e108 	.word	0x0800e108
 8002564:	0800e118 	.word	0x0800e118
 8002568:	0800e12c 	.word	0x0800e12c
 800256c:	2000067a 	.word	0x2000067a
 8002570:	2000067b 	.word	0x2000067b
 8002574:	20000614 	.word	0x20000614

08002578 <WDTReset>:

void WDTReset(void){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <WDTReset+0x28>)
 8002584:	f001 ff42 	bl	800440c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002588:	2001      	movs	r0, #1
 800258a:	f001 fbab 	bl	8003ce4 <HAL_Delay>
	HAL_GPIO_WritePin(WDT_DONE_GPIO_Port, WDT_DONE_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <WDTReset+0x28>)
 8002596:	f001 ff39 	bl	800440c <HAL_GPIO_WritePin>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	48000400 	.word	0x48000400

080025a4 <dataToByteArray>:
    }
    printf("\r\n");
}

// Function to convert data to byte array
uint8_t dataToByteArray(void *input, uint8_t *output, DataType type) {
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	71fb      	strb	r3, [r7, #7]
    uint8_t size = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
    switch (type) {
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d849      	bhi.n	8002650 <dataToByteArray+0xac>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <dataToByteArray+0x20>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025e1 	.word	0x080025e1
 80025c8:	080025ef 	.word	0x080025ef
 80025cc:	080025ff 	.word	0x080025ff
 80025d0:	0800260f 	.word	0x0800260f
 80025d4:	08002621 	.word	0x08002621
 80025d8:	08002631 	.word	0x08002631
 80025dc:	08002641 	.word	0x08002641
        case TYPE_UINT8:
            output[0] = *((uint8_t*)input);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	701a      	strb	r2, [r3, #0]
            size = sizeof(uint8_t);
 80025e8:	2301      	movs	r3, #1
 80025ea:	75fb      	strb	r3, [r7, #23]
            break;
 80025ec:	e031      	b.n	8002652 <dataToByteArray+0xae>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
        case TYPE_UINT16:
            memcpy(output, input, sizeof(uint16_t));
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	801a      	strh	r2, [r3, #0]
            size = sizeof(uint16_t);
 80025f8:	2302      	movs	r3, #2
 80025fa:	75fb      	strb	r3, [r7, #23]
            break;
 80025fc:	e029      	b.n	8002652 <dataToByteArray+0xae>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
        case TYPE_UINT32:
            memcpy(output, input, sizeof(uint32_t));
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	601a      	str	r2, [r3, #0]
            size = sizeof(uint32_t);
 8002608:	2304      	movs	r3, #4
 800260a:	75fb      	strb	r3, [r7, #23]
            break;
 800260c:	e021      	b.n	8002652 <dataToByteArray+0xae>
        case TYPE_INT8:
            output[0] = *((int8_t*)input);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f993 3000 	ldrsb.w	r3, [r3]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	701a      	strb	r2, [r3, #0]
            size = sizeof(int8_t);
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
            break;
 800261e:	e018      	b.n	8002652 <dataToByteArray+0xae>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
        case TYPE_INT16:
            memcpy(output, input, sizeof(int16_t));
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	801a      	strh	r2, [r3, #0]
            size = sizeof(int16_t);
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
            break;
 800262e:	e010      	b.n	8002652 <dataToByteArray+0xae>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
        case TYPE_INT32:
            memcpy(output, input, sizeof(int32_t));
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	601a      	str	r2, [r3, #0]
            size = sizeof(int32_t);
 800263a:	2304      	movs	r3, #4
 800263c:	75fb      	strb	r3, [r7, #23]
            break;
 800263e:	e008      	b.n	8002652 <dataToByteArray+0xae>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
        case TYPE_FLOAT:
            memcpy(output, input, sizeof(float));
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	601a      	str	r2, [r3, #0]
            size = sizeof(float);
 800264a:	2304      	movs	r3, #4
 800264c:	75fb      	strb	r3, [r7, #23]
            break;
 800264e:	e000      	b.n	8002652 <dataToByteArray+0xae>
        default:
        	break;
 8002650:	bf00      	nop
    }
    return size;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <generatePayload>:


// Function to generate the payload
bool generatePayload(void **inputs, DataType *types, uint8_t itemCount, MessageType msgType, TxPayload *payload) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	460b      	mov	r3, r1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	4613      	mov	r3, r2
 8002674:	71bb      	strb	r3, [r7, #6]
    if (inputs == NULL || types == NULL || itemCount == 0 || itemCount > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <generatePayload+0x2e>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <generatePayload+0x2e>
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <generatePayload+0x2e>
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b32      	cmp	r3, #50	; 0x32
 800268c:	d901      	bls.n	8002692 <generatePayload+0x32>
        return false;
 800268e:	2300      	movs	r3, #0
 8002690:	e033      	b.n	80026fa <generatePayload+0x9a>
    }

    payload->msgType = msgType;
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	701a      	strb	r2, [r3, #0]
    payload->buffer[0] = msgType;
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	79ba      	ldrb	r2, [r7, #6]
 800269c:	705a      	strb	r2, [r3, #1]
    uint8_t index = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < itemCount; ++i) {
 80026a2:	2300      	movs	r3, #0
 80026a4:	75bb      	strb	r3, [r7, #22]
 80026a6:	e01f      	b.n	80026e8 <generatePayload+0x88>
        uint8_t size = dataToByteArray(inputs[i], &payload->buffer[index], types[i]);
 80026a8:	7dbb      	ldrb	r3, [r7, #22]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	4413      	add	r3, r2
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	7dbb      	ldrb	r3, [r7, #22]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff ff6e 	bl	80025a4 <dataToByteArray>
 80026c8:	4603      	mov	r3, r0
 80026ca:	757b      	strb	r3, [r7, #21]
        if (index + size > MAX_LORA_PAYLOAD_BUFFER_SIZE) {
 80026cc:	7dfa      	ldrb	r2, [r7, #23]
 80026ce:	7d7b      	ldrb	r3, [r7, #21]
 80026d0:	4413      	add	r3, r2
 80026d2:	2b32      	cmp	r3, #50	; 0x32
 80026d4:	dd01      	ble.n	80026da <generatePayload+0x7a>
            return false; // Exceeds maximum buffer size
 80026d6:	2300      	movs	r3, #0
 80026d8:	e00f      	b.n	80026fa <generatePayload+0x9a>
        }
        index += size;
 80026da:	7dfa      	ldrb	r2, [r7, #23]
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	4413      	add	r3, r2
 80026e0:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < itemCount; ++i) {
 80026e2:	7dbb      	ldrb	r3, [r7, #22]
 80026e4:	3301      	adds	r3, #1
 80026e6:	75bb      	strb	r3, [r7, #22]
 80026e8:	7dba      	ldrb	r2, [r7, #22]
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3db      	bcc.n	80026a8 <generatePayload+0x48>
    }

    payload->length = index;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	7dfa      	ldrb	r2, [r7, #23]
 80026f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return true;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <generateUnscheduledTxPayload>:

bool generateUnscheduledTxPayload(Sensors sensors, TxPayload *payload){
 8002704:	b084      	sub	sp, #16
 8002706:	b580      	push	{r7, lr}
 8002708:	b08c      	sub	sp, #48	; 0x30
 800270a:	af02      	add	r7, sp, #8
 800270c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8002710:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = UNSCHEDULED_TRANSMISSION;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value, &sensors.smoke.level, &sensors.leak.state, &sensors.accel.status};
 800271a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800273c:	623b      	str	r3, [r7, #32]
	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8, TYPE_UINT8, TYPE_UINT8};
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <generateUnscheduledTxPayload+0x78>)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002746:	6018      	str	r0, [r3, #0]
 8002748:	3304      	adds	r3, #4
 800274a:	8019      	strh	r1, [r3, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 800274c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002750:	1d39      	adds	r1, r7, #4
 8002752:	f107 000c 	add.w	r0, r7, #12
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	2206      	movs	r2, #6
 8002760:	f7ff ff7e 	bl	8002660 <generatePayload>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 800276a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002778:	b004      	add	sp, #16
 800277a:	4770      	bx	lr
 800277c:	0800e164 	.word	0x0800e164

08002780 <generateHeartbeatTxPayload>:

bool generateHeartbeatTxPayload(Sensors sensors, TxPayload *payload){
 8002780:	b084      	sub	sp, #16
 8002782:	b580      	push	{r7, lr}
 8002784:	b090      	sub	sp, #64	; 0x40
 8002786:	af02      	add	r7, sp, #8
 8002788:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 800278c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	MessageType msgType = HEARTBEAT;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	void *inputs[] = {&sensors.sht40.temperature, &sensors.sht40.humidity, &sensors.dryContact.value,
 8002796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
					  &sensors.smoke.level, &sensors.ltc4015.VIN, &sensors.ltc4015.VBAT, &sensors.ltc4015.VSYS, &sensors.leak.state, &sensors.accel.status};

	DataType types[] = { TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8, TYPE_FLOAT, TYPE_FLOAT, TYPE_FLOAT, TYPE_UINT8, TYPE_UINT8};
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <generateHeartbeatTxPayload+0x88>)
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027d2:	c303      	stmia	r3!, {r0, r1}
 80027d4:	701a      	strb	r2, [r3, #0]

	bool ret = generatePayload(inputs, types, sizeof(inputs) / sizeof(void*), msgType, payload);
 80027d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80027da:	1d39      	adds	r1, r7, #4
 80027dc:	f107 0010 	add.w	r0, r7, #16
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	2209      	movs	r2, #9
 80027ea:	f7ff ff39 	bl	8002660 <generatePayload>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	else{
		printf("Failed to generate payload\n");
	}
#endif

	return ret;
 80027f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3738      	adds	r7, #56	; 0x38
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002802:	b004      	add	sp, #16
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	0800e16c 	.word	0x0800e16c

0800280c <setLoraCredentials>:
		break;
	}

}

bool setLoraCredentials(void){
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0

	if(!sendATCommand(AT_SET_DEVEUI, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002810:	2201      	movs	r2, #1
 8002812:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002816:	4838      	ldr	r0, [pc, #224]	; (80028f8 <setLoraCredentials+0xec>)
 8002818:	f000 f944 	bl	8002aa4 <sendATCommand>
 800281c:	4603      	mov	r3, r0
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <setLoraCredentials+0x20>
		return false;
 8002828:	2300      	movs	r3, #0
 800282a:	e062      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPEUI, 2000, AT_RESPONSE_CAPTURE_OK)){
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002832:	4832      	ldr	r0, [pc, #200]	; (80028fc <setLoraCredentials+0xf0>)
 8002834:	f000 f936 	bl	8002aa4 <sendATCommand>
 8002838:	4603      	mov	r3, r0
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <setLoraCredentials+0x3c>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e054      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800284e:	482c      	ldr	r0, [pc, #176]	; (8002900 <setLoraCredentials+0xf4>)
 8002850:	f000 f928 	bl	8002aa4 <sendATCommand>
 8002854:	4603      	mov	r3, r0
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <setLoraCredentials+0x58>
		return false;
 8002860:	2300      	movs	r3, #0
 8002862:	e046      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_NWKKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800286a:	4826      	ldr	r0, [pc, #152]	; (8002904 <setLoraCredentials+0xf8>)
 800286c:	f000 f91a 	bl	8002aa4 <sendATCommand>
 8002870:	4603      	mov	r3, r0
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <setLoraCredentials+0x74>
		return false;
 800287c:	2300      	movs	r3, #0
 800287e:	e038      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_APPSKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 8002880:	2201      	movs	r2, #1
 8002882:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002886:	4820      	ldr	r0, [pc, #128]	; (8002908 <setLoraCredentials+0xfc>)
 8002888:	f000 f90c 	bl	8002aa4 <sendATCommand>
 800288c:	4603      	mov	r3, r0
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <setLoraCredentials+0x90>
		return false;
 8002898:	2300      	movs	r3, #0
 800289a:	e02a      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_NWKSKEY, 2000, AT_RESPONSE_CAPTURE_OK)){
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80028a2:	481a      	ldr	r0, [pc, #104]	; (800290c <setLoraCredentials+0x100>)
 80028a4:	f000 f8fe 	bl	8002aa4 <sendATCommand>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <setLoraCredentials+0xac>
		return false;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e01c      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SET_ADR, 2000, AT_RESPONSE_CAPTURE_OK)){
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80028be:	4814      	ldr	r0, [pc, #80]	; (8002910 <setLoraCredentials+0x104>)
 80028c0:	f000 f8f0 	bl	8002aa4 <sendATCommand>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <setLoraCredentials+0xc8>
		return false;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e00e      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	if(!sendATCommand(AT_SAVE_TO_FLASH, 2000, AT_RESPONSE_CAPTURE_NVM_STORED)){
 80028d4:	2202      	movs	r2, #2
 80028d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <setLoraCredentials+0x108>)
 80028dc:	f000 f8e2 	bl	8002aa4 <sendATCommand>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <setLoraCredentials+0xe4>
		return false;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <setLoraCredentials+0xe6>
	}
	return true;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800e17c 	.word	0x0800e17c
 80028fc:	0800e1a0 	.word	0x0800e1a0
 8002900:	0800e1c4 	.word	0x0800e1c4
 8002904:	0800e200 	.word	0x0800e200
 8002908:	0800e23c 	.word	0x0800e23c
 800290c:	0800e27c 	.word	0x0800e27c
 8002910:	0800e2bc 	.word	0x0800e2bc
 8002914:	0800e2c8 	.word	0x0800e2c8

08002918 <joinNetwork>:

bool joinNetwork(void){
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	if(!sendATCommand(AT_JOIN_OTAA, 20000, AT_RESPONSE_CAPTURE_JOIN)){
 800291c:	2204      	movs	r2, #4
 800291e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <joinNetwork+0x2c>)
 8002924:	f000 f8be 	bl	8002aa4 <sendATCommand>
 8002928:	4603      	mov	r3, r0
 800292a:	f083 0301 	eor.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <joinNetwork+0x24>
		HAL_NVIC_SystemReset();
 8002934:	f001 fb13 	bl	8003f5e <HAL_NVIC_SystemReset>
		return false;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <joinNetwork+0x26>
	}
	return true;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800e2d0 	.word	0x0800e2d0

08002948 <sendToLora>:

    return result;
}


bool sendToLora(uint8_t portNumber, bool isConfirmedUplink, TxPayload payload){
 8002948:	b082      	sub	sp, #8
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b08b      	sub	sp, #44	; 0x2c
 800294e:	af00      	add	r7, sp, #0
 8002950:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002954:	e884 000c 	stmia.w	r4, {r2, r3}
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	460b      	mov	r3, r1
 800295e:	71bb      	strb	r3, [r7, #6]
	// Base command string
	const char *AT_SEND_ = "AT+SEND=";
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <sendToLora+0x148>)
 8002962:	623b      	str	r3, [r7, #32]

	// Convert portNumber and isConfirmedUplink to strings
	char portNumberStr[4]; // Assuming portNumber won't exceed 3 digits
	snprintf(portNumberStr, sizeof(portNumberStr), "%d", portNumber);
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f107 0010 	add.w	r0, r7, #16
 800296a:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <sendToLora+0x14c>)
 800296c:	2104      	movs	r1, #4
 800296e:	f007 fdd3 	bl	800a518 <sniprintf>

	char confirmedUplinkStr[2]; // Single digit for true (1) or false (0)
	snprintf(confirmedUplinkStr, sizeof(confirmedUplinkStr), "%d", isConfirmedUplink);
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	f107 000c 	add.w	r0, r7, #12
 8002978:	4a46      	ldr	r2, [pc, #280]	; (8002a94 <sendToLora+0x14c>)
 800297a:	2102      	movs	r1, #2
 800297c:	f007 fdcc 	bl	800a518 <sniprintf>

	// Calculate the total length needed
	int total_length = strlen(AT_SEND_) + strlen(portNumberStr) + 1 + strlen(confirmedUplinkStr) + 1 + (payload.length * 2) + 2 + 1;
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f7fd fbfd 	bl	8000180 <strlen>
 8002986:	4604      	mov	r4, r0
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fbf7 	bl	8000180 <strlen>
 8002992:	4603      	mov	r3, r0
 8002994:	441c      	add	r4, r3
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fbf0 	bl	8000180 <strlen>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4423      	add	r3, r4
 80029a4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80029a8:	0052      	lsls	r2, r2, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3305      	adds	r3, #5
 80029ae:	61fb      	str	r3, [r7, #28]

	// Allocate memory for the full command string
	char *result = (char *)malloc(total_length * sizeof(char));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 fd8c 	bl	80094d0 <malloc>
 80029b8:	4603      	mov	r3, r0
 80029ba:	61bb      	str	r3, [r7, #24]

	if (result == NULL) {
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <sendToLora+0x7e>
		// Handle memory allocation failure
		return false;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e05c      	b.n	8002a80 <sendToLora+0x138>
	}

	// Construct the command string
	strcpy(result, AT_SEND_);
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	69b8      	ldr	r0, [r7, #24]
 80029ca:	f007 fe08 	bl	800a5de <strcpy>
	strcat(result, portNumberStr);
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	4619      	mov	r1, r3
 80029d4:	69b8      	ldr	r0, [r7, #24]
 80029d6:	f007 fdf3 	bl	800a5c0 <strcat>
	strcat(result, ":");
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f7fd fbd0 	bl	8000180 <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	492b      	ldr	r1, [pc, #172]	; (8002a98 <sendToLora+0x150>)
 80029ea:	461a      	mov	r2, r3
 80029ec:	460b      	mov	r3, r1
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	8013      	strh	r3, [r2, #0]
	strcat(result, confirmedUplinkStr);
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	4619      	mov	r1, r3
 80029f8:	69b8      	ldr	r0, [r7, #24]
 80029fa:	f007 fde1 	bl	800a5c0 <strcat>
	strcat(result, ":");
 80029fe:	69b8      	ldr	r0, [r7, #24]
 8002a00:	f7fd fbbe 	bl	8000180 <strlen>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4922      	ldr	r1, [pc, #136]	; (8002a98 <sendToLora+0x150>)
 8002a0e:	461a      	mov	r2, r3
 8002a10:	460b      	mov	r3, r1
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	8013      	strh	r3, [r2, #0]

	// Concatenate the payload
	for (int x = 0; x < payload.length; x++) {
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	e013      	b.n	8002a44 <sendToLora+0xfc>
		char temp[3];
		snprintf(temp, sizeof(temp), "%02X", payload.buffer[x]);
 8002a1c:	f107 0239 	add.w	r2, r7, #57	; 0x39
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f107 0008 	add.w	r0, r7, #8
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <sendToLora+0x154>)
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	f007 fd73 	bl	800a518 <sniprintf>
		strcat(result, temp);
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4619      	mov	r1, r3
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f007 fdc1 	bl	800a5c0 <strcat>
	for (int x = 0; x < payload.length; x++) {
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	dbe5      	blt.n	8002a1c <sendToLora+0xd4>
	}

	// Append \r\n at the end
	strcat(result, "\r\n");
 8002a50:	69b8      	ldr	r0, [r7, #24]
 8002a52:	f7fd fb95 	bl	8000180 <strlen>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <sendToLora+0x158>)
 8002a60:	8811      	ldrh	r1, [r2, #0]
 8002a62:	7892      	ldrb	r2, [r2, #2]
 8002a64:	8019      	strh	r1, [r3, #0]
 8002a66:	709a      	strb	r2, [r3, #2]

	// Send the command
	bool commandSent = sendATCommand(result, 4000, AT_RESPONSE_CAPTURE_SEND_OK);
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002a6e:	69b8      	ldr	r0, [r7, #24]
 8002a70:	f000 f818 	bl	8002aa4 <sendATCommand>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]

	// Free the allocated memory
	free(result);
 8002a78:	69b8      	ldr	r0, [r7, #24]
 8002a7a:	f006 fd31 	bl	80094e0 <free>

	return commandSent;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]

}
 8002a80:	4618      	mov	r0, r3
 8002a82:	372c      	adds	r7, #44	; 0x2c
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a8a:	b002      	add	sp, #8
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	0800e2e8 	.word	0x0800e2e8
 8002a94:	0800e2f4 	.word	0x0800e2f4
 8002a98:	0800e2f8 	.word	0x0800e2f8
 8002a9c:	0800e2dc 	.word	0x0800e2dc
 8002aa0:	0800e2e4 	.word	0x0800e2e4

08002aa4 <sendATCommand>:

bool sendATCommand(char *command, uint32_t responseWaitTime, LPUARTState _lpuartState) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	71fb      	strb	r3, [r7, #7]

    lpuartState = _lpuartState;
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <sendATCommand+0x5c>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	7013      	strb	r3, [r2, #0]
    //bufferIndex = 0;
    responseReceived = false;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <sendATCommand+0x60>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    printf(command);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f007 fc86 	bl	800a3d0 <iprintf>

    // Wait for response or timeout
    uint32_t startTick = HAL_GetTick();
 8002ac4:	f001 f8f6 	bl	8003cb4 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 8002aca:	e008      	b.n	8002ade <sendATCommand+0x3a>
    	// Internal IWDT Feed
        HAL_IWDG_Refresh(&hiwdg);
 8002acc:	480e      	ldr	r0, [pc, #56]	; (8002b08 <sendATCommand+0x64>)
 8002ace:	f002 fe85 	bl	80057dc <HAL_IWDG_Refresh>
    	if (responseReceived) {
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <sendATCommand+0x60>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <sendATCommand+0x3a>
            return true; // "OK" response received
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00b      	b.n	8002af6 <sendATCommand+0x52>
    while ((HAL_GetTick() - startTick) < responseWaitTime) {
 8002ade:	f001 f8e9 	bl	8003cb4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d8ee      	bhi.n	8002acc <sendATCommand+0x28>
        }
    }

    lpuartState = UART_IDLE;
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <sendATCommand+0x5c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]

    return false; // Timeout occurred without receiving "OK"
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000584 	.word	0x20000584
 8002b04:	200005ad 	.word	0x200005ad
 8002b08:	20000354 	.word	0x20000354

08002b0c <readSHT40>:

void readSHT40(SHT40 *_sht40){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = SHT40_Measure(&hi2c1, &sht40, MED_PRECISION);
 8002b14:	22f6      	movs	r2, #246	; 0xf6
 8002b16:	4971      	ldr	r1, [pc, #452]	; (8002cdc <readSHT40+0x1d0>)
 8002b18:	4871      	ldr	r0, [pc, #452]	; (8002ce0 <readSHT40+0x1d4>)
 8002b1a:	f000 fc08 	bl	800332e <SHT40_Measure>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]

	if(ret == HAL_ERROR){
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <readSHT40+0x2e>
		_sht40->temperature  = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
		_sht40->humidity     = 0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
	}




}
 8002b38:	e0cb      	b.n	8002cd2 <readSHT40+0x1c6>
		_sht40->temperature = sht40.temperature;
 8002b3a:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <readSHT40+0x1d0>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
		_sht40->humidity    = sht40.rel_humidity;
 8002b42:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <readSHT40+0x1d0>)
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	605a      	str	r2, [r3, #4]
		if(_sht40->temperature > _sht40->thresholds.temp_high + _sht40->thresholds.temp_hys){
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	ed93 7a00 	vldr	s14, [r3]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	dd0a      	ble.n	8002b80 <readSHT40+0x74>
			if(_sht40->alarmState.temperature != ABOVE_THRESHOLD){
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d005      	beq.n	8002b80 <readSHT40+0x74>
				_sht40->alarmState.temperature = ABOVE_THRESHOLD;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002b7c:	f000 fb56 	bl	800322c <queueUnscheduledPayload>
		if(_sht40->temperature < _sht40->thresholds.temp_low - _sht40->thresholds.temp_hys){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d50a      	bpl.n	8002bb6 <readSHT40+0xaa>
			if(_sht40->alarmState.temperature != BELOW_THRESHOLD){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d005      	beq.n	8002bb6 <readSHT40+0xaa>
				_sht40->alarmState.temperature = BELOW_THRESHOLD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002bb2:	f000 fb3b 	bl	800322c <queueUnscheduledPayload>
		if(_sht40->temperature > (_sht40->thresholds.temp_low + _sht40->thresholds.temp_hys)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	dd1a      	ble.n	8002c0c <readSHT40+0x100>
			&& _sht40->temperature < (_sht40->thresholds.temp_high - _sht40->thresholds.temp_hys)){
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	ed93 7a00 	vldr	s14, [r3]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edd3 6a03 	vldr	s13, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002be8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d50a      	bpl.n	8002c0c <readSHT40+0x100>
			if(_sht40->alarmState.temperature != NORMAL){
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <readSHT40+0x100>
				_sht40->alarmState.temperature = NORMAL;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2020 	strb.w	r2, [r3, #32]
				queueUnscheduledPayload();
 8002c08:	f000 fb10 	bl	800322c <queueUnscheduledPayload>
		if(_sht40->humidity > _sht40->thresholds.rel_high + _sht40->thresholds.rel_hys){
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	dd0a      	ble.n	8002c42 <readSHT40+0x136>
			if(_sht40->alarmState.humidity != ABOVE_THRESHOLD){
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d005      	beq.n	8002c42 <readSHT40+0x136>
				_sht40->alarmState.humidity = ABOVE_THRESHOLD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002c3e:	f000 faf5 	bl	800322c <queueUnscheduledPayload>
		if(_sht40->humidity < _sht40->thresholds.rel_low - _sht40->thresholds.rel_hys){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d50a      	bpl.n	8002c78 <readSHT40+0x16c>
			if(_sht40->alarmState.humidity != BELOW_THRESHOLD){
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d005      	beq.n	8002c78 <readSHT40+0x16c>
				_sht40->alarmState.humidity = BELOW_THRESHOLD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002c74:	f000 fada 	bl	800322c <queueUnscheduledPayload>
		if(_sht40->humidity > (_sht40->thresholds.rel_low + _sht40->thresholds.rel_hys)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	dc00      	bgt.n	8002c9a <readSHT40+0x18e>
}
 8002c98:	e01b      	b.n	8002cd2 <readSHT40+0x1c6>
			&& _sht40->humidity < (_sht40->thresholds.rel_high - _sht40->thresholds.rel_hys)){
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	d400      	bmi.n	8002cbc <readSHT40+0x1b0>
}
 8002cba:	e00a      	b.n	8002cd2 <readSHT40+0x1c6>
			if(_sht40->alarmState.humidity != NORMAL){
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <readSHT40+0x1c6>
				_sht40->alarmState.humidity = NORMAL;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				queueUnscheduledPayload();
 8002cce:	f000 faad 	bl	800322c <queueUnscheduledPayload>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000059c 	.word	0x2000059c
 8002ce0:	20000300 	.word	0x20000300

08002ce4 <platform_write>:


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af04      	add	r7, sp, #16
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	72fb      	strb	r3, [r7, #11]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	2131      	movs	r1, #49	; 0x31
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f001 fe0e 	bl	8004930 <HAL_I2C_Mem_Write>
  return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b088      	sub	sp, #32
 8002d22:	af04      	add	r7, sp, #16
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	72fb      	strb	r3, [r7, #11]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3a:	9302      	str	r3, [sp, #8]
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	2131      	movs	r1, #49	; 0x31
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f001 ff05 	bl	8004b58 <HAL_I2C_Mem_Read>

  return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 ffbf 	bl	8003ce4 <HAL_Delay>

}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <initAccelerometer>:

bool initAccelerometer(void){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	// Initialize Accelerometer
	/* Initialize mems driver interface */

	  dev_ctx.write_reg = platform_write;
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <initAccelerometer+0xcc>)
 8002d82:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <initAccelerometer+0xd0>)
 8002d84:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <initAccelerometer+0xcc>)
 8002d88:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <initAccelerometer+0xd4>)
 8002d8a:	605a      	str	r2, [r3, #4]
	  dev_ctx.mdelay = platform_delay;
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <initAccelerometer+0xcc>)
 8002d8e:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <initAccelerometer+0xd8>)
 8002d90:	609a      	str	r2, [r3, #8]
	  dev_ctx.handle = &hi2c1;
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <initAccelerometer+0xcc>)
 8002d94:	4a30      	ldr	r2, [pc, #192]	; (8002e58 <initAccelerometer+0xdc>)
 8002d96:	60da      	str	r2, [r3, #12]
	  /* Initialize platform specific hardware */
	  platform_init();
 8002d98:	f7ff ffe9 	bl	8002d6e <platform_init>
	  /* Wait sensor boot time */
	  platform_delay(BOOT_TIME);
 8002d9c:	2014      	movs	r0, #20
 8002d9e:	f7ff ffdb 	bl	8002d58 <platform_delay>
	  /* Check device ID */
	  lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8002da2:	492e      	ldr	r1, [pc, #184]	; (8002e5c <initAccelerometer+0xe0>)
 8002da4:	4828      	ldr	r0, [pc, #160]	; (8002e48 <initAccelerometer+0xcc>)
 8002da6:	f7fe fa05 	bl	80011b4 <lis2dw12_device_id_get>

	  if (whoamI != LIS2DW12_ID){
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <initAccelerometer+0xe0>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b44      	cmp	r3, #68	; 0x44
 8002db0:	d001      	beq.n	8002db6 <initAccelerometer+0x3a>
		  return false;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e045      	b.n	8002e42 <initAccelerometer+0xc6>
	  }

	  /* Restore default configuration */
	   lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002db6:	2101      	movs	r1, #1
 8002db8:	4823      	ldr	r0, [pc, #140]	; (8002e48 <initAccelerometer+0xcc>)
 8002dba:	f7fe fa0c 	bl	80011d6 <lis2dw12_reset_set>

	   do {
		 lis2dw12_reset_get(&dev_ctx, &rst);
 8002dbe:	4928      	ldr	r1, [pc, #160]	; (8002e60 <initAccelerometer+0xe4>)
 8002dc0:	4821      	ldr	r0, [pc, #132]	; (8002e48 <initAccelerometer+0xcc>)
 8002dc2:	f7fe fa2e 	bl	8001222 <lis2dw12_reset_get>
	   } while (rst);
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <initAccelerometer+0xe4>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f7      	bne.n	8002dbe <initAccelerometer+0x42>


     /* Set full scale */
	 lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	481d      	ldr	r0, [pc, #116]	; (8002e48 <initAccelerometer+0xcc>)
 8002dd2:	f7fe f9b8 	bl	8001146 <lis2dw12_full_scale_set>
	 /* Configure filtering chain
	  * Accelerometer - filter path / bandwidth
	  */
	 lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	481b      	ldr	r0, [pc, #108]	; (8002e48 <initAccelerometer+0xcc>)
 8002dda:	f7fe fa3b 	bl	8001254 <lis2dw12_filter_path_set>
	 lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 8002dde:	2101      	movs	r1, #1
 8002de0:	4819      	ldr	r0, [pc, #100]	; (8002e48 <initAccelerometer+0xcc>)
 8002de2:	f7fe fa7c 	bl	80012de <lis2dw12_filter_bandwidth_set>
	 /* Configure power mode */
	 lis2dw12_power_mode_set(&dev_ctx,
 8002de6:	2110      	movs	r1, #16
 8002de8:	4817      	ldr	r0, [pc, #92]	; (8002e48 <initAccelerometer+0xcc>)
 8002dea:	f7fe f919 	bl	8001020 <lis2dw12_power_mode_set>
//	    lis2dw12_pin_int1_route_set(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);

	 /* Set wake-up duration
	  * Wake up duration event 1LSb = 1 / ODR
	  */
	 lis2dw12_wkup_dur_set(&dev_ctx, 2);
 8002dee:	2102      	movs	r1, #2
 8002df0:	4815      	ldr	r0, [pc, #84]	; (8002e48 <initAccelerometer+0xcc>)
 8002df2:	f7fe fb3b 	bl	800146c <lis2dw12_wkup_dur_set>
	 /* Set sleep duration
	  * Duration to go in sleep mode (1 LSb = 512 / ODR)
	  */
	 lis2dw12_act_sleep_dur_set(&dev_ctx, 3);
 8002df6:	2103      	movs	r1, #3
 8002df8:	4813      	ldr	r0, [pc, #76]	; (8002e48 <initAccelerometer+0xcc>)
 8002dfa:	f7fe fbc8 	bl	800158e <lis2dw12_act_sleep_dur_set>
	 /* Set Activity wake-up threshold
	  * Threshold for wake-up 1 LSB = FS_XL / 64
	  */
	 lis2dw12_wkup_threshold_set(&dev_ctx, 1);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4811      	ldr	r0, [pc, #68]	; (8002e48 <initAccelerometer+0xcc>)
 8002e02:	f7fe fb0d 	bl	8001420 <lis2dw12_wkup_threshold_set>
	 /* Data sent to wake-up interrupt function */
	 lis2dw12_wkup_feed_data_set(&dev_ctx, LIS2DW12_HP_FEED);
 8002e06:	2100      	movs	r1, #0
 8002e08:	480f      	ldr	r0, [pc, #60]	; (8002e48 <initAccelerometer+0xcc>)
 8002e0a:	f7fe fb55 	bl	80014b8 <lis2dw12_wkup_feed_data_set>
	 /* Config activity / inactivity or stationary / motion detection */
	 lis2dw12_act_mode_set(&dev_ctx, LIS2DW12_DETECT_ACT_INACT);
 8002e0e:	2101      	movs	r1, #1
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <initAccelerometer+0xcc>)
 8002e12:	f7fe fb77 	bl	8001504 <lis2dw12_act_mode_set>
	 /* Enable activity detection interrupt */
	 lis2dw12_pin_int1_route_get(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);
 8002e16:	4913      	ldr	r1, [pc, #76]	; (8002e64 <initAccelerometer+0xe8>)
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <initAccelerometer+0xcc>)
 8002e1a:	f7fe faf0 	bl	80013fe <lis2dw12_pin_int1_route_get>
	 int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE;
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <initAccelerometer+0xe8>)
 8002e20:	7813      	ldrb	r3, [r2, #0]
 8002e22:	f043 0320 	orr.w	r3, r3, #32
 8002e26:	7013      	strb	r3, [r2, #0]
	 lis2dw12_pin_int1_route_set(&dev_ctx, &int_route.ctrl4_int1_pad_ctrl);
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <initAccelerometer+0xe8>)
 8002e2a:	4807      	ldr	r0, [pc, #28]	; (8002e48 <initAccelerometer+0xcc>)
 8002e2c:	f7fe fa7d 	bl	800132a <lis2dw12_pin_int1_route_set>
	 /* Set Output Data Rate */
	 lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_200Hz);
 8002e30:	2106      	movs	r1, #6
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <initAccelerometer+0xcc>)
 8002e34:	f7fe f942 	bl	80010bc <lis2dw12_data_rate_set>

	 //init sensors struct
	 sensors.accel.status = STATIONARY;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <initAccelerometer+0xec>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	 return true;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000680 	.word	0x20000680
 8002e4c:	08002ce5 	.word	0x08002ce5
 8002e50:	08002d1f 	.word	0x08002d1f
 8002e54:	08002d59 	.word	0x08002d59
 8002e58:	20000300 	.word	0x20000300
 8002e5c:	2000067c 	.word	0x2000067c
 8002e60:	2000067d 	.word	0x2000067d
 8002e64:	20000690 	.word	0x20000690
 8002e68:	20000528 	.word	0x20000528

08002e6c <readAccelerometer>:

void readAccelerometer(Accel *_accel){
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b0a6      	sub	sp, #152	; 0x98
 8002e70:	af14      	add	r7, sp, #80	; 0x50
 8002e72:	6078      	str	r0, [r7, #4]
	lis2dw12_all_sources_t all_source;
	  /* Read status register */
	  lis2dw12_all_sources_get(&dev_ctx, &all_source);
 8002e74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4849      	ldr	r0, [pc, #292]	; (8002fa0 <readAccelerometer+0x134>)
 8002e7c:	f7fe f989 	bl	8001192 <lis2dw12_all_sources_get>


	  /* Check if Activity/Inactivity events */
	  if (all_source.wake_up_src.sleep_state_ia) {
 8002e80:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <readAccelerometer+0x34>
		  //Inactivity
		  // Reset after sending Interrupt
//		  if(isTapDetected || isMovementDetected){
		      _accel->status = STATIONARY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
			  isTapDetected = false;
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <readAccelerometer+0x138>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
			  isMovementDetected = false;
 8002e9a:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <readAccelerometer+0x13c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
//			  printf("Resetting flags \r\n ");
//		  }
	  }

	  if (all_source.wake_up_src.wu_ia) {
 8002ea0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d074      	beq.n	8002f98 <readAccelerometer+0x12c>

		// Activity
		if(isTapDetected == false){
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <readAccelerometer+0x138>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	f083 0301 	eor.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02b      	beq.n	8002f14 <readAccelerometer+0xa8>
			isTapDetected = true;
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <readAccelerometer+0x138>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
			_accel->status = SMASHED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
			//printf("Smash Detected \nX: %d \nY: %d \nZ: %d\r\n ", all_source.wake_up_src.x_wu, all_source.wake_up_src.y_wu, all_source.wake_up_src.z_wu);

			initTapMillis = HAL_GetTick();
 8002ec8:	f000 fef4 	bl	8003cb4 <HAL_GetTick>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a37      	ldr	r2, [pc, #220]	; (8002fac <readAccelerometer+0x140>)
 8002ed0:	6013      	str	r3, [r2, #0]

			TxPayload _heartBeatPayload;
			generateUnscheduledTxPayload(sensors, &_heartBeatPayload);
 8002ed2:	4c37      	ldr	r4, [pc, #220]	; (8002fb0 <readAccelerometer+0x144>)
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	9313      	str	r3, [sp, #76]	; 0x4c
 8002eda:	4668      	mov	r0, sp
 8002edc:	f104 0310 	add.w	r3, r4, #16
 8002ee0:	224c      	movs	r2, #76	; 0x4c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f006 fb04 	bl	80094f0 <memcpy>
 8002ee8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002eec:	f7ff fc0a 	bl	8002704 <generateUnscheduledTxPayload>
			sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	f107 0414 	add.w	r4, r7, #20
 8002ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	cb0c      	ldmia	r3, {r2, r3}
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f7ff fd1a 	bl	8002948 <sendToLora>

     		//isTapDetected = false;
 			//isMovementDetected = false;
		}
		if(isTapDetected == true){
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <readAccelerometer+0x138>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03d      	beq.n	8002f98 <readAccelerometer+0x12c>
			if(HAL_GetTick() - initTapMillis > 3000){
 8002f1c:	f000 feca 	bl	8003cb4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <readAccelerometer+0x140>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d933      	bls.n	8002f98 <readAccelerometer+0x12c>
				if(isMovementDetected == false){
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <readAccelerometer+0x13c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f083 0301 	eor.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02c      	beq.n	8002f98 <readAccelerometer+0x12c>
					isMovementDetected = true;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <readAccelerometer+0x13c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
					_accel->status = MOVING;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	701a      	strb	r2, [r3, #0]
					//printf("Movement Detected \r\n ");

					TxPayload _heartBeatPayload;
					generateUnscheduledTxPayload(sensors, &_heartBeatPayload);
 8002f4a:	4c19      	ldr	r4, [pc, #100]	; (8002fb0 <readAccelerometer+0x144>)
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f52:	4668      	mov	r0, sp
 8002f54:	f104 0310 	add.w	r3, r4, #16
 8002f58:	224c      	movs	r2, #76	; 0x4c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f006 fac8 	bl	80094f0 <memcpy>
 8002f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f64:	f7ff fbce 	bl	8002704 <generateUnscheduledTxPayload>
					sendToLora(INTERRUPT_PORT, CONFIRMED_UPLINK, _heartBeatPayload);
 8002f68:	466d      	mov	r5, sp
 8002f6a:	f107 0414 	add.w	r4, r7, #20
 8002f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	cb0c      	ldmia	r3, {r2, r3}
 8002f84:	2101      	movs	r1, #1
 8002f86:	2003      	movs	r0, #3
 8002f88:	f7ff fcde 	bl	8002948 <sendToLora>

					isTapDetected = false;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <readAccelerometer+0x138>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
					isMovementDetected = false;
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <readAccelerometer+0x13c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	  }
}
 8002f98:	bf00      	nop
 8002f9a:	3748      	adds	r7, #72	; 0x48
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa0:	20000680 	.word	0x20000680
 8002fa4:	20000691 	.word	0x20000691
 8002fa8:	20000692 	.word	0x20000692
 8002fac:	20000694 	.word	0x20000694
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	00000000 	.word	0x00000000

08002fb8 <readLTC4015>:

void readLTC4015(LTCStatus *ltc4015){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	6078      	str	r0, [r7, #4]

	 uint16_t i2c_data = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	81fb      	strh	r3, [r7, #14]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	f107 030e 	add.w	r3, r7, #14
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	223a      	movs	r2, #58	; 0x3a
 8002fd8:	21d0      	movs	r1, #208	; 0xd0
 8002fda:	4835      	ldr	r0, [pc, #212]	; (80030b0 <readLTC4015+0xf8>)
 8002fdc:	f001 fdbc 	bl	8004b58 <HAL_I2C_Mem_Read>
	 ltc4015->VBAT= i2c_data * 0.000192264 * 4;
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fa76 	bl	80004d4 <__aeabi_i2d>
 8002fe8:	a32d      	add	r3, pc, #180	; (adr r3, 80030a0 <readLTC4015+0xe8>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fadb 	bl	80005a8 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <readLTC4015+0xfc>)
 8003000:	f7fd fad2 	bl	80005a8 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fdc4 	bl	8000b98 <__aeabi_d2f>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	605a      	str	r2, [r3, #4]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	2302      	movs	r3, #2
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	f107 030e 	add.w	r3, r7, #14
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2301      	movs	r3, #1
 8003028:	223b      	movs	r2, #59	; 0x3b
 800302a:	21d0      	movs	r1, #208	; 0xd0
 800302c:	4820      	ldr	r0, [pc, #128]	; (80030b0 <readLTC4015+0xf8>)
 800302e:	f001 fd93 	bl	8004b58 <HAL_I2C_Mem_Read>
	 ltc4015->VIN = i2c_data * 0.001648;
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa4d 	bl	80004d4 <__aeabi_i2d>
 800303a:	a31b      	add	r3, pc, #108	; (adr r3, 80030a8 <readLTC4015+0xf0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd fab2 	bl	80005a8 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fda4 	bl	8000b98 <__aeabi_d2f>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]

	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	2302      	movs	r3, #2
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	f107 030e 	add.w	r3, r7, #14
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2301      	movs	r3, #1
 8003068:	223c      	movs	r2, #60	; 0x3c
 800306a:	21d0      	movs	r1, #208	; 0xd0
 800306c:	4810      	ldr	r0, [pc, #64]	; (80030b0 <readLTC4015+0xf8>)
 800306e:	f001 fd73 	bl	8004b58 <HAL_I2C_Mem_Read>
	 ltc4015->VSYS = i2c_data * 0.001648;
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa2d 	bl	80004d4 <__aeabi_i2d>
 800307a:	a30b      	add	r3, pc, #44	; (adr r3, 80030a8 <readLTC4015+0xf0>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f7fd fa92 	bl	80005a8 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fd84 	bl	8000b98 <__aeabi_d2f>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]
	 printf("LTC4015 Readings \r\n");
	 printf("VIN  = %.2f \r\n", ltc4015->VIN);
	 printf("VBAT = %.2f \r\n", ltc4015->VBAT);
	 printf("VSYS = %.2f \r\n", ltc4015->VSYS);
#endif
	}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2f34985a 	.word	0x2f34985a
 80030a4:	3f29334f 	.word	0x3f29334f
 80030a8:	86a4ca4f 	.word	0x86a4ca4f
 80030ac:	3f5b0036 	.word	0x3f5b0036
 80030b0:	20000300 	.word	0x20000300
 80030b4:	40100000 	.word	0x40100000

080030b8 <initQueue>:
    memcpy(&payload->buffer[payload->length], modbus->buffer, modbus->rxIndex);
    payload->length += modbus->rxIndex;
}


void initQueue(TxPayloadQueue *q) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    q->front = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    q->rear = 0;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    q->size = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <enqueue>:

int enqueue(TxPayloadQueue *q, TxPayload element) {
 80030e4:	b084      	sub	sp, #16
 80030e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (q->size == QUEUE_MAX_SIZE) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d102      	bne.n	8003106 <enqueue+0x22>
        // Queue is full
        return -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	e038      	b.n	8003178 <enqueue+0x94>
    }

    q->queue[q->rear] = element;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800310c:	4619      	mov	r1, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	2334      	movs	r3, #52	; 0x34
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800311c:	469c      	mov	ip, r3
 800311e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003122:	4665      	mov	r5, ip
 8003124:	4626      	mov	r6, r4
 8003126:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003128:	6028      	str	r0, [r5, #0]
 800312a:	6069      	str	r1, [r5, #4]
 800312c:	60aa      	str	r2, [r5, #8]
 800312e:	60eb      	str	r3, [r5, #12]
 8003130:	3410      	adds	r4, #16
 8003132:	f10c 0c10 	add.w	ip, ip, #16
 8003136:	4574      	cmp	r4, lr
 8003138:	d1f3      	bne.n	8003122 <enqueue+0x3e>
 800313a:	4663      	mov	r3, ip
 800313c:	4622      	mov	r2, r4
 800313e:	6810      	ldr	r0, [r2, #0]
 8003140:	6018      	str	r0, [r3, #0]
    q->rear = (q->rear + 1) % QUEUE_MAX_SIZE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <enqueue+0xa4>)
 800314c:	fb83 1302 	smull	r1, r3, r3, r2
 8003150:	1059      	asrs	r1, r3, #1
 8003152:	17d3      	asrs	r3, r2, #31
 8003154:	1ac9      	subs	r1, r1, r3
 8003156:	460b      	mov	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	1ad1      	subs	r1, r2, r3
 800315e:	b2ca      	uxtb	r2, r1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    q->size++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800316c:	3301      	adds	r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    return 0;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003182:	b004      	add	sp, #16
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	66666667 	.word	0x66666667

0800318c <dequeue>:

int dequeue(TxPayloadQueue *q, TxPayload *element) {
 800318c:	b4f0      	push	{r4, r5, r6, r7}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    if (q->size == 0) {
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <dequeue+0x1a>
        // Queue is empty
        return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e03a      	b.n	800321c <dequeue+0x90>
    }

    *element = q->queue[q->front];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80031ac:	4618      	mov	r0, r3
 80031ae:	6839      	ldr	r1, [r7, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	2334      	movs	r3, #52	; 0x34
 80031b4:	fb00 f303 	mul.w	r3, r0, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	4608      	mov	r0, r1
 80031bc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80031c0:	4602      	mov	r2, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	f8d1 c000 	ldr.w	ip, [r1]
 80031c8:	684e      	ldr	r6, [r1, #4]
 80031ca:	688d      	ldr	r5, [r1, #8]
 80031cc:	68c9      	ldr	r1, [r1, #12]
 80031ce:	f8c2 c000 	str.w	ip, [r2]
 80031d2:	6056      	str	r6, [r2, #4]
 80031d4:	6095      	str	r5, [r2, #8]
 80031d6:	60d1      	str	r1, [r2, #12]
 80031d8:	3310      	adds	r3, #16
 80031da:	3010      	adds	r0, #16
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d1ef      	bne.n	80031c0 <dequeue+0x34>
 80031e0:	4602      	mov	r2, r0
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6013      	str	r3, [r2, #0]
    q->front = (q->front + 1) % QUEUE_MAX_SIZE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <dequeue+0x9c>)
 80031f0:	fb83 1302 	smull	r1, r3, r3, r2
 80031f4:	1059      	asrs	r1, r3, #1
 80031f6:	17d3      	asrs	r3, r2, #31
 80031f8:	1ac9      	subs	r1, r1, r3
 80031fa:	460b      	mov	r3, r1
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	1ad1      	subs	r1, r2, r3
 8003202:	b2ca      	uxtb	r2, r1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    q->size--;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003210:	3b01      	subs	r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    return 0;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bcf0      	pop	{r4, r5, r6, r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	66666667 	.word	0x66666667

0800322c <queueUnscheduledPayload>:
int isQueueFull(TxPayloadQueue *q) {
    return (q->size == QUEUE_MAX_SIZE);
}


void queueUnscheduledPayload(void){
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b0a2      	sub	sp, #136	; 0x88
 8003230:	af14      	add	r7, sp, #80	; 0x50
	TxPayload unscheduledPayload;
	generateUnscheduledTxPayload(sensors, &unscheduledPayload);
 8003232:	4c11      	ldr	r4, [pc, #68]	; (8003278 <queueUnscheduledPayload+0x4c>)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	9313      	str	r3, [sp, #76]	; 0x4c
 8003238:	4668      	mov	r0, sp
 800323a:	f104 0310 	add.w	r3, r4, #16
 800323e:	224c      	movs	r2, #76	; 0x4c
 8003240:	4619      	mov	r1, r3
 8003242:	f006 f955 	bl	80094f0 <memcpy>
 8003246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800324a:	f7ff fa5b 	bl	8002704 <generateUnscheduledTxPayload>

	if (enqueue(&payLoadQueue, unscheduledPayload) == 0) {
 800324e:	466d      	mov	r5, sp
 8003250:	f107 0410 	add.w	r4, r7, #16
 8003254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003260:	e885 0003 	stmia.w	r5, {r0, r1}
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <queueUnscheduledPayload+0x50>)
 800326a:	f7ff ff3b 	bl	80030e4 <enqueue>
		//printf("Added to Queue \r\n");
	} else {
		//printf("Queue is full \r\n");
	}
}
 800326e:	bf00      	nop
 8003270:	3738      	adds	r7, #56	; 0x38
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
 8003276:	bf00      	nop
 8003278:	20000528 	.word	0x20000528
 800327c:	200006a0 	.word	0x200006a0

08003280 <queueHeartbeatPayload>:
void queueHeartbeatPayload(void){
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b0a2      	sub	sp, #136	; 0x88
 8003284:	af14      	add	r7, sp, #80	; 0x50
	TxPayload heartbeatPayload;
	generateHeartbeatTxPayload(sensors, &heartbeatPayload);
 8003286:	4c11      	ldr	r4, [pc, #68]	; (80032cc <queueHeartbeatPayload+0x4c>)
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	9313      	str	r3, [sp, #76]	; 0x4c
 800328c:	4668      	mov	r0, sp
 800328e:	f104 0310 	add.w	r3, r4, #16
 8003292:	224c      	movs	r2, #76	; 0x4c
 8003294:	4619      	mov	r1, r3
 8003296:	f006 f92b 	bl	80094f0 <memcpy>
 800329a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800329e:	f7ff fa6f 	bl	8002780 <generateHeartbeatTxPayload>

	if (enqueue(&payLoadQueue, heartbeatPayload) == 0) {
 80032a2:	466d      	mov	r5, sp
 80032a4:	f107 0410 	add.w	r4, r7, #16
 80032a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <queueHeartbeatPayload+0x50>)
 80032be:	f7ff ff11 	bl	80030e4 <enqueue>
		//printf("Added Heartbeat to Queue \r\n");
	} else {
		//printf("Queue is full \r\n");
	}

}
 80032c2:	bf00      	nop
 80032c4:	3738      	adds	r7, #56	; 0x38
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000528 	.word	0x20000528
 80032d0:	200006a0 	.word	0x200006a0

080032d4 <readWaterLeak>:

void readWaterLeak(WaterLeak *leak){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	if(ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &adcRead) == HAL_OK){
 80032dc:	490f      	ldr	r1, [pc, #60]	; (800331c <readWaterLeak+0x48>)
 80032de:	2040      	movs	r0, #64	; 0x40
 80032e0:	f7fe fa1c 	bl	800171c <ADS1115_readSingleEnded>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <readWaterLeak+0x3e>
		leak->raw = adcRead;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <readWaterLeak+0x48>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
		leak->state = (adcRead > WATER_LEAK_TH) ? WET : DRY;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <readWaterLeak+0x48>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003320 <readWaterLeak+0x4c>
 80032fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	bfcc      	ite	gt
 8003306:	2301      	movgt	r3, #1
 8003308:	2300      	movle	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	711a      	strb	r2, [r3, #4]
	 }else{
		 //printf("Error Reading Water Leak");
	 }

}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200007a8 	.word	0x200007a8
 8003320:	44bb8000 	.word	0x44bb8000

08003324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003328:	b672      	cpsid	i
}
 800332a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800332c:	e7fe      	b.n	800332c <Error_Handler+0x8>

0800332e <SHT40_Measure>:
};

/*
 * Measurement-Taking
 */
HAL_StatusTypeDef SHT40_Measure(I2C_HandleTypeDef* i2cHandle, SHT40_Measurement* result, SHT40_Precision precision) {
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
    uint8_t response[6];
    if (i2c_communicate(i2cHandle, (uint8_t*)&precision, response) == HAL_OK) {
 800333c:	f107 0210 	add.w	r2, r7, #16
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	4619      	mov	r1, r3
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f879 	bl	800343c <i2c_communicate>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <SHT40_Measure+0x32>
        return read_temp_humidity(response, result);
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f8a4 	bl	80034a4 <read_temp_humidity>
 800335c:	4603      	mov	r3, r0
 800335e:	e000      	b.n	8003362 <SHT40_Measure+0x34>
    }
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <SHT40_ReadSerial>:
}

/*
 * Serial
 */
HAL_StatusTypeDef SHT40_ReadSerial(I2C_HandleTypeDef* i2cHandle, uint32_t* result) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    static uint8_t COMMAND = SHT40_READ_SERIAL;
    uint8_t serial_response[6];

    if( i2c_communicate(i2cHandle, &COMMAND, serial_response) == HAL_OK ) {
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	461a      	mov	r2, r3
 800337c:	491a      	ldr	r1, [pc, #104]	; (80033e8 <SHT40_ReadSerial+0x7c>)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f85c 	bl	800343c <i2c_communicate>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d129      	bne.n	80033de <SHT40_ReadSerial+0x72>
        uint16_t serial_msb = serial_response[0] << 8 | serial_response[1];
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	b21a      	sxth	r2, r3
 8003390:	7b7b      	ldrb	r3, [r7, #13]
 8003392:	b21b      	sxth	r3, r3
 8003394:	4313      	orrs	r3, r2
 8003396:	b21b      	sxth	r3, r3
 8003398:	82fb      	strh	r3, [r7, #22]
        uint16_t serial_lsb = serial_response[3] << 8 | serial_response[4];
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	b21a      	sxth	r2, r3
 80033a0:	7c3b      	ldrb	r3, [r7, #16]
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	82bb      	strh	r3, [r7, #20]

        if( verify_checksum(serial_msb, serial_response[2]) && verify_checksum(serial_lsb, serial_response[5]) ) {
 80033aa:	7bba      	ldrb	r2, [r7, #14]
 80033ac:	8afb      	ldrh	r3, [r7, #22]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f81b 	bl	80033ec <verify_checksum>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <SHT40_ReadSerial+0x72>
 80033bc:	7c7a      	ldrb	r2, [r7, #17]
 80033be:	8abb      	ldrh	r3, [r7, #20]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f812 	bl	80033ec <verify_checksum>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <SHT40_ReadSerial+0x72>
            *result = ((uint32_t)serial_msb << 16) | serial_lsb;
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	041a      	lsls	r2, r3, #16
 80033d2:	8abb      	ldrh	r3, [r7, #20]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <SHT40_ReadSerial+0x74>
        }
    }
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000000e 	.word	0x2000000e

080033ec <verify_checksum>:

/*
 * Returns whether the provided CRC8 checksum matches that
 * of the provided 16-bit data
 */
static bool verify_checksum(uint16_t data, uint8_t checksum) {
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	460a      	mov	r2, r1
 80033f6:	80fb      	strh	r3, [r7, #6]
 80033f8:	4613      	mov	r3, r2
 80033fa:	717b      	strb	r3, [r7, #5]
    uint8_t calculated_crc = 0xFF;
 80033fc:	23ff      	movs	r3, #255	; 0xff
 80033fe:	73fb      	strb	r3, [r7, #15]

    calculated_crc = CRC8_TABLE[calculated_crc ^ (data >> 8)];
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	0a12      	lsrs	r2, r2, #8
 8003406:	b292      	uxth	r2, r2
 8003408:	4053      	eors	r3, r2
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <verify_checksum+0x4c>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
 800340e:	73fb      	strb	r3, [r7, #15]
    calculated_crc = CRC8_TABLE[calculated_crc ^ (data & 0xFF)];
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4053      	eors	r3, r2
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <verify_checksum+0x4c>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	73fb      	strb	r3, [r7, #15]

    return calculated_crc == checksum;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	797b      	ldrb	r3, [r7, #5]
 8003422:	429a      	cmp	r2, r3
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	0800e328 	.word	0x0800e328

0800343c <i2c_communicate>:

/*
 * Common I2C communication function
 */
static HAL_StatusTypeDef i2c_communicate(I2C_HandleTypeDef* i2cHandle, uint8_t* command, uint8_t* response) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
//        return HAL_ERROR;
//    }

    HAL_StatusTypeDef ret;

    HAL_Delay(100);
 8003448:	2064      	movs	r0, #100	; 0x64
 800344a:	f000 fc4b 	bl	8003ce4 <HAL_Delay>

    ret = HAL_I2C_Master_Transmit(i2cHandle, SHT40_I2C_ADDR, command, 1, SHT40_I2C_TIMEOUT);
 800344e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2301      	movs	r3, #1
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	2188      	movs	r1, #136	; 0x88
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 f87e 	bl	800455c <HAL_I2C_Master_Transmit>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <i2c_communicate+0x32>
    	return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e016      	b.n	800349c <i2c_communicate+0x60>
    }

    HAL_Delay(100);
 800346e:	2064      	movs	r0, #100	; 0x64
 8003470:	f000 fc38 	bl	8003ce4 <HAL_Delay>

    ret = HAL_I2C_Master_Receive(i2cHandle, SHT40_I2C_ADDR, response, SHT40_I2C_RESP_LEN, SHT40_I2C_TIMEOUT);
 8003474:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2306      	movs	r3, #6
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	2188      	movs	r1, #136	; 0x88
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f001 f95f 	bl	8004744 <HAL_I2C_Master_Receive>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

    if(ret != HAL_OK){
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <i2c_communicate+0x58>
		return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e003      	b.n	800349c <i2c_communicate+0x60>
	}

    HAL_Delay(100);
 8003494:	2064      	movs	r0, #100	; 0x64
 8003496:	f000 fc25 	bl	8003ce4 <HAL_Delay>

    return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <read_temp_humidity>:

/*
 * Read temperature and humidity from the I2C response
 */
static HAL_StatusTypeDef read_temp_humidity(uint8_t* response, SHT40_Measurement* result) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
    uint16_t temperature = response[0] << 8 | response[1];
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	b21a      	sxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3301      	adds	r3, #1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b21b      	sxth	r3, r3
 80034be:	4313      	orrs	r3, r2
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	81fb      	strh	r3, [r7, #14]
    uint16_t humidity = response[3] << 8 | response[4];
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3303      	adds	r3, #3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	b21a      	sxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	4313      	orrs	r3, r2
 80034d8:	b21b      	sxth	r3, r3
 80034da:	81bb      	strh	r3, [r7, #12]

    if( verify_checksum(temperature, response[2]) && verify_checksum(humidity, response[5]) ) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3302      	adds	r3, #2
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff80 	bl	80033ec <verify_checksum>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01e      	beq.n	8003530 <read_temp_humidity+0x8c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3305      	adds	r3, #5
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	89bb      	ldrh	r3, [r7, #12]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff75 	bl	80033ec <verify_checksum>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <read_temp_humidity+0x8c>
        result->temperature = hardware_to_celsius(temperature);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f818 	bl	8003540 <hardware_to_celsius>
 8003510:	eef0 7a40 	vmov.f32	s15, s0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	edc3 7a00 	vstr	s15, [r3]
        result->rel_humidity = hardware_to_humidity_percentage(humidity);
 800351a:	89bb      	ldrh	r3, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f84b 	bl	80035b8 <hardware_to_humidity_percentage>
 8003522:	eef0 7a40 	vmov.f32	s15, s0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	edc3 7a01 	vstr	s15, [r3, #4]
        return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <read_temp_humidity+0x8e>
    }
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	0000      	movs	r0, r0
 800353c:	0000      	movs	r0, r0
	...

08003540 <hardware_to_celsius>:

/*
 * Converts hardware representation of temperature to C
 */
static float hardware_to_celsius(uint16_t reading) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
    return -45.0 + 175.0 * (reading / 65535.0);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc ffc1 	bl	80004d4 <__aeabi_i2d>
 8003552:	a314      	add	r3, pc, #80	; (adr r3, 80035a4 <hardware_to_celsius+0x64>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd f950 	bl	80007fc <__aeabi_ddiv>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	a311      	add	r3, pc, #68	; (adr r3, 80035ac <hardware_to_celsius+0x6c>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd f81d 	bl	80005a8 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <hardware_to_celsius+0x60>)
 800357c:	f7fc fe5c 	bl	8000238 <__aeabi_dsub>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f7fd fb06 	bl	8000b98 <__aeabi_d2f>
 800358c:	4603      	mov	r3, r0
 800358e:	ee07 3a90 	vmov	s15, r3
}
 8003592:	eeb0 0a67 	vmov.f32	s0, s15
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	f3af 8000 	nop.w
 80035a0:	40468000 	.word	0x40468000
 80035a4:	00000000 	.word	0x00000000
 80035a8:	40efffe0 	.word	0x40efffe0
 80035ac:	00000000 	.word	0x00000000
 80035b0:	4065e000 	.word	0x4065e000
 80035b4:	00000000 	.word	0x00000000

080035b8 <hardware_to_humidity_percentage>:

/*
 * Converts hardware representation of humidity to relative humidity as percentage
 */
static float hardware_to_humidity_percentage(uint16_t reading) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
    return -6.0 + 125.0 * (reading / 65535.0);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ff85 	bl	80004d4 <__aeabi_i2d>
 80035ca:	a315      	add	r3, pc, #84	; (adr r3, 8003620 <hardware_to_humidity_percentage+0x68>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd f914 	bl	80007fc <__aeabi_ddiv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <hardware_to_humidity_percentage+0x60>)
 80035e2:	f7fc ffe1 	bl	80005a8 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <hardware_to_humidity_percentage+0x64>)
 80035f4:	f7fc fe20 	bl	8000238 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fd faca 	bl	8000b98 <__aeabi_d2f>
 8003604:	4603      	mov	r3, r0
 8003606:	ee07 3a90 	vmov	s15, r3
}
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	f3af 8000 	nop.w
 8003618:	405f4000 	.word	0x405f4000
 800361c:	40180000 	.word	0x40180000
 8003620:	00000000 	.word	0x00000000
 8003624:	40efffe0 	.word	0x40efffe0

08003628 <LL_AHB2_GRP1_EnableClock>:
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4313      	orrs	r3, r2
 8003670:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80036a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b09c      	sub	sp, #112	; 0x70
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	2250      	movs	r2, #80	; 0x50
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f005 fef3 	bl	800950c <memset>
  if(hi2c->Instance==I2C1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_I2C_MspInit+0x88>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d126      	bne.n	800377e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003730:	2304      	movs	r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003734:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fba3 	bl	8006e8a <HAL_RCCEx_PeriphCLKConfig>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800374a:	f7ff fdeb 	bl	8003324 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2002      	movs	r0, #2
 8003750:	f7ff ff6a 	bl	8003628 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003758:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375a:	2312      	movs	r3, #18
 800375c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	2300      	movs	r3, #0
 8003764:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003766:	2304      	movs	r3, #4
 8003768:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800376e:	4619      	mov	r1, r3
 8003770:	4806      	ldr	r0, [pc, #24]	; (800378c <HAL_I2C_MspInit+0x8c>)
 8003772:	f000 fcc3 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800377a:	f7ff ff6e 	bl	800365a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800377e:	bf00      	nop
 8003780:	3770      	adds	r7, #112	; 0x70
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40005400 	.word	0x40005400
 800378c:	48000400 	.word	0x48000400

08003790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b09c      	sub	sp, #112	; 0x70
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	2250      	movs	r2, #80	; 0x50
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f005 feab 	bl	800950c <memset>
  if(huart->Instance==LPUART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a33      	ldr	r2, [pc, #204]	; (8003888 <HAL_UART_MspInit+0xf8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d12c      	bne.n	800381a <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80037c0:	2302      	movs	r3, #2
 80037c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 fb5c 	bl	8006e8a <HAL_RCCEx_PeriphCLKConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037d8:	f7ff fda4 	bl	8003324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80037dc:	2001      	movs	r0, #1
 80037de:	f7ff ff55 	bl	800368c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e2:	2004      	movs	r0, #4
 80037e4:	f7ff ff20 	bl	8003628 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037e8:	2303      	movs	r3, #3
 80037ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2300      	movs	r3, #0
 80037f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80037f8:	2308      	movs	r3, #8
 80037fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003800:	4619      	mov	r1, r3
 8003802:	4822      	ldr	r0, [pc, #136]	; (800388c <HAL_UART_MspInit+0xfc>)
 8003804:	f000 fc7a 	bl	80040fc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003808:	2200      	movs	r2, #0
 800380a:	2100      	movs	r1, #0
 800380c:	2025      	movs	r0, #37	; 0x25
 800380e:	f000 fb7e 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003812:	2025      	movs	r0, #37	; 0x25
 8003814:	f000 fb95 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003818:	e031      	b.n	800387e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_UART_MspInit+0x100>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d12c      	bne.n	800387e <HAL_UART_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003824:	2301      	movs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fb2a 	bl	8006e8a <HAL_RCCEx_PeriphCLKConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 800383c:	f7ff fd72 	bl	8003324 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003844:	f7ff ff3b 	bl	80036be <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003848:	2002      	movs	r0, #2
 800384a:	f7ff feed 	bl	8003628 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800384e:	23c0      	movs	r3, #192	; 0xc0
 8003850:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800385e:	2307      	movs	r3, #7
 8003860:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003866:	4619      	mov	r1, r3
 8003868:	480a      	ldr	r0, [pc, #40]	; (8003894 <HAL_UART_MspInit+0x104>)
 800386a:	f000 fc47 	bl	80040fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	2024      	movs	r0, #36	; 0x24
 8003874:	f000 fb4b 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003878:	2024      	movs	r0, #36	; 0x24
 800387a:	f000 fb62 	bl	8003f42 <HAL_NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3770      	adds	r7, #112	; 0x70
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40008000 	.word	0x40008000
 800388c:	48000800 	.word	0x48000800
 8003890:	40013800 	.word	0x40013800
 8003894:	48000400 	.word	0x48000400

08003898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800389c:	e7fe      	b.n	800389c <NMI_Handler+0x4>

0800389e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <HardFault_Handler+0x4>

080038a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <MemManage_Handler+0x4>

080038aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <BusFault_Handler+0x4>

080038b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <UsageFault_Handler+0x4>

080038b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e4:	f000 f9d2 	bl	8003c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}

080038ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <USART1_IRQHandler+0x10>)
 80038f2:	f003 fe9b 	bl	800762c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200003f8 	.word	0x200003f8

08003900 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <LPUART1_IRQHandler+0x10>)
 8003906:	f003 fe91 	bl	800762c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000364 	.word	0x20000364

08003914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMOKE_B_Pin);
 8003918:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800391c:	f7fe fc76 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SMOKE_A_Pin);
 8003920:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003924:	f7fe fc72 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003928:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800392c:	f7fe fc6e 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}

08003934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return 1;
 8003938:	2301      	movs	r3, #1
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_kill>:

int _kill(int pid, int sig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800394e:	f005 fd95 	bl	800947c <__errno>
 8003952:	4603      	mov	r3, r0
 8003954:	2216      	movs	r2, #22
 8003956:	601a      	str	r2, [r3, #0]
  return -1;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_exit>:

void _exit (int status)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ffe7 	bl	8003944 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003976:	e7fe      	b.n	8003976 <_exit+0x12>

08003978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e00a      	b.n	80039a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800398a:	f3af 8000 	nop.w
 800398e:	4601      	mov	r1, r0
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	60ba      	str	r2, [r7, #8]
 8003996:	b2ca      	uxtb	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dbf0      	blt.n	800398a <_read+0x12>
  }

  return len;
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e009      	b.n	80039d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	60ba      	str	r2, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd ff2b 	bl	8001828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	dbf1      	blt.n	80039c4 <_write+0x12>
  }
  return len;
 80039e0:	687b      	ldr	r3, [r7, #4]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_close>:

int _close(int file)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a12:	605a      	str	r2, [r3, #4]
  return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_isatty>:

int _isatty(int file)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a2a:	2301      	movs	r3, #1
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <_sbrk+0x5c>)
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <_sbrk+0x60>)
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <_sbrk+0x64>)
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <_sbrk+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d207      	bcs.n	8003a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a84:	f005 fcfa 	bl	800947c <__errno>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	e009      	b.n	8003aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <_sbrk+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <_sbrk+0x64>)
 8003aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20030000 	.word	0x20030000
 8003ab4:	00000400 	.word	0x00000400
 8003ab8:	200007ac 	.word	0x200007ac
 8003abc:	200007c8 	.word	0x200007c8

08003ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <SystemInit+0x98>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <SystemInit+0x98>)
 8003acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003aec:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <SystemInit+0x9c>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f023 0305 	bic.w	r3, r3, #5
 8003b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <SystemInit+0xa0>)
 8003b2c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <SystemInit+0xa0>)
 8003b34:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00
 8003b5c:	faf6fefb 	.word	0xfaf6fefb
 8003b60:	22041000 	.word	0x22041000

08003b64 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003b64:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b66:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b68:	3304      	adds	r3, #4

08003b6a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003b6e:	d3f9      	bcc.n	8003b64 <CopyDataInit>
  bx lr
 8003b70:	4770      	bx	lr

08003b72 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003b72:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003b74:	3004      	adds	r0, #4

08003b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003b76:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003b78:	d3fb      	bcc.n	8003b72 <FillZerobss>
  bx lr
 8003b7a:	4770      	bx	lr

08003b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b80:	f7ff ff9e 	bl	8003ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003b84:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <LoopForever+0x6>)
 8003b86:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <LoopForever+0xa>)
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <LoopForever+0xe>)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f7ff ffed 	bl	8003b6a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <LoopForever+0x12>)
 8003b92:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <LoopForever+0x16>)
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <LoopForever+0x1a>)
 8003b96:	2300      	movs	r3, #0
 8003b98:	f7ff ffe7 	bl	8003b6a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003b9c:	480b      	ldr	r0, [pc, #44]	; (8003bcc <LoopForever+0x1e>)
 8003b9e:	490c      	ldr	r1, [pc, #48]	; (8003bd0 <LoopForever+0x22>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f7ff ffe8 	bl	8003b76 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ba6:	f005 fc6f 	bl	8009488 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003baa:	f7fd fe4f 	bl	800184c <main>

08003bae <LoopForever>:

LoopForever:
  b LoopForever
 8003bae:	e7fe      	b.n	8003bae <LoopForever>
  ldr   r0, =_estack
 8003bb0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	200001f0 	.word	0x200001f0
 8003bbc:	0800e9ac 	.word	0x0800e9ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003bc0:	20030000 	.word	0x20030000
 8003bc4:	20030000 	.word	0x20030000
 8003bc8:	0800eb94 	.word	0x0800eb94
  INIT_BSS _sbss, _ebss
 8003bcc:	200001f0 	.word	0x200001f0
 8003bd0:	200007c4 	.word	0x200007c4

08003bd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bd4:	e7fe      	b.n	8003bd4 <ADC1_IRQHandler>
	...

08003bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_Init+0x3c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <HAL_Init+0x3c>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bee:	2003      	movs	r0, #3
 8003bf0:	f000 f982 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bf4:	200f      	movs	r0, #15
 8003bf6:	f000 f80f 	bl	8003c18 <HAL_InitTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	71fb      	strb	r3, [r7, #7]
 8003c04:	e001      	b.n	8003c0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c06:	f7ff fd73 	bl	80036f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	58004000 	.word	0x58004000

08003c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_InitTick+0x6c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d024      	beq.n	8003c76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c2c:	f002 fe9c 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_InitTick+0x6c>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f98e 	bl	8003f66 <HAL_SYSTICK_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d809      	bhi.n	8003c6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c56:	2200      	movs	r2, #0
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	f000 f956 	bl	8003f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_InitTick+0x70>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e007      	b.n	8003c7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e004      	b.n	8003c7a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e001      	b.n	8003c7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000018 	.word	0x20000018
 8003c88:	20000014 	.word	0x20000014

08003c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_IncTick+0x20>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_IncTick+0x24>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_IncTick+0x24>)
 8003c9e:	6013      	str	r3, [r2, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000018 	.word	0x20000018
 8003cb0:	200007b0 	.word	0x200007b0

08003cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_GetTick+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	200007b0 	.word	0x200007b0

08003ccc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_GetTickPrio+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000014 	.word	0x20000014

08003ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff ffe2 	bl	8003cb4 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d005      	beq.n	8003d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_Delay+0x44>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d0a:	bf00      	nop
 8003d0c:	f7ff ffd2 	bl	8003cb4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d8f7      	bhi.n	8003d0c <HAL_Delay+0x28>
  {
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000018 	.word	0x20000018

08003d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <__NVIC_GetPriorityGrouping+0x18>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 0307 	and.w	r3, r3, #7
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0b      	blt.n	8003dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <__NVIC_EnableIRQ+0x38>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
         );
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8c:	f3bf 8f4f 	dsb	sy
}
 8003e90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <__NVIC_SystemReset+0x24>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e9a:	4904      	ldr	r1, [pc, #16]	; (8003eac <__NVIC_SystemReset+0x24>)
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <__NVIC_SystemReset+0x28>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea2:	f3bf 8f4f 	dsb	sy
}
 8003ea6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <__NVIC_SystemReset+0x20>
 8003eac:	e000ed00 	.word	0xe000ed00
 8003eb0:	05fa0004 	.word	0x05fa0004

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d301      	bcc.n	8003eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00f      	b.n	8003eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <SysTick_Config+0x40>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f7ff ff78 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x40>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff13 	bl	8003d2c <__NVIC_SetPriorityGrouping>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f1c:	f7ff ff2a 	bl	8003d74 <__NVIC_GetPriorityGrouping>
 8003f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f7ff ff7a 	bl	8003e20 <NVIC_EncodePriority>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff49 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff1d 	bl	8003d90 <__NVIC_EnableIRQ>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f62:	f7ff ff91 	bl	8003e88 <__NVIC_SystemReset>

08003f66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffa0 	bl	8003eb4 <SysTick_Config>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04f      	b.n	8004030 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d008      	beq.n	8003fae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e040      	b.n	8004030 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 020e 	bic.w	r2, r2, #14
 8003fbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f003 021c 	and.w	r2, r3, #28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ffa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00c      	beq.n	800401e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800401c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d005      	beq.n	8004060 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e047      	b.n	80040f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020e 	bic.w	r2, r2, #14
 800406e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800408e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f003 021c 	and.w	r2, r3, #28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f202 	lsl.w	r2, r1, r2
 80040a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    }
  }
  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410a:	e14c      	b.n	80043a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 813e 	beq.w	80043a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d005      	beq.n	800413c <HAL_GPIO_Init+0x40>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d130      	bne.n	800419e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004172:	2201      	movs	r2, #1
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0201 	and.w	r2, r3, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d017      	beq.n	80041da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d123      	bne.n	800422e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3208      	adds	r2, #8
 8004228:	6939      	ldr	r1, [r7, #16]
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8098 	beq.w	80043a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_GPIO_Init+0x2c8>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	3302      	adds	r3, #2
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	220f      	movs	r2, #15
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800429a:	d019      	beq.n	80042d0 <HAL_GPIO_Init+0x1d4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a4a      	ldr	r2, [pc, #296]	; (80043c8 <HAL_GPIO_Init+0x2cc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <HAL_GPIO_Init+0x1d0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a49      	ldr	r2, [pc, #292]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00d      	beq.n	80042c8 <HAL_GPIO_Init+0x1cc>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a48      	ldr	r2, [pc, #288]	; (80043d0 <HAL_GPIO_Init+0x2d4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <HAL_GPIO_Init+0x1c8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a47      	ldr	r2, [pc, #284]	; (80043d4 <HAL_GPIO_Init+0x2d8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_GPIO_Init+0x1c4>
 80042bc:	2304      	movs	r3, #4
 80042be:	e008      	b.n	80042d2 <HAL_GPIO_Init+0x1d6>
 80042c0:	2307      	movs	r3, #7
 80042c2:	e006      	b.n	80042d2 <HAL_GPIO_Init+0x1d6>
 80042c4:	2303      	movs	r3, #3
 80042c6:	e004      	b.n	80042d2 <HAL_GPIO_Init+0x1d6>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e002      	b.n	80042d2 <HAL_GPIO_Init+0x1d6>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_GPIO_Init+0x1d6>
 80042d0:	2300      	movs	r3, #0
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	f002 0203 	and.w	r2, r2, #3
 80042d8:	0092      	lsls	r2, r2, #2
 80042da:	4093      	lsls	r3, r2
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042e2:	4938      	ldr	r1, [pc, #224]	; (80043c4 <HAL_GPIO_Init+0x2c8>)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	3302      	adds	r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042f0:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004314:	4a30      	ldr	r2, [pc, #192]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	43db      	mvns	r3, r3
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800433e:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800436a:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	43db      	mvns	r3, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004398:	4a0f      	ldr	r2, [pc, #60]	; (80043d8 <HAL_GPIO_Init+0x2dc>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f aeab 	bne.w	800410c <HAL_GPIO_Init+0x10>
  }
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40010000 	.word	0x40010000
 80043c8:	48000400 	.word	0x48000400
 80043cc:	48000800 	.word	0x48000800
 80043d0:	48000c00 	.word	0x48000c00
 80043d4:	48001000 	.word	0x48001000
 80043d8:	58000800 	.word	0x58000800

080043dc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004428:	e002      	b.n	8004430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e081      	b.n	8004552 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff f94c 	bl	8003700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800448c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	e006      	b.n	80044c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d104      	bne.n	80044d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69d9      	ldr	r1, [r3, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	461a      	mov	r2, r3
 8004568:	460b      	mov	r3, r1
 800456a:	817b      	strh	r3, [r7, #10]
 800456c:	4613      	mov	r3, r2
 800456e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b20      	cmp	r3, #32
 800457a:	f040 80da 	bne.w	8004732 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_I2C_Master_Transmit+0x30>
 8004588:	2302      	movs	r3, #2
 800458a:	e0d3      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004594:	f7ff fb8e 	bl	8003cb4 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2319      	movs	r3, #25
 80045a0:	2201      	movs	r2, #1
 80045a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fdc4 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0be      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2210      	movs	r2, #16
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	893a      	ldrh	r2, [r7, #8]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d90e      	bls.n	8004606 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	; 0xff
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_I2C_Master_Transmit+0x1e0>)
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 ffd4 	bl	80055ac <I2C_TransferConfig>
 8004604:	e06c      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	b2da      	uxtb	r2, r3
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	4b48      	ldr	r3, [pc, #288]	; (800473c <HAL_I2C_Master_Transmit+0x1e0>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 ffc3 	bl	80055ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004626:	e05b      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fdd0 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e07b      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d034      	beq.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d130      	bne.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2200      	movs	r2, #0
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fd53 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e04d      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2bff      	cmp	r3, #255	; 0xff
 80046a0:	d90e      	bls.n	80046c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 ff77 	bl	80055ac <I2C_TransferConfig>
 80046be:	e00f      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 ff66 	bl	80055ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d19e      	bne.n	8004628 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fdb6 	bl	8005260 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e01a      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2220      	movs	r2, #32
 8004704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_I2C_Master_Transmit+0x1e4>)
 8004712:	400b      	ands	r3, r1
 8004714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	80002000 	.word	0x80002000
 8004740:	fe00e800 	.word	0xfe00e800

08004744 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	460b      	mov	r3, r1
 8004752:	817b      	strh	r3, [r7, #10]
 8004754:	4613      	mov	r3, r2
 8004756:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	f040 80db 	bne.w	800491c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_I2C_Master_Receive+0x30>
 8004770:	2302      	movs	r3, #2
 8004772:	e0d4      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800477c:	f7ff fa9a 	bl	8003cb4 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2319      	movs	r3, #25
 8004788:	2201      	movs	r2, #1
 800478a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fcd0 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e0bf      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2222      	movs	r2, #34	; 0x22
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2210      	movs	r2, #16
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	893a      	ldrh	r2, [r7, #8]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2bff      	cmp	r3, #255	; 0xff
 80047ce:	d90e      	bls.n	80047ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	22ff      	movs	r2, #255	; 0xff
 80047d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	8979      	ldrh	r1, [r7, #10]
 80047de:	4b52      	ldr	r3, [pc, #328]	; (8004928 <HAL_I2C_Master_Receive+0x1e4>)
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fee0 	bl	80055ac <I2C_TransferConfig>
 80047ec:	e06d      	b.n	80048ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	8979      	ldrh	r1, [r7, #10]
 8004800:	4b49      	ldr	r3, [pc, #292]	; (8004928 <HAL_I2C_Master_Receive+0x1e4>)
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fecf 	bl	80055ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800480e:	e05c      	b.n	80048ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	6a39      	ldr	r1, [r7, #32]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fd67 	bl	80052e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e07c      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d034      	beq.n	80048ca <HAL_I2C_Master_Receive+0x186>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d130      	bne.n	80048ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	2200      	movs	r2, #0
 8004870:	2180      	movs	r1, #128	; 0x80
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fc5e 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e04d      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	d90e      	bls.n	80048aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	22ff      	movs	r2, #255	; 0xff
 8004890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	b2da      	uxtb	r2, r3
 8004898:	8979      	ldrh	r1, [r7, #10]
 800489a:	2300      	movs	r3, #0
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fe82 	bl	80055ac <I2C_TransferConfig>
 80048a8:	e00f      	b.n	80048ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	8979      	ldrh	r1, [r7, #10]
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fe71 	bl	80055ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d19d      	bne.n	8004810 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	6a39      	ldr	r1, [r7, #32]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fcc1 	bl	8005260 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e01a      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2220      	movs	r2, #32
 80048ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_I2C_Master_Receive+0x1e8>)
 80048fc:	400b      	ands	r3, r1
 80048fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	80002400 	.word	0x80002400
 800492c:	fe00e800 	.word	0xfe00e800

08004930 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	f040 80f9 	bne.w	8004b4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_I2C_Mem_Write+0x34>
 800495e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0ed      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_I2C_Mem_Write+0x4e>
 800497a:	2302      	movs	r3, #2
 800497c:	e0e6      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004986:	f7ff f995 	bl	8003cb4 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2319      	movs	r3, #25
 8004992:	2201      	movs	r2, #1
 8004994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fbcb 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0d1      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2221      	movs	r2, #33	; 0x21
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d0:	88f8      	ldrh	r0, [r7, #6]
 80049d2:	893a      	ldrh	r2, [r7, #8]
 80049d4:	8979      	ldrh	r1, [r7, #10]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4603      	mov	r3, r0
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fadb 	bl	8004f9c <I2C_RequestMemoryWrite>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a9      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2bff      	cmp	r3, #255	; 0xff
 8004a00:	d90e      	bls.n	8004a20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	2300      	movs	r3, #0
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fdc7 	bl	80055ac <I2C_TransferConfig>
 8004a1e:	e00f      	b.n	8004a40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	8979      	ldrh	r1, [r7, #10]
 8004a32:	2300      	movs	r3, #0
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fdb6 	bl	80055ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fbc4 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e07b      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d034      	beq.n	8004af8 <HAL_I2C_Mem_Write+0x1c8>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d130      	bne.n	8004af8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fb47 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e04d      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fd6b 	bl	80055ac <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fd5a 	bl	80055ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d19e      	bne.n	8004a40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fbaa 	bl	8005260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e01a      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_I2C_Mem_Write+0x224>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	fe00e800 	.word	0xfe00e800

08004b58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	817b      	strh	r3, [r7, #10]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	813b      	strh	r3, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 80fd 	bne.w	8004d7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_I2C_Mem_Read+0x34>
 8004b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0f1      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2C_Mem_Read+0x4e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0ea      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bae:	f7ff f881 	bl	8003cb4 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2319      	movs	r3, #25
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fab7 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0d5      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2222      	movs	r2, #34	; 0x22
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2240      	movs	r2, #64	; 0x40
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bf8:	88f8      	ldrh	r0, [r7, #6]
 8004bfa:	893a      	ldrh	r2, [r7, #8]
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4603      	mov	r3, r0
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fa1b 	bl	8005044 <I2C_RequestMemoryRead>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0ad      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d90e      	bls.n	8004c48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	8979      	ldrh	r1, [r7, #10]
 8004c38:	4b52      	ldr	r3, [pc, #328]	; (8004d84 <HAL_I2C_Mem_Read+0x22c>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fcb3 	bl	80055ac <I2C_TransferConfig>
 8004c46:	e00f      	b.n	8004c68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	8979      	ldrh	r1, [r7, #10]
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_I2C_Mem_Read+0x22c>)
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fca2 	bl	80055ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2104      	movs	r1, #4
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa5e 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07c      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d034      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d130      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fa2f 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e04d      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2bff      	cmp	r3, #255	; 0xff
 8004ce8:	d90e      	bls.n	8004d08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fc53 	bl	80055ac <I2C_TransferConfig>
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fc42 	bl	80055ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d19a      	bne.n	8004c68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa92 	bl	8005260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e01a      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_I2C_Mem_Read+0x230>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	80002400 	.word	0x80002400
 8004d88:	fe00e800 	.word	0xfe00e800

08004d8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	f040 80f1 	bne.w	8004f90 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0e7      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2C_IsDeviceReady+0x44>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0e0      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_I2C_IsDeviceReady+0x72>
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dfc:	e004      	b.n	8004e08 <HAL_I2C_IsDeviceReady+0x7c>
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e04:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fe ff51 	bl	8003cb4 <HAL_GetTick>
 8004e12:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004e40:	e034      	b.n	8004eac <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d01a      	beq.n	8004e80 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fe ff33 	bl	8003cb4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <HAL_I2C_IsDeviceReady+0xd4>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e088      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_I2C_IsDeviceReady+0x12c>
 8004eb2:	7fbb      	ldrb	r3, [r7, #30]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0c4      	beq.n	8004e42 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d01a      	beq.n	8004efc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2120      	movs	r1, #32
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f92f 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e058      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e04a      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2120      	movs	r1, #32
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f914 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03d      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2220      	movs	r2, #32
 8004f24:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d118      	bne.n	8004f60 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2120      	movs	r1, #32
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f8f3 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e01c      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	f63f af3b 	bhi.w	8004de6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	817b      	strh	r3, [r7, #10]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	813b      	strh	r3, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	8979      	ldrh	r1, [r7, #10]
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <I2C_RequestMemoryWrite+0xa4>)
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 faf1 	bl	80055ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f8ff 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e02c      	b.n	8005038 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe4:	893b      	ldrh	r3, [r7, #8]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
 8004fee:	e015      	b.n	800501c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ff0:	893b      	ldrh	r3, [r7, #8]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f8e5 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e012      	b.n	8005038 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005012:	893b      	ldrh	r3, [r7, #8]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f884 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	80002000 	.word	0x80002000

08005044 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	460b      	mov	r3, r1
 8005058:	813b      	strh	r3, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	8979      	ldrh	r1, [r7, #10]
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <I2C_RequestMemoryRead+0xa4>)
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fa9e 	bl	80055ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8ac 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e02c      	b.n	80050de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d105      	bne.n	8005096 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800508a:	893b      	ldrh	r3, [r7, #8]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
 8005094:	e015      	b.n	80050c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	b29b      	uxth	r3, r3
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f892 	bl	80051d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e012      	b.n	80050de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f831 	bl	8005134 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	80002000 	.word	0x80002000

080050ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d007      	beq.n	8005128 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	619a      	str	r2, [r3, #24]
  }
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005144:	e031      	b.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d02d      	beq.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fe fdb1 	bl	8003cb4 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d122      	bne.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d113      	bne.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e00f      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d0be      	beq.n	8005146 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051de:	e033      	b.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f901 	bl	80053ec <I2C_IsErrorOccurred>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e031      	b.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d025      	beq.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fc:	f7fe fd5a 	bl	8003cb4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d11a      	bne.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d013      	beq.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e007      	b.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d1c4      	bne.n	80051e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526c:	e02f      	b.n	80052ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f8ba 	bl	80053ec <I2C_IsErrorOccurred>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e02d      	b.n	80052de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fe fd17 	bl	8003cb4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11a      	bne.n	80052ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d013      	beq.n	80052ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e007      	b.n	80052de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d1c8      	bne.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f4:	e06b      	b.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f876 	bl	80053ec <I2C_IsErrorOccurred>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e069      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d138      	bne.n	800538a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d105      	bne.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e055      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d107      	bne.n	8005350 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2204      	movs	r2, #4
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
 800534e:	e002      	b.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2220      	movs	r2, #32
 800535c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800536a:	400b      	ands	r3, r1
 800536c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e029      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538a:	f7fe fc93 	bl	8003cb4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d116      	bne.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d00f      	beq.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e007      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d18c      	bne.n	80052f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	fe00e800 	.word	0xfe00e800

080053ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d068      	beq.n	80054ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005420:	e049      	b.n	80054b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d045      	beq.n	80054b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fe fc43 	bl	8003cb4 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_IsErrorOccurred+0x54>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d13a      	bne.n	80054b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005452:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005462:	d121      	bne.n	80054a8 <I2C_IsErrorOccurred+0xbc>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546a:	d01d      	beq.n	80054a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d01a      	beq.n	80054a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005480:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005482:	f7fe fc17 	bl	8003cb4 <HAL_GetTick>
 8005486:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005488:	e00e      	b.n	80054a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800548a:	f7fe fc13 	bl	8003cb4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b19      	cmp	r3, #25
 8005496:	d907      	bls.n	80054a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f043 0320 	orr.w	r3, r3, #32
 800549e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054a6:	e006      	b.n	80054b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d1e9      	bne.n	800548a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d003      	beq.n	80054cc <I2C_IsErrorOccurred+0xe0>
 80054c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0aa      	beq.n	8005422 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2220      	movs	r2, #32
 80054da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f043 0308 	orr.w	r3, r3, #8
 8005524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800552e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fdc3 	bl	80050ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <I2C_IsErrorOccurred+0x1bc>)
 8005572:	400b      	ands	r3, r1
 8005574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800559a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	fe00e800 	.word	0xfe00e800

080055ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	817b      	strh	r3, [r7, #10]
 80055ba:	4613      	mov	r3, r2
 80055bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c4:	7a7b      	ldrb	r3, [r7, #9]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	0d5b      	lsrs	r3, r3, #21
 80055e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <I2C_TransferConfig+0x60>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	43db      	mvns	r3, r3
 80055f0:	ea02 0103 	and.w	r1, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	03ff63ff 	.word	0x03ff63ff

08005610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	d138      	bne.n	8005698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005630:	2302      	movs	r3, #2
 8005632:	e032      	b.n	800569a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2224      	movs	r2, #36	; 0x24
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d139      	bne.n	8005730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e033      	b.n	8005732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2224      	movs	r2, #36	; 0x24
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0201 	bic.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e041      	b.n	80057d4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005758:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f245 5255 	movw	r2, #21845	; 0x5555
 8005762:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6852      	ldr	r2, [r2, #4]
 800576c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6892      	ldr	r2, [r2, #8]
 8005776:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005778:	f7fe fa9c 	bl	8003cb4 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800577e:	e00f      	b.n	80057a0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005780:	f7fe fa98 	bl	8003cb4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b31      	cmp	r3, #49	; 0x31
 800578c:	d908      	bls.n	80057a0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e019      	b.n	80057d4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e8      	bne.n	8005780 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68d2      	ldr	r2, [r2, #12]
 80057c4:	611a      	str	r2, [r3, #16]
 80057c6:	e004      	b.n	80057d2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80057ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	58000400 	.word	0x58000400

0800581c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_PWREx_GetVoltageRange+0x18>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	58000400 	.word	0x58000400

08005838 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584a:	d101      	bne.n	8005850 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800586a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588c:	6013      	str	r3, [r2, #0]
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058aa:	d101      	bne.n	80058b0 <LL_RCC_HSE_IsReady+0x18>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <LL_RCC_HSE_IsReady+0x1a>
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	d101      	bne.n	8005910 <LL_RCC_HSI_IsReady+0x18>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <LL_RCC_HSI_IsReady+0x1a>
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8005946:	b480      	push	{r7}
 8005948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d101      	bne.n	80059a2 <LL_RCC_HSI48_IsReady+0x18>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <LL_RCC_HSI48_IsReady+0x1a>
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80059f2:	b480      	push	{r7}
 80059f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a02:	f043 0304 	orr.w	r3, r3, #4
 8005a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a0a:	bf00      	nop
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005a36:	b480      	push	{r7}
 8005a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d101      	bne.n	8005a4e <LL_RCC_LSE_IsReady+0x18>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <LL_RCC_LSE_IsReady+0x1a>
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a72:	bf00      	nop
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d101      	bne.n	8005ab6 <LL_RCC_LSI1_IsReady+0x18>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <LL_RCC_LSI1_IsReady+0x1a>
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad2:	f043 0304 	orr.w	r3, r3, #4
 8005ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d101      	bne.n	8005b1e <LL_RCC_LSI2_IsReady+0x18>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <LL_RCC_LSI2_IsReady+0x1a>
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	6013      	str	r3, [r2, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d101      	bne.n	8005baa <LL_RCC_MSI_IsReady+0x16>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <LL_RCC_MSI_IsReady+0x18>
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2bb0      	cmp	r3, #176	; 0xb0
 8005bf4:	d901      	bls.n	8005bfa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005bf6:	23b0      	movs	r3, #176	; 0xb0
 8005bf8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8005bfa:	687b      	ldr	r3, [r7, #4]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f023 0203 	bic.w	r2, r3, #3
 8005c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 030c 	and.w	r3, r3, #12
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cd6:	f023 020f 	bic.w	r2, r3, #15
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	608b      	str	r3, [r1, #8]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd8:	6013      	str	r3, [r2, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df6:	d101      	bne.n	8005dfc <LL_RCC_PLL_IsReady+0x18>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <LL_RCC_PLL_IsReady+0x1a>
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005e52:	b480      	push	{r7}
 8005e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d101      	bne.n	8005e82 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea2:	d101      	bne.n	8005ea8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d101      	bne.n	8005ece <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eec:	d101      	bne.n	8005ef2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f10:	d101      	bne.n	8005f16 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b08d      	sub	sp, #52	; 0x34
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e363      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 808d 	beq.w	800605e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f44:	f7ff fe89 	bl	8005c5a <LL_RCC_GetSysClkSource>
 8005f48:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f4a:	f7ff ff82 	bl	8005e52 <LL_RCC_PLL_GetMainSource>
 8005f4e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_RCC_OscConfig+0x3e>
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	2b0c      	cmp	r3, #12
 8005f5a:	d147      	bne.n	8005fec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d144      	bne.n	8005fec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e347      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005f72:	f7ff fe34 	bl	8005bde <LL_RCC_MSI_GetRange>
 8005f76:	4603      	mov	r3, r0
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d914      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fd31 	bl	80069e8 <RCC_SetFlashLatencyFromMSIRange>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e336      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fe0e 	bl	8005bb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fe32 	bl	8005c08 <LL_RCC_MSI_SetCalibTrimming>
 8005fa4:	e013      	b.n	8005fce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fe03 	bl	8005bb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fe27 	bl	8005c08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd12 	bl	80069e8 <RCC_SetFlashLatencyFromMSIRange>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e317      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fce:	f000 fccb 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4aa4      	ldr	r2, [pc, #656]	; (8006268 <HAL_RCC_OscConfig+0x344>)
 8005fd6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fd8:	4ba4      	ldr	r3, [pc, #656]	; (800626c <HAL_RCC_OscConfig+0x348>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fd fe1b 	bl	8003c18 <HAL_InitTick>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d039      	beq.n	800605c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e308      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01e      	beq.n	8006032 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ff4:	f7ff fdb0 	bl	8005b58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ff8:	f7fd fe5c 	bl	8003cb4 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006000:	f7fd fe58 	bl	8003cb4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e2f5      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006012:	f7ff fdbf 	bl	8005b94 <LL_RCC_MSI_IsReady>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f1      	beq.n	8006000 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fdc8 	bl	8005bb6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fdec 	bl	8005c08 <LL_RCC_MSI_SetCalibTrimming>
 8006030:	e015      	b.n	800605e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006032:	f7ff fda0 	bl	8005b76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006036:	f7fd fe3d 	bl	8003cb4 <HAL_GetTick>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800603e:	f7fd fe39 	bl	8003cb4 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e2d6      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006050:	f7ff fda0 	bl	8005b94 <LL_RCC_MSI_IsReady>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f1      	bne.n	800603e <HAL_RCC_OscConfig+0x11a>
 800605a:	e000      	b.n	800605e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800605c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d047      	beq.n	80060fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606a:	f7ff fdf6 	bl	8005c5a <LL_RCC_GetSysClkSource>
 800606e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006070:	f7ff feef 	bl	8005e52 <LL_RCC_PLL_GetMainSource>
 8006074:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d005      	beq.n	8006088 <HAL_RCC_OscConfig+0x164>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d108      	bne.n	8006094 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d105      	bne.n	8006094 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d134      	bne.n	80060fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e2b4      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609c:	d102      	bne.n	80060a4 <HAL_RCC_OscConfig+0x180>
 800609e:	f7ff fbdd 	bl	800585c <LL_RCC_HSE_Enable>
 80060a2:	e001      	b.n	80060a8 <HAL_RCC_OscConfig+0x184>
 80060a4:	f7ff fbe9 	bl	800587a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fd fe00 	bl	8003cb4 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fd fdfc 	bl	8003cb4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e299      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80060ca:	f7ff fbe5 	bl	8005898 <LL_RCC_HSE_IsReady>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f1      	beq.n	80060b8 <HAL_RCC_OscConfig+0x194>
 80060d4:	e011      	b.n	80060fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d6:	f7fd fded 	bl	8003cb4 <HAL_GetTick>
 80060da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060de:	f7fd fde9 	bl	8003cb4 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b64      	cmp	r3, #100	; 0x64
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e286      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80060f0:	f7ff fbd2 	bl	8005898 <LL_RCC_HSE_IsReady>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f1      	bne.n	80060de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d04c      	beq.n	80061a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006106:	f7ff fda8 	bl	8005c5a <LL_RCC_GetSysClkSource>
 800610a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800610c:	f7ff fea1 	bl	8005e52 <LL_RCC_PLL_GetMainSource>
 8006110:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d005      	beq.n	8006124 <HAL_RCC_OscConfig+0x200>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b0c      	cmp	r3, #12
 800611c:	d10e      	bne.n	800613c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d10b      	bne.n	800613c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e266      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fbf1 	bl	800591c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800613a:	e031      	b.n	80061a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d019      	beq.n	8006178 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006144:	f7ff fbba 	bl	80058bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fd fdb4 	bl	8003cb4 <HAL_GetTick>
 800614c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006150:	f7fd fdb0 	bl	8003cb4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e24d      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006162:	f7ff fbc9 	bl	80058f8 <LL_RCC_HSI_IsReady>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f1      	beq.n	8006150 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fbd3 	bl	800591c <LL_RCC_HSI_SetCalibTrimming>
 8006176:	e013      	b.n	80061a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006178:	f7ff fbaf 	bl	80058da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fd fd9a 	bl	8003cb4 <HAL_GetTick>
 8006180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006184:	f7fd fd96 	bl	8003cb4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e233      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006196:	f7ff fbaf 	bl	80058f8 <LL_RCC_HSI_IsReady>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f1      	bne.n	8006184 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a3 	beq.w	8006300 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d076      	beq.n	80062b0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d046      	beq.n	800625c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80061ce:	f7ff fc66 	bl	8005a9e <LL_RCC_LSI1_IsReady>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d113      	bne.n	8006200 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80061d8:	f7ff fc3f 	bl	8005a5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061dc:	f7fd fd6a 	bl	8003cb4 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061e4:	f7fd fd66 	bl	8003cb4 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e203      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80061f6:	f7ff fc52 	bl	8005a9e <LL_RCC_LSI1_IsReady>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f1      	beq.n	80061e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006200:	f7ff fc5f 	bl	8005ac2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fd fd56 	bl	8003cb4 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800620c:	f7fd fd52 	bl	8003cb4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e1ef      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800621e:	f7ff fc72 	bl	8005b06 <LL_RCC_LSI2_IsReady>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f1      	beq.n	800620c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fc7c 	bl	8005b2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006232:	f7ff fc23 	bl	8005a7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006236:	f7fd fd3d 	bl	8003cb4 <HAL_GetTick>
 800623a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800623e:	f7fd fd39 	bl	8003cb4 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e1d6      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006250:	f7ff fc25 	bl	8005a9e <LL_RCC_LSI1_IsReady>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f1      	bne.n	800623e <HAL_RCC_OscConfig+0x31a>
 800625a:	e051      	b.n	8006300 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800625c:	f7ff fbfd 	bl	8005a5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fd fd28 	bl	8003cb4 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006266:	e00c      	b.n	8006282 <HAL_RCC_OscConfig+0x35e>
 8006268:	20000010 	.word	0x20000010
 800626c:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006270:	f7fd fd20 	bl	8003cb4 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e1bd      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006282:	f7ff fc0c 	bl	8005a9e <LL_RCC_LSI1_IsReady>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f1      	beq.n	8006270 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800628c:	f7ff fc2a 	bl	8005ae4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006292:	f7fd fd0f 	bl	8003cb4 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b03      	cmp	r3, #3
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1ac      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80062a4:	f7ff fc2f 	bl	8005b06 <LL_RCC_LSI2_IsReady>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f1      	bne.n	8006292 <HAL_RCC_OscConfig+0x36e>
 80062ae:	e027      	b.n	8006300 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80062b0:	f7ff fc18 	bl	8005ae4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fd fcfe 	bl	8003cb4 <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80062bc:	f7fd fcfa 	bl	8003cb4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e197      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80062ce:	f7ff fc1a 	bl	8005b06 <LL_RCC_LSI2_IsReady>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f1      	bne.n	80062bc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80062d8:	f7ff fbd0 	bl	8005a7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fd fcea 	bl	8003cb4 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062e4:	f7fd fce6 	bl	8003cb4 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e183      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80062f6:	f7ff fbd2 	bl	8005a9e <LL_RCC_LSI1_IsReady>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f1      	bne.n	80062e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d05b      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630c:	4ba7      	ldr	r3, [pc, #668]	; (80065ac <HAL_RCC_OscConfig+0x688>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d114      	bne.n	8006342 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006318:	f7ff fa70 	bl	80057fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800631c:	f7fd fcca 	bl	8003cb4 <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006324:	f7fd fcc6 	bl	8003cb4 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e163      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006336:	4b9d      	ldr	r3, [pc, #628]	; (80065ac <HAL_RCC_OscConfig+0x688>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_RCC_OscConfig+0x42c>
 800634a:	f7ff fb30 	bl	80059ae <LL_RCC_LSE_Enable>
 800634e:	e00c      	b.n	800636a <HAL_RCC_OscConfig+0x446>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b05      	cmp	r3, #5
 8006356:	d104      	bne.n	8006362 <HAL_RCC_OscConfig+0x43e>
 8006358:	f7ff fb4b 	bl	80059f2 <LL_RCC_LSE_EnableBypass>
 800635c:	f7ff fb27 	bl	80059ae <LL_RCC_LSE_Enable>
 8006360:	e003      	b.n	800636a <HAL_RCC_OscConfig+0x446>
 8006362:	f7ff fb35 	bl	80059d0 <LL_RCC_LSE_Disable>
 8006366:	f7ff fb55 	bl	8005a14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006372:	f7fd fc9f 	bl	8003cb4 <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006378:	e00a      	b.n	8006390 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fd fc9b 	bl	8003cb4 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e136      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006390:	f7ff fb51 	bl	8005a36 <LL_RCC_LSE_IsReady>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0ef      	beq.n	800637a <HAL_RCC_OscConfig+0x456>
 800639a:	e013      	b.n	80063c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639c:	f7fd fc8a 	bl	8003cb4 <HAL_GetTick>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80063a2:	e00a      	b.n	80063ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a4:	f7fd fc86 	bl	8003cb4 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e121      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80063ba:	f7ff fb3c 	bl	8005a36 <LL_RCC_LSE_IsReady>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1ef      	bne.n	80063a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02c      	beq.n	800642a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d014      	beq.n	8006402 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063d8:	f7ff fab5 	bl	8005946 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd fc6a 	bl	8003cb4 <HAL_GetTick>
 80063e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e4:	f7fd fc66 	bl	8003cb4 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e103      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80063f6:	f7ff fac8 	bl	800598a <LL_RCC_HSI48_IsReady>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f1      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4c0>
 8006400:	e013      	b.n	800642a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006402:	f7ff fab1 	bl	8005968 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006406:	f7fd fc55 	bl	8003cb4 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800640e:	f7fd fc51 	bl	8003cb4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e0ee      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006420:	f7ff fab3 	bl	800598a <LL_RCC_HSI48_IsReady>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f1      	bne.n	800640e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80e4 	beq.w	80065fc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006434:	f7ff fc11 	bl	8005c5a <LL_RCC_GetSysClkSource>
 8006438:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800643a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	2b02      	cmp	r3, #2
 8006448:	f040 80b4 	bne.w	80065b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0203 	and.w	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	429a      	cmp	r2, r3
 8006458:	d123      	bne.n	80064a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d11c      	bne.n	80064a2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d114      	bne.n	80064a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006482:	429a      	cmp	r2, r3
 8006484:	d10d      	bne.n	80064a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d05d      	beq.n	800655e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d058      	beq.n	800655a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e0a1      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80064ba:	f7ff fc84 	bl	8005dc6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064be:	f7fd fbf9 	bl	8003cb4 <HAL_GetTick>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c6:	f7fd fbf5 	bl	8003cb4 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e092      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ef      	bne.n	80064c6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <HAL_RCC_OscConfig+0x68c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064f8:	4311      	orrs	r1, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064fe:	0212      	lsls	r2, r2, #8
 8006500:	4311      	orrs	r1, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006506:	4311      	orrs	r1, r2
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800650c:	4311      	orrs	r1, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006512:	430a      	orrs	r2, r1
 8006514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006518:	4313      	orrs	r3, r2
 800651a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800651c:	f7ff fc44 	bl	8005da8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006530:	f7fd fbc0 	bl	8003cb4 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006538:	f7fd fbbc 	bl	8003cb4 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e059      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0ef      	beq.n	8006538 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006558:	e050      	b.n	80065fc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e04f      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800655e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d147      	bne.n	80065fc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800656c:	f7ff fc1c 	bl	8005da8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800657a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006580:	f7fd fb98 	bl	8003cb4 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006588:	f7fd fb94 	bl	8003cb4 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e031      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ef      	beq.n	8006588 <HAL_RCC_OscConfig+0x664>
 80065a8:	e028      	b.n	80065fc <HAL_RCC_OscConfig+0x6d8>
 80065aa:	bf00      	nop
 80065ac:	58000400 	.word	0x58000400
 80065b0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b0c      	cmp	r3, #12
 80065b8:	d01e      	beq.n	80065f8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	f7ff fc04 	bl	8005dc6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fd fb79 	bl	8003cb4 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c6:	f7fd fb75 	bl	8003cb4 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e012      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1ef      	bne.n	80065c6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80065e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_RCC_OscConfig+0x6e4>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	60cb      	str	r3, [r1, #12]
 80065f6:	e001      	b.n	80065fc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3734      	adds	r7, #52	; 0x34
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	eefefffc 	.word	0xeefefffc

0800660c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e12d      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006620:	4b98      	ldr	r3, [pc, #608]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d91b      	bls.n	8006666 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b95      	ldr	r3, [pc, #596]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 0207 	bic.w	r2, r3, #7
 8006636:	4993      	ldr	r1, [pc, #588]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4313      	orrs	r3, r2
 800663c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663e:	f7fd fb39 	bl	8003cb4 <HAL_GetTick>
 8006642:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006644:	e008      	b.n	8006658 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006646:	f7fd fb35 	bl	8003cb4 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e111      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006658:	4b8a      	ldr	r3, [pc, #552]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d1ef      	bne.n	8006646 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fafb 	bl	8005c72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800667c:	f7fd fb1a 	bl	8003cb4 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006684:	f7fd fb16 	bl	8003cb4 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e0f2      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006696:	f7ff fbe8 	bl	8005e6a <LL_RCC_IsActiveFlag_HPRE>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f1      	beq.n	8006684 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d016      	beq.n	80066da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff faf2 	bl	8005c9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066b6:	f7fd fafd 	bl	8003cb4 <HAL_GetTick>
 80066ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066be:	f7fd faf9 	bl	8003cb4 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0d5      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80066d0:	f7ff fbdd 	bl	8005e8e <LL_RCC_IsActiveFlag_C2HPRE>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f1      	beq.n	80066be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff faeb 	bl	8005cc6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066f0:	f7fd fae0 	bl	8003cb4 <HAL_GetTick>
 80066f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066f8:	f7fd fadc 	bl	8003cb4 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e0b8      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800670a:	f7ff fbd3 	bl	8005eb4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f1      	beq.n	80066f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d016      	beq.n	800674e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fae5 	bl	8005cf4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800672a:	f7fd fac3 	bl	8003cb4 <HAL_GetTick>
 800672e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006732:	f7fd fabf 	bl	8003cb4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e09b      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006744:	f7ff fbc9 	bl	8005eda <LL_RCC_IsActiveFlag_PPRE1>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f1      	beq.n	8006732 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d017      	beq.n	800678a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fadb 	bl	8005d1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006766:	f7fd faa5 	bl	8003cb4 <HAL_GetTick>
 800676a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800676e:	f7fd faa1 	bl	8003cb4 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e07d      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006780:	f7ff fbbd 	bl	8005efe <LL_RCC_IsActiveFlag_PPRE2>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f1      	beq.n	800676e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d043      	beq.n	800681e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d106      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800679e:	f7ff f87b 	bl	8005898 <LL_RCC_HSE_IsReady>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11e      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e067      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d106      	bne.n	80067c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80067b4:	f7ff fb16 	bl	8005de4 <LL_RCC_PLL_IsReady>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d113      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e05c      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80067ca:	f7ff f9e3 	bl	8005b94 <LL_RCC_MSI_IsReady>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d108      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e051      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80067d8:	f7ff f88e 	bl	80058f8 <LL_RCC_HSI_IsReady>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e04a      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fa21 	bl	8005c32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067f0:	f7fd fa60 	bl	8003cb4 <HAL_GetTick>
 80067f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f6:	e00a      	b.n	800680e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f8:	f7fd fa5c 	bl	8003cb4 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f241 3288 	movw	r2, #5000	; 0x1388
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e036      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680e:	f7ff fa24 	bl	8005c5a <LL_RCC_GetSysClkSource>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	429a      	cmp	r2, r3
 800681c:	d1ec      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800681e:	4b19      	ldr	r3, [pc, #100]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d21b      	bcs.n	8006864 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682c:	4b15      	ldr	r3, [pc, #84]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f023 0207 	bic.w	r2, r3, #7
 8006834:	4913      	ldr	r1, [pc, #76]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683c:	f7fd fa3a 	bl	8003cb4 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	e008      	b.n	8006856 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006844:	f7fd fa36 	bl	8003cb4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e012      	b.n	800687c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_ClockConfig+0x278>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d1ef      	bne.n	8006844 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006864:	f000 f880 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8006868:	4603      	mov	r3, r0
 800686a:	4a07      	ldr	r2, [pc, #28]	; (8006888 <HAL_RCC_ClockConfig+0x27c>)
 800686c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800686e:	f7fd fa2d 	bl	8003ccc <HAL_GetTickPrio>
 8006872:	4603      	mov	r3, r0
 8006874:	4618      	mov	r0, r3
 8006876:	f7fd f9cf 	bl	8003c18 <HAL_InitTick>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	58004000 	.word	0x58004000
 8006888:	20000010 	.word	0x20000010

0800688c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006892:	f7ff f9e2 	bl	8005c5a <LL_RCC_GetSysClkSource>
 8006896:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800689e:	f7ff f99e 	bl	8005bde <LL_RCC_MSI_GetRange>
 80068a2:	4603      	mov	r3, r0
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	4a2b      	ldr	r2, [pc, #172]	; (8006958 <HAL_RCC_GetSysClockFreq+0xcc>)
 80068ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e04b      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d102      	bne.n	80068c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_RCC_GetSysClockFreq+0xd0>)
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e045      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d10a      	bne.n	80068dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068c6:	f7fe ffb7 	bl	8005838 <LL_RCC_HSE_IsEnabledDiv2>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e03a      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80068d6:	4b23      	ldr	r3, [pc, #140]	; (8006964 <HAL_RCC_GetSysClockFreq+0xd8>)
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e037      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80068dc:	f7ff fab9 	bl	8005e52 <LL_RCC_PLL_GetMainSource>
 80068e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d003      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x64>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80068ee:	e00d      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <HAL_RCC_GetSysClockFreq+0xd0>)
 80068f2:	60bb      	str	r3, [r7, #8]
        break;
 80068f4:	e015      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068f6:	f7fe ff9f 	bl	8005838 <LL_RCC_HSE_IsEnabledDiv2>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d102      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006902:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006904:	e00d      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006906:	4b17      	ldr	r3, [pc, #92]	; (8006964 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006908:	60bb      	str	r3, [r7, #8]
        break;
 800690a:	e00a      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800690c:	f7ff f967 	bl	8005bde <LL_RCC_MSI_GetRange>
 8006910:	4603      	mov	r3, r0
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	4a0f      	ldr	r2, [pc, #60]	; (8006958 <HAL_RCC_GetSysClockFreq+0xcc>)
 800691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691e:	60bb      	str	r3, [r7, #8]
        break;
 8006920:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006922:	f7ff fa71 	bl	8005e08 <LL_RCC_PLL_GetN>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	fb03 f402 	mul.w	r4, r3, r2
 800692e:	f7ff fa84 	bl	8005e3a <LL_RCC_PLL_GetDivider>
 8006932:	4603      	mov	r3, r0
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	3301      	adds	r3, #1
 8006938:	fbb4 f4f3 	udiv	r4, r4, r3
 800693c:	f7ff fa71 	bl	8005e22 <LL_RCC_PLL_GetR>
 8006940:	4603      	mov	r3, r0
 8006942:	0f5b      	lsrs	r3, r3, #29
 8006944:	3301      	adds	r3, #1
 8006946:	fbb4 f3f3 	udiv	r3, r4, r3
 800694a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}
 8006956:	bf00      	nop
 8006958:	0800e488 	.word	0x0800e488
 800695c:	00f42400 	.word	0x00f42400
 8006960:	003d0900 	.word	0x003d0900
 8006964:	007a1200 	.word	0x007a1200

08006968 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006968:	b598      	push	{r3, r4, r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800696c:	f7ff ff8e 	bl	800688c <HAL_RCC_GetSysClockFreq>
 8006970:	4604      	mov	r4, r0
 8006972:	f7ff f9e7 	bl	8005d44 <LL_RCC_GetAHBPrescaler>
 8006976:	4603      	mov	r3, r0
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	4a03      	ldr	r2, [pc, #12]	; (800698c <HAL_RCC_GetHCLKFreq+0x24>)
 8006980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006984:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd98      	pop	{r3, r4, r7, pc}
 800698c:	0800e428 	.word	0x0800e428

08006990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006990:	b598      	push	{r3, r4, r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006994:	f7ff ffe8 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8006998:	4604      	mov	r4, r0
 800699a:	f7ff f9ed 	bl	8005d78 <LL_RCC_GetAPB1Prescaler>
 800699e:	4603      	mov	r3, r0
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	bd98      	pop	{r3, r4, r7, pc}
 80069b8:	0800e468 	.word	0x0800e468

080069bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069bc:	b598      	push	{r3, r4, r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80069c0:	f7ff ffd2 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 80069c4:	4604      	mov	r4, r0
 80069c6:	f7ff f9e3 	bl	8005d90 <LL_RCC_GetAPB2Prescaler>
 80069ca:	4603      	mov	r3, r0
 80069cc:	0adb      	lsrs	r3, r3, #11
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd98      	pop	{r3, r4, r7, pc}
 80069e4:	0800e468 	.word	0x0800e468

080069e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2bb0      	cmp	r3, #176	; 0xb0
 80069f4:	d903      	bls.n	80069fe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e007      	b.n	8006a0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006a0e:	f7ff f9a5 	bl	8005d5c <LL_RCC_GetAHB4Prescaler>
 8006a12:	4603      	mov	r3, r0
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a30:	0c9c      	lsrs	r4, r3, #18
 8006a32:	f7fe fef3 	bl	800581c <HAL_PWREx_GetVoltageRange>
 8006a36:	4603      	mov	r3, r0
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 f80c 	bl	8006a58 <RCC_SetFlashLatency>
 8006a40:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd90      	pop	{r4, r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800e488 	.word	0x0800e488
 8006a50:	0800e428 	.word	0x0800e428
 8006a54:	431bde83 	.word	0x431bde83

08006a58 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b093      	sub	sp, #76	; 0x4c
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006a62:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <RCC_SetFlashLatency+0xe8>)
 8006a64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006a68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006a6e:	4a35      	ldr	r2, [pc, #212]	; (8006b44 <RCC_SetFlashLatency+0xec>)
 8006a70:	f107 031c 	add.w	r3, r7, #28
 8006a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006a7a:	4b33      	ldr	r3, [pc, #204]	; (8006b48 <RCC_SetFlashLatency+0xf0>)
 8006a7c:	f107 040c 	add.w	r4, r7, #12
 8006a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a86:	2300      	movs	r3, #0
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d11a      	bne.n	8006ac8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a92:	2300      	movs	r3, #0
 8006a94:	643b      	str	r3, [r7, #64]	; 0x40
 8006a96:	e013      	b.n	8006ac0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	3348      	adds	r3, #72	; 0x48
 8006a9e:	443b      	add	r3, r7
 8006aa0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d807      	bhi.n	8006aba <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	3348      	adds	r3, #72	; 0x48
 8006ab0:	443b      	add	r3, r7
 8006ab2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ab8:	e020      	b.n	8006afc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abc:	3301      	adds	r3, #1
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d9e8      	bls.n	8006a98 <RCC_SetFlashLatency+0x40>
 8006ac6:	e019      	b.n	8006afc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006acc:	e013      	b.n	8006af6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	3348      	adds	r3, #72	; 0x48
 8006ad4:	443b      	add	r3, r7
 8006ad6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d807      	bhi.n	8006af0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	3348      	adds	r3, #72	; 0x48
 8006ae6:	443b      	add	r3, r7
 8006ae8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006aec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006aee:	e005      	b.n	8006afc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af2:	3301      	adds	r3, #1
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d9e8      	bls.n	8006ace <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006afc:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <RCC_SetFlashLatency+0xf4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f023 0207 	bic.w	r2, r3, #7
 8006b04:	4911      	ldr	r1, [pc, #68]	; (8006b4c <RCC_SetFlashLatency+0xf4>)
 8006b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b0c:	f7fd f8d2 	bl	8003cb4 <HAL_GetTick>
 8006b10:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b12:	e008      	b.n	8006b26 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b14:	f7fd f8ce 	bl	8003cb4 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e007      	b.n	8006b36 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <RCC_SetFlashLatency+0xf4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d1ef      	bne.n	8006b14 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	374c      	adds	r7, #76	; 0x4c
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	0800e2fc 	.word	0x0800e2fc
 8006b44:	0800e30c 	.word	0x0800e30c
 8006b48:	0800e318 	.word	0x0800e318
 8006b4c:	58004000 	.word	0x58004000

08006b50 <LL_RCC_LSE_IsEnabled>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <LL_RCC_LSE_IsEnabled+0x18>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <LL_RCC_LSE_IsEnabled+0x1a>
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_LSE_IsReady>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d101      	bne.n	8006b8c <LL_RCC_LSE_IsReady+0x18>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_RCC_LSE_IsReady+0x1a>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_RCC_SetRFWKPClockSource>:
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ba8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_RCC_SetSMPSClockSource>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f023 0203 	bic.w	r2, r3, #3
 8006bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <LL_RCC_SetSMPSPrescaler>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_SetUSARTClockSource>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	f023 0203 	bic.w	r2, r3, #3
 8006c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_SetLPUARTClockSource>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LL_RCC_SetI2CClockSource>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006c84:	43db      	mvns	r3, r3
 8006c86:	401a      	ands	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <LL_RCC_SetLPTIMClockSource>:
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <LL_RCC_SetSAIClockSource>:
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <LL_RCC_SetRNGClockSource>:
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_SetCLK48ClockSource>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_RCC_SetUSBClockSource>:
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ffe3 	bl	8006d32 <LL_RCC_SetCLK48ClockSource>
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <LL_RCC_SetADCClockSource>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_SetRTCClockSource>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <LL_RCC_GetRTCClockSource>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_ForceBackupDomainReset>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e20:	bf00      	nop
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_PLLSAI1_Enable>:
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e3c:	6013      	str	r3, [r2, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <LL_RCC_PLLSAI1_Disable>:
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e5a:	6013      	str	r3, [r2, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <LL_RCC_PLLSAI1_IsReady>:
{
 8006e66:	b480      	push	{r7}
 8006e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e78:	d101      	bne.n	8006e7e <LL_RCC_PLLSAI1_IsReady+0x18>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b088      	sub	sp, #32
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006e92:	2300      	movs	r3, #0
 8006e94:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e96:	2300      	movs	r3, #0
 8006e98:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d034      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eae:	d021      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eb4:	d81b      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eba:	d01d      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ec0:	d815      	bhi.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eca:	d110      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eda:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006edc:	e00d      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f947 	bl	8007176 <RCCEx_PLLSAI1_ConfigNP>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006eec:	e005      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	77fb      	strb	r3, [r7, #31]
        break;
 8006ef2:	e002      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d105      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fee8 	bl	8006cda <LL_RCC_SetSAIClockSource>
 8006f0a:	e001      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d046      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006f1c:	f7ff ff56 	bl	8006dcc <LL_RCC_GetRTCClockSource>
 8006f20:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d03c      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f2c:	f7fe fc66 	bl	80057fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d105      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff ff30 	bl	8006da0 <LL_RCC_SetRTCClockSource>
 8006f40:	e02e      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f4c:	f7ff ff4b 	bl	8006de6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f50:	f7ff ff5a 	bl	8006e08 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f6c:	f7ff fdf0 	bl	8006b50 <LL_RCC_LSE_IsEnabled>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d114      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f76:	f7fc fe9d 	bl	8003cb4 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f7c:	e00b      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f7fc fe99 	bl	8003cb4 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d902      	bls.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	77fb      	strb	r3, [r7, #31]
              break;
 8006f94:	e004      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f96:	f7ff fded 	bl	8006b74 <LL_RCC_LSE_IsReady>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006fa0:	7ffb      	ldrb	r3, [r7, #31]
 8006fa2:	77bb      	strb	r3, [r7, #30]
 8006fa4:	e001      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
 8006fa8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fe2a 	bl	8006c14 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff fe35 	bl	8006c40 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fe5d 	bl	8006ca6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fe52 	bl	8006ca6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fe2a 	bl	8006c6c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fe1f 	bl	8006c6c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d022      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fe8d 	bl	8006d5e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704c:	d107      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800705c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007066:	d10b      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f8dd 	bl	800722c <RCCEx_PLLSAI1_ConfigNQ>
 8007072:	4603      	mov	r3, r0
 8007074:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800707c:	7ffb      	ldrb	r3, [r7, #31]
 800707e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02b      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d008      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800709e:	d003      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fe2a 	bl	8006d06 <LL_RCC_SetRNGClockSource>
 80070b2:	e00a      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x240>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	2000      	movs	r0, #0
 80070c0:	f7ff fe21 	bl	8006d06 <LL_RCC_SetRNGClockSource>
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fe34 	bl	8006d32 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80070d2:	d107      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d022      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fe3d 	bl	8006d74 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d107      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800710e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007112:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800711c:	d10b      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f8dd 	bl	80072e2 <RCCEx_PLLSAI1_ConfigNR>
 8007128:	4603      	mov	r3, r0
 800712a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800712c:	7ffb      	ldrb	r3, [r7, #31]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007132:	7ffb      	ldrb	r3, [r7, #31]
 8007134:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff fd26 	bl	8006b98 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fd45 	bl	8006bec <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff fd2c 	bl	8006bc4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800716c:	7fbb      	ldrb	r3, [r7, #30]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007182:	f7ff fe61 	bl	8006e48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007186:	f7fc fd95 	bl	8003cb4 <HAL_GetTick>
 800718a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800718c:	e009      	b.n	80071a2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800718e:	f7fc fd91 	bl	8003cb4 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d902      	bls.n	80071a2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	73fb      	strb	r3, [r7, #15]
      break;
 80071a0:	e004      	b.n	80071ac <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071a2:	f7ff fe60 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d137      	bne.n	8007222 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071c6:	4313      	orrs	r3, r2
 80071c8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80071ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071dc:	4313      	orrs	r3, r2
 80071de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80071e0:	f7ff fe23 	bl	8006e2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e4:	f7fc fd66 	bl	8003cb4 <HAL_GetTick>
 80071e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80071ea:	e009      	b.n	8007200 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071ec:	f7fc fd62 	bl	8003cb4 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d902      	bls.n	8007200 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	73fb      	strb	r3, [r7, #15]
        break;
 80071fe:	e004      	b.n	800720a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007200:	f7ff fe31 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d1f0      	bne.n	80071ec <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d108      	bne.n	8007222 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800721e:	4313      	orrs	r3, r2
 8007220:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007238:	f7ff fe06 	bl	8006e48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800723c:	f7fc fd3a 	bl	8003cb4 <HAL_GetTick>
 8007240:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007242:	e009      	b.n	8007258 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007244:	f7fc fd36 	bl	8003cb4 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d902      	bls.n	8007258 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	73fb      	strb	r3, [r7, #15]
      break;
 8007256:	e004      	b.n	8007262 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007258:	f7ff fe05 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d137      	bne.n	80072d8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800727c:	4313      	orrs	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007292:	4313      	orrs	r3, r2
 8007294:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007296:	f7ff fdc8 	bl	8006e2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729a:	f7fc fd0b 	bl	8003cb4 <HAL_GetTick>
 800729e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072a0:	e009      	b.n	80072b6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072a2:	f7fc fd07 	bl	8003cb4 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d902      	bls.n	80072b6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	73fb      	strb	r3, [r7, #15]
        break;
 80072b4:	e004      	b.n	80072c0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072b6:	f7ff fdd6 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d1f0      	bne.n	80072a2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072d4:	4313      	orrs	r3, r2
 80072d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80072ee:	f7ff fdab 	bl	8006e48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f2:	f7fc fcdf 	bl	8003cb4 <HAL_GetTick>
 80072f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072f8:	e009      	b.n	800730e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072fa:	f7fc fcdb 	bl	8003cb4 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d902      	bls.n	800730e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	73fb      	strb	r3, [r7, #15]
      break;
 800730c:	e004      	b.n	8007318 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800730e:	f7ff fdaa 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f0      	bne.n	80072fa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d137      	bne.n	800738e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800731e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007348:	4313      	orrs	r3, r2
 800734a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800734c:	f7ff fd6d 	bl	8006e2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007350:	f7fc fcb0 	bl	8003cb4 <HAL_GetTick>
 8007354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007356:	e009      	b.n	800736c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007358:	f7fc fcac 	bl	8003cb4 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d902      	bls.n	800736c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
        break;
 800736a:	e004      	b.n	8007376 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800736c:	f7ff fd7b 	bl	8006e66 <LL_RCC_PLLSAI1_IsReady>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d1f0      	bne.n	8007358 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800738a:	4313      	orrs	r3, r2
 800738c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <LL_RCC_GetUSARTClockSource>:
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4013      	ands	r3, r2
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <LL_RCC_GetLPUARTClockSource>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4013      	ands	r3, r2
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e042      	b.n	8007470 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d106      	bne.n	8007402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fc f9c7 	bl	8003790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2224      	movs	r2, #36	; 0x24
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fc4a 	bl	8007cb4 <UART_SetConfig>
 8007420:	4603      	mov	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e022      	b.n	8007470 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fe66 	bl	8008104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 feed 	bl	8008248 <UART_CheckIdleState>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748e:	2b20      	cmp	r3, #32
 8007490:	d17b      	bne.n	800758a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_UART_Transmit+0x26>
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e074      	b.n	800758c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2221      	movs	r2, #33	; 0x21
 80074ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b2:	f7fc fbff 	bl	8003cb4 <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d0:	d108      	bne.n	80074e4 <HAL_UART_Transmit+0x6c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	e003      	b.n	80074ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074ec:	e030      	b.n	8007550 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	2180      	movs	r1, #128	; 0x80
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 ff4f 	bl	800839c <UART_WaitOnFlagUntilTimeout>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e03d      	b.n	800758c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007524:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	3302      	adds	r3, #2
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e007      	b.n	800753e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	3301      	adds	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1c8      	bne.n	80074ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2200      	movs	r2, #0
 8007564:	2140      	movs	r1, #64	; 0x40
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 ff18 	bl	800839c <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e006      	b.n	800758c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d137      	bne.n	800761c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_UART_Receive_IT+0x24>
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e030      	b.n	800761e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_UART_Receive_IT+0x94>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d01f      	beq.n	800760c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	613b      	str	r3, [r7, #16]
   return(result);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	623b      	str	r3, [r7, #32]
 80075fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	69f9      	ldr	r1, [r7, #28]
 80075fe:	6a3a      	ldr	r2, [r7, #32]
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	61bb      	str	r3, [r7, #24]
   return(result);
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e6      	bne.n	80075da <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	461a      	mov	r2, r3
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 ff2a 	bl	800846c <UART_Start_Receive_IT>
 8007618:	4603      	mov	r3, r0
 800761a:	e000      	b.n	800761e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3728      	adds	r7, #40	; 0x28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40008000 	.word	0x40008000

0800762c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b0ba      	sub	sp, #232	; 0xe8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007656:	f640 030f 	movw	r3, #2063	; 0x80f
 800765a:	4013      	ands	r3, r2
 800765c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11b      	bne.n	80076a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 82e3 	beq.w	8007c5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
      }
      return;
 800769e:	e2dd      	b.n	8007c5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8123 	beq.w	80078f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076ae:	4b8d      	ldr	r3, [pc, #564]	; (80078e4 <HAL_UART_IRQHandler+0x2b8>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076ba:	4b8b      	ldr	r3, [pc, #556]	; (80078e8 <HAL_UART_IRQHandler+0x2bc>)
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 8116 	beq.w	80078f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d011      	beq.n	80076f4 <HAL_UART_IRQHandler+0xc8>
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2201      	movs	r2, #1
 80076e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ea:	f043 0201 	orr.w	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d011      	beq.n	8007724 <HAL_UART_IRQHandler+0xf8>
 8007700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2202      	movs	r2, #2
 8007712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f043 0204 	orr.w	r2, r3, #4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d011      	beq.n	8007754 <HAL_UART_IRQHandler+0x128>
 8007730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2204      	movs	r2, #4
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774a:	f043 0202 	orr.w	r2, r3, #2
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d017      	beq.n	8007790 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800776c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007770:	4b5c      	ldr	r3, [pc, #368]	; (80078e4 <HAL_UART_IRQHandler+0x2b8>)
 8007772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2208      	movs	r2, #8
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007786:	f043 0208 	orr.w	r2, r3, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007798:	2b00      	cmp	r3, #0
 800779a:	d012      	beq.n	80077c2 <HAL_UART_IRQHandler+0x196>
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b8:	f043 0220 	orr.w	r2, r3, #32
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8249 	beq.w	8007c60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d005      	beq.n	8007826 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800781a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800781e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007822:	2b00      	cmp	r3, #0
 8007824:	d054      	beq.n	80078d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 ff42 	bl	80086b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d146      	bne.n	80078c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800786a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800787e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1d9      	bne.n	800783a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <HAL_UART_IRQHandler+0x2c0>)
 8007898:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fc fbcb 	bl	800403c <HAL_DMA_Abort_IT>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d019      	beq.n	80078e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80078ba:	4610      	mov	r0, r2
 80078bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078be:	e00f      	b.n	80078e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9e1 	bl	8007c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	e00b      	b.n	80078e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9dd 	bl	8007c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	e007      	b.n	80078e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9d9 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80078de:	e1bf      	b.n	8007c60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	bf00      	nop
    return;
 80078e2:	e1bd      	b.n	8007c60 <HAL_UART_IRQHandler+0x634>
 80078e4:	10000001 	.word	0x10000001
 80078e8:	04000120 	.word	0x04000120
 80078ec:	0800877d 	.word	0x0800877d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	f040 8153 	bne.w	8007ba0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 814c 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8145 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2210      	movs	r2, #16
 800791c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	f040 80bb 	bne.w	8007aa4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800793c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 818f 	beq.w	8007c64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800794c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007950:	429a      	cmp	r2, r3
 8007952:	f080 8187 	bcs.w	8007c64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800795c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 8087 	bne.w	8007a82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800798c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800799e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1da      	bne.n	8007974 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3308      	adds	r3, #8
 80079c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e1      	bne.n	80079be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e3      	bne.n	80079fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a50:	f023 0310 	bic.w	r3, r3, #16
 8007a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e4      	bne.n	8007a40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fc fa7e 	bl	8003f7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f8fd 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aa2:	e0df      	b.n	8007c64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80d1 	beq.w	8007c68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80cc 	beq.w	8007c68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007af2:	647b      	str	r3, [r7, #68]	; 0x44
 8007af4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e4      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e1      	bne.n	8007b06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0310 	bic.w	r3, r3, #16
 8007b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	617b      	str	r3, [r7, #20]
   return(result);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f87f 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b9e:	e063      	b.n	8007c68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00e      	beq.n	8007bca <HAL_UART_IRQHandler+0x59e>
 8007bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fb38 	bl	8009238 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bc8:	e051      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d014      	beq.n	8007c00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d105      	bne.n	8007bee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d008      	beq.n	8007c00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d03a      	beq.n	8007c6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
    }
    return;
 8007bfe:	e035      	b.n	8007c6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <HAL_UART_IRQHandler+0x5f4>
 8007c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fdc5 	bl	80087a8 <UART_EndTransmit_IT>
    return;
 8007c1e:	e026      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <HAL_UART_IRQHandler+0x614>
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fb11 	bl	8009260 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c3e:	e016      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <HAL_UART_IRQHandler+0x642>
 8007c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da0c      	bge.n	8007c6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 faf9 	bl	800924c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c5a:	e008      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
      return;
 8007c5c:	bf00      	nop
 8007c5e:	e006      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
    return;
 8007c60:	bf00      	nop
 8007c62:	e004      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
      return;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
      return;
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <HAL_UART_IRQHandler+0x642>
    return;
 8007c6c:	bf00      	nop
  }
}
 8007c6e:	37e8      	adds	r7, #232	; 0xe8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb8:	b08c      	sub	sp, #48	; 0x30
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4baf      	ldr	r3, [pc, #700]	; (8007fa0 <UART_SetConfig+0x2ec>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4aa4      	ldr	r2, [pc, #656]	; (8007fa4 <UART_SetConfig+0x2f0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	f023 010f 	bic.w	r1, r3, #15
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a95      	ldr	r2, [pc, #596]	; (8007fa8 <UART_SetConfig+0x2f4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d125      	bne.n	8007da4 <UART_SetConfig+0xf0>
 8007d58:	2003      	movs	r0, #3
 8007d5a:	f7ff fb1d 	bl	8007398 <LL_RCC_GetUSARTClockSource>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d81b      	bhi.n	8007d9c <UART_SetConfig+0xe8>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0xb8>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d82:	e042      	b.n	8007e0a <UART_SetConfig+0x156>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8a:	e03e      	b.n	8007e0a <UART_SetConfig+0x156>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d92:	e03a      	b.n	8007e0a <UART_SetConfig+0x156>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9a:	e036      	b.n	8007e0a <UART_SetConfig+0x156>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da2:	e032      	b.n	8007e0a <UART_SetConfig+0x156>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a7e      	ldr	r2, [pc, #504]	; (8007fa4 <UART_SetConfig+0x2f0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d12a      	bne.n	8007e04 <UART_SetConfig+0x150>
 8007dae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007db2:	f7ff fb01 	bl	80073b8 <LL_RCC_GetLPUARTClockSource>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dbc:	d01a      	beq.n	8007df4 <UART_SetConfig+0x140>
 8007dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dc2:	d81b      	bhi.n	8007dfc <UART_SetConfig+0x148>
 8007dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc8:	d00c      	beq.n	8007de4 <UART_SetConfig+0x130>
 8007dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dce:	d815      	bhi.n	8007dfc <UART_SetConfig+0x148>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <UART_SetConfig+0x128>
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d008      	beq.n	8007dec <UART_SetConfig+0x138>
 8007dda:	e00f      	b.n	8007dfc <UART_SetConfig+0x148>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0x156>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e00e      	b.n	8007e0a <UART_SetConfig+0x156>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e00a      	b.n	8007e0a <UART_SetConfig+0x156>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	e006      	b.n	8007e0a <UART_SetConfig+0x156>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x156>
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a65      	ldr	r2, [pc, #404]	; (8007fa4 <UART_SetConfig+0x2f0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	f040 8097 	bne.w	8007f44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d823      	bhi.n	8007e66 <UART_SetConfig+0x1b2>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0x170>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e57 	.word	0x08007e57
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e67 	.word	0x08007e67
 8007e44:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7fe fda2 	bl	8006990 <HAL_RCC_GetPCLK1Freq>
 8007e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b56      	ldr	r3, [pc, #344]	; (8007fac <UART_SetConfig+0x2f8>)
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e54:	e00d      	b.n	8007e72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fe fd19 	bl	800688c <HAL_RCC_GetSysClockFreq>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 812b 	beq.w	80080d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	4a4c      	ldr	r2, [pc, #304]	; (8007fb0 <UART_SetConfig+0x2fc>)
 8007e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d305      	bcc.n	8007eaa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d903      	bls.n	8007eb2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eb0:	e10e      	b.n	80080d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	60bb      	str	r3, [r7, #8]
 8007eb8:	60fa      	str	r2, [r7, #12]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	4a3c      	ldr	r2, [pc, #240]	; (8007fb0 <UART_SetConfig+0x2fc>)
 8007ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ed4:	f7f8 feb0 	bl	8000c38 <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	020b      	lsls	r3, r1, #8
 8007eea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eee:	0202      	lsls	r2, r0, #8
 8007ef0:	6979      	ldr	r1, [r7, #20]
 8007ef2:	6849      	ldr	r1, [r1, #4]
 8007ef4:	0849      	lsrs	r1, r1, #1
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	4605      	mov	r5, r0
 8007efc:	eb12 0804 	adds.w	r8, r2, r4
 8007f00:	eb43 0905 	adc.w	r9, r3, r5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	469a      	mov	sl, r3
 8007f0c:	4693      	mov	fp, r2
 8007f0e:	4652      	mov	r2, sl
 8007f10:	465b      	mov	r3, fp
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 fe8f 	bl	8000c38 <__aeabi_uldivmod>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4613      	mov	r3, r2
 8007f20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f28:	d308      	bcc.n	8007f3c <UART_SetConfig+0x288>
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f30:	d204      	bcs.n	8007f3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	e0c9      	b.n	80080d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f42:	e0c5      	b.n	80080d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4c:	d16d      	bne.n	800802a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b07      	cmp	r3, #7
 8007f56:	d82d      	bhi.n	8007fb4 <UART_SetConfig+0x300>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x2ac>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007fb5 	.word	0x08007fb5
 8007f6c:	08007f8f 	.word	0x08007f8f
 8007f70:	08007fb5 	.word	0x08007fb5
 8007f74:	08007fb5 	.word	0x08007fb5
 8007f78:	08007fb5 	.word	0x08007fb5
 8007f7c:	08007f97 	.word	0x08007f97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f80:	f7fe fd1c 	bl	80069bc <HAL_RCC_GetPCLK2Freq>
 8007f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f86:	e01b      	b.n	8007fc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f88:	4b08      	ldr	r3, [pc, #32]	; (8007fac <UART_SetConfig+0x2f8>)
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f8c:	e018      	b.n	8007fc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8e:	f7fe fc7d 	bl	800688c <HAL_RCC_GetSysClockFreq>
 8007f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f94:	e014      	b.n	8007fc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f9c:	e010      	b.n	8007fc0 <UART_SetConfig+0x30c>
 8007f9e:	bf00      	nop
 8007fa0:	cfff69f3 	.word	0xcfff69f3
 8007fa4:	40008000 	.word	0x40008000
 8007fa8:	40013800 	.word	0x40013800
 8007fac:	00f42400 	.word	0x00f42400
 8007fb0:	0800e4c8 	.word	0x0800e4c8
      default:
        pclk = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8084 	beq.w	80080d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	4a4b      	ldr	r2, [pc, #300]	; (80080fc <UART_SetConfig+0x448>)
 8007fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fda:	005a      	lsls	r2, r3, #1
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	441a      	add	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	2b0f      	cmp	r3, #15
 8007ff2:	d916      	bls.n	8008022 <UART_SetConfig+0x36e>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffa:	d212      	bcs.n	8008022 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	b29a      	uxth	r2, r3
 8008012:	8bfb      	ldrh	r3, [r7, #30]
 8008014:	4313      	orrs	r3, r2
 8008016:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	8bfa      	ldrh	r2, [r7, #30]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	e056      	b.n	80080d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008028:	e052      	b.n	80080d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800802a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800802e:	3b01      	subs	r3, #1
 8008030:	2b07      	cmp	r3, #7
 8008032:	d822      	bhi.n	800807a <UART_SetConfig+0x3c6>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <UART_SetConfig+0x388>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	0800805d 	.word	0x0800805d
 8008040:	08008065 	.word	0x08008065
 8008044:	0800807b 	.word	0x0800807b
 8008048:	0800806b 	.word	0x0800806b
 800804c:	0800807b 	.word	0x0800807b
 8008050:	0800807b 	.word	0x0800807b
 8008054:	0800807b 	.word	0x0800807b
 8008058:	08008073 	.word	0x08008073
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800805c:	f7fe fcae 	bl	80069bc <HAL_RCC_GetPCLK2Freq>
 8008060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008062:	e010      	b.n	8008086 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008064:	4b26      	ldr	r3, [pc, #152]	; (8008100 <UART_SetConfig+0x44c>)
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008068:	e00d      	b.n	8008086 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806a:	f7fe fc0f 	bl	800688c <HAL_RCC_GetSysClockFreq>
 800806e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008070:	e009      	b.n	8008086 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008078:	e005      	b.n	8008086 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008084:	bf00      	nop
    }

    if (pclk != 0U)
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d021      	beq.n	80080d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <UART_SetConfig+0x448>)
 8008092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008096:	461a      	mov	r2, r3
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	fbb3 f2f2 	udiv	r2, r3, r2
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	441a      	add	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	2b0f      	cmp	r3, #15
 80080b4:	d909      	bls.n	80080ca <UART_SetConfig+0x416>
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d205      	bcs.n	80080ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60da      	str	r2, [r3, #12]
 80080c8:	e002      	b.n	80080d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2201      	movs	r2, #1
 80080dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2200      	movs	r2, #0
 80080ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3730      	adds	r7, #48	; 0x30
 80080f4:	46bd      	mov	sp, r7
 80080f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fa:	bf00      	nop
 80080fc:	0800e4c8 	.word	0x0800e4c8
 8008100:	00f42400 	.word	0x00f42400

08008104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01a      	beq.n	800821a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008202:	d10a      	bne.n	800821a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	605a      	str	r2, [r3, #4]
  }
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b098      	sub	sp, #96	; 0x60
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008258:	f7fb fd2c 	bl	8003cb4 <HAL_GetTick>
 800825c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b08      	cmp	r3, #8
 800826a:	d12f      	bne.n	80082cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008274:	2200      	movs	r2, #0
 8008276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f88e 	bl	800839c <UART_WaitOnFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d022      	beq.n	80082cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800829a:	653b      	str	r3, [r7, #80]	; 0x50
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a4:	647b      	str	r3, [r7, #68]	; 0x44
 80082a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e6      	bne.n	8008286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e063      	b.n	8008394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d149      	bne.n	800836e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e2:	2200      	movs	r2, #0
 80082e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f857 	bl	800839c <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d03c      	beq.n	800836e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	623b      	str	r3, [r7, #32]
   return(result);
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008312:	633b      	str	r3, [r7, #48]	; 0x30
 8008314:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e6      	bne.n	80082f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	60fb      	str	r3, [r7, #12]
   return(result);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f023 0301 	bic.w	r3, r3, #1
 800833c:	64bb      	str	r3, [r7, #72]	; 0x48
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008346:	61fa      	str	r2, [r7, #28]
 8008348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	69b9      	ldr	r1, [r7, #24]
 800834c:	69fa      	ldr	r2, [r7, #28]
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	617b      	str	r3, [r7, #20]
   return(result);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e5      	bne.n	8008326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e012      	b.n	8008394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3758      	adds	r7, #88	; 0x58
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ac:	e049      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d045      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b6:	f7fb fc7d 	bl	8003cb4 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <UART_WaitOnFlagUntilTimeout+0x30>
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e048      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d031      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d110      	bne.n	800840e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2208      	movs	r2, #8
 80083f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f95b 	bl	80086b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2208      	movs	r2, #8
 80083fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e029      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841c:	d111      	bne.n	8008442 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f941 	bl	80086b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e00f      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	4013      	ands	r3, r2
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	429a      	cmp	r2, r3
 800845e:	d0a6      	beq.n	80083ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800846c:	b480      	push	{r7}
 800846e:	b0a3      	sub	sp, #140	; 0x8c
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	d10e      	bne.n	80084be <UART_Start_Receive_IT+0x52>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <UART_Start_Receive_IT+0x48>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084b2:	e02d      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084bc:	e028      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <UART_Start_Receive_IT+0x76>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <UART_Start_Receive_IT+0x6c>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	22ff      	movs	r2, #255	; 0xff
 80084d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084d6:	e01b      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	227f      	movs	r2, #127	; 0x7f
 80084dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084e0:	e016      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ea:	d10d      	bne.n	8008508 <UART_Start_Receive_IT+0x9c>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <UART_Start_Receive_IT+0x92>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	227f      	movs	r2, #127	; 0x7f
 80084f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084fc:	e008      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	223f      	movs	r2, #63	; 0x3f
 8008502:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008506:	e003      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2222      	movs	r2, #34	; 0x22
 800851c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008544:	673a      	str	r2, [r7, #112]	; 0x70
 8008546:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800854a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e3      	bne.n	8008520 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008560:	d14f      	bne.n	8008602 <UART_Start_Receive_IT+0x196>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	429a      	cmp	r2, r3
 800856c:	d349      	bcc.n	8008602 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008576:	d107      	bne.n	8008588 <UART_Start_Receive_IT+0x11c>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a47      	ldr	r2, [pc, #284]	; (80086a0 <UART_Start_Receive_IT+0x234>)
 8008584:	675a      	str	r2, [r3, #116]	; 0x74
 8008586:	e002      	b.n	800858e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a46      	ldr	r2, [pc, #280]	; (80086a4 <UART_Start_Receive_IT+0x238>)
 800858c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d01a      	beq.n	80085cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80085ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e5      	bne.n	80085cc <UART_Start_Receive_IT+0x160>
 8008600:	e046      	b.n	8008690 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	d107      	bne.n	800861c <UART_Start_Receive_IT+0x1b0>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a24      	ldr	r2, [pc, #144]	; (80086a8 <UART_Start_Receive_IT+0x23c>)
 8008618:	675a      	str	r2, [r3, #116]	; 0x74
 800861a:	e002      	b.n	8008622 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a23      	ldr	r2, [pc, #140]	; (80086ac <UART_Start_Receive_IT+0x240>)
 8008620:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d019      	beq.n	800865e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800863e:	677b      	str	r3, [r7, #116]	; 0x74
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
 800864a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800864e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e6      	bne.n	800862a <UART_Start_Receive_IT+0x1be>
 800865c:	e018      	b.n	8008690 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	613b      	str	r3, [r7, #16]
   return(result);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f043 0320 	orr.w	r3, r3, #32
 8008672:	67bb      	str	r3, [r7, #120]	; 0x78
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800867c:	623b      	str	r3, [r7, #32]
 800867e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69f9      	ldr	r1, [r7, #28]
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	61bb      	str	r3, [r7, #24]
   return(result);
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	378c      	adds	r7, #140	; 0x8c
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	08008ed1 	.word	0x08008ed1
 80086a4:	08008b71 	.word	0x08008b71
 80086a8:	080089b9 	.word	0x080089b9
 80086ac:	08008801 	.word	0x08008801

080086b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b095      	sub	sp, #84	; 0x54
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d6:	643b      	str	r3, [r7, #64]	; 0x40
 80086d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	64bb      	str	r3, [r7, #72]	; 0x48
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800870e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e3      	bne.n	80086ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008726:	2b01      	cmp	r3, #1
 8008728:	d118      	bne.n	800875c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60bb      	str	r3, [r7, #8]
   return(result);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 0310 	bic.w	r3, r3, #16
 800873e:	647b      	str	r3, [r7, #68]	; 0x44
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	613b      	str	r3, [r7, #16]
   return(result);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008770:	bf00      	nop
 8008772:	3754      	adds	r7, #84	; 0x54
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fa74 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	613b      	str	r3, [r7, #16]
   return(result);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff fa3f 	bl	8007c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087f6:	bf00      	nop
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b09c      	sub	sp, #112	; 0x70
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800880e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008818:	2b22      	cmp	r3, #34	; 0x22
 800881a:	f040 80be 	bne.w	800899a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800882c:	b2d9      	uxtb	r1, r3
 800882e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008832:	b2da      	uxtb	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008838:	400a      	ands	r2, r1
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800884e:	b29b      	uxth	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 80a1 	bne.w	80089aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800887c:	66bb      	str	r3, [r7, #104]	; 0x68
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008886:	65bb      	str	r3, [r7, #88]	; 0x58
 8008888:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800888c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e6      	bne.n	8008868 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	667b      	str	r3, [r7, #100]	; 0x64
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088ba:	647a      	str	r2, [r7, #68]	; 0x44
 80088bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e5      	bne.n	800889a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a33      	ldr	r2, [pc, #204]	; (80089b4 <UART_RxISR_8BIT+0x1b4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d01f      	beq.n	800892c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d018      	beq.n	800892c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	623b      	str	r3, [r7, #32]
   return(result);
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800890e:	663b      	str	r3, [r7, #96]	; 0x60
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008918:	633b      	str	r3, [r7, #48]	; 0x30
 800891a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800891e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e6      	bne.n	80088fa <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d12e      	bne.n	8008992 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	60fb      	str	r3, [r7, #12]
   return(result);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0310 	bic.w	r3, r3, #16
 800894e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	617b      	str	r3, [r7, #20]
   return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e6      	bne.n	800893a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	f003 0310 	and.w	r3, r3, #16
 8008976:	2b10      	cmp	r3, #16
 8008978:	d103      	bne.n	8008982 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2210      	movs	r2, #16
 8008980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f986 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008990:	e00b      	b.n	80089aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f9 fcde 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 8008998:	e007      	b.n	80089aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699a      	ldr	r2, [r3, #24]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0208 	orr.w	r2, r2, #8
 80089a8:	619a      	str	r2, [r3, #24]
}
 80089aa:	bf00      	nop
 80089ac:	3770      	adds	r7, #112	; 0x70
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	40008000 	.word	0x40008000

080089b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b09c      	sub	sp, #112	; 0x70
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089d0:	2b22      	cmp	r3, #34	; 0x22
 80089d2:	f040 80be 	bne.w	8008b52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80089ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80089ee:	4013      	ands	r3, r2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fa:	1c9a      	adds	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f040 80a1 	bne.w	8008b62 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a34:	667b      	str	r3, [r7, #100]	; 0x64
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e6      	bne.n	8008a20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	f023 0301 	bic.w	r3, r3, #1
 8008a68:	663b      	str	r3, [r7, #96]	; 0x60
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a72:	643a      	str	r2, [r7, #64]	; 0x40
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a33      	ldr	r2, [pc, #204]	; (8008b6c <UART_RxISR_16BIT+0x1b4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d01f      	beq.n	8008ae4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d018      	beq.n	8008ae4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d12e      	bne.n	8008b4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0310 	bic.w	r3, r3, #16
 8008b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6979      	ldr	r1, [r7, #20]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d103      	bne.n	8008b3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2210      	movs	r2, #16
 8008b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff f8aa 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b48:	e00b      	b.n	8008b62 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7f9 fc02 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 8008b50:	e007      	b.n	8008b62 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0208 	orr.w	r2, r2, #8
 8008b60:	619a      	str	r2, [r3, #24]
}
 8008b62:	bf00      	nop
 8008b64:	3770      	adds	r7, #112	; 0x70
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40008000 	.word	0x40008000

08008b70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b0ac      	sub	sp, #176	; 0xb0
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba6:	2b22      	cmp	r3, #34	; 0x22
 8008ba8:	f040 8182 	bne.w	8008eb0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bb2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bb6:	e125      	b.n	8008e04 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bc2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008bc6:	b2d9      	uxtb	r1, r3
 8008bc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	400a      	ands	r2, r1
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d053      	beq.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d011      	beq.n	8008c3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c30:	f043 0201 	orr.w	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d011      	beq.n	8008c6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2202      	movs	r2, #2
 8008c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c60:	f043 0204 	orr.w	r2, r3, #4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d011      	beq.n	8008c9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2204      	movs	r2, #4
 8008c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c90:	f043 0202 	orr.w	r2, r3, #2
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7fe ffef 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f040 80a2 	bne.w	8008e04 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ce4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008ce8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e4      	bne.n	8008cc0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d20:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e1      	bne.n	8008cf6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a5f      	ldr	r2, [pc, #380]	; (8008ec8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d021      	beq.n	8008d94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01a      	beq.n	8008d94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d80:	657b      	str	r3, [r7, #84]	; 0x54
 8008d82:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e4      	bne.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d130      	bne.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	f023 0310 	bic.w	r3, r3, #16
 8008db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e4      	bne.n	8008da2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f003 0310 	and.w	r3, r3, #16
 8008de2:	2b10      	cmp	r3, #16
 8008de4:	d103      	bne.n	8008dee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2210      	movs	r2, #16
 8008dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7fe ff50 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
 8008dfc:	e002      	b.n	8008e04 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f9 faa8 	bl	8002354 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e04:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d006      	beq.n	8008e1a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f aecf 	bne.w	8008bb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d049      	beq.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d242      	bcs.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e3      	bne.n	8008e3a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008e76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f043 0320 	orr.w	r3, r3, #32
 8008e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6979      	ldr	r1, [r7, #20]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e4      	bne.n	8008e78 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eae:	e007      	b.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0208 	orr.w	r2, r2, #8
 8008ebe:	619a      	str	r2, [r3, #24]
}
 8008ec0:	bf00      	nop
 8008ec2:	37b0      	adds	r7, #176	; 0xb0
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40008000 	.word	0x40008000
 8008ecc:	08008801 	.word	0x08008801

08008ed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b0ae      	sub	sp, #184	; 0xb8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ede:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f06:	2b22      	cmp	r3, #34	; 0x22
 8008f08:	f040 8186 	bne.w	8009218 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f12:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f16:	e129      	b.n	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008f2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008f32:	4013      	ands	r3, r2
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d053      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d011      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d011      	beq.n	8008fce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc4:	f043 0204 	orr.w	r2, r3, #4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2204      	movs	r2, #4
 8008fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff4:	f043 0202 	orr.w	r2, r3, #2
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fe fe3d 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 80a4 	bne.w	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800904a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800904e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e2      	bne.n	8009024 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800908c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e1      	bne.n	800905e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a5f      	ldr	r2, [pc, #380]	; (8009230 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d021      	beq.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01a      	beq.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80090ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e4      	bne.n	80090c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d130      	bne.n	8009166 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911a:	f023 0310 	bic.w	r3, r3, #16
 800911e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800912c:	647b      	str	r3, [r7, #68]	; 0x44
 800912e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f003 0310 	and.w	r3, r3, #16
 800914a:	2b10      	cmp	r3, #16
 800914c:	d103      	bne.n	8009156 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7fe fd9c 	bl	8007c9c <HAL_UARTEx_RxEventCallback>
 8009164:	e002      	b.n	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7f9 f8f4 	bl	8002354 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800916c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	f47f aecb 	bne.w	8008f18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009188:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800918c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009190:	2b00      	cmp	r3, #0
 8009192:	d049      	beq.n	8009228 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800919a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800919e:	429a      	cmp	r2, r3
 80091a0:	d242      	bcs.n	8009228 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	623b      	str	r3, [r7, #32]
   return(result);
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80091c6:	633a      	str	r2, [r7, #48]	; 0x30
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e3      	bne.n	80091a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a15      	ldr	r2, [pc, #84]	; (8009234 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80091de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f043 0320 	orr.w	r3, r3, #32
 80091f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	617b      	str	r3, [r7, #20]
   return(result);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e4      	bne.n	80091e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009216:	e007      	b.n	8009228 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	619a      	str	r2, [r3, #24]
}
 8009228:	bf00      	nop
 800922a:	37b8      	adds	r7, #184	; 0xb8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40008000 	.word	0x40008000
 8009234:	080089b9 	.word	0x080089b9

08009238 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_UARTEx_DisableFifoMode+0x16>
 8009286:	2302      	movs	r3, #2
 8009288:	e027      	b.n	80092da <HAL_UARTEx_DisableFifoMode+0x66>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2224      	movs	r2, #36	; 0x24
 8009296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0201 	bic.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e02d      	b.n	800935a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2224      	movs	r2, #36	; 0x24
 800930a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f850 	bl	80093e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009376:	2302      	movs	r3, #2
 8009378:	e02d      	b.n	80093d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2224      	movs	r2, #36	; 0x24
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f812 	bl	80093e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009400:	e031      	b.n	8009466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009402:	2308      	movs	r3, #8
 8009404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009406:	2308      	movs	r3, #8
 8009408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	0e5b      	lsrs	r3, r3, #25
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0307 	and.w	r3, r3, #7
 8009418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	0f5b      	lsrs	r3, r3, #29
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	7b3a      	ldrb	r2, [r7, #12]
 800942e:	4911      	ldr	r1, [pc, #68]	; (8009474 <UARTEx_SetNbDataToProcess+0x94>)
 8009430:	5c8a      	ldrb	r2, [r1, r2]
 8009432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009436:	7b3a      	ldrb	r2, [r7, #12]
 8009438:	490f      	ldr	r1, [pc, #60]	; (8009478 <UARTEx_SetNbDataToProcess+0x98>)
 800943a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800943c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	7b7a      	ldrb	r2, [r7, #13]
 800944c:	4909      	ldr	r1, [pc, #36]	; (8009474 <UARTEx_SetNbDataToProcess+0x94>)
 800944e:	5c8a      	ldrb	r2, [r1, r2]
 8009450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009454:	7b7a      	ldrb	r2, [r7, #13]
 8009456:	4908      	ldr	r1, [pc, #32]	; (8009478 <UARTEx_SetNbDataToProcess+0x98>)
 8009458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800945a:	fb93 f3f2 	sdiv	r3, r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	0800e4e0 	.word	0x0800e4e0
 8009478:	0800e4e8 	.word	0x0800e4e8

0800947c <__errno>:
 800947c:	4b01      	ldr	r3, [pc, #4]	; (8009484 <__errno+0x8>)
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	2000001c 	.word	0x2000001c

08009488 <__libc_init_array>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	4d0d      	ldr	r5, [pc, #52]	; (80094c0 <__libc_init_array+0x38>)
 800948c:	4c0d      	ldr	r4, [pc, #52]	; (80094c4 <__libc_init_array+0x3c>)
 800948e:	1b64      	subs	r4, r4, r5
 8009490:	10a4      	asrs	r4, r4, #2
 8009492:	2600      	movs	r6, #0
 8009494:	42a6      	cmp	r6, r4
 8009496:	d109      	bne.n	80094ac <__libc_init_array+0x24>
 8009498:	4d0b      	ldr	r5, [pc, #44]	; (80094c8 <__libc_init_array+0x40>)
 800949a:	4c0c      	ldr	r4, [pc, #48]	; (80094cc <__libc_init_array+0x44>)
 800949c:	f004 fd86 	bl	800dfac <_init>
 80094a0:	1b64      	subs	r4, r4, r5
 80094a2:	10a4      	asrs	r4, r4, #2
 80094a4:	2600      	movs	r6, #0
 80094a6:	42a6      	cmp	r6, r4
 80094a8:	d105      	bne.n	80094b6 <__libc_init_array+0x2e>
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b0:	4798      	blx	r3
 80094b2:	3601      	adds	r6, #1
 80094b4:	e7ee      	b.n	8009494 <__libc_init_array+0xc>
 80094b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ba:	4798      	blx	r3
 80094bc:	3601      	adds	r6, #1
 80094be:	e7f2      	b.n	80094a6 <__libc_init_array+0x1e>
 80094c0:	0800e9a4 	.word	0x0800e9a4
 80094c4:	0800e9a4 	.word	0x0800e9a4
 80094c8:	0800e9a4 	.word	0x0800e9a4
 80094cc:	0800e9a8 	.word	0x0800e9a8

080094d0 <malloc>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	; (80094dc <malloc+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f000 b88d 	b.w	80095f4 <_malloc_r>
 80094da:	bf00      	nop
 80094dc:	2000001c 	.word	0x2000001c

080094e0 <free>:
 80094e0:	4b02      	ldr	r3, [pc, #8]	; (80094ec <free+0xc>)
 80094e2:	4601      	mov	r1, r0
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	f000 b819 	b.w	800951c <_free_r>
 80094ea:	bf00      	nop
 80094ec:	2000001c 	.word	0x2000001c

080094f0 <memcpy>:
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	4770      	bx	lr
 80094fc:	b510      	push	{r4, lr}
 80094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	4291      	cmp	r1, r2
 8009508:	d1f9      	bne.n	80094fe <memcpy+0xe>
 800950a:	bd10      	pop	{r4, pc}

0800950c <memset>:
 800950c:	4402      	add	r2, r0
 800950e:	4603      	mov	r3, r0
 8009510:	4293      	cmp	r3, r2
 8009512:	d100      	bne.n	8009516 <memset+0xa>
 8009514:	4770      	bx	lr
 8009516:	f803 1b01 	strb.w	r1, [r3], #1
 800951a:	e7f9      	b.n	8009510 <memset+0x4>

0800951c <_free_r>:
 800951c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800951e:	2900      	cmp	r1, #0
 8009520:	d044      	beq.n	80095ac <_free_r+0x90>
 8009522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009526:	9001      	str	r0, [sp, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f1a1 0404 	sub.w	r4, r1, #4
 800952e:	bfb8      	it	lt
 8009530:	18e4      	addlt	r4, r4, r3
 8009532:	f003 fbff 	bl	800cd34 <__malloc_lock>
 8009536:	4a1e      	ldr	r2, [pc, #120]	; (80095b0 <_free_r+0x94>)
 8009538:	9801      	ldr	r0, [sp, #4]
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	b933      	cbnz	r3, 800954c <_free_r+0x30>
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	6014      	str	r4, [r2, #0]
 8009542:	b003      	add	sp, #12
 8009544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009548:	f003 bbfa 	b.w	800cd40 <__malloc_unlock>
 800954c:	42a3      	cmp	r3, r4
 800954e:	d908      	bls.n	8009562 <_free_r+0x46>
 8009550:	6825      	ldr	r5, [r4, #0]
 8009552:	1961      	adds	r1, r4, r5
 8009554:	428b      	cmp	r3, r1
 8009556:	bf01      	itttt	eq
 8009558:	6819      	ldreq	r1, [r3, #0]
 800955a:	685b      	ldreq	r3, [r3, #4]
 800955c:	1949      	addeq	r1, r1, r5
 800955e:	6021      	streq	r1, [r4, #0]
 8009560:	e7ed      	b.n	800953e <_free_r+0x22>
 8009562:	461a      	mov	r2, r3
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	b10b      	cbz	r3, 800956c <_free_r+0x50>
 8009568:	42a3      	cmp	r3, r4
 800956a:	d9fa      	bls.n	8009562 <_free_r+0x46>
 800956c:	6811      	ldr	r1, [r2, #0]
 800956e:	1855      	adds	r5, r2, r1
 8009570:	42a5      	cmp	r5, r4
 8009572:	d10b      	bne.n	800958c <_free_r+0x70>
 8009574:	6824      	ldr	r4, [r4, #0]
 8009576:	4421      	add	r1, r4
 8009578:	1854      	adds	r4, r2, r1
 800957a:	42a3      	cmp	r3, r4
 800957c:	6011      	str	r1, [r2, #0]
 800957e:	d1e0      	bne.n	8009542 <_free_r+0x26>
 8009580:	681c      	ldr	r4, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	6053      	str	r3, [r2, #4]
 8009586:	4421      	add	r1, r4
 8009588:	6011      	str	r1, [r2, #0]
 800958a:	e7da      	b.n	8009542 <_free_r+0x26>
 800958c:	d902      	bls.n	8009594 <_free_r+0x78>
 800958e:	230c      	movs	r3, #12
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	e7d6      	b.n	8009542 <_free_r+0x26>
 8009594:	6825      	ldr	r5, [r4, #0]
 8009596:	1961      	adds	r1, r4, r5
 8009598:	428b      	cmp	r3, r1
 800959a:	bf04      	itt	eq
 800959c:	6819      	ldreq	r1, [r3, #0]
 800959e:	685b      	ldreq	r3, [r3, #4]
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	bf04      	itt	eq
 80095a4:	1949      	addeq	r1, r1, r5
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	6054      	str	r4, [r2, #4]
 80095aa:	e7ca      	b.n	8009542 <_free_r+0x26>
 80095ac:	b003      	add	sp, #12
 80095ae:	bd30      	pop	{r4, r5, pc}
 80095b0:	200007b4 	.word	0x200007b4

080095b4 <sbrk_aligned>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	4e0e      	ldr	r6, [pc, #56]	; (80095f0 <sbrk_aligned+0x3c>)
 80095b8:	460c      	mov	r4, r1
 80095ba:	6831      	ldr	r1, [r6, #0]
 80095bc:	4605      	mov	r5, r0
 80095be:	b911      	cbnz	r1, 80095c6 <sbrk_aligned+0x12>
 80095c0:	f000 ff94 	bl	800a4ec <_sbrk_r>
 80095c4:	6030      	str	r0, [r6, #0]
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 ff8f 	bl	800a4ec <_sbrk_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d00a      	beq.n	80095e8 <sbrk_aligned+0x34>
 80095d2:	1cc4      	adds	r4, r0, #3
 80095d4:	f024 0403 	bic.w	r4, r4, #3
 80095d8:	42a0      	cmp	r0, r4
 80095da:	d007      	beq.n	80095ec <sbrk_aligned+0x38>
 80095dc:	1a21      	subs	r1, r4, r0
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 ff84 	bl	800a4ec <_sbrk_r>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d101      	bne.n	80095ec <sbrk_aligned+0x38>
 80095e8:	f04f 34ff 	mov.w	r4, #4294967295
 80095ec:	4620      	mov	r0, r4
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	200007b8 	.word	0x200007b8

080095f4 <_malloc_r>:
 80095f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f8:	1ccd      	adds	r5, r1, #3
 80095fa:	f025 0503 	bic.w	r5, r5, #3
 80095fe:	3508      	adds	r5, #8
 8009600:	2d0c      	cmp	r5, #12
 8009602:	bf38      	it	cc
 8009604:	250c      	movcc	r5, #12
 8009606:	2d00      	cmp	r5, #0
 8009608:	4607      	mov	r7, r0
 800960a:	db01      	blt.n	8009610 <_malloc_r+0x1c>
 800960c:	42a9      	cmp	r1, r5
 800960e:	d905      	bls.n	800961c <_malloc_r+0x28>
 8009610:	230c      	movs	r3, #12
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	2600      	movs	r6, #0
 8009616:	4630      	mov	r0, r6
 8009618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961c:	4e2e      	ldr	r6, [pc, #184]	; (80096d8 <_malloc_r+0xe4>)
 800961e:	f003 fb89 	bl	800cd34 <__malloc_lock>
 8009622:	6833      	ldr	r3, [r6, #0]
 8009624:	461c      	mov	r4, r3
 8009626:	bb34      	cbnz	r4, 8009676 <_malloc_r+0x82>
 8009628:	4629      	mov	r1, r5
 800962a:	4638      	mov	r0, r7
 800962c:	f7ff ffc2 	bl	80095b4 <sbrk_aligned>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	4604      	mov	r4, r0
 8009634:	d14d      	bne.n	80096d2 <_malloc_r+0xde>
 8009636:	6834      	ldr	r4, [r6, #0]
 8009638:	4626      	mov	r6, r4
 800963a:	2e00      	cmp	r6, #0
 800963c:	d140      	bne.n	80096c0 <_malloc_r+0xcc>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	4631      	mov	r1, r6
 8009642:	4638      	mov	r0, r7
 8009644:	eb04 0803 	add.w	r8, r4, r3
 8009648:	f000 ff50 	bl	800a4ec <_sbrk_r>
 800964c:	4580      	cmp	r8, r0
 800964e:	d13a      	bne.n	80096c6 <_malloc_r+0xd2>
 8009650:	6821      	ldr	r1, [r4, #0]
 8009652:	3503      	adds	r5, #3
 8009654:	1a6d      	subs	r5, r5, r1
 8009656:	f025 0503 	bic.w	r5, r5, #3
 800965a:	3508      	adds	r5, #8
 800965c:	2d0c      	cmp	r5, #12
 800965e:	bf38      	it	cc
 8009660:	250c      	movcc	r5, #12
 8009662:	4629      	mov	r1, r5
 8009664:	4638      	mov	r0, r7
 8009666:	f7ff ffa5 	bl	80095b4 <sbrk_aligned>
 800966a:	3001      	adds	r0, #1
 800966c:	d02b      	beq.n	80096c6 <_malloc_r+0xd2>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	442b      	add	r3, r5
 8009672:	6023      	str	r3, [r4, #0]
 8009674:	e00e      	b.n	8009694 <_malloc_r+0xa0>
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	1b52      	subs	r2, r2, r5
 800967a:	d41e      	bmi.n	80096ba <_malloc_r+0xc6>
 800967c:	2a0b      	cmp	r2, #11
 800967e:	d916      	bls.n	80096ae <_malloc_r+0xba>
 8009680:	1961      	adds	r1, r4, r5
 8009682:	42a3      	cmp	r3, r4
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	bf18      	it	ne
 8009688:	6059      	strne	r1, [r3, #4]
 800968a:	6863      	ldr	r3, [r4, #4]
 800968c:	bf08      	it	eq
 800968e:	6031      	streq	r1, [r6, #0]
 8009690:	5162      	str	r2, [r4, r5]
 8009692:	604b      	str	r3, [r1, #4]
 8009694:	4638      	mov	r0, r7
 8009696:	f104 060b 	add.w	r6, r4, #11
 800969a:	f003 fb51 	bl	800cd40 <__malloc_unlock>
 800969e:	f026 0607 	bic.w	r6, r6, #7
 80096a2:	1d23      	adds	r3, r4, #4
 80096a4:	1af2      	subs	r2, r6, r3
 80096a6:	d0b6      	beq.n	8009616 <_malloc_r+0x22>
 80096a8:	1b9b      	subs	r3, r3, r6
 80096aa:	50a3      	str	r3, [r4, r2]
 80096ac:	e7b3      	b.n	8009616 <_malloc_r+0x22>
 80096ae:	6862      	ldr	r2, [r4, #4]
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	bf0c      	ite	eq
 80096b4:	6032      	streq	r2, [r6, #0]
 80096b6:	605a      	strne	r2, [r3, #4]
 80096b8:	e7ec      	b.n	8009694 <_malloc_r+0xa0>
 80096ba:	4623      	mov	r3, r4
 80096bc:	6864      	ldr	r4, [r4, #4]
 80096be:	e7b2      	b.n	8009626 <_malloc_r+0x32>
 80096c0:	4634      	mov	r4, r6
 80096c2:	6876      	ldr	r6, [r6, #4]
 80096c4:	e7b9      	b.n	800963a <_malloc_r+0x46>
 80096c6:	230c      	movs	r3, #12
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	4638      	mov	r0, r7
 80096cc:	f003 fb38 	bl	800cd40 <__malloc_unlock>
 80096d0:	e7a1      	b.n	8009616 <_malloc_r+0x22>
 80096d2:	6025      	str	r5, [r4, #0]
 80096d4:	e7de      	b.n	8009694 <_malloc_r+0xa0>
 80096d6:	bf00      	nop
 80096d8:	200007b4 	.word	0x200007b4

080096dc <__cvt>:
 80096dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096e0:	ec55 4b10 	vmov	r4, r5, d0
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	460e      	mov	r6, r1
 80096e8:	4619      	mov	r1, r3
 80096ea:	462b      	mov	r3, r5
 80096ec:	bfbb      	ittet	lt
 80096ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096f2:	461d      	movlt	r5, r3
 80096f4:	2300      	movge	r3, #0
 80096f6:	232d      	movlt	r3, #45	; 0x2d
 80096f8:	700b      	strb	r3, [r1, #0]
 80096fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009700:	4691      	mov	r9, r2
 8009702:	f023 0820 	bic.w	r8, r3, #32
 8009706:	bfbc      	itt	lt
 8009708:	4622      	movlt	r2, r4
 800970a:	4614      	movlt	r4, r2
 800970c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009710:	d005      	beq.n	800971e <__cvt+0x42>
 8009712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009716:	d100      	bne.n	800971a <__cvt+0x3e>
 8009718:	3601      	adds	r6, #1
 800971a:	2102      	movs	r1, #2
 800971c:	e000      	b.n	8009720 <__cvt+0x44>
 800971e:	2103      	movs	r1, #3
 8009720:	ab03      	add	r3, sp, #12
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	ab02      	add	r3, sp, #8
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	ec45 4b10 	vmov	d0, r4, r5
 800972c:	4653      	mov	r3, sl
 800972e:	4632      	mov	r2, r6
 8009730:	f001 ff6e 	bl	800b610 <_dtoa_r>
 8009734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009738:	4607      	mov	r7, r0
 800973a:	d102      	bne.n	8009742 <__cvt+0x66>
 800973c:	f019 0f01 	tst.w	r9, #1
 8009740:	d022      	beq.n	8009788 <__cvt+0xac>
 8009742:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009746:	eb07 0906 	add.w	r9, r7, r6
 800974a:	d110      	bne.n	800976e <__cvt+0x92>
 800974c:	783b      	ldrb	r3, [r7, #0]
 800974e:	2b30      	cmp	r3, #48	; 0x30
 8009750:	d10a      	bne.n	8009768 <__cvt+0x8c>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f7 f98d 	bl	8000a78 <__aeabi_dcmpeq>
 800975e:	b918      	cbnz	r0, 8009768 <__cvt+0x8c>
 8009760:	f1c6 0601 	rsb	r6, r6, #1
 8009764:	f8ca 6000 	str.w	r6, [sl]
 8009768:	f8da 3000 	ldr.w	r3, [sl]
 800976c:	4499      	add	r9, r3
 800976e:	2200      	movs	r2, #0
 8009770:	2300      	movs	r3, #0
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f7f7 f97f 	bl	8000a78 <__aeabi_dcmpeq>
 800977a:	b108      	cbz	r0, 8009780 <__cvt+0xa4>
 800977c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009780:	2230      	movs	r2, #48	; 0x30
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	454b      	cmp	r3, r9
 8009786:	d307      	bcc.n	8009798 <__cvt+0xbc>
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800978c:	1bdb      	subs	r3, r3, r7
 800978e:	4638      	mov	r0, r7
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	b004      	add	sp, #16
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	1c59      	adds	r1, r3, #1
 800979a:	9103      	str	r1, [sp, #12]
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e7f0      	b.n	8009782 <__cvt+0xa6>

080097a0 <__exponent>:
 80097a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a2:	4603      	mov	r3, r0
 80097a4:	2900      	cmp	r1, #0
 80097a6:	bfb8      	it	lt
 80097a8:	4249      	neglt	r1, r1
 80097aa:	f803 2b02 	strb.w	r2, [r3], #2
 80097ae:	bfb4      	ite	lt
 80097b0:	222d      	movlt	r2, #45	; 0x2d
 80097b2:	222b      	movge	r2, #43	; 0x2b
 80097b4:	2909      	cmp	r1, #9
 80097b6:	7042      	strb	r2, [r0, #1]
 80097b8:	dd2a      	ble.n	8009810 <__exponent+0x70>
 80097ba:	f10d 0407 	add.w	r4, sp, #7
 80097be:	46a4      	mov	ip, r4
 80097c0:	270a      	movs	r7, #10
 80097c2:	46a6      	mov	lr, r4
 80097c4:	460a      	mov	r2, r1
 80097c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80097ca:	fb07 1516 	mls	r5, r7, r6, r1
 80097ce:	3530      	adds	r5, #48	; 0x30
 80097d0:	2a63      	cmp	r2, #99	; 0x63
 80097d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80097d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097da:	4631      	mov	r1, r6
 80097dc:	dcf1      	bgt.n	80097c2 <__exponent+0x22>
 80097de:	3130      	adds	r1, #48	; 0x30
 80097e0:	f1ae 0502 	sub.w	r5, lr, #2
 80097e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097e8:	1c44      	adds	r4, r0, #1
 80097ea:	4629      	mov	r1, r5
 80097ec:	4561      	cmp	r1, ip
 80097ee:	d30a      	bcc.n	8009806 <__exponent+0x66>
 80097f0:	f10d 0209 	add.w	r2, sp, #9
 80097f4:	eba2 020e 	sub.w	r2, r2, lr
 80097f8:	4565      	cmp	r5, ip
 80097fa:	bf88      	it	hi
 80097fc:	2200      	movhi	r2, #0
 80097fe:	4413      	add	r3, r2
 8009800:	1a18      	subs	r0, r3, r0
 8009802:	b003      	add	sp, #12
 8009804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800980e:	e7ed      	b.n	80097ec <__exponent+0x4c>
 8009810:	2330      	movs	r3, #48	; 0x30
 8009812:	3130      	adds	r1, #48	; 0x30
 8009814:	7083      	strb	r3, [r0, #2]
 8009816:	70c1      	strb	r1, [r0, #3]
 8009818:	1d03      	adds	r3, r0, #4
 800981a:	e7f1      	b.n	8009800 <__exponent+0x60>

0800981c <_printf_float>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	ed2d 8b02 	vpush	{d8}
 8009824:	b08d      	sub	sp, #52	; 0x34
 8009826:	460c      	mov	r4, r1
 8009828:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800982c:	4616      	mov	r6, r2
 800982e:	461f      	mov	r7, r3
 8009830:	4605      	mov	r5, r0
 8009832:	f003 fa01 	bl	800cc38 <_localeconv_r>
 8009836:	f8d0 a000 	ldr.w	sl, [r0]
 800983a:	4650      	mov	r0, sl
 800983c:	f7f6 fca0 	bl	8000180 <strlen>
 8009840:	2300      	movs	r3, #0
 8009842:	930a      	str	r3, [sp, #40]	; 0x28
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	9305      	str	r3, [sp, #20]
 8009848:	f8d8 3000 	ldr.w	r3, [r8]
 800984c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009850:	3307      	adds	r3, #7
 8009852:	f023 0307 	bic.w	r3, r3, #7
 8009856:	f103 0208 	add.w	r2, r3, #8
 800985a:	f8c8 2000 	str.w	r2, [r8]
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009866:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800986a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f8cd 8018 	str.w	r8, [sp, #24]
 8009874:	ee08 0a10 	vmov	s16, r0
 8009878:	4b9f      	ldr	r3, [pc, #636]	; (8009af8 <_printf_float+0x2dc>)
 800987a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800987e:	f04f 32ff 	mov.w	r2, #4294967295
 8009882:	f7f7 f92b 	bl	8000adc <__aeabi_dcmpun>
 8009886:	bb88      	cbnz	r0, 80098ec <_printf_float+0xd0>
 8009888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800988c:	4b9a      	ldr	r3, [pc, #616]	; (8009af8 <_printf_float+0x2dc>)
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	f7f7 f905 	bl	8000aa0 <__aeabi_dcmple>
 8009896:	bb48      	cbnz	r0, 80098ec <_printf_float+0xd0>
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f7f7 f8f4 	bl	8000a8c <__aeabi_dcmplt>
 80098a4:	b110      	cbz	r0, 80098ac <_printf_float+0x90>
 80098a6:	232d      	movs	r3, #45	; 0x2d
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ac:	4b93      	ldr	r3, [pc, #588]	; (8009afc <_printf_float+0x2e0>)
 80098ae:	4894      	ldr	r0, [pc, #592]	; (8009b00 <_printf_float+0x2e4>)
 80098b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098b4:	bf94      	ite	ls
 80098b6:	4698      	movls	r8, r3
 80098b8:	4680      	movhi	r8, r0
 80098ba:	2303      	movs	r3, #3
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	f023 0204 	bic.w	r2, r3, #4
 80098c4:	6022      	str	r2, [r4, #0]
 80098c6:	f04f 0900 	mov.w	r9, #0
 80098ca:	9700      	str	r7, [sp, #0]
 80098cc:	4633      	mov	r3, r6
 80098ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 f9d8 	bl	8009c88 <_printf_common>
 80098d8:	3001      	adds	r0, #1
 80098da:	f040 8090 	bne.w	80099fe <_printf_float+0x1e2>
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	b00d      	add	sp, #52	; 0x34
 80098e4:	ecbd 8b02 	vpop	{d8}
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	4640      	mov	r0, r8
 80098f2:	4649      	mov	r1, r9
 80098f4:	f7f7 f8f2 	bl	8000adc <__aeabi_dcmpun>
 80098f8:	b140      	cbz	r0, 800990c <_printf_float+0xf0>
 80098fa:	464b      	mov	r3, r9
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfbc      	itt	lt
 8009900:	232d      	movlt	r3, #45	; 0x2d
 8009902:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009906:	487f      	ldr	r0, [pc, #508]	; (8009b04 <_printf_float+0x2e8>)
 8009908:	4b7f      	ldr	r3, [pc, #508]	; (8009b08 <_printf_float+0x2ec>)
 800990a:	e7d1      	b.n	80098b0 <_printf_float+0x94>
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009912:	9206      	str	r2, [sp, #24]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	d13f      	bne.n	8009998 <_printf_float+0x17c>
 8009918:	2306      	movs	r3, #6
 800991a:	6063      	str	r3, [r4, #4]
 800991c:	9b05      	ldr	r3, [sp, #20]
 800991e:	6861      	ldr	r1, [r4, #4]
 8009920:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009924:	2300      	movs	r3, #0
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	ab0a      	add	r3, sp, #40	; 0x28
 800992a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800992e:	ab09      	add	r3, sp, #36	; 0x24
 8009930:	ec49 8b10 	vmov	d0, r8, r9
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	6022      	str	r2, [r4, #0]
 8009938:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff fecd 	bl	80096dc <__cvt>
 8009942:	9b06      	ldr	r3, [sp, #24]
 8009944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009946:	2b47      	cmp	r3, #71	; 0x47
 8009948:	4680      	mov	r8, r0
 800994a:	d108      	bne.n	800995e <_printf_float+0x142>
 800994c:	1cc8      	adds	r0, r1, #3
 800994e:	db02      	blt.n	8009956 <_printf_float+0x13a>
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	4299      	cmp	r1, r3
 8009954:	dd41      	ble.n	80099da <_printf_float+0x1be>
 8009956:	f1ab 0b02 	sub.w	fp, fp, #2
 800995a:	fa5f fb8b 	uxtb.w	fp, fp
 800995e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009962:	d820      	bhi.n	80099a6 <_printf_float+0x18a>
 8009964:	3901      	subs	r1, #1
 8009966:	465a      	mov	r2, fp
 8009968:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800996c:	9109      	str	r1, [sp, #36]	; 0x24
 800996e:	f7ff ff17 	bl	80097a0 <__exponent>
 8009972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009974:	1813      	adds	r3, r2, r0
 8009976:	2a01      	cmp	r2, #1
 8009978:	4681      	mov	r9, r0
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	dc02      	bgt.n	8009984 <_printf_float+0x168>
 800997e:	6822      	ldr	r2, [r4, #0]
 8009980:	07d2      	lsls	r2, r2, #31
 8009982:	d501      	bpl.n	8009988 <_printf_float+0x16c>
 8009984:	3301      	adds	r3, #1
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800998c:	2b00      	cmp	r3, #0
 800998e:	d09c      	beq.n	80098ca <_printf_float+0xae>
 8009990:	232d      	movs	r3, #45	; 0x2d
 8009992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009996:	e798      	b.n	80098ca <_printf_float+0xae>
 8009998:	9a06      	ldr	r2, [sp, #24]
 800999a:	2a47      	cmp	r2, #71	; 0x47
 800999c:	d1be      	bne.n	800991c <_printf_float+0x100>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1bc      	bne.n	800991c <_printf_float+0x100>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e7b9      	b.n	800991a <_printf_float+0xfe>
 80099a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099aa:	d118      	bne.n	80099de <_printf_float+0x1c2>
 80099ac:	2900      	cmp	r1, #0
 80099ae:	6863      	ldr	r3, [r4, #4]
 80099b0:	dd0b      	ble.n	80099ca <_printf_float+0x1ae>
 80099b2:	6121      	str	r1, [r4, #16]
 80099b4:	b913      	cbnz	r3, 80099bc <_printf_float+0x1a0>
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	07d0      	lsls	r0, r2, #31
 80099ba:	d502      	bpl.n	80099c2 <_printf_float+0x1a6>
 80099bc:	3301      	adds	r3, #1
 80099be:	440b      	add	r3, r1
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80099c4:	f04f 0900 	mov.w	r9, #0
 80099c8:	e7de      	b.n	8009988 <_printf_float+0x16c>
 80099ca:	b913      	cbnz	r3, 80099d2 <_printf_float+0x1b6>
 80099cc:	6822      	ldr	r2, [r4, #0]
 80099ce:	07d2      	lsls	r2, r2, #31
 80099d0:	d501      	bpl.n	80099d6 <_printf_float+0x1ba>
 80099d2:	3302      	adds	r3, #2
 80099d4:	e7f4      	b.n	80099c0 <_printf_float+0x1a4>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e7f2      	b.n	80099c0 <_printf_float+0x1a4>
 80099da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e0:	4299      	cmp	r1, r3
 80099e2:	db05      	blt.n	80099f0 <_printf_float+0x1d4>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	6121      	str	r1, [r4, #16]
 80099e8:	07d8      	lsls	r0, r3, #31
 80099ea:	d5ea      	bpl.n	80099c2 <_printf_float+0x1a6>
 80099ec:	1c4b      	adds	r3, r1, #1
 80099ee:	e7e7      	b.n	80099c0 <_printf_float+0x1a4>
 80099f0:	2900      	cmp	r1, #0
 80099f2:	bfd4      	ite	le
 80099f4:	f1c1 0202 	rsble	r2, r1, #2
 80099f8:	2201      	movgt	r2, #1
 80099fa:	4413      	add	r3, r2
 80099fc:	e7e0      	b.n	80099c0 <_printf_float+0x1a4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	055a      	lsls	r2, r3, #21
 8009a02:	d407      	bmi.n	8009a14 <_printf_float+0x1f8>
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	4642      	mov	r2, r8
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d12c      	bne.n	8009a6c <_printf_float+0x250>
 8009a12:	e764      	b.n	80098de <_printf_float+0xc2>
 8009a14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a18:	f240 80e0 	bls.w	8009bdc <_printf_float+0x3c0>
 8009a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f7f7 f828 	bl	8000a78 <__aeabi_dcmpeq>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d034      	beq.n	8009a96 <_printf_float+0x27a>
 8009a2c:	4a37      	ldr	r2, [pc, #220]	; (8009b0c <_printf_float+0x2f0>)
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4631      	mov	r1, r6
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f af51 	beq.w	80098de <_printf_float+0xc2>
 8009a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a40:	429a      	cmp	r2, r3
 8009a42:	db02      	blt.n	8009a4a <_printf_float+0x22e>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	07d8      	lsls	r0, r3, #31
 8009a48:	d510      	bpl.n	8009a6c <_printf_float+0x250>
 8009a4a:	ee18 3a10 	vmov	r3, s16
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f af41 	beq.w	80098de <_printf_float+0xc2>
 8009a5c:	f04f 0800 	mov.w	r8, #0
 8009a60:	f104 091a 	add.w	r9, r4, #26
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	3b01      	subs	r3, #1
 8009a68:	4543      	cmp	r3, r8
 8009a6a:	dc09      	bgt.n	8009a80 <_printf_float+0x264>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	079b      	lsls	r3, r3, #30
 8009a70:	f100 8105 	bmi.w	8009c7e <_printf_float+0x462>
 8009a74:	68e0      	ldr	r0, [r4, #12]
 8009a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a78:	4298      	cmp	r0, r3
 8009a7a:	bfb8      	it	lt
 8009a7c:	4618      	movlt	r0, r3
 8009a7e:	e730      	b.n	80098e2 <_printf_float+0xc6>
 8009a80:	2301      	movs	r3, #1
 8009a82:	464a      	mov	r2, r9
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f af27 	beq.w	80098de <_printf_float+0xc2>
 8009a90:	f108 0801 	add.w	r8, r8, #1
 8009a94:	e7e6      	b.n	8009a64 <_printf_float+0x248>
 8009a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc39      	bgt.n	8009b10 <_printf_float+0x2f4>
 8009a9c:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <_printf_float+0x2f0>)
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	47b8      	blx	r7
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	f43f af19 	beq.w	80098de <_printf_float+0xc2>
 8009aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d102      	bne.n	8009aba <_printf_float+0x29e>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	07d9      	lsls	r1, r3, #31
 8009ab8:	d5d8      	bpl.n	8009a6c <_printf_float+0x250>
 8009aba:	ee18 3a10 	vmov	r3, s16
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f af09 	beq.w	80098de <_printf_float+0xc2>
 8009acc:	f04f 0900 	mov.w	r9, #0
 8009ad0:	f104 0a1a 	add.w	sl, r4, #26
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	454b      	cmp	r3, r9
 8009ada:	dc01      	bgt.n	8009ae0 <_printf_float+0x2c4>
 8009adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ade:	e792      	b.n	8009a06 <_printf_float+0x1ea>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	47b8      	blx	r7
 8009aea:	3001      	adds	r0, #1
 8009aec:	f43f aef7 	beq.w	80098de <_printf_float+0xc2>
 8009af0:	f109 0901 	add.w	r9, r9, #1
 8009af4:	e7ee      	b.n	8009ad4 <_printf_float+0x2b8>
 8009af6:	bf00      	nop
 8009af8:	7fefffff 	.word	0x7fefffff
 8009afc:	0800e4f4 	.word	0x0800e4f4
 8009b00:	0800e4f8 	.word	0x0800e4f8
 8009b04:	0800e500 	.word	0x0800e500
 8009b08:	0800e4fc 	.word	0x0800e4fc
 8009b0c:	0800e504 	.word	0x0800e504
 8009b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b14:	429a      	cmp	r2, r3
 8009b16:	bfa8      	it	ge
 8009b18:	461a      	movge	r2, r3
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	4691      	mov	r9, r2
 8009b1e:	dc37      	bgt.n	8009b90 <_printf_float+0x374>
 8009b20:	f04f 0b00 	mov.w	fp, #0
 8009b24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b28:	f104 021a 	add.w	r2, r4, #26
 8009b2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	eba3 0309 	sub.w	r3, r3, r9
 8009b34:	455b      	cmp	r3, fp
 8009b36:	dc33      	bgt.n	8009ba0 <_printf_float+0x384>
 8009b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	db3b      	blt.n	8009bb8 <_printf_float+0x39c>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	07da      	lsls	r2, r3, #31
 8009b44:	d438      	bmi.n	8009bb8 <_printf_float+0x39c>
 8009b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b48:	9a05      	ldr	r2, [sp, #20]
 8009b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b4c:	1a9a      	subs	r2, r3, r2
 8009b4e:	eba3 0901 	sub.w	r9, r3, r1
 8009b52:	4591      	cmp	r9, r2
 8009b54:	bfa8      	it	ge
 8009b56:	4691      	movge	r9, r2
 8009b58:	f1b9 0f00 	cmp.w	r9, #0
 8009b5c:	dc35      	bgt.n	8009bca <_printf_float+0x3ae>
 8009b5e:	f04f 0800 	mov.w	r8, #0
 8009b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b66:	f104 0a1a 	add.w	sl, r4, #26
 8009b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	eba3 0309 	sub.w	r3, r3, r9
 8009b74:	4543      	cmp	r3, r8
 8009b76:	f77f af79 	ble.w	8009a6c <_printf_float+0x250>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f aeaa 	beq.w	80098de <_printf_float+0xc2>
 8009b8a:	f108 0801 	add.w	r8, r8, #1
 8009b8e:	e7ec      	b.n	8009b6a <_printf_float+0x34e>
 8009b90:	4613      	mov	r3, r2
 8009b92:	4631      	mov	r1, r6
 8009b94:	4642      	mov	r2, r8
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d1c0      	bne.n	8009b20 <_printf_float+0x304>
 8009b9e:	e69e      	b.n	80098de <_printf_float+0xc2>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	9205      	str	r2, [sp, #20]
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f ae97 	beq.w	80098de <_printf_float+0xc2>
 8009bb0:	9a05      	ldr	r2, [sp, #20]
 8009bb2:	f10b 0b01 	add.w	fp, fp, #1
 8009bb6:	e7b9      	b.n	8009b2c <_printf_float+0x310>
 8009bb8:	ee18 3a10 	vmov	r3, s16
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d1be      	bne.n	8009b46 <_printf_float+0x32a>
 8009bc8:	e689      	b.n	80098de <_printf_float+0xc2>
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	464b      	mov	r3, r9
 8009bce:	4442      	add	r2, r8
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d1c1      	bne.n	8009b5e <_printf_float+0x342>
 8009bda:	e680      	b.n	80098de <_printf_float+0xc2>
 8009bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bde:	2a01      	cmp	r2, #1
 8009be0:	dc01      	bgt.n	8009be6 <_printf_float+0x3ca>
 8009be2:	07db      	lsls	r3, r3, #31
 8009be4:	d538      	bpl.n	8009c58 <_printf_float+0x43c>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4642      	mov	r2, r8
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae74 	beq.w	80098de <_printf_float+0xc2>
 8009bf6:	ee18 3a10 	vmov	r3, s16
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f ae6b 	beq.w	80098de <_printf_float+0xc2>
 8009c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f7f6 ff32 	bl	8000a78 <__aeabi_dcmpeq>
 8009c14:	b9d8      	cbnz	r0, 8009c4e <_printf_float+0x432>
 8009c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c18:	f108 0201 	add.w	r2, r8, #1
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4628      	mov	r0, r5
 8009c22:	47b8      	blx	r7
 8009c24:	3001      	adds	r0, #1
 8009c26:	d10e      	bne.n	8009c46 <_printf_float+0x42a>
 8009c28:	e659      	b.n	80098de <_printf_float+0xc2>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4652      	mov	r2, sl
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f ae52 	beq.w	80098de <_printf_float+0xc2>
 8009c3a:	f108 0801 	add.w	r8, r8, #1
 8009c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c40:	3b01      	subs	r3, #1
 8009c42:	4543      	cmp	r3, r8
 8009c44:	dcf1      	bgt.n	8009c2a <_printf_float+0x40e>
 8009c46:	464b      	mov	r3, r9
 8009c48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c4c:	e6dc      	b.n	8009a08 <_printf_float+0x1ec>
 8009c4e:	f04f 0800 	mov.w	r8, #0
 8009c52:	f104 0a1a 	add.w	sl, r4, #26
 8009c56:	e7f2      	b.n	8009c3e <_printf_float+0x422>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4642      	mov	r2, r8
 8009c5c:	e7df      	b.n	8009c1e <_printf_float+0x402>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	464a      	mov	r2, r9
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae38 	beq.w	80098de <_printf_float+0xc2>
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c76:	1a5b      	subs	r3, r3, r1
 8009c78:	4543      	cmp	r3, r8
 8009c7a:	dcf0      	bgt.n	8009c5e <_printf_float+0x442>
 8009c7c:	e6fa      	b.n	8009a74 <_printf_float+0x258>
 8009c7e:	f04f 0800 	mov.w	r8, #0
 8009c82:	f104 0919 	add.w	r9, r4, #25
 8009c86:	e7f4      	b.n	8009c72 <_printf_float+0x456>

08009c88 <_printf_common>:
 8009c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	4616      	mov	r6, r2
 8009c8e:	4699      	mov	r9, r3
 8009c90:	688a      	ldr	r2, [r1, #8]
 8009c92:	690b      	ldr	r3, [r1, #16]
 8009c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	bfb8      	it	lt
 8009c9c:	4613      	movlt	r3, r2
 8009c9e:	6033      	str	r3, [r6, #0]
 8009ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b10a      	cbz	r2, 8009cae <_printf_common+0x26>
 8009caa:	3301      	adds	r3, #1
 8009cac:	6033      	str	r3, [r6, #0]
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	0699      	lsls	r1, r3, #26
 8009cb2:	bf42      	ittt	mi
 8009cb4:	6833      	ldrmi	r3, [r6, #0]
 8009cb6:	3302      	addmi	r3, #2
 8009cb8:	6033      	strmi	r3, [r6, #0]
 8009cba:	6825      	ldr	r5, [r4, #0]
 8009cbc:	f015 0506 	ands.w	r5, r5, #6
 8009cc0:	d106      	bne.n	8009cd0 <_printf_common+0x48>
 8009cc2:	f104 0a19 	add.w	sl, r4, #25
 8009cc6:	68e3      	ldr	r3, [r4, #12]
 8009cc8:	6832      	ldr	r2, [r6, #0]
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	42ab      	cmp	r3, r5
 8009cce:	dc26      	bgt.n	8009d1e <_printf_common+0x96>
 8009cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cd4:	1e13      	subs	r3, r2, #0
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	bf18      	it	ne
 8009cda:	2301      	movne	r3, #1
 8009cdc:	0692      	lsls	r2, r2, #26
 8009cde:	d42b      	bmi.n	8009d38 <_printf_common+0xb0>
 8009ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	47c0      	blx	r8
 8009cea:	3001      	adds	r0, #1
 8009cec:	d01e      	beq.n	8009d2c <_printf_common+0xa4>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	68e5      	ldr	r5, [r4, #12]
 8009cf2:	6832      	ldr	r2, [r6, #0]
 8009cf4:	f003 0306 	and.w	r3, r3, #6
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	bf08      	it	eq
 8009cfc:	1aad      	subeq	r5, r5, r2
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	6922      	ldr	r2, [r4, #16]
 8009d02:	bf0c      	ite	eq
 8009d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d08:	2500      	movne	r5, #0
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	bfc4      	itt	gt
 8009d0e:	1a9b      	subgt	r3, r3, r2
 8009d10:	18ed      	addgt	r5, r5, r3
 8009d12:	2600      	movs	r6, #0
 8009d14:	341a      	adds	r4, #26
 8009d16:	42b5      	cmp	r5, r6
 8009d18:	d11a      	bne.n	8009d50 <_printf_common+0xc8>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e008      	b.n	8009d30 <_printf_common+0xa8>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	4649      	mov	r1, r9
 8009d24:	4638      	mov	r0, r7
 8009d26:	47c0      	blx	r8
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d103      	bne.n	8009d34 <_printf_common+0xac>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d34:	3501      	adds	r5, #1
 8009d36:	e7c6      	b.n	8009cc6 <_printf_common+0x3e>
 8009d38:	18e1      	adds	r1, r4, r3
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	2030      	movs	r0, #48	; 0x30
 8009d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d42:	4422      	add	r2, r4
 8009d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	e7c7      	b.n	8009ce0 <_printf_common+0x58>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4622      	mov	r2, r4
 8009d54:	4649      	mov	r1, r9
 8009d56:	4638      	mov	r0, r7
 8009d58:	47c0      	blx	r8
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d0e6      	beq.n	8009d2c <_printf_common+0xa4>
 8009d5e:	3601      	adds	r6, #1
 8009d60:	e7d9      	b.n	8009d16 <_printf_common+0x8e>
	...

08009d64 <_printf_i>:
 8009d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	7e0f      	ldrb	r7, [r1, #24]
 8009d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d6c:	2f78      	cmp	r7, #120	; 0x78
 8009d6e:	4691      	mov	r9, r2
 8009d70:	4680      	mov	r8, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	469a      	mov	sl, r3
 8009d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d7a:	d807      	bhi.n	8009d8c <_printf_i+0x28>
 8009d7c:	2f62      	cmp	r7, #98	; 0x62
 8009d7e:	d80a      	bhi.n	8009d96 <_printf_i+0x32>
 8009d80:	2f00      	cmp	r7, #0
 8009d82:	f000 80d8 	beq.w	8009f36 <_printf_i+0x1d2>
 8009d86:	2f58      	cmp	r7, #88	; 0x58
 8009d88:	f000 80a3 	beq.w	8009ed2 <_printf_i+0x16e>
 8009d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d94:	e03a      	b.n	8009e0c <_printf_i+0xa8>
 8009d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d9a:	2b15      	cmp	r3, #21
 8009d9c:	d8f6      	bhi.n	8009d8c <_printf_i+0x28>
 8009d9e:	a101      	add	r1, pc, #4	; (adr r1, 8009da4 <_printf_i+0x40>)
 8009da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009da4:	08009dfd 	.word	0x08009dfd
 8009da8:	08009e11 	.word	0x08009e11
 8009dac:	08009d8d 	.word	0x08009d8d
 8009db0:	08009d8d 	.word	0x08009d8d
 8009db4:	08009d8d 	.word	0x08009d8d
 8009db8:	08009d8d 	.word	0x08009d8d
 8009dbc:	08009e11 	.word	0x08009e11
 8009dc0:	08009d8d 	.word	0x08009d8d
 8009dc4:	08009d8d 	.word	0x08009d8d
 8009dc8:	08009d8d 	.word	0x08009d8d
 8009dcc:	08009d8d 	.word	0x08009d8d
 8009dd0:	08009f1d 	.word	0x08009f1d
 8009dd4:	08009e41 	.word	0x08009e41
 8009dd8:	08009eff 	.word	0x08009eff
 8009ddc:	08009d8d 	.word	0x08009d8d
 8009de0:	08009d8d 	.word	0x08009d8d
 8009de4:	08009f3f 	.word	0x08009f3f
 8009de8:	08009d8d 	.word	0x08009d8d
 8009dec:	08009e41 	.word	0x08009e41
 8009df0:	08009d8d 	.word	0x08009d8d
 8009df4:	08009d8d 	.word	0x08009d8d
 8009df8:	08009f07 	.word	0x08009f07
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	602a      	str	r2, [r5, #0]
 8009e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e0a3      	b.n	8009f58 <_printf_i+0x1f4>
 8009e10:	6820      	ldr	r0, [r4, #0]
 8009e12:	6829      	ldr	r1, [r5, #0]
 8009e14:	0606      	lsls	r6, r0, #24
 8009e16:	f101 0304 	add.w	r3, r1, #4
 8009e1a:	d50a      	bpl.n	8009e32 <_printf_i+0xce>
 8009e1c:	680e      	ldr	r6, [r1, #0]
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	2e00      	cmp	r6, #0
 8009e22:	da03      	bge.n	8009e2c <_printf_i+0xc8>
 8009e24:	232d      	movs	r3, #45	; 0x2d
 8009e26:	4276      	negs	r6, r6
 8009e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e2c:	485e      	ldr	r0, [pc, #376]	; (8009fa8 <_printf_i+0x244>)
 8009e2e:	230a      	movs	r3, #10
 8009e30:	e019      	b.n	8009e66 <_printf_i+0x102>
 8009e32:	680e      	ldr	r6, [r1, #0]
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e3a:	bf18      	it	ne
 8009e3c:	b236      	sxthne	r6, r6
 8009e3e:	e7ef      	b.n	8009e20 <_printf_i+0xbc>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	1d19      	adds	r1, r3, #4
 8009e46:	6029      	str	r1, [r5, #0]
 8009e48:	0601      	lsls	r1, r0, #24
 8009e4a:	d501      	bpl.n	8009e50 <_printf_i+0xec>
 8009e4c:	681e      	ldr	r6, [r3, #0]
 8009e4e:	e002      	b.n	8009e56 <_printf_i+0xf2>
 8009e50:	0646      	lsls	r6, r0, #25
 8009e52:	d5fb      	bpl.n	8009e4c <_printf_i+0xe8>
 8009e54:	881e      	ldrh	r6, [r3, #0]
 8009e56:	4854      	ldr	r0, [pc, #336]	; (8009fa8 <_printf_i+0x244>)
 8009e58:	2f6f      	cmp	r7, #111	; 0x6f
 8009e5a:	bf0c      	ite	eq
 8009e5c:	2308      	moveq	r3, #8
 8009e5e:	230a      	movne	r3, #10
 8009e60:	2100      	movs	r1, #0
 8009e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e66:	6865      	ldr	r5, [r4, #4]
 8009e68:	60a5      	str	r5, [r4, #8]
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	bfa2      	ittt	ge
 8009e6e:	6821      	ldrge	r1, [r4, #0]
 8009e70:	f021 0104 	bicge.w	r1, r1, #4
 8009e74:	6021      	strge	r1, [r4, #0]
 8009e76:	b90e      	cbnz	r6, 8009e7c <_printf_i+0x118>
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	d04d      	beq.n	8009f18 <_printf_i+0x1b4>
 8009e7c:	4615      	mov	r5, r2
 8009e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e82:	fb03 6711 	mls	r7, r3, r1, r6
 8009e86:	5dc7      	ldrb	r7, [r0, r7]
 8009e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e8c:	4637      	mov	r7, r6
 8009e8e:	42bb      	cmp	r3, r7
 8009e90:	460e      	mov	r6, r1
 8009e92:	d9f4      	bls.n	8009e7e <_printf_i+0x11a>
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d10b      	bne.n	8009eb0 <_printf_i+0x14c>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	07de      	lsls	r6, r3, #31
 8009e9c:	d508      	bpl.n	8009eb0 <_printf_i+0x14c>
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	6861      	ldr	r1, [r4, #4]
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	bfde      	ittt	le
 8009ea6:	2330      	movle	r3, #48	; 0x30
 8009ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009eb0:	1b52      	subs	r2, r2, r5
 8009eb2:	6122      	str	r2, [r4, #16]
 8009eb4:	f8cd a000 	str.w	sl, [sp]
 8009eb8:	464b      	mov	r3, r9
 8009eba:	aa03      	add	r2, sp, #12
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	f7ff fee2 	bl	8009c88 <_printf_common>
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d14c      	bne.n	8009f62 <_printf_i+0x1fe>
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	b004      	add	sp, #16
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	4835      	ldr	r0, [pc, #212]	; (8009fa8 <_printf_i+0x244>)
 8009ed4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ed8:	6829      	ldr	r1, [r5, #0]
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ee0:	6029      	str	r1, [r5, #0]
 8009ee2:	061d      	lsls	r5, r3, #24
 8009ee4:	d514      	bpl.n	8009f10 <_printf_i+0x1ac>
 8009ee6:	07df      	lsls	r7, r3, #31
 8009ee8:	bf44      	itt	mi
 8009eea:	f043 0320 	orrmi.w	r3, r3, #32
 8009eee:	6023      	strmi	r3, [r4, #0]
 8009ef0:	b91e      	cbnz	r6, 8009efa <_printf_i+0x196>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	f023 0320 	bic.w	r3, r3, #32
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	2310      	movs	r3, #16
 8009efc:	e7b0      	b.n	8009e60 <_printf_i+0xfc>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	f043 0320 	orr.w	r3, r3, #32
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	2378      	movs	r3, #120	; 0x78
 8009f08:	4828      	ldr	r0, [pc, #160]	; (8009fac <_printf_i+0x248>)
 8009f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f0e:	e7e3      	b.n	8009ed8 <_printf_i+0x174>
 8009f10:	0659      	lsls	r1, r3, #25
 8009f12:	bf48      	it	mi
 8009f14:	b2b6      	uxthmi	r6, r6
 8009f16:	e7e6      	b.n	8009ee6 <_printf_i+0x182>
 8009f18:	4615      	mov	r5, r2
 8009f1a:	e7bb      	b.n	8009e94 <_printf_i+0x130>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	6826      	ldr	r6, [r4, #0]
 8009f20:	6961      	ldr	r1, [r4, #20]
 8009f22:	1d18      	adds	r0, r3, #4
 8009f24:	6028      	str	r0, [r5, #0]
 8009f26:	0635      	lsls	r5, r6, #24
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	d501      	bpl.n	8009f30 <_printf_i+0x1cc>
 8009f2c:	6019      	str	r1, [r3, #0]
 8009f2e:	e002      	b.n	8009f36 <_printf_i+0x1d2>
 8009f30:	0670      	lsls	r0, r6, #25
 8009f32:	d5fb      	bpl.n	8009f2c <_printf_i+0x1c8>
 8009f34:	8019      	strh	r1, [r3, #0]
 8009f36:	2300      	movs	r3, #0
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	4615      	mov	r5, r2
 8009f3c:	e7ba      	b.n	8009eb4 <_printf_i+0x150>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	1d1a      	adds	r2, r3, #4
 8009f42:	602a      	str	r2, [r5, #0]
 8009f44:	681d      	ldr	r5, [r3, #0]
 8009f46:	6862      	ldr	r2, [r4, #4]
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f7f6 f920 	bl	8000190 <memchr>
 8009f50:	b108      	cbz	r0, 8009f56 <_printf_i+0x1f2>
 8009f52:	1b40      	subs	r0, r0, r5
 8009f54:	6060      	str	r0, [r4, #4]
 8009f56:	6863      	ldr	r3, [r4, #4]
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f60:	e7a8      	b.n	8009eb4 <_printf_i+0x150>
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	462a      	mov	r2, r5
 8009f66:	4649      	mov	r1, r9
 8009f68:	4640      	mov	r0, r8
 8009f6a:	47d0      	blx	sl
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d0ab      	beq.n	8009ec8 <_printf_i+0x164>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	079b      	lsls	r3, r3, #30
 8009f74:	d413      	bmi.n	8009f9e <_printf_i+0x23a>
 8009f76:	68e0      	ldr	r0, [r4, #12]
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	4298      	cmp	r0, r3
 8009f7c:	bfb8      	it	lt
 8009f7e:	4618      	movlt	r0, r3
 8009f80:	e7a4      	b.n	8009ecc <_printf_i+0x168>
 8009f82:	2301      	movs	r3, #1
 8009f84:	4632      	mov	r2, r6
 8009f86:	4649      	mov	r1, r9
 8009f88:	4640      	mov	r0, r8
 8009f8a:	47d0      	blx	sl
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d09b      	beq.n	8009ec8 <_printf_i+0x164>
 8009f90:	3501      	adds	r5, #1
 8009f92:	68e3      	ldr	r3, [r4, #12]
 8009f94:	9903      	ldr	r1, [sp, #12]
 8009f96:	1a5b      	subs	r3, r3, r1
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	dcf2      	bgt.n	8009f82 <_printf_i+0x21e>
 8009f9c:	e7eb      	b.n	8009f76 <_printf_i+0x212>
 8009f9e:	2500      	movs	r5, #0
 8009fa0:	f104 0619 	add.w	r6, r4, #25
 8009fa4:	e7f5      	b.n	8009f92 <_printf_i+0x22e>
 8009fa6:	bf00      	nop
 8009fa8:	0800e506 	.word	0x0800e506
 8009fac:	0800e517 	.word	0x0800e517

08009fb0 <_scanf_float>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	b087      	sub	sp, #28
 8009fb6:	4617      	mov	r7, r2
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	688b      	ldr	r3, [r1, #8]
 8009fbc:	1e5a      	subs	r2, r3, #1
 8009fbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009fc2:	bf83      	ittte	hi
 8009fc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009fc8:	195b      	addhi	r3, r3, r5
 8009fca:	9302      	strhi	r3, [sp, #8]
 8009fcc:	2300      	movls	r3, #0
 8009fce:	bf86      	itte	hi
 8009fd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fd4:	608b      	strhi	r3, [r1, #8]
 8009fd6:	9302      	strls	r3, [sp, #8]
 8009fd8:	680b      	ldr	r3, [r1, #0]
 8009fda:	468b      	mov	fp, r1
 8009fdc:	2500      	movs	r5, #0
 8009fde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fe2:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fe6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fea:	4680      	mov	r8, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	465e      	mov	r6, fp
 8009ff0:	46aa      	mov	sl, r5
 8009ff2:	46a9      	mov	r9, r5
 8009ff4:	9501      	str	r5, [sp, #4]
 8009ff6:	68a2      	ldr	r2, [r4, #8]
 8009ff8:	b152      	cbz	r2, 800a010 <_scanf_float+0x60>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b4e      	cmp	r3, #78	; 0x4e
 800a000:	d864      	bhi.n	800a0cc <_scanf_float+0x11c>
 800a002:	2b40      	cmp	r3, #64	; 0x40
 800a004:	d83c      	bhi.n	800a080 <_scanf_float+0xd0>
 800a006:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a00a:	b2c8      	uxtb	r0, r1
 800a00c:	280e      	cmp	r0, #14
 800a00e:	d93a      	bls.n	800a086 <_scanf_float+0xd6>
 800a010:	f1b9 0f00 	cmp.w	r9, #0
 800a014:	d003      	beq.n	800a01e <_scanf_float+0x6e>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a022:	f1ba 0f01 	cmp.w	sl, #1
 800a026:	f200 8113 	bhi.w	800a250 <_scanf_float+0x2a0>
 800a02a:	455e      	cmp	r6, fp
 800a02c:	f200 8105 	bhi.w	800a23a <_scanf_float+0x28a>
 800a030:	2501      	movs	r5, #1
 800a032:	4628      	mov	r0, r5
 800a034:	b007      	add	sp, #28
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a03e:	2a0d      	cmp	r2, #13
 800a040:	d8e6      	bhi.n	800a010 <_scanf_float+0x60>
 800a042:	a101      	add	r1, pc, #4	; (adr r1, 800a048 <_scanf_float+0x98>)
 800a044:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a048:	0800a187 	.word	0x0800a187
 800a04c:	0800a011 	.word	0x0800a011
 800a050:	0800a011 	.word	0x0800a011
 800a054:	0800a011 	.word	0x0800a011
 800a058:	0800a1e7 	.word	0x0800a1e7
 800a05c:	0800a1bf 	.word	0x0800a1bf
 800a060:	0800a011 	.word	0x0800a011
 800a064:	0800a011 	.word	0x0800a011
 800a068:	0800a195 	.word	0x0800a195
 800a06c:	0800a011 	.word	0x0800a011
 800a070:	0800a011 	.word	0x0800a011
 800a074:	0800a011 	.word	0x0800a011
 800a078:	0800a011 	.word	0x0800a011
 800a07c:	0800a14d 	.word	0x0800a14d
 800a080:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a084:	e7db      	b.n	800a03e <_scanf_float+0x8e>
 800a086:	290e      	cmp	r1, #14
 800a088:	d8c2      	bhi.n	800a010 <_scanf_float+0x60>
 800a08a:	a001      	add	r0, pc, #4	; (adr r0, 800a090 <_scanf_float+0xe0>)
 800a08c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a090:	0800a13f 	.word	0x0800a13f
 800a094:	0800a011 	.word	0x0800a011
 800a098:	0800a13f 	.word	0x0800a13f
 800a09c:	0800a1d3 	.word	0x0800a1d3
 800a0a0:	0800a011 	.word	0x0800a011
 800a0a4:	0800a0ed 	.word	0x0800a0ed
 800a0a8:	0800a129 	.word	0x0800a129
 800a0ac:	0800a129 	.word	0x0800a129
 800a0b0:	0800a129 	.word	0x0800a129
 800a0b4:	0800a129 	.word	0x0800a129
 800a0b8:	0800a129 	.word	0x0800a129
 800a0bc:	0800a129 	.word	0x0800a129
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a129 	.word	0x0800a129
 800a0c8:	0800a129 	.word	0x0800a129
 800a0cc:	2b6e      	cmp	r3, #110	; 0x6e
 800a0ce:	d809      	bhi.n	800a0e4 <_scanf_float+0x134>
 800a0d0:	2b60      	cmp	r3, #96	; 0x60
 800a0d2:	d8b2      	bhi.n	800a03a <_scanf_float+0x8a>
 800a0d4:	2b54      	cmp	r3, #84	; 0x54
 800a0d6:	d077      	beq.n	800a1c8 <_scanf_float+0x218>
 800a0d8:	2b59      	cmp	r3, #89	; 0x59
 800a0da:	d199      	bne.n	800a010 <_scanf_float+0x60>
 800a0dc:	2d07      	cmp	r5, #7
 800a0de:	d197      	bne.n	800a010 <_scanf_float+0x60>
 800a0e0:	2508      	movs	r5, #8
 800a0e2:	e029      	b.n	800a138 <_scanf_float+0x188>
 800a0e4:	2b74      	cmp	r3, #116	; 0x74
 800a0e6:	d06f      	beq.n	800a1c8 <_scanf_float+0x218>
 800a0e8:	2b79      	cmp	r3, #121	; 0x79
 800a0ea:	e7f6      	b.n	800a0da <_scanf_float+0x12a>
 800a0ec:	6821      	ldr	r1, [r4, #0]
 800a0ee:	05c8      	lsls	r0, r1, #23
 800a0f0:	d51a      	bpl.n	800a128 <_scanf_float+0x178>
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0f8:	6021      	str	r1, [r4, #0]
 800a0fa:	f109 0901 	add.w	r9, r9, #1
 800a0fe:	b11b      	cbz	r3, 800a108 <_scanf_float+0x158>
 800a100:	3b01      	subs	r3, #1
 800a102:	3201      	adds	r2, #1
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	60a2      	str	r2, [r4, #8]
 800a108:	68a3      	ldr	r3, [r4, #8]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	60a3      	str	r3, [r4, #8]
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	3301      	adds	r3, #1
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3b01      	subs	r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	607b      	str	r3, [r7, #4]
 800a11c:	f340 8084 	ble.w	800a228 <_scanf_float+0x278>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3301      	adds	r3, #1
 800a124:	603b      	str	r3, [r7, #0]
 800a126:	e766      	b.n	8009ff6 <_scanf_float+0x46>
 800a128:	eb1a 0f05 	cmn.w	sl, r5
 800a12c:	f47f af70 	bne.w	800a010 <_scanf_float+0x60>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a136:	6022      	str	r2, [r4, #0]
 800a138:	f806 3b01 	strb.w	r3, [r6], #1
 800a13c:	e7e4      	b.n	800a108 <_scanf_float+0x158>
 800a13e:	6822      	ldr	r2, [r4, #0]
 800a140:	0610      	lsls	r0, r2, #24
 800a142:	f57f af65 	bpl.w	800a010 <_scanf_float+0x60>
 800a146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a14a:	e7f4      	b.n	800a136 <_scanf_float+0x186>
 800a14c:	f1ba 0f00 	cmp.w	sl, #0
 800a150:	d10e      	bne.n	800a170 <_scanf_float+0x1c0>
 800a152:	f1b9 0f00 	cmp.w	r9, #0
 800a156:	d10e      	bne.n	800a176 <_scanf_float+0x1c6>
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a15e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a162:	d108      	bne.n	800a176 <_scanf_float+0x1c6>
 800a164:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a168:	6022      	str	r2, [r4, #0]
 800a16a:	f04f 0a01 	mov.w	sl, #1
 800a16e:	e7e3      	b.n	800a138 <_scanf_float+0x188>
 800a170:	f1ba 0f02 	cmp.w	sl, #2
 800a174:	d055      	beq.n	800a222 <_scanf_float+0x272>
 800a176:	2d01      	cmp	r5, #1
 800a178:	d002      	beq.n	800a180 <_scanf_float+0x1d0>
 800a17a:	2d04      	cmp	r5, #4
 800a17c:	f47f af48 	bne.w	800a010 <_scanf_float+0x60>
 800a180:	3501      	adds	r5, #1
 800a182:	b2ed      	uxtb	r5, r5
 800a184:	e7d8      	b.n	800a138 <_scanf_float+0x188>
 800a186:	f1ba 0f01 	cmp.w	sl, #1
 800a18a:	f47f af41 	bne.w	800a010 <_scanf_float+0x60>
 800a18e:	f04f 0a02 	mov.w	sl, #2
 800a192:	e7d1      	b.n	800a138 <_scanf_float+0x188>
 800a194:	b97d      	cbnz	r5, 800a1b6 <_scanf_float+0x206>
 800a196:	f1b9 0f00 	cmp.w	r9, #0
 800a19a:	f47f af3c 	bne.w	800a016 <_scanf_float+0x66>
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1a8:	f47f af39 	bne.w	800a01e <_scanf_float+0x6e>
 800a1ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	2501      	movs	r5, #1
 800a1b4:	e7c0      	b.n	800a138 <_scanf_float+0x188>
 800a1b6:	2d03      	cmp	r5, #3
 800a1b8:	d0e2      	beq.n	800a180 <_scanf_float+0x1d0>
 800a1ba:	2d05      	cmp	r5, #5
 800a1bc:	e7de      	b.n	800a17c <_scanf_float+0x1cc>
 800a1be:	2d02      	cmp	r5, #2
 800a1c0:	f47f af26 	bne.w	800a010 <_scanf_float+0x60>
 800a1c4:	2503      	movs	r5, #3
 800a1c6:	e7b7      	b.n	800a138 <_scanf_float+0x188>
 800a1c8:	2d06      	cmp	r5, #6
 800a1ca:	f47f af21 	bne.w	800a010 <_scanf_float+0x60>
 800a1ce:	2507      	movs	r5, #7
 800a1d0:	e7b2      	b.n	800a138 <_scanf_float+0x188>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	0591      	lsls	r1, r2, #22
 800a1d6:	f57f af1b 	bpl.w	800a010 <_scanf_float+0x60>
 800a1da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a1de:	6022      	str	r2, [r4, #0]
 800a1e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1e4:	e7a8      	b.n	800a138 <_scanf_float+0x188>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1f0:	d006      	beq.n	800a200 <_scanf_float+0x250>
 800a1f2:	0550      	lsls	r0, r2, #21
 800a1f4:	f57f af0c 	bpl.w	800a010 <_scanf_float+0x60>
 800a1f8:	f1b9 0f00 	cmp.w	r9, #0
 800a1fc:	f43f af0f 	beq.w	800a01e <_scanf_float+0x6e>
 800a200:	0591      	lsls	r1, r2, #22
 800a202:	bf58      	it	pl
 800a204:	9901      	ldrpl	r1, [sp, #4]
 800a206:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a20a:	bf58      	it	pl
 800a20c:	eba9 0101 	subpl.w	r1, r9, r1
 800a210:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a214:	bf58      	it	pl
 800a216:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	f04f 0900 	mov.w	r9, #0
 800a220:	e78a      	b.n	800a138 <_scanf_float+0x188>
 800a222:	f04f 0a03 	mov.w	sl, #3
 800a226:	e787      	b.n	800a138 <_scanf_float+0x188>
 800a228:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a22c:	4639      	mov	r1, r7
 800a22e:	4640      	mov	r0, r8
 800a230:	4798      	blx	r3
 800a232:	2800      	cmp	r0, #0
 800a234:	f43f aedf 	beq.w	8009ff6 <_scanf_float+0x46>
 800a238:	e6ea      	b.n	800a010 <_scanf_float+0x60>
 800a23a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a23e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a242:	463a      	mov	r2, r7
 800a244:	4640      	mov	r0, r8
 800a246:	4798      	blx	r3
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	e6ec      	b.n	800a02a <_scanf_float+0x7a>
 800a250:	1e6b      	subs	r3, r5, #1
 800a252:	2b06      	cmp	r3, #6
 800a254:	d825      	bhi.n	800a2a2 <_scanf_float+0x2f2>
 800a256:	2d02      	cmp	r5, #2
 800a258:	d836      	bhi.n	800a2c8 <_scanf_float+0x318>
 800a25a:	455e      	cmp	r6, fp
 800a25c:	f67f aee8 	bls.w	800a030 <_scanf_float+0x80>
 800a260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a264:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a268:	463a      	mov	r2, r7
 800a26a:	4640      	mov	r0, r8
 800a26c:	4798      	blx	r3
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	3b01      	subs	r3, #1
 800a272:	6123      	str	r3, [r4, #16]
 800a274:	e7f1      	b.n	800a25a <_scanf_float+0x2aa>
 800a276:	9802      	ldr	r0, [sp, #8]
 800a278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a27c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a280:	9002      	str	r0, [sp, #8]
 800a282:	463a      	mov	r2, r7
 800a284:	4640      	mov	r0, r8
 800a286:	4798      	blx	r3
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a292:	fa5f fa8a 	uxtb.w	sl, sl
 800a296:	f1ba 0f02 	cmp.w	sl, #2
 800a29a:	d1ec      	bne.n	800a276 <_scanf_float+0x2c6>
 800a29c:	3d03      	subs	r5, #3
 800a29e:	b2ed      	uxtb	r5, r5
 800a2a0:	1b76      	subs	r6, r6, r5
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	05da      	lsls	r2, r3, #23
 800a2a6:	d52f      	bpl.n	800a308 <_scanf_float+0x358>
 800a2a8:	055b      	lsls	r3, r3, #21
 800a2aa:	d510      	bpl.n	800a2ce <_scanf_float+0x31e>
 800a2ac:	455e      	cmp	r6, fp
 800a2ae:	f67f aebf 	bls.w	800a030 <_scanf_float+0x80>
 800a2b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4640      	mov	r0, r8
 800a2be:	4798      	blx	r3
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	e7f1      	b.n	800a2ac <_scanf_float+0x2fc>
 800a2c8:	46aa      	mov	sl, r5
 800a2ca:	9602      	str	r6, [sp, #8]
 800a2cc:	e7df      	b.n	800a28e <_scanf_float+0x2de>
 800a2ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	2965      	cmp	r1, #101	; 0x65
 800a2d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2da:	f106 35ff 	add.w	r5, r6, #4294967295
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	d00c      	beq.n	800a2fc <_scanf_float+0x34c>
 800a2e2:	2945      	cmp	r1, #69	; 0x45
 800a2e4:	d00a      	beq.n	800a2fc <_scanf_float+0x34c>
 800a2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	4798      	blx	r3
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	1eb5      	subs	r5, r6, #2
 800a2fa:	6123      	str	r3, [r4, #16]
 800a2fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a300:	463a      	mov	r2, r7
 800a302:	4640      	mov	r0, r8
 800a304:	4798      	blx	r3
 800a306:	462e      	mov	r6, r5
 800a308:	6825      	ldr	r5, [r4, #0]
 800a30a:	f015 0510 	ands.w	r5, r5, #16
 800a30e:	d159      	bne.n	800a3c4 <_scanf_float+0x414>
 800a310:	7035      	strb	r5, [r6, #0]
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31c:	d11b      	bne.n	800a356 <_scanf_float+0x3a6>
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	454b      	cmp	r3, r9
 800a322:	eba3 0209 	sub.w	r2, r3, r9
 800a326:	d123      	bne.n	800a370 <_scanf_float+0x3c0>
 800a328:	2200      	movs	r2, #0
 800a32a:	4659      	mov	r1, fp
 800a32c:	4640      	mov	r0, r8
 800a32e:	f000 ff99 	bl	800b264 <_strtod_r>
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	f012 0f02 	tst.w	r2, #2
 800a33a:	ec57 6b10 	vmov	r6, r7, d0
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	d021      	beq.n	800a386 <_scanf_float+0x3d6>
 800a342:	9903      	ldr	r1, [sp, #12]
 800a344:	1d1a      	adds	r2, r3, #4
 800a346:	600a      	str	r2, [r1, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	e9c3 6700 	strd	r6, r7, [r3]
 800a34e:	68e3      	ldr	r3, [r4, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60e3      	str	r3, [r4, #12]
 800a354:	e66d      	b.n	800a032 <_scanf_float+0x82>
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0e5      	beq.n	800a328 <_scanf_float+0x378>
 800a35c:	9905      	ldr	r1, [sp, #20]
 800a35e:	230a      	movs	r3, #10
 800a360:	462a      	mov	r2, r5
 800a362:	3101      	adds	r1, #1
 800a364:	4640      	mov	r0, r8
 800a366:	f001 f805 	bl	800b374 <_strtol_r>
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	9e05      	ldr	r6, [sp, #20]
 800a36e:	1ac2      	subs	r2, r0, r3
 800a370:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a374:	429e      	cmp	r6, r3
 800a376:	bf28      	it	cs
 800a378:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a37c:	4912      	ldr	r1, [pc, #72]	; (800a3c8 <_scanf_float+0x418>)
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 f8fe 	bl	800a580 <siprintf>
 800a384:	e7d0      	b.n	800a328 <_scanf_float+0x378>
 800a386:	9903      	ldr	r1, [sp, #12]
 800a388:	f012 0f04 	tst.w	r2, #4
 800a38c:	f103 0204 	add.w	r2, r3, #4
 800a390:	600a      	str	r2, [r1, #0]
 800a392:	d1d9      	bne.n	800a348 <_scanf_float+0x398>
 800a394:	f8d3 8000 	ldr.w	r8, [r3]
 800a398:	ee10 2a10 	vmov	r2, s0
 800a39c:	ee10 0a10 	vmov	r0, s0
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f6 fb9a 	bl	8000adc <__aeabi_dcmpun>
 800a3a8:	b128      	cbz	r0, 800a3b6 <_scanf_float+0x406>
 800a3aa:	4808      	ldr	r0, [pc, #32]	; (800a3cc <_scanf_float+0x41c>)
 800a3ac:	f000 f8ae 	bl	800a50c <nanf>
 800a3b0:	ed88 0a00 	vstr	s0, [r8]
 800a3b4:	e7cb      	b.n	800a34e <_scanf_float+0x39e>
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	f7f6 fbed 	bl	8000b98 <__aeabi_d2f>
 800a3be:	f8c8 0000 	str.w	r0, [r8]
 800a3c2:	e7c4      	b.n	800a34e <_scanf_float+0x39e>
 800a3c4:	2500      	movs	r5, #0
 800a3c6:	e634      	b.n	800a032 <_scanf_float+0x82>
 800a3c8:	0800e528 	.word	0x0800e528
 800a3cc:	0800e998 	.word	0x0800e998

0800a3d0 <iprintf>:
 800a3d0:	b40f      	push	{r0, r1, r2, r3}
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <iprintf+0x2c>)
 800a3d4:	b513      	push	{r0, r1, r4, lr}
 800a3d6:	681c      	ldr	r4, [r3, #0]
 800a3d8:	b124      	cbz	r4, 800a3e4 <iprintf+0x14>
 800a3da:	69a3      	ldr	r3, [r4, #24]
 800a3dc:	b913      	cbnz	r3, 800a3e4 <iprintf+0x14>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f002 f81e 	bl	800c420 <__sinit>
 800a3e4:	ab05      	add	r3, sp, #20
 800a3e6:	9a04      	ldr	r2, [sp, #16]
 800a3e8:	68a1      	ldr	r1, [r4, #8]
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f003 fb09 	bl	800da04 <_vfiprintf_r>
 800a3f2:	b002      	add	sp, #8
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	b004      	add	sp, #16
 800a3fa:	4770      	bx	lr
 800a3fc:	2000001c 	.word	0x2000001c

0800a400 <_puts_r>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	460e      	mov	r6, r1
 800a404:	4605      	mov	r5, r0
 800a406:	b118      	cbz	r0, 800a410 <_puts_r+0x10>
 800a408:	6983      	ldr	r3, [r0, #24]
 800a40a:	b90b      	cbnz	r3, 800a410 <_puts_r+0x10>
 800a40c:	f002 f808 	bl	800c420 <__sinit>
 800a410:	69ab      	ldr	r3, [r5, #24]
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	b913      	cbnz	r3, 800a41c <_puts_r+0x1c>
 800a416:	4628      	mov	r0, r5
 800a418:	f002 f802 	bl	800c420 <__sinit>
 800a41c:	4b2c      	ldr	r3, [pc, #176]	; (800a4d0 <_puts_r+0xd0>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d120      	bne.n	800a464 <_puts_r+0x64>
 800a422:	686c      	ldr	r4, [r5, #4]
 800a424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a426:	07db      	lsls	r3, r3, #31
 800a428:	d405      	bmi.n	800a436 <_puts_r+0x36>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	0598      	lsls	r0, r3, #22
 800a42e:	d402      	bmi.n	800a436 <_puts_r+0x36>
 800a430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a432:	f002 fc06 	bl	800cc42 <__retarget_lock_acquire_recursive>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	0719      	lsls	r1, r3, #28
 800a43a:	d51d      	bpl.n	800a478 <_puts_r+0x78>
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	b1db      	cbz	r3, 800a478 <_puts_r+0x78>
 800a440:	3e01      	subs	r6, #1
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a448:	3b01      	subs	r3, #1
 800a44a:	60a3      	str	r3, [r4, #8]
 800a44c:	bb39      	cbnz	r1, 800a49e <_puts_r+0x9e>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da38      	bge.n	800a4c4 <_puts_r+0xc4>
 800a452:	4622      	mov	r2, r4
 800a454:	210a      	movs	r1, #10
 800a456:	4628      	mov	r0, r5
 800a458:	f000 ff8e 	bl	800b378 <__swbuf_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d011      	beq.n	800a484 <_puts_r+0x84>
 800a460:	250a      	movs	r5, #10
 800a462:	e011      	b.n	800a488 <_puts_r+0x88>
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <_puts_r+0xd4>)
 800a466:	429c      	cmp	r4, r3
 800a468:	d101      	bne.n	800a46e <_puts_r+0x6e>
 800a46a:	68ac      	ldr	r4, [r5, #8]
 800a46c:	e7da      	b.n	800a424 <_puts_r+0x24>
 800a46e:	4b1a      	ldr	r3, [pc, #104]	; (800a4d8 <_puts_r+0xd8>)
 800a470:	429c      	cmp	r4, r3
 800a472:	bf08      	it	eq
 800a474:	68ec      	ldreq	r4, [r5, #12]
 800a476:	e7d5      	b.n	800a424 <_puts_r+0x24>
 800a478:	4621      	mov	r1, r4
 800a47a:	4628      	mov	r0, r5
 800a47c:	f000 ffce 	bl	800b41c <__swsetup_r>
 800a480:	2800      	cmp	r0, #0
 800a482:	d0dd      	beq.n	800a440 <_puts_r+0x40>
 800a484:	f04f 35ff 	mov.w	r5, #4294967295
 800a488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48a:	07da      	lsls	r2, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_puts_r+0x9a>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	059b      	lsls	r3, r3, #22
 800a492:	d402      	bmi.n	800a49a <_puts_r+0x9a>
 800a494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a496:	f002 fbd5 	bl	800cc44 <__retarget_lock_release_recursive>
 800a49a:	4628      	mov	r0, r5
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da04      	bge.n	800a4ac <_puts_r+0xac>
 800a4a2:	69a2      	ldr	r2, [r4, #24]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	dc06      	bgt.n	800a4b6 <_puts_r+0xb6>
 800a4a8:	290a      	cmp	r1, #10
 800a4aa:	d004      	beq.n	800a4b6 <_puts_r+0xb6>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	6022      	str	r2, [r4, #0]
 800a4b2:	7019      	strb	r1, [r3, #0]
 800a4b4:	e7c5      	b.n	800a442 <_puts_r+0x42>
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 ff5d 	bl	800b378 <__swbuf_r>
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d1bf      	bne.n	800a442 <_puts_r+0x42>
 800a4c2:	e7df      	b.n	800a484 <_puts_r+0x84>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	250a      	movs	r5, #10
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	6022      	str	r2, [r4, #0]
 800a4cc:	701d      	strb	r5, [r3, #0]
 800a4ce:	e7db      	b.n	800a488 <_puts_r+0x88>
 800a4d0:	0800e734 	.word	0x0800e734
 800a4d4:	0800e754 	.word	0x0800e754
 800a4d8:	0800e714 	.word	0x0800e714

0800a4dc <puts>:
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <puts+0xc>)
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f7ff bf8d 	b.w	800a400 <_puts_r>
 800a4e6:	bf00      	nop
 800a4e8:	2000001c 	.word	0x2000001c

0800a4ec <_sbrk_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	; (800a508 <_sbrk_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f9 faac 	bl	8003a54 <_sbrk>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_sbrk_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_sbrk_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	200007c0 	.word	0x200007c0

0800a50c <nanf>:
 800a50c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a514 <nanf+0x8>
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	7fc00000 	.word	0x7fc00000

0800a518 <sniprintf>:
 800a518:	b40c      	push	{r2, r3}
 800a51a:	b530      	push	{r4, r5, lr}
 800a51c:	4b17      	ldr	r3, [pc, #92]	; (800a57c <sniprintf+0x64>)
 800a51e:	1e0c      	subs	r4, r1, #0
 800a520:	681d      	ldr	r5, [r3, #0]
 800a522:	b09d      	sub	sp, #116	; 0x74
 800a524:	da08      	bge.n	800a538 <sniprintf+0x20>
 800a526:	238b      	movs	r3, #139	; 0x8b
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	f04f 30ff 	mov.w	r0, #4294967295
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a534:	b002      	add	sp, #8
 800a536:	4770      	bx	lr
 800a538:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a53c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a540:	bf14      	ite	ne
 800a542:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a546:	4623      	moveq	r3, r4
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a550:	9002      	str	r0, [sp, #8]
 800a552:	9006      	str	r0, [sp, #24]
 800a554:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a55a:	ab21      	add	r3, sp, #132	; 0x84
 800a55c:	a902      	add	r1, sp, #8
 800a55e:	4628      	mov	r0, r5
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f003 f925 	bl	800d7b0 <_svfiprintf_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	bfbc      	itt	lt
 800a56a:	238b      	movlt	r3, #139	; 0x8b
 800a56c:	602b      	strlt	r3, [r5, #0]
 800a56e:	2c00      	cmp	r4, #0
 800a570:	d0dd      	beq.n	800a52e <sniprintf+0x16>
 800a572:	9b02      	ldr	r3, [sp, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	701a      	strb	r2, [r3, #0]
 800a578:	e7d9      	b.n	800a52e <sniprintf+0x16>
 800a57a:	bf00      	nop
 800a57c:	2000001c 	.word	0x2000001c

0800a580 <siprintf>:
 800a580:	b40e      	push	{r1, r2, r3}
 800a582:	b500      	push	{lr}
 800a584:	b09c      	sub	sp, #112	; 0x70
 800a586:	ab1d      	add	r3, sp, #116	; 0x74
 800a588:	9002      	str	r0, [sp, #8]
 800a58a:	9006      	str	r0, [sp, #24]
 800a58c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a590:	4809      	ldr	r0, [pc, #36]	; (800a5b8 <siprintf+0x38>)
 800a592:	9107      	str	r1, [sp, #28]
 800a594:	9104      	str	r1, [sp, #16]
 800a596:	4909      	ldr	r1, [pc, #36]	; (800a5bc <siprintf+0x3c>)
 800a598:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59c:	9105      	str	r1, [sp, #20]
 800a59e:	6800      	ldr	r0, [r0, #0]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	a902      	add	r1, sp, #8
 800a5a4:	f003 f904 	bl	800d7b0 <_svfiprintf_r>
 800a5a8:	9b02      	ldr	r3, [sp, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	b01c      	add	sp, #112	; 0x70
 800a5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b4:	b003      	add	sp, #12
 800a5b6:	4770      	bx	lr
 800a5b8:	2000001c 	.word	0x2000001c
 800a5bc:	ffff0208 	.word	0xffff0208

0800a5c0 <strcat>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	7814      	ldrb	r4, [r2, #0]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	3201      	adds	r2, #1
 800a5ca:	2c00      	cmp	r4, #0
 800a5cc:	d1fa      	bne.n	800a5c4 <strcat+0x4>
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d1f9      	bne.n	800a5d0 <strcat+0x10>
 800a5dc:	bd10      	pop	{r4, pc}

0800a5de <strcpy>:
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5e4:	f803 2b01 	strb.w	r2, [r3], #1
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d1f9      	bne.n	800a5e0 <strcpy+0x2>
 800a5ec:	4770      	bx	lr

0800a5ee <strstr>:
 800a5ee:	780a      	ldrb	r2, [r1, #0]
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	b96a      	cbnz	r2, 800a610 <strstr+0x22>
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d109      	bne.n	800a60e <strstr+0x20>
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0f6      	beq.n	800a5f4 <strstr+0x6>
 800a606:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a60a:	429e      	cmp	r6, r3
 800a60c:	d0f7      	beq.n	800a5fe <strstr+0x10>
 800a60e:	3001      	adds	r0, #1
 800a610:	7803      	ldrb	r3, [r0, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1ef      	bne.n	800a5f6 <strstr+0x8>
 800a616:	4618      	mov	r0, r3
 800a618:	e7ec      	b.n	800a5f4 <strstr+0x6>

0800a61a <sulp>:
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	ec45 4b10 	vmov	d0, r4, r5
 800a624:	4616      	mov	r6, r2
 800a626:	f002 ff03 	bl	800d430 <__ulp>
 800a62a:	ec51 0b10 	vmov	r0, r1, d0
 800a62e:	b17e      	cbz	r6, 800a650 <sulp+0x36>
 800a630:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a634:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dd09      	ble.n	800a650 <sulp+0x36>
 800a63c:	051b      	lsls	r3, r3, #20
 800a63e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a642:	2400      	movs	r4, #0
 800a644:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a648:	4622      	mov	r2, r4
 800a64a:	462b      	mov	r3, r5
 800a64c:	f7f5 ffac 	bl	80005a8 <__aeabi_dmul>
 800a650:	bd70      	pop	{r4, r5, r6, pc}
 800a652:	0000      	movs	r0, r0
 800a654:	0000      	movs	r0, r0
	...

0800a658 <_strtod_l>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	ed2d 8b02 	vpush	{d8}
 800a660:	b09d      	sub	sp, #116	; 0x74
 800a662:	461f      	mov	r7, r3
 800a664:	2300      	movs	r3, #0
 800a666:	9318      	str	r3, [sp, #96]	; 0x60
 800a668:	4ba2      	ldr	r3, [pc, #648]	; (800a8f4 <_strtod_l+0x29c>)
 800a66a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	4604      	mov	r4, r0
 800a672:	4618      	mov	r0, r3
 800a674:	4688      	mov	r8, r1
 800a676:	f7f5 fd83 	bl	8000180 <strlen>
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	4605      	mov	r5, r0
 800a680:	f04f 0b00 	mov.w	fp, #0
 800a684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a68a:	781a      	ldrb	r2, [r3, #0]
 800a68c:	2a2b      	cmp	r2, #43	; 0x2b
 800a68e:	d04e      	beq.n	800a72e <_strtod_l+0xd6>
 800a690:	d83b      	bhi.n	800a70a <_strtod_l+0xb2>
 800a692:	2a0d      	cmp	r2, #13
 800a694:	d834      	bhi.n	800a700 <_strtod_l+0xa8>
 800a696:	2a08      	cmp	r2, #8
 800a698:	d834      	bhi.n	800a704 <_strtod_l+0xac>
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	d03e      	beq.n	800a71c <_strtod_l+0xc4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a6a4:	7833      	ldrb	r3, [r6, #0]
 800a6a6:	2b30      	cmp	r3, #48	; 0x30
 800a6a8:	f040 80b0 	bne.w	800a80c <_strtod_l+0x1b4>
 800a6ac:	7873      	ldrb	r3, [r6, #1]
 800a6ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6b2:	2b58      	cmp	r3, #88	; 0x58
 800a6b4:	d168      	bne.n	800a788 <_strtod_l+0x130>
 800a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	ab18      	add	r3, sp, #96	; 0x60
 800a6bc:	9702      	str	r7, [sp, #8]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	4a8d      	ldr	r2, [pc, #564]	; (800a8f8 <_strtod_l+0x2a0>)
 800a6c2:	ab19      	add	r3, sp, #100	; 0x64
 800a6c4:	a917      	add	r1, sp, #92	; 0x5c
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f001 ffae 	bl	800c628 <__gethex>
 800a6cc:	f010 0707 	ands.w	r7, r0, #7
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	d005      	beq.n	800a6e0 <_strtod_l+0x88>
 800a6d4:	2f06      	cmp	r7, #6
 800a6d6:	d12c      	bne.n	800a732 <_strtod_l+0xda>
 800a6d8:	3601      	adds	r6, #1
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a6de:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 8590 	bne.w	800b208 <_strtod_l+0xbb0>
 800a6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ea:	b1eb      	cbz	r3, 800a728 <_strtod_l+0xd0>
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6f2:	ec43 2b10 	vmov	d0, r2, r3
 800a6f6:	b01d      	add	sp, #116	; 0x74
 800a6f8:	ecbd 8b02 	vpop	{d8}
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	2a20      	cmp	r2, #32
 800a702:	d1cc      	bne.n	800a69e <_strtod_l+0x46>
 800a704:	3301      	adds	r3, #1
 800a706:	9317      	str	r3, [sp, #92]	; 0x5c
 800a708:	e7be      	b.n	800a688 <_strtod_l+0x30>
 800a70a:	2a2d      	cmp	r2, #45	; 0x2d
 800a70c:	d1c7      	bne.n	800a69e <_strtod_l+0x46>
 800a70e:	2201      	movs	r2, #1
 800a710:	920a      	str	r2, [sp, #40]	; 0x28
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	9217      	str	r2, [sp, #92]	; 0x5c
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1c2      	bne.n	800a6a2 <_strtod_l+0x4a>
 800a71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a71e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a722:	2b00      	cmp	r3, #0
 800a724:	f040 856e 	bne.w	800b204 <_strtod_l+0xbac>
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	e7e1      	b.n	800a6f2 <_strtod_l+0x9a>
 800a72e:	2200      	movs	r2, #0
 800a730:	e7ee      	b.n	800a710 <_strtod_l+0xb8>
 800a732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a734:	b13a      	cbz	r2, 800a746 <_strtod_l+0xee>
 800a736:	2135      	movs	r1, #53	; 0x35
 800a738:	a81a      	add	r0, sp, #104	; 0x68
 800a73a:	f002 ff84 	bl	800d646 <__copybits>
 800a73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a740:	4620      	mov	r0, r4
 800a742:	f002 fb43 	bl	800cdcc <_Bfree>
 800a746:	3f01      	subs	r7, #1
 800a748:	2f04      	cmp	r7, #4
 800a74a:	d806      	bhi.n	800a75a <_strtod_l+0x102>
 800a74c:	e8df f007 	tbb	[pc, r7]
 800a750:	1714030a 	.word	0x1714030a
 800a754:	0a          	.byte	0x0a
 800a755:	00          	.byte	0x00
 800a756:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a75a:	0728      	lsls	r0, r5, #28
 800a75c:	d5c0      	bpl.n	800a6e0 <_strtod_l+0x88>
 800a75e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a762:	e7bd      	b.n	800a6e0 <_strtod_l+0x88>
 800a764:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a76a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a76e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a772:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a776:	e7f0      	b.n	800a75a <_strtod_l+0x102>
 800a778:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a8fc <_strtod_l+0x2a4>
 800a77c:	e7ed      	b.n	800a75a <_strtod_l+0x102>
 800a77e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a782:	f04f 3aff 	mov.w	sl, #4294967295
 800a786:	e7e8      	b.n	800a75a <_strtod_l+0x102>
 800a788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d0f9      	beq.n	800a788 <_strtod_l+0x130>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0a3      	beq.n	800a6e0 <_strtod_l+0x88>
 800a798:	2301      	movs	r3, #1
 800a79a:	f04f 0900 	mov.w	r9, #0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7a2:	9308      	str	r3, [sp, #32]
 800a7a4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a7a8:	464f      	mov	r7, r9
 800a7aa:	220a      	movs	r2, #10
 800a7ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a7ae:	7806      	ldrb	r6, [r0, #0]
 800a7b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7b4:	b2d9      	uxtb	r1, r3
 800a7b6:	2909      	cmp	r1, #9
 800a7b8:	d92a      	bls.n	800a810 <_strtod_l+0x1b8>
 800a7ba:	9905      	ldr	r1, [sp, #20]
 800a7bc:	462a      	mov	r2, r5
 800a7be:	f003 fa9e 	bl	800dcfe <strncmp>
 800a7c2:	b398      	cbz	r0, 800a82c <_strtod_l+0x1d4>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	463d      	mov	r5, r7
 800a7ca:	9005      	str	r0, [sp, #20]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2a65      	cmp	r2, #101	; 0x65
 800a7d0:	d001      	beq.n	800a7d6 <_strtod_l+0x17e>
 800a7d2:	2a45      	cmp	r2, #69	; 0x45
 800a7d4:	d118      	bne.n	800a808 <_strtod_l+0x1b0>
 800a7d6:	b91d      	cbnz	r5, 800a7e0 <_strtod_l+0x188>
 800a7d8:	9a04      	ldr	r2, [sp, #16]
 800a7da:	4302      	orrs	r2, r0
 800a7dc:	d09e      	beq.n	800a71c <_strtod_l+0xc4>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a7e4:	f108 0201 	add.w	r2, r8, #1
 800a7e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a7ee:	2a2b      	cmp	r2, #43	; 0x2b
 800a7f0:	d075      	beq.n	800a8de <_strtod_l+0x286>
 800a7f2:	2a2d      	cmp	r2, #45	; 0x2d
 800a7f4:	d07b      	beq.n	800a8ee <_strtod_l+0x296>
 800a7f6:	f04f 0c00 	mov.w	ip, #0
 800a7fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a7fe:	2909      	cmp	r1, #9
 800a800:	f240 8082 	bls.w	800a908 <_strtod_l+0x2b0>
 800a804:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a808:	2600      	movs	r6, #0
 800a80a:	e09d      	b.n	800a948 <_strtod_l+0x2f0>
 800a80c:	2300      	movs	r3, #0
 800a80e:	e7c4      	b.n	800a79a <_strtod_l+0x142>
 800a810:	2f08      	cmp	r7, #8
 800a812:	bfd8      	it	le
 800a814:	9907      	ldrle	r1, [sp, #28]
 800a816:	f100 0001 	add.w	r0, r0, #1
 800a81a:	bfda      	itte	le
 800a81c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a820:	9307      	strle	r3, [sp, #28]
 800a822:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a826:	3701      	adds	r7, #1
 800a828:	9017      	str	r0, [sp, #92]	; 0x5c
 800a82a:	e7bf      	b.n	800a7ac <_strtod_l+0x154>
 800a82c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a82e:	195a      	adds	r2, r3, r5
 800a830:	9217      	str	r2, [sp, #92]	; 0x5c
 800a832:	5d5a      	ldrb	r2, [r3, r5]
 800a834:	2f00      	cmp	r7, #0
 800a836:	d037      	beq.n	800a8a8 <_strtod_l+0x250>
 800a838:	9005      	str	r0, [sp, #20]
 800a83a:	463d      	mov	r5, r7
 800a83c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a840:	2b09      	cmp	r3, #9
 800a842:	d912      	bls.n	800a86a <_strtod_l+0x212>
 800a844:	2301      	movs	r3, #1
 800a846:	e7c2      	b.n	800a7ce <_strtod_l+0x176>
 800a848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a84e:	785a      	ldrb	r2, [r3, #1]
 800a850:	3001      	adds	r0, #1
 800a852:	2a30      	cmp	r2, #48	; 0x30
 800a854:	d0f8      	beq.n	800a848 <_strtod_l+0x1f0>
 800a856:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a85a:	2b08      	cmp	r3, #8
 800a85c:	f200 84d9 	bhi.w	800b212 <_strtod_l+0xbba>
 800a860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a862:	9005      	str	r0, [sp, #20]
 800a864:	2000      	movs	r0, #0
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	4605      	mov	r5, r0
 800a86a:	3a30      	subs	r2, #48	; 0x30
 800a86c:	f100 0301 	add.w	r3, r0, #1
 800a870:	d014      	beq.n	800a89c <_strtod_l+0x244>
 800a872:	9905      	ldr	r1, [sp, #20]
 800a874:	4419      	add	r1, r3
 800a876:	9105      	str	r1, [sp, #20]
 800a878:	462b      	mov	r3, r5
 800a87a:	eb00 0e05 	add.w	lr, r0, r5
 800a87e:	210a      	movs	r1, #10
 800a880:	4573      	cmp	r3, lr
 800a882:	d113      	bne.n	800a8ac <_strtod_l+0x254>
 800a884:	182b      	adds	r3, r5, r0
 800a886:	2b08      	cmp	r3, #8
 800a888:	f105 0501 	add.w	r5, r5, #1
 800a88c:	4405      	add	r5, r0
 800a88e:	dc1c      	bgt.n	800a8ca <_strtod_l+0x272>
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	230a      	movs	r3, #10
 800a894:	fb03 2301 	mla	r3, r3, r1, r2
 800a898:	9307      	str	r3, [sp, #28]
 800a89a:	2300      	movs	r3, #0
 800a89c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a89e:	1c51      	adds	r1, r2, #1
 800a8a0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a8a2:	7852      	ldrb	r2, [r2, #1]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	e7c9      	b.n	800a83c <_strtod_l+0x1e4>
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	e7d2      	b.n	800a852 <_strtod_l+0x1fa>
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	dc04      	bgt.n	800a8ba <_strtod_l+0x262>
 800a8b0:	9e07      	ldr	r6, [sp, #28]
 800a8b2:	434e      	muls	r6, r1
 800a8b4:	9607      	str	r6, [sp, #28]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	e7e2      	b.n	800a880 <_strtod_l+0x228>
 800a8ba:	f103 0c01 	add.w	ip, r3, #1
 800a8be:	f1bc 0f10 	cmp.w	ip, #16
 800a8c2:	bfd8      	it	le
 800a8c4:	fb01 f909 	mulle.w	r9, r1, r9
 800a8c8:	e7f5      	b.n	800a8b6 <_strtod_l+0x25e>
 800a8ca:	2d10      	cmp	r5, #16
 800a8cc:	bfdc      	itt	le
 800a8ce:	230a      	movle	r3, #10
 800a8d0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a8d4:	e7e1      	b.n	800a89a <_strtod_l+0x242>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e77c      	b.n	800a7d8 <_strtod_l+0x180>
 800a8de:	f04f 0c00 	mov.w	ip, #0
 800a8e2:	f108 0202 	add.w	r2, r8, #2
 800a8e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a8ec:	e785      	b.n	800a7fa <_strtod_l+0x1a2>
 800a8ee:	f04f 0c01 	mov.w	ip, #1
 800a8f2:	e7f6      	b.n	800a8e2 <_strtod_l+0x28a>
 800a8f4:	0800e7dc 	.word	0x0800e7dc
 800a8f8:	0800e530 	.word	0x0800e530
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a902:	1c51      	adds	r1, r2, #1
 800a904:	9117      	str	r1, [sp, #92]	; 0x5c
 800a906:	7852      	ldrb	r2, [r2, #1]
 800a908:	2a30      	cmp	r2, #48	; 0x30
 800a90a:	d0f9      	beq.n	800a900 <_strtod_l+0x2a8>
 800a90c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a910:	2908      	cmp	r1, #8
 800a912:	f63f af79 	bhi.w	800a808 <_strtod_l+0x1b0>
 800a916:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a91a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a91c:	9206      	str	r2, [sp, #24]
 800a91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a920:	1c51      	adds	r1, r2, #1
 800a922:	9117      	str	r1, [sp, #92]	; 0x5c
 800a924:	7852      	ldrb	r2, [r2, #1]
 800a926:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a92a:	2e09      	cmp	r6, #9
 800a92c:	d937      	bls.n	800a99e <_strtod_l+0x346>
 800a92e:	9e06      	ldr	r6, [sp, #24]
 800a930:	1b89      	subs	r1, r1, r6
 800a932:	2908      	cmp	r1, #8
 800a934:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a938:	dc02      	bgt.n	800a940 <_strtod_l+0x2e8>
 800a93a:	4576      	cmp	r6, lr
 800a93c:	bfa8      	it	ge
 800a93e:	4676      	movge	r6, lr
 800a940:	f1bc 0f00 	cmp.w	ip, #0
 800a944:	d000      	beq.n	800a948 <_strtod_l+0x2f0>
 800a946:	4276      	negs	r6, r6
 800a948:	2d00      	cmp	r5, #0
 800a94a:	d14d      	bne.n	800a9e8 <_strtod_l+0x390>
 800a94c:	9904      	ldr	r1, [sp, #16]
 800a94e:	4301      	orrs	r1, r0
 800a950:	f47f aec6 	bne.w	800a6e0 <_strtod_l+0x88>
 800a954:	2b00      	cmp	r3, #0
 800a956:	f47f aee1 	bne.w	800a71c <_strtod_l+0xc4>
 800a95a:	2a69      	cmp	r2, #105	; 0x69
 800a95c:	d027      	beq.n	800a9ae <_strtod_l+0x356>
 800a95e:	dc24      	bgt.n	800a9aa <_strtod_l+0x352>
 800a960:	2a49      	cmp	r2, #73	; 0x49
 800a962:	d024      	beq.n	800a9ae <_strtod_l+0x356>
 800a964:	2a4e      	cmp	r2, #78	; 0x4e
 800a966:	f47f aed9 	bne.w	800a71c <_strtod_l+0xc4>
 800a96a:	499f      	ldr	r1, [pc, #636]	; (800abe8 <_strtod_l+0x590>)
 800a96c:	a817      	add	r0, sp, #92	; 0x5c
 800a96e:	f002 f8b3 	bl	800cad8 <__match>
 800a972:	2800      	cmp	r0, #0
 800a974:	f43f aed2 	beq.w	800a71c <_strtod_l+0xc4>
 800a978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b28      	cmp	r3, #40	; 0x28
 800a97e:	d12d      	bne.n	800a9dc <_strtod_l+0x384>
 800a980:	499a      	ldr	r1, [pc, #616]	; (800abec <_strtod_l+0x594>)
 800a982:	aa1a      	add	r2, sp, #104	; 0x68
 800a984:	a817      	add	r0, sp, #92	; 0x5c
 800a986:	f002 f8bb 	bl	800cb00 <__hexnan>
 800a98a:	2805      	cmp	r0, #5
 800a98c:	d126      	bne.n	800a9dc <_strtod_l+0x384>
 800a98e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a990:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a994:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a998:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a99c:	e6a0      	b.n	800a6e0 <_strtod_l+0x88>
 800a99e:	210a      	movs	r1, #10
 800a9a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a9a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a9a8:	e7b9      	b.n	800a91e <_strtod_l+0x2c6>
 800a9aa:	2a6e      	cmp	r2, #110	; 0x6e
 800a9ac:	e7db      	b.n	800a966 <_strtod_l+0x30e>
 800a9ae:	4990      	ldr	r1, [pc, #576]	; (800abf0 <_strtod_l+0x598>)
 800a9b0:	a817      	add	r0, sp, #92	; 0x5c
 800a9b2:	f002 f891 	bl	800cad8 <__match>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aeb0 	beq.w	800a71c <_strtod_l+0xc4>
 800a9bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9be:	498d      	ldr	r1, [pc, #564]	; (800abf4 <_strtod_l+0x59c>)
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	a817      	add	r0, sp, #92	; 0x5c
 800a9c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9c6:	f002 f887 	bl	800cad8 <__match>
 800a9ca:	b910      	cbnz	r0, 800a9d2 <_strtod_l+0x37a>
 800a9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ac04 <_strtod_l+0x5ac>
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	e681      	b.n	800a6e0 <_strtod_l+0x88>
 800a9dc:	4886      	ldr	r0, [pc, #536]	; (800abf8 <_strtod_l+0x5a0>)
 800a9de:	f003 f943 	bl	800dc68 <nan>
 800a9e2:	ec5b ab10 	vmov	sl, fp, d0
 800a9e6:	e67b      	b.n	800a6e0 <_strtod_l+0x88>
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	9807      	ldr	r0, [sp, #28]
 800a9ec:	1af3      	subs	r3, r6, r3
 800a9ee:	2f00      	cmp	r7, #0
 800a9f0:	bf08      	it	eq
 800a9f2:	462f      	moveq	r7, r5
 800a9f4:	2d10      	cmp	r5, #16
 800a9f6:	9306      	str	r3, [sp, #24]
 800a9f8:	46a8      	mov	r8, r5
 800a9fa:	bfa8      	it	ge
 800a9fc:	f04f 0810 	movge.w	r8, #16
 800aa00:	f7f5 fd58 	bl	80004b4 <__aeabi_ui2d>
 800aa04:	2d09      	cmp	r5, #9
 800aa06:	4682      	mov	sl, r0
 800aa08:	468b      	mov	fp, r1
 800aa0a:	dd13      	ble.n	800aa34 <_strtod_l+0x3dc>
 800aa0c:	4b7b      	ldr	r3, [pc, #492]	; (800abfc <_strtod_l+0x5a4>)
 800aa0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa16:	f7f5 fdc7 	bl	80005a8 <__aeabi_dmul>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	468b      	mov	fp, r1
 800aa20:	f7f5 fd48 	bl	80004b4 <__aeabi_ui2d>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	f7f5 fc06 	bl	800023c <__adddf3>
 800aa30:	4682      	mov	sl, r0
 800aa32:	468b      	mov	fp, r1
 800aa34:	2d0f      	cmp	r5, #15
 800aa36:	dc38      	bgt.n	800aaaa <_strtod_l+0x452>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f43f ae50 	beq.w	800a6e0 <_strtod_l+0x88>
 800aa40:	dd24      	ble.n	800aa8c <_strtod_l+0x434>
 800aa42:	2b16      	cmp	r3, #22
 800aa44:	dc0b      	bgt.n	800aa5e <_strtod_l+0x406>
 800aa46:	496d      	ldr	r1, [pc, #436]	; (800abfc <_strtod_l+0x5a4>)
 800aa48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa50:	4652      	mov	r2, sl
 800aa52:	465b      	mov	r3, fp
 800aa54:	f7f5 fda8 	bl	80005a8 <__aeabi_dmul>
 800aa58:	4682      	mov	sl, r0
 800aa5a:	468b      	mov	fp, r1
 800aa5c:	e640      	b.n	800a6e0 <_strtod_l+0x88>
 800aa5e:	9a06      	ldr	r2, [sp, #24]
 800aa60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aa64:	4293      	cmp	r3, r2
 800aa66:	db20      	blt.n	800aaaa <_strtod_l+0x452>
 800aa68:	4c64      	ldr	r4, [pc, #400]	; (800abfc <_strtod_l+0x5a4>)
 800aa6a:	f1c5 050f 	rsb	r5, r5, #15
 800aa6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa72:	4652      	mov	r2, sl
 800aa74:	465b      	mov	r3, fp
 800aa76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa7a:	f7f5 fd95 	bl	80005a8 <__aeabi_dmul>
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	1b5d      	subs	r5, r3, r5
 800aa82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa8a:	e7e3      	b.n	800aa54 <_strtod_l+0x3fc>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	3316      	adds	r3, #22
 800aa90:	db0b      	blt.n	800aaaa <_strtod_l+0x452>
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	1b9e      	subs	r6, r3, r6
 800aa96:	4b59      	ldr	r3, [pc, #356]	; (800abfc <_strtod_l+0x5a4>)
 800aa98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aa9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	4659      	mov	r1, fp
 800aaa4:	f7f5 feaa 	bl	80007fc <__aeabi_ddiv>
 800aaa8:	e7d6      	b.n	800aa58 <_strtod_l+0x400>
 800aaaa:	9b06      	ldr	r3, [sp, #24]
 800aaac:	eba5 0808 	sub.w	r8, r5, r8
 800aab0:	4498      	add	r8, r3
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	dd74      	ble.n	800aba2 <_strtod_l+0x54a>
 800aab8:	f018 030f 	ands.w	r3, r8, #15
 800aabc:	d00a      	beq.n	800aad4 <_strtod_l+0x47c>
 800aabe:	494f      	ldr	r1, [pc, #316]	; (800abfc <_strtod_l+0x5a4>)
 800aac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aacc:	f7f5 fd6c 	bl	80005a8 <__aeabi_dmul>
 800aad0:	4682      	mov	sl, r0
 800aad2:	468b      	mov	fp, r1
 800aad4:	f038 080f 	bics.w	r8, r8, #15
 800aad8:	d04f      	beq.n	800ab7a <_strtod_l+0x522>
 800aada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aade:	dd22      	ble.n	800ab26 <_strtod_l+0x4ce>
 800aae0:	2500      	movs	r5, #0
 800aae2:	462e      	mov	r6, r5
 800aae4:	9507      	str	r5, [sp, #28]
 800aae6:	9505      	str	r5, [sp, #20]
 800aae8:	2322      	movs	r3, #34	; 0x22
 800aaea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ac04 <_strtod_l+0x5ac>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	f04f 0a00 	mov.w	sl, #0
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f43f adf2 	beq.w	800a6e0 <_strtod_l+0x88>
 800aafc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aafe:	4620      	mov	r0, r4
 800ab00:	f002 f964 	bl	800cdcc <_Bfree>
 800ab04:	9905      	ldr	r1, [sp, #20]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f002 f960 	bl	800cdcc <_Bfree>
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f002 f95c 	bl	800cdcc <_Bfree>
 800ab14:	9907      	ldr	r1, [sp, #28]
 800ab16:	4620      	mov	r0, r4
 800ab18:	f002 f958 	bl	800cdcc <_Bfree>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f002 f954 	bl	800cdcc <_Bfree>
 800ab24:	e5dc      	b.n	800a6e0 <_strtod_l+0x88>
 800ab26:	4b36      	ldr	r3, [pc, #216]	; (800ac00 <_strtod_l+0x5a8>)
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab30:	4650      	mov	r0, sl
 800ab32:	4659      	mov	r1, fp
 800ab34:	4699      	mov	r9, r3
 800ab36:	f1b8 0f01 	cmp.w	r8, #1
 800ab3a:	dc21      	bgt.n	800ab80 <_strtod_l+0x528>
 800ab3c:	b10b      	cbz	r3, 800ab42 <_strtod_l+0x4ea>
 800ab3e:	4682      	mov	sl, r0
 800ab40:	468b      	mov	fp, r1
 800ab42:	4b2f      	ldr	r3, [pc, #188]	; (800ac00 <_strtod_l+0x5a8>)
 800ab44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ab48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	465b      	mov	r3, fp
 800ab50:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ab54:	f7f5 fd28 	bl	80005a8 <__aeabi_dmul>
 800ab58:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <_strtod_l+0x5ac>)
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	400b      	ands	r3, r1
 800ab5e:	492a      	ldr	r1, [pc, #168]	; (800ac08 <_strtod_l+0x5b0>)
 800ab60:	428b      	cmp	r3, r1
 800ab62:	4682      	mov	sl, r0
 800ab64:	d8bc      	bhi.n	800aae0 <_strtod_l+0x488>
 800ab66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab6a:	428b      	cmp	r3, r1
 800ab6c:	bf86      	itte	hi
 800ab6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ac0c <_strtod_l+0x5b4>
 800ab72:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	e084      	b.n	800ac8a <_strtod_l+0x632>
 800ab80:	f018 0f01 	tst.w	r8, #1
 800ab84:	d005      	beq.n	800ab92 <_strtod_l+0x53a>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fd0c 	bl	80005a8 <__aeabi_dmul>
 800ab90:	2301      	movs	r3, #1
 800ab92:	9a04      	ldr	r2, [sp, #16]
 800ab94:	3208      	adds	r2, #8
 800ab96:	f109 0901 	add.w	r9, r9, #1
 800ab9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab9e:	9204      	str	r2, [sp, #16]
 800aba0:	e7c9      	b.n	800ab36 <_strtod_l+0x4de>
 800aba2:	d0ea      	beq.n	800ab7a <_strtod_l+0x522>
 800aba4:	f1c8 0800 	rsb	r8, r8, #0
 800aba8:	f018 020f 	ands.w	r2, r8, #15
 800abac:	d00a      	beq.n	800abc4 <_strtod_l+0x56c>
 800abae:	4b13      	ldr	r3, [pc, #76]	; (800abfc <_strtod_l+0x5a4>)
 800abb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb4:	4650      	mov	r0, sl
 800abb6:	4659      	mov	r1, fp
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f7f5 fe1e 	bl	80007fc <__aeabi_ddiv>
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800abc8:	d0d7      	beq.n	800ab7a <_strtod_l+0x522>
 800abca:	f1b8 0f1f 	cmp.w	r8, #31
 800abce:	dd1f      	ble.n	800ac10 <_strtod_l+0x5b8>
 800abd0:	2500      	movs	r5, #0
 800abd2:	462e      	mov	r6, r5
 800abd4:	9507      	str	r5, [sp, #28]
 800abd6:	9505      	str	r5, [sp, #20]
 800abd8:	2322      	movs	r3, #34	; 0x22
 800abda:	f04f 0a00 	mov.w	sl, #0
 800abde:	f04f 0b00 	mov.w	fp, #0
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	e786      	b.n	800aaf4 <_strtod_l+0x49c>
 800abe6:	bf00      	nop
 800abe8:	0800e501 	.word	0x0800e501
 800abec:	0800e544 	.word	0x0800e544
 800abf0:	0800e4f9 	.word	0x0800e4f9
 800abf4:	0800e684 	.word	0x0800e684
 800abf8:	0800e998 	.word	0x0800e998
 800abfc:	0800e878 	.word	0x0800e878
 800ac00:	0800e850 	.word	0x0800e850
 800ac04:	7ff00000 	.word	0x7ff00000
 800ac08:	7ca00000 	.word	0x7ca00000
 800ac0c:	7fefffff 	.word	0x7fefffff
 800ac10:	f018 0310 	ands.w	r3, r8, #16
 800ac14:	bf18      	it	ne
 800ac16:	236a      	movne	r3, #106	; 0x6a
 800ac18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800afc8 <_strtod_l+0x970>
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4650      	mov	r0, sl
 800ac20:	4659      	mov	r1, fp
 800ac22:	2300      	movs	r3, #0
 800ac24:	f018 0f01 	tst.w	r8, #1
 800ac28:	d004      	beq.n	800ac34 <_strtod_l+0x5dc>
 800ac2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac2e:	f7f5 fcbb 	bl	80005a8 <__aeabi_dmul>
 800ac32:	2301      	movs	r3, #1
 800ac34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ac38:	f109 0908 	add.w	r9, r9, #8
 800ac3c:	d1f2      	bne.n	800ac24 <_strtod_l+0x5cc>
 800ac3e:	b10b      	cbz	r3, 800ac44 <_strtod_l+0x5ec>
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	9b04      	ldr	r3, [sp, #16]
 800ac46:	b1c3      	cbz	r3, 800ac7a <_strtod_l+0x622>
 800ac48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	4659      	mov	r1, fp
 800ac54:	dd11      	ble.n	800ac7a <_strtod_l+0x622>
 800ac56:	2b1f      	cmp	r3, #31
 800ac58:	f340 8124 	ble.w	800aea4 <_strtod_l+0x84c>
 800ac5c:	2b34      	cmp	r3, #52	; 0x34
 800ac5e:	bfde      	ittt	le
 800ac60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ac64:	f04f 33ff 	movle.w	r3, #4294967295
 800ac68:	fa03 f202 	lslle.w	r2, r3, r2
 800ac6c:	f04f 0a00 	mov.w	sl, #0
 800ac70:	bfcc      	ite	gt
 800ac72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ac76:	ea02 0b01 	andle.w	fp, r2, r1
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4659      	mov	r1, fp
 800ac82:	f7f5 fef9 	bl	8000a78 <__aeabi_dcmpeq>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d1a2      	bne.n	800abd0 <_strtod_l+0x578>
 800ac8a:	9b07      	ldr	r3, [sp, #28]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	9908      	ldr	r1, [sp, #32]
 800ac90:	462b      	mov	r3, r5
 800ac92:	463a      	mov	r2, r7
 800ac94:	4620      	mov	r0, r4
 800ac96:	f002 f901 	bl	800ce9c <__s2b>
 800ac9a:	9007      	str	r0, [sp, #28]
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f43f af1f 	beq.w	800aae0 <_strtod_l+0x488>
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	1b9e      	subs	r6, r3, r6
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bfb4      	ite	lt
 800acac:	4633      	movlt	r3, r6
 800acae:	2300      	movge	r3, #0
 800acb0:	930c      	str	r3, [sp, #48]	; 0x30
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	2500      	movs	r5, #0
 800acb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800acba:	9312      	str	r3, [sp, #72]	; 0x48
 800acbc:	462e      	mov	r6, r5
 800acbe:	9b07      	ldr	r3, [sp, #28]
 800acc0:	4620      	mov	r0, r4
 800acc2:	6859      	ldr	r1, [r3, #4]
 800acc4:	f002 f842 	bl	800cd4c <_Balloc>
 800acc8:	9005      	str	r0, [sp, #20]
 800acca:	2800      	cmp	r0, #0
 800accc:	f43f af0c 	beq.w	800aae8 <_strtod_l+0x490>
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	3202      	adds	r2, #2
 800acd6:	f103 010c 	add.w	r1, r3, #12
 800acda:	0092      	lsls	r2, r2, #2
 800acdc:	300c      	adds	r0, #12
 800acde:	f7fe fc07 	bl	80094f0 <memcpy>
 800ace2:	ec4b ab10 	vmov	d0, sl, fp
 800ace6:	aa1a      	add	r2, sp, #104	; 0x68
 800ace8:	a919      	add	r1, sp, #100	; 0x64
 800acea:	4620      	mov	r0, r4
 800acec:	f002 fc1c 	bl	800d528 <__d2b>
 800acf0:	ec4b ab18 	vmov	d8, sl, fp
 800acf4:	9018      	str	r0, [sp, #96]	; 0x60
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f43f aef6 	beq.w	800aae8 <_strtod_l+0x490>
 800acfc:	2101      	movs	r1, #1
 800acfe:	4620      	mov	r0, r4
 800ad00:	f002 f966 	bl	800cfd0 <__i2b>
 800ad04:	4606      	mov	r6, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f aeee 	beq.w	800aae8 <_strtod_l+0x490>
 800ad0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad0e:	9904      	ldr	r1, [sp, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfab      	itete	ge
 800ad14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ad16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ad18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ad1e:	bfac      	ite	ge
 800ad20:	eb03 0902 	addge.w	r9, r3, r2
 800ad24:	1ad7      	sublt	r7, r2, r3
 800ad26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad28:	eba3 0801 	sub.w	r8, r3, r1
 800ad2c:	4490      	add	r8, r2
 800ad2e:	4ba1      	ldr	r3, [pc, #644]	; (800afb4 <_strtod_l+0x95c>)
 800ad30:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad34:	4598      	cmp	r8, r3
 800ad36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad3a:	f280 80c7 	bge.w	800aecc <_strtod_l+0x874>
 800ad3e:	eba3 0308 	sub.w	r3, r3, r8
 800ad42:	2b1f      	cmp	r3, #31
 800ad44:	eba2 0203 	sub.w	r2, r2, r3
 800ad48:	f04f 0101 	mov.w	r1, #1
 800ad4c:	f300 80b1 	bgt.w	800aeb2 <_strtod_l+0x85a>
 800ad50:	fa01 f303 	lsl.w	r3, r1, r3
 800ad54:	930d      	str	r3, [sp, #52]	; 0x34
 800ad56:	2300      	movs	r3, #0
 800ad58:	9308      	str	r3, [sp, #32]
 800ad5a:	eb09 0802 	add.w	r8, r9, r2
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	45c1      	cmp	r9, r8
 800ad62:	4417      	add	r7, r2
 800ad64:	441f      	add	r7, r3
 800ad66:	464b      	mov	r3, r9
 800ad68:	bfa8      	it	ge
 800ad6a:	4643      	movge	r3, r8
 800ad6c:	42bb      	cmp	r3, r7
 800ad6e:	bfa8      	it	ge
 800ad70:	463b      	movge	r3, r7
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfc2      	ittt	gt
 800ad76:	eba8 0803 	subgt.w	r8, r8, r3
 800ad7a:	1aff      	subgt	r7, r7, r3
 800ad7c:	eba9 0903 	subgt.w	r9, r9, r3
 800ad80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dd17      	ble.n	800adb6 <_strtod_l+0x75e>
 800ad86:	4631      	mov	r1, r6
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f002 f9e0 	bl	800d150 <__pow5mult>
 800ad90:	4606      	mov	r6, r0
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f43f aea8 	beq.w	800aae8 <_strtod_l+0x490>
 800ad98:	4601      	mov	r1, r0
 800ad9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f002 f92d 	bl	800cffc <__multiply>
 800ada2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f ae9f 	beq.w	800aae8 <_strtod_l+0x490>
 800adaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adac:	4620      	mov	r0, r4
 800adae:	f002 f80d 	bl	800cdcc <_Bfree>
 800adb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb4:	9318      	str	r3, [sp, #96]	; 0x60
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	f300 808c 	bgt.w	800aed6 <_strtod_l+0x87e>
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd08      	ble.n	800add6 <_strtod_l+0x77e>
 800adc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adc6:	9905      	ldr	r1, [sp, #20]
 800adc8:	4620      	mov	r0, r4
 800adca:	f002 f9c1 	bl	800d150 <__pow5mult>
 800adce:	9005      	str	r0, [sp, #20]
 800add0:	2800      	cmp	r0, #0
 800add2:	f43f ae89 	beq.w	800aae8 <_strtod_l+0x490>
 800add6:	2f00      	cmp	r7, #0
 800add8:	dd08      	ble.n	800adec <_strtod_l+0x794>
 800adda:	9905      	ldr	r1, [sp, #20]
 800addc:	463a      	mov	r2, r7
 800adde:	4620      	mov	r0, r4
 800ade0:	f002 fa10 	bl	800d204 <__lshift>
 800ade4:	9005      	str	r0, [sp, #20]
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f ae7e 	beq.w	800aae8 <_strtod_l+0x490>
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	dd08      	ble.n	800ae04 <_strtod_l+0x7ac>
 800adf2:	4631      	mov	r1, r6
 800adf4:	464a      	mov	r2, r9
 800adf6:	4620      	mov	r0, r4
 800adf8:	f002 fa04 	bl	800d204 <__lshift>
 800adfc:	4606      	mov	r6, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f ae72 	beq.w	800aae8 <_strtod_l+0x490>
 800ae04:	9a05      	ldr	r2, [sp, #20]
 800ae06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f002 fa87 	bl	800d31c <__mdiff>
 800ae0e:	4605      	mov	r5, r0
 800ae10:	2800      	cmp	r0, #0
 800ae12:	f43f ae69 	beq.w	800aae8 <_strtod_l+0x490>
 800ae16:	68c3      	ldr	r3, [r0, #12]
 800ae18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60c3      	str	r3, [r0, #12]
 800ae1e:	4631      	mov	r1, r6
 800ae20:	f002 fa60 	bl	800d2e4 <__mcmp>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	da60      	bge.n	800aeea <_strtod_l+0x892>
 800ae28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae2e:	f040 8082 	bne.w	800af36 <_strtod_l+0x8de>
 800ae32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d17d      	bne.n	800af36 <_strtod_l+0x8de>
 800ae3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae3e:	0d1b      	lsrs	r3, r3, #20
 800ae40:	051b      	lsls	r3, r3, #20
 800ae42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae46:	d976      	bls.n	800af36 <_strtod_l+0x8de>
 800ae48:	696b      	ldr	r3, [r5, #20]
 800ae4a:	b913      	cbnz	r3, 800ae52 <_strtod_l+0x7fa>
 800ae4c:	692b      	ldr	r3, [r5, #16]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	dd71      	ble.n	800af36 <_strtod_l+0x8de>
 800ae52:	4629      	mov	r1, r5
 800ae54:	2201      	movs	r2, #1
 800ae56:	4620      	mov	r0, r4
 800ae58:	f002 f9d4 	bl	800d204 <__lshift>
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4605      	mov	r5, r0
 800ae60:	f002 fa40 	bl	800d2e4 <__mcmp>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	dd66      	ble.n	800af36 <_strtod_l+0x8de>
 800ae68:	9904      	ldr	r1, [sp, #16]
 800ae6a:	4a53      	ldr	r2, [pc, #332]	; (800afb8 <_strtod_l+0x960>)
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	f000 8081 	beq.w	800af76 <_strtod_l+0x91e>
 800ae74:	ea02 010b 	and.w	r1, r2, fp
 800ae78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae7c:	dc7b      	bgt.n	800af76 <_strtod_l+0x91e>
 800ae7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae82:	f77f aea9 	ble.w	800abd8 <_strtod_l+0x580>
 800ae86:	4b4d      	ldr	r3, [pc, #308]	; (800afbc <_strtod_l+0x964>)
 800ae88:	4650      	mov	r0, sl
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f7f5 fb8b 	bl	80005a8 <__aeabi_dmul>
 800ae92:	460b      	mov	r3, r1
 800ae94:	4303      	orrs	r3, r0
 800ae96:	bf08      	it	eq
 800ae98:	2322      	moveq	r3, #34	; 0x22
 800ae9a:	4682      	mov	sl, r0
 800ae9c:	468b      	mov	fp, r1
 800ae9e:	bf08      	it	eq
 800aea0:	6023      	streq	r3, [r4, #0]
 800aea2:	e62b      	b.n	800aafc <_strtod_l+0x4a4>
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeac:	ea03 0a0a 	and.w	sl, r3, sl
 800aeb0:	e6e3      	b.n	800ac7a <_strtod_l+0x622>
 800aeb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aeb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aeba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aec2:	fa01 f308 	lsl.w	r3, r1, r8
 800aec6:	9308      	str	r3, [sp, #32]
 800aec8:	910d      	str	r1, [sp, #52]	; 0x34
 800aeca:	e746      	b.n	800ad5a <_strtod_l+0x702>
 800aecc:	2300      	movs	r3, #0
 800aece:	9308      	str	r3, [sp, #32]
 800aed0:	2301      	movs	r3, #1
 800aed2:	930d      	str	r3, [sp, #52]	; 0x34
 800aed4:	e741      	b.n	800ad5a <_strtod_l+0x702>
 800aed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aed8:	4642      	mov	r2, r8
 800aeda:	4620      	mov	r0, r4
 800aedc:	f002 f992 	bl	800d204 <__lshift>
 800aee0:	9018      	str	r0, [sp, #96]	; 0x60
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f47f af6b 	bne.w	800adbe <_strtod_l+0x766>
 800aee8:	e5fe      	b.n	800aae8 <_strtod_l+0x490>
 800aeea:	465f      	mov	r7, fp
 800aeec:	d16e      	bne.n	800afcc <_strtod_l+0x974>
 800aeee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef4:	b342      	cbz	r2, 800af48 <_strtod_l+0x8f0>
 800aef6:	4a32      	ldr	r2, [pc, #200]	; (800afc0 <_strtod_l+0x968>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d128      	bne.n	800af4e <_strtod_l+0x8f6>
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4651      	mov	r1, sl
 800af00:	b1eb      	cbz	r3, 800af3e <_strtod_l+0x8e6>
 800af02:	4b2d      	ldr	r3, [pc, #180]	; (800afb8 <_strtod_l+0x960>)
 800af04:	403b      	ands	r3, r7
 800af06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	d819      	bhi.n	800af44 <_strtod_l+0x8ec>
 800af10:	0d1b      	lsrs	r3, r3, #20
 800af12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af16:	fa02 f303 	lsl.w	r3, r2, r3
 800af1a:	4299      	cmp	r1, r3
 800af1c:	d117      	bne.n	800af4e <_strtod_l+0x8f6>
 800af1e:	4b29      	ldr	r3, [pc, #164]	; (800afc4 <_strtod_l+0x96c>)
 800af20:	429f      	cmp	r7, r3
 800af22:	d102      	bne.n	800af2a <_strtod_l+0x8d2>
 800af24:	3101      	adds	r1, #1
 800af26:	f43f addf 	beq.w	800aae8 <_strtod_l+0x490>
 800af2a:	4b23      	ldr	r3, [pc, #140]	; (800afb8 <_strtod_l+0x960>)
 800af2c:	403b      	ands	r3, r7
 800af2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800af32:	f04f 0a00 	mov.w	sl, #0
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1a4      	bne.n	800ae86 <_strtod_l+0x82e>
 800af3c:	e5de      	b.n	800aafc <_strtod_l+0x4a4>
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
 800af42:	e7ea      	b.n	800af1a <_strtod_l+0x8c2>
 800af44:	4613      	mov	r3, r2
 800af46:	e7e8      	b.n	800af1a <_strtod_l+0x8c2>
 800af48:	ea53 030a 	orrs.w	r3, r3, sl
 800af4c:	d08c      	beq.n	800ae68 <_strtod_l+0x810>
 800af4e:	9b08      	ldr	r3, [sp, #32]
 800af50:	b1db      	cbz	r3, 800af8a <_strtod_l+0x932>
 800af52:	423b      	tst	r3, r7
 800af54:	d0ef      	beq.n	800af36 <_strtod_l+0x8de>
 800af56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	4650      	mov	r0, sl
 800af5c:	4659      	mov	r1, fp
 800af5e:	b1c3      	cbz	r3, 800af92 <_strtod_l+0x93a>
 800af60:	f7ff fb5b 	bl	800a61a <sulp>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	ec51 0b18 	vmov	r0, r1, d8
 800af6c:	f7f5 f966 	bl	800023c <__adddf3>
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	e7df      	b.n	800af36 <_strtod_l+0x8de>
 800af76:	4013      	ands	r3, r2
 800af78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af84:	f04f 3aff 	mov.w	sl, #4294967295
 800af88:	e7d5      	b.n	800af36 <_strtod_l+0x8de>
 800af8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8c:	ea13 0f0a 	tst.w	r3, sl
 800af90:	e7e0      	b.n	800af54 <_strtod_l+0x8fc>
 800af92:	f7ff fb42 	bl	800a61a <sulp>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	ec51 0b18 	vmov	r0, r1, d8
 800af9e:	f7f5 f94b 	bl	8000238 <__aeabi_dsub>
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4682      	mov	sl, r0
 800afa8:	468b      	mov	fp, r1
 800afaa:	f7f5 fd65 	bl	8000a78 <__aeabi_dcmpeq>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d0c1      	beq.n	800af36 <_strtod_l+0x8de>
 800afb2:	e611      	b.n	800abd8 <_strtod_l+0x580>
 800afb4:	fffffc02 	.word	0xfffffc02
 800afb8:	7ff00000 	.word	0x7ff00000
 800afbc:	39500000 	.word	0x39500000
 800afc0:	000fffff 	.word	0x000fffff
 800afc4:	7fefffff 	.word	0x7fefffff
 800afc8:	0800e558 	.word	0x0800e558
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	f002 fb06 	bl	800d5e0 <__ratio>
 800afd4:	ec59 8b10 	vmov	r8, r9, d0
 800afd8:	ee10 0a10 	vmov	r0, s0
 800afdc:	2200      	movs	r2, #0
 800afde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afe2:	4649      	mov	r1, r9
 800afe4:	f7f5 fd5c 	bl	8000aa0 <__aeabi_dcmple>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d07a      	beq.n	800b0e2 <_strtod_l+0xa8a>
 800afec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d04a      	beq.n	800b088 <_strtod_l+0xa30>
 800aff2:	4b95      	ldr	r3, [pc, #596]	; (800b248 <_strtod_l+0xbf0>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800affa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b248 <_strtod_l+0xbf0>
 800affe:	f04f 0800 	mov.w	r8, #0
 800b002:	4b92      	ldr	r3, [pc, #584]	; (800b24c <_strtod_l+0xbf4>)
 800b004:	403b      	ands	r3, r7
 800b006:	930d      	str	r3, [sp, #52]	; 0x34
 800b008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b00a:	4b91      	ldr	r3, [pc, #580]	; (800b250 <_strtod_l+0xbf8>)
 800b00c:	429a      	cmp	r2, r3
 800b00e:	f040 80b0 	bne.w	800b172 <_strtod_l+0xb1a>
 800b012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b016:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b01a:	ec4b ab10 	vmov	d0, sl, fp
 800b01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b022:	f002 fa05 	bl	800d430 <__ulp>
 800b026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b02a:	ec53 2b10 	vmov	r2, r3, d0
 800b02e:	f7f5 fabb 	bl	80005a8 <__aeabi_dmul>
 800b032:	4652      	mov	r2, sl
 800b034:	465b      	mov	r3, fp
 800b036:	f7f5 f901 	bl	800023c <__adddf3>
 800b03a:	460b      	mov	r3, r1
 800b03c:	4983      	ldr	r1, [pc, #524]	; (800b24c <_strtod_l+0xbf4>)
 800b03e:	4a85      	ldr	r2, [pc, #532]	; (800b254 <_strtod_l+0xbfc>)
 800b040:	4019      	ands	r1, r3
 800b042:	4291      	cmp	r1, r2
 800b044:	4682      	mov	sl, r0
 800b046:	d960      	bls.n	800b10a <_strtod_l+0xab2>
 800b048:	ee18 3a90 	vmov	r3, s17
 800b04c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b050:	4293      	cmp	r3, r2
 800b052:	d104      	bne.n	800b05e <_strtod_l+0xa06>
 800b054:	ee18 3a10 	vmov	r3, s16
 800b058:	3301      	adds	r3, #1
 800b05a:	f43f ad45 	beq.w	800aae8 <_strtod_l+0x490>
 800b05e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b260 <_strtod_l+0xc08>
 800b062:	f04f 3aff 	mov.w	sl, #4294967295
 800b066:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b068:	4620      	mov	r0, r4
 800b06a:	f001 feaf 	bl	800cdcc <_Bfree>
 800b06e:	9905      	ldr	r1, [sp, #20]
 800b070:	4620      	mov	r0, r4
 800b072:	f001 feab 	bl	800cdcc <_Bfree>
 800b076:	4631      	mov	r1, r6
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 fea7 	bl	800cdcc <_Bfree>
 800b07e:	4629      	mov	r1, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f001 fea3 	bl	800cdcc <_Bfree>
 800b086:	e61a      	b.n	800acbe <_strtod_l+0x666>
 800b088:	f1ba 0f00 	cmp.w	sl, #0
 800b08c:	d11b      	bne.n	800b0c6 <_strtod_l+0xa6e>
 800b08e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b092:	b9f3      	cbnz	r3, 800b0d2 <_strtod_l+0xa7a>
 800b094:	4b6c      	ldr	r3, [pc, #432]	; (800b248 <_strtod_l+0xbf0>)
 800b096:	2200      	movs	r2, #0
 800b098:	4640      	mov	r0, r8
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7f5 fcf6 	bl	8000a8c <__aeabi_dcmplt>
 800b0a0:	b9d0      	cbnz	r0, 800b0d8 <_strtod_l+0xa80>
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4b6c      	ldr	r3, [pc, #432]	; (800b258 <_strtod_l+0xc00>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f7f5 fa7d 	bl	80005a8 <__aeabi_dmul>
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4689      	mov	r9, r1
 800b0b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b0ba:	9315      	str	r3, [sp, #84]	; 0x54
 800b0bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0c4:	e79d      	b.n	800b002 <_strtod_l+0x9aa>
 800b0c6:	f1ba 0f01 	cmp.w	sl, #1
 800b0ca:	d102      	bne.n	800b0d2 <_strtod_l+0xa7a>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	f43f ad83 	beq.w	800abd8 <_strtod_l+0x580>
 800b0d2:	4b62      	ldr	r3, [pc, #392]	; (800b25c <_strtod_l+0xc04>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	e78e      	b.n	800aff6 <_strtod_l+0x99e>
 800b0d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b258 <_strtod_l+0xc00>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	e7e7      	b.n	800b0b2 <_strtod_l+0xa5a>
 800b0e2:	4b5d      	ldr	r3, [pc, #372]	; (800b258 <_strtod_l+0xc00>)
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f7f5 fa5d 	bl	80005a8 <__aeabi_dmul>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4689      	mov	r9, r1
 800b0f4:	b933      	cbnz	r3, 800b104 <_strtod_l+0xaac>
 800b0f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0fa:	900e      	str	r0, [sp, #56]	; 0x38
 800b0fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b102:	e7dd      	b.n	800b0c0 <_strtod_l+0xa68>
 800b104:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b108:	e7f9      	b.n	800b0fe <_strtod_l+0xaa6>
 800b10a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1a8      	bne.n	800b066 <_strtod_l+0xa0e>
 800b114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b11a:	0d1b      	lsrs	r3, r3, #20
 800b11c:	051b      	lsls	r3, r3, #20
 800b11e:	429a      	cmp	r2, r3
 800b120:	d1a1      	bne.n	800b066 <_strtod_l+0xa0e>
 800b122:	4640      	mov	r0, r8
 800b124:	4649      	mov	r1, r9
 800b126:	f7f5 fd9f 	bl	8000c68 <__aeabi_d2lz>
 800b12a:	f7f5 fa0f 	bl	800054c <__aeabi_l2d>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 f87f 	bl	8000238 <__aeabi_dsub>
 800b13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b140:	ea43 030a 	orr.w	r3, r3, sl
 800b144:	4313      	orrs	r3, r2
 800b146:	4680      	mov	r8, r0
 800b148:	4689      	mov	r9, r1
 800b14a:	d055      	beq.n	800b1f8 <_strtod_l+0xba0>
 800b14c:	a336      	add	r3, pc, #216	; (adr r3, 800b228 <_strtod_l+0xbd0>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f7f5 fc9b 	bl	8000a8c <__aeabi_dcmplt>
 800b156:	2800      	cmp	r0, #0
 800b158:	f47f acd0 	bne.w	800aafc <_strtod_l+0x4a4>
 800b15c:	a334      	add	r3, pc, #208	; (adr r3, 800b230 <_strtod_l+0xbd8>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	4640      	mov	r0, r8
 800b164:	4649      	mov	r1, r9
 800b166:	f7f5 fcaf 	bl	8000ac8 <__aeabi_dcmpgt>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f43f af7b 	beq.w	800b066 <_strtod_l+0xa0e>
 800b170:	e4c4      	b.n	800aafc <_strtod_l+0x4a4>
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	b333      	cbz	r3, 800b1c4 <_strtod_l+0xb6c>
 800b176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b178:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b17c:	d822      	bhi.n	800b1c4 <_strtod_l+0xb6c>
 800b17e:	a32e      	add	r3, pc, #184	; (adr r3, 800b238 <_strtod_l+0xbe0>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 fc8a 	bl	8000aa0 <__aeabi_dcmple>
 800b18c:	b1a0      	cbz	r0, 800b1b8 <_strtod_l+0xb60>
 800b18e:	4649      	mov	r1, r9
 800b190:	4640      	mov	r0, r8
 800b192:	f7f5 fce1 	bl	8000b58 <__aeabi_d2uiz>
 800b196:	2801      	cmp	r0, #1
 800b198:	bf38      	it	cc
 800b19a:	2001      	movcc	r0, #1
 800b19c:	f7f5 f98a 	bl	80004b4 <__aeabi_ui2d>
 800b1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	4689      	mov	r9, r1
 800b1a6:	bb23      	cbnz	r3, 800b1f2 <_strtod_l+0xb9a>
 800b1a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ac:	9010      	str	r0, [sp, #64]	; 0x40
 800b1ae:	9311      	str	r3, [sp, #68]	; 0x44
 800b1b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1cc:	eef0 0a68 	vmov.f32	s1, s17
 800b1d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1d4:	f002 f92c 	bl	800d430 <__ulp>
 800b1d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1dc:	ec53 2b10 	vmov	r2, r3, d0
 800b1e0:	f7f5 f9e2 	bl	80005a8 <__aeabi_dmul>
 800b1e4:	ec53 2b18 	vmov	r2, r3, d8
 800b1e8:	f7f5 f828 	bl	800023c <__adddf3>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	e78d      	b.n	800b10e <_strtod_l+0xab6>
 800b1f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b1f6:	e7db      	b.n	800b1b0 <_strtod_l+0xb58>
 800b1f8:	a311      	add	r3, pc, #68	; (adr r3, 800b240 <_strtod_l+0xbe8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 fc45 	bl	8000a8c <__aeabi_dcmplt>
 800b202:	e7b2      	b.n	800b16a <_strtod_l+0xb12>
 800b204:	2300      	movs	r3, #0
 800b206:	930a      	str	r3, [sp, #40]	; 0x28
 800b208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b20a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	f7ff ba6b 	b.w	800a6e8 <_strtod_l+0x90>
 800b212:	2a65      	cmp	r2, #101	; 0x65
 800b214:	f43f ab5f 	beq.w	800a8d6 <_strtod_l+0x27e>
 800b218:	2a45      	cmp	r2, #69	; 0x45
 800b21a:	f43f ab5c 	beq.w	800a8d6 <_strtod_l+0x27e>
 800b21e:	2301      	movs	r3, #1
 800b220:	f7ff bb94 	b.w	800a94c <_strtod_l+0x2f4>
 800b224:	f3af 8000 	nop.w
 800b228:	94a03595 	.word	0x94a03595
 800b22c:	3fdfffff 	.word	0x3fdfffff
 800b230:	35afe535 	.word	0x35afe535
 800b234:	3fe00000 	.word	0x3fe00000
 800b238:	ffc00000 	.word	0xffc00000
 800b23c:	41dfffff 	.word	0x41dfffff
 800b240:	94a03595 	.word	0x94a03595
 800b244:	3fcfffff 	.word	0x3fcfffff
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	7ff00000 	.word	0x7ff00000
 800b250:	7fe00000 	.word	0x7fe00000
 800b254:	7c9fffff 	.word	0x7c9fffff
 800b258:	3fe00000 	.word	0x3fe00000
 800b25c:	bff00000 	.word	0xbff00000
 800b260:	7fefffff 	.word	0x7fefffff

0800b264 <_strtod_r>:
 800b264:	4b01      	ldr	r3, [pc, #4]	; (800b26c <_strtod_r+0x8>)
 800b266:	f7ff b9f7 	b.w	800a658 <_strtod_l>
 800b26a:	bf00      	nop
 800b26c:	20000084 	.word	0x20000084

0800b270 <_strtol_l.constprop.0>:
 800b270:	2b01      	cmp	r3, #1
 800b272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b276:	d001      	beq.n	800b27c <_strtol_l.constprop.0+0xc>
 800b278:	2b24      	cmp	r3, #36	; 0x24
 800b27a:	d906      	bls.n	800b28a <_strtol_l.constprop.0+0x1a>
 800b27c:	f7fe f8fe 	bl	800947c <__errno>
 800b280:	2316      	movs	r3, #22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2000      	movs	r0, #0
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b370 <_strtol_l.constprop.0+0x100>
 800b28e:	460d      	mov	r5, r1
 800b290:	462e      	mov	r6, r5
 800b292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b296:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b29a:	f017 0708 	ands.w	r7, r7, #8
 800b29e:	d1f7      	bne.n	800b290 <_strtol_l.constprop.0+0x20>
 800b2a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b2a2:	d132      	bne.n	800b30a <_strtol_l.constprop.0+0x9a>
 800b2a4:	782c      	ldrb	r4, [r5, #0]
 800b2a6:	2701      	movs	r7, #1
 800b2a8:	1cb5      	adds	r5, r6, #2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d05b      	beq.n	800b366 <_strtol_l.constprop.0+0xf6>
 800b2ae:	2b10      	cmp	r3, #16
 800b2b0:	d109      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b2b2:	2c30      	cmp	r4, #48	; 0x30
 800b2b4:	d107      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b2b6:	782c      	ldrb	r4, [r5, #0]
 800b2b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2bc:	2c58      	cmp	r4, #88	; 0x58
 800b2be:	d14d      	bne.n	800b35c <_strtol_l.constprop.0+0xec>
 800b2c0:	786c      	ldrb	r4, [r5, #1]
 800b2c2:	2310      	movs	r3, #16
 800b2c4:	3502      	adds	r5, #2
 800b2c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2ce:	f04f 0c00 	mov.w	ip, #0
 800b2d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2d6:	4666      	mov	r6, ip
 800b2d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b2e0:	f1be 0f09 	cmp.w	lr, #9
 800b2e4:	d816      	bhi.n	800b314 <_strtol_l.constprop.0+0xa4>
 800b2e6:	4674      	mov	r4, lr
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	dd24      	ble.n	800b336 <_strtol_l.constprop.0+0xc6>
 800b2ec:	f1bc 0f00 	cmp.w	ip, #0
 800b2f0:	db1e      	blt.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2f2:	45b1      	cmp	r9, r6
 800b2f4:	d31c      	bcc.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2f6:	d101      	bne.n	800b2fc <_strtol_l.constprop.0+0x8c>
 800b2f8:	45a2      	cmp	sl, r4
 800b2fa:	db19      	blt.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b300:	f04f 0c01 	mov.w	ip, #1
 800b304:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b308:	e7e8      	b.n	800b2dc <_strtol_l.constprop.0+0x6c>
 800b30a:	2c2b      	cmp	r4, #43	; 0x2b
 800b30c:	bf04      	itt	eq
 800b30e:	782c      	ldrbeq	r4, [r5, #0]
 800b310:	1cb5      	addeq	r5, r6, #2
 800b312:	e7ca      	b.n	800b2aa <_strtol_l.constprop.0+0x3a>
 800b314:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b318:	f1be 0f19 	cmp.w	lr, #25
 800b31c:	d801      	bhi.n	800b322 <_strtol_l.constprop.0+0xb2>
 800b31e:	3c37      	subs	r4, #55	; 0x37
 800b320:	e7e2      	b.n	800b2e8 <_strtol_l.constprop.0+0x78>
 800b322:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b326:	f1be 0f19 	cmp.w	lr, #25
 800b32a:	d804      	bhi.n	800b336 <_strtol_l.constprop.0+0xc6>
 800b32c:	3c57      	subs	r4, #87	; 0x57
 800b32e:	e7db      	b.n	800b2e8 <_strtol_l.constprop.0+0x78>
 800b330:	f04f 3cff 	mov.w	ip, #4294967295
 800b334:	e7e6      	b.n	800b304 <_strtol_l.constprop.0+0x94>
 800b336:	f1bc 0f00 	cmp.w	ip, #0
 800b33a:	da05      	bge.n	800b348 <_strtol_l.constprop.0+0xd8>
 800b33c:	2322      	movs	r3, #34	; 0x22
 800b33e:	6003      	str	r3, [r0, #0]
 800b340:	4646      	mov	r6, r8
 800b342:	b942      	cbnz	r2, 800b356 <_strtol_l.constprop.0+0xe6>
 800b344:	4630      	mov	r0, r6
 800b346:	e79e      	b.n	800b286 <_strtol_l.constprop.0+0x16>
 800b348:	b107      	cbz	r7, 800b34c <_strtol_l.constprop.0+0xdc>
 800b34a:	4276      	negs	r6, r6
 800b34c:	2a00      	cmp	r2, #0
 800b34e:	d0f9      	beq.n	800b344 <_strtol_l.constprop.0+0xd4>
 800b350:	f1bc 0f00 	cmp.w	ip, #0
 800b354:	d000      	beq.n	800b358 <_strtol_l.constprop.0+0xe8>
 800b356:	1e69      	subs	r1, r5, #1
 800b358:	6011      	str	r1, [r2, #0]
 800b35a:	e7f3      	b.n	800b344 <_strtol_l.constprop.0+0xd4>
 800b35c:	2430      	movs	r4, #48	; 0x30
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1b1      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b362:	2308      	movs	r3, #8
 800b364:	e7af      	b.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b366:	2c30      	cmp	r4, #48	; 0x30
 800b368:	d0a5      	beq.n	800b2b6 <_strtol_l.constprop.0+0x46>
 800b36a:	230a      	movs	r3, #10
 800b36c:	e7ab      	b.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b36e:	bf00      	nop
 800b370:	0800e581 	.word	0x0800e581

0800b374 <_strtol_r>:
 800b374:	f7ff bf7c 	b.w	800b270 <_strtol_l.constprop.0>

0800b378 <__swbuf_r>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	460e      	mov	r6, r1
 800b37c:	4614      	mov	r4, r2
 800b37e:	4605      	mov	r5, r0
 800b380:	b118      	cbz	r0, 800b38a <__swbuf_r+0x12>
 800b382:	6983      	ldr	r3, [r0, #24]
 800b384:	b90b      	cbnz	r3, 800b38a <__swbuf_r+0x12>
 800b386:	f001 f84b 	bl	800c420 <__sinit>
 800b38a:	4b21      	ldr	r3, [pc, #132]	; (800b410 <__swbuf_r+0x98>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d12b      	bne.n	800b3e8 <__swbuf_r+0x70>
 800b390:	686c      	ldr	r4, [r5, #4]
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	60a3      	str	r3, [r4, #8]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	071a      	lsls	r2, r3, #28
 800b39a:	d52f      	bpl.n	800b3fc <__swbuf_r+0x84>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	b36b      	cbz	r3, 800b3fc <__swbuf_r+0x84>
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1ac0      	subs	r0, r0, r3
 800b3a6:	6963      	ldr	r3, [r4, #20]
 800b3a8:	b2f6      	uxtb	r6, r6
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	dc04      	bgt.n	800b3ba <__swbuf_r+0x42>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 ffa0 	bl	800c2f8 <_fflush_r>
 800b3b8:	bb30      	cbnz	r0, 800b408 <__swbuf_r+0x90>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	701e      	strb	r6, [r3, #0]
 800b3c8:	6963      	ldr	r3, [r4, #20]
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	4283      	cmp	r3, r0
 800b3ce:	d004      	beq.n	800b3da <__swbuf_r+0x62>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	07db      	lsls	r3, r3, #31
 800b3d4:	d506      	bpl.n	800b3e4 <__swbuf_r+0x6c>
 800b3d6:	2e0a      	cmp	r6, #10
 800b3d8:	d104      	bne.n	800b3e4 <__swbuf_r+0x6c>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 ff8b 	bl	800c2f8 <_fflush_r>
 800b3e2:	b988      	cbnz	r0, 800b408 <__swbuf_r+0x90>
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <__swbuf_r+0x9c>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <__swbuf_r+0x7a>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7cf      	b.n	800b392 <__swbuf_r+0x1a>
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <__swbuf_r+0xa0>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7ca      	b.n	800b392 <__swbuf_r+0x1a>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 f80c 	bl	800b41c <__swsetup_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	d0cb      	beq.n	800b3a0 <__swbuf_r+0x28>
 800b408:	f04f 37ff 	mov.w	r7, #4294967295
 800b40c:	e7ea      	b.n	800b3e4 <__swbuf_r+0x6c>
 800b40e:	bf00      	nop
 800b410:	0800e734 	.word	0x0800e734
 800b414:	0800e754 	.word	0x0800e754
 800b418:	0800e714 	.word	0x0800e714

0800b41c <__swsetup_r>:
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <__swsetup_r+0xcc>)
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	681d      	ldr	r5, [r3, #0]
 800b422:	4606      	mov	r6, r0
 800b424:	460c      	mov	r4, r1
 800b426:	b125      	cbz	r5, 800b432 <__swsetup_r+0x16>
 800b428:	69ab      	ldr	r3, [r5, #24]
 800b42a:	b913      	cbnz	r3, 800b432 <__swsetup_r+0x16>
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 fff7 	bl	800c420 <__sinit>
 800b432:	4b2e      	ldr	r3, [pc, #184]	; (800b4ec <__swsetup_r+0xd0>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d10f      	bne.n	800b458 <__swsetup_r+0x3c>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b440:	0719      	lsls	r1, r3, #28
 800b442:	d42c      	bmi.n	800b49e <__swsetup_r+0x82>
 800b444:	06dd      	lsls	r5, r3, #27
 800b446:	d411      	bmi.n	800b46c <__swsetup_r+0x50>
 800b448:	2309      	movs	r3, #9
 800b44a:	6033      	str	r3, [r6, #0]
 800b44c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e03e      	b.n	800b4d6 <__swsetup_r+0xba>
 800b458:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <__swsetup_r+0xd4>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swsetup_r+0x46>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7eb      	b.n	800b43a <__swsetup_r+0x1e>
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <__swsetup_r+0xd8>)
 800b464:	429c      	cmp	r4, r3
 800b466:	bf08      	it	eq
 800b468:	68ec      	ldreq	r4, [r5, #12]
 800b46a:	e7e6      	b.n	800b43a <__swsetup_r+0x1e>
 800b46c:	0758      	lsls	r0, r3, #29
 800b46e:	d512      	bpl.n	800b496 <__swsetup_r+0x7a>
 800b470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b472:	b141      	cbz	r1, 800b486 <__swsetup_r+0x6a>
 800b474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__swsetup_r+0x66>
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7fe f84d 	bl	800951c <_free_r>
 800b482:	2300      	movs	r3, #0
 800b484:	6363      	str	r3, [r4, #52]	; 0x34
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	2300      	movs	r3, #0
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <__swsetup_r+0x9a>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ac:	d003      	beq.n	800b4b6 <__swsetup_r+0x9a>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f001 fbed 	bl	800cc90 <__smakebuf_r>
 800b4b6:	89a0      	ldrh	r0, [r4, #12]
 800b4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4bc:	f010 0301 	ands.w	r3, r0, #1
 800b4c0:	d00a      	beq.n	800b4d8 <__swsetup_r+0xbc>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	6963      	ldr	r3, [r4, #20]
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	61a3      	str	r3, [r4, #24]
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	b943      	cbnz	r3, 800b4e2 <__swsetup_r+0xc6>
 800b4d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4d4:	d1ba      	bne.n	800b44c <__swsetup_r+0x30>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	0781      	lsls	r1, r0, #30
 800b4da:	bf58      	it	pl
 800b4dc:	6963      	ldrpl	r3, [r4, #20]
 800b4de:	60a3      	str	r3, [r4, #8]
 800b4e0:	e7f4      	b.n	800b4cc <__swsetup_r+0xb0>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	e7f7      	b.n	800b4d6 <__swsetup_r+0xba>
 800b4e6:	bf00      	nop
 800b4e8:	2000001c 	.word	0x2000001c
 800b4ec:	0800e734 	.word	0x0800e734
 800b4f0:	0800e754 	.word	0x0800e754
 800b4f4:	0800e714 	.word	0x0800e714

0800b4f8 <quorem>:
 800b4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	6903      	ldr	r3, [r0, #16]
 800b4fe:	690c      	ldr	r4, [r1, #16]
 800b500:	42a3      	cmp	r3, r4
 800b502:	4607      	mov	r7, r0
 800b504:	f2c0 8081 	blt.w	800b60a <quorem+0x112>
 800b508:	3c01      	subs	r4, #1
 800b50a:	f101 0814 	add.w	r8, r1, #20
 800b50e:	f100 0514 	add.w	r5, r0, #20
 800b512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b516:	9301      	str	r3, [sp, #4]
 800b518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b51c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b520:	3301      	adds	r3, #1
 800b522:	429a      	cmp	r2, r3
 800b524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b52c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b530:	d331      	bcc.n	800b596 <quorem+0x9e>
 800b532:	f04f 0e00 	mov.w	lr, #0
 800b536:	4640      	mov	r0, r8
 800b538:	46ac      	mov	ip, r5
 800b53a:	46f2      	mov	sl, lr
 800b53c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b540:	b293      	uxth	r3, r2
 800b542:	fb06 e303 	mla	r3, r6, r3, lr
 800b546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	ebaa 0303 	sub.w	r3, sl, r3
 800b550:	f8dc a000 	ldr.w	sl, [ip]
 800b554:	0c12      	lsrs	r2, r2, #16
 800b556:	fa13 f38a 	uxtah	r3, r3, sl
 800b55a:	fb06 e202 	mla	r2, r6, r2, lr
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b566:	b292      	uxth	r2, r2
 800b568:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b56c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b570:	f8bd 3000 	ldrh.w	r3, [sp]
 800b574:	4581      	cmp	r9, r0
 800b576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b57a:	f84c 3b04 	str.w	r3, [ip], #4
 800b57e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b582:	d2db      	bcs.n	800b53c <quorem+0x44>
 800b584:	f855 300b 	ldr.w	r3, [r5, fp]
 800b588:	b92b      	cbnz	r3, 800b596 <quorem+0x9e>
 800b58a:	9b01      	ldr	r3, [sp, #4]
 800b58c:	3b04      	subs	r3, #4
 800b58e:	429d      	cmp	r5, r3
 800b590:	461a      	mov	r2, r3
 800b592:	d32e      	bcc.n	800b5f2 <quorem+0xfa>
 800b594:	613c      	str	r4, [r7, #16]
 800b596:	4638      	mov	r0, r7
 800b598:	f001 fea4 	bl	800d2e4 <__mcmp>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	db24      	blt.n	800b5ea <quorem+0xf2>
 800b5a0:	3601      	adds	r6, #1
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f04f 0c00 	mov.w	ip, #0
 800b5a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b5b0:	b293      	uxth	r3, r2
 800b5b2:	ebac 0303 	sub.w	r3, ip, r3
 800b5b6:	0c12      	lsrs	r2, r2, #16
 800b5b8:	fa13 f38e 	uxtah	r3, r3, lr
 800b5bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5ca:	45c1      	cmp	r9, r8
 800b5cc:	f840 3b04 	str.w	r3, [r0], #4
 800b5d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b5d4:	d2e8      	bcs.n	800b5a8 <quorem+0xb0>
 800b5d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5de:	b922      	cbnz	r2, 800b5ea <quorem+0xf2>
 800b5e0:	3b04      	subs	r3, #4
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	d30a      	bcc.n	800b5fe <quorem+0x106>
 800b5e8:	613c      	str	r4, [r7, #16]
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	b003      	add	sp, #12
 800b5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	3b04      	subs	r3, #4
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	d1cc      	bne.n	800b594 <quorem+0x9c>
 800b5fa:	3c01      	subs	r4, #1
 800b5fc:	e7c7      	b.n	800b58e <quorem+0x96>
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	3b04      	subs	r3, #4
 800b602:	2a00      	cmp	r2, #0
 800b604:	d1f0      	bne.n	800b5e8 <quorem+0xf0>
 800b606:	3c01      	subs	r4, #1
 800b608:	e7eb      	b.n	800b5e2 <quorem+0xea>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e7ee      	b.n	800b5ec <quorem+0xf4>
	...

0800b610 <_dtoa_r>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	ed2d 8b04 	vpush	{d8-d9}
 800b618:	ec57 6b10 	vmov	r6, r7, d0
 800b61c:	b093      	sub	sp, #76	; 0x4c
 800b61e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b624:	9106      	str	r1, [sp, #24]
 800b626:	ee10 aa10 	vmov	sl, s0
 800b62a:	4604      	mov	r4, r0
 800b62c:	9209      	str	r2, [sp, #36]	; 0x24
 800b62e:	930c      	str	r3, [sp, #48]	; 0x30
 800b630:	46bb      	mov	fp, r7
 800b632:	b975      	cbnz	r5, 800b652 <_dtoa_r+0x42>
 800b634:	2010      	movs	r0, #16
 800b636:	f7fd ff4b 	bl	80094d0 <malloc>
 800b63a:	4602      	mov	r2, r0
 800b63c:	6260      	str	r0, [r4, #36]	; 0x24
 800b63e:	b920      	cbnz	r0, 800b64a <_dtoa_r+0x3a>
 800b640:	4ba7      	ldr	r3, [pc, #668]	; (800b8e0 <_dtoa_r+0x2d0>)
 800b642:	21ea      	movs	r1, #234	; 0xea
 800b644:	48a7      	ldr	r0, [pc, #668]	; (800b8e4 <_dtoa_r+0x2d4>)
 800b646:	f002 fb8d 	bl	800dd64 <__assert_func>
 800b64a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b64e:	6005      	str	r5, [r0, #0]
 800b650:	60c5      	str	r5, [r0, #12]
 800b652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b654:	6819      	ldr	r1, [r3, #0]
 800b656:	b151      	cbz	r1, 800b66e <_dtoa_r+0x5e>
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	604a      	str	r2, [r1, #4]
 800b65c:	2301      	movs	r3, #1
 800b65e:	4093      	lsls	r3, r2
 800b660:	608b      	str	r3, [r1, #8]
 800b662:	4620      	mov	r0, r4
 800b664:	f001 fbb2 	bl	800cdcc <_Bfree>
 800b668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	1e3b      	subs	r3, r7, #0
 800b670:	bfaa      	itet	ge
 800b672:	2300      	movge	r3, #0
 800b674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b678:	f8c8 3000 	strge.w	r3, [r8]
 800b67c:	4b9a      	ldr	r3, [pc, #616]	; (800b8e8 <_dtoa_r+0x2d8>)
 800b67e:	bfbc      	itt	lt
 800b680:	2201      	movlt	r2, #1
 800b682:	f8c8 2000 	strlt.w	r2, [r8]
 800b686:	ea33 030b 	bics.w	r3, r3, fp
 800b68a:	d11b      	bne.n	800b6c4 <_dtoa_r+0xb4>
 800b68c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b68e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b698:	4333      	orrs	r3, r6
 800b69a:	f000 8592 	beq.w	800c1c2 <_dtoa_r+0xbb2>
 800b69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a0:	b963      	cbnz	r3, 800b6bc <_dtoa_r+0xac>
 800b6a2:	4b92      	ldr	r3, [pc, #584]	; (800b8ec <_dtoa_r+0x2dc>)
 800b6a4:	e022      	b.n	800b6ec <_dtoa_r+0xdc>
 800b6a6:	4b92      	ldr	r3, [pc, #584]	; (800b8f0 <_dtoa_r+0x2e0>)
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	9801      	ldr	r0, [sp, #4]
 800b6b2:	b013      	add	sp, #76	; 0x4c
 800b6b4:	ecbd 8b04 	vpop	{d8-d9}
 800b6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6bc:	4b8b      	ldr	r3, [pc, #556]	; (800b8ec <_dtoa_r+0x2dc>)
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	3303      	adds	r3, #3
 800b6c2:	e7f3      	b.n	800b6ac <_dtoa_r+0x9c>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	4650      	mov	r0, sl
 800b6ca:	4659      	mov	r1, fp
 800b6cc:	f7f5 f9d4 	bl	8000a78 <__aeabi_dcmpeq>
 800b6d0:	ec4b ab19 	vmov	d9, sl, fp
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	b158      	cbz	r0, 800b6f0 <_dtoa_r+0xe0>
 800b6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6da:	2301      	movs	r3, #1
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 856b 	beq.w	800c1bc <_dtoa_r+0xbac>
 800b6e6:	4883      	ldr	r0, [pc, #524]	; (800b8f4 <_dtoa_r+0x2e4>)
 800b6e8:	6018      	str	r0, [r3, #0]
 800b6ea:	1e43      	subs	r3, r0, #1
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	e7df      	b.n	800b6b0 <_dtoa_r+0xa0>
 800b6f0:	ec4b ab10 	vmov	d0, sl, fp
 800b6f4:	aa10      	add	r2, sp, #64	; 0x40
 800b6f6:	a911      	add	r1, sp, #68	; 0x44
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f001 ff15 	bl	800d528 <__d2b>
 800b6fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b702:	ee08 0a10 	vmov	s16, r0
 800b706:	2d00      	cmp	r5, #0
 800b708:	f000 8084 	beq.w	800b814 <_dtoa_r+0x204>
 800b70c:	ee19 3a90 	vmov	r3, s19
 800b710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b718:	4656      	mov	r6, sl
 800b71a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b71e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b726:	4b74      	ldr	r3, [pc, #464]	; (800b8f8 <_dtoa_r+0x2e8>)
 800b728:	2200      	movs	r2, #0
 800b72a:	4630      	mov	r0, r6
 800b72c:	4639      	mov	r1, r7
 800b72e:	f7f4 fd83 	bl	8000238 <__aeabi_dsub>
 800b732:	a365      	add	r3, pc, #404	; (adr r3, 800b8c8 <_dtoa_r+0x2b8>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 ff36 	bl	80005a8 <__aeabi_dmul>
 800b73c:	a364      	add	r3, pc, #400	; (adr r3, 800b8d0 <_dtoa_r+0x2c0>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fd7b 	bl	800023c <__adddf3>
 800b746:	4606      	mov	r6, r0
 800b748:	4628      	mov	r0, r5
 800b74a:	460f      	mov	r7, r1
 800b74c:	f7f4 fec2 	bl	80004d4 <__aeabi_i2d>
 800b750:	a361      	add	r3, pc, #388	; (adr r3, 800b8d8 <_dtoa_r+0x2c8>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 ff27 	bl	80005a8 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4630      	mov	r0, r6
 800b760:	4639      	mov	r1, r7
 800b762:	f7f4 fd6b 	bl	800023c <__adddf3>
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	f7f5 f9cd 	bl	8000b08 <__aeabi_d2iz>
 800b76e:	2200      	movs	r2, #0
 800b770:	9000      	str	r0, [sp, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f7f5 f988 	bl	8000a8c <__aeabi_dcmplt>
 800b77c:	b150      	cbz	r0, 800b794 <_dtoa_r+0x184>
 800b77e:	9800      	ldr	r0, [sp, #0]
 800b780:	f7f4 fea8 	bl	80004d4 <__aeabi_i2d>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	f7f5 f976 	bl	8000a78 <__aeabi_dcmpeq>
 800b78c:	b910      	cbnz	r0, 800b794 <_dtoa_r+0x184>
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	3b01      	subs	r3, #1
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	9b00      	ldr	r3, [sp, #0]
 800b796:	2b16      	cmp	r3, #22
 800b798:	d85a      	bhi.n	800b850 <_dtoa_r+0x240>
 800b79a:	9a00      	ldr	r2, [sp, #0]
 800b79c:	4b57      	ldr	r3, [pc, #348]	; (800b8fc <_dtoa_r+0x2ec>)
 800b79e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	ec51 0b19 	vmov	r0, r1, d9
 800b7aa:	f7f5 f96f 	bl	8000a8c <__aeabi_dcmplt>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d050      	beq.n	800b854 <_dtoa_r+0x244>
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7be:	1b5d      	subs	r5, r3, r5
 800b7c0:	1e6b      	subs	r3, r5, #1
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	bf45      	ittet	mi
 800b7c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b7ca:	9304      	strmi	r3, [sp, #16]
 800b7cc:	2300      	movpl	r3, #0
 800b7ce:	2300      	movmi	r3, #0
 800b7d0:	bf4c      	ite	mi
 800b7d2:	9305      	strmi	r3, [sp, #20]
 800b7d4:	9304      	strpl	r3, [sp, #16]
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	db3d      	blt.n	800b858 <_dtoa_r+0x248>
 800b7dc:	9b05      	ldr	r3, [sp, #20]
 800b7de:	9a00      	ldr	r2, [sp, #0]
 800b7e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b7e2:	4413      	add	r3, r2
 800b7e4:	9305      	str	r3, [sp, #20]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9307      	str	r3, [sp, #28]
 800b7ea:	9b06      	ldr	r3, [sp, #24]
 800b7ec:	2b09      	cmp	r3, #9
 800b7ee:	f200 8089 	bhi.w	800b904 <_dtoa_r+0x2f4>
 800b7f2:	2b05      	cmp	r3, #5
 800b7f4:	bfc4      	itt	gt
 800b7f6:	3b04      	subgt	r3, #4
 800b7f8:	9306      	strgt	r3, [sp, #24]
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	f1a3 0302 	sub.w	r3, r3, #2
 800b800:	bfcc      	ite	gt
 800b802:	2500      	movgt	r5, #0
 800b804:	2501      	movle	r5, #1
 800b806:	2b03      	cmp	r3, #3
 800b808:	f200 8087 	bhi.w	800b91a <_dtoa_r+0x30a>
 800b80c:	e8df f003 	tbb	[pc, r3]
 800b810:	59383a2d 	.word	0x59383a2d
 800b814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b818:	441d      	add	r5, r3
 800b81a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b81e:	2b20      	cmp	r3, #32
 800b820:	bfc1      	itttt	gt
 800b822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b82a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b82e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b832:	bfda      	itte	le
 800b834:	f1c3 0320 	rsble	r3, r3, #32
 800b838:	fa06 f003 	lslle.w	r0, r6, r3
 800b83c:	4318      	orrgt	r0, r3
 800b83e:	f7f4 fe39 	bl	80004b4 <__aeabi_ui2d>
 800b842:	2301      	movs	r3, #1
 800b844:	4606      	mov	r6, r0
 800b846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b84a:	3d01      	subs	r5, #1
 800b84c:	930e      	str	r3, [sp, #56]	; 0x38
 800b84e:	e76a      	b.n	800b726 <_dtoa_r+0x116>
 800b850:	2301      	movs	r3, #1
 800b852:	e7b2      	b.n	800b7ba <_dtoa_r+0x1aa>
 800b854:	900b      	str	r0, [sp, #44]	; 0x2c
 800b856:	e7b1      	b.n	800b7bc <_dtoa_r+0x1ac>
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	9a00      	ldr	r2, [sp, #0]
 800b85c:	1a9b      	subs	r3, r3, r2
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	4253      	negs	r3, r2
 800b862:	9307      	str	r3, [sp, #28]
 800b864:	2300      	movs	r3, #0
 800b866:	930a      	str	r3, [sp, #40]	; 0x28
 800b868:	e7bf      	b.n	800b7ea <_dtoa_r+0x1da>
 800b86a:	2300      	movs	r3, #0
 800b86c:	9308      	str	r3, [sp, #32]
 800b86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	dc55      	bgt.n	800b920 <_dtoa_r+0x310>
 800b874:	2301      	movs	r3, #1
 800b876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b87a:	461a      	mov	r2, r3
 800b87c:	9209      	str	r2, [sp, #36]	; 0x24
 800b87e:	e00c      	b.n	800b89a <_dtoa_r+0x28a>
 800b880:	2301      	movs	r3, #1
 800b882:	e7f3      	b.n	800b86c <_dtoa_r+0x25c>
 800b884:	2300      	movs	r3, #0
 800b886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	9b00      	ldr	r3, [sp, #0]
 800b88c:	4413      	add	r3, r2
 800b88e:	9302      	str	r3, [sp, #8]
 800b890:	3301      	adds	r3, #1
 800b892:	2b01      	cmp	r3, #1
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	bfb8      	it	lt
 800b898:	2301      	movlt	r3, #1
 800b89a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b89c:	2200      	movs	r2, #0
 800b89e:	6042      	str	r2, [r0, #4]
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	f102 0614 	add.w	r6, r2, #20
 800b8a6:	429e      	cmp	r6, r3
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	d93d      	bls.n	800b928 <_dtoa_r+0x318>
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f001 fa4d 	bl	800cd4c <_Balloc>
 800b8b2:	9001      	str	r0, [sp, #4]
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d13b      	bne.n	800b930 <_dtoa_r+0x320>
 800b8b8:	4b11      	ldr	r3, [pc, #68]	; (800b900 <_dtoa_r+0x2f0>)
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8c0:	e6c0      	b.n	800b644 <_dtoa_r+0x34>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e7df      	b.n	800b886 <_dtoa_r+0x276>
 800b8c6:	bf00      	nop
 800b8c8:	636f4361 	.word	0x636f4361
 800b8cc:	3fd287a7 	.word	0x3fd287a7
 800b8d0:	8b60c8b3 	.word	0x8b60c8b3
 800b8d4:	3fc68a28 	.word	0x3fc68a28
 800b8d8:	509f79fb 	.word	0x509f79fb
 800b8dc:	3fd34413 	.word	0x3fd34413
 800b8e0:	0800e68e 	.word	0x0800e68e
 800b8e4:	0800e6a5 	.word	0x0800e6a5
 800b8e8:	7ff00000 	.word	0x7ff00000
 800b8ec:	0800e68a 	.word	0x0800e68a
 800b8f0:	0800e681 	.word	0x0800e681
 800b8f4:	0800e505 	.word	0x0800e505
 800b8f8:	3ff80000 	.word	0x3ff80000
 800b8fc:	0800e878 	.word	0x0800e878
 800b900:	0800e700 	.word	0x0800e700
 800b904:	2501      	movs	r5, #1
 800b906:	2300      	movs	r3, #0
 800b908:	9306      	str	r3, [sp, #24]
 800b90a:	9508      	str	r5, [sp, #32]
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295
 800b910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	2312      	movs	r3, #18
 800b918:	e7b0      	b.n	800b87c <_dtoa_r+0x26c>
 800b91a:	2301      	movs	r3, #1
 800b91c:	9308      	str	r3, [sp, #32]
 800b91e:	e7f5      	b.n	800b90c <_dtoa_r+0x2fc>
 800b920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b926:	e7b8      	b.n	800b89a <_dtoa_r+0x28a>
 800b928:	3101      	adds	r1, #1
 800b92a:	6041      	str	r1, [r0, #4]
 800b92c:	0052      	lsls	r2, r2, #1
 800b92e:	e7b8      	b.n	800b8a2 <_dtoa_r+0x292>
 800b930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b932:	9a01      	ldr	r2, [sp, #4]
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	2b0e      	cmp	r3, #14
 800b93a:	f200 809d 	bhi.w	800ba78 <_dtoa_r+0x468>
 800b93e:	2d00      	cmp	r5, #0
 800b940:	f000 809a 	beq.w	800ba78 <_dtoa_r+0x468>
 800b944:	9b00      	ldr	r3, [sp, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	dd32      	ble.n	800b9b0 <_dtoa_r+0x3a0>
 800b94a:	4ab7      	ldr	r2, [pc, #732]	; (800bc28 <_dtoa_r+0x618>)
 800b94c:	f003 030f 	and.w	r3, r3, #15
 800b950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b954:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b958:	9b00      	ldr	r3, [sp, #0]
 800b95a:	05d8      	lsls	r0, r3, #23
 800b95c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b960:	d516      	bpl.n	800b990 <_dtoa_r+0x380>
 800b962:	4bb2      	ldr	r3, [pc, #712]	; (800bc2c <_dtoa_r+0x61c>)
 800b964:	ec51 0b19 	vmov	r0, r1, d9
 800b968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b96c:	f7f4 ff46 	bl	80007fc <__aeabi_ddiv>
 800b970:	f007 070f 	and.w	r7, r7, #15
 800b974:	4682      	mov	sl, r0
 800b976:	468b      	mov	fp, r1
 800b978:	2503      	movs	r5, #3
 800b97a:	4eac      	ldr	r6, [pc, #688]	; (800bc2c <_dtoa_r+0x61c>)
 800b97c:	b957      	cbnz	r7, 800b994 <_dtoa_r+0x384>
 800b97e:	4642      	mov	r2, r8
 800b980:	464b      	mov	r3, r9
 800b982:	4650      	mov	r0, sl
 800b984:	4659      	mov	r1, fp
 800b986:	f7f4 ff39 	bl	80007fc <__aeabi_ddiv>
 800b98a:	4682      	mov	sl, r0
 800b98c:	468b      	mov	fp, r1
 800b98e:	e028      	b.n	800b9e2 <_dtoa_r+0x3d2>
 800b990:	2502      	movs	r5, #2
 800b992:	e7f2      	b.n	800b97a <_dtoa_r+0x36a>
 800b994:	07f9      	lsls	r1, r7, #31
 800b996:	d508      	bpl.n	800b9aa <_dtoa_r+0x39a>
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9a0:	f7f4 fe02 	bl	80005a8 <__aeabi_dmul>
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	4689      	mov	r9, r1
 800b9aa:	107f      	asrs	r7, r7, #1
 800b9ac:	3608      	adds	r6, #8
 800b9ae:	e7e5      	b.n	800b97c <_dtoa_r+0x36c>
 800b9b0:	f000 809b 	beq.w	800baea <_dtoa_r+0x4da>
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	4f9d      	ldr	r7, [pc, #628]	; (800bc2c <_dtoa_r+0x61c>)
 800b9b8:	425e      	negs	r6, r3
 800b9ba:	4b9b      	ldr	r3, [pc, #620]	; (800bc28 <_dtoa_r+0x618>)
 800b9bc:	f006 020f 	and.w	r2, r6, #15
 800b9c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	ec51 0b19 	vmov	r0, r1, d9
 800b9cc:	f7f4 fdec 	bl	80005a8 <__aeabi_dmul>
 800b9d0:	1136      	asrs	r6, r6, #4
 800b9d2:	4682      	mov	sl, r0
 800b9d4:	468b      	mov	fp, r1
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	2502      	movs	r5, #2
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	d17a      	bne.n	800bad4 <_dtoa_r+0x4c4>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1d3      	bne.n	800b98a <_dtoa_r+0x37a>
 800b9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 8082 	beq.w	800baee <_dtoa_r+0x4de>
 800b9ea:	4b91      	ldr	r3, [pc, #580]	; (800bc30 <_dtoa_r+0x620>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4650      	mov	r0, sl
 800b9f0:	4659      	mov	r1, fp
 800b9f2:	f7f5 f84b 	bl	8000a8c <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d079      	beq.n	800baee <_dtoa_r+0x4de>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d076      	beq.n	800baee <_dtoa_r+0x4de>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	dd36      	ble.n	800ba74 <_dtoa_r+0x464>
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	4650      	mov	r0, sl
 800ba0a:	4659      	mov	r1, fp
 800ba0c:	1e5f      	subs	r7, r3, #1
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4b88      	ldr	r3, [pc, #544]	; (800bc34 <_dtoa_r+0x624>)
 800ba12:	f7f4 fdc9 	bl	80005a8 <__aeabi_dmul>
 800ba16:	9e02      	ldr	r6, [sp, #8]
 800ba18:	4682      	mov	sl, r0
 800ba1a:	468b      	mov	fp, r1
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f7f4 fd58 	bl	80004d4 <__aeabi_i2d>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	f7f4 fdbe 	bl	80005a8 <__aeabi_dmul>
 800ba2c:	4b82      	ldr	r3, [pc, #520]	; (800bc38 <_dtoa_r+0x628>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f7f4 fc04 	bl	800023c <__adddf3>
 800ba34:	46d0      	mov	r8, sl
 800ba36:	46d9      	mov	r9, fp
 800ba38:	4682      	mov	sl, r0
 800ba3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba3e:	2e00      	cmp	r6, #0
 800ba40:	d158      	bne.n	800baf4 <_dtoa_r+0x4e4>
 800ba42:	4b7e      	ldr	r3, [pc, #504]	; (800bc3c <_dtoa_r+0x62c>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	4640      	mov	r0, r8
 800ba48:	4649      	mov	r1, r9
 800ba4a:	f7f4 fbf5 	bl	8000238 <__aeabi_dsub>
 800ba4e:	4652      	mov	r2, sl
 800ba50:	465b      	mov	r3, fp
 800ba52:	4680      	mov	r8, r0
 800ba54:	4689      	mov	r9, r1
 800ba56:	f7f5 f837 	bl	8000ac8 <__aeabi_dcmpgt>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f040 8295 	bne.w	800bf8a <_dtoa_r+0x97a>
 800ba60:	4652      	mov	r2, sl
 800ba62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba66:	4640      	mov	r0, r8
 800ba68:	4649      	mov	r1, r9
 800ba6a:	f7f5 f80f 	bl	8000a8c <__aeabi_dcmplt>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f040 8289 	bne.w	800bf86 <_dtoa_r+0x976>
 800ba74:	ec5b ab19 	vmov	sl, fp, d9
 800ba78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f2c0 8148 	blt.w	800bd10 <_dtoa_r+0x700>
 800ba80:	9a00      	ldr	r2, [sp, #0]
 800ba82:	2a0e      	cmp	r2, #14
 800ba84:	f300 8144 	bgt.w	800bd10 <_dtoa_r+0x700>
 800ba88:	4b67      	ldr	r3, [pc, #412]	; (800bc28 <_dtoa_r+0x618>)
 800ba8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f280 80d5 	bge.w	800bc44 <_dtoa_r+0x634>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f300 80d1 	bgt.w	800bc44 <_dtoa_r+0x634>
 800baa2:	f040 826f 	bne.w	800bf84 <_dtoa_r+0x974>
 800baa6:	4b65      	ldr	r3, [pc, #404]	; (800bc3c <_dtoa_r+0x62c>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	4640      	mov	r0, r8
 800baac:	4649      	mov	r1, r9
 800baae:	f7f4 fd7b 	bl	80005a8 <__aeabi_dmul>
 800bab2:	4652      	mov	r2, sl
 800bab4:	465b      	mov	r3, fp
 800bab6:	f7f4 fffd 	bl	8000ab4 <__aeabi_dcmpge>
 800baba:	9e03      	ldr	r6, [sp, #12]
 800babc:	4637      	mov	r7, r6
 800babe:	2800      	cmp	r0, #0
 800bac0:	f040 8245 	bne.w	800bf4e <_dtoa_r+0x93e>
 800bac4:	9d01      	ldr	r5, [sp, #4]
 800bac6:	2331      	movs	r3, #49	; 0x31
 800bac8:	f805 3b01 	strb.w	r3, [r5], #1
 800bacc:	9b00      	ldr	r3, [sp, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	e240      	b.n	800bf56 <_dtoa_r+0x946>
 800bad4:	07f2      	lsls	r2, r6, #31
 800bad6:	d505      	bpl.n	800bae4 <_dtoa_r+0x4d4>
 800bad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800badc:	f7f4 fd64 	bl	80005a8 <__aeabi_dmul>
 800bae0:	3501      	adds	r5, #1
 800bae2:	2301      	movs	r3, #1
 800bae4:	1076      	asrs	r6, r6, #1
 800bae6:	3708      	adds	r7, #8
 800bae8:	e777      	b.n	800b9da <_dtoa_r+0x3ca>
 800baea:	2502      	movs	r5, #2
 800baec:	e779      	b.n	800b9e2 <_dtoa_r+0x3d2>
 800baee:	9f00      	ldr	r7, [sp, #0]
 800baf0:	9e03      	ldr	r6, [sp, #12]
 800baf2:	e794      	b.n	800ba1e <_dtoa_r+0x40e>
 800baf4:	9901      	ldr	r1, [sp, #4]
 800baf6:	4b4c      	ldr	r3, [pc, #304]	; (800bc28 <_dtoa_r+0x618>)
 800baf8:	4431      	add	r1, r6
 800bafa:	910d      	str	r1, [sp, #52]	; 0x34
 800bafc:	9908      	ldr	r1, [sp, #32]
 800bafe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb06:	2900      	cmp	r1, #0
 800bb08:	d043      	beq.n	800bb92 <_dtoa_r+0x582>
 800bb0a:	494d      	ldr	r1, [pc, #308]	; (800bc40 <_dtoa_r+0x630>)
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f7f4 fe75 	bl	80007fc <__aeabi_ddiv>
 800bb12:	4652      	mov	r2, sl
 800bb14:	465b      	mov	r3, fp
 800bb16:	f7f4 fb8f 	bl	8000238 <__aeabi_dsub>
 800bb1a:	9d01      	ldr	r5, [sp, #4]
 800bb1c:	4682      	mov	sl, r0
 800bb1e:	468b      	mov	fp, r1
 800bb20:	4649      	mov	r1, r9
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7f4 fff0 	bl	8000b08 <__aeabi_d2iz>
 800bb28:	4606      	mov	r6, r0
 800bb2a:	f7f4 fcd3 	bl	80004d4 <__aeabi_i2d>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4640      	mov	r0, r8
 800bb34:	4649      	mov	r1, r9
 800bb36:	f7f4 fb7f 	bl	8000238 <__aeabi_dsub>
 800bb3a:	3630      	adds	r6, #48	; 0x30
 800bb3c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb40:	4652      	mov	r2, sl
 800bb42:	465b      	mov	r3, fp
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	f7f4 ffa0 	bl	8000a8c <__aeabi_dcmplt>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d163      	bne.n	800bc18 <_dtoa_r+0x608>
 800bb50:	4642      	mov	r2, r8
 800bb52:	464b      	mov	r3, r9
 800bb54:	4936      	ldr	r1, [pc, #216]	; (800bc30 <_dtoa_r+0x620>)
 800bb56:	2000      	movs	r0, #0
 800bb58:	f7f4 fb6e 	bl	8000238 <__aeabi_dsub>
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	465b      	mov	r3, fp
 800bb60:	f7f4 ff94 	bl	8000a8c <__aeabi_dcmplt>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	f040 80b5 	bne.w	800bcd4 <_dtoa_r+0x6c4>
 800bb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	d081      	beq.n	800ba74 <_dtoa_r+0x464>
 800bb70:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <_dtoa_r+0x624>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	4650      	mov	r0, sl
 800bb76:	4659      	mov	r1, fp
 800bb78:	f7f4 fd16 	bl	80005a8 <__aeabi_dmul>
 800bb7c:	4b2d      	ldr	r3, [pc, #180]	; (800bc34 <_dtoa_r+0x624>)
 800bb7e:	4682      	mov	sl, r0
 800bb80:	468b      	mov	fp, r1
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	2200      	movs	r2, #0
 800bb88:	f7f4 fd0e 	bl	80005a8 <__aeabi_dmul>
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	4689      	mov	r9, r1
 800bb90:	e7c6      	b.n	800bb20 <_dtoa_r+0x510>
 800bb92:	4650      	mov	r0, sl
 800bb94:	4659      	mov	r1, fp
 800bb96:	f7f4 fd07 	bl	80005a8 <__aeabi_dmul>
 800bb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb9c:	9d01      	ldr	r5, [sp, #4]
 800bb9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bba0:	4682      	mov	sl, r0
 800bba2:	468b      	mov	fp, r1
 800bba4:	4649      	mov	r1, r9
 800bba6:	4640      	mov	r0, r8
 800bba8:	f7f4 ffae 	bl	8000b08 <__aeabi_d2iz>
 800bbac:	4606      	mov	r6, r0
 800bbae:	f7f4 fc91 	bl	80004d4 <__aeabi_i2d>
 800bbb2:	3630      	adds	r6, #48	; 0x30
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 fb3c 	bl	8000238 <__aeabi_dsub>
 800bbc0:	f805 6b01 	strb.w	r6, [r5], #1
 800bbc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbc6:	429d      	cmp	r5, r3
 800bbc8:	4680      	mov	r8, r0
 800bbca:	4689      	mov	r9, r1
 800bbcc:	f04f 0200 	mov.w	r2, #0
 800bbd0:	d124      	bne.n	800bc1c <_dtoa_r+0x60c>
 800bbd2:	4b1b      	ldr	r3, [pc, #108]	; (800bc40 <_dtoa_r+0x630>)
 800bbd4:	4650      	mov	r0, sl
 800bbd6:	4659      	mov	r1, fp
 800bbd8:	f7f4 fb30 	bl	800023c <__adddf3>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	f7f4 ff70 	bl	8000ac8 <__aeabi_dcmpgt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d173      	bne.n	800bcd4 <_dtoa_r+0x6c4>
 800bbec:	4652      	mov	r2, sl
 800bbee:	465b      	mov	r3, fp
 800bbf0:	4913      	ldr	r1, [pc, #76]	; (800bc40 <_dtoa_r+0x630>)
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	f7f4 fb20 	bl	8000238 <__aeabi_dsub>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	4649      	mov	r1, r9
 800bc00:	f7f4 ff44 	bl	8000a8c <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f af35 	beq.w	800ba74 <_dtoa_r+0x464>
 800bc0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc0c:	1e6b      	subs	r3, r5, #1
 800bc0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc14:	2b30      	cmp	r3, #48	; 0x30
 800bc16:	d0f8      	beq.n	800bc0a <_dtoa_r+0x5fa>
 800bc18:	9700      	str	r7, [sp, #0]
 800bc1a:	e049      	b.n	800bcb0 <_dtoa_r+0x6a0>
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <_dtoa_r+0x624>)
 800bc1e:	f7f4 fcc3 	bl	80005a8 <__aeabi_dmul>
 800bc22:	4680      	mov	r8, r0
 800bc24:	4689      	mov	r9, r1
 800bc26:	e7bd      	b.n	800bba4 <_dtoa_r+0x594>
 800bc28:	0800e878 	.word	0x0800e878
 800bc2c:	0800e850 	.word	0x0800e850
 800bc30:	3ff00000 	.word	0x3ff00000
 800bc34:	40240000 	.word	0x40240000
 800bc38:	401c0000 	.word	0x401c0000
 800bc3c:	40140000 	.word	0x40140000
 800bc40:	3fe00000 	.word	0x3fe00000
 800bc44:	9d01      	ldr	r5, [sp, #4]
 800bc46:	4656      	mov	r6, sl
 800bc48:	465f      	mov	r7, fp
 800bc4a:	4642      	mov	r2, r8
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	4630      	mov	r0, r6
 800bc50:	4639      	mov	r1, r7
 800bc52:	f7f4 fdd3 	bl	80007fc <__aeabi_ddiv>
 800bc56:	f7f4 ff57 	bl	8000b08 <__aeabi_d2iz>
 800bc5a:	4682      	mov	sl, r0
 800bc5c:	f7f4 fc3a 	bl	80004d4 <__aeabi_i2d>
 800bc60:	4642      	mov	r2, r8
 800bc62:	464b      	mov	r3, r9
 800bc64:	f7f4 fca0 	bl	80005a8 <__aeabi_dmul>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4639      	mov	r1, r7
 800bc70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bc74:	f7f4 fae0 	bl	8000238 <__aeabi_dsub>
 800bc78:	f805 6b01 	strb.w	r6, [r5], #1
 800bc7c:	9e01      	ldr	r6, [sp, #4]
 800bc7e:	9f03      	ldr	r7, [sp, #12]
 800bc80:	1bae      	subs	r6, r5, r6
 800bc82:	42b7      	cmp	r7, r6
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	d135      	bne.n	800bcf6 <_dtoa_r+0x6e6>
 800bc8a:	f7f4 fad7 	bl	800023c <__adddf3>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	464b      	mov	r3, r9
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	f7f4 ff17 	bl	8000ac8 <__aeabi_dcmpgt>
 800bc9a:	b9d0      	cbnz	r0, 800bcd2 <_dtoa_r+0x6c2>
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	464b      	mov	r3, r9
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 fee8 	bl	8000a78 <__aeabi_dcmpeq>
 800bca8:	b110      	cbz	r0, 800bcb0 <_dtoa_r+0x6a0>
 800bcaa:	f01a 0f01 	tst.w	sl, #1
 800bcae:	d110      	bne.n	800bcd2 <_dtoa_r+0x6c2>
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	ee18 1a10 	vmov	r1, s16
 800bcb6:	f001 f889 	bl	800cdcc <_Bfree>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9800      	ldr	r0, [sp, #0]
 800bcbe:	702b      	strb	r3, [r5, #0]
 800bcc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	6018      	str	r0, [r3, #0]
 800bcc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f43f acf1 	beq.w	800b6b0 <_dtoa_r+0xa0>
 800bcce:	601d      	str	r5, [r3, #0]
 800bcd0:	e4ee      	b.n	800b6b0 <_dtoa_r+0xa0>
 800bcd2:	9f00      	ldr	r7, [sp, #0]
 800bcd4:	462b      	mov	r3, r5
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcdc:	2a39      	cmp	r2, #57	; 0x39
 800bcde:	d106      	bne.n	800bcee <_dtoa_r+0x6de>
 800bce0:	9a01      	ldr	r2, [sp, #4]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d1f7      	bne.n	800bcd6 <_dtoa_r+0x6c6>
 800bce6:	9901      	ldr	r1, [sp, #4]
 800bce8:	2230      	movs	r2, #48	; 0x30
 800bcea:	3701      	adds	r7, #1
 800bcec:	700a      	strb	r2, [r1, #0]
 800bcee:	781a      	ldrb	r2, [r3, #0]
 800bcf0:	3201      	adds	r2, #1
 800bcf2:	701a      	strb	r2, [r3, #0]
 800bcf4:	e790      	b.n	800bc18 <_dtoa_r+0x608>
 800bcf6:	4ba6      	ldr	r3, [pc, #664]	; (800bf90 <_dtoa_r+0x980>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f7f4 fc55 	bl	80005a8 <__aeabi_dmul>
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2300      	movs	r3, #0
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	f7f4 feb7 	bl	8000a78 <__aeabi_dcmpeq>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d09d      	beq.n	800bc4a <_dtoa_r+0x63a>
 800bd0e:	e7cf      	b.n	800bcb0 <_dtoa_r+0x6a0>
 800bd10:	9a08      	ldr	r2, [sp, #32]
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	f000 80d7 	beq.w	800bec6 <_dtoa_r+0x8b6>
 800bd18:	9a06      	ldr	r2, [sp, #24]
 800bd1a:	2a01      	cmp	r2, #1
 800bd1c:	f300 80ba 	bgt.w	800be94 <_dtoa_r+0x884>
 800bd20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	f000 80b2 	beq.w	800be8c <_dtoa_r+0x87c>
 800bd28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd2c:	9e07      	ldr	r6, [sp, #28]
 800bd2e:	9d04      	ldr	r5, [sp, #16]
 800bd30:	9a04      	ldr	r2, [sp, #16]
 800bd32:	441a      	add	r2, r3
 800bd34:	9204      	str	r2, [sp, #16]
 800bd36:	9a05      	ldr	r2, [sp, #20]
 800bd38:	2101      	movs	r1, #1
 800bd3a:	441a      	add	r2, r3
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	9205      	str	r2, [sp, #20]
 800bd40:	f001 f946 	bl	800cfd0 <__i2b>
 800bd44:	4607      	mov	r7, r0
 800bd46:	2d00      	cmp	r5, #0
 800bd48:	dd0c      	ble.n	800bd64 <_dtoa_r+0x754>
 800bd4a:	9b05      	ldr	r3, [sp, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dd09      	ble.n	800bd64 <_dtoa_r+0x754>
 800bd50:	42ab      	cmp	r3, r5
 800bd52:	9a04      	ldr	r2, [sp, #16]
 800bd54:	bfa8      	it	ge
 800bd56:	462b      	movge	r3, r5
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	9204      	str	r2, [sp, #16]
 800bd5c:	9a05      	ldr	r2, [sp, #20]
 800bd5e:	1aed      	subs	r5, r5, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	9b07      	ldr	r3, [sp, #28]
 800bd66:	b31b      	cbz	r3, 800bdb0 <_dtoa_r+0x7a0>
 800bd68:	9b08      	ldr	r3, [sp, #32]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80af 	beq.w	800bece <_dtoa_r+0x8be>
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	dd13      	ble.n	800bd9c <_dtoa_r+0x78c>
 800bd74:	4639      	mov	r1, r7
 800bd76:	4632      	mov	r2, r6
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f001 f9e9 	bl	800d150 <__pow5mult>
 800bd7e:	ee18 2a10 	vmov	r2, s16
 800bd82:	4601      	mov	r1, r0
 800bd84:	4607      	mov	r7, r0
 800bd86:	4620      	mov	r0, r4
 800bd88:	f001 f938 	bl	800cffc <__multiply>
 800bd8c:	ee18 1a10 	vmov	r1, s16
 800bd90:	4680      	mov	r8, r0
 800bd92:	4620      	mov	r0, r4
 800bd94:	f001 f81a 	bl	800cdcc <_Bfree>
 800bd98:	ee08 8a10 	vmov	s16, r8
 800bd9c:	9b07      	ldr	r3, [sp, #28]
 800bd9e:	1b9a      	subs	r2, r3, r6
 800bda0:	d006      	beq.n	800bdb0 <_dtoa_r+0x7a0>
 800bda2:	ee18 1a10 	vmov	r1, s16
 800bda6:	4620      	mov	r0, r4
 800bda8:	f001 f9d2 	bl	800d150 <__pow5mult>
 800bdac:	ee08 0a10 	vmov	s16, r0
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f001 f90c 	bl	800cfd0 <__i2b>
 800bdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	f340 8088 	ble.w	800bed2 <_dtoa_r+0x8c2>
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	4601      	mov	r1, r0
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f001 f9c2 	bl	800d150 <__pow5mult>
 800bdcc:	9b06      	ldr	r3, [sp, #24]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	f340 8081 	ble.w	800bed8 <_dtoa_r+0x8c8>
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	6933      	ldr	r3, [r6, #16]
 800bddc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bde0:	6918      	ldr	r0, [r3, #16]
 800bde2:	f001 f8a5 	bl	800cf30 <__hi0bits>
 800bde6:	f1c0 0020 	rsb	r0, r0, #32
 800bdea:	9b05      	ldr	r3, [sp, #20]
 800bdec:	4418      	add	r0, r3
 800bdee:	f010 001f 	ands.w	r0, r0, #31
 800bdf2:	f000 8092 	beq.w	800bf1a <_dtoa_r+0x90a>
 800bdf6:	f1c0 0320 	rsb	r3, r0, #32
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	f340 808a 	ble.w	800bf14 <_dtoa_r+0x904>
 800be00:	f1c0 001c 	rsb	r0, r0, #28
 800be04:	9b04      	ldr	r3, [sp, #16]
 800be06:	4403      	add	r3, r0
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	9b05      	ldr	r3, [sp, #20]
 800be0c:	4403      	add	r3, r0
 800be0e:	4405      	add	r5, r0
 800be10:	9305      	str	r3, [sp, #20]
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd07      	ble.n	800be28 <_dtoa_r+0x818>
 800be18:	ee18 1a10 	vmov	r1, s16
 800be1c:	461a      	mov	r2, r3
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 f9f0 	bl	800d204 <__lshift>
 800be24:	ee08 0a10 	vmov	s16, r0
 800be28:	9b05      	ldr	r3, [sp, #20]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	dd05      	ble.n	800be3a <_dtoa_r+0x82a>
 800be2e:	4631      	mov	r1, r6
 800be30:	461a      	mov	r2, r3
 800be32:	4620      	mov	r0, r4
 800be34:	f001 f9e6 	bl	800d204 <__lshift>
 800be38:	4606      	mov	r6, r0
 800be3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d06e      	beq.n	800bf1e <_dtoa_r+0x90e>
 800be40:	ee18 0a10 	vmov	r0, s16
 800be44:	4631      	mov	r1, r6
 800be46:	f001 fa4d 	bl	800d2e4 <__mcmp>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	da67      	bge.n	800bf1e <_dtoa_r+0x90e>
 800be4e:	9b00      	ldr	r3, [sp, #0]
 800be50:	3b01      	subs	r3, #1
 800be52:	ee18 1a10 	vmov	r1, s16
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	220a      	movs	r2, #10
 800be5a:	2300      	movs	r3, #0
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 ffd7 	bl	800ce10 <__multadd>
 800be62:	9b08      	ldr	r3, [sp, #32]
 800be64:	ee08 0a10 	vmov	s16, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 81b1 	beq.w	800c1d0 <_dtoa_r+0xbc0>
 800be6e:	2300      	movs	r3, #0
 800be70:	4639      	mov	r1, r7
 800be72:	220a      	movs	r2, #10
 800be74:	4620      	mov	r0, r4
 800be76:	f000 ffcb 	bl	800ce10 <__multadd>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	4607      	mov	r7, r0
 800be80:	f300 808e 	bgt.w	800bfa0 <_dtoa_r+0x990>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b02      	cmp	r3, #2
 800be88:	dc51      	bgt.n	800bf2e <_dtoa_r+0x91e>
 800be8a:	e089      	b.n	800bfa0 <_dtoa_r+0x990>
 800be8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be92:	e74b      	b.n	800bd2c <_dtoa_r+0x71c>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	1e5e      	subs	r6, r3, #1
 800be98:	9b07      	ldr	r3, [sp, #28]
 800be9a:	42b3      	cmp	r3, r6
 800be9c:	bfbf      	itttt	lt
 800be9e:	9b07      	ldrlt	r3, [sp, #28]
 800bea0:	9607      	strlt	r6, [sp, #28]
 800bea2:	1af2      	sublt	r2, r6, r3
 800bea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bea6:	bfb6      	itet	lt
 800bea8:	189b      	addlt	r3, r3, r2
 800beaa:	1b9e      	subge	r6, r3, r6
 800beac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800beae:	9b03      	ldr	r3, [sp, #12]
 800beb0:	bfb8      	it	lt
 800beb2:	2600      	movlt	r6, #0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bfb7      	itett	lt
 800beb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bec0:	1a9d      	sublt	r5, r3, r2
 800bec2:	2300      	movlt	r3, #0
 800bec4:	e734      	b.n	800bd30 <_dtoa_r+0x720>
 800bec6:	9e07      	ldr	r6, [sp, #28]
 800bec8:	9d04      	ldr	r5, [sp, #16]
 800beca:	9f08      	ldr	r7, [sp, #32]
 800becc:	e73b      	b.n	800bd46 <_dtoa_r+0x736>
 800bece:	9a07      	ldr	r2, [sp, #28]
 800bed0:	e767      	b.n	800bda2 <_dtoa_r+0x792>
 800bed2:	9b06      	ldr	r3, [sp, #24]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	dc18      	bgt.n	800bf0a <_dtoa_r+0x8fa>
 800bed8:	f1ba 0f00 	cmp.w	sl, #0
 800bedc:	d115      	bne.n	800bf0a <_dtoa_r+0x8fa>
 800bede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee2:	b993      	cbnz	r3, 800bf0a <_dtoa_r+0x8fa>
 800bee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bee8:	0d1b      	lsrs	r3, r3, #20
 800beea:	051b      	lsls	r3, r3, #20
 800beec:	b183      	cbz	r3, 800bf10 <_dtoa_r+0x900>
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	3301      	adds	r3, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	9b05      	ldr	r3, [sp, #20]
 800bef6:	3301      	adds	r3, #1
 800bef8:	9305      	str	r3, [sp, #20]
 800befa:	f04f 0801 	mov.w	r8, #1
 800befe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f47f af6a 	bne.w	800bdda <_dtoa_r+0x7ca>
 800bf06:	2001      	movs	r0, #1
 800bf08:	e76f      	b.n	800bdea <_dtoa_r+0x7da>
 800bf0a:	f04f 0800 	mov.w	r8, #0
 800bf0e:	e7f6      	b.n	800befe <_dtoa_r+0x8ee>
 800bf10:	4698      	mov	r8, r3
 800bf12:	e7f4      	b.n	800befe <_dtoa_r+0x8ee>
 800bf14:	f43f af7d 	beq.w	800be12 <_dtoa_r+0x802>
 800bf18:	4618      	mov	r0, r3
 800bf1a:	301c      	adds	r0, #28
 800bf1c:	e772      	b.n	800be04 <_dtoa_r+0x7f4>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dc37      	bgt.n	800bf94 <_dtoa_r+0x984>
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	dd34      	ble.n	800bf94 <_dtoa_r+0x984>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	9302      	str	r3, [sp, #8]
 800bf2e:	9b02      	ldr	r3, [sp, #8]
 800bf30:	b96b      	cbnz	r3, 800bf4e <_dtoa_r+0x93e>
 800bf32:	4631      	mov	r1, r6
 800bf34:	2205      	movs	r2, #5
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 ff6a 	bl	800ce10 <__multadd>
 800bf3c:	4601      	mov	r1, r0
 800bf3e:	4606      	mov	r6, r0
 800bf40:	ee18 0a10 	vmov	r0, s16
 800bf44:	f001 f9ce 	bl	800d2e4 <__mcmp>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	f73f adbb 	bgt.w	800bac4 <_dtoa_r+0x4b4>
 800bf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf50:	9d01      	ldr	r5, [sp, #4]
 800bf52:	43db      	mvns	r3, r3
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f000 ff35 	bl	800cdcc <_Bfree>
 800bf62:	2f00      	cmp	r7, #0
 800bf64:	f43f aea4 	beq.w	800bcb0 <_dtoa_r+0x6a0>
 800bf68:	f1b8 0f00 	cmp.w	r8, #0
 800bf6c:	d005      	beq.n	800bf7a <_dtoa_r+0x96a>
 800bf6e:	45b8      	cmp	r8, r7
 800bf70:	d003      	beq.n	800bf7a <_dtoa_r+0x96a>
 800bf72:	4641      	mov	r1, r8
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 ff29 	bl	800cdcc <_Bfree>
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 ff25 	bl	800cdcc <_Bfree>
 800bf82:	e695      	b.n	800bcb0 <_dtoa_r+0x6a0>
 800bf84:	2600      	movs	r6, #0
 800bf86:	4637      	mov	r7, r6
 800bf88:	e7e1      	b.n	800bf4e <_dtoa_r+0x93e>
 800bf8a:	9700      	str	r7, [sp, #0]
 800bf8c:	4637      	mov	r7, r6
 800bf8e:	e599      	b.n	800bac4 <_dtoa_r+0x4b4>
 800bf90:	40240000 	.word	0x40240000
 800bf94:	9b08      	ldr	r3, [sp, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f000 80ca 	beq.w	800c130 <_dtoa_r+0xb20>
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	2d00      	cmp	r5, #0
 800bfa2:	dd05      	ble.n	800bfb0 <_dtoa_r+0x9a0>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	462a      	mov	r2, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f001 f92b 	bl	800d204 <__lshift>
 800bfae:	4607      	mov	r7, r0
 800bfb0:	f1b8 0f00 	cmp.w	r8, #0
 800bfb4:	d05b      	beq.n	800c06e <_dtoa_r+0xa5e>
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 fec7 	bl	800cd4c <_Balloc>
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	b928      	cbnz	r0, 800bfce <_dtoa_r+0x9be>
 800bfc2:	4b87      	ldr	r3, [pc, #540]	; (800c1e0 <_dtoa_r+0xbd0>)
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bfca:	f7ff bb3b 	b.w	800b644 <_dtoa_r+0x34>
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	3202      	adds	r2, #2
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	f107 010c 	add.w	r1, r7, #12
 800bfd8:	300c      	adds	r0, #12
 800bfda:	f7fd fa89 	bl	80094f0 <memcpy>
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f001 f90e 	bl	800d204 <__lshift>
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	f103 0901 	add.w	r9, r3, #1
 800bfee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bff2:	4413      	add	r3, r2
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	f00a 0301 	and.w	r3, sl, #1
 800bffa:	46b8      	mov	r8, r7
 800bffc:	9304      	str	r3, [sp, #16]
 800bffe:	4607      	mov	r7, r0
 800c000:	4631      	mov	r1, r6
 800c002:	ee18 0a10 	vmov	r0, s16
 800c006:	f7ff fa77 	bl	800b4f8 <quorem>
 800c00a:	4641      	mov	r1, r8
 800c00c:	9002      	str	r0, [sp, #8]
 800c00e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c012:	ee18 0a10 	vmov	r0, s16
 800c016:	f001 f965 	bl	800d2e4 <__mcmp>
 800c01a:	463a      	mov	r2, r7
 800c01c:	9003      	str	r0, [sp, #12]
 800c01e:	4631      	mov	r1, r6
 800c020:	4620      	mov	r0, r4
 800c022:	f001 f97b 	bl	800d31c <__mdiff>
 800c026:	68c2      	ldr	r2, [r0, #12]
 800c028:	f109 3bff 	add.w	fp, r9, #4294967295
 800c02c:	4605      	mov	r5, r0
 800c02e:	bb02      	cbnz	r2, 800c072 <_dtoa_r+0xa62>
 800c030:	4601      	mov	r1, r0
 800c032:	ee18 0a10 	vmov	r0, s16
 800c036:	f001 f955 	bl	800d2e4 <__mcmp>
 800c03a:	4602      	mov	r2, r0
 800c03c:	4629      	mov	r1, r5
 800c03e:	4620      	mov	r0, r4
 800c040:	9207      	str	r2, [sp, #28]
 800c042:	f000 fec3 	bl	800cdcc <_Bfree>
 800c046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c04a:	ea43 0102 	orr.w	r1, r3, r2
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	430b      	orrs	r3, r1
 800c052:	464d      	mov	r5, r9
 800c054:	d10f      	bne.n	800c076 <_dtoa_r+0xa66>
 800c056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c05a:	d02a      	beq.n	800c0b2 <_dtoa_r+0xaa2>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd02      	ble.n	800c068 <_dtoa_r+0xa58>
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c068:	f88b a000 	strb.w	sl, [fp]
 800c06c:	e775      	b.n	800bf5a <_dtoa_r+0x94a>
 800c06e:	4638      	mov	r0, r7
 800c070:	e7ba      	b.n	800bfe8 <_dtoa_r+0x9d8>
 800c072:	2201      	movs	r2, #1
 800c074:	e7e2      	b.n	800c03c <_dtoa_r+0xa2c>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	db04      	blt.n	800c086 <_dtoa_r+0xa76>
 800c07c:	9906      	ldr	r1, [sp, #24]
 800c07e:	430b      	orrs	r3, r1
 800c080:	9904      	ldr	r1, [sp, #16]
 800c082:	430b      	orrs	r3, r1
 800c084:	d122      	bne.n	800c0cc <_dtoa_r+0xabc>
 800c086:	2a00      	cmp	r2, #0
 800c088:	ddee      	ble.n	800c068 <_dtoa_r+0xa58>
 800c08a:	ee18 1a10 	vmov	r1, s16
 800c08e:	2201      	movs	r2, #1
 800c090:	4620      	mov	r0, r4
 800c092:	f001 f8b7 	bl	800d204 <__lshift>
 800c096:	4631      	mov	r1, r6
 800c098:	ee08 0a10 	vmov	s16, r0
 800c09c:	f001 f922 	bl	800d2e4 <__mcmp>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	dc03      	bgt.n	800c0ac <_dtoa_r+0xa9c>
 800c0a4:	d1e0      	bne.n	800c068 <_dtoa_r+0xa58>
 800c0a6:	f01a 0f01 	tst.w	sl, #1
 800c0aa:	d0dd      	beq.n	800c068 <_dtoa_r+0xa58>
 800c0ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0b0:	d1d7      	bne.n	800c062 <_dtoa_r+0xa52>
 800c0b2:	2339      	movs	r3, #57	; 0x39
 800c0b4:	f88b 3000 	strb.w	r3, [fp]
 800c0b8:	462b      	mov	r3, r5
 800c0ba:	461d      	mov	r5, r3
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c0c2:	2a39      	cmp	r2, #57	; 0x39
 800c0c4:	d071      	beq.n	800c1aa <_dtoa_r+0xb9a>
 800c0c6:	3201      	adds	r2, #1
 800c0c8:	701a      	strb	r2, [r3, #0]
 800c0ca:	e746      	b.n	800bf5a <_dtoa_r+0x94a>
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	dd07      	ble.n	800c0e0 <_dtoa_r+0xad0>
 800c0d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0d4:	d0ed      	beq.n	800c0b2 <_dtoa_r+0xaa2>
 800c0d6:	f10a 0301 	add.w	r3, sl, #1
 800c0da:	f88b 3000 	strb.w	r3, [fp]
 800c0de:	e73c      	b.n	800bf5a <_dtoa_r+0x94a>
 800c0e0:	9b05      	ldr	r3, [sp, #20]
 800c0e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c0e6:	4599      	cmp	r9, r3
 800c0e8:	d047      	beq.n	800c17a <_dtoa_r+0xb6a>
 800c0ea:	ee18 1a10 	vmov	r1, s16
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fe8c 	bl	800ce10 <__multadd>
 800c0f8:	45b8      	cmp	r8, r7
 800c0fa:	ee08 0a10 	vmov	s16, r0
 800c0fe:	f04f 0300 	mov.w	r3, #0
 800c102:	f04f 020a 	mov.w	r2, #10
 800c106:	4641      	mov	r1, r8
 800c108:	4620      	mov	r0, r4
 800c10a:	d106      	bne.n	800c11a <_dtoa_r+0xb0a>
 800c10c:	f000 fe80 	bl	800ce10 <__multadd>
 800c110:	4680      	mov	r8, r0
 800c112:	4607      	mov	r7, r0
 800c114:	f109 0901 	add.w	r9, r9, #1
 800c118:	e772      	b.n	800c000 <_dtoa_r+0x9f0>
 800c11a:	f000 fe79 	bl	800ce10 <__multadd>
 800c11e:	4639      	mov	r1, r7
 800c120:	4680      	mov	r8, r0
 800c122:	2300      	movs	r3, #0
 800c124:	220a      	movs	r2, #10
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fe72 	bl	800ce10 <__multadd>
 800c12c:	4607      	mov	r7, r0
 800c12e:	e7f1      	b.n	800c114 <_dtoa_r+0xb04>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	9302      	str	r3, [sp, #8]
 800c134:	9d01      	ldr	r5, [sp, #4]
 800c136:	ee18 0a10 	vmov	r0, s16
 800c13a:	4631      	mov	r1, r6
 800c13c:	f7ff f9dc 	bl	800b4f8 <quorem>
 800c140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	f805 ab01 	strb.w	sl, [r5], #1
 800c14a:	1aea      	subs	r2, r5, r3
 800c14c:	9b02      	ldr	r3, [sp, #8]
 800c14e:	4293      	cmp	r3, r2
 800c150:	dd09      	ble.n	800c166 <_dtoa_r+0xb56>
 800c152:	ee18 1a10 	vmov	r1, s16
 800c156:	2300      	movs	r3, #0
 800c158:	220a      	movs	r2, #10
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 fe58 	bl	800ce10 <__multadd>
 800c160:	ee08 0a10 	vmov	s16, r0
 800c164:	e7e7      	b.n	800c136 <_dtoa_r+0xb26>
 800c166:	9b02      	ldr	r3, [sp, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	bfc8      	it	gt
 800c16c:	461d      	movgt	r5, r3
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	bfd8      	it	le
 800c172:	2501      	movle	r5, #1
 800c174:	441d      	add	r5, r3
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	ee18 1a10 	vmov	r1, s16
 800c17e:	2201      	movs	r2, #1
 800c180:	4620      	mov	r0, r4
 800c182:	f001 f83f 	bl	800d204 <__lshift>
 800c186:	4631      	mov	r1, r6
 800c188:	ee08 0a10 	vmov	s16, r0
 800c18c:	f001 f8aa 	bl	800d2e4 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dc91      	bgt.n	800c0b8 <_dtoa_r+0xaa8>
 800c194:	d102      	bne.n	800c19c <_dtoa_r+0xb8c>
 800c196:	f01a 0f01 	tst.w	sl, #1
 800c19a:	d18d      	bne.n	800c0b8 <_dtoa_r+0xaa8>
 800c19c:	462b      	mov	r3, r5
 800c19e:	461d      	mov	r5, r3
 800c1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1a4:	2a30      	cmp	r2, #48	; 0x30
 800c1a6:	d0fa      	beq.n	800c19e <_dtoa_r+0xb8e>
 800c1a8:	e6d7      	b.n	800bf5a <_dtoa_r+0x94a>
 800c1aa:	9a01      	ldr	r2, [sp, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d184      	bne.n	800c0ba <_dtoa_r+0xaaa>
 800c1b0:	9b00      	ldr	r3, [sp, #0]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	2331      	movs	r3, #49	; 0x31
 800c1b8:	7013      	strb	r3, [r2, #0]
 800c1ba:	e6ce      	b.n	800bf5a <_dtoa_r+0x94a>
 800c1bc:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <_dtoa_r+0xbd4>)
 800c1be:	f7ff ba95 	b.w	800b6ec <_dtoa_r+0xdc>
 800c1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f47f aa6e 	bne.w	800b6a6 <_dtoa_r+0x96>
 800c1ca:	4b07      	ldr	r3, [pc, #28]	; (800c1e8 <_dtoa_r+0xbd8>)
 800c1cc:	f7ff ba8e 	b.w	800b6ec <_dtoa_r+0xdc>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dcae      	bgt.n	800c134 <_dtoa_r+0xb24>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	f73f aea8 	bgt.w	800bf2e <_dtoa_r+0x91e>
 800c1de:	e7a9      	b.n	800c134 <_dtoa_r+0xb24>
 800c1e0:	0800e700 	.word	0x0800e700
 800c1e4:	0800e504 	.word	0x0800e504
 800c1e8:	0800e681 	.word	0x0800e681

0800c1ec <__sflush_r>:
 800c1ec:	898a      	ldrh	r2, [r1, #12]
 800c1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	0710      	lsls	r0, r2, #28
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	d458      	bmi.n	800c2ac <__sflush_r+0xc0>
 800c1fa:	684b      	ldr	r3, [r1, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dc05      	bgt.n	800c20c <__sflush_r+0x20>
 800c200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c202:	2b00      	cmp	r3, #0
 800c204:	dc02      	bgt.n	800c20c <__sflush_r+0x20>
 800c206:	2000      	movs	r0, #0
 800c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c20e:	2e00      	cmp	r6, #0
 800c210:	d0f9      	beq.n	800c206 <__sflush_r+0x1a>
 800c212:	2300      	movs	r3, #0
 800c214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c218:	682f      	ldr	r7, [r5, #0]
 800c21a:	602b      	str	r3, [r5, #0]
 800c21c:	d032      	beq.n	800c284 <__sflush_r+0x98>
 800c21e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	075a      	lsls	r2, r3, #29
 800c224:	d505      	bpl.n	800c232 <__sflush_r+0x46>
 800c226:	6863      	ldr	r3, [r4, #4]
 800c228:	1ac0      	subs	r0, r0, r3
 800c22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c22c:	b10b      	cbz	r3, 800c232 <__sflush_r+0x46>
 800c22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c230:	1ac0      	subs	r0, r0, r3
 800c232:	2300      	movs	r3, #0
 800c234:	4602      	mov	r2, r0
 800c236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c238:	6a21      	ldr	r1, [r4, #32]
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b0      	blx	r6
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	d106      	bne.n	800c252 <__sflush_r+0x66>
 800c244:	6829      	ldr	r1, [r5, #0]
 800c246:	291d      	cmp	r1, #29
 800c248:	d82c      	bhi.n	800c2a4 <__sflush_r+0xb8>
 800c24a:	4a2a      	ldr	r2, [pc, #168]	; (800c2f4 <__sflush_r+0x108>)
 800c24c:	40ca      	lsrs	r2, r1
 800c24e:	07d6      	lsls	r6, r2, #31
 800c250:	d528      	bpl.n	800c2a4 <__sflush_r+0xb8>
 800c252:	2200      	movs	r2, #0
 800c254:	6062      	str	r2, [r4, #4]
 800c256:	04d9      	lsls	r1, r3, #19
 800c258:	6922      	ldr	r2, [r4, #16]
 800c25a:	6022      	str	r2, [r4, #0]
 800c25c:	d504      	bpl.n	800c268 <__sflush_r+0x7c>
 800c25e:	1c42      	adds	r2, r0, #1
 800c260:	d101      	bne.n	800c266 <__sflush_r+0x7a>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	b903      	cbnz	r3, 800c268 <__sflush_r+0x7c>
 800c266:	6560      	str	r0, [r4, #84]	; 0x54
 800c268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c26a:	602f      	str	r7, [r5, #0]
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d0ca      	beq.n	800c206 <__sflush_r+0x1a>
 800c270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c274:	4299      	cmp	r1, r3
 800c276:	d002      	beq.n	800c27e <__sflush_r+0x92>
 800c278:	4628      	mov	r0, r5
 800c27a:	f7fd f94f 	bl	800951c <_free_r>
 800c27e:	2000      	movs	r0, #0
 800c280:	6360      	str	r0, [r4, #52]	; 0x34
 800c282:	e7c1      	b.n	800c208 <__sflush_r+0x1c>
 800c284:	6a21      	ldr	r1, [r4, #32]
 800c286:	2301      	movs	r3, #1
 800c288:	4628      	mov	r0, r5
 800c28a:	47b0      	blx	r6
 800c28c:	1c41      	adds	r1, r0, #1
 800c28e:	d1c7      	bne.n	800c220 <__sflush_r+0x34>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0c4      	beq.n	800c220 <__sflush_r+0x34>
 800c296:	2b1d      	cmp	r3, #29
 800c298:	d001      	beq.n	800c29e <__sflush_r+0xb2>
 800c29a:	2b16      	cmp	r3, #22
 800c29c:	d101      	bne.n	800c2a2 <__sflush_r+0xb6>
 800c29e:	602f      	str	r7, [r5, #0]
 800c2a0:	e7b1      	b.n	800c206 <__sflush_r+0x1a>
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	e7ad      	b.n	800c208 <__sflush_r+0x1c>
 800c2ac:	690f      	ldr	r7, [r1, #16]
 800c2ae:	2f00      	cmp	r7, #0
 800c2b0:	d0a9      	beq.n	800c206 <__sflush_r+0x1a>
 800c2b2:	0793      	lsls	r3, r2, #30
 800c2b4:	680e      	ldr	r6, [r1, #0]
 800c2b6:	bf08      	it	eq
 800c2b8:	694b      	ldreq	r3, [r1, #20]
 800c2ba:	600f      	str	r7, [r1, #0]
 800c2bc:	bf18      	it	ne
 800c2be:	2300      	movne	r3, #0
 800c2c0:	eba6 0807 	sub.w	r8, r6, r7
 800c2c4:	608b      	str	r3, [r1, #8]
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	dd9c      	ble.n	800c206 <__sflush_r+0x1a>
 800c2cc:	6a21      	ldr	r1, [r4, #32]
 800c2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2d0:	4643      	mov	r3, r8
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	47b0      	blx	r6
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	dc06      	bgt.n	800c2ea <__sflush_r+0xfe>
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	e78e      	b.n	800c208 <__sflush_r+0x1c>
 800c2ea:	4407      	add	r7, r0
 800c2ec:	eba8 0800 	sub.w	r8, r8, r0
 800c2f0:	e7e9      	b.n	800c2c6 <__sflush_r+0xda>
 800c2f2:	bf00      	nop
 800c2f4:	20400001 	.word	0x20400001

0800c2f8 <_fflush_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	690b      	ldr	r3, [r1, #16]
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	b913      	cbnz	r3, 800c308 <_fflush_r+0x10>
 800c302:	2500      	movs	r5, #0
 800c304:	4628      	mov	r0, r5
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	b118      	cbz	r0, 800c312 <_fflush_r+0x1a>
 800c30a:	6983      	ldr	r3, [r0, #24]
 800c30c:	b90b      	cbnz	r3, 800c312 <_fflush_r+0x1a>
 800c30e:	f000 f887 	bl	800c420 <__sinit>
 800c312:	4b14      	ldr	r3, [pc, #80]	; (800c364 <_fflush_r+0x6c>)
 800c314:	429c      	cmp	r4, r3
 800c316:	d11b      	bne.n	800c350 <_fflush_r+0x58>
 800c318:	686c      	ldr	r4, [r5, #4]
 800c31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0ef      	beq.n	800c302 <_fflush_r+0xa>
 800c322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c324:	07d0      	lsls	r0, r2, #31
 800c326:	d404      	bmi.n	800c332 <_fflush_r+0x3a>
 800c328:	0599      	lsls	r1, r3, #22
 800c32a:	d402      	bmi.n	800c332 <_fflush_r+0x3a>
 800c32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32e:	f000 fc88 	bl	800cc42 <__retarget_lock_acquire_recursive>
 800c332:	4628      	mov	r0, r5
 800c334:	4621      	mov	r1, r4
 800c336:	f7ff ff59 	bl	800c1ec <__sflush_r>
 800c33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c33c:	07da      	lsls	r2, r3, #31
 800c33e:	4605      	mov	r5, r0
 800c340:	d4e0      	bmi.n	800c304 <_fflush_r+0xc>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	059b      	lsls	r3, r3, #22
 800c346:	d4dd      	bmi.n	800c304 <_fflush_r+0xc>
 800c348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c34a:	f000 fc7b 	bl	800cc44 <__retarget_lock_release_recursive>
 800c34e:	e7d9      	b.n	800c304 <_fflush_r+0xc>
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <_fflush_r+0x70>)
 800c352:	429c      	cmp	r4, r3
 800c354:	d101      	bne.n	800c35a <_fflush_r+0x62>
 800c356:	68ac      	ldr	r4, [r5, #8]
 800c358:	e7df      	b.n	800c31a <_fflush_r+0x22>
 800c35a:	4b04      	ldr	r3, [pc, #16]	; (800c36c <_fflush_r+0x74>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	bf08      	it	eq
 800c360:	68ec      	ldreq	r4, [r5, #12]
 800c362:	e7da      	b.n	800c31a <_fflush_r+0x22>
 800c364:	0800e734 	.word	0x0800e734
 800c368:	0800e754 	.word	0x0800e754
 800c36c:	0800e714 	.word	0x0800e714

0800c370 <std>:
 800c370:	2300      	movs	r3, #0
 800c372:	b510      	push	{r4, lr}
 800c374:	4604      	mov	r4, r0
 800c376:	e9c0 3300 	strd	r3, r3, [r0]
 800c37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c37e:	6083      	str	r3, [r0, #8]
 800c380:	8181      	strh	r1, [r0, #12]
 800c382:	6643      	str	r3, [r0, #100]	; 0x64
 800c384:	81c2      	strh	r2, [r0, #14]
 800c386:	6183      	str	r3, [r0, #24]
 800c388:	4619      	mov	r1, r3
 800c38a:	2208      	movs	r2, #8
 800c38c:	305c      	adds	r0, #92	; 0x5c
 800c38e:	f7fd f8bd 	bl	800950c <memset>
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <std+0x38>)
 800c394:	6263      	str	r3, [r4, #36]	; 0x24
 800c396:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <std+0x3c>)
 800c398:	62a3      	str	r3, [r4, #40]	; 0x28
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <std+0x40>)
 800c39c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x44>)
 800c3a0:	6224      	str	r4, [r4, #32]
 800c3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800dc79 	.word	0x0800dc79
 800c3ac:	0800dc9b 	.word	0x0800dc9b
 800c3b0:	0800dcd3 	.word	0x0800dcd3
 800c3b4:	0800dcf7 	.word	0x0800dcf7

0800c3b8 <_cleanup_r>:
 800c3b8:	4901      	ldr	r1, [pc, #4]	; (800c3c0 <_cleanup_r+0x8>)
 800c3ba:	f000 b8af 	b.w	800c51c <_fwalk_reent>
 800c3be:	bf00      	nop
 800c3c0:	0800c2f9 	.word	0x0800c2f9

0800c3c4 <__sfmoreglue>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	2268      	movs	r2, #104	; 0x68
 800c3c8:	1e4d      	subs	r5, r1, #1
 800c3ca:	4355      	muls	r5, r2
 800c3cc:	460e      	mov	r6, r1
 800c3ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3d2:	f7fd f90f 	bl	80095f4 <_malloc_r>
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	b140      	cbz	r0, 800c3ec <__sfmoreglue+0x28>
 800c3da:	2100      	movs	r1, #0
 800c3dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c3e0:	300c      	adds	r0, #12
 800c3e2:	60a0      	str	r0, [r4, #8]
 800c3e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3e8:	f7fd f890 	bl	800950c <memset>
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	bd70      	pop	{r4, r5, r6, pc}

0800c3f0 <__sfp_lock_acquire>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__sfp_lock_acquire+0x8>)
 800c3f2:	f000 bc26 	b.w	800cc42 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	200007bd 	.word	0x200007bd

0800c3fc <__sfp_lock_release>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sfp_lock_release+0x8>)
 800c3fe:	f000 bc21 	b.w	800cc44 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	200007bd 	.word	0x200007bd

0800c408 <__sinit_lock_acquire>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__sinit_lock_acquire+0x8>)
 800c40a:	f000 bc1a 	b.w	800cc42 <__retarget_lock_acquire_recursive>
 800c40e:	bf00      	nop
 800c410:	200007be 	.word	0x200007be

0800c414 <__sinit_lock_release>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__sinit_lock_release+0x8>)
 800c416:	f000 bc15 	b.w	800cc44 <__retarget_lock_release_recursive>
 800c41a:	bf00      	nop
 800c41c:	200007be 	.word	0x200007be

0800c420 <__sinit>:
 800c420:	b510      	push	{r4, lr}
 800c422:	4604      	mov	r4, r0
 800c424:	f7ff fff0 	bl	800c408 <__sinit_lock_acquire>
 800c428:	69a3      	ldr	r3, [r4, #24]
 800c42a:	b11b      	cbz	r3, 800c434 <__sinit+0x14>
 800c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c430:	f7ff bff0 	b.w	800c414 <__sinit_lock_release>
 800c434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c438:	6523      	str	r3, [r4, #80]	; 0x50
 800c43a:	4b13      	ldr	r3, [pc, #76]	; (800c488 <__sinit+0x68>)
 800c43c:	4a13      	ldr	r2, [pc, #76]	; (800c48c <__sinit+0x6c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	62a2      	str	r2, [r4, #40]	; 0x28
 800c442:	42a3      	cmp	r3, r4
 800c444:	bf04      	itt	eq
 800c446:	2301      	moveq	r3, #1
 800c448:	61a3      	streq	r3, [r4, #24]
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 f820 	bl	800c490 <__sfp>
 800c450:	6060      	str	r0, [r4, #4]
 800c452:	4620      	mov	r0, r4
 800c454:	f000 f81c 	bl	800c490 <__sfp>
 800c458:	60a0      	str	r0, [r4, #8]
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f818 	bl	800c490 <__sfp>
 800c460:	2200      	movs	r2, #0
 800c462:	60e0      	str	r0, [r4, #12]
 800c464:	2104      	movs	r1, #4
 800c466:	6860      	ldr	r0, [r4, #4]
 800c468:	f7ff ff82 	bl	800c370 <std>
 800c46c:	68a0      	ldr	r0, [r4, #8]
 800c46e:	2201      	movs	r2, #1
 800c470:	2109      	movs	r1, #9
 800c472:	f7ff ff7d 	bl	800c370 <std>
 800c476:	68e0      	ldr	r0, [r4, #12]
 800c478:	2202      	movs	r2, #2
 800c47a:	2112      	movs	r1, #18
 800c47c:	f7ff ff78 	bl	800c370 <std>
 800c480:	2301      	movs	r3, #1
 800c482:	61a3      	str	r3, [r4, #24]
 800c484:	e7d2      	b.n	800c42c <__sinit+0xc>
 800c486:	bf00      	nop
 800c488:	0800e4f0 	.word	0x0800e4f0
 800c48c:	0800c3b9 	.word	0x0800c3b9

0800c490 <__sfp>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	4607      	mov	r7, r0
 800c494:	f7ff ffac 	bl	800c3f0 <__sfp_lock_acquire>
 800c498:	4b1e      	ldr	r3, [pc, #120]	; (800c514 <__sfp+0x84>)
 800c49a:	681e      	ldr	r6, [r3, #0]
 800c49c:	69b3      	ldr	r3, [r6, #24]
 800c49e:	b913      	cbnz	r3, 800c4a6 <__sfp+0x16>
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff ffbd 	bl	800c420 <__sinit>
 800c4a6:	3648      	adds	r6, #72	; 0x48
 800c4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	d503      	bpl.n	800c4b8 <__sfp+0x28>
 800c4b0:	6833      	ldr	r3, [r6, #0]
 800c4b2:	b30b      	cbz	r3, 800c4f8 <__sfp+0x68>
 800c4b4:	6836      	ldr	r6, [r6, #0]
 800c4b6:	e7f7      	b.n	800c4a8 <__sfp+0x18>
 800c4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4bc:	b9d5      	cbnz	r5, 800c4f4 <__sfp+0x64>
 800c4be:	4b16      	ldr	r3, [pc, #88]	; (800c518 <__sfp+0x88>)
 800c4c0:	60e3      	str	r3, [r4, #12]
 800c4c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4c8:	f000 fbba 	bl	800cc40 <__retarget_lock_init_recursive>
 800c4cc:	f7ff ff96 	bl	800c3fc <__sfp_lock_release>
 800c4d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4d8:	6025      	str	r5, [r4, #0]
 800c4da:	61a5      	str	r5, [r4, #24]
 800c4dc:	2208      	movs	r2, #8
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4e4:	f7fd f812 	bl	800950c <memset>
 800c4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f4:	3468      	adds	r4, #104	; 0x68
 800c4f6:	e7d9      	b.n	800c4ac <__sfp+0x1c>
 800c4f8:	2104      	movs	r1, #4
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	f7ff ff62 	bl	800c3c4 <__sfmoreglue>
 800c500:	4604      	mov	r4, r0
 800c502:	6030      	str	r0, [r6, #0]
 800c504:	2800      	cmp	r0, #0
 800c506:	d1d5      	bne.n	800c4b4 <__sfp+0x24>
 800c508:	f7ff ff78 	bl	800c3fc <__sfp_lock_release>
 800c50c:	230c      	movs	r3, #12
 800c50e:	603b      	str	r3, [r7, #0]
 800c510:	e7ee      	b.n	800c4f0 <__sfp+0x60>
 800c512:	bf00      	nop
 800c514:	0800e4f0 	.word	0x0800e4f0
 800c518:	ffff0001 	.word	0xffff0001

0800c51c <_fwalk_reent>:
 800c51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c520:	4606      	mov	r6, r0
 800c522:	4688      	mov	r8, r1
 800c524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c528:	2700      	movs	r7, #0
 800c52a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c52e:	f1b9 0901 	subs.w	r9, r9, #1
 800c532:	d505      	bpl.n	800c540 <_fwalk_reent+0x24>
 800c534:	6824      	ldr	r4, [r4, #0]
 800c536:	2c00      	cmp	r4, #0
 800c538:	d1f7      	bne.n	800c52a <_fwalk_reent+0xe>
 800c53a:	4638      	mov	r0, r7
 800c53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c540:	89ab      	ldrh	r3, [r5, #12]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d907      	bls.n	800c556 <_fwalk_reent+0x3a>
 800c546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c54a:	3301      	adds	r3, #1
 800c54c:	d003      	beq.n	800c556 <_fwalk_reent+0x3a>
 800c54e:	4629      	mov	r1, r5
 800c550:	4630      	mov	r0, r6
 800c552:	47c0      	blx	r8
 800c554:	4307      	orrs	r7, r0
 800c556:	3568      	adds	r5, #104	; 0x68
 800c558:	e7e9      	b.n	800c52e <_fwalk_reent+0x12>

0800c55a <rshift>:
 800c55a:	6903      	ldr	r3, [r0, #16]
 800c55c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c564:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c568:	f100 0414 	add.w	r4, r0, #20
 800c56c:	dd45      	ble.n	800c5fa <rshift+0xa0>
 800c56e:	f011 011f 	ands.w	r1, r1, #31
 800c572:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c576:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c57a:	d10c      	bne.n	800c596 <rshift+0x3c>
 800c57c:	f100 0710 	add.w	r7, r0, #16
 800c580:	4629      	mov	r1, r5
 800c582:	42b1      	cmp	r1, r6
 800c584:	d334      	bcc.n	800c5f0 <rshift+0x96>
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	1eea      	subs	r2, r5, #3
 800c58c:	4296      	cmp	r6, r2
 800c58e:	bf38      	it	cc
 800c590:	2300      	movcc	r3, #0
 800c592:	4423      	add	r3, r4
 800c594:	e015      	b.n	800c5c2 <rshift+0x68>
 800c596:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c59a:	f1c1 0820 	rsb	r8, r1, #32
 800c59e:	40cf      	lsrs	r7, r1
 800c5a0:	f105 0e04 	add.w	lr, r5, #4
 800c5a4:	46a1      	mov	r9, r4
 800c5a6:	4576      	cmp	r6, lr
 800c5a8:	46f4      	mov	ip, lr
 800c5aa:	d815      	bhi.n	800c5d8 <rshift+0x7e>
 800c5ac:	1a9a      	subs	r2, r3, r2
 800c5ae:	0092      	lsls	r2, r2, #2
 800c5b0:	3a04      	subs	r2, #4
 800c5b2:	3501      	adds	r5, #1
 800c5b4:	42ae      	cmp	r6, r5
 800c5b6:	bf38      	it	cc
 800c5b8:	2200      	movcc	r2, #0
 800c5ba:	18a3      	adds	r3, r4, r2
 800c5bc:	50a7      	str	r7, [r4, r2]
 800c5be:	b107      	cbz	r7, 800c5c2 <rshift+0x68>
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	1b1a      	subs	r2, r3, r4
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5ca:	bf08      	it	eq
 800c5cc:	2300      	moveq	r3, #0
 800c5ce:	6102      	str	r2, [r0, #16]
 800c5d0:	bf08      	it	eq
 800c5d2:	6143      	streq	r3, [r0, #20]
 800c5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d8:	f8dc c000 	ldr.w	ip, [ip]
 800c5dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5e0:	ea4c 0707 	orr.w	r7, ip, r7
 800c5e4:	f849 7b04 	str.w	r7, [r9], #4
 800c5e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5ec:	40cf      	lsrs	r7, r1
 800c5ee:	e7da      	b.n	800c5a6 <rshift+0x4c>
 800c5f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5f8:	e7c3      	b.n	800c582 <rshift+0x28>
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	e7e1      	b.n	800c5c2 <rshift+0x68>

0800c5fe <__hexdig_fun>:
 800c5fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c602:	2b09      	cmp	r3, #9
 800c604:	d802      	bhi.n	800c60c <__hexdig_fun+0xe>
 800c606:	3820      	subs	r0, #32
 800c608:	b2c0      	uxtb	r0, r0
 800c60a:	4770      	bx	lr
 800c60c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c610:	2b05      	cmp	r3, #5
 800c612:	d801      	bhi.n	800c618 <__hexdig_fun+0x1a>
 800c614:	3847      	subs	r0, #71	; 0x47
 800c616:	e7f7      	b.n	800c608 <__hexdig_fun+0xa>
 800c618:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c61c:	2b05      	cmp	r3, #5
 800c61e:	d801      	bhi.n	800c624 <__hexdig_fun+0x26>
 800c620:	3827      	subs	r0, #39	; 0x27
 800c622:	e7f1      	b.n	800c608 <__hexdig_fun+0xa>
 800c624:	2000      	movs	r0, #0
 800c626:	4770      	bx	lr

0800c628 <__gethex>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	ed2d 8b02 	vpush	{d8}
 800c630:	b089      	sub	sp, #36	; 0x24
 800c632:	ee08 0a10 	vmov	s16, r0
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	4bb4      	ldr	r3, [pc, #720]	; (800c90c <__gethex+0x2e4>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	468b      	mov	fp, r1
 800c642:	4690      	mov	r8, r2
 800c644:	f7f3 fd9c 	bl	8000180 <strlen>
 800c648:	9b01      	ldr	r3, [sp, #4]
 800c64a:	f8db 2000 	ldr.w	r2, [fp]
 800c64e:	4403      	add	r3, r0
 800c650:	4682      	mov	sl, r0
 800c652:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c656:	9305      	str	r3, [sp, #20]
 800c658:	1c93      	adds	r3, r2, #2
 800c65a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c65e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c662:	32fe      	adds	r2, #254	; 0xfe
 800c664:	18d1      	adds	r1, r2, r3
 800c666:	461f      	mov	r7, r3
 800c668:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c66c:	9100      	str	r1, [sp, #0]
 800c66e:	2830      	cmp	r0, #48	; 0x30
 800c670:	d0f8      	beq.n	800c664 <__gethex+0x3c>
 800c672:	f7ff ffc4 	bl	800c5fe <__hexdig_fun>
 800c676:	4604      	mov	r4, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	d13a      	bne.n	800c6f2 <__gethex+0xca>
 800c67c:	9901      	ldr	r1, [sp, #4]
 800c67e:	4652      	mov	r2, sl
 800c680:	4638      	mov	r0, r7
 800c682:	f001 fb3c 	bl	800dcfe <strncmp>
 800c686:	4605      	mov	r5, r0
 800c688:	2800      	cmp	r0, #0
 800c68a:	d168      	bne.n	800c75e <__gethex+0x136>
 800c68c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c690:	eb07 060a 	add.w	r6, r7, sl
 800c694:	f7ff ffb3 	bl	800c5fe <__hexdig_fun>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d062      	beq.n	800c762 <__gethex+0x13a>
 800c69c:	4633      	mov	r3, r6
 800c69e:	7818      	ldrb	r0, [r3, #0]
 800c6a0:	2830      	cmp	r0, #48	; 0x30
 800c6a2:	461f      	mov	r7, r3
 800c6a4:	f103 0301 	add.w	r3, r3, #1
 800c6a8:	d0f9      	beq.n	800c69e <__gethex+0x76>
 800c6aa:	f7ff ffa8 	bl	800c5fe <__hexdig_fun>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	fab0 f480 	clz	r4, r0
 800c6b4:	0964      	lsrs	r4, r4, #5
 800c6b6:	4635      	mov	r5, r6
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	4616      	mov	r6, r2
 800c6be:	3201      	adds	r2, #1
 800c6c0:	7830      	ldrb	r0, [r6, #0]
 800c6c2:	f7ff ff9c 	bl	800c5fe <__hexdig_fun>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1f8      	bne.n	800c6bc <__gethex+0x94>
 800c6ca:	9901      	ldr	r1, [sp, #4]
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f001 fb15 	bl	800dcfe <strncmp>
 800c6d4:	b980      	cbnz	r0, 800c6f8 <__gethex+0xd0>
 800c6d6:	b94d      	cbnz	r5, 800c6ec <__gethex+0xc4>
 800c6d8:	eb06 050a 	add.w	r5, r6, sl
 800c6dc:	462a      	mov	r2, r5
 800c6de:	4616      	mov	r6, r2
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	7830      	ldrb	r0, [r6, #0]
 800c6e4:	f7ff ff8b 	bl	800c5fe <__hexdig_fun>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d1f8      	bne.n	800c6de <__gethex+0xb6>
 800c6ec:	1bad      	subs	r5, r5, r6
 800c6ee:	00ad      	lsls	r5, r5, #2
 800c6f0:	e004      	b.n	800c6fc <__gethex+0xd4>
 800c6f2:	2400      	movs	r4, #0
 800c6f4:	4625      	mov	r5, r4
 800c6f6:	e7e0      	b.n	800c6ba <__gethex+0x92>
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	d1f7      	bne.n	800c6ec <__gethex+0xc4>
 800c6fc:	7833      	ldrb	r3, [r6, #0]
 800c6fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c702:	2b50      	cmp	r3, #80	; 0x50
 800c704:	d13b      	bne.n	800c77e <__gethex+0x156>
 800c706:	7873      	ldrb	r3, [r6, #1]
 800c708:	2b2b      	cmp	r3, #43	; 0x2b
 800c70a:	d02c      	beq.n	800c766 <__gethex+0x13e>
 800c70c:	2b2d      	cmp	r3, #45	; 0x2d
 800c70e:	d02e      	beq.n	800c76e <__gethex+0x146>
 800c710:	1c71      	adds	r1, r6, #1
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	7808      	ldrb	r0, [r1, #0]
 800c718:	f7ff ff71 	bl	800c5fe <__hexdig_fun>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b18      	cmp	r3, #24
 800c722:	d82c      	bhi.n	800c77e <__gethex+0x156>
 800c724:	f1a0 0210 	sub.w	r2, r0, #16
 800c728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c72c:	f7ff ff67 	bl	800c5fe <__hexdig_fun>
 800c730:	1e43      	subs	r3, r0, #1
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b18      	cmp	r3, #24
 800c736:	d91d      	bls.n	800c774 <__gethex+0x14c>
 800c738:	f1b9 0f00 	cmp.w	r9, #0
 800c73c:	d000      	beq.n	800c740 <__gethex+0x118>
 800c73e:	4252      	negs	r2, r2
 800c740:	4415      	add	r5, r2
 800c742:	f8cb 1000 	str.w	r1, [fp]
 800c746:	b1e4      	cbz	r4, 800c782 <__gethex+0x15a>
 800c748:	9b00      	ldr	r3, [sp, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	bf14      	ite	ne
 800c74e:	2700      	movne	r7, #0
 800c750:	2706      	moveq	r7, #6
 800c752:	4638      	mov	r0, r7
 800c754:	b009      	add	sp, #36	; 0x24
 800c756:	ecbd 8b02 	vpop	{d8}
 800c75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75e:	463e      	mov	r6, r7
 800c760:	4625      	mov	r5, r4
 800c762:	2401      	movs	r4, #1
 800c764:	e7ca      	b.n	800c6fc <__gethex+0xd4>
 800c766:	f04f 0900 	mov.w	r9, #0
 800c76a:	1cb1      	adds	r1, r6, #2
 800c76c:	e7d3      	b.n	800c716 <__gethex+0xee>
 800c76e:	f04f 0901 	mov.w	r9, #1
 800c772:	e7fa      	b.n	800c76a <__gethex+0x142>
 800c774:	230a      	movs	r3, #10
 800c776:	fb03 0202 	mla	r2, r3, r2, r0
 800c77a:	3a10      	subs	r2, #16
 800c77c:	e7d4      	b.n	800c728 <__gethex+0x100>
 800c77e:	4631      	mov	r1, r6
 800c780:	e7df      	b.n	800c742 <__gethex+0x11a>
 800c782:	1bf3      	subs	r3, r6, r7
 800c784:	3b01      	subs	r3, #1
 800c786:	4621      	mov	r1, r4
 800c788:	2b07      	cmp	r3, #7
 800c78a:	dc0b      	bgt.n	800c7a4 <__gethex+0x17c>
 800c78c:	ee18 0a10 	vmov	r0, s16
 800c790:	f000 fadc 	bl	800cd4c <_Balloc>
 800c794:	4604      	mov	r4, r0
 800c796:	b940      	cbnz	r0, 800c7aa <__gethex+0x182>
 800c798:	4b5d      	ldr	r3, [pc, #372]	; (800c910 <__gethex+0x2e8>)
 800c79a:	4602      	mov	r2, r0
 800c79c:	21de      	movs	r1, #222	; 0xde
 800c79e:	485d      	ldr	r0, [pc, #372]	; (800c914 <__gethex+0x2ec>)
 800c7a0:	f001 fae0 	bl	800dd64 <__assert_func>
 800c7a4:	3101      	adds	r1, #1
 800c7a6:	105b      	asrs	r3, r3, #1
 800c7a8:	e7ee      	b.n	800c788 <__gethex+0x160>
 800c7aa:	f100 0914 	add.w	r9, r0, #20
 800c7ae:	f04f 0b00 	mov.w	fp, #0
 800c7b2:	f1ca 0301 	rsb	r3, sl, #1
 800c7b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7ba:	f8cd b000 	str.w	fp, [sp]
 800c7be:	9306      	str	r3, [sp, #24]
 800c7c0:	42b7      	cmp	r7, r6
 800c7c2:	d340      	bcc.n	800c846 <__gethex+0x21e>
 800c7c4:	9802      	ldr	r0, [sp, #8]
 800c7c6:	9b00      	ldr	r3, [sp, #0]
 800c7c8:	f840 3b04 	str.w	r3, [r0], #4
 800c7cc:	eba0 0009 	sub.w	r0, r0, r9
 800c7d0:	1080      	asrs	r0, r0, #2
 800c7d2:	0146      	lsls	r6, r0, #5
 800c7d4:	6120      	str	r0, [r4, #16]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fbaa 	bl	800cf30 <__hi0bits>
 800c7dc:	1a30      	subs	r0, r6, r0
 800c7de:	f8d8 6000 	ldr.w	r6, [r8]
 800c7e2:	42b0      	cmp	r0, r6
 800c7e4:	dd63      	ble.n	800c8ae <__gethex+0x286>
 800c7e6:	1b87      	subs	r7, r0, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 ff4e 	bl	800d68c <__any_on>
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	b1a8      	cbz	r0, 800c820 <__gethex+0x1f8>
 800c7f4:	1e7b      	subs	r3, r7, #1
 800c7f6:	1159      	asrs	r1, r3, #5
 800c7f8:	f003 021f 	and.w	r2, r3, #31
 800c7fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c800:	f04f 0a01 	mov.w	sl, #1
 800c804:	fa0a f202 	lsl.w	r2, sl, r2
 800c808:	420a      	tst	r2, r1
 800c80a:	d009      	beq.n	800c820 <__gethex+0x1f8>
 800c80c:	4553      	cmp	r3, sl
 800c80e:	dd05      	ble.n	800c81c <__gethex+0x1f4>
 800c810:	1eb9      	subs	r1, r7, #2
 800c812:	4620      	mov	r0, r4
 800c814:	f000 ff3a 	bl	800d68c <__any_on>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d145      	bne.n	800c8a8 <__gethex+0x280>
 800c81c:	f04f 0a02 	mov.w	sl, #2
 800c820:	4639      	mov	r1, r7
 800c822:	4620      	mov	r0, r4
 800c824:	f7ff fe99 	bl	800c55a <rshift>
 800c828:	443d      	add	r5, r7
 800c82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c82e:	42ab      	cmp	r3, r5
 800c830:	da4c      	bge.n	800c8cc <__gethex+0x2a4>
 800c832:	ee18 0a10 	vmov	r0, s16
 800c836:	4621      	mov	r1, r4
 800c838:	f000 fac8 	bl	800cdcc <_Bfree>
 800c83c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c83e:	2300      	movs	r3, #0
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	27a3      	movs	r7, #163	; 0xa3
 800c844:	e785      	b.n	800c752 <__gethex+0x12a>
 800c846:	1e73      	subs	r3, r6, #1
 800c848:	9a05      	ldr	r2, [sp, #20]
 800c84a:	9303      	str	r3, [sp, #12]
 800c84c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c850:	4293      	cmp	r3, r2
 800c852:	d019      	beq.n	800c888 <__gethex+0x260>
 800c854:	f1bb 0f20 	cmp.w	fp, #32
 800c858:	d107      	bne.n	800c86a <__gethex+0x242>
 800c85a:	9b02      	ldr	r3, [sp, #8]
 800c85c:	9a00      	ldr	r2, [sp, #0]
 800c85e:	f843 2b04 	str.w	r2, [r3], #4
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	2300      	movs	r3, #0
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	469b      	mov	fp, r3
 800c86a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c86e:	f7ff fec6 	bl	800c5fe <__hexdig_fun>
 800c872:	9b00      	ldr	r3, [sp, #0]
 800c874:	f000 000f 	and.w	r0, r0, #15
 800c878:	fa00 f00b 	lsl.w	r0, r0, fp
 800c87c:	4303      	orrs	r3, r0
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	f10b 0b04 	add.w	fp, fp, #4
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	e00d      	b.n	800c8a4 <__gethex+0x27c>
 800c888:	9b03      	ldr	r3, [sp, #12]
 800c88a:	9a06      	ldr	r2, [sp, #24]
 800c88c:	4413      	add	r3, r2
 800c88e:	42bb      	cmp	r3, r7
 800c890:	d3e0      	bcc.n	800c854 <__gethex+0x22c>
 800c892:	4618      	mov	r0, r3
 800c894:	9901      	ldr	r1, [sp, #4]
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	4652      	mov	r2, sl
 800c89a:	f001 fa30 	bl	800dcfe <strncmp>
 800c89e:	9b07      	ldr	r3, [sp, #28]
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d1d7      	bne.n	800c854 <__gethex+0x22c>
 800c8a4:	461e      	mov	r6, r3
 800c8a6:	e78b      	b.n	800c7c0 <__gethex+0x198>
 800c8a8:	f04f 0a03 	mov.w	sl, #3
 800c8ac:	e7b8      	b.n	800c820 <__gethex+0x1f8>
 800c8ae:	da0a      	bge.n	800c8c6 <__gethex+0x29e>
 800c8b0:	1a37      	subs	r7, r6, r0
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	ee18 0a10 	vmov	r0, s16
 800c8b8:	463a      	mov	r2, r7
 800c8ba:	f000 fca3 	bl	800d204 <__lshift>
 800c8be:	1bed      	subs	r5, r5, r7
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	f100 0914 	add.w	r9, r0, #20
 800c8c6:	f04f 0a00 	mov.w	sl, #0
 800c8ca:	e7ae      	b.n	800c82a <__gethex+0x202>
 800c8cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8d0:	42a8      	cmp	r0, r5
 800c8d2:	dd72      	ble.n	800c9ba <__gethex+0x392>
 800c8d4:	1b45      	subs	r5, r0, r5
 800c8d6:	42ae      	cmp	r6, r5
 800c8d8:	dc36      	bgt.n	800c948 <__gethex+0x320>
 800c8da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d02a      	beq.n	800c938 <__gethex+0x310>
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d02c      	beq.n	800c940 <__gethex+0x318>
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d11c      	bne.n	800c924 <__gethex+0x2fc>
 800c8ea:	42ae      	cmp	r6, r5
 800c8ec:	d11a      	bne.n	800c924 <__gethex+0x2fc>
 800c8ee:	2e01      	cmp	r6, #1
 800c8f0:	d112      	bne.n	800c918 <__gethex+0x2f0>
 800c8f2:	9a04      	ldr	r2, [sp, #16]
 800c8f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8f8:	6013      	str	r3, [r2, #0]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	6123      	str	r3, [r4, #16]
 800c8fe:	f8c9 3000 	str.w	r3, [r9]
 800c902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c904:	2762      	movs	r7, #98	; 0x62
 800c906:	601c      	str	r4, [r3, #0]
 800c908:	e723      	b.n	800c752 <__gethex+0x12a>
 800c90a:	bf00      	nop
 800c90c:	0800e7dc 	.word	0x0800e7dc
 800c910:	0800e700 	.word	0x0800e700
 800c914:	0800e774 	.word	0x0800e774
 800c918:	1e71      	subs	r1, r6, #1
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 feb6 	bl	800d68c <__any_on>
 800c920:	2800      	cmp	r0, #0
 800c922:	d1e6      	bne.n	800c8f2 <__gethex+0x2ca>
 800c924:	ee18 0a10 	vmov	r0, s16
 800c928:	4621      	mov	r1, r4
 800c92a:	f000 fa4f 	bl	800cdcc <_Bfree>
 800c92e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c930:	2300      	movs	r3, #0
 800c932:	6013      	str	r3, [r2, #0]
 800c934:	2750      	movs	r7, #80	; 0x50
 800c936:	e70c      	b.n	800c752 <__gethex+0x12a>
 800c938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f2      	bne.n	800c924 <__gethex+0x2fc>
 800c93e:	e7d8      	b.n	800c8f2 <__gethex+0x2ca>
 800c940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1d5      	bne.n	800c8f2 <__gethex+0x2ca>
 800c946:	e7ed      	b.n	800c924 <__gethex+0x2fc>
 800c948:	1e6f      	subs	r7, r5, #1
 800c94a:	f1ba 0f00 	cmp.w	sl, #0
 800c94e:	d131      	bne.n	800c9b4 <__gethex+0x38c>
 800c950:	b127      	cbz	r7, 800c95c <__gethex+0x334>
 800c952:	4639      	mov	r1, r7
 800c954:	4620      	mov	r0, r4
 800c956:	f000 fe99 	bl	800d68c <__any_on>
 800c95a:	4682      	mov	sl, r0
 800c95c:	117b      	asrs	r3, r7, #5
 800c95e:	2101      	movs	r1, #1
 800c960:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c964:	f007 071f 	and.w	r7, r7, #31
 800c968:	fa01 f707 	lsl.w	r7, r1, r7
 800c96c:	421f      	tst	r7, r3
 800c96e:	4629      	mov	r1, r5
 800c970:	4620      	mov	r0, r4
 800c972:	bf18      	it	ne
 800c974:	f04a 0a02 	orrne.w	sl, sl, #2
 800c978:	1b76      	subs	r6, r6, r5
 800c97a:	f7ff fdee 	bl	800c55a <rshift>
 800c97e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c982:	2702      	movs	r7, #2
 800c984:	f1ba 0f00 	cmp.w	sl, #0
 800c988:	d048      	beq.n	800ca1c <__gethex+0x3f4>
 800c98a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d015      	beq.n	800c9be <__gethex+0x396>
 800c992:	2b03      	cmp	r3, #3
 800c994:	d017      	beq.n	800c9c6 <__gethex+0x39e>
 800c996:	2b01      	cmp	r3, #1
 800c998:	d109      	bne.n	800c9ae <__gethex+0x386>
 800c99a:	f01a 0f02 	tst.w	sl, #2
 800c99e:	d006      	beq.n	800c9ae <__gethex+0x386>
 800c9a0:	f8d9 0000 	ldr.w	r0, [r9]
 800c9a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c9a8:	f01a 0f01 	tst.w	sl, #1
 800c9ac:	d10e      	bne.n	800c9cc <__gethex+0x3a4>
 800c9ae:	f047 0710 	orr.w	r7, r7, #16
 800c9b2:	e033      	b.n	800ca1c <__gethex+0x3f4>
 800c9b4:	f04f 0a01 	mov.w	sl, #1
 800c9b8:	e7d0      	b.n	800c95c <__gethex+0x334>
 800c9ba:	2701      	movs	r7, #1
 800c9bc:	e7e2      	b.n	800c984 <__gethex+0x35c>
 800c9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c0:	f1c3 0301 	rsb	r3, r3, #1
 800c9c4:	9315      	str	r3, [sp, #84]	; 0x54
 800c9c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0f0      	beq.n	800c9ae <__gethex+0x386>
 800c9cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9d0:	f104 0314 	add.w	r3, r4, #20
 800c9d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9dc:	f04f 0c00 	mov.w	ip, #0
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9ea:	d01c      	beq.n	800ca26 <__gethex+0x3fe>
 800c9ec:	3201      	adds	r2, #1
 800c9ee:	6002      	str	r2, [r0, #0]
 800c9f0:	2f02      	cmp	r7, #2
 800c9f2:	f104 0314 	add.w	r3, r4, #20
 800c9f6:	d13f      	bne.n	800ca78 <__gethex+0x450>
 800c9f8:	f8d8 2000 	ldr.w	r2, [r8]
 800c9fc:	3a01      	subs	r2, #1
 800c9fe:	42b2      	cmp	r2, r6
 800ca00:	d10a      	bne.n	800ca18 <__gethex+0x3f0>
 800ca02:	1171      	asrs	r1, r6, #5
 800ca04:	2201      	movs	r2, #1
 800ca06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca0a:	f006 061f 	and.w	r6, r6, #31
 800ca0e:	fa02 f606 	lsl.w	r6, r2, r6
 800ca12:	421e      	tst	r6, r3
 800ca14:	bf18      	it	ne
 800ca16:	4617      	movne	r7, r2
 800ca18:	f047 0720 	orr.w	r7, r7, #32
 800ca1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca1e:	601c      	str	r4, [r3, #0]
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	601d      	str	r5, [r3, #0]
 800ca24:	e695      	b.n	800c752 <__gethex+0x12a>
 800ca26:	4299      	cmp	r1, r3
 800ca28:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca2c:	d8d8      	bhi.n	800c9e0 <__gethex+0x3b8>
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	459b      	cmp	fp, r3
 800ca32:	db19      	blt.n	800ca68 <__gethex+0x440>
 800ca34:	6861      	ldr	r1, [r4, #4]
 800ca36:	ee18 0a10 	vmov	r0, s16
 800ca3a:	3101      	adds	r1, #1
 800ca3c:	f000 f986 	bl	800cd4c <_Balloc>
 800ca40:	4681      	mov	r9, r0
 800ca42:	b918      	cbnz	r0, 800ca4c <__gethex+0x424>
 800ca44:	4b1a      	ldr	r3, [pc, #104]	; (800cab0 <__gethex+0x488>)
 800ca46:	4602      	mov	r2, r0
 800ca48:	2184      	movs	r1, #132	; 0x84
 800ca4a:	e6a8      	b.n	800c79e <__gethex+0x176>
 800ca4c:	6922      	ldr	r2, [r4, #16]
 800ca4e:	3202      	adds	r2, #2
 800ca50:	f104 010c 	add.w	r1, r4, #12
 800ca54:	0092      	lsls	r2, r2, #2
 800ca56:	300c      	adds	r0, #12
 800ca58:	f7fc fd4a 	bl	80094f0 <memcpy>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	ee18 0a10 	vmov	r0, s16
 800ca62:	f000 f9b3 	bl	800cdcc <_Bfree>
 800ca66:	464c      	mov	r4, r9
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca70:	6122      	str	r2, [r4, #16]
 800ca72:	2201      	movs	r2, #1
 800ca74:	615a      	str	r2, [r3, #20]
 800ca76:	e7bb      	b.n	800c9f0 <__gethex+0x3c8>
 800ca78:	6922      	ldr	r2, [r4, #16]
 800ca7a:	455a      	cmp	r2, fp
 800ca7c:	dd0b      	ble.n	800ca96 <__gethex+0x46e>
 800ca7e:	2101      	movs	r1, #1
 800ca80:	4620      	mov	r0, r4
 800ca82:	f7ff fd6a 	bl	800c55a <rshift>
 800ca86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca8a:	3501      	adds	r5, #1
 800ca8c:	42ab      	cmp	r3, r5
 800ca8e:	f6ff aed0 	blt.w	800c832 <__gethex+0x20a>
 800ca92:	2701      	movs	r7, #1
 800ca94:	e7c0      	b.n	800ca18 <__gethex+0x3f0>
 800ca96:	f016 061f 	ands.w	r6, r6, #31
 800ca9a:	d0fa      	beq.n	800ca92 <__gethex+0x46a>
 800ca9c:	4453      	add	r3, sl
 800ca9e:	f1c6 0620 	rsb	r6, r6, #32
 800caa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800caa6:	f000 fa43 	bl	800cf30 <__hi0bits>
 800caaa:	42b0      	cmp	r0, r6
 800caac:	dbe7      	blt.n	800ca7e <__gethex+0x456>
 800caae:	e7f0      	b.n	800ca92 <__gethex+0x46a>
 800cab0:	0800e700 	.word	0x0800e700

0800cab4 <L_shift>:
 800cab4:	f1c2 0208 	rsb	r2, r2, #8
 800cab8:	0092      	lsls	r2, r2, #2
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	f1c2 0620 	rsb	r6, r2, #32
 800cac0:	6843      	ldr	r3, [r0, #4]
 800cac2:	6804      	ldr	r4, [r0, #0]
 800cac4:	fa03 f506 	lsl.w	r5, r3, r6
 800cac8:	432c      	orrs	r4, r5
 800caca:	40d3      	lsrs	r3, r2
 800cacc:	6004      	str	r4, [r0, #0]
 800cace:	f840 3f04 	str.w	r3, [r0, #4]!
 800cad2:	4288      	cmp	r0, r1
 800cad4:	d3f4      	bcc.n	800cac0 <L_shift+0xc>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}

0800cad8 <__match>:
 800cad8:	b530      	push	{r4, r5, lr}
 800cada:	6803      	ldr	r3, [r0, #0]
 800cadc:	3301      	adds	r3, #1
 800cade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae2:	b914      	cbnz	r4, 800caea <__match+0x12>
 800cae4:	6003      	str	r3, [r0, #0]
 800cae6:	2001      	movs	r0, #1
 800cae8:	bd30      	pop	{r4, r5, pc}
 800caea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800caf2:	2d19      	cmp	r5, #25
 800caf4:	bf98      	it	ls
 800caf6:	3220      	addls	r2, #32
 800caf8:	42a2      	cmp	r2, r4
 800cafa:	d0f0      	beq.n	800cade <__match+0x6>
 800cafc:	2000      	movs	r0, #0
 800cafe:	e7f3      	b.n	800cae8 <__match+0x10>

0800cb00 <__hexnan>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	680b      	ldr	r3, [r1, #0]
 800cb06:	115e      	asrs	r6, r3, #5
 800cb08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb0c:	f013 031f 	ands.w	r3, r3, #31
 800cb10:	b087      	sub	sp, #28
 800cb12:	bf18      	it	ne
 800cb14:	3604      	addne	r6, #4
 800cb16:	2500      	movs	r5, #0
 800cb18:	1f37      	subs	r7, r6, #4
 800cb1a:	4690      	mov	r8, r2
 800cb1c:	6802      	ldr	r2, [r0, #0]
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	4682      	mov	sl, r0
 800cb22:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb26:	46b9      	mov	r9, r7
 800cb28:	463c      	mov	r4, r7
 800cb2a:	9502      	str	r5, [sp, #8]
 800cb2c:	46ab      	mov	fp, r5
 800cb2e:	7851      	ldrb	r1, [r2, #1]
 800cb30:	1c53      	adds	r3, r2, #1
 800cb32:	9303      	str	r3, [sp, #12]
 800cb34:	b341      	cbz	r1, 800cb88 <__hexnan+0x88>
 800cb36:	4608      	mov	r0, r1
 800cb38:	9205      	str	r2, [sp, #20]
 800cb3a:	9104      	str	r1, [sp, #16]
 800cb3c:	f7ff fd5f 	bl	800c5fe <__hexdig_fun>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d14f      	bne.n	800cbe4 <__hexnan+0xe4>
 800cb44:	9904      	ldr	r1, [sp, #16]
 800cb46:	9a05      	ldr	r2, [sp, #20]
 800cb48:	2920      	cmp	r1, #32
 800cb4a:	d818      	bhi.n	800cb7e <__hexnan+0x7e>
 800cb4c:	9b02      	ldr	r3, [sp, #8]
 800cb4e:	459b      	cmp	fp, r3
 800cb50:	dd13      	ble.n	800cb7a <__hexnan+0x7a>
 800cb52:	454c      	cmp	r4, r9
 800cb54:	d206      	bcs.n	800cb64 <__hexnan+0x64>
 800cb56:	2d07      	cmp	r5, #7
 800cb58:	dc04      	bgt.n	800cb64 <__hexnan+0x64>
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7ff ffa8 	bl	800cab4 <L_shift>
 800cb64:	4544      	cmp	r4, r8
 800cb66:	d950      	bls.n	800cc0a <__hexnan+0x10a>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb72:	f8cd b008 	str.w	fp, [sp, #8]
 800cb76:	464c      	mov	r4, r9
 800cb78:	461d      	mov	r5, r3
 800cb7a:	9a03      	ldr	r2, [sp, #12]
 800cb7c:	e7d7      	b.n	800cb2e <__hexnan+0x2e>
 800cb7e:	2929      	cmp	r1, #41	; 0x29
 800cb80:	d156      	bne.n	800cc30 <__hexnan+0x130>
 800cb82:	3202      	adds	r2, #2
 800cb84:	f8ca 2000 	str.w	r2, [sl]
 800cb88:	f1bb 0f00 	cmp.w	fp, #0
 800cb8c:	d050      	beq.n	800cc30 <__hexnan+0x130>
 800cb8e:	454c      	cmp	r4, r9
 800cb90:	d206      	bcs.n	800cba0 <__hexnan+0xa0>
 800cb92:	2d07      	cmp	r5, #7
 800cb94:	dc04      	bgt.n	800cba0 <__hexnan+0xa0>
 800cb96:	462a      	mov	r2, r5
 800cb98:	4649      	mov	r1, r9
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7ff ff8a 	bl	800cab4 <L_shift>
 800cba0:	4544      	cmp	r4, r8
 800cba2:	d934      	bls.n	800cc0e <__hexnan+0x10e>
 800cba4:	f1a8 0204 	sub.w	r2, r8, #4
 800cba8:	4623      	mov	r3, r4
 800cbaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbae:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbb2:	429f      	cmp	r7, r3
 800cbb4:	d2f9      	bcs.n	800cbaa <__hexnan+0xaa>
 800cbb6:	1b3b      	subs	r3, r7, r4
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	3401      	adds	r4, #1
 800cbc0:	3e03      	subs	r6, #3
 800cbc2:	42b4      	cmp	r4, r6
 800cbc4:	bf88      	it	hi
 800cbc6:	2304      	movhi	r3, #4
 800cbc8:	4443      	add	r3, r8
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f843 2b04 	str.w	r2, [r3], #4
 800cbd0:	429f      	cmp	r7, r3
 800cbd2:	d2fb      	bcs.n	800cbcc <__hexnan+0xcc>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	b91b      	cbnz	r3, 800cbe0 <__hexnan+0xe0>
 800cbd8:	4547      	cmp	r7, r8
 800cbda:	d127      	bne.n	800cc2c <__hexnan+0x12c>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	603b      	str	r3, [r7, #0]
 800cbe0:	2005      	movs	r0, #5
 800cbe2:	e026      	b.n	800cc32 <__hexnan+0x132>
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	2d08      	cmp	r5, #8
 800cbe8:	f10b 0b01 	add.w	fp, fp, #1
 800cbec:	dd06      	ble.n	800cbfc <__hexnan+0xfc>
 800cbee:	4544      	cmp	r4, r8
 800cbf0:	d9c3      	bls.n	800cb7a <__hexnan+0x7a>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbf8:	2501      	movs	r5, #1
 800cbfa:	3c04      	subs	r4, #4
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	f000 000f 	and.w	r0, r0, #15
 800cc02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cc06:	6022      	str	r2, [r4, #0]
 800cc08:	e7b7      	b.n	800cb7a <__hexnan+0x7a>
 800cc0a:	2508      	movs	r5, #8
 800cc0c:	e7b5      	b.n	800cb7a <__hexnan+0x7a>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0df      	beq.n	800cbd4 <__hexnan+0xd4>
 800cc14:	f04f 32ff 	mov.w	r2, #4294967295
 800cc18:	f1c3 0320 	rsb	r3, r3, #32
 800cc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc24:	401a      	ands	r2, r3
 800cc26:	f846 2c04 	str.w	r2, [r6, #-4]
 800cc2a:	e7d3      	b.n	800cbd4 <__hexnan+0xd4>
 800cc2c:	3f04      	subs	r7, #4
 800cc2e:	e7d1      	b.n	800cbd4 <__hexnan+0xd4>
 800cc30:	2004      	movs	r0, #4
 800cc32:	b007      	add	sp, #28
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc38 <_localeconv_r>:
 800cc38:	4800      	ldr	r0, [pc, #0]	; (800cc3c <_localeconv_r+0x4>)
 800cc3a:	4770      	bx	lr
 800cc3c:	20000174 	.word	0x20000174

0800cc40 <__retarget_lock_init_recursive>:
 800cc40:	4770      	bx	lr

0800cc42 <__retarget_lock_acquire_recursive>:
 800cc42:	4770      	bx	lr

0800cc44 <__retarget_lock_release_recursive>:
 800cc44:	4770      	bx	lr

0800cc46 <__swhatbuf_r>:
 800cc46:	b570      	push	{r4, r5, r6, lr}
 800cc48:	460e      	mov	r6, r1
 800cc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4e:	2900      	cmp	r1, #0
 800cc50:	b096      	sub	sp, #88	; 0x58
 800cc52:	4614      	mov	r4, r2
 800cc54:	461d      	mov	r5, r3
 800cc56:	da08      	bge.n	800cc6a <__swhatbuf_r+0x24>
 800cc58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	602a      	str	r2, [r5, #0]
 800cc60:	061a      	lsls	r2, r3, #24
 800cc62:	d410      	bmi.n	800cc86 <__swhatbuf_r+0x40>
 800cc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc68:	e00e      	b.n	800cc88 <__swhatbuf_r+0x42>
 800cc6a:	466a      	mov	r2, sp
 800cc6c:	f001 f8ba 	bl	800dde4 <_fstat_r>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	dbf1      	blt.n	800cc58 <__swhatbuf_r+0x12>
 800cc74:	9a01      	ldr	r2, [sp, #4]
 800cc76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc7e:	425a      	negs	r2, r3
 800cc80:	415a      	adcs	r2, r3
 800cc82:	602a      	str	r2, [r5, #0]
 800cc84:	e7ee      	b.n	800cc64 <__swhatbuf_r+0x1e>
 800cc86:	2340      	movs	r3, #64	; 0x40
 800cc88:	2000      	movs	r0, #0
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	b016      	add	sp, #88	; 0x58
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}

0800cc90 <__smakebuf_r>:
 800cc90:	898b      	ldrh	r3, [r1, #12]
 800cc92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc94:	079d      	lsls	r5, r3, #30
 800cc96:	4606      	mov	r6, r0
 800cc98:	460c      	mov	r4, r1
 800cc9a:	d507      	bpl.n	800ccac <__smakebuf_r+0x1c>
 800cc9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	6123      	str	r3, [r4, #16]
 800cca4:	2301      	movs	r3, #1
 800cca6:	6163      	str	r3, [r4, #20]
 800cca8:	b002      	add	sp, #8
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}
 800ccac:	ab01      	add	r3, sp, #4
 800ccae:	466a      	mov	r2, sp
 800ccb0:	f7ff ffc9 	bl	800cc46 <__swhatbuf_r>
 800ccb4:	9900      	ldr	r1, [sp, #0]
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7fc fc9b 	bl	80095f4 <_malloc_r>
 800ccbe:	b948      	cbnz	r0, 800ccd4 <__smakebuf_r+0x44>
 800ccc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc4:	059a      	lsls	r2, r3, #22
 800ccc6:	d4ef      	bmi.n	800cca8 <__smakebuf_r+0x18>
 800ccc8:	f023 0303 	bic.w	r3, r3, #3
 800cccc:	f043 0302 	orr.w	r3, r3, #2
 800ccd0:	81a3      	strh	r3, [r4, #12]
 800ccd2:	e7e3      	b.n	800cc9c <__smakebuf_r+0xc>
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <__smakebuf_r+0x7c>)
 800ccd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	6020      	str	r0, [r4, #0]
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	9b00      	ldr	r3, [sp, #0]
 800cce4:	6163      	str	r3, [r4, #20]
 800cce6:	9b01      	ldr	r3, [sp, #4]
 800cce8:	6120      	str	r0, [r4, #16]
 800ccea:	b15b      	cbz	r3, 800cd04 <__smakebuf_r+0x74>
 800ccec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f001 f889 	bl	800de08 <_isatty_r>
 800ccf6:	b128      	cbz	r0, 800cd04 <__smakebuf_r+0x74>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f023 0303 	bic.w	r3, r3, #3
 800ccfe:	f043 0301 	orr.w	r3, r3, #1
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	89a0      	ldrh	r0, [r4, #12]
 800cd06:	4305      	orrs	r5, r0
 800cd08:	81a5      	strh	r5, [r4, #12]
 800cd0a:	e7cd      	b.n	800cca8 <__smakebuf_r+0x18>
 800cd0c:	0800c3b9 	.word	0x0800c3b9

0800cd10 <__ascii_mbtowc>:
 800cd10:	b082      	sub	sp, #8
 800cd12:	b901      	cbnz	r1, 800cd16 <__ascii_mbtowc+0x6>
 800cd14:	a901      	add	r1, sp, #4
 800cd16:	b142      	cbz	r2, 800cd2a <__ascii_mbtowc+0x1a>
 800cd18:	b14b      	cbz	r3, 800cd2e <__ascii_mbtowc+0x1e>
 800cd1a:	7813      	ldrb	r3, [r2, #0]
 800cd1c:	600b      	str	r3, [r1, #0]
 800cd1e:	7812      	ldrb	r2, [r2, #0]
 800cd20:	1e10      	subs	r0, r2, #0
 800cd22:	bf18      	it	ne
 800cd24:	2001      	movne	r0, #1
 800cd26:	b002      	add	sp, #8
 800cd28:	4770      	bx	lr
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	e7fb      	b.n	800cd26 <__ascii_mbtowc+0x16>
 800cd2e:	f06f 0001 	mvn.w	r0, #1
 800cd32:	e7f8      	b.n	800cd26 <__ascii_mbtowc+0x16>

0800cd34 <__malloc_lock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_lock+0x8>)
 800cd36:	f7ff bf84 	b.w	800cc42 <__retarget_lock_acquire_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	200007bc 	.word	0x200007bc

0800cd40 <__malloc_unlock>:
 800cd40:	4801      	ldr	r0, [pc, #4]	; (800cd48 <__malloc_unlock+0x8>)
 800cd42:	f7ff bf7f 	b.w	800cc44 <__retarget_lock_release_recursive>
 800cd46:	bf00      	nop
 800cd48:	200007bc 	.word	0x200007bc

0800cd4c <_Balloc>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd50:	4604      	mov	r4, r0
 800cd52:	460d      	mov	r5, r1
 800cd54:	b976      	cbnz	r6, 800cd74 <_Balloc+0x28>
 800cd56:	2010      	movs	r0, #16
 800cd58:	f7fc fbba 	bl	80094d0 <malloc>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	6260      	str	r0, [r4, #36]	; 0x24
 800cd60:	b920      	cbnz	r0, 800cd6c <_Balloc+0x20>
 800cd62:	4b18      	ldr	r3, [pc, #96]	; (800cdc4 <_Balloc+0x78>)
 800cd64:	4818      	ldr	r0, [pc, #96]	; (800cdc8 <_Balloc+0x7c>)
 800cd66:	2166      	movs	r1, #102	; 0x66
 800cd68:	f000 fffc 	bl	800dd64 <__assert_func>
 800cd6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd70:	6006      	str	r6, [r0, #0]
 800cd72:	60c6      	str	r6, [r0, #12]
 800cd74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd76:	68f3      	ldr	r3, [r6, #12]
 800cd78:	b183      	cbz	r3, 800cd9c <_Balloc+0x50>
 800cd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd82:	b9b8      	cbnz	r0, 800cdb4 <_Balloc+0x68>
 800cd84:	2101      	movs	r1, #1
 800cd86:	fa01 f605 	lsl.w	r6, r1, r5
 800cd8a:	1d72      	adds	r2, r6, #5
 800cd8c:	0092      	lsls	r2, r2, #2
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fc9d 	bl	800d6ce <_calloc_r>
 800cd94:	b160      	cbz	r0, 800cdb0 <_Balloc+0x64>
 800cd96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd9a:	e00e      	b.n	800cdba <_Balloc+0x6e>
 800cd9c:	2221      	movs	r2, #33	; 0x21
 800cd9e:	2104      	movs	r1, #4
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fc94 	bl	800d6ce <_calloc_r>
 800cda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cda8:	60f0      	str	r0, [r6, #12]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e4      	bne.n	800cd7a <_Balloc+0x2e>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}
 800cdb4:	6802      	ldr	r2, [r0, #0]
 800cdb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdc0:	e7f7      	b.n	800cdb2 <_Balloc+0x66>
 800cdc2:	bf00      	nop
 800cdc4:	0800e68e 	.word	0x0800e68e
 800cdc8:	0800e7f0 	.word	0x0800e7f0

0800cdcc <_Bfree>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	b976      	cbnz	r6, 800cdf4 <_Bfree+0x28>
 800cdd6:	2010      	movs	r0, #16
 800cdd8:	f7fc fb7a 	bl	80094d0 <malloc>
 800cddc:	4602      	mov	r2, r0
 800cdde:	6268      	str	r0, [r5, #36]	; 0x24
 800cde0:	b920      	cbnz	r0, 800cdec <_Bfree+0x20>
 800cde2:	4b09      	ldr	r3, [pc, #36]	; (800ce08 <_Bfree+0x3c>)
 800cde4:	4809      	ldr	r0, [pc, #36]	; (800ce0c <_Bfree+0x40>)
 800cde6:	218a      	movs	r1, #138	; 0x8a
 800cde8:	f000 ffbc 	bl	800dd64 <__assert_func>
 800cdec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdf0:	6006      	str	r6, [r0, #0]
 800cdf2:	60c6      	str	r6, [r0, #12]
 800cdf4:	b13c      	cbz	r4, 800ce06 <_Bfree+0x3a>
 800cdf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdf8:	6862      	ldr	r2, [r4, #4]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce00:	6021      	str	r1, [r4, #0]
 800ce02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	0800e68e 	.word	0x0800e68e
 800ce0c:	0800e7f0 	.word	0x0800e7f0

0800ce10 <__multadd>:
 800ce10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce14:	690d      	ldr	r5, [r1, #16]
 800ce16:	4607      	mov	r7, r0
 800ce18:	460c      	mov	r4, r1
 800ce1a:	461e      	mov	r6, r3
 800ce1c:	f101 0c14 	add.w	ip, r1, #20
 800ce20:	2000      	movs	r0, #0
 800ce22:	f8dc 3000 	ldr.w	r3, [ip]
 800ce26:	b299      	uxth	r1, r3
 800ce28:	fb02 6101 	mla	r1, r2, r1, r6
 800ce2c:	0c1e      	lsrs	r6, r3, #16
 800ce2e:	0c0b      	lsrs	r3, r1, #16
 800ce30:	fb02 3306 	mla	r3, r2, r6, r3
 800ce34:	b289      	uxth	r1, r1
 800ce36:	3001      	adds	r0, #1
 800ce38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce3c:	4285      	cmp	r5, r0
 800ce3e:	f84c 1b04 	str.w	r1, [ip], #4
 800ce42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce46:	dcec      	bgt.n	800ce22 <__multadd+0x12>
 800ce48:	b30e      	cbz	r6, 800ce8e <__multadd+0x7e>
 800ce4a:	68a3      	ldr	r3, [r4, #8]
 800ce4c:	42ab      	cmp	r3, r5
 800ce4e:	dc19      	bgt.n	800ce84 <__multadd+0x74>
 800ce50:	6861      	ldr	r1, [r4, #4]
 800ce52:	4638      	mov	r0, r7
 800ce54:	3101      	adds	r1, #1
 800ce56:	f7ff ff79 	bl	800cd4c <_Balloc>
 800ce5a:	4680      	mov	r8, r0
 800ce5c:	b928      	cbnz	r0, 800ce6a <__multadd+0x5a>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <__multadd+0x84>)
 800ce62:	480d      	ldr	r0, [pc, #52]	; (800ce98 <__multadd+0x88>)
 800ce64:	21b5      	movs	r1, #181	; 0xb5
 800ce66:	f000 ff7d 	bl	800dd64 <__assert_func>
 800ce6a:	6922      	ldr	r2, [r4, #16]
 800ce6c:	3202      	adds	r2, #2
 800ce6e:	f104 010c 	add.w	r1, r4, #12
 800ce72:	0092      	lsls	r2, r2, #2
 800ce74:	300c      	adds	r0, #12
 800ce76:	f7fc fb3b 	bl	80094f0 <memcpy>
 800ce7a:	4621      	mov	r1, r4
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f7ff ffa5 	bl	800cdcc <_Bfree>
 800ce82:	4644      	mov	r4, r8
 800ce84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce88:	3501      	adds	r5, #1
 800ce8a:	615e      	str	r6, [r3, #20]
 800ce8c:	6125      	str	r5, [r4, #16]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	0800e700 	.word	0x0800e700
 800ce98:	0800e7f0 	.word	0x0800e7f0

0800ce9c <__s2b>:
 800ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea0:	460c      	mov	r4, r1
 800cea2:	4615      	mov	r5, r2
 800cea4:	461f      	mov	r7, r3
 800cea6:	2209      	movs	r2, #9
 800cea8:	3308      	adds	r3, #8
 800ceaa:	4606      	mov	r6, r0
 800ceac:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	db09      	blt.n	800cecc <__s2b+0x30>
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7ff ff47 	bl	800cd4c <_Balloc>
 800cebe:	b940      	cbnz	r0, 800ced2 <__s2b+0x36>
 800cec0:	4602      	mov	r2, r0
 800cec2:	4b19      	ldr	r3, [pc, #100]	; (800cf28 <__s2b+0x8c>)
 800cec4:	4819      	ldr	r0, [pc, #100]	; (800cf2c <__s2b+0x90>)
 800cec6:	21ce      	movs	r1, #206	; 0xce
 800cec8:	f000 ff4c 	bl	800dd64 <__assert_func>
 800cecc:	0052      	lsls	r2, r2, #1
 800cece:	3101      	adds	r1, #1
 800ced0:	e7f0      	b.n	800ceb4 <__s2b+0x18>
 800ced2:	9b08      	ldr	r3, [sp, #32]
 800ced4:	6143      	str	r3, [r0, #20]
 800ced6:	2d09      	cmp	r5, #9
 800ced8:	f04f 0301 	mov.w	r3, #1
 800cedc:	6103      	str	r3, [r0, #16]
 800cede:	dd16      	ble.n	800cf0e <__s2b+0x72>
 800cee0:	f104 0909 	add.w	r9, r4, #9
 800cee4:	46c8      	mov	r8, r9
 800cee6:	442c      	add	r4, r5
 800cee8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ceec:	4601      	mov	r1, r0
 800ceee:	3b30      	subs	r3, #48	; 0x30
 800cef0:	220a      	movs	r2, #10
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ff8c 	bl	800ce10 <__multadd>
 800cef8:	45a0      	cmp	r8, r4
 800cefa:	d1f5      	bne.n	800cee8 <__s2b+0x4c>
 800cefc:	f1a5 0408 	sub.w	r4, r5, #8
 800cf00:	444c      	add	r4, r9
 800cf02:	1b2d      	subs	r5, r5, r4
 800cf04:	1963      	adds	r3, r4, r5
 800cf06:	42bb      	cmp	r3, r7
 800cf08:	db04      	blt.n	800cf14 <__s2b+0x78>
 800cf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0e:	340a      	adds	r4, #10
 800cf10:	2509      	movs	r5, #9
 800cf12:	e7f6      	b.n	800cf02 <__s2b+0x66>
 800cf14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf18:	4601      	mov	r1, r0
 800cf1a:	3b30      	subs	r3, #48	; 0x30
 800cf1c:	220a      	movs	r2, #10
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f7ff ff76 	bl	800ce10 <__multadd>
 800cf24:	e7ee      	b.n	800cf04 <__s2b+0x68>
 800cf26:	bf00      	nop
 800cf28:	0800e700 	.word	0x0800e700
 800cf2c:	0800e7f0 	.word	0x0800e7f0

0800cf30 <__hi0bits>:
 800cf30:	0c03      	lsrs	r3, r0, #16
 800cf32:	041b      	lsls	r3, r3, #16
 800cf34:	b9d3      	cbnz	r3, 800cf6c <__hi0bits+0x3c>
 800cf36:	0400      	lsls	r0, r0, #16
 800cf38:	2310      	movs	r3, #16
 800cf3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf3e:	bf04      	itt	eq
 800cf40:	0200      	lsleq	r0, r0, #8
 800cf42:	3308      	addeq	r3, #8
 800cf44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf48:	bf04      	itt	eq
 800cf4a:	0100      	lsleq	r0, r0, #4
 800cf4c:	3304      	addeq	r3, #4
 800cf4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf52:	bf04      	itt	eq
 800cf54:	0080      	lsleq	r0, r0, #2
 800cf56:	3302      	addeq	r3, #2
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	db05      	blt.n	800cf68 <__hi0bits+0x38>
 800cf5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf60:	f103 0301 	add.w	r3, r3, #1
 800cf64:	bf08      	it	eq
 800cf66:	2320      	moveq	r3, #32
 800cf68:	4618      	mov	r0, r3
 800cf6a:	4770      	bx	lr
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e7e4      	b.n	800cf3a <__hi0bits+0xa>

0800cf70 <__lo0bits>:
 800cf70:	6803      	ldr	r3, [r0, #0]
 800cf72:	f013 0207 	ands.w	r2, r3, #7
 800cf76:	4601      	mov	r1, r0
 800cf78:	d00b      	beq.n	800cf92 <__lo0bits+0x22>
 800cf7a:	07da      	lsls	r2, r3, #31
 800cf7c:	d423      	bmi.n	800cfc6 <__lo0bits+0x56>
 800cf7e:	0798      	lsls	r0, r3, #30
 800cf80:	bf49      	itett	mi
 800cf82:	085b      	lsrmi	r3, r3, #1
 800cf84:	089b      	lsrpl	r3, r3, #2
 800cf86:	2001      	movmi	r0, #1
 800cf88:	600b      	strmi	r3, [r1, #0]
 800cf8a:	bf5c      	itt	pl
 800cf8c:	600b      	strpl	r3, [r1, #0]
 800cf8e:	2002      	movpl	r0, #2
 800cf90:	4770      	bx	lr
 800cf92:	b298      	uxth	r0, r3
 800cf94:	b9a8      	cbnz	r0, 800cfc2 <__lo0bits+0x52>
 800cf96:	0c1b      	lsrs	r3, r3, #16
 800cf98:	2010      	movs	r0, #16
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	b90a      	cbnz	r2, 800cfa2 <__lo0bits+0x32>
 800cf9e:	3008      	adds	r0, #8
 800cfa0:	0a1b      	lsrs	r3, r3, #8
 800cfa2:	071a      	lsls	r2, r3, #28
 800cfa4:	bf04      	itt	eq
 800cfa6:	091b      	lsreq	r3, r3, #4
 800cfa8:	3004      	addeq	r0, #4
 800cfaa:	079a      	lsls	r2, r3, #30
 800cfac:	bf04      	itt	eq
 800cfae:	089b      	lsreq	r3, r3, #2
 800cfb0:	3002      	addeq	r0, #2
 800cfb2:	07da      	lsls	r2, r3, #31
 800cfb4:	d403      	bmi.n	800cfbe <__lo0bits+0x4e>
 800cfb6:	085b      	lsrs	r3, r3, #1
 800cfb8:	f100 0001 	add.w	r0, r0, #1
 800cfbc:	d005      	beq.n	800cfca <__lo0bits+0x5a>
 800cfbe:	600b      	str	r3, [r1, #0]
 800cfc0:	4770      	bx	lr
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	e7e9      	b.n	800cf9a <__lo0bits+0x2a>
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	4770      	bx	lr
 800cfca:	2020      	movs	r0, #32
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <__i2b>:
 800cfd0:	b510      	push	{r4, lr}
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	f7ff feb9 	bl	800cd4c <_Balloc>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	b928      	cbnz	r0, 800cfea <__i2b+0x1a>
 800cfde:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <__i2b+0x24>)
 800cfe0:	4805      	ldr	r0, [pc, #20]	; (800cff8 <__i2b+0x28>)
 800cfe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cfe6:	f000 febd 	bl	800dd64 <__assert_func>
 800cfea:	2301      	movs	r3, #1
 800cfec:	6144      	str	r4, [r0, #20]
 800cfee:	6103      	str	r3, [r0, #16]
 800cff0:	bd10      	pop	{r4, pc}
 800cff2:	bf00      	nop
 800cff4:	0800e700 	.word	0x0800e700
 800cff8:	0800e7f0 	.word	0x0800e7f0

0800cffc <__multiply>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	4691      	mov	r9, r2
 800d002:	690a      	ldr	r2, [r1, #16]
 800d004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d008:	429a      	cmp	r2, r3
 800d00a:	bfb8      	it	lt
 800d00c:	460b      	movlt	r3, r1
 800d00e:	460c      	mov	r4, r1
 800d010:	bfbc      	itt	lt
 800d012:	464c      	movlt	r4, r9
 800d014:	4699      	movlt	r9, r3
 800d016:	6927      	ldr	r7, [r4, #16]
 800d018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d01c:	68a3      	ldr	r3, [r4, #8]
 800d01e:	6861      	ldr	r1, [r4, #4]
 800d020:	eb07 060a 	add.w	r6, r7, sl
 800d024:	42b3      	cmp	r3, r6
 800d026:	b085      	sub	sp, #20
 800d028:	bfb8      	it	lt
 800d02a:	3101      	addlt	r1, #1
 800d02c:	f7ff fe8e 	bl	800cd4c <_Balloc>
 800d030:	b930      	cbnz	r0, 800d040 <__multiply+0x44>
 800d032:	4602      	mov	r2, r0
 800d034:	4b44      	ldr	r3, [pc, #272]	; (800d148 <__multiply+0x14c>)
 800d036:	4845      	ldr	r0, [pc, #276]	; (800d14c <__multiply+0x150>)
 800d038:	f240 115d 	movw	r1, #349	; 0x15d
 800d03c:	f000 fe92 	bl	800dd64 <__assert_func>
 800d040:	f100 0514 	add.w	r5, r0, #20
 800d044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d048:	462b      	mov	r3, r5
 800d04a:	2200      	movs	r2, #0
 800d04c:	4543      	cmp	r3, r8
 800d04e:	d321      	bcc.n	800d094 <__multiply+0x98>
 800d050:	f104 0314 	add.w	r3, r4, #20
 800d054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d058:	f109 0314 	add.w	r3, r9, #20
 800d05c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d060:	9202      	str	r2, [sp, #8]
 800d062:	1b3a      	subs	r2, r7, r4
 800d064:	3a15      	subs	r2, #21
 800d066:	f022 0203 	bic.w	r2, r2, #3
 800d06a:	3204      	adds	r2, #4
 800d06c:	f104 0115 	add.w	r1, r4, #21
 800d070:	428f      	cmp	r7, r1
 800d072:	bf38      	it	cc
 800d074:	2204      	movcc	r2, #4
 800d076:	9201      	str	r2, [sp, #4]
 800d078:	9a02      	ldr	r2, [sp, #8]
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d80c      	bhi.n	800d09a <__multiply+0x9e>
 800d080:	2e00      	cmp	r6, #0
 800d082:	dd03      	ble.n	800d08c <__multiply+0x90>
 800d084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d05a      	beq.n	800d142 <__multiply+0x146>
 800d08c:	6106      	str	r6, [r0, #16]
 800d08e:	b005      	add	sp, #20
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	f843 2b04 	str.w	r2, [r3], #4
 800d098:	e7d8      	b.n	800d04c <__multiply+0x50>
 800d09a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d09e:	f1ba 0f00 	cmp.w	sl, #0
 800d0a2:	d024      	beq.n	800d0ee <__multiply+0xf2>
 800d0a4:	f104 0e14 	add.w	lr, r4, #20
 800d0a8:	46a9      	mov	r9, r5
 800d0aa:	f04f 0c00 	mov.w	ip, #0
 800d0ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0b2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0b6:	fa1f fb82 	uxth.w	fp, r2
 800d0ba:	b289      	uxth	r1, r1
 800d0bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0c4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0c8:	4461      	add	r1, ip
 800d0ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800d0d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d0d6:	b289      	uxth	r1, r1
 800d0d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0dc:	4577      	cmp	r7, lr
 800d0de:	f849 1b04 	str.w	r1, [r9], #4
 800d0e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0e6:	d8e2      	bhi.n	800d0ae <__multiply+0xb2>
 800d0e8:	9a01      	ldr	r2, [sp, #4]
 800d0ea:	f845 c002 	str.w	ip, [r5, r2]
 800d0ee:	9a03      	ldr	r2, [sp, #12]
 800d0f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	f1b9 0f00 	cmp.w	r9, #0
 800d0fa:	d020      	beq.n	800d13e <__multiply+0x142>
 800d0fc:	6829      	ldr	r1, [r5, #0]
 800d0fe:	f104 0c14 	add.w	ip, r4, #20
 800d102:	46ae      	mov	lr, r5
 800d104:	f04f 0a00 	mov.w	sl, #0
 800d108:	f8bc b000 	ldrh.w	fp, [ip]
 800d10c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d110:	fb09 220b 	mla	r2, r9, fp, r2
 800d114:	4492      	add	sl, r2
 800d116:	b289      	uxth	r1, r1
 800d118:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d11c:	f84e 1b04 	str.w	r1, [lr], #4
 800d120:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d124:	f8be 1000 	ldrh.w	r1, [lr]
 800d128:	0c12      	lsrs	r2, r2, #16
 800d12a:	fb09 1102 	mla	r1, r9, r2, r1
 800d12e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d132:	4567      	cmp	r7, ip
 800d134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d138:	d8e6      	bhi.n	800d108 <__multiply+0x10c>
 800d13a:	9a01      	ldr	r2, [sp, #4]
 800d13c:	50a9      	str	r1, [r5, r2]
 800d13e:	3504      	adds	r5, #4
 800d140:	e79a      	b.n	800d078 <__multiply+0x7c>
 800d142:	3e01      	subs	r6, #1
 800d144:	e79c      	b.n	800d080 <__multiply+0x84>
 800d146:	bf00      	nop
 800d148:	0800e700 	.word	0x0800e700
 800d14c:	0800e7f0 	.word	0x0800e7f0

0800d150 <__pow5mult>:
 800d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d154:	4615      	mov	r5, r2
 800d156:	f012 0203 	ands.w	r2, r2, #3
 800d15a:	4606      	mov	r6, r0
 800d15c:	460f      	mov	r7, r1
 800d15e:	d007      	beq.n	800d170 <__pow5mult+0x20>
 800d160:	4c25      	ldr	r4, [pc, #148]	; (800d1f8 <__pow5mult+0xa8>)
 800d162:	3a01      	subs	r2, #1
 800d164:	2300      	movs	r3, #0
 800d166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d16a:	f7ff fe51 	bl	800ce10 <__multadd>
 800d16e:	4607      	mov	r7, r0
 800d170:	10ad      	asrs	r5, r5, #2
 800d172:	d03d      	beq.n	800d1f0 <__pow5mult+0xa0>
 800d174:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d176:	b97c      	cbnz	r4, 800d198 <__pow5mult+0x48>
 800d178:	2010      	movs	r0, #16
 800d17a:	f7fc f9a9 	bl	80094d0 <malloc>
 800d17e:	4602      	mov	r2, r0
 800d180:	6270      	str	r0, [r6, #36]	; 0x24
 800d182:	b928      	cbnz	r0, 800d190 <__pow5mult+0x40>
 800d184:	4b1d      	ldr	r3, [pc, #116]	; (800d1fc <__pow5mult+0xac>)
 800d186:	481e      	ldr	r0, [pc, #120]	; (800d200 <__pow5mult+0xb0>)
 800d188:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d18c:	f000 fdea 	bl	800dd64 <__assert_func>
 800d190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d194:	6004      	str	r4, [r0, #0]
 800d196:	60c4      	str	r4, [r0, #12]
 800d198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d19c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1a0:	b94c      	cbnz	r4, 800d1b6 <__pow5mult+0x66>
 800d1a2:	f240 2171 	movw	r1, #625	; 0x271
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7ff ff12 	bl	800cfd0 <__i2b>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	6003      	str	r3, [r0, #0]
 800d1b6:	f04f 0900 	mov.w	r9, #0
 800d1ba:	07eb      	lsls	r3, r5, #31
 800d1bc:	d50a      	bpl.n	800d1d4 <__pow5mult+0x84>
 800d1be:	4639      	mov	r1, r7
 800d1c0:	4622      	mov	r2, r4
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7ff ff1a 	bl	800cffc <__multiply>
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7ff fdfd 	bl	800cdcc <_Bfree>
 800d1d2:	4647      	mov	r7, r8
 800d1d4:	106d      	asrs	r5, r5, #1
 800d1d6:	d00b      	beq.n	800d1f0 <__pow5mult+0xa0>
 800d1d8:	6820      	ldr	r0, [r4, #0]
 800d1da:	b938      	cbnz	r0, 800d1ec <__pow5mult+0x9c>
 800d1dc:	4622      	mov	r2, r4
 800d1de:	4621      	mov	r1, r4
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7ff ff0b 	bl	800cffc <__multiply>
 800d1e6:	6020      	str	r0, [r4, #0]
 800d1e8:	f8c0 9000 	str.w	r9, [r0]
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	e7e4      	b.n	800d1ba <__pow5mult+0x6a>
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0800e940 	.word	0x0800e940
 800d1fc:	0800e68e 	.word	0x0800e68e
 800d200:	0800e7f0 	.word	0x0800e7f0

0800d204 <__lshift>:
 800d204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d208:	460c      	mov	r4, r1
 800d20a:	6849      	ldr	r1, [r1, #4]
 800d20c:	6923      	ldr	r3, [r4, #16]
 800d20e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d212:	68a3      	ldr	r3, [r4, #8]
 800d214:	4607      	mov	r7, r0
 800d216:	4691      	mov	r9, r2
 800d218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d21c:	f108 0601 	add.w	r6, r8, #1
 800d220:	42b3      	cmp	r3, r6
 800d222:	db0b      	blt.n	800d23c <__lshift+0x38>
 800d224:	4638      	mov	r0, r7
 800d226:	f7ff fd91 	bl	800cd4c <_Balloc>
 800d22a:	4605      	mov	r5, r0
 800d22c:	b948      	cbnz	r0, 800d242 <__lshift+0x3e>
 800d22e:	4602      	mov	r2, r0
 800d230:	4b2a      	ldr	r3, [pc, #168]	; (800d2dc <__lshift+0xd8>)
 800d232:	482b      	ldr	r0, [pc, #172]	; (800d2e0 <__lshift+0xdc>)
 800d234:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d238:	f000 fd94 	bl	800dd64 <__assert_func>
 800d23c:	3101      	adds	r1, #1
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	e7ee      	b.n	800d220 <__lshift+0x1c>
 800d242:	2300      	movs	r3, #0
 800d244:	f100 0114 	add.w	r1, r0, #20
 800d248:	f100 0210 	add.w	r2, r0, #16
 800d24c:	4618      	mov	r0, r3
 800d24e:	4553      	cmp	r3, sl
 800d250:	db37      	blt.n	800d2c2 <__lshift+0xbe>
 800d252:	6920      	ldr	r0, [r4, #16]
 800d254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d258:	f104 0314 	add.w	r3, r4, #20
 800d25c:	f019 091f 	ands.w	r9, r9, #31
 800d260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d268:	d02f      	beq.n	800d2ca <__lshift+0xc6>
 800d26a:	f1c9 0e20 	rsb	lr, r9, #32
 800d26e:	468a      	mov	sl, r1
 800d270:	f04f 0c00 	mov.w	ip, #0
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	fa02 f209 	lsl.w	r2, r2, r9
 800d27a:	ea42 020c 	orr.w	r2, r2, ip
 800d27e:	f84a 2b04 	str.w	r2, [sl], #4
 800d282:	f853 2b04 	ldr.w	r2, [r3], #4
 800d286:	4298      	cmp	r0, r3
 800d288:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d28c:	d8f2      	bhi.n	800d274 <__lshift+0x70>
 800d28e:	1b03      	subs	r3, r0, r4
 800d290:	3b15      	subs	r3, #21
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	3304      	adds	r3, #4
 800d298:	f104 0215 	add.w	r2, r4, #21
 800d29c:	4290      	cmp	r0, r2
 800d29e:	bf38      	it	cc
 800d2a0:	2304      	movcc	r3, #4
 800d2a2:	f841 c003 	str.w	ip, [r1, r3]
 800d2a6:	f1bc 0f00 	cmp.w	ip, #0
 800d2aa:	d001      	beq.n	800d2b0 <__lshift+0xac>
 800d2ac:	f108 0602 	add.w	r6, r8, #2
 800d2b0:	3e01      	subs	r6, #1
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	612e      	str	r6, [r5, #16]
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	f7ff fd88 	bl	800cdcc <_Bfree>
 800d2bc:	4628      	mov	r0, r5
 800d2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	e7c1      	b.n	800d24e <__lshift+0x4a>
 800d2ca:	3904      	subs	r1, #4
 800d2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2d4:	4298      	cmp	r0, r3
 800d2d6:	d8f9      	bhi.n	800d2cc <__lshift+0xc8>
 800d2d8:	e7ea      	b.n	800d2b0 <__lshift+0xac>
 800d2da:	bf00      	nop
 800d2dc:	0800e700 	.word	0x0800e700
 800d2e0:	0800e7f0 	.word	0x0800e7f0

0800d2e4 <__mcmp>:
 800d2e4:	b530      	push	{r4, r5, lr}
 800d2e6:	6902      	ldr	r2, [r0, #16]
 800d2e8:	690c      	ldr	r4, [r1, #16]
 800d2ea:	1b12      	subs	r2, r2, r4
 800d2ec:	d10e      	bne.n	800d30c <__mcmp+0x28>
 800d2ee:	f100 0314 	add.w	r3, r0, #20
 800d2f2:	3114      	adds	r1, #20
 800d2f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d2f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d2fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d300:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d304:	42a5      	cmp	r5, r4
 800d306:	d003      	beq.n	800d310 <__mcmp+0x2c>
 800d308:	d305      	bcc.n	800d316 <__mcmp+0x32>
 800d30a:	2201      	movs	r2, #1
 800d30c:	4610      	mov	r0, r2
 800d30e:	bd30      	pop	{r4, r5, pc}
 800d310:	4283      	cmp	r3, r0
 800d312:	d3f3      	bcc.n	800d2fc <__mcmp+0x18>
 800d314:	e7fa      	b.n	800d30c <__mcmp+0x28>
 800d316:	f04f 32ff 	mov.w	r2, #4294967295
 800d31a:	e7f7      	b.n	800d30c <__mcmp+0x28>

0800d31c <__mdiff>:
 800d31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d320:	460c      	mov	r4, r1
 800d322:	4606      	mov	r6, r0
 800d324:	4611      	mov	r1, r2
 800d326:	4620      	mov	r0, r4
 800d328:	4690      	mov	r8, r2
 800d32a:	f7ff ffdb 	bl	800d2e4 <__mcmp>
 800d32e:	1e05      	subs	r5, r0, #0
 800d330:	d110      	bne.n	800d354 <__mdiff+0x38>
 800d332:	4629      	mov	r1, r5
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff fd09 	bl	800cd4c <_Balloc>
 800d33a:	b930      	cbnz	r0, 800d34a <__mdiff+0x2e>
 800d33c:	4b3a      	ldr	r3, [pc, #232]	; (800d428 <__mdiff+0x10c>)
 800d33e:	4602      	mov	r2, r0
 800d340:	f240 2132 	movw	r1, #562	; 0x232
 800d344:	4839      	ldr	r0, [pc, #228]	; (800d42c <__mdiff+0x110>)
 800d346:	f000 fd0d 	bl	800dd64 <__assert_func>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d354:	bfa4      	itt	ge
 800d356:	4643      	movge	r3, r8
 800d358:	46a0      	movge	r8, r4
 800d35a:	4630      	mov	r0, r6
 800d35c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d360:	bfa6      	itte	ge
 800d362:	461c      	movge	r4, r3
 800d364:	2500      	movge	r5, #0
 800d366:	2501      	movlt	r5, #1
 800d368:	f7ff fcf0 	bl	800cd4c <_Balloc>
 800d36c:	b920      	cbnz	r0, 800d378 <__mdiff+0x5c>
 800d36e:	4b2e      	ldr	r3, [pc, #184]	; (800d428 <__mdiff+0x10c>)
 800d370:	4602      	mov	r2, r0
 800d372:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d376:	e7e5      	b.n	800d344 <__mdiff+0x28>
 800d378:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d37c:	6926      	ldr	r6, [r4, #16]
 800d37e:	60c5      	str	r5, [r0, #12]
 800d380:	f104 0914 	add.w	r9, r4, #20
 800d384:	f108 0514 	add.w	r5, r8, #20
 800d388:	f100 0e14 	add.w	lr, r0, #20
 800d38c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d394:	f108 0210 	add.w	r2, r8, #16
 800d398:	46f2      	mov	sl, lr
 800d39a:	2100      	movs	r1, #0
 800d39c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3a4:	fa1f f883 	uxth.w	r8, r3
 800d3a8:	fa11 f18b 	uxtah	r1, r1, fp
 800d3ac:	0c1b      	lsrs	r3, r3, #16
 800d3ae:	eba1 0808 	sub.w	r8, r1, r8
 800d3b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3ba:	fa1f f888 	uxth.w	r8, r8
 800d3be:	1419      	asrs	r1, r3, #16
 800d3c0:	454e      	cmp	r6, r9
 800d3c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3c6:	f84a 3b04 	str.w	r3, [sl], #4
 800d3ca:	d8e7      	bhi.n	800d39c <__mdiff+0x80>
 800d3cc:	1b33      	subs	r3, r6, r4
 800d3ce:	3b15      	subs	r3, #21
 800d3d0:	f023 0303 	bic.w	r3, r3, #3
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	3415      	adds	r4, #21
 800d3d8:	42a6      	cmp	r6, r4
 800d3da:	bf38      	it	cc
 800d3dc:	2304      	movcc	r3, #4
 800d3de:	441d      	add	r5, r3
 800d3e0:	4473      	add	r3, lr
 800d3e2:	469e      	mov	lr, r3
 800d3e4:	462e      	mov	r6, r5
 800d3e6:	4566      	cmp	r6, ip
 800d3e8:	d30e      	bcc.n	800d408 <__mdiff+0xec>
 800d3ea:	f10c 0203 	add.w	r2, ip, #3
 800d3ee:	1b52      	subs	r2, r2, r5
 800d3f0:	f022 0203 	bic.w	r2, r2, #3
 800d3f4:	3d03      	subs	r5, #3
 800d3f6:	45ac      	cmp	ip, r5
 800d3f8:	bf38      	it	cc
 800d3fa:	2200      	movcc	r2, #0
 800d3fc:	441a      	add	r2, r3
 800d3fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d402:	b17b      	cbz	r3, 800d424 <__mdiff+0x108>
 800d404:	6107      	str	r7, [r0, #16]
 800d406:	e7a3      	b.n	800d350 <__mdiff+0x34>
 800d408:	f856 8b04 	ldr.w	r8, [r6], #4
 800d40c:	fa11 f288 	uxtah	r2, r1, r8
 800d410:	1414      	asrs	r4, r2, #16
 800d412:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d416:	b292      	uxth	r2, r2
 800d418:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d41c:	f84e 2b04 	str.w	r2, [lr], #4
 800d420:	1421      	asrs	r1, r4, #16
 800d422:	e7e0      	b.n	800d3e6 <__mdiff+0xca>
 800d424:	3f01      	subs	r7, #1
 800d426:	e7ea      	b.n	800d3fe <__mdiff+0xe2>
 800d428:	0800e700 	.word	0x0800e700
 800d42c:	0800e7f0 	.word	0x0800e7f0

0800d430 <__ulp>:
 800d430:	b082      	sub	sp, #8
 800d432:	ed8d 0b00 	vstr	d0, [sp]
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	4912      	ldr	r1, [pc, #72]	; (800d484 <__ulp+0x54>)
 800d43a:	4019      	ands	r1, r3
 800d43c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d440:	2900      	cmp	r1, #0
 800d442:	dd05      	ble.n	800d450 <__ulp+0x20>
 800d444:	2200      	movs	r2, #0
 800d446:	460b      	mov	r3, r1
 800d448:	ec43 2b10 	vmov	d0, r2, r3
 800d44c:	b002      	add	sp, #8
 800d44e:	4770      	bx	lr
 800d450:	4249      	negs	r1, r1
 800d452:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d456:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d45a:	f04f 0200 	mov.w	r2, #0
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	da04      	bge.n	800d46e <__ulp+0x3e>
 800d464:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d468:	fa41 f300 	asr.w	r3, r1, r0
 800d46c:	e7ec      	b.n	800d448 <__ulp+0x18>
 800d46e:	f1a0 0114 	sub.w	r1, r0, #20
 800d472:	291e      	cmp	r1, #30
 800d474:	bfda      	itte	le
 800d476:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d47a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d47e:	2101      	movgt	r1, #1
 800d480:	460a      	mov	r2, r1
 800d482:	e7e1      	b.n	800d448 <__ulp+0x18>
 800d484:	7ff00000 	.word	0x7ff00000

0800d488 <__b2d>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	6905      	ldr	r5, [r0, #16]
 800d48c:	f100 0714 	add.w	r7, r0, #20
 800d490:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d494:	1f2e      	subs	r6, r5, #4
 800d496:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d49a:	4620      	mov	r0, r4
 800d49c:	f7ff fd48 	bl	800cf30 <__hi0bits>
 800d4a0:	f1c0 0320 	rsb	r3, r0, #32
 800d4a4:	280a      	cmp	r0, #10
 800d4a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d524 <__b2d+0x9c>
 800d4aa:	600b      	str	r3, [r1, #0]
 800d4ac:	dc14      	bgt.n	800d4d8 <__b2d+0x50>
 800d4ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800d4b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d4b6:	42b7      	cmp	r7, r6
 800d4b8:	ea41 030c 	orr.w	r3, r1, ip
 800d4bc:	bf34      	ite	cc
 800d4be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d4c2:	2100      	movcs	r1, #0
 800d4c4:	3015      	adds	r0, #21
 800d4c6:	fa04 f000 	lsl.w	r0, r4, r0
 800d4ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800d4ce:	ea40 0201 	orr.w	r2, r0, r1
 800d4d2:	ec43 2b10 	vmov	d0, r2, r3
 800d4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4d8:	42b7      	cmp	r7, r6
 800d4da:	bf3a      	itte	cc
 800d4dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d4e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800d4e4:	2100      	movcs	r1, #0
 800d4e6:	380b      	subs	r0, #11
 800d4e8:	d017      	beq.n	800d51a <__b2d+0x92>
 800d4ea:	f1c0 0c20 	rsb	ip, r0, #32
 800d4ee:	fa04 f500 	lsl.w	r5, r4, r0
 800d4f2:	42be      	cmp	r6, r7
 800d4f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800d4f8:	ea45 0504 	orr.w	r5, r5, r4
 800d4fc:	bf8c      	ite	hi
 800d4fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d502:	2400      	movls	r4, #0
 800d504:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d508:	fa01 f000 	lsl.w	r0, r1, r0
 800d50c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d510:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d514:	ea40 0204 	orr.w	r2, r0, r4
 800d518:	e7db      	b.n	800d4d2 <__b2d+0x4a>
 800d51a:	ea44 030c 	orr.w	r3, r4, ip
 800d51e:	460a      	mov	r2, r1
 800d520:	e7d7      	b.n	800d4d2 <__b2d+0x4a>
 800d522:	bf00      	nop
 800d524:	3ff00000 	.word	0x3ff00000

0800d528 <__d2b>:
 800d528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d52c:	4689      	mov	r9, r1
 800d52e:	2101      	movs	r1, #1
 800d530:	ec57 6b10 	vmov	r6, r7, d0
 800d534:	4690      	mov	r8, r2
 800d536:	f7ff fc09 	bl	800cd4c <_Balloc>
 800d53a:	4604      	mov	r4, r0
 800d53c:	b930      	cbnz	r0, 800d54c <__d2b+0x24>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b25      	ldr	r3, [pc, #148]	; (800d5d8 <__d2b+0xb0>)
 800d542:	4826      	ldr	r0, [pc, #152]	; (800d5dc <__d2b+0xb4>)
 800d544:	f240 310a 	movw	r1, #778	; 0x30a
 800d548:	f000 fc0c 	bl	800dd64 <__assert_func>
 800d54c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d554:	bb35      	cbnz	r5, 800d5a4 <__d2b+0x7c>
 800d556:	2e00      	cmp	r6, #0
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	d028      	beq.n	800d5ae <__d2b+0x86>
 800d55c:	4668      	mov	r0, sp
 800d55e:	9600      	str	r6, [sp, #0]
 800d560:	f7ff fd06 	bl	800cf70 <__lo0bits>
 800d564:	9900      	ldr	r1, [sp, #0]
 800d566:	b300      	cbz	r0, 800d5aa <__d2b+0x82>
 800d568:	9a01      	ldr	r2, [sp, #4]
 800d56a:	f1c0 0320 	rsb	r3, r0, #32
 800d56e:	fa02 f303 	lsl.w	r3, r2, r3
 800d572:	430b      	orrs	r3, r1
 800d574:	40c2      	lsrs	r2, r0
 800d576:	6163      	str	r3, [r4, #20]
 800d578:	9201      	str	r2, [sp, #4]
 800d57a:	9b01      	ldr	r3, [sp, #4]
 800d57c:	61a3      	str	r3, [r4, #24]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bf14      	ite	ne
 800d582:	2202      	movne	r2, #2
 800d584:	2201      	moveq	r2, #1
 800d586:	6122      	str	r2, [r4, #16]
 800d588:	b1d5      	cbz	r5, 800d5c0 <__d2b+0x98>
 800d58a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d58e:	4405      	add	r5, r0
 800d590:	f8c9 5000 	str.w	r5, [r9]
 800d594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d598:	f8c8 0000 	str.w	r0, [r8]
 800d59c:	4620      	mov	r0, r4
 800d59e:	b003      	add	sp, #12
 800d5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5a8:	e7d5      	b.n	800d556 <__d2b+0x2e>
 800d5aa:	6161      	str	r1, [r4, #20]
 800d5ac:	e7e5      	b.n	800d57a <__d2b+0x52>
 800d5ae:	a801      	add	r0, sp, #4
 800d5b0:	f7ff fcde 	bl	800cf70 <__lo0bits>
 800d5b4:	9b01      	ldr	r3, [sp, #4]
 800d5b6:	6163      	str	r3, [r4, #20]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	6122      	str	r2, [r4, #16]
 800d5bc:	3020      	adds	r0, #32
 800d5be:	e7e3      	b.n	800d588 <__d2b+0x60>
 800d5c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d5c8:	f8c9 0000 	str.w	r0, [r9]
 800d5cc:	6918      	ldr	r0, [r3, #16]
 800d5ce:	f7ff fcaf 	bl	800cf30 <__hi0bits>
 800d5d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5d6:	e7df      	b.n	800d598 <__d2b+0x70>
 800d5d8:	0800e700 	.word	0x0800e700
 800d5dc:	0800e7f0 	.word	0x0800e7f0

0800d5e0 <__ratio>:
 800d5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	4688      	mov	r8, r1
 800d5e6:	4669      	mov	r1, sp
 800d5e8:	4681      	mov	r9, r0
 800d5ea:	f7ff ff4d 	bl	800d488 <__b2d>
 800d5ee:	a901      	add	r1, sp, #4
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	ec55 4b10 	vmov	r4, r5, d0
 800d5f6:	f7ff ff47 	bl	800d488 <__b2d>
 800d5fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d602:	eba3 0c02 	sub.w	ip, r3, r2
 800d606:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d60a:	1a9b      	subs	r3, r3, r2
 800d60c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d610:	ec51 0b10 	vmov	r0, r1, d0
 800d614:	2b00      	cmp	r3, #0
 800d616:	bfd6      	itet	le
 800d618:	460a      	movle	r2, r1
 800d61a:	462a      	movgt	r2, r5
 800d61c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d620:	468b      	mov	fp, r1
 800d622:	462f      	mov	r7, r5
 800d624:	bfd4      	ite	le
 800d626:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d62a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d62e:	4620      	mov	r0, r4
 800d630:	ee10 2a10 	vmov	r2, s0
 800d634:	465b      	mov	r3, fp
 800d636:	4639      	mov	r1, r7
 800d638:	f7f3 f8e0 	bl	80007fc <__aeabi_ddiv>
 800d63c:	ec41 0b10 	vmov	d0, r0, r1
 800d640:	b003      	add	sp, #12
 800d642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d646 <__copybits>:
 800d646:	3901      	subs	r1, #1
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	1149      	asrs	r1, r1, #5
 800d64c:	6914      	ldr	r4, [r2, #16]
 800d64e:	3101      	adds	r1, #1
 800d650:	f102 0314 	add.w	r3, r2, #20
 800d654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d65c:	1f05      	subs	r5, r0, #4
 800d65e:	42a3      	cmp	r3, r4
 800d660:	d30c      	bcc.n	800d67c <__copybits+0x36>
 800d662:	1aa3      	subs	r3, r4, r2
 800d664:	3b11      	subs	r3, #17
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	3211      	adds	r2, #17
 800d66c:	42a2      	cmp	r2, r4
 800d66e:	bf88      	it	hi
 800d670:	2300      	movhi	r3, #0
 800d672:	4418      	add	r0, r3
 800d674:	2300      	movs	r3, #0
 800d676:	4288      	cmp	r0, r1
 800d678:	d305      	bcc.n	800d686 <__copybits+0x40>
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
 800d67c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d680:	f845 6f04 	str.w	r6, [r5, #4]!
 800d684:	e7eb      	b.n	800d65e <__copybits+0x18>
 800d686:	f840 3b04 	str.w	r3, [r0], #4
 800d68a:	e7f4      	b.n	800d676 <__copybits+0x30>

0800d68c <__any_on>:
 800d68c:	f100 0214 	add.w	r2, r0, #20
 800d690:	6900      	ldr	r0, [r0, #16]
 800d692:	114b      	asrs	r3, r1, #5
 800d694:	4298      	cmp	r0, r3
 800d696:	b510      	push	{r4, lr}
 800d698:	db11      	blt.n	800d6be <__any_on+0x32>
 800d69a:	dd0a      	ble.n	800d6b2 <__any_on+0x26>
 800d69c:	f011 011f 	ands.w	r1, r1, #31
 800d6a0:	d007      	beq.n	800d6b2 <__any_on+0x26>
 800d6a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6a6:	fa24 f001 	lsr.w	r0, r4, r1
 800d6aa:	fa00 f101 	lsl.w	r1, r0, r1
 800d6ae:	428c      	cmp	r4, r1
 800d6b0:	d10b      	bne.n	800d6ca <__any_on+0x3e>
 800d6b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d803      	bhi.n	800d6c2 <__any_on+0x36>
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	4603      	mov	r3, r0
 800d6c0:	e7f7      	b.n	800d6b2 <__any_on+0x26>
 800d6c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	d0f5      	beq.n	800d6b6 <__any_on+0x2a>
 800d6ca:	2001      	movs	r0, #1
 800d6cc:	e7f6      	b.n	800d6bc <__any_on+0x30>

0800d6ce <_calloc_r>:
 800d6ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6d0:	fba1 2402 	umull	r2, r4, r1, r2
 800d6d4:	b94c      	cbnz	r4, 800d6ea <_calloc_r+0x1c>
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	9201      	str	r2, [sp, #4]
 800d6da:	f7fb ff8b 	bl	80095f4 <_malloc_r>
 800d6de:	9a01      	ldr	r2, [sp, #4]
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	b930      	cbnz	r0, 800d6f2 <_calloc_r+0x24>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	b003      	add	sp, #12
 800d6e8:	bd30      	pop	{r4, r5, pc}
 800d6ea:	220c      	movs	r2, #12
 800d6ec:	6002      	str	r2, [r0, #0]
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	e7f8      	b.n	800d6e4 <_calloc_r+0x16>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	f7fb ff0a 	bl	800950c <memset>
 800d6f8:	e7f4      	b.n	800d6e4 <_calloc_r+0x16>

0800d6fa <__ssputs_r>:
 800d6fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fe:	688e      	ldr	r6, [r1, #8]
 800d700:	429e      	cmp	r6, r3
 800d702:	4682      	mov	sl, r0
 800d704:	460c      	mov	r4, r1
 800d706:	4690      	mov	r8, r2
 800d708:	461f      	mov	r7, r3
 800d70a:	d838      	bhi.n	800d77e <__ssputs_r+0x84>
 800d70c:	898a      	ldrh	r2, [r1, #12]
 800d70e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d712:	d032      	beq.n	800d77a <__ssputs_r+0x80>
 800d714:	6825      	ldr	r5, [r4, #0]
 800d716:	6909      	ldr	r1, [r1, #16]
 800d718:	eba5 0901 	sub.w	r9, r5, r1
 800d71c:	6965      	ldr	r5, [r4, #20]
 800d71e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d726:	3301      	adds	r3, #1
 800d728:	444b      	add	r3, r9
 800d72a:	106d      	asrs	r5, r5, #1
 800d72c:	429d      	cmp	r5, r3
 800d72e:	bf38      	it	cc
 800d730:	461d      	movcc	r5, r3
 800d732:	0553      	lsls	r3, r2, #21
 800d734:	d531      	bpl.n	800d79a <__ssputs_r+0xa0>
 800d736:	4629      	mov	r1, r5
 800d738:	f7fb ff5c 	bl	80095f4 <_malloc_r>
 800d73c:	4606      	mov	r6, r0
 800d73e:	b950      	cbnz	r0, 800d756 <__ssputs_r+0x5c>
 800d740:	230c      	movs	r3, #12
 800d742:	f8ca 3000 	str.w	r3, [sl]
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d74c:	81a3      	strh	r3, [r4, #12]
 800d74e:	f04f 30ff 	mov.w	r0, #4294967295
 800d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d756:	6921      	ldr	r1, [r4, #16]
 800d758:	464a      	mov	r2, r9
 800d75a:	f7fb fec9 	bl	80094f0 <memcpy>
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	6126      	str	r6, [r4, #16]
 800d76c:	6165      	str	r5, [r4, #20]
 800d76e:	444e      	add	r6, r9
 800d770:	eba5 0509 	sub.w	r5, r5, r9
 800d774:	6026      	str	r6, [r4, #0]
 800d776:	60a5      	str	r5, [r4, #8]
 800d778:	463e      	mov	r6, r7
 800d77a:	42be      	cmp	r6, r7
 800d77c:	d900      	bls.n	800d780 <__ssputs_r+0x86>
 800d77e:	463e      	mov	r6, r7
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	4632      	mov	r2, r6
 800d784:	4641      	mov	r1, r8
 800d786:	f000 fb61 	bl	800de4c <memmove>
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	1b9b      	subs	r3, r3, r6
 800d78e:	60a3      	str	r3, [r4, #8]
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	4433      	add	r3, r6
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	2000      	movs	r0, #0
 800d798:	e7db      	b.n	800d752 <__ssputs_r+0x58>
 800d79a:	462a      	mov	r2, r5
 800d79c:	f000 fb70 	bl	800de80 <_realloc_r>
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d1e1      	bne.n	800d76a <__ssputs_r+0x70>
 800d7a6:	6921      	ldr	r1, [r4, #16]
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	f7fb feb7 	bl	800951c <_free_r>
 800d7ae:	e7c7      	b.n	800d740 <__ssputs_r+0x46>

0800d7b0 <_svfiprintf_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	4698      	mov	r8, r3
 800d7b6:	898b      	ldrh	r3, [r1, #12]
 800d7b8:	061b      	lsls	r3, r3, #24
 800d7ba:	b09d      	sub	sp, #116	; 0x74
 800d7bc:	4607      	mov	r7, r0
 800d7be:	460d      	mov	r5, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	d50e      	bpl.n	800d7e2 <_svfiprintf_r+0x32>
 800d7c4:	690b      	ldr	r3, [r1, #16]
 800d7c6:	b963      	cbnz	r3, 800d7e2 <_svfiprintf_r+0x32>
 800d7c8:	2140      	movs	r1, #64	; 0x40
 800d7ca:	f7fb ff13 	bl	80095f4 <_malloc_r>
 800d7ce:	6028      	str	r0, [r5, #0]
 800d7d0:	6128      	str	r0, [r5, #16]
 800d7d2:	b920      	cbnz	r0, 800d7de <_svfiprintf_r+0x2e>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7dc:	e0d1      	b.n	800d982 <_svfiprintf_r+0x1d2>
 800d7de:	2340      	movs	r3, #64	; 0x40
 800d7e0:	616b      	str	r3, [r5, #20]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e6:	2320      	movs	r3, #32
 800d7e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f0:	2330      	movs	r3, #48	; 0x30
 800d7f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d99c <_svfiprintf_r+0x1ec>
 800d7f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7fa:	f04f 0901 	mov.w	r9, #1
 800d7fe:	4623      	mov	r3, r4
 800d800:	469a      	mov	sl, r3
 800d802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d806:	b10a      	cbz	r2, 800d80c <_svfiprintf_r+0x5c>
 800d808:	2a25      	cmp	r2, #37	; 0x25
 800d80a:	d1f9      	bne.n	800d800 <_svfiprintf_r+0x50>
 800d80c:	ebba 0b04 	subs.w	fp, sl, r4
 800d810:	d00b      	beq.n	800d82a <_svfiprintf_r+0x7a>
 800d812:	465b      	mov	r3, fp
 800d814:	4622      	mov	r2, r4
 800d816:	4629      	mov	r1, r5
 800d818:	4638      	mov	r0, r7
 800d81a:	f7ff ff6e 	bl	800d6fa <__ssputs_r>
 800d81e:	3001      	adds	r0, #1
 800d820:	f000 80aa 	beq.w	800d978 <_svfiprintf_r+0x1c8>
 800d824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d826:	445a      	add	r2, fp
 800d828:	9209      	str	r2, [sp, #36]	; 0x24
 800d82a:	f89a 3000 	ldrb.w	r3, [sl]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 80a2 	beq.w	800d978 <_svfiprintf_r+0x1c8>
 800d834:	2300      	movs	r3, #0
 800d836:	f04f 32ff 	mov.w	r2, #4294967295
 800d83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d83e:	f10a 0a01 	add.w	sl, sl, #1
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	9307      	str	r3, [sp, #28]
 800d846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d84a:	931a      	str	r3, [sp, #104]	; 0x68
 800d84c:	4654      	mov	r4, sl
 800d84e:	2205      	movs	r2, #5
 800d850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d854:	4851      	ldr	r0, [pc, #324]	; (800d99c <_svfiprintf_r+0x1ec>)
 800d856:	f7f2 fc9b 	bl	8000190 <memchr>
 800d85a:	9a04      	ldr	r2, [sp, #16]
 800d85c:	b9d8      	cbnz	r0, 800d896 <_svfiprintf_r+0xe6>
 800d85e:	06d0      	lsls	r0, r2, #27
 800d860:	bf44      	itt	mi
 800d862:	2320      	movmi	r3, #32
 800d864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d868:	0711      	lsls	r1, r2, #28
 800d86a:	bf44      	itt	mi
 800d86c:	232b      	movmi	r3, #43	; 0x2b
 800d86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d872:	f89a 3000 	ldrb.w	r3, [sl]
 800d876:	2b2a      	cmp	r3, #42	; 0x2a
 800d878:	d015      	beq.n	800d8a6 <_svfiprintf_r+0xf6>
 800d87a:	9a07      	ldr	r2, [sp, #28]
 800d87c:	4654      	mov	r4, sl
 800d87e:	2000      	movs	r0, #0
 800d880:	f04f 0c0a 	mov.w	ip, #10
 800d884:	4621      	mov	r1, r4
 800d886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d88a:	3b30      	subs	r3, #48	; 0x30
 800d88c:	2b09      	cmp	r3, #9
 800d88e:	d94e      	bls.n	800d92e <_svfiprintf_r+0x17e>
 800d890:	b1b0      	cbz	r0, 800d8c0 <_svfiprintf_r+0x110>
 800d892:	9207      	str	r2, [sp, #28]
 800d894:	e014      	b.n	800d8c0 <_svfiprintf_r+0x110>
 800d896:	eba0 0308 	sub.w	r3, r0, r8
 800d89a:	fa09 f303 	lsl.w	r3, r9, r3
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	9304      	str	r3, [sp, #16]
 800d8a2:	46a2      	mov	sl, r4
 800d8a4:	e7d2      	b.n	800d84c <_svfiprintf_r+0x9c>
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	1d19      	adds	r1, r3, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	9103      	str	r1, [sp, #12]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	bfbb      	ittet	lt
 800d8b2:	425b      	neglt	r3, r3
 800d8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8b8:	9307      	strge	r3, [sp, #28]
 800d8ba:	9307      	strlt	r3, [sp, #28]
 800d8bc:	bfb8      	it	lt
 800d8be:	9204      	strlt	r2, [sp, #16]
 800d8c0:	7823      	ldrb	r3, [r4, #0]
 800d8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c4:	d10c      	bne.n	800d8e0 <_svfiprintf_r+0x130>
 800d8c6:	7863      	ldrb	r3, [r4, #1]
 800d8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ca:	d135      	bne.n	800d938 <_svfiprintf_r+0x188>
 800d8cc:	9b03      	ldr	r3, [sp, #12]
 800d8ce:	1d1a      	adds	r2, r3, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	9203      	str	r2, [sp, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	bfb8      	it	lt
 800d8d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8dc:	3402      	adds	r4, #2
 800d8de:	9305      	str	r3, [sp, #20]
 800d8e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9ac <_svfiprintf_r+0x1fc>
 800d8e4:	7821      	ldrb	r1, [r4, #0]
 800d8e6:	2203      	movs	r2, #3
 800d8e8:	4650      	mov	r0, sl
 800d8ea:	f7f2 fc51 	bl	8000190 <memchr>
 800d8ee:	b140      	cbz	r0, 800d902 <_svfiprintf_r+0x152>
 800d8f0:	2340      	movs	r3, #64	; 0x40
 800d8f2:	eba0 000a 	sub.w	r0, r0, sl
 800d8f6:	fa03 f000 	lsl.w	r0, r3, r0
 800d8fa:	9b04      	ldr	r3, [sp, #16]
 800d8fc:	4303      	orrs	r3, r0
 800d8fe:	3401      	adds	r4, #1
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d906:	4826      	ldr	r0, [pc, #152]	; (800d9a0 <_svfiprintf_r+0x1f0>)
 800d908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d90c:	2206      	movs	r2, #6
 800d90e:	f7f2 fc3f 	bl	8000190 <memchr>
 800d912:	2800      	cmp	r0, #0
 800d914:	d038      	beq.n	800d988 <_svfiprintf_r+0x1d8>
 800d916:	4b23      	ldr	r3, [pc, #140]	; (800d9a4 <_svfiprintf_r+0x1f4>)
 800d918:	bb1b      	cbnz	r3, 800d962 <_svfiprintf_r+0x1b2>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	3307      	adds	r3, #7
 800d91e:	f023 0307 	bic.w	r3, r3, #7
 800d922:	3308      	adds	r3, #8
 800d924:	9303      	str	r3, [sp, #12]
 800d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d928:	4433      	add	r3, r6
 800d92a:	9309      	str	r3, [sp, #36]	; 0x24
 800d92c:	e767      	b.n	800d7fe <_svfiprintf_r+0x4e>
 800d92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d932:	460c      	mov	r4, r1
 800d934:	2001      	movs	r0, #1
 800d936:	e7a5      	b.n	800d884 <_svfiprintf_r+0xd4>
 800d938:	2300      	movs	r3, #0
 800d93a:	3401      	adds	r4, #1
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	4619      	mov	r1, r3
 800d940:	f04f 0c0a 	mov.w	ip, #10
 800d944:	4620      	mov	r0, r4
 800d946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94a:	3a30      	subs	r2, #48	; 0x30
 800d94c:	2a09      	cmp	r2, #9
 800d94e:	d903      	bls.n	800d958 <_svfiprintf_r+0x1a8>
 800d950:	2b00      	cmp	r3, #0
 800d952:	d0c5      	beq.n	800d8e0 <_svfiprintf_r+0x130>
 800d954:	9105      	str	r1, [sp, #20]
 800d956:	e7c3      	b.n	800d8e0 <_svfiprintf_r+0x130>
 800d958:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95c:	4604      	mov	r4, r0
 800d95e:	2301      	movs	r3, #1
 800d960:	e7f0      	b.n	800d944 <_svfiprintf_r+0x194>
 800d962:	ab03      	add	r3, sp, #12
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	462a      	mov	r2, r5
 800d968:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <_svfiprintf_r+0x1f8>)
 800d96a:	a904      	add	r1, sp, #16
 800d96c:	4638      	mov	r0, r7
 800d96e:	f7fb ff55 	bl	800981c <_printf_float>
 800d972:	1c42      	adds	r2, r0, #1
 800d974:	4606      	mov	r6, r0
 800d976:	d1d6      	bne.n	800d926 <_svfiprintf_r+0x176>
 800d978:	89ab      	ldrh	r3, [r5, #12]
 800d97a:	065b      	lsls	r3, r3, #25
 800d97c:	f53f af2c 	bmi.w	800d7d8 <_svfiprintf_r+0x28>
 800d980:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d982:	b01d      	add	sp, #116	; 0x74
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	ab03      	add	r3, sp, #12
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	462a      	mov	r2, r5
 800d98e:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <_svfiprintf_r+0x1f8>)
 800d990:	a904      	add	r1, sp, #16
 800d992:	4638      	mov	r0, r7
 800d994:	f7fc f9e6 	bl	8009d64 <_printf_i>
 800d998:	e7eb      	b.n	800d972 <_svfiprintf_r+0x1c2>
 800d99a:	bf00      	nop
 800d99c:	0800e94c 	.word	0x0800e94c
 800d9a0:	0800e956 	.word	0x0800e956
 800d9a4:	0800981d 	.word	0x0800981d
 800d9a8:	0800d6fb 	.word	0x0800d6fb
 800d9ac:	0800e952 	.word	0x0800e952

0800d9b0 <__sfputc_r>:
 800d9b0:	6893      	ldr	r3, [r2, #8]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	b410      	push	{r4}
 800d9b8:	6093      	str	r3, [r2, #8]
 800d9ba:	da08      	bge.n	800d9ce <__sfputc_r+0x1e>
 800d9bc:	6994      	ldr	r4, [r2, #24]
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	db01      	blt.n	800d9c6 <__sfputc_r+0x16>
 800d9c2:	290a      	cmp	r1, #10
 800d9c4:	d103      	bne.n	800d9ce <__sfputc_r+0x1e>
 800d9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ca:	f7fd bcd5 	b.w	800b378 <__swbuf_r>
 800d9ce:	6813      	ldr	r3, [r2, #0]
 800d9d0:	1c58      	adds	r0, r3, #1
 800d9d2:	6010      	str	r0, [r2, #0]
 800d9d4:	7019      	strb	r1, [r3, #0]
 800d9d6:	4608      	mov	r0, r1
 800d9d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <__sfputs_r>:
 800d9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	460f      	mov	r7, r1
 800d9e4:	4614      	mov	r4, r2
 800d9e6:	18d5      	adds	r5, r2, r3
 800d9e8:	42ac      	cmp	r4, r5
 800d9ea:	d101      	bne.n	800d9f0 <__sfputs_r+0x12>
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e007      	b.n	800da00 <__sfputs_r+0x22>
 800d9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f4:	463a      	mov	r2, r7
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f7ff ffda 	bl	800d9b0 <__sfputc_r>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d1f3      	bne.n	800d9e8 <__sfputs_r+0xa>
 800da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da04 <_vfiprintf_r>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460d      	mov	r5, r1
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4614      	mov	r4, r2
 800da0e:	4698      	mov	r8, r3
 800da10:	4606      	mov	r6, r0
 800da12:	b118      	cbz	r0, 800da1c <_vfiprintf_r+0x18>
 800da14:	6983      	ldr	r3, [r0, #24]
 800da16:	b90b      	cbnz	r3, 800da1c <_vfiprintf_r+0x18>
 800da18:	f7fe fd02 	bl	800c420 <__sinit>
 800da1c:	4b89      	ldr	r3, [pc, #548]	; (800dc44 <_vfiprintf_r+0x240>)
 800da1e:	429d      	cmp	r5, r3
 800da20:	d11b      	bne.n	800da5a <_vfiprintf_r+0x56>
 800da22:	6875      	ldr	r5, [r6, #4]
 800da24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da26:	07d9      	lsls	r1, r3, #31
 800da28:	d405      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	059a      	lsls	r2, r3, #22
 800da2e:	d402      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da32:	f7ff f906 	bl	800cc42 <__retarget_lock_acquire_recursive>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	071b      	lsls	r3, r3, #28
 800da3a:	d501      	bpl.n	800da40 <_vfiprintf_r+0x3c>
 800da3c:	692b      	ldr	r3, [r5, #16]
 800da3e:	b9eb      	cbnz	r3, 800da7c <_vfiprintf_r+0x78>
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f7fd fcea 	bl	800b41c <__swsetup_r>
 800da48:	b1c0      	cbz	r0, 800da7c <_vfiprintf_r+0x78>
 800da4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da4c:	07dc      	lsls	r4, r3, #31
 800da4e:	d50e      	bpl.n	800da6e <_vfiprintf_r+0x6a>
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	b01d      	add	sp, #116	; 0x74
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	4b7b      	ldr	r3, [pc, #492]	; (800dc48 <_vfiprintf_r+0x244>)
 800da5c:	429d      	cmp	r5, r3
 800da5e:	d101      	bne.n	800da64 <_vfiprintf_r+0x60>
 800da60:	68b5      	ldr	r5, [r6, #8]
 800da62:	e7df      	b.n	800da24 <_vfiprintf_r+0x20>
 800da64:	4b79      	ldr	r3, [pc, #484]	; (800dc4c <_vfiprintf_r+0x248>)
 800da66:	429d      	cmp	r5, r3
 800da68:	bf08      	it	eq
 800da6a:	68f5      	ldreq	r5, [r6, #12]
 800da6c:	e7da      	b.n	800da24 <_vfiprintf_r+0x20>
 800da6e:	89ab      	ldrh	r3, [r5, #12]
 800da70:	0598      	lsls	r0, r3, #22
 800da72:	d4ed      	bmi.n	800da50 <_vfiprintf_r+0x4c>
 800da74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da76:	f7ff f8e5 	bl	800cc44 <__retarget_lock_release_recursive>
 800da7a:	e7e9      	b.n	800da50 <_vfiprintf_r+0x4c>
 800da7c:	2300      	movs	r3, #0
 800da7e:	9309      	str	r3, [sp, #36]	; 0x24
 800da80:	2320      	movs	r3, #32
 800da82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da86:	f8cd 800c 	str.w	r8, [sp, #12]
 800da8a:	2330      	movs	r3, #48	; 0x30
 800da8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc50 <_vfiprintf_r+0x24c>
 800da90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da94:	f04f 0901 	mov.w	r9, #1
 800da98:	4623      	mov	r3, r4
 800da9a:	469a      	mov	sl, r3
 800da9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daa0:	b10a      	cbz	r2, 800daa6 <_vfiprintf_r+0xa2>
 800daa2:	2a25      	cmp	r2, #37	; 0x25
 800daa4:	d1f9      	bne.n	800da9a <_vfiprintf_r+0x96>
 800daa6:	ebba 0b04 	subs.w	fp, sl, r4
 800daaa:	d00b      	beq.n	800dac4 <_vfiprintf_r+0xc0>
 800daac:	465b      	mov	r3, fp
 800daae:	4622      	mov	r2, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7ff ff93 	bl	800d9de <__sfputs_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	f000 80aa 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac0:	445a      	add	r2, fp
 800dac2:	9209      	str	r2, [sp, #36]	; 0x24
 800dac4:	f89a 3000 	ldrb.w	r3, [sl]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80a2 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dace:	2300      	movs	r3, #0
 800dad0:	f04f 32ff 	mov.w	r2, #4294967295
 800dad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad8:	f10a 0a01 	add.w	sl, sl, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	9307      	str	r3, [sp, #28]
 800dae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dae4:	931a      	str	r3, [sp, #104]	; 0x68
 800dae6:	4654      	mov	r4, sl
 800dae8:	2205      	movs	r2, #5
 800daea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daee:	4858      	ldr	r0, [pc, #352]	; (800dc50 <_vfiprintf_r+0x24c>)
 800daf0:	f7f2 fb4e 	bl	8000190 <memchr>
 800daf4:	9a04      	ldr	r2, [sp, #16]
 800daf6:	b9d8      	cbnz	r0, 800db30 <_vfiprintf_r+0x12c>
 800daf8:	06d1      	lsls	r1, r2, #27
 800dafa:	bf44      	itt	mi
 800dafc:	2320      	movmi	r3, #32
 800dafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db02:	0713      	lsls	r3, r2, #28
 800db04:	bf44      	itt	mi
 800db06:	232b      	movmi	r3, #43	; 0x2b
 800db08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db0c:	f89a 3000 	ldrb.w	r3, [sl]
 800db10:	2b2a      	cmp	r3, #42	; 0x2a
 800db12:	d015      	beq.n	800db40 <_vfiprintf_r+0x13c>
 800db14:	9a07      	ldr	r2, [sp, #28]
 800db16:	4654      	mov	r4, sl
 800db18:	2000      	movs	r0, #0
 800db1a:	f04f 0c0a 	mov.w	ip, #10
 800db1e:	4621      	mov	r1, r4
 800db20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db24:	3b30      	subs	r3, #48	; 0x30
 800db26:	2b09      	cmp	r3, #9
 800db28:	d94e      	bls.n	800dbc8 <_vfiprintf_r+0x1c4>
 800db2a:	b1b0      	cbz	r0, 800db5a <_vfiprintf_r+0x156>
 800db2c:	9207      	str	r2, [sp, #28]
 800db2e:	e014      	b.n	800db5a <_vfiprintf_r+0x156>
 800db30:	eba0 0308 	sub.w	r3, r0, r8
 800db34:	fa09 f303 	lsl.w	r3, r9, r3
 800db38:	4313      	orrs	r3, r2
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	46a2      	mov	sl, r4
 800db3e:	e7d2      	b.n	800dae6 <_vfiprintf_r+0xe2>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d19      	adds	r1, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	9103      	str	r1, [sp, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfbb      	ittet	lt
 800db4c:	425b      	neglt	r3, r3
 800db4e:	f042 0202 	orrlt.w	r2, r2, #2
 800db52:	9307      	strge	r3, [sp, #28]
 800db54:	9307      	strlt	r3, [sp, #28]
 800db56:	bfb8      	it	lt
 800db58:	9204      	strlt	r2, [sp, #16]
 800db5a:	7823      	ldrb	r3, [r4, #0]
 800db5c:	2b2e      	cmp	r3, #46	; 0x2e
 800db5e:	d10c      	bne.n	800db7a <_vfiprintf_r+0x176>
 800db60:	7863      	ldrb	r3, [r4, #1]
 800db62:	2b2a      	cmp	r3, #42	; 0x2a
 800db64:	d135      	bne.n	800dbd2 <_vfiprintf_r+0x1ce>
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9203      	str	r2, [sp, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bfb8      	it	lt
 800db72:	f04f 33ff 	movlt.w	r3, #4294967295
 800db76:	3402      	adds	r4, #2
 800db78:	9305      	str	r3, [sp, #20]
 800db7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc60 <_vfiprintf_r+0x25c>
 800db7e:	7821      	ldrb	r1, [r4, #0]
 800db80:	2203      	movs	r2, #3
 800db82:	4650      	mov	r0, sl
 800db84:	f7f2 fb04 	bl	8000190 <memchr>
 800db88:	b140      	cbz	r0, 800db9c <_vfiprintf_r+0x198>
 800db8a:	2340      	movs	r3, #64	; 0x40
 800db8c:	eba0 000a 	sub.w	r0, r0, sl
 800db90:	fa03 f000 	lsl.w	r0, r3, r0
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	4303      	orrs	r3, r0
 800db98:	3401      	adds	r4, #1
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba0:	482c      	ldr	r0, [pc, #176]	; (800dc54 <_vfiprintf_r+0x250>)
 800dba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba6:	2206      	movs	r2, #6
 800dba8:	f7f2 faf2 	bl	8000190 <memchr>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d03f      	beq.n	800dc30 <_vfiprintf_r+0x22c>
 800dbb0:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <_vfiprintf_r+0x254>)
 800dbb2:	bb1b      	cbnz	r3, 800dbfc <_vfiprintf_r+0x1f8>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	3307      	adds	r3, #7
 800dbb8:	f023 0307 	bic.w	r3, r3, #7
 800dbbc:	3308      	adds	r3, #8
 800dbbe:	9303      	str	r3, [sp, #12]
 800dbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc2:	443b      	add	r3, r7
 800dbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc6:	e767      	b.n	800da98 <_vfiprintf_r+0x94>
 800dbc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbcc:	460c      	mov	r4, r1
 800dbce:	2001      	movs	r0, #1
 800dbd0:	e7a5      	b.n	800db1e <_vfiprintf_r+0x11a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	3401      	adds	r4, #1
 800dbd6:	9305      	str	r3, [sp, #20]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	f04f 0c0a 	mov.w	ip, #10
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe4:	3a30      	subs	r2, #48	; 0x30
 800dbe6:	2a09      	cmp	r2, #9
 800dbe8:	d903      	bls.n	800dbf2 <_vfiprintf_r+0x1ee>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0c5      	beq.n	800db7a <_vfiprintf_r+0x176>
 800dbee:	9105      	str	r1, [sp, #20]
 800dbf0:	e7c3      	b.n	800db7a <_vfiprintf_r+0x176>
 800dbf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e7f0      	b.n	800dbde <_vfiprintf_r+0x1da>
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	462a      	mov	r2, r5
 800dc02:	4b16      	ldr	r3, [pc, #88]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc04:	a904      	add	r1, sp, #16
 800dc06:	4630      	mov	r0, r6
 800dc08:	f7fb fe08 	bl	800981c <_printf_float>
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	1c78      	adds	r0, r7, #1
 800dc10:	d1d6      	bne.n	800dbc0 <_vfiprintf_r+0x1bc>
 800dc12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc14:	07d9      	lsls	r1, r3, #31
 800dc16:	d405      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc18:	89ab      	ldrh	r3, [r5, #12]
 800dc1a:	059a      	lsls	r2, r3, #22
 800dc1c:	d402      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc20:	f7ff f810 	bl	800cc44 <__retarget_lock_release_recursive>
 800dc24:	89ab      	ldrh	r3, [r5, #12]
 800dc26:	065b      	lsls	r3, r3, #25
 800dc28:	f53f af12 	bmi.w	800da50 <_vfiprintf_r+0x4c>
 800dc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2e:	e711      	b.n	800da54 <_vfiprintf_r+0x50>
 800dc30:	ab03      	add	r3, sp, #12
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	462a      	mov	r2, r5
 800dc36:	4b09      	ldr	r3, [pc, #36]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc38:	a904      	add	r1, sp, #16
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f7fc f892 	bl	8009d64 <_printf_i>
 800dc40:	e7e4      	b.n	800dc0c <_vfiprintf_r+0x208>
 800dc42:	bf00      	nop
 800dc44:	0800e734 	.word	0x0800e734
 800dc48:	0800e754 	.word	0x0800e754
 800dc4c:	0800e714 	.word	0x0800e714
 800dc50:	0800e94c 	.word	0x0800e94c
 800dc54:	0800e956 	.word	0x0800e956
 800dc58:	0800981d 	.word	0x0800981d
 800dc5c:	0800d9df 	.word	0x0800d9df
 800dc60:	0800e952 	.word	0x0800e952
 800dc64:	00000000 	.word	0x00000000

0800dc68 <nan>:
 800dc68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc70 <nan+0x8>
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	00000000 	.word	0x00000000
 800dc74:	7ff80000 	.word	0x7ff80000

0800dc78 <__sread>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc80:	f000 f92e 	bl	800dee0 <_read_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	bfab      	itete	ge
 800dc88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc8a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc8c:	181b      	addge	r3, r3, r0
 800dc8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc92:	bfac      	ite	ge
 800dc94:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc96:	81a3      	strhlt	r3, [r4, #12]
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <__swrite>:
 800dc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9e:	461f      	mov	r7, r3
 800dca0:	898b      	ldrh	r3, [r1, #12]
 800dca2:	05db      	lsls	r3, r3, #23
 800dca4:	4605      	mov	r5, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	4616      	mov	r6, r2
 800dcaa:	d505      	bpl.n	800dcb8 <__swrite+0x1e>
 800dcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f000 f8b8 	bl	800de28 <_lseek_r>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcc2:	81a3      	strh	r3, [r4, #12]
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	4628      	mov	r0, r5
 800dcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcce:	f000 b837 	b.w	800dd40 <_write_r>

0800dcd2 <__sseek>:
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcda:	f000 f8a5 	bl	800de28 <_lseek_r>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	bf15      	itete	ne
 800dce4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcee:	81a3      	strheq	r3, [r4, #12]
 800dcf0:	bf18      	it	ne
 800dcf2:	81a3      	strhne	r3, [r4, #12]
 800dcf4:	bd10      	pop	{r4, pc}

0800dcf6 <__sclose>:
 800dcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcfa:	f000 b851 	b.w	800dda0 <_close_r>

0800dcfe <strncmp>:
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	b17a      	cbz	r2, 800dd22 <strncmp+0x24>
 800dd02:	4603      	mov	r3, r0
 800dd04:	3901      	subs	r1, #1
 800dd06:	1884      	adds	r4, r0, r2
 800dd08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd10:	4290      	cmp	r0, r2
 800dd12:	d101      	bne.n	800dd18 <strncmp+0x1a>
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	d101      	bne.n	800dd1c <strncmp+0x1e>
 800dd18:	1a80      	subs	r0, r0, r2
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1f3      	bne.n	800dd08 <strncmp+0xa>
 800dd20:	e7fa      	b.n	800dd18 <strncmp+0x1a>
 800dd22:	4610      	mov	r0, r2
 800dd24:	e7f9      	b.n	800dd1a <strncmp+0x1c>

0800dd26 <__ascii_wctomb>:
 800dd26:	b149      	cbz	r1, 800dd3c <__ascii_wctomb+0x16>
 800dd28:	2aff      	cmp	r2, #255	; 0xff
 800dd2a:	bf85      	ittet	hi
 800dd2c:	238a      	movhi	r3, #138	; 0x8a
 800dd2e:	6003      	strhi	r3, [r0, #0]
 800dd30:	700a      	strbls	r2, [r1, #0]
 800dd32:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd36:	bf98      	it	ls
 800dd38:	2001      	movls	r0, #1
 800dd3a:	4770      	bx	lr
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	4770      	bx	lr

0800dd40 <_write_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d07      	ldr	r5, [pc, #28]	; (800dd60 <_write_r+0x20>)
 800dd44:	4604      	mov	r4, r0
 800dd46:	4608      	mov	r0, r1
 800dd48:	4611      	mov	r1, r2
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	602a      	str	r2, [r5, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f7f5 fe2f 	bl	80039b2 <_write>
 800dd54:	1c43      	adds	r3, r0, #1
 800dd56:	d102      	bne.n	800dd5e <_write_r+0x1e>
 800dd58:	682b      	ldr	r3, [r5, #0]
 800dd5a:	b103      	cbz	r3, 800dd5e <_write_r+0x1e>
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	200007c0 	.word	0x200007c0

0800dd64 <__assert_func>:
 800dd64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd66:	4614      	mov	r4, r2
 800dd68:	461a      	mov	r2, r3
 800dd6a:	4b09      	ldr	r3, [pc, #36]	; (800dd90 <__assert_func+0x2c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4605      	mov	r5, r0
 800dd70:	68d8      	ldr	r0, [r3, #12]
 800dd72:	b14c      	cbz	r4, 800dd88 <__assert_func+0x24>
 800dd74:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <__assert_func+0x30>)
 800dd76:	9100      	str	r1, [sp, #0]
 800dd78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd7c:	4906      	ldr	r1, [pc, #24]	; (800dd98 <__assert_func+0x34>)
 800dd7e:	462b      	mov	r3, r5
 800dd80:	f000 f81e 	bl	800ddc0 <fiprintf>
 800dd84:	f000 f8be 	bl	800df04 <abort>
 800dd88:	4b04      	ldr	r3, [pc, #16]	; (800dd9c <__assert_func+0x38>)
 800dd8a:	461c      	mov	r4, r3
 800dd8c:	e7f3      	b.n	800dd76 <__assert_func+0x12>
 800dd8e:	bf00      	nop
 800dd90:	2000001c 	.word	0x2000001c
 800dd94:	0800e95d 	.word	0x0800e95d
 800dd98:	0800e96a 	.word	0x0800e96a
 800dd9c:	0800e998 	.word	0x0800e998

0800dda0 <_close_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d06      	ldr	r5, [pc, #24]	; (800ddbc <_close_r+0x1c>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	602b      	str	r3, [r5, #0]
 800ddac:	f7f5 fe1d 	bl	80039ea <_close>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d102      	bne.n	800ddba <_close_r+0x1a>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	b103      	cbz	r3, 800ddba <_close_r+0x1a>
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	200007c0 	.word	0x200007c0

0800ddc0 <fiprintf>:
 800ddc0:	b40e      	push	{r1, r2, r3}
 800ddc2:	b503      	push	{r0, r1, lr}
 800ddc4:	4601      	mov	r1, r0
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	4805      	ldr	r0, [pc, #20]	; (800dde0 <fiprintf+0x20>)
 800ddca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddce:	6800      	ldr	r0, [r0, #0]
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	f7ff fe17 	bl	800da04 <_vfiprintf_r>
 800ddd6:	b002      	add	sp, #8
 800ddd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dddc:	b003      	add	sp, #12
 800ddde:	4770      	bx	lr
 800dde0:	2000001c 	.word	0x2000001c

0800dde4 <_fstat_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4d07      	ldr	r5, [pc, #28]	; (800de04 <_fstat_r+0x20>)
 800dde8:	2300      	movs	r3, #0
 800ddea:	4604      	mov	r4, r0
 800ddec:	4608      	mov	r0, r1
 800ddee:	4611      	mov	r1, r2
 800ddf0:	602b      	str	r3, [r5, #0]
 800ddf2:	f7f5 fe06 	bl	8003a02 <_fstat>
 800ddf6:	1c43      	adds	r3, r0, #1
 800ddf8:	d102      	bne.n	800de00 <_fstat_r+0x1c>
 800ddfa:	682b      	ldr	r3, [r5, #0]
 800ddfc:	b103      	cbz	r3, 800de00 <_fstat_r+0x1c>
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	bd38      	pop	{r3, r4, r5, pc}
 800de02:	bf00      	nop
 800de04:	200007c0 	.word	0x200007c0

0800de08 <_isatty_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d06      	ldr	r5, [pc, #24]	; (800de24 <_isatty_r+0x1c>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	602b      	str	r3, [r5, #0]
 800de14:	f7f5 fe05 	bl	8003a22 <_isatty>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_isatty_r+0x1a>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_isatty_r+0x1a>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	200007c0 	.word	0x200007c0

0800de28 <_lseek_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4d07      	ldr	r5, [pc, #28]	; (800de48 <_lseek_r+0x20>)
 800de2c:	4604      	mov	r4, r0
 800de2e:	4608      	mov	r0, r1
 800de30:	4611      	mov	r1, r2
 800de32:	2200      	movs	r2, #0
 800de34:	602a      	str	r2, [r5, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	f7f5 fdfe 	bl	8003a38 <_lseek>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d102      	bne.n	800de46 <_lseek_r+0x1e>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	b103      	cbz	r3, 800de46 <_lseek_r+0x1e>
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	200007c0 	.word	0x200007c0

0800de4c <memmove>:
 800de4c:	4288      	cmp	r0, r1
 800de4e:	b510      	push	{r4, lr}
 800de50:	eb01 0402 	add.w	r4, r1, r2
 800de54:	d902      	bls.n	800de5c <memmove+0x10>
 800de56:	4284      	cmp	r4, r0
 800de58:	4623      	mov	r3, r4
 800de5a:	d807      	bhi.n	800de6c <memmove+0x20>
 800de5c:	1e43      	subs	r3, r0, #1
 800de5e:	42a1      	cmp	r1, r4
 800de60:	d008      	beq.n	800de74 <memmove+0x28>
 800de62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de6a:	e7f8      	b.n	800de5e <memmove+0x12>
 800de6c:	4402      	add	r2, r0
 800de6e:	4601      	mov	r1, r0
 800de70:	428a      	cmp	r2, r1
 800de72:	d100      	bne.n	800de76 <memmove+0x2a>
 800de74:	bd10      	pop	{r4, pc}
 800de76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de7e:	e7f7      	b.n	800de70 <memmove+0x24>

0800de80 <_realloc_r>:
 800de80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de84:	4680      	mov	r8, r0
 800de86:	4614      	mov	r4, r2
 800de88:	460e      	mov	r6, r1
 800de8a:	b921      	cbnz	r1, 800de96 <_realloc_r+0x16>
 800de8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de90:	4611      	mov	r1, r2
 800de92:	f7fb bbaf 	b.w	80095f4 <_malloc_r>
 800de96:	b92a      	cbnz	r2, 800dea4 <_realloc_r+0x24>
 800de98:	f7fb fb40 	bl	800951c <_free_r>
 800de9c:	4625      	mov	r5, r4
 800de9e:	4628      	mov	r0, r5
 800dea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea4:	f000 f835 	bl	800df12 <_malloc_usable_size_r>
 800dea8:	4284      	cmp	r4, r0
 800deaa:	4607      	mov	r7, r0
 800deac:	d802      	bhi.n	800deb4 <_realloc_r+0x34>
 800deae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800deb2:	d812      	bhi.n	800deda <_realloc_r+0x5a>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4640      	mov	r0, r8
 800deb8:	f7fb fb9c 	bl	80095f4 <_malloc_r>
 800debc:	4605      	mov	r5, r0
 800debe:	2800      	cmp	r0, #0
 800dec0:	d0ed      	beq.n	800de9e <_realloc_r+0x1e>
 800dec2:	42bc      	cmp	r4, r7
 800dec4:	4622      	mov	r2, r4
 800dec6:	4631      	mov	r1, r6
 800dec8:	bf28      	it	cs
 800deca:	463a      	movcs	r2, r7
 800decc:	f7fb fb10 	bl	80094f0 <memcpy>
 800ded0:	4631      	mov	r1, r6
 800ded2:	4640      	mov	r0, r8
 800ded4:	f7fb fb22 	bl	800951c <_free_r>
 800ded8:	e7e1      	b.n	800de9e <_realloc_r+0x1e>
 800deda:	4635      	mov	r5, r6
 800dedc:	e7df      	b.n	800de9e <_realloc_r+0x1e>
	...

0800dee0 <_read_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_read_r+0x20>)
 800dee4:	4604      	mov	r4, r0
 800dee6:	4608      	mov	r0, r1
 800dee8:	4611      	mov	r1, r2
 800deea:	2200      	movs	r2, #0
 800deec:	602a      	str	r2, [r5, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	f7f5 fd42 	bl	8003978 <_read>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	d102      	bne.n	800defe <_read_r+0x1e>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	b103      	cbz	r3, 800defe <_read_r+0x1e>
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	200007c0 	.word	0x200007c0

0800df04 <abort>:
 800df04:	b508      	push	{r3, lr}
 800df06:	2006      	movs	r0, #6
 800df08:	f000 f834 	bl	800df74 <raise>
 800df0c:	2001      	movs	r0, #1
 800df0e:	f7f5 fd29 	bl	8003964 <_exit>

0800df12 <_malloc_usable_size_r>:
 800df12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df16:	1f18      	subs	r0, r3, #4
 800df18:	2b00      	cmp	r3, #0
 800df1a:	bfbc      	itt	lt
 800df1c:	580b      	ldrlt	r3, [r1, r0]
 800df1e:	18c0      	addlt	r0, r0, r3
 800df20:	4770      	bx	lr

0800df22 <_raise_r>:
 800df22:	291f      	cmp	r1, #31
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4604      	mov	r4, r0
 800df28:	460d      	mov	r5, r1
 800df2a:	d904      	bls.n	800df36 <_raise_r+0x14>
 800df2c:	2316      	movs	r3, #22
 800df2e:	6003      	str	r3, [r0, #0]
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	bd38      	pop	{r3, r4, r5, pc}
 800df36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df38:	b112      	cbz	r2, 800df40 <_raise_r+0x1e>
 800df3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df3e:	b94b      	cbnz	r3, 800df54 <_raise_r+0x32>
 800df40:	4620      	mov	r0, r4
 800df42:	f000 f831 	bl	800dfa8 <_getpid_r>
 800df46:	462a      	mov	r2, r5
 800df48:	4601      	mov	r1, r0
 800df4a:	4620      	mov	r0, r4
 800df4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df50:	f000 b818 	b.w	800df84 <_kill_r>
 800df54:	2b01      	cmp	r3, #1
 800df56:	d00a      	beq.n	800df6e <_raise_r+0x4c>
 800df58:	1c59      	adds	r1, r3, #1
 800df5a:	d103      	bne.n	800df64 <_raise_r+0x42>
 800df5c:	2316      	movs	r3, #22
 800df5e:	6003      	str	r3, [r0, #0]
 800df60:	2001      	movs	r0, #1
 800df62:	e7e7      	b.n	800df34 <_raise_r+0x12>
 800df64:	2400      	movs	r4, #0
 800df66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df6a:	4628      	mov	r0, r5
 800df6c:	4798      	blx	r3
 800df6e:	2000      	movs	r0, #0
 800df70:	e7e0      	b.n	800df34 <_raise_r+0x12>
	...

0800df74 <raise>:
 800df74:	4b02      	ldr	r3, [pc, #8]	; (800df80 <raise+0xc>)
 800df76:	4601      	mov	r1, r0
 800df78:	6818      	ldr	r0, [r3, #0]
 800df7a:	f7ff bfd2 	b.w	800df22 <_raise_r>
 800df7e:	bf00      	nop
 800df80:	2000001c 	.word	0x2000001c

0800df84 <_kill_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4d07      	ldr	r5, [pc, #28]	; (800dfa4 <_kill_r+0x20>)
 800df88:	2300      	movs	r3, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	4608      	mov	r0, r1
 800df8e:	4611      	mov	r1, r2
 800df90:	602b      	str	r3, [r5, #0]
 800df92:	f7f5 fcd7 	bl	8003944 <_kill>
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	d102      	bne.n	800dfa0 <_kill_r+0x1c>
 800df9a:	682b      	ldr	r3, [r5, #0]
 800df9c:	b103      	cbz	r3, 800dfa0 <_kill_r+0x1c>
 800df9e:	6023      	str	r3, [r4, #0]
 800dfa0:	bd38      	pop	{r3, r4, r5, pc}
 800dfa2:	bf00      	nop
 800dfa4:	200007c0 	.word	0x200007c0

0800dfa8 <_getpid_r>:
 800dfa8:	f7f5 bcc4 	b.w	8003934 <_getpid>

0800dfac <_init>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	bf00      	nop
 800dfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb2:	bc08      	pop	{r3}
 800dfb4:	469e      	mov	lr, r3
 800dfb6:	4770      	bx	lr

0800dfb8 <_fini>:
 800dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfba:	bf00      	nop
 800dfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfbe:	bc08      	pop	{r3}
 800dfc0:	469e      	mov	lr, r3
 800dfc2:	4770      	bx	lr
